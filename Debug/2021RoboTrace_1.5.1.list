
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017850  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  08017a10  08017a10  00027a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018504  08018504  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018504  08018504  00028504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801850c  0801850c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801850c  0801850c  0002850c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018514  08018514  00028514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018518  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bc30  200001e0  080186f4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003be10  080186f4  0003be10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000379b1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a67  00000000  00000000  00067bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e0  00000000  00000000  0006f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f10  00000000  00000000  00071808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037742  00000000  00000000  00073718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025bef  00000000  00000000  000aae5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110931  00000000  00000000  000d0a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e137a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4dc  00000000  00000000  001e13f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080179f8 	.word	0x080179f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080179f8 	.word	0x080179f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fc62 	bl	80088a0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039904 	.word	0x20039904

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fc4a 	bl	80088a0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039904 	.word	0x20039904

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fad3 	bl	80085cc <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 f83a 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 f834 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 f82e 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 f828 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 f822 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 f81c 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 f816 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 f810 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 f80a 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 f804 	bl	80070a0 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fff8 	bl	80070a0 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fff2 	bl	80070a0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fbbd 	bl	80148a8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b fa12 	bl	800c5d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b fa0e 	bl	800c5d0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b58 	.word	0x20039b58
 80011d0:	2003983c 	.word	0x2003983c
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f977 	bl	800178c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f98b 	bl	80017b8 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fde4 	bl	8011084 <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20038748 	.word	0x20038748

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 fa3f 	bl	8013988 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fe28 	bl	801116c <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fe23 	bl	801116c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f fb91 	bl	8010c5a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f958 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	08017a10 	.word	0x08017a10
 8001564:	200386b8 	.word	0x200386b8
 8001568:	20038748 	.word	0x20038748
 800156c:	20038738 	.word	0x20038738

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f900 	bl	800178c <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fd9f 	bl	80110d8 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f010 f80a 	bl	80115b4 <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fd99 	bl	80110d8 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f907 	bl	80017b8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f012 f9da 	bl	8013988 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fdc6 	bl	801116c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f fb34 	bl	8010c5a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f8fb 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fd38 	bl	8011084 <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200385b8 	.word	0x200385b8
 8001624:	20037478 	.word	0x20037478
 8001628:	08017a2c 	.word	0x08017a2c
 800162c:	08017a10 	.word	0x08017a10
 8001630:	200386b8 	.word	0x200386b8
 8001634:	20038748 	.word	0x20038748
 8001638:	20038738 	.word	0x20038738

0800163c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f898 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f8ac 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_float+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_float+0x84>)
 8001672:	f012 f9dd 	bl	8013a30 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_float+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_float+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_float+0x84>)
 800169c:	f010 f968 	bl	8011970 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f8a1 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_float+0x88>)
 80016ac:	f00f fcea 	bl	8011084 <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08017a1c 	.word	0x08017a1c
 80016c0:	200386b8 	.word	0x200386b8
 80016c4:	20038748 	.word	0x20038748

080016c8 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f852 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e8:	f000 f866 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ec:	e019      	b.n	8001722 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4913      	ldr	r1, [pc, #76]	; (8001748 <sd_read_array_double+0x80>)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <sd_read_array_double+0x84>)
 80016fe:	f012 f997 	bl	8013a30 <siscanf>
		i++;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800170e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	db03      	blt.n	8001722 <sd_read_array_double+0x5a>
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <sd_read_array_double+0x88>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <sd_read_array_double+0x84>)
 8001728:	f010 f922 	bl	8011970 <f_gets>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1dd      	bne.n	80016ee <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001732:	f000 f85b 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <sd_read_array_double+0x88>)
 8001738:	f00f fca4 	bl	8011084 <f_close>

	return ret;
 800173c:	7d7b      	ldrb	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08017a28 	.word	0x08017a28
 800174c:	200386b8 	.word	0x200386b8
 8001750:	20038748 	.word	0x20038748

08001754 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800175e:	2201      	movs	r2, #1
 8001760:	4908      	ldr	r1, [pc, #32]	; (8001784 <sd_mount+0x30>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <sd_mount+0x34>)
 8001764:	f00e ff06 	bl	8010574 <f_mount>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <sd_mount+0x20>
 800176e:	2301      	movs	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e001      	b.n	8001778 <sd_mount+0x24>
	else ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001778:	79fb      	ldrb	r3, [r7, #7]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08017a38 	.word	0x08017a38
 8001788:	20037578 	.word	0x20037578

0800178c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <create_path+0x24>)
 800179a:	f012 f9b8 	bl	8013b0e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <create_path+0x28>)
 80017a2:	f012 f9b4 	bl	8013b0e <strcpy>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200385b8 	.word	0x200385b8
 80017b4:	20037478 	.word	0x20037478

080017b8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <fopen_folder_and_file+0x24>)
 80017be:	f00f ffbb 	bl	8011738 <f_mkdir>

	f_chdir(dirpath);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <fopen_folder_and_file+0x24>)
 80017c4:	f00f fc88 	bl	80110d8 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c8:	2213      	movs	r2, #19
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x28>)
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <fopen_folder_and_file+0x2c>)
 80017ce:	f00e ff17 	bl	8010600 <f_open>

	f_chdir("..");
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <fopen_folder_and_file+0x30>)
 80017d4:	f00f fc80 	bl	80110d8 <f_chdir>


}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200385b8 	.word	0x200385b8
 80017e0:	20037478 	.word	0x20037478
 80017e4:	20038748 	.word	0x20038748
 80017e8:	08017a2c 	.word	0x08017a2c

080017ec <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e007      	b.n	8001808 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <bufclear+0x30>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	ddf4      	ble.n	80017f8 <bufclear+0xc>
	}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200386b8 	.word	0x200386b8

08001820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <read_byte+0x54>)
 800183c:	f006 fec6 	bl	80085cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001840:	f107 010f 	add.w	r1, r7, #15
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <read_byte+0x58>)
 800184a:	f00a f887 	bl	800b95c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800184e:	f107 010e 	add.w	r1, r7, #14
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <read_byte+0x58>)
 8001858:	f00a f9b4 	bl	800bbc4 <HAL_SPI_Receive>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <read_byte+0x54>)
 8001864:	f006 feb2 	bl	80085cc <HAL_GPIO_WritePin>

	return val;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	200397e4 	.word	0x200397e4

0800187c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <write_byte+0x54>)
 800189e:	f006 fe95 	bl	80085cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <write_byte+0x58>)
 80018ac:	f00a f856 	bl	800b95c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018b0:	1db9      	adds	r1, r7, #6
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <write_byte+0x58>)
 80018b8:	f00a f850 	bl	800b95c <HAL_SPI_Transmit>
	CS_SET;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <write_byte+0x54>)
 80018c4:	f006 fe82 	bl	80085cc <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	200397e4 	.word	0x200397e4

080018d8 <IMU_init>:

uint16_t IMU_init() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff9c 	bl	8001820 <read_byte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2be0      	cmp	r3, #224	; 0xe0
 80018f0:	d119      	bne.n	8001926 <IMU_init+0x4e>
		ret = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018f6:	2101      	movs	r1, #1
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff ffbf 	bl	800187c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018fe:	2110      	movs	r1, #16
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff ffbb 	bl	800187c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001906:	2120      	movs	r1, #32
 8001908:	207f      	movs	r0, #127	; 0x7f
 800190a:	f7ff ffb7 	bl	800187c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800190e:	2106      	movs	r1, #6
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffb3 	bl	800187c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001916:	2106      	movs	r1, #6
 8001918:	2014      	movs	r0, #20
 800191a:	f7ff ffaf 	bl	800187c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800191e:	2100      	movs	r1, #0
 8001920:	207f      	movs	r0, #127	; 0x7f
 8001922:	f7ff ffab 	bl	800187c <write_byte>
	}
	return ret;
 8001926:	88fb      	ldrh	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <read_gyro_data>:

void read_gyro_data() {
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001934:	2033      	movs	r0, #51	; 0x33
 8001936:	f7ff ff73 	bl	8001820 <read_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21c      	sxth	r4, r3
 8001940:	2034      	movs	r0, #52	; 0x34
 8001942:	f7ff ff6d 	bl	8001820 <read_byte>
 8001946:	4603      	mov	r3, r0
 8001948:	b21b      	sxth	r3, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <read_gyro_data+0x64>)
 8001950:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001952:	2035      	movs	r0, #53	; 0x35
 8001954:	f7ff ff64 	bl	8001820 <read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21c      	sxth	r4, r3
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff ff5e 	bl	8001820 <read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	b21b      	sxth	r3, r3
 8001968:	4323      	orrs	r3, r4
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <read_gyro_data+0x68>)
 800196e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001970:	2037      	movs	r0, #55	; 0x37
 8001972:	f7ff ff55 	bl	8001820 <read_byte>
 8001976:	4603      	mov	r3, r0
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21c      	sxth	r4, r3
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f7ff ff4f 	bl	8001820 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	b21b      	sxth	r3, r3
 8001986:	4323      	orrs	r3, r4
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <read_gyro_data+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20039780 	.word	0x20039780
 8001998:	2003977e 	.word	0x2003977e
 800199c:	20039778 	.word	0x20039778

080019a0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	805a      	strh	r2, [r3, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	809a      	strh	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	80da      	strh	r2, [r3, #6]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	811a      	strh	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	815a      	strh	r2, [r3, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
{

}
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019ec:	f7ff ff74 	bl	80018d8 <IMU_init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <_ZN3IMU4initEv+0x50>)
 80019fa:	f011 ff2f 	bl	801385c <iprintf>

	lcd_clear();
 80019fe:	f7ff fb4f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb5b 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <_ZN3IMU4initEv+0x54>)
 8001a0c:	f7ff fb82 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb54 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_ZN3IMU4initEv+0x58>)
 8001a1e:	f7ff fb79 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f005 fb3b 	bl	80070a0 <HAL_Delay>

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08017a3c 	.word	0x08017a3c
 8001a38:	08017a4c 	.word	0x08017a4c
 8001a3c:	08017a58 	.word	0x08017a58

08001a40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a48:	f7ff ff72 	bl	8001930 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd6f 	bl	8000554 <__aeabi_i2d>
 8001a76:	a316      	add	r3, pc, #88	; (adr r3, 8001ad0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4625      	mov	r5, r4
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	a310      	add	r3, pc, #64	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x98>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc5 	bl	8000628 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc09 	bl	80002bc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7ff f869 	bl	8000b88 <__aeabi_d2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	eb851eb8 	.word	0xeb851eb8
 8001ad4:	3f9eb851 	.word	0x3f9eb851
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	20039780 	.word	0x20039780
 8001ae4:	2003977e 	.word	0x2003977e
 8001ae8:	20039778 	.word	0x20039778
 8001aec:	20000210 	.word	0x20000210

08001af0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	a316      	add	r3, pc, #88	; (adr r3, 8001b74 <_ZN3IMU8getOmegaEv+0x84>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feac 	bl	800087c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b2e:	a313      	add	r3, pc, #76	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fd76 	bl	8000628 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <_ZN3IMU8getOmegaEv+0x80>)
 8001b4a:	f7fe fe97 	bl	800087c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f85f 	bl	8000c18 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	40668000 	.word	0x40668000
 8001b74:	66666666 	.word	0x66666666
 8001b78:	40306666 	.word	0x40306666
 8001b7c:	54411744 	.word	0x54411744
 8001b80:	400921fb 	.word	0x400921fb

08001b84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b8c:	466b      	mov	r3, sp
 8001b8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f005 fa84 	bl	80070a0 <HAL_Delay>
	lcd_clear();
 8001b98:	f7ff fa82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fa8e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ba4:	4840      	ldr	r0, [pc, #256]	; (8001ca8 <_ZN3IMU11calibrationEv+0x124>)
 8001ba6:	f7ff fab5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001baa:	2101      	movs	r1, #1
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fa87 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bb2:	483e      	ldr	r0, [pc, #248]	; (8001cac <_ZN3IMU11calibrationEv+0x128>)
 8001bb4:	f7ff faae 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bbe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	61bd      	str	r5, [r7, #24]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0154      	lsls	r4, r2, #5
 8001bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bde:	014b      	lsls	r3, r1, #5
 8001be0:	462b      	mov	r3, r5
 8001be2:	3301      	adds	r3, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3303      	adds	r3, #3
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	466b      	mov	r3, sp
 8001c0e:	3303      	adds	r3, #3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	83fb      	strh	r3, [r7, #30]
 8001c1a:	8bfa      	ldrh	r2, [r7, #30]
 8001c1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	da13      	bge.n	8001c4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f005 fa2e 	bl	80070a0 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	e7e6      	b.n	8001c1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	462b      	mov	r3, r5
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00e      	beq.n	8001c82 <_ZN3IMU11calibrationEv+0xfe>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e7ec      	b.n	8001c5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c9c:	46b5      	mov	sp, r6
}
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	08017a5c 	.word	0x08017a5c
 8001cac:	08017a68 	.word	0x08017a68

08001cb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	1dfa      	adds	r2, r7, #7
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <INA260_read+0x50>)
 8001cce:	f006 fde7 	bl	80088a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	f107 020c 	add.w	r2, r7, #12
 8001cda:	2364      	movs	r3, #100	; 0x64
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <INA260_read+0x50>)
 8001ce2:	f006 fedb 	bl	8008a9c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001ce6:	7b3b      	ldrb	r3, [r7, #12]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20039998 	.word	0x20039998

08001d04 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	4603      	mov	r3, r0
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	717b      	strb	r3, [r7, #5]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	733b      	strb	r3, [r7, #12]
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	737b      	strb	r3, [r7, #13]
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d2e:	793b      	ldrb	r3, [r7, #4]
 8001d30:	b299      	uxth	r1, r3
 8001d32:	f107 020c 	add.w	r2, r7, #12
 8001d36:	2364      	movs	r3, #100	; 0x64
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <INA260_write+0x48>)
 8001d3e:	f006 fdaf 	bl	80088a0 <HAL_I2C_Master_Transmit>
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20039998 	.word	0x20039998

08001d50 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	71bb      	strb	r3, [r7, #6]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	79f9      	ldrb	r1, [r7, #7]
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ffcb 	bl	8001d04 <INA260_write>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	461a      	mov	r2, r3
 8001d84:	21df      	movs	r1, #223	; 0xdf
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff ffe2 	bl	8001d50 <setConfig>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
{

}
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dbc:	482a      	ldr	r0, [pc, #168]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dbe:	f006 fbed 	bl	800859c <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <_ZN8JoyStick8getValueEv+0x2e>
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4823      	ldr	r0, [pc, #140]	; (8001e6c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dde:	f006 fbdd 	bl	800859c <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x4e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfe:	481a      	ldr	r0, [pc, #104]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e00:	f006 fbcc 	bl	800859c <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <_ZN8JoyStick8getValueEv+0x70>
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e20:	f006 fbbc 	bl	800859c <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x90>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	480a      	ldr	r0, [pc, #40]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e40:	f006 fbac 	bl	800859c <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0xb0>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40020400 	.word	0x40020400

08001e74 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b52      	cmp	r3, #82	; 0x52
 8001e84:	d112      	bne.n	8001eac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4856      	ldr	r0, [pc, #344]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f006 fb9d 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	4853      	ldr	r0, [pc, #332]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f006 fb97 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea4:	4850      	ldr	r0, [pc, #320]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f006 fb91 	bl	80085cc <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eaa:	e098      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b47      	cmp	r3, #71	; 0x47
 8001eb0:	d112      	bne.n	8001ed8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	484b      	ldr	r0, [pc, #300]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fb87 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	4848      	ldr	r0, [pc, #288]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fb81 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	4845      	ldr	r0, [pc, #276]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f006 fb7b 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001ed6:	e082      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d112      	bne.n	8001f04 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	4840      	ldr	r0, [pc, #256]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fb71 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	483d      	ldr	r0, [pc, #244]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fb6b 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efc:	483a      	ldr	r0, [pc, #232]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f006 fb65 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001f02:	e06c      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b43      	cmp	r3, #67	; 0x43
 8001f08:	d112      	bne.n	8001f30 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4835      	ldr	r0, [pc, #212]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fb5b 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	4832      	ldr	r0, [pc, #200]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fb55 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	482f      	ldr	r0, [pc, #188]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f006 fb4f 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001f2e:	e056      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b4d      	cmp	r3, #77	; 0x4d
 8001f34:	d112      	bne.n	8001f5c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fb45 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	4827      	ldr	r0, [pc, #156]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fb3f 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f006 fb39 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001f5a:	e040      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b59      	cmp	r3, #89	; 0x59
 8001f60:	d112      	bne.n	8001f88 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fb2f 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fb29 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f006 fb23 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001f86:	e02a      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b57      	cmp	r3, #87	; 0x57
 8001f8c:	d112      	bne.n	8001fb4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f94:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fb19 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fb13 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f006 fb0d 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001fb2:	e014      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fb8:	d111      	bne.n	8001fde <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fb03 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fafd 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f006 faf7 	bl	80085cc <HAL_GPIO_WritePin>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020000 	.word	0x40020000

08001fec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	4813      	ldr	r0, [pc, #76]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 800200c:	f006 fade 	bl	80085cc <HAL_GPIO_WritePin>
 8002010:	e009      	b.n	8002026 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 8002022:	f006 fad3 	bl	80085cc <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002026:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	4808      	ldr	r0, [pc, #32]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 8002036:	f006 fac9 	bl	80085cc <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800203a:	e009      	b.n	8002050 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800203c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 800204c:	f006 fabe 	bl	80085cc <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40020000 	.word	0x40020000

0800205c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800205c:	b580      	push	{r7, lr}
 800205e:	b092      	sub	sp, #72	; 0x48
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe92 	bl	8001d94 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	331c      	adds	r3, #28
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	429a      	cmp	r2, r3
 8002084:	d008      	beq.n	8002098 <_ZN10LineSensorC1Ev+0x3c>
 8002086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	2200      	movs	r2, #0
 800208e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002092:	3302      	adds	r3, #2
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
 8002096:	e7f2      	b.n	800207e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	3338      	adds	r3, #56	; 0x38
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d009      	beq.n	80020c6 <_ZN10LineSensorC1Ev+0x6a>
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	3304      	adds	r3, #4
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	e7f1      	b.n	80020aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3338      	adds	r3, #56	; 0x38
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d009      	beq.n	80020f4 <_ZN10LineSensorC1Ev+0x98>
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	3304      	adds	r3, #4
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	e7f1      	b.n	80020d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	3338      	adds	r3, #56	; 0x38
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	429a      	cmp	r2, r3
 800210c:	d009      	beq.n	8002122 <_ZN10LineSensorC1Ev+0xc6>
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002118:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	3304      	adds	r3, #4
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	e7f1      	b.n	8002106 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	3748      	adds	r7, #72	; 0x48
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	220e      	movs	r2, #14
 8002138:	4619      	mov	r1, r3
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800213c:	f005 f816 	bl	800716c <HAL_ADC_Start_DMA>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200398bc 	.word	0x200398bc

0800214c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b0d      	cmp	r3, #13
 800215c:	dc2f      	bgt.n	80021be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3392      	adds	r3, #146	; 0x92
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	33a0      	adds	r3, #160	; 0xa0
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a5b      	subs	r3, r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	440b      	add	r3, r1
 80021aa:	3306      	adds	r3, #6
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e7cc      	b.n	8002158 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	d902      	bls.n	80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]


}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	2000021c 	.word	0x2000021c

080021e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021fa:	2b0d      	cmp	r3, #13
 80021fc:	f200 80b8 	bhi.w	8002370 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002206:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800220a:	2b09      	cmp	r3, #9
 800220c:	d81c      	bhi.n	8002248 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800220e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002212:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002216:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4423      	add	r3, r4
 8002226:	3306      	adds	r3, #6
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4403      	add	r3, r0
 800222c:	3304      	adds	r3, #4
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	008b      	lsls	r3, r1, #2
 8002232:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002236:	440b      	add	r3, r1
 8002238:	3b30      	subs	r3, #48	; 0x30
 800223a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800223c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002240:	3301      	adds	r3, #1
 8002242:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002246:	e7de      	b.n	8002206 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800224e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002252:	2b09      	cmp	r3, #9
 8002254:	d84d      	bhi.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002256:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225a:	3301      	adds	r3, #1
 800225c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002260:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002264:	2b09      	cmp	r3, #9
 8002266:	d83e      	bhi.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002272:	4413      	add	r3, r2
 8002274:	3b30      	subs	r3, #48	; 0x30
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002284:	4413      	add	r3, r2
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	d521      	bpl.n	80022da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002296:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a0:	4413      	add	r3, r2
 80022a2:	3b30      	subs	r3, #48	; 0x30
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022b6:	440a      	add	r2, r1
 80022b8:	3a30      	subs	r2, #48	; 0x30
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022c2:	440b      	add	r3, r1
 80022c4:	3b30      	subs	r3, #48	; 0x30
 80022c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022d2:	4413      	add	r3, r2
 80022d4:	3b30      	subs	r3, #48	; 0x30
 80022d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022de:	3301      	adds	r3, #1
 80022e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e4:	e7bc      	b.n	8002260 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ea:	3301      	adds	r3, #1
 80022ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f0:	e7ad      	b.n	800224e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f93f 	bl	8000578 <__aeabi_f2d>
 80022fa:	a32a      	add	r3, pc, #168	; (adr r3, 80023a4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f992 	bl	8000628 <__aeabi_dmul>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	4625      	mov	r5, r4
 800230a:	461c      	mov	r4, r3
 800230c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f92d 	bl	8000578 <__aeabi_f2d>
 800231e:	a31c      	add	r3, pc, #112	; (adr r3, 8002390 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f980 	bl	8000628 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fd ffc4 	bl	80002bc <__adddf3>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc68 	bl	8000c18 <__aeabi_d2f>
 8002348:	4601      	mov	r1, r0
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002368:	3301      	adds	r3, #1
 800236a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800236e:	e742      	b.n	80021f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002378:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	f3af 8000 	nop.w
 8002390:	66666666 	.word	0x66666666
 8002394:	3fee6666 	.word	0x3fee6666
 8002398:	20000220 	.word	0x20000220
 800239c:	20000214 	.word	0x20000214
 80023a0:	20000218 	.word	0x20000218
 80023a4:	9999999a 	.word	0x9999999a
 80023a8:	3fa99999 	.word	0x3fa99999

080023ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b0a9      	sub	sp, #164	; 0xa4
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f004 fe73 	bl	80070a0 <HAL_Delay>

	lcd_clear();
 80023ba:	f7fe fe71 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fe7d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023c6:	48b1      	ldr	r0, [pc, #708]	; (800268c <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023c8:	f7fe fea4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023cc:	2101      	movs	r1, #1
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fe76 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023d4:	48ae      	ldr	r0, [pc, #696]	; (8002690 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023d6:	f7fe fe9d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023da:	2300      	movs	r3, #0
 80023dc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023e4:	2b0d      	cmp	r3, #13
 80023e6:	d823      	bhi.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80023e8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	32b0      	adds	r2, #176	; 0xb0
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	440a      	add	r2, r1
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002400:	440b      	add	r3, r1
 8002402:	3b60      	subs	r3, #96	; 0x60
 8002404:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002406:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	32b0      	adds	r2, #176	; 0xb0
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	440a      	add	r2, r1
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800241e:	440b      	add	r3, r1
 8002420:	3b98      	subs	r3, #152	; 0x98
 8002422:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002424:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800242e:	e7d7      	b.n	80023e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fcb8 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800243c:	4603      	mov	r3, r0
 800243e:	2b02      	cmp	r3, #2
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800244c:	2300      	movs	r3, #0
 800244e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002452:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002456:	2b0d      	cmp	r3, #13
 8002458:	d850      	bhi.n	80024fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800245a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002464:	4413      	add	r3, r2
 8002466:	3b60      	subs	r3, #96	; 0x60
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	33b0      	adds	r3, #176	; 0xb0
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d50f      	bpl.n	80024a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002486:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800248a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	32b0      	adds	r2, #176	; 0xb0
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	440a      	add	r2, r1
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800249e:	440b      	add	r3, r1
 80024a0:	3b60      	subs	r3, #96	; 0x60
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e024      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024b0:	4413      	add	r3, r2
 80024b2:	3b98      	subs	r3, #152	; 0x98
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	33b0      	adds	r3, #176	; 0xb0
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd0e      	ble.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024d2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	32b0      	adds	r2, #176	; 0xb0
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	440a      	add	r2, r1
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024ea:	440b      	add	r3, r1
 80024ec:	3b98      	subs	r3, #152	; 0x98
 80024ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024f0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024f4:	3301      	adds	r3, #1
 80024f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024fa:	e7aa      	b.n	8002452 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f85e 	bl	80035c4 <_ZN12RotarySwitch8getValueEv>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800251e:	2201      	movs	r2, #1
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd61 	bl	8001fec <_ZN3LED2LREaa>
 800252a:	e781      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002532:	2200      	movs	r2, #0
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd57 	bl	8001fec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800253e:	e777      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002554:	3338      	adds	r3, #56	; 0x38
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800255a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800255e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002562:	429a      	cmp	r2, r3
 8002564:	d016      	beq.n	8002594 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffff 	bl	8000578 <__aeabi_f2d>
 800257a:	4603      	mov	r3, r0
 800257c:	460c      	mov	r4, r1
 800257e:	461a      	mov	r2, r3
 8002580:	4623      	mov	r3, r4
 8002582:	4844      	ldr	r0, [pc, #272]	; (8002694 <_ZN10LineSensor11calibrationEv+0x2e8>)
 8002584:	f011 f96a 	bl	801385c <iprintf>
	for(const auto &m : max_values){
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258c:	3304      	adds	r3, #4
 800258e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002592:	e7e2      	b.n	800255a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 8002594:	200a      	movs	r0, #10
 8002596:	f011 f979 	bl	801388c <putchar>
	for(const auto &m : min_values){
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ae:	3338      	adds	r3, #56	; 0x38
 80025b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d014      	beq.n	80025e6 <_ZN10LineSensor11calibrationEv+0x23a>
 80025bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffd6 	bl	8000578 <__aeabi_f2d>
 80025cc:	4603      	mov	r3, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	461a      	mov	r2, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025d6:	f011 f941 	bl	801385c <iprintf>
	for(const auto &m : min_values){
 80025da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025de:	3304      	adds	r3, #4
 80025e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025e4:	e7e5      	b.n	80025b2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 80025e6:	200a      	movs	r0, #10
 80025e8:	f011 f950 	bl	801388c <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80025f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025f6:	2b0d      	cmp	r3, #13
 80025f8:	d826      	bhi.n	8002648 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002604:	4413      	add	r3, r2
 8002606:	3b60      	subs	r3, #96	; 0x60
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002616:	4413      	add	r3, r2
 8002618:	3b98      	subs	r3, #152	; 0x98
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002622:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002626:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002698 <_ZN10LineSensor11calibrationEv+0x2ec>
 800262a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	3392      	adds	r3, #146	; 0x92
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800263c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002640:	3301      	adds	r3, #1
 8002642:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002646:	e7d4      	b.n	80025f2 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002648:	2300      	movs	r3, #0
 800264a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800264e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002652:	2b0d      	cmp	r3, #13
 8002654:	d815      	bhi.n	8002682 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002656:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800265a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002664:	440a      	add	r2, r1
 8002666:	3a98      	subs	r2, #152	; 0x98
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	33a0      	adds	r3, #160	; 0xa0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3304      	adds	r3, #4
 8002674:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002676:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267a:	3301      	adds	r3, #1
 800267c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002680:	e7e5      	b.n	800264e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 8002682:	bf00      	nop
 8002684:	37a4      	adds	r7, #164	; 0xa4
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	08017a74 	.word	0x08017a74
 8002690:	08017a80 	.word	0x08017a80
 8002694:	08017a8c 	.word	0x08017a8c
 8002698:	447a0000 	.word	0x447a0000

0800269c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	3338      	adds	r3, #56	; 0x38
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d012      	beq.n	80026e8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002708 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	db02      	blt.n	80026e0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026da:	7ffb      	ldrb	r3, [r7, #31]
 80026dc:	3301      	adds	r3, #1
 80026de:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	3304      	adds	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e7e8      	b.n	80026ba <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b0d      	cmp	r3, #13
 80026ec:	d902      	bls.n	80026f4 <_ZN10LineSensor13emergencyStopEv+0x58>
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
 80026f2:	e001      	b.n	80026f8 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

	return flag;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]

}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	44160000 	.word	0x44160000

0800270c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensor>:
float monitor_target_omega;
float monitor_r;

float mon_diff, mon_diff_lpf;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor) : kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0), excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0)
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
{
	motor_ = motor;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	611a      	str	r2, [r3, #16]
}
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002804:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002810:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800281c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002828:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800283c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002844:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe95 	bl	8000578 <__aeabi_f2d>
 800284e:	a318      	add	r3, pc, #96	; (adr r3, 80028b0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fee8 	bl	8000628 <__aeabi_dmul>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	4625      	mov	r5, r4
 800285e:	461c      	mov	r4, r3
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe87 	bl	8000578 <__aeabi_f2d>
 800286a:	a313      	add	r3, pc, #76	; (adr r3, 80028b8 <_ZN9LineTrace9calcErrorEv+0x128>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd feda 	bl	8000628 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd fd1e 	bl	80002bc <__adddf3>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	4618      	mov	r0, r3
 8002886:	4621      	mov	r1, r4
 8002888:	f7fe f9c6 	bl	8000c18 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002894:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 800289a:	6013      	str	r3, [r2, #0]

	return diff;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	ee07 3a90 	vmov	s15, r3

}
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	f3af 8000 	nop.w
 80028b0:	47ae147b 	.word	0x47ae147b
 80028b4:	3fb47ae1 	.word	0x3fb47ae1
 80028b8:	d70a3d71 	.word	0xd70a3d71
 80028bc:	3fed70a3 	.word	0x3fed70a3
 80028c0:	20000258 	.word	0x20000258
 80028c4:	20000260 	.word	0x20000260
 80028c8:	2000025c 	.word	0x2000025c
 80028cc:	00000000 	.word	0x00000000

080028d0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff59 	bl	8002790 <_ZN9LineTrace9calcErrorEv>
 80028de:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	p = kp_ * diff;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002902:	ed97 7a05 	vldr	s14, [r7, #20]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	ed93 7a06 	vldr	s14, [r3, #24]
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	edd7 6a05 	vldr	s13, [r7, #20]
 800291e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a32a      	add	r3, pc, #168	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd ffa2 	bl	800087c <__aeabi_ddiv>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	f7fe f96a 	bl	8000c18 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fe13 	bl	8000578 <__aeabi_f2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed93 7a07 	vldr	s14, [r3, #28]
 800295c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fe06 	bl	8000578 <__aeabi_f2d>
 800296c:	a31a      	add	r3, pc, #104	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe59 	bl	8000628 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fc9d 	bl	80002bc <__adddf3>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	4618      	mov	r0, r3
 8002988:	4621      	mov	r1, r4
 800298a:	f7fe f945 	bl	8000c18 <__aeabi_d2f>
 800298e:	4602      	mov	r2, r0
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002992:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002994:	ed97 7a04 	vldr	s14, [r7, #16]
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80029b8:	edd7 0a02 	vldr	s1, [r7, #8]
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	4610      	mov	r0, r2
 80029c2:	f001 f921 	bl	8003c08 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6013      	str	r3, [r2, #0]

}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	f3af 8000 	nop.w
 80029d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029dc:	3f50624d 	.word	0x3f50624d
 80029e0:	20000268 	.word	0x20000268
 80029e4:	20000264 	.word	0x20000264

080029e8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2201      	movs	r2, #1
 80029f6:	4912      	ldr	r1, [pc, #72]	; (8002a40 <_ZN9LineTrace4initEv+0x58>)
 80029f8:	4812      	ldr	r0, [pc, #72]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 80029fa:	f7fe fe1f 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	2201      	movs	r2, #1
 8002a04:	4910      	ldr	r1, [pc, #64]	; (8002a48 <_ZN9LineTrace4initEv+0x60>)
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a08:	f7fe fe18 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2201      	movs	r2, #1
 8002a12:	490e      	ldr	r1, [pc, #56]	; (8002a4c <_ZN9LineTrace4initEv+0x64>)
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a16:	f7fe fe11 	bl	800163c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a26:	eeb0 1a66 	vmov.f32	s2, s13
 8002a2a:	eef0 0a47 	vmov.f32	s1, s14
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f80c 	bl	8002a50 <_ZN9LineTrace7setGainEfff>

}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08017acc 	.word	0x08017acc
 8002a44:	08017ad4 	.word	0x08017ad4
 8002a48:	08017adc 	.word	0x08017adc
 8002a4c:	08017ae4 	.word	0x08017ae4

08002a50 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a60:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	61da      	str	r2, [r3, #28]
	kd_ = kd;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	return kp_;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	ee07 3a90 	vmov	s15, r3
}
 8002a92:	eeb0 0a67 	vmov.f32	s0, s15
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN9LineTrace5getKiEv>:


float LineTrace::getKi()
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	return ki_;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	ee07 3a90 	vmov	s15, r3
}
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return kd_;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	ee07 3a90 	vmov	s15, r3
}
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
		pidTrace();
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fed0 	bl	80028d0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fdb1 	bl	800269c <_ZN10LineSensor13emergencyStopEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b48:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fa0f 	bl	8002f70 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	330c      	adds	r3, #12
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fa45 	bl	8001fec <_ZN3LED2LREaa>
		else{
			led_.LR(0, -1);

		}
	}
}
 8002b62:	e007      	b.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	330c      	adds	r3, #12
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa3c 	bl	8001fec <_ZN3LED2LREaa>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f3af 8000 	nop.w
	...

08002b88 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	i_reset_flag_ = true;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_->setRatio(0, 0);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f9cf 	bl	8002f70 <_ZN5Motor8setRatioEdd>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
	...

08002be8 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c00:	3302      	adds	r3, #2
 8002c02:	2200      	movs	r2, #0
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c18:	3306      	adds	r3, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002c38:	f7fe fd8c 	bl	8001754 <sd_mount>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002c4c:	481b      	ldr	r0, [pc, #108]	; (8002cbc <_ZN6Logger10sdCardInitEv+0x90>)
 8002c4e:	f010 fe8d 	bl	801396c <puts>

	  lcd_clear();
 8002c52:	f7fe fa25 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fa31 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c5e:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002c60:	f7fe fa58 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002c64:	2101      	movs	r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa2a 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002c6c:	4815      	ldr	r0, [pc, #84]	; (8002cc4 <_ZN6Logger10sdCardInitEv+0x98>)
 8002c6e:	f7fe fa51 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c76:	f004 fa13 	bl	80070a0 <HAL_Delay>

	  ret = true;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e018      	b.n	8002cb2 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002c80:	4811      	ldr	r0, [pc, #68]	; (8002cc8 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002c82:	f010 fe73 	bl	801396c <puts>

	  lcd_clear();
 8002c86:	f7fe fa0b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe fa17 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002c94:	f7fe fa3e 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fa10 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002ca0:	480a      	ldr	r0, [pc, #40]	; (8002ccc <_ZN6Logger10sdCardInitEv+0xa0>)
 8002ca2:	f7fe fa37 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f004 f9f9 	bl	80070a0 <HAL_Delay>

	  ret = false;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08017aec 	.word	0x08017aec
 8002cc0:	08017afc 	.word	0x08017afc
 8002cc4:	08017b08 	.word	0x08017b08
 8002cc8:	08017b10 	.word	0x08017b10
 8002ccc:	08017b20 	.word	0x08017b20

08002cd0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d024      	beq.n	8002d32 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002cee:	3302      	adds	r3, #2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d02:	3302      	adds	r3, #2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d10:	3302      	adds	r3, #2
 8002d12:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d905      	bls.n	8002d32 <_ZN6Logger8storeLogEf+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	801a      	strh	r2, [r3, #0]
	}
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d027      	beq.n	8002da6 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002d66:	3310      	adds	r3, #16
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d76:	3304      	adds	r3, #4
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d84:	3304      	adds	r3, #4
 8002d86:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d8e:	3304      	adds	r3, #4
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d905      	bls.n	8002da6 <_ZN6Logger9storeLog2Ef+0x68>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002da0:	3304      	adds	r3, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	801a      	strh	r2, [r3, #0]
	}
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68b8      	ldr	r0, [r7, #8]
 8002dce:	f7fe fbcf 	bl	8001570 <sd_write_array_float>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8002dec:	3340      	adds	r3, #64	; 0x40
 8002dee:	2200      	movs	r2, #0
 8002df0:	9200      	str	r2, [sp, #0]
 8002df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7fe fbb9 	bl	8001570 <sd_write_array_float>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002e1a:	3380      	adds	r3, #128	; 0x80
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	9200      	str	r2, [sp, #0]
 8002e20:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68b8      	ldr	r0, [r7, #8]
 8002e28:	f7fe fba2 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002e32:	3340      	adds	r3, #64	; 0x40
 8002e34:	2200      	movs	r2, #0
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f7fe fb96 	bl	8001570 <sd_write_array_float>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	805a      	strh	r2, [r3, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <_ZN5Motor4initEv>:

void Motor::init()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002eb4:	2108      	movs	r1, #8
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <_ZN5Motor4initEv+0x20>)
 8002eb8:	f009 faba 	bl	800c430 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ebc:	210c      	movs	r1, #12
 8002ebe:	4803      	ldr	r0, [pc, #12]	; (8002ecc <_ZN5Motor4initEv+0x20>)
 8002ec0:	f009 fab6 	bl	800c430 <HAL_TIM_PWM_Start>

}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2003987c 	.word	0x2003987c

08002ed0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da0d      	bge.n	8002efe <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002eea:	f005 fb6f 	bl	80085cc <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	81fb      	strh	r3, [r7, #14]
 8002efc:	e00a      	b.n	8002f14 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f04:	4818      	ldr	r0, [pc, #96]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f06:	f005 fb61 	bl	80085cc <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da0d      	bge.n	8002f3a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f26:	f005 fb51 	bl	80085cc <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	425b      	negs	r3, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	81bb      	strh	r3, [r7, #12]
 8002f38:	e00a      	b.n	8002f50 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f40:	4809      	ldr	r0, [pc, #36]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f42:	f005 fb43 	bl	80085cc <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002f50:	89fa      	ldrh	r2, [r7, #14]
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002f58:	89ba      	ldrh	r2, [r7, #12]
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	2003987c 	.word	0x2003987c

08002f70 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6178      	str	r0, [r7, #20]
 8002f78:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f7c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8a:	f7fd fddd 	bl	8000b48 <__aeabi_dcmpgt>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <_ZN5Motor8setRatioEdd+0x30>
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	4c2b      	ldr	r4, [pc, #172]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002f9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002f9e:	e00e      	b.n	8002fbe <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002faa:	f7fd fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <_ZN5Motor8setRatioEdd+0x4e>
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	4c24      	ldr	r4, [pc, #144]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fc8:	f7fd fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <_ZN5Motor8setRatioEdd+0x6e>
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	4c1c      	ldr	r4, [pc, #112]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fd8:	e9c7 3400 	strd	r3, r4, [r7]
 8002fdc:	e00e      	b.n	8002ffc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fe8:	f7fd fd90 	bl	8000b0c <__aeabi_dcmplt>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <_ZN5Motor8setRatioEdd+0x8c>
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	4c15      	ldr	r4, [pc, #84]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ff8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <_ZN5Motor8setRatioEdd+0xe0>)
 8003002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003006:	f7fd fb0f 	bl	8000628 <__aeabi_dmul>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	4618      	mov	r0, r3
 8003010:	4621      	mov	r1, r4
 8003012:	f7fd fdb9 	bl	8000b88 <__aeabi_d2iz>
 8003016:	4603      	mov	r3, r0
 8003018:	b21a      	sxth	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <_ZN5Motor8setRatioEdd+0xe0>)
 8003024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003028:	f7fd fafe 	bl	8000628 <__aeabi_dmul>
 800302c:	4603      	mov	r3, r0
 800302e:	460c      	mov	r4, r1
 8003030:	4618      	mov	r0, r3
 8003032:	4621      	mov	r1, r4
 8003034:	f7fd fda8 	bl	8000b88 <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	b21a      	sxth	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	805a      	strh	r2, [r3, #2]

}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	3ff00000 	.word	0x3ff00000
 800304c:	bff00000 	.word	0xbff00000
 8003050:	409c2000 	.word	0x409c2000

08003054 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8003054:	b490      	push	{r4, r7}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc90      	pop	{r4, r7}
 80030a8:	4770      	bx	lr
 80030aa:	0000      	movs	r0, r0
 80030ac:	0000      	movs	r0, r0
	...

080030b0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fd16 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 80030c4:	ee10 3a10 	vmov	r3, s0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa55 	bl	8000578 <__aeabi_f2d>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f97e 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 80030e0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80030e4:	a357      	add	r3, pc, #348	; (adr r3, 8003244 <_ZN8Odometry12calcPotitionEv+0x194>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ee:	f7fd fa9b 	bl	8000628 <__aeabi_dmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7fd fa38 	bl	8000578 <__aeabi_f2d>
 8003108:	4682      	mov	sl, r0
 800310a:	468b      	mov	fp, r1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003120:	f7fd fbac 	bl	800087c <__aeabi_ddiv>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4640      	mov	r0, r8
 800312a:	4649      	mov	r1, r9
 800312c:	f7fd f8c6 	bl	80002bc <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	ec43 2b17 	vmov	d7, r2, r3
 8003138:	eeb0 0a47 	vmov.f32	s0, s14
 800313c:	eef0 0a67 	vmov.f32	s1, s15
 8003140:	f00e fcba 	bl	8011ab8 <cos>
 8003144:	ec53 2b10 	vmov	r2, r3, d0
 8003148:	4650      	mov	r0, sl
 800314a:	4659      	mov	r1, fp
 800314c:	f7fd fa6c 	bl	8000628 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	f7fd f8b0 	bl	80002bc <__adddf3>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7fd fa03 	bl	8000578 <__aeabi_f2d>
 8003172:	4682      	mov	sl, r0
 8003174:	468b      	mov	fp, r1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800318a:	f7fd fb77 	bl	800087c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4640      	mov	r0, r8
 8003194:	4649      	mov	r1, r9
 8003196:	f7fd f891 	bl	80002bc <__adddf3>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	ec43 2b17 	vmov	d7, r2, r3
 80031a2:	eeb0 0a47 	vmov.f32	s0, s14
 80031a6:	eef0 0a67 	vmov.f32	s1, s15
 80031aa:	f00e fcc9 	bl	8011b40 <sin>
 80031ae:	ec53 2b10 	vmov	r2, r3, d0
 80031b2:	4650      	mov	r0, sl
 80031b4:	4659      	mov	r1, fp
 80031b6:	f7fd fa37 	bl	8000628 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd f87b 	bl	80002bc <__adddf3>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80031dc:	461a      	mov	r2, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	f7fd f86c 	bl	80002bc <__adddf3>
 80031e4:	4603      	mov	r3, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80031f4:	4618      	mov	r0, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	f7fd fd0e 	bl	8000c18 <__aeabi_d2f>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003200:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003208:	4618      	mov	r0, r3
 800320a:	4621      	mov	r1, r4
 800320c:	f7fd fd04 	bl	8000c18 <__aeabi_d2f>
 8003210:	4602      	mov	r2, r0
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <_ZN8Odometry12calcPotitionEv+0x18c>)
 8003214:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	4621      	mov	r1, r4
 8003220:	f7fd fcfa 	bl	8000c18 <__aeabi_d2f>
 8003224:	4602      	mov	r2, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003234:	f3af 8000 	nop.w
 8003238:	2000026c 	.word	0x2000026c
 800323c:	20000270 	.word	0x20000270
 8003240:	20000274 	.word	0x20000274
 8003244:	d2f1a9fc 	.word	0xd2f1a9fc
 8003248:	3f50624d 	.word	0x3f50624d

0800324c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff2b 	bl	80030b0 <_ZN8Odometry12calcPotitionEv>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003262:	b490      	push	{r4, r7}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
	x_ = 0;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bc90      	pop	{r4, r7}
 800329c:	4770      	bx	lr
	...

080032a0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80032a0:	b490      	push	{r4, r7}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f04f 0400 	mov.w	r4, #0
 80032b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80032de:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80032e6:	4a29      	ldr	r2, [pc, #164]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f04f 0400 	mov.w	r4, #0
 80032fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <_ZN13PathFollowingC1Ev+0xf4>)
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	f04f 0400 	mov.w	r4, #0
 800336e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <_ZN13PathFollowingC1Ev+0xf4>)
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bc90      	pop	{r4, r7}
 800338a:	4770      	bx	lr
 800338c:	20039d80 	.word	0x20039d80
 8003390:	20039d10 	.word	0x20039d10
 8003394:	20039d70 	.word	0x20039d70

08003398 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80033a0:	f001 fca8 	bl	8004cf4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80033a4:	f107 0318 	add.w	r3, r7, #24
 80033a8:	2201      	movs	r2, #1
 80033aa:	4915      	ldr	r1, [pc, #84]	; (8003400 <_ZN13PathFollowing4initEv+0x68>)
 80033ac:	4815      	ldr	r0, [pc, #84]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033ae:	f7fe f98b 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	2201      	movs	r2, #1
 80033b8:	4913      	ldr	r1, [pc, #76]	; (8003408 <_ZN13PathFollowing4initEv+0x70>)
 80033ba:	4812      	ldr	r0, [pc, #72]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033bc:	f7fe f984 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	2201      	movs	r2, #1
 80033c6:	4911      	ldr	r1, [pc, #68]	; (800340c <_ZN13PathFollowing4initEv+0x74>)
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033ca:	f7fe f97d 	bl	80016c8 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80033ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80033d2:	ed97 6b04 	vldr	d6, [r7, #16]
 80033d6:	ed97 5b02 	vldr	d5, [r7, #8]
 80033da:	eeb0 2a45 	vmov.f32	s4, s10
 80033de:	eef0 2a65 	vmov.f32	s5, s11
 80033e2:	eeb0 1a46 	vmov.f32	s2, s12
 80033e6:	eef0 1a66 	vmov.f32	s3, s13
 80033ea:	eeb0 0a47 	vmov.f32	s0, s14
 80033ee:	eef0 0a67 	vmov.f32	s1, s15
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f80c 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	08017b28 	.word	0x08017b28
 8003404:	08017b30 	.word	0x08017b30
 8003408:	08017b38 	.word	0x08017b38
 800340c:	08017b40 	.word	0x08017b40

08003410 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003410:	b490      	push	{r4, r7}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	61f8      	str	r0, [r7, #28]
 8003418:	ed87 0b04 	vstr	d0, [r7, #16]
 800341c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003420:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003426:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800342a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003430:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003434:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800343a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800343e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bc90      	pop	{r4, r7}
 800344a:	4770      	bx	lr
 800344c:	20039d80 	.word	0x20039d80

08003450 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003450:	b490      	push	{r4, r7}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <_ZN13PathFollowing8getKxValEv+0x24>)
 800345a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800345e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003462:	eeb0 0a47 	vmov.f32	s0, s14
 8003466:	eef0 0a67 	vmov.f32	s1, s15
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bc90      	pop	{r4, r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20039d80 	.word	0x20039d80

08003478 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003478:	b490      	push	{r4, r7}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003482:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003486:	ec44 3b17 	vmov	d7, r3, r4
}
 800348a:	eeb0 0a47 	vmov.f32	s0, s14
 800348e:	eef0 0a67 	vmov.f32	s1, s15
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20039d80 	.word	0x20039d80

080034a0 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 80034a0:	b490      	push	{r4, r7}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <_ZN13PathFollowing8getKtValEv+0x24>)
 80034aa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80034b2:	eeb0 0a47 	vmov.f32	s0, s14
 80034b6:	eef0 0a67 	vmov.f32	s1, s15
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc90      	pop	{r4, r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20039d80 	.word	0x20039d80

080034c8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80034d0:	2088      	movs	r0, #136	; 0x88
 80034d2:	f7fe fc50 	bl	8001d76 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80034d6:	2080      	movs	r0, #128	; 0x80
 80034d8:	f7fe fc4d 	bl	8001d76 <INA260_init>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	0000      	movs	r0, r0
	...

080034e8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80034f0:	2188      	movs	r1, #136	; 0x88
 80034f2:	2002      	movs	r0, #2
 80034f4:	f7fe fbdc 	bl	8001cb0 <INA260_read>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f82a 	bl	8000554 <__aeabi_i2d>
 8003500:	a30c      	add	r3, pc, #48	; (adr r3, 8003534 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f88f 	bl	8000628 <__aeabi_dmul>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	4618      	mov	r0, r3
 8003510:	4621      	mov	r1, r4
 8003512:	f7fd fb81 	bl	8000c18 <__aeabi_d2f>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a03      	ldr	r2, [pc, #12]	; (8003530 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	f3af 8000 	nop.w
 8003530:	20000278 	.word	0x20000278
 8003534:	47ae147b 	.word	0x47ae147b
 8003538:	3f547ae1 	.word	0x3f547ae1

0800353c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	ee07 3a90 	vmov	s15, r3

}
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	0000      	movs	r0, r0
 800355c:	0000      	movs	r0, r0
	...

08003560 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd f801 	bl	8000578 <__aeabi_f2d>
 8003576:	a311      	add	r3, pc, #68	; (adr r3, 80035bc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fd fac6 	bl	8000b0c <__aeabi_dcmplt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000027c 	.word	0x2000027c
 80035bc:	9999999a 	.word	0x9999999a
 80035c0:	401d9999 	.word	0x401d9999

080035c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80035d0:	2102      	movs	r1, #2
 80035d2:	4822      	ldr	r0, [pc, #136]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 80035d4:	f004 ffe2 	bl	800859c <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80035f0:	2108      	movs	r1, #8
 80035f2:	481a      	ldr	r0, [pc, #104]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 80035f4:	f004 ffd2 	bl	800859c <HAL_GPIO_ReadPin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003610:	2110      	movs	r1, #16
 8003612:	4812      	ldr	r0, [pc, #72]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003614:	f004 ffc2 	bl	800859c <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	480a      	ldr	r0, [pc, #40]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003634:	f004 ffb2 	bl	800859c <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003650:	89fb      	ldrh	r3, [r7, #14]

}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020c00 	.word	0x40020c00

08003660 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0)
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	805a      	strh	r2, [r3, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	809a      	strh	r2, [r3, #4]
{

}
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	2b04      	cmp	r3, #4
 8003698:	d111      	bne.n	80036be <_ZN10SideSensor12updateStatusEt+0x36>
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <_ZN10SideSensor12updateStatusEt+0xe4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f083 0301 	eor.w	r3, r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <_ZN10SideSensor12updateStatusEt+0xe4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e01a      	b.n	80036f4 <_ZN10SideSensor12updateStatusEt+0x6c>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d117      	bne.n	80036f4 <_ZN10SideSensor12updateStatusEt+0x6c>
 80036c4:	4b29      	ldr	r3, [pc, #164]	; (800376c <_ZN10SideSensor12updateStatusEt+0xe4>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <_ZN10SideSensor12updateStatusEt+0x6c>
		status_ ^= 0x01;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <_ZN10SideSensor12updateStatusEt+0xe4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]

		white_line_cnt_r_++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	889b      	ldrh	r3, [r3, #4]
 80036e4:	3301      	adds	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	809a      	strh	r2, [r3, #4]
		mon_cnt_r = white_line_cnt_r_;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	889a      	ldrh	r2, [r3, #4]
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <_ZN10SideSensor12updateStatusEt+0xe8>)
 80036f2:	801a      	strh	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fa:	d111      	bne.n	8003720 <_ZN10SideSensor12updateStatusEt+0x98>
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <_ZN10SideSensor12updateStatusEt+0xec>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f083 0301 	eor.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <_ZN10SideSensor12updateStatusEt+0x98>
		status_ |= 0x02;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f043 0302 	orr.w	r3, r3, #2
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <_ZN10SideSensor12updateStatusEt+0xec>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e01b      	b.n	8003758 <_ZN10SideSensor12updateStatusEt+0xd0>
	}
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d117      	bne.n	8003758 <_ZN10SideSensor12updateStatusEt+0xd0>
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <_ZN10SideSensor12updateStatusEt+0xec>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <_ZN10SideSensor12updateStatusEt+0xd0>
		status_ ^= 0x02;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	f083 0302 	eor.w	r3, r3, #2
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]

		white_line_cnt_l_++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	885b      	ldrh	r3, [r3, #2]
 8003748:	3301      	adds	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	805a      	strh	r2, [r3, #2]
		mon_cnt_l = white_line_cnt_l_;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	885a      	ldrh	r2, [r3, #2]
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <_ZN10SideSensor12updateStatusEt+0xf0>)
 8003756:	801a      	strh	r2, [r3, #0]
	}

	mon_status = status_;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <_ZN10SideSensor12updateStatusEt+0xf4>)
 800375e:	801a      	strh	r2, [r3, #0]

}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000284 	.word	0x20000284
 8003770:	20000282 	.word	0x20000282
 8003774:	20000285 	.word	0x20000285
 8003778:	20000280 	.word	0x20000280
 800377c:	2000027e 	.word	0x2000027e

08003780 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003790:	3308      	adds	r3, #8
 8003792:	4611      	mov	r1, r2
 8003794:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003798:	4618      	mov	r0, r3
 800379a:	f00f fa0d 	bl	8012bb8 <memcpy>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08017b64 	.word	0x08017b64

080037d4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d010      	beq.n	800380c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	ed97 0a00 	vldr	s0, [r7]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fa6c 	bl	8002cd0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003802:	eeb0 0a67 	vmov.f32	s0, s15
 8003806:	4610      	mov	r0, r2
 8003808:	f7ff fa99 	bl	8002d3e <_ZN6Logger9storeLog2Ef>
	}

}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fac4 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a06      	ldr	r2, [pc, #24]	; (8003848 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003830:	4904      	ldr	r1, [pc, #16]	; (8003844 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fad1 	bl	8002dda <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08017d58 	.word	0x08017d58
 8003844:	08017d64 	.word	0x08017d64
 8003848:	08017d70 	.word	0x08017d70

0800384c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800385a:	2b00      	cmp	r3, #0
 800385c:	d046      	beq.n	80038ec <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3204      	adds	r2, #4
 8003870:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800388c:	3301      	adds	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800389e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80038a6:	2bf9      	cmp	r3, #249	; 0xf9
 80038a8:	d903      	bls.n	80038b2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	22fa      	movs	r2, #250	; 0xfa
 80038ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685c      	ldr	r4, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fc fe5b 	bl	8000578 <__aeabi_f2d>
 80038c2:	4605      	mov	r5, r0
 80038c4:	460e      	mov	r6, r1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80038cc:	eef1 7a67 	vneg.f32	s15, s15
 80038d0:	ee17 3a90 	vmov	r3, s15
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe4f 	bl	8000578 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	ec43 2b11 	vmov	d1, r2, r3
 80038e2:	ec46 5b10 	vmov	d0, r5, r6
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff fb42 	bl	8002f70 <_ZN5Motor8setRatioEdd>

	}

}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f4:	20000288 	.word	0x20000288

080038f8 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fa91 	bl	8002e4c <_ZN6Logger5startEv>
	processing_flag_ = true;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	0000      	movs	r0, r0
 800393c:	0000      	movs	r0, r0
	...

08003940 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fa8c 	bl	8002e6a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003980 <_ZN20SystemIdentification4stopEv+0x40>
 800396a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003980 <_ZN20SystemIdentification4stopEv+0x40>
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fafe 	bl	8002f70 <_ZN5Motor8setRatioEdd>
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	f3af 8000 	nop.w
	...

08003988 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	615a      	str	r2, [r3, #20]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	f107 020c 	add.w	r2, r7, #12
 8003a30:	f107 0110 	add.w	r1, r7, #16
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fcbd 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a4e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f7fc fd90 	bl	8000578 <__aeabi_f2d>
 8003a58:	a30b      	add	r3, pc, #44	; (adr r3, 8003a88 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fde3 	bl	8000628 <__aeabi_dmul>
 8003a62:	4603      	mov	r3, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4618      	mov	r0, r3
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7fd f8d5 	bl	8000c18 <__aeabi_d2f>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	ee07 3a90 	vmov	s15, r3
}
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	1ab1d998 	.word	0x1ab1d998
 8003a8c:	3f7830b5 	.word	0x3f7830b5

08003a90 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	ed93 7a00 	vldr	s14, [r3]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8003ab6:	4b48      	ldr	r3, [pc, #288]	; (8003bd8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd4b 	bl	8000578 <__aeabi_f2d>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	460d      	mov	r5, r1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	ed93 7a06 	vldr	s14, [r3, #24]
 8003aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af4:	ee17 0a90 	vmov	r0, s15
 8003af8:	f7fc fd3e 	bl	8000578 <__aeabi_f2d>
 8003afc:	a334      	add	r3, pc, #208	; (adr r3, 8003bd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fd91 	bl	8000628 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fbd5 	bl	80002bc <__adddf3>
 8003b12:	4603      	mov	r3, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	f7fd f87d 	bl	8000c18 <__aeabi_d2f>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003b22:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	ee17 0a90 	vmov	r0, s15
 8003b40:	f7fc fd1a 	bl	8000578 <__aeabi_f2d>
 8003b44:	a322      	add	r3, pc, #136	; (adr r3, 8003bd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fe97 	bl	800087c <__aeabi_ddiv>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	4618      	mov	r0, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	f7fd f85f 	bl	8000c18 <__aeabi_d2f>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8003b5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b74:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8a:	ee17 0a90 	vmov	r0, s15
 8003b8e:	f7fc fcf3 	bl	8000578 <__aeabi_f2d>
 8003b92:	4605      	mov	r5, r0
 8003b94:	460e      	mov	r6, r1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba4:	ee17 0a90 	vmov	r0, s15
 8003ba8:	f7fc fce6 	bl	8000578 <__aeabi_f2d>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	ec43 2b11 	vmov	d1, r2, r3
 8003bb4:	ec46 5b10 	vmov	d0, r5, r6
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff f9d9 	bl	8002f70 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bd4:	3f50624d 	.word	0x3f50624d
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	2000028c 	.word	0x2000028c

08003be0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bec:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c14:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c40:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	615a      	str	r2, [r3, #20]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c6e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c72:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff febf 	bl	8003a20 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff feef 	bl	8003a90 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003d10 <_ZN12VelocityCtrl4stopEv+0x30>
 8003cf8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003d10 <_ZN12VelocityCtrl4stopEv+0x30>
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f937 	bl	8002f70 <_ZN5Motor8setRatioEdd>

}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
	...

08003d18 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	ee07 3a90 	vmov	s15, r3
}
 8003d28:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d42:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003d4e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d52:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003d56:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003d5e:	e000      	b.n	8003d62 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003d60:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d62:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f9      	beq.n	8003d60 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003d6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003d76:	687b      	ldr	r3, [r7, #4]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e009      	b.n	8003daa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	60ba      	str	r2, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ffc9 	bl	8003d36 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3301      	adds	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	dbf1      	blt.n	8003d96 <_write+0x12>
  }
  return len;
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 ff21 	bl	8005c10 <cppExit>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003dea:	f001 fe97 	bl	8005b1c <cppFlip1ms>

		tim6_timer++;
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003df6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d902      	bls.n	8003e08 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003e12:	f001 fed5 	bl	8005bc0 <cppFlip100ns>

		tim7_timer++;
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e1e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d902      	bls.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10e      	bne.n	8003e58 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003e3a:	f001 fecb 	bl	8005bd4 <cppFlip10ms>

		tim13_timer++;
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e46:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a06      	ldr	r2, [pc, #24]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d902      	bls.n	8003e58 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
	}

}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40001000 	.word	0x40001000
 8003e64:	200399ec 	.word	0x200399ec
 8003e68:	0001869f 	.word	0x0001869f
 8003e6c:	40001400 	.word	0x40001400
 8003e70:	20039a30 	.word	0x20039a30
 8003e74:	40001c00 	.word	0x40001c00
 8003e78:	20039a34 	.word	0x20039a34

08003e7c <init>:

void init()
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003e80:	2201      	movs	r2, #1
 8003e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e86:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <init+0x2c>)
 8003e88:	f004 fba0 	bl	80085cc <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003e8c:	4807      	ldr	r0, [pc, #28]	; (8003eac <init+0x30>)
 8003e8e:	f008 fa80 	bl	800c392 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003e92:	4807      	ldr	r0, [pc, #28]	; (8003eb0 <init+0x34>)
 8003e94:	f008 fa7d 	bl	800c392 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003e98:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <init+0x38>)
 8003e9a:	f008 fa7a 	bl	800c392 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003e9e:	f001 fd93 	bl	80059c8 <cppInit>

	//path_following_initialize();

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	20039b18 	.word	0x20039b18
 8003eb0:	20039cbc 	.word	0x20039cbc
 8003eb4:	20039a38 	.word	0x20039a38

08003eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ebc:	f003 f87e 	bl	8006fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ec0:	f000 f82a 	bl	8003f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ec4:	f000 fdbc 	bl	8004a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ec8:	f000 fd8a 	bl	80049e0 <MX_DMA_Init>
  MX_I2C2_Init();
 8003ecc:	f000 f9e8 	bl	80042a0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003ed0:	f000 fa14 	bl	80042fc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003ed4:	f000 fa32 	bl	800433c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003ed8:	f000 fa66 	bl	80043a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003edc:	f000 fb70 	bl	80045c0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003ee0:	f000 fc3c 	bl	800475c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003ee4:	f000 fd52 	bl	800498c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003ee8:	f00a fa26 	bl	800e338 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003eec:	f000 fbcc 	bl	8004688 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003ef0:	f000 f9a8 	bl	8004244 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003ef4:	f000 fb00 	bl	80044f8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003ef8:	f000 fc88 	bl	800480c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003efc:	f000 fcd4 	bl	80048a8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003f00:	f000 f898 	bl	8004034 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003f04:	f000 fbf6 	bl	80046f4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003f08:	f000 fd1c 	bl	8004944 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003f0c:	f7ff ffb6 	bl	8003e7c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003f10:	f001 fe96 	bl	8005c40 <cppLoop>
 8003f14:	e7fc      	b.n	8003f10 <main+0x58>
	...

08003f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b0a4      	sub	sp, #144	; 0x90
 8003f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f22:	2234      	movs	r2, #52	; 0x34
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f00e fe51 	bl	8012bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	223c      	movs	r2, #60	; 0x3c
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f00e fe42 	bl	8012bce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <SystemClock_Config+0x114>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a36      	ldr	r2, [pc, #216]	; (800402c <SystemClock_Config+0x114>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b34      	ldr	r3, [pc, #208]	; (800402c <SystemClock_Config+0x114>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <SystemClock_Config+0x118>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a30      	ldr	r2, [pc, #192]	; (8004030 <SystemClock_Config+0x118>)
 8003f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <SystemClock_Config+0x118>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f94:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f96:	2308      	movs	r3, #8
 8003f98:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f9a:	23b4      	movs	r3, #180	; 0xb4
 8003f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f005 ff42 	bl	8009e40 <HAL_RCC_OscConfig>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003fc2:	f000 fe93 	bl	8004cec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003fc6:	f005 fabd 	bl	8009544 <HAL_PWREx_EnableOverDrive>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003fd0:	f000 fe8c 	bl	8004cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fe0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003fe4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fea:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ff0:	2105      	movs	r1, #5
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f005 faf6 	bl	80095e4 <HAL_RCC_ClockConfig>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003ffe:	f000 fe75 	bl	8004cec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004002:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004006:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004008:	2300      	movs	r3, #0
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800400c:	2300      	movs	r3, #0
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004010:	f107 030c 	add.w	r3, r7, #12
 8004014:	4618      	mov	r0, r3
 8004016:	f005 fcd5 	bl	80099c4 <HAL_RCCEx_PeriphCLKConfig>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004020:	f000 fe64 	bl	8004cec <Error_Handler>
  }
}
 8004024:	bf00      	nop
 8004026:	3790      	adds	r7, #144	; 0x90
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000

08004034 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800403a:	463b      	mov	r3, r7
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004046:	4b7c      	ldr	r3, [pc, #496]	; (8004238 <MX_ADC2_Init+0x204>)
 8004048:	4a7c      	ldr	r2, [pc, #496]	; (800423c <MX_ADC2_Init+0x208>)
 800404a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800404c:	4b7a      	ldr	r3, [pc, #488]	; (8004238 <MX_ADC2_Init+0x204>)
 800404e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004052:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004054:	4b78      	ldr	r3, [pc, #480]	; (8004238 <MX_ADC2_Init+0x204>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800405a:	4b77      	ldr	r3, [pc, #476]	; (8004238 <MX_ADC2_Init+0x204>)
 800405c:	2201      	movs	r2, #1
 800405e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004060:	4b75      	ldr	r3, [pc, #468]	; (8004238 <MX_ADC2_Init+0x204>)
 8004062:	2201      	movs	r2, #1
 8004064:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <MX_ADC2_Init+0x204>)
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800406e:	4b72      	ldr	r3, [pc, #456]	; (8004238 <MX_ADC2_Init+0x204>)
 8004070:	2200      	movs	r2, #0
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004074:	4b70      	ldr	r3, [pc, #448]	; (8004238 <MX_ADC2_Init+0x204>)
 8004076:	4a72      	ldr	r2, [pc, #456]	; (8004240 <MX_ADC2_Init+0x20c>)
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800407a:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <MX_ADC2_Init+0x204>)
 800407c:	2200      	movs	r2, #0
 800407e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004080:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <MX_ADC2_Init+0x204>)
 8004082:	220e      	movs	r2, #14
 8004084:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <MX_ADC2_Init+0x204>)
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800408e:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <MX_ADC2_Init+0x204>)
 8004090:	2201      	movs	r2, #1
 8004092:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004094:	4868      	ldr	r0, [pc, #416]	; (8004238 <MX_ADC2_Init+0x204>)
 8004096:	f003 f825 	bl	80070e4 <HAL_ADC_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80040a0:	f000 fe24 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80040a4:	230a      	movs	r3, #10
 80040a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80040ac:	2306      	movs	r3, #6
 80040ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040b0:	463b      	mov	r3, r7
 80040b2:	4619      	mov	r1, r3
 80040b4:	4860      	ldr	r0, [pc, #384]	; (8004238 <MX_ADC2_Init+0x204>)
 80040b6:	f003 f969 	bl	800738c <HAL_ADC_ConfigChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80040c0:	f000 fe14 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80040c4:	230b      	movs	r3, #11
 80040c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80040c8:	2302      	movs	r3, #2
 80040ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040cc:	463b      	mov	r3, r7
 80040ce:	4619      	mov	r1, r3
 80040d0:	4859      	ldr	r0, [pc, #356]	; (8004238 <MX_ADC2_Init+0x204>)
 80040d2:	f003 f95b 	bl	800738c <HAL_ADC_ConfigChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80040dc:	f000 fe06 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040e0:	230c      	movs	r3, #12
 80040e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80040e4:	2303      	movs	r3, #3
 80040e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040e8:	463b      	mov	r3, r7
 80040ea:	4619      	mov	r1, r3
 80040ec:	4852      	ldr	r0, [pc, #328]	; (8004238 <MX_ADC2_Init+0x204>)
 80040ee:	f003 f94d 	bl	800738c <HAL_ADC_ConfigChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80040f8:	f000 fdf8 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80040fc:	230d      	movs	r3, #13
 80040fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004100:	2304      	movs	r3, #4
 8004102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	4619      	mov	r1, r3
 8004108:	484b      	ldr	r0, [pc, #300]	; (8004238 <MX_ADC2_Init+0x204>)
 800410a:	f003 f93f 	bl	800738c <HAL_ADC_ConfigChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004114:	f000 fdea 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004118:	2300      	movs	r3, #0
 800411a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800411c:	2305      	movs	r3, #5
 800411e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004120:	463b      	mov	r3, r7
 8004122:	4619      	mov	r1, r3
 8004124:	4844      	ldr	r0, [pc, #272]	; (8004238 <MX_ADC2_Init+0x204>)
 8004126:	f003 f931 	bl	800738c <HAL_ADC_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004130:	f000 fddc 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004134:	2301      	movs	r3, #1
 8004136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004138:	2306      	movs	r3, #6
 800413a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800413c:	463b      	mov	r3, r7
 800413e:	4619      	mov	r1, r3
 8004140:	483d      	ldr	r0, [pc, #244]	; (8004238 <MX_ADC2_Init+0x204>)
 8004142:	f003 f923 	bl	800738c <HAL_ADC_ConfigChannel>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800414c:	f000 fdce 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004150:	2302      	movs	r3, #2
 8004152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004154:	2307      	movs	r3, #7
 8004156:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004158:	463b      	mov	r3, r7
 800415a:	4619      	mov	r1, r3
 800415c:	4836      	ldr	r0, [pc, #216]	; (8004238 <MX_ADC2_Init+0x204>)
 800415e:	f003 f915 	bl	800738c <HAL_ADC_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004168:	f000 fdc0 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800416c:	2303      	movs	r3, #3
 800416e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004170:	2308      	movs	r3, #8
 8004172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004174:	463b      	mov	r3, r7
 8004176:	4619      	mov	r1, r3
 8004178:	482f      	ldr	r0, [pc, #188]	; (8004238 <MX_ADC2_Init+0x204>)
 800417a:	f003 f907 	bl	800738c <HAL_ADC_ConfigChannel>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004184:	f000 fdb2 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004188:	2304      	movs	r3, #4
 800418a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800418c:	2309      	movs	r3, #9
 800418e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004190:	463b      	mov	r3, r7
 8004192:	4619      	mov	r1, r3
 8004194:	4828      	ldr	r0, [pc, #160]	; (8004238 <MX_ADC2_Init+0x204>)
 8004196:	f003 f8f9 	bl	800738c <HAL_ADC_ConfigChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80041a0:	f000 fda4 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80041a4:	2305      	movs	r3, #5
 80041a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80041a8:	230a      	movs	r3, #10
 80041aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041ac:	463b      	mov	r3, r7
 80041ae:	4619      	mov	r1, r3
 80041b0:	4821      	ldr	r0, [pc, #132]	; (8004238 <MX_ADC2_Init+0x204>)
 80041b2:	f003 f8eb 	bl	800738c <HAL_ADC_ConfigChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80041bc:	f000 fd96 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80041c0:	2306      	movs	r3, #6
 80041c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80041c4:	230b      	movs	r3, #11
 80041c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041c8:	463b      	mov	r3, r7
 80041ca:	4619      	mov	r1, r3
 80041cc:	481a      	ldr	r0, [pc, #104]	; (8004238 <MX_ADC2_Init+0x204>)
 80041ce:	f003 f8dd 	bl	800738c <HAL_ADC_ConfigChannel>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80041d8:	f000 fd88 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80041dc:	2307      	movs	r3, #7
 80041de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80041e0:	230c      	movs	r3, #12
 80041e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041e4:	463b      	mov	r3, r7
 80041e6:	4619      	mov	r1, r3
 80041e8:	4813      	ldr	r0, [pc, #76]	; (8004238 <MX_ADC2_Init+0x204>)
 80041ea:	f003 f8cf 	bl	800738c <HAL_ADC_ConfigChannel>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80041f4:	f000 fd7a 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80041f8:	2308      	movs	r3, #8
 80041fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80041fc:	230d      	movs	r3, #13
 80041fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004200:	463b      	mov	r3, r7
 8004202:	4619      	mov	r1, r3
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <MX_ADC2_Init+0x204>)
 8004206:	f003 f8c1 	bl	800738c <HAL_ADC_ConfigChannel>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004210:	f000 fd6c 	bl	8004cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004214:	2309      	movs	r3, #9
 8004216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004218:	230e      	movs	r3, #14
 800421a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800421c:	463b      	mov	r3, r7
 800421e:	4619      	mov	r1, r3
 8004220:	4805      	ldr	r0, [pc, #20]	; (8004238 <MX_ADC2_Init+0x204>)
 8004222:	f003 f8b3 	bl	800738c <HAL_ADC_ConfigChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800422c:	f000 fd5e 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	200398bc 	.word	0x200398bc
 800423c:	40012100 	.word	0x40012100
 8004240:	0f000001 	.word	0x0f000001

08004244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004248:	4b12      	ldr	r3, [pc, #72]	; (8004294 <MX_I2C1_Init+0x50>)
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <MX_I2C1_Init+0x54>)
 800424c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <MX_I2C1_Init+0x50>)
 8004250:	4a12      	ldr	r2, [pc, #72]	; (800429c <MX_I2C1_Init+0x58>)
 8004252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <MX_I2C1_Init+0x50>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <MX_I2C1_Init+0x50>)
 800425c:	2200      	movs	r2, #0
 800425e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <MX_I2C1_Init+0x50>)
 8004262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <MX_I2C1_Init+0x50>)
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <MX_I2C1_Init+0x50>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <MX_I2C1_Init+0x50>)
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <MX_I2C1_Init+0x50>)
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004280:	4804      	ldr	r0, [pc, #16]	; (8004294 <MX_I2C1_Init+0x50>)
 8004282:	f004 f9d5 	bl	8008630 <HAL_I2C_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800428c:	f000 fd2e 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20039904 	.word	0x20039904
 8004298:	40005400 	.word	0x40005400
 800429c:	000186a0 	.word	0x000186a0

080042a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <MX_I2C2_Init+0x54>)
 80042a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042ac:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <MX_I2C2_Init+0x58>)
 80042ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80042dc:	4804      	ldr	r0, [pc, #16]	; (80042f0 <MX_I2C2_Init+0x50>)
 80042de:	f004 f9a7 	bl	8008630 <HAL_I2C_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80042e8:	f000 fd00 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20039998 	.word	0x20039998
 80042f4:	40005800 	.word	0x40005800
 80042f8:	000186a0 	.word	0x000186a0

080042fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <MX_SDIO_SD_Init+0x3c>)
 8004304:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 8004320:	2200      	movs	r2, #0
 8004322:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <MX_SDIO_SD_Init+0x38>)
 8004326:	2200      	movs	r2, #0
 8004328:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	20039b98 	.word	0x20039b98
 8004338:	40012c00 	.word	0x40012c00

0800433c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <MX_SPI2_Init+0x68>)
 8004344:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800434c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <MX_SPI2_Init+0x64>)
 800435c:	2202      	movs	r2, #2
 800435e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004362:	2201      	movs	r2, #1
 8004364:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800436c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004370:	2228      	movs	r2, #40	; 0x28
 8004372:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <MX_SPI2_Init+0x64>)
 800437c:	2200      	movs	r2, #0
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004382:	2200      	movs	r2, #0
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <MX_SPI2_Init+0x64>)
 8004388:	220a      	movs	r2, #10
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800438c:	4804      	ldr	r0, [pc, #16]	; (80043a0 <MX_SPI2_Init+0x64>)
 800438e:	f007 fa81 	bl	800b894 <HAL_SPI_Init>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004398:	f000 fca8 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	200397e4 	.word	0x200397e4
 80043a4:	40003800 	.word	0x40003800

080043a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b09a      	sub	sp, #104	; 0x68
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f00e fc09 	bl	8012bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043c6:	f107 0320 	add.w	r3, r7, #32
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	615a      	str	r2, [r3, #20]
 80043d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043da:	463b      	mov	r3, r7
 80043dc:	2220      	movs	r2, #32
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f00e fbf4 	bl	8012bce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043e6:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <MX_TIM1_Init+0x148>)
 80043e8:	4a42      	ldr	r2, [pc, #264]	; (80044f4 <MX_TIM1_Init+0x14c>)
 80043ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043ec:	4b40      	ldr	r3, [pc, #256]	; (80044f0 <MX_TIM1_Init+0x148>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <MX_TIM1_Init+0x148>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043f8:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <MX_TIM1_Init+0x148>)
 80043fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004400:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <MX_TIM1_Init+0x148>)
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <MX_TIM1_Init+0x148>)
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440c:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <MX_TIM1_Init+0x148>)
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004412:	4837      	ldr	r0, [pc, #220]	; (80044f0 <MX_TIM1_Init+0x148>)
 8004414:	f007 ffe1 	bl	800c3da <HAL_TIM_PWM_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800441e:	f000 fc65 	bl	8004cec <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004422:	2303      	movs	r3, #3
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004426:	2300      	movs	r3, #0
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800442a:	2301      	movs	r3, #1
 800442c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800442e:	2300      	movs	r3, #0
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004436:	2300      	movs	r3, #0
 8004438:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800443a:	2301      	movs	r3, #1
 800443c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800443e:	2300      	movs	r3, #0
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004446:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800444a:	4619      	mov	r1, r3
 800444c:	4828      	ldr	r0, [pc, #160]	; (80044f0 <MX_TIM1_Init+0x148>)
 800444e:	f008 f82d 	bl	800c4ac <HAL_TIM_Encoder_Init>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004458:	f000 fc48 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004468:	4619      	mov	r1, r3
 800446a:	4821      	ldr	r0, [pc, #132]	; (80044f0 <MX_TIM1_Init+0x148>)
 800446c:	f008 fd54 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004476:	f000 fc39 	bl	8004cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800447a:	2360      	movs	r3, #96	; 0x60
 800447c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004486:	2300      	movs	r3, #0
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004496:	f107 0320 	add.w	r3, r7, #32
 800449a:	2208      	movs	r2, #8
 800449c:	4619      	mov	r1, r3
 800449e:	4814      	ldr	r0, [pc, #80]	; (80044f0 <MX_TIM1_Init+0x148>)
 80044a0:	f008 f9d6 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80044aa:	f000 fc1f 	bl	8004cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044cc:	463b      	mov	r3, r7
 80044ce:	4619      	mov	r1, r3
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <MX_TIM1_Init+0x148>)
 80044d2:	f008 fd9d 	bl	800d010 <HAL_TIMEx_ConfigBreakDeadTime>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80044dc:	f000 fc06 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044e0:	4803      	ldr	r0, [pc, #12]	; (80044f0 <MX_TIM1_Init+0x148>)
 80044e2:	f000 fff3 	bl	80054cc <HAL_TIM_MspPostInit>

}
 80044e6:	bf00      	nop
 80044e8:	3768      	adds	r7, #104	; 0x68
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20039b58 	.word	0x20039b58
 80044f4:	40010000 	.word	0x40010000

080044f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044fe:	f107 0320 	add.w	r3, r7, #32
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	609a      	str	r2, [r3, #8]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	611a      	str	r2, [r3, #16]
 8004516:	615a      	str	r2, [r3, #20]
 8004518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <MX_TIM3_Init+0xc0>)
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <MX_TIM3_Init+0xc4>)
 800451e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <MX_TIM3_Init+0xc0>)
 800452e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004532:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800453a:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <MX_TIM3_Init+0xc0>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004540:	481d      	ldr	r0, [pc, #116]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004542:	f007 ff4a 	bl	800c3da <HAL_TIM_PWM_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800454c:	f000 fbce 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	4619      	mov	r1, r3
 800455e:	4816      	ldr	r0, [pc, #88]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004560:	f008 fcda 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800456a:	f000 fbbf 	bl	8004cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800456e:	2360      	movs	r3, #96	; 0x60
 8004570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	2200      	movs	r2, #0
 8004582:	4619      	mov	r1, r3
 8004584:	480c      	ldr	r0, [pc, #48]	; (80045b8 <MX_TIM3_Init+0xc0>)
 8004586:	f008 f963 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004590:	f000 fbac 	bl	8004cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2204      	movs	r2, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4807      	ldr	r0, [pc, #28]	; (80045b8 <MX_TIM3_Init+0xc0>)
 800459c:	f008 f958 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80045a6:	f000 fba1 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045aa:	4803      	ldr	r0, [pc, #12]	; (80045b8 <MX_TIM3_Init+0xc0>)
 80045ac:	f000 ff8e 	bl	80054cc <HAL_TIM_MspPostInit>

}
 80045b0:	bf00      	nop
 80045b2:	3728      	adds	r7, #40	; 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200399f0 	.word	0x200399f0
 80045bc:	40000400 	.word	0x40000400

080045c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c6:	f107 0320 	add.w	r3, r7, #32
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	615a      	str	r2, [r3, #20]
 80045e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <MX_TIM4_Init+0xc0>)
 80045e4:	4a27      	ldr	r2, [pc, #156]	; (8004684 <MX_TIM4_Init+0xc4>)
 80045e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <MX_TIM4_Init+0xc0>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <MX_TIM4_Init+0xc0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <MX_TIM4_Init+0xc0>)
 80045f6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80045fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <MX_TIM4_Init+0xc0>)
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004602:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <MX_TIM4_Init+0xc0>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004608:	481d      	ldr	r0, [pc, #116]	; (8004680 <MX_TIM4_Init+0xc0>)
 800460a:	f007 fee6 	bl	800c3da <HAL_TIM_PWM_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004614:	f000 fb6a 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004620:	f107 0320 	add.w	r3, r7, #32
 8004624:	4619      	mov	r1, r3
 8004626:	4816      	ldr	r0, [pc, #88]	; (8004680 <MX_TIM4_Init+0xc0>)
 8004628:	f008 fc76 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004632:	f000 fb5b 	bl	8004cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004636:	2360      	movs	r3, #96	; 0x60
 8004638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	2208      	movs	r2, #8
 800464a:	4619      	mov	r1, r3
 800464c:	480c      	ldr	r0, [pc, #48]	; (8004680 <MX_TIM4_Init+0xc0>)
 800464e:	f008 f8ff 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004658:	f000 fb48 	bl	8004cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	220c      	movs	r2, #12
 8004660:	4619      	mov	r1, r3
 8004662:	4807      	ldr	r0, [pc, #28]	; (8004680 <MX_TIM4_Init+0xc0>)
 8004664:	f008 f8f4 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800466e:	f000 fb3d 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004672:	4803      	ldr	r0, [pc, #12]	; (8004680 <MX_TIM4_Init+0xc0>)
 8004674:	f000 ff2a 	bl	80054cc <HAL_TIM_MspPostInit>

}
 8004678:	bf00      	nop
 800467a:	3728      	adds	r7, #40	; 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2003987c 	.word	0x2003987c
 8004684:	40000800 	.word	0x40000800

08004688 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800468e:	463b      	mov	r3, r7
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <MX_TIM6_Init+0x64>)
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <MX_TIM6_Init+0x68>)
 800469a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <MX_TIM6_Init+0x64>)
 800469e:	2259      	movs	r2, #89	; 0x59
 80046a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <MX_TIM6_Init+0x64>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <MX_TIM6_Init+0x64>)
 80046aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <MX_TIM6_Init+0x64>)
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80046b6:	480d      	ldr	r0, [pc, #52]	; (80046ec <MX_TIM6_Init+0x64>)
 80046b8:	f007 fe40 	bl	800c33c <HAL_TIM_Base_Init>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80046c2:	f000 fb13 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80046ce:	463b      	mov	r3, r7
 80046d0:	4619      	mov	r1, r3
 80046d2:	4806      	ldr	r0, [pc, #24]	; (80046ec <MX_TIM6_Init+0x64>)
 80046d4:	f008 fc20 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80046de:	f000 fb05 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20039b18 	.word	0x20039b18
 80046f0:	40001000 	.word	0x40001000

080046f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fa:	463b      	mov	r3, r7
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <MX_TIM7_Init+0x60>)
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <MX_TIM7_Init+0x64>)
 8004706:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <MX_TIM7_Init+0x60>)
 800470a:	22b3      	movs	r2, #179	; 0xb3
 800470c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <MX_TIM7_Init+0x60>)
 8004710:	2200      	movs	r2, #0
 8004712:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <MX_TIM7_Init+0x60>)
 8004716:	2231      	movs	r2, #49	; 0x31
 8004718:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <MX_TIM7_Init+0x60>)
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004720:	480c      	ldr	r0, [pc, #48]	; (8004754 <MX_TIM7_Init+0x60>)
 8004722:	f007 fe0b 	bl	800c33c <HAL_TIM_Base_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800472c:	f000 fade 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004730:	2300      	movs	r3, #0
 8004732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004734:	2300      	movs	r3, #0
 8004736:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004738:	463b      	mov	r3, r7
 800473a:	4619      	mov	r1, r3
 800473c:	4805      	ldr	r0, [pc, #20]	; (8004754 <MX_TIM7_Init+0x60>)
 800473e:	f008 fbeb 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004748:	f000 fad0 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20039cbc 	.word	0x20039cbc
 8004758:	40001400 	.word	0x40001400

0800475c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004762:	f107 030c 	add.w	r3, r7, #12
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f00e fa2f 	bl	8012bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004770:	1d3b      	adds	r3, r7, #4
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004778:	4b22      	ldr	r3, [pc, #136]	; (8004804 <MX_TIM8_Init+0xa8>)
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <MX_TIM8_Init+0xac>)
 800477c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <MX_TIM8_Init+0xa8>)
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <MX_TIM8_Init+0xa8>)
 8004786:	2210      	movs	r2, #16
 8004788:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800478a:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <MX_TIM8_Init+0xa8>)
 800478c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004790:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <MX_TIM8_Init+0xa8>)
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <MX_TIM8_Init+0xa8>)
 800479a:	2200      	movs	r2, #0
 800479c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <MX_TIM8_Init+0xa8>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80047a4:	2303      	movs	r3, #3
 80047a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80047c8:	f107 030c 	add.w	r3, r7, #12
 80047cc:	4619      	mov	r1, r3
 80047ce:	480d      	ldr	r0, [pc, #52]	; (8004804 <MX_TIM8_Init+0xa8>)
 80047d0:	f007 fe6c 	bl	800c4ac <HAL_TIM_Encoder_Init>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80047da:	f000 fa87 	bl	8004cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4806      	ldr	r0, [pc, #24]	; (8004804 <MX_TIM8_Init+0xa8>)
 80047ec:	f008 fb94 	bl	800cf18 <HAL_TIMEx_MasterConfigSynchronization>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80047f6:	f000 fa79 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80047fa:	bf00      	nop
 80047fc:	3730      	adds	r7, #48	; 0x30
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2003983c 	.word	0x2003983c
 8004808:	40010400 	.word	0x40010400

0800480c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	615a      	str	r2, [r3, #20]
 8004822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <MX_TIM10_Init+0x98>)
 8004828:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <MX_TIM10_Init+0x94>)
 800482c:	2200      	movs	r2, #0
 800482e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800483c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004846:	2200      	movs	r2, #0
 8004848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800484a:	4815      	ldr	r0, [pc, #84]	; (80048a0 <MX_TIM10_Init+0x94>)
 800484c:	f007 fd76 	bl	800c33c <HAL_TIM_Base_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004856:	f000 fa49 	bl	8004cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800485a:	4811      	ldr	r0, [pc, #68]	; (80048a0 <MX_TIM10_Init+0x94>)
 800485c:	f007 fdbd 	bl	800c3da <HAL_TIM_PWM_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004866:	f000 fa41 	bl	8004cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800486a:	2360      	movs	r3, #96	; 0x60
 800486c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	2200      	movs	r2, #0
 800487e:	4619      	mov	r1, r3
 8004880:	4807      	ldr	r0, [pc, #28]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004882:	f007 ffe5 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800488c:	f000 fa2e 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004890:	4803      	ldr	r0, [pc, #12]	; (80048a0 <MX_TIM10_Init+0x94>)
 8004892:	f000 fe1b 	bl	80054cc <HAL_TIM_MspPostInit>

}
 8004896:	bf00      	nop
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20039958 	.word	0x20039958
 80048a4:	40014400 	.word	0x40014400

080048a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
 80048bc:	615a      	str	r2, [r3, #20]
 80048be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <MX_TIM11_Init+0x94>)
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <MX_TIM11_Init+0x98>)
 80048c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <MX_TIM11_Init+0x94>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <MX_TIM11_Init+0x94>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80048d2:	4b1a      	ldr	r3, [pc, #104]	; (800493c <MX_TIM11_Init+0x94>)
 80048d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <MX_TIM11_Init+0x94>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e0:	4b16      	ldr	r3, [pc, #88]	; (800493c <MX_TIM11_Init+0x94>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80048e6:	4815      	ldr	r0, [pc, #84]	; (800493c <MX_TIM11_Init+0x94>)
 80048e8:	f007 fd28 	bl	800c33c <HAL_TIM_Base_Init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80048f2:	f000 f9fb 	bl	8004cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80048f6:	4811      	ldr	r0, [pc, #68]	; (800493c <MX_TIM11_Init+0x94>)
 80048f8:	f007 fd6f 	bl	800c3da <HAL_TIM_PWM_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004902:	f000 f9f3 	bl	8004cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004906:	2360      	movs	r3, #96	; 0x60
 8004908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	2200      	movs	r2, #0
 800491a:	4619      	mov	r1, r3
 800491c:	4807      	ldr	r0, [pc, #28]	; (800493c <MX_TIM11_Init+0x94>)
 800491e:	f007 ff97 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004928:	f000 f9e0 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800492c:	4803      	ldr	r0, [pc, #12]	; (800493c <MX_TIM11_Init+0x94>)
 800492e:	f000 fdcd 	bl	80054cc <HAL_TIM_MspPostInit>

}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20039a78 	.word	0x20039a78
 8004940:	40014800 	.word	0x40014800

08004944 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_TIM13_Init+0x40>)
 800494a:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <MX_TIM13_Init+0x44>)
 800494c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <MX_TIM13_Init+0x40>)
 8004950:	2259      	movs	r2, #89	; 0x59
 8004952:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_TIM13_Init+0x40>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <MX_TIM13_Init+0x40>)
 800495c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004960:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_TIM13_Init+0x40>)
 8004964:	2200      	movs	r2, #0
 8004966:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_TIM13_Init+0x40>)
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_TIM13_Init+0x40>)
 8004970:	f007 fce4 	bl	800c33c <HAL_TIM_Base_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800497a:	f000 f9b7 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20039a38 	.word	0x20039a38
 8004988:	40001c00 	.word	0x40001c00

0800498c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <MX_USART2_UART_Init+0x50>)
 8004994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 8004998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800499c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049b2:	220c      	movs	r2, #12
 80049b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <MX_USART2_UART_Init+0x4c>)
 80049c4:	f008 fb8a 	bl	800d0dc <HAL_UART_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80049ce:	f000 f98d 	bl	8004cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20039c1c 	.word	0x20039c1c
 80049dc:	40004400 	.word	0x40004400

080049e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <MX_DMA_Init+0x5c>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <MX_DMA_Init+0x5c>)
 80049f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049f4:	6313      	str	r3, [r2, #48]	; 0x30
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <MX_DMA_Init+0x5c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	203a      	movs	r0, #58	; 0x3a
 8004a08:	f003 f84b 	bl	8007aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004a0c:	203a      	movs	r0, #58	; 0x3a
 8004a0e:	f003 f864 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	203b      	movs	r0, #59	; 0x3b
 8004a18:	f003 f843 	bl	8007aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004a1c:	203b      	movs	r0, #59	; 0x3b
 8004a1e:	f003 f85c 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004a22:	2200      	movs	r2, #0
 8004a24:	2100      	movs	r1, #0
 8004a26:	2045      	movs	r0, #69	; 0x45
 8004a28:	f003 f83b 	bl	8007aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004a2c:	2045      	movs	r0, #69	; 0x45
 8004a2e:	f003 f854 	bl	8007ada <HAL_NVIC_EnableIRQ>

}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a46:	f107 031c 	add.w	r3, r7, #28
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	4b9c      	ldr	r3, [pc, #624]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	4a9b      	ldr	r2, [pc, #620]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a60:	f043 0310 	orr.w	r3, r3, #16
 8004a64:	6313      	str	r3, [r2, #48]	; 0x30
 8004a66:	4b99      	ldr	r3, [pc, #612]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	4b95      	ldr	r3, [pc, #596]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	4a94      	ldr	r2, [pc, #592]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	6313      	str	r3, [r2, #48]	; 0x30
 8004a82:	4b92      	ldr	r3, [pc, #584]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	4b8e      	ldr	r3, [pc, #568]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a8d      	ldr	r2, [pc, #564]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	4a86      	ldr	r2, [pc, #536]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aba:	4b84      	ldr	r3, [pc, #528]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	4b80      	ldr	r3, [pc, #512]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	4b79      	ldr	r3, [pc, #484]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <MX_GPIO_Init+0x28c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b04:	4872      	ldr	r0, [pc, #456]	; (8004cd0 <MX_GPIO_Init+0x290>)
 8004b06:	f003 fd61 	bl	80085cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b10:	4870      	ldr	r0, [pc, #448]	; (8004cd4 <MX_GPIO_Init+0x294>)
 8004b12:	f003 fd5b 	bl	80085cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004b16:	2200      	movs	r2, #0
 8004b18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b1c:	486e      	ldr	r0, [pc, #440]	; (8004cd8 <MX_GPIO_Init+0x298>)
 8004b1e:	f003 fd55 	bl	80085cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b22:	2200      	movs	r2, #0
 8004b24:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004b28:	486c      	ldr	r0, [pc, #432]	; (8004cdc <MX_GPIO_Init+0x29c>)
 8004b2a:	f003 fd4f 	bl	80085cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b32:	4b6b      	ldr	r3, [pc, #428]	; (8004ce0 <MX_GPIO_Init+0x2a0>)
 8004b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b3a:	f107 031c 	add.w	r3, r7, #28
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4863      	ldr	r0, [pc, #396]	; (8004cd0 <MX_GPIO_Init+0x290>)
 8004b42:	f003 fb81 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b46:	230f      	movs	r3, #15
 8004b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	4619      	mov	r1, r3
 8004b58:	4862      	ldr	r0, [pc, #392]	; (8004ce4 <MX_GPIO_Init+0x2a4>)
 8004b5a:	f003 fb75 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b5e:	23e1      	movs	r3, #225	; 0xe1
 8004b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b62:	2303      	movs	r3, #3
 8004b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6a:	f107 031c 	add.w	r3, r7, #28
 8004b6e:	4619      	mov	r1, r3
 8004b70:	485a      	ldr	r0, [pc, #360]	; (8004cdc <MX_GPIO_Init+0x29c>)
 8004b72:	f003 fb69 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b76:	2303      	movs	r3, #3
 8004b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b82:	f107 031c 	add.w	r3, r7, #28
 8004b86:	4619      	mov	r1, r3
 8004b88:	4852      	ldr	r0, [pc, #328]	; (8004cd4 <MX_GPIO_Init+0x294>)
 8004b8a:	f003 fb5d 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b8e:	2304      	movs	r3, #4
 8004b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9a:	f107 031c 	add.w	r3, r7, #28
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	484c      	ldr	r0, [pc, #304]	; (8004cd4 <MX_GPIO_Init+0x294>)
 8004ba2:	f003 fb51 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004ba6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bac:	2300      	movs	r3, #0
 8004bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bb4:	f107 031c 	add.w	r3, r7, #28
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4845      	ldr	r0, [pc, #276]	; (8004cd0 <MX_GPIO_Init+0x290>)
 8004bbc:	f003 fb44 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	483d      	ldr	r0, [pc, #244]	; (8004cd0 <MX_GPIO_Init+0x290>)
 8004bda:	f003 fb35 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be4:	2301      	movs	r3, #1
 8004be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4837      	ldr	r0, [pc, #220]	; (8004cd4 <MX_GPIO_Init+0x294>)
 8004bf8:	f003 fb26 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <MX_GPIO_Init+0x2a8>)
 8004c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c0a:	f107 031c 	add.w	r3, r7, #28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4831      	ldr	r0, [pc, #196]	; (8004cd8 <MX_GPIO_Init+0x298>)
 8004c12:	f003 fb19 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c28:	f107 031c 	add.w	r3, r7, #28
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	482a      	ldr	r0, [pc, #168]	; (8004cd8 <MX_GPIO_Init+0x298>)
 8004c30:	f003 fb0a 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c46:	f107 031c 	add.w	r3, r7, #28
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4822      	ldr	r0, [pc, #136]	; (8004cd8 <MX_GPIO_Init+0x298>)
 8004c4e:	f003 fafb 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004c52:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004c56:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	4619      	mov	r1, r3
 8004c6a:	481c      	ldr	r0, [pc, #112]	; (8004cdc <MX_GPIO_Init+0x29c>)
 8004c6c:	f003 faec 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c76:	2300      	movs	r3, #0
 8004c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	4619      	mov	r1, r3
 8004c84:	4815      	ldr	r0, [pc, #84]	; (8004cdc <MX_GPIO_Init+0x29c>)
 8004c86:	f003 fadf 	bl	8008248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004c8a:	239b      	movs	r3, #155	; 0x9b
 8004c8c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c92:	2301      	movs	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c96:	f107 031c 	add.w	r3, r7, #28
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	480e      	ldr	r0, [pc, #56]	; (8004cd8 <MX_GPIO_Init+0x298>)
 8004c9e:	f003 fad3 	bl	8008248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	2008      	movs	r0, #8
 8004ca8:	f002 fefb 	bl	8007aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004cac:	2008      	movs	r0, #8
 8004cae:	f002 ff14 	bl	8007ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2017      	movs	r0, #23
 8004cb8:	f002 fef3 	bl	8007aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004cbc:	2017      	movs	r0, #23
 8004cbe:	f002 ff0c 	bl	8007ada <HAL_NVIC_EnableIRQ>

}
 8004cc2:	bf00      	nop
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40020c00 	.word	0x40020c00
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	10310000 	.word	0x10310000
 8004ce4:	40020800 	.word	0x40020800
 8004ce8:	10110000 	.word	0x10110000

08004cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cf2:	e7fe      	b.n	8004cf2 <Error_Handler+0x6>

08004cf4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d18:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_MspInit+0x4c>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5c:	f107 031c 	add.w	r3, r7, #28
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4a      	ldr	r2, [pc, #296]	; (8004e9c <HAL_ADC_MspInit+0x148>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f040 808e 	bne.w	8004e94 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d80:	4a47      	ldr	r2, [pc, #284]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d86:	6453      	str	r3, [r2, #68]	; 0x44
 8004d88:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4a40      	ldr	r2, [pc, #256]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	6313      	str	r3, [r2, #48]	; 0x30
 8004da4:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	4a39      	ldr	r2, [pc, #228]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc0:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	4a32      	ldr	r2, [pc, #200]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004dd6:	f043 0302 	orr.w	r3, r3, #2
 8004dda:	6313      	str	r3, [r2, #48]	; 0x30
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_ADC_MspInit+0x14c>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004de8:	230f      	movs	r3, #15
 8004dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dec:	2303      	movs	r3, #3
 8004dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	4619      	mov	r1, r3
 8004dfa:	482a      	ldr	r0, [pc, #168]	; (8004ea4 <HAL_ADC_MspInit+0x150>)
 8004dfc:	f003 fa24 	bl	8008248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e00:	23ff      	movs	r3, #255	; 0xff
 8004e02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e04:	2303      	movs	r3, #3
 8004e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0c:	f107 031c 	add.w	r3, r7, #28
 8004e10:	4619      	mov	r1, r3
 8004e12:	4825      	ldr	r0, [pc, #148]	; (8004ea8 <HAL_ADC_MspInit+0x154>)
 8004e14:	f003 fa18 	bl	8008248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4820      	ldr	r0, [pc, #128]	; (8004eac <HAL_ADC_MspInit+0x158>)
 8004e2c:	f003 fa0c 	bl	8008248 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <HAL_ADC_MspInit+0x160>)
 8004e34:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004e4a:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e50:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e58:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e60:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e68:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e70:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004e78:	480d      	ldr	r0, [pc, #52]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e7a:	f002 fe49 	bl	8007b10 <HAL_DMA_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004e84:	f7ff ff32 	bl	8004cec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <HAL_ADC_MspInit+0x15c>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004e94:	bf00      	nop
 8004e96:	3730      	adds	r7, #48	; 0x30
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40012100 	.word	0x40012100
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40020800 	.word	0x40020800
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	40020400 	.word	0x40020400
 8004eb0:	20039c5c 	.word	0x20039c5c
 8004eb4:	40026440 	.word	0x40026440

08004eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 031c 	add.w	r3, r7, #28
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a32      	ldr	r2, [pc, #200]	; (8004fa0 <HAL_I2C_MspInit+0xe8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d12c      	bne.n	8004f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4a30      	ldr	r2, [pc, #192]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ef6:	23c0      	movs	r3, #192	; 0xc0
 8004ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004efa:	2312      	movs	r3, #18
 8004efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efe:	2301      	movs	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f02:	2303      	movs	r3, #3
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f06:	2304      	movs	r3, #4
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0a:	f107 031c 	add.w	r3, r7, #28
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4825      	ldr	r0, [pc, #148]	; (8004fa8 <HAL_I2C_MspInit+0xf0>)
 8004f12:	f003 f999 	bl	8008248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f24:	6413      	str	r3, [r2, #64]	; 0x40
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f32:	e031      	b.n	8004f98 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_I2C_MspInit+0xf4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d12c      	bne.n	8004f98 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f60:	2312      	movs	r3, #18
 8004f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f64:	2301      	movs	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f70:	f107 031c 	add.w	r3, r7, #28
 8004f74:	4619      	mov	r1, r3
 8004f76:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <HAL_I2C_MspInit+0xf0>)
 8004f78:	f003 f966 	bl	8008248 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_I2C_MspInit+0xec>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3730      	adds	r7, #48	; 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40005400 	.word	0x40005400
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40020400 	.word	0x40020400
 8004fac:	40005800 	.word	0x40005800

08004fb0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a69      	ldr	r2, [pc, #420]	; (8005174 <HAL_SD_MspInit+0x1c4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f040 80cb 	bne.w	800516a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	4a66      	ldr	r2, [pc, #408]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8004fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4b60      	ldr	r3, [pc, #384]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	4a5f      	ldr	r2, [pc, #380]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8005000:	4b5d      	ldr	r3, [pc, #372]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	4b59      	ldr	r3, [pc, #356]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4a58      	ldr	r2, [pc, #352]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 8005016:	f043 0308 	orr.w	r3, r3, #8
 800501a:	6313      	str	r3, [r2, #48]	; 0x30
 800501c:	4b56      	ldr	r3, [pc, #344]	; (8005178 <HAL_SD_MspInit+0x1c8>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005028:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800502c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	2302      	movs	r3, #2
 8005030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005036:	2303      	movs	r3, #3
 8005038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800503a:	230c      	movs	r3, #12
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	4619      	mov	r1, r3
 8005044:	484d      	ldr	r0, [pc, #308]	; (800517c <HAL_SD_MspInit+0x1cc>)
 8005046:	f003 f8ff 	bl	8008248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800504a:	2304      	movs	r3, #4
 800504c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	2302      	movs	r3, #2
 8005050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005056:	2303      	movs	r3, #3
 8005058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800505a:	230c      	movs	r3, #12
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	4619      	mov	r1, r3
 8005064:	4846      	ldr	r0, [pc, #280]	; (8005180 <HAL_SD_MspInit+0x1d0>)
 8005066:	f003 f8ef 	bl	8008248 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800506a:	4b46      	ldr	r3, [pc, #280]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 800506c:	4a46      	ldr	r2, [pc, #280]	; (8005188 <HAL_SD_MspInit+0x1d8>)
 800506e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005070:	4b44      	ldr	r3, [pc, #272]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 8005072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005076:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005078:	4b42      	ldr	r3, [pc, #264]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800507e:	4b41      	ldr	r3, [pc, #260]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 8005080:	2200      	movs	r2, #0
 8005082:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005084:	4b3f      	ldr	r3, [pc, #252]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 8005086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800508a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800508c:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 800508e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005092:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005094:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 8005096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800509a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800509c:	4b39      	ldr	r3, [pc, #228]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 800509e:	2220      	movs	r2, #32
 80050a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050ac:	2204      	movs	r2, #4
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050b2:	2203      	movs	r2, #3
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80050b6:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80050c6:	482f      	ldr	r0, [pc, #188]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050c8:	f002 fd22 	bl	8007b10 <HAL_DMA_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80050d2:	f7ff fe0b 	bl	8004cec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_SD_MspInit+0x1d4>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_SD_MspInit+0x1dc>)
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <HAL_SD_MspInit+0x1e0>)
 80050e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <HAL_SD_MspInit+0x1dc>)
 80050ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <HAL_SD_MspInit+0x1dc>)
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_SD_MspInit+0x1dc>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050fc:	4b23      	ldr	r3, [pc, #140]	; (800518c <HAL_SD_MspInit+0x1dc>)
 80050fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005102:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800510a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800510c:	4b1f      	ldr	r3, [pc, #124]	; (800518c <HAL_SD_MspInit+0x1dc>)
 800510e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005112:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005116:	2220      	movs	r2, #32
 8005118:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800511a:	4b1c      	ldr	r3, [pc, #112]	; (800518c <HAL_SD_MspInit+0x1dc>)
 800511c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005120:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005124:	2204      	movs	r2, #4
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005128:	4b18      	ldr	r3, [pc, #96]	; (800518c <HAL_SD_MspInit+0x1dc>)
 800512a:	2203      	movs	r2, #3
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005130:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005134:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800513e:	4813      	ldr	r0, [pc, #76]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005140:	f002 fce6 	bl	8007b10 <HAL_DMA_Init>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800514a:	f7ff fdcf 	bl	8004cec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a0e      	ldr	r2, [pc, #56]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <HAL_SD_MspInit+0x1dc>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2031      	movs	r0, #49	; 0x31
 8005160:	f002 fc9f 	bl	8007aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005164:	2031      	movs	r0, #49	; 0x31
 8005166:	f002 fcb8 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800516a:	bf00      	nop
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40023800 	.word	0x40023800
 800517c:	40020800 	.word	0x40020800
 8005180:	40020c00 	.word	0x40020c00
 8005184:	20039784 	.word	0x20039784
 8005188:	40026458 	.word	0x40026458
 800518c:	20039ab8 	.word	0x20039ab8
 8005190:	400264a0 	.word	0x400264a0

08005194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	609a      	str	r2, [r3, #8]
 80051a8:	60da      	str	r2, [r3, #12]
 80051aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_SPI_MspInit+0x84>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d12c      	bne.n	8005210 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	4b18      	ldr	r3, [pc, #96]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a17      	ldr	r2, [pc, #92]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <HAL_SPI_MspInit+0x88>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80051ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80051f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fc:	2303      	movs	r3, #3
 80051fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005200:	2305      	movs	r3, #5
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4619      	mov	r1, r3
 800520a:	4805      	ldr	r0, [pc, #20]	; (8005220 <HAL_SPI_MspInit+0x8c>)
 800520c:	f003 f81c 	bl	8008248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005210:	bf00      	nop
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40003800 	.word	0x40003800
 800521c:	40023800 	.word	0x40023800
 8005220:	40020400 	.word	0x40020400

08005224 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 031c 	add.w	r3, r7, #28
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <HAL_TIM_PWM_MspInit+0xd4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12d      	bne.n	80052a2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6453      	str	r3, [r2, #68]	; 0x44
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	4a24      	ldr	r2, [pc, #144]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 800526c:	f043 0310 	orr.w	r3, r3, #16
 8005270:	6313      	str	r3, [r2, #48]	; 0x30
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800527e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	2300      	movs	r3, #0
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005290:	2301      	movs	r3, #1
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	4619      	mov	r1, r3
 800529a:	4819      	ldr	r0, [pc, #100]	; (8005300 <HAL_TIM_PWM_MspInit+0xdc>)
 800529c:	f002 ffd4 	bl	8008248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80052a0:	e026      	b.n	80052f0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a17      	ldr	r2, [pc, #92]	; (8005304 <HAL_TIM_PWM_MspInit+0xe0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	6413      	str	r3, [r2, #64]	; 0x40
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	693b      	ldr	r3, [r7, #16]
}
 80052c8:	e012      	b.n	80052f0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <HAL_TIM_PWM_MspInit+0xe4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10d      	bne.n	80052f0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	4b08      	ldr	r3, [pc, #32]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	4a07      	ldr	r2, [pc, #28]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052de:	f043 0304 	orr.w	r3, r3, #4
 80052e2:	6413      	str	r3, [r2, #64]	; 0x40
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_TIM_PWM_MspInit+0xd8>)
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	bf00      	nop
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40021000 	.word	0x40021000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800

0800530c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3e      	ldr	r2, [pc, #248]	; (8005414 <HAL_TIM_Base_MspInit+0x108>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d116      	bne.n	800534c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a3c      	ldr	r2, [pc, #240]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005328:	f043 0310 	orr.w	r3, r3, #16
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800533a:	2200      	movs	r2, #0
 800533c:	2101      	movs	r1, #1
 800533e:	2036      	movs	r0, #54	; 0x36
 8005340:	f002 fbaf 	bl	8007aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005344:	2036      	movs	r0, #54	; 0x36
 8005346:	f002 fbc8 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800534a:	e05e      	b.n	800540a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a32      	ldr	r2, [pc, #200]	; (800541c <HAL_TIM_Base_MspInit+0x110>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d116      	bne.n	8005384 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	4a2e      	ldr	r2, [pc, #184]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005360:	f043 0320 	orr.w	r3, r3, #32
 8005364:	6413      	str	r3, [r2, #64]	; 0x40
 8005366:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005372:	2200      	movs	r2, #0
 8005374:	2100      	movs	r1, #0
 8005376:	2037      	movs	r0, #55	; 0x37
 8005378:	f002 fb93 	bl	8007aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800537c:	2037      	movs	r0, #55	; 0x37
 800537e:	f002 fbac 	bl	8007ada <HAL_NVIC_EnableIRQ>
}
 8005382:	e042      	b.n	800540a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <HAL_TIM_Base_MspInit+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10e      	bne.n	80053ac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	4b21      	ldr	r3, [pc, #132]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 8005398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800539c:	6453      	str	r3, [r2, #68]	; 0x44
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
}
 80053aa:	e02e      	b.n	800540a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_TIM_Base_MspInit+0x118>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10e      	bne.n	80053d4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c4:	6453      	str	r3, [r2, #68]	; 0x44
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
}
 80053d2:	e01a      	b.n	800540a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <HAL_TIM_Base_MspInit+0x11c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d115      	bne.n	800540a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_TIM_Base_MspInit+0x10c>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	202c      	movs	r0, #44	; 0x2c
 8005400:	f002 fb4f 	bl	8007aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005404:	202c      	movs	r0, #44	; 0x2c
 8005406:	f002 fb68 	bl	8007ada <HAL_NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40001000 	.word	0x40001000
 8005418:	40023800 	.word	0x40023800
 800541c:	40001400 	.word	0x40001400
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	40001c00 	.word	0x40001c00

0800542c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d133      	bne.n	80054b6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	6453      	str	r3, [r2, #68]	; 0x44
 800545e:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	6313      	str	r3, [r2, #48]	; 0x30
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x98>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005486:	23c0      	movs	r3, #192	; 0xc0
 8005488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548a:	2302      	movs	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005496:	2303      	movs	r3, #3
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	4619      	mov	r1, r3
 80054a0:	4809      	ldr	r0, [pc, #36]	; (80054c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80054a2:	f002 fed1 	bl	8008248 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2100      	movs	r1, #0
 80054aa:	202c      	movs	r0, #44	; 0x2c
 80054ac:	f002 faf9 	bl	8007aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80054b0:	202c      	movs	r0, #44	; 0x2c
 80054b2:	f002 fb12 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80054b6:	bf00      	nop
 80054b8:	3728      	adds	r7, #40	; 0x28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40020800 	.word	0x40020800

080054cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d4:	f107 031c 	add.w	r3, r7, #28
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5c      	ldr	r2, [pc, #368]	; (800565c <HAL_TIM_MspPostInit+0x190>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d11f      	bne.n	800552e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	4b5b      	ldr	r3, [pc, #364]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	4a5a      	ldr	r2, [pc, #360]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	6313      	str	r3, [r2, #48]	; 0x30
 80054fe:	4b58      	ldr	r3, [pc, #352]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800550a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800550e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005510:	2302      	movs	r3, #2
 8005512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	2300      	movs	r3, #0
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800551c:	2301      	movs	r3, #1
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005520:	f107 031c 	add.w	r3, r7, #28
 8005524:	4619      	mov	r1, r3
 8005526:	484f      	ldr	r0, [pc, #316]	; (8005664 <HAL_TIM_MspPostInit+0x198>)
 8005528:	f002 fe8e 	bl	8008248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800552c:	e091      	b.n	8005652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4d      	ldr	r2, [pc, #308]	; (8005668 <HAL_TIM_MspPostInit+0x19c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d11e      	bne.n	8005576 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	4b48      	ldr	r3, [pc, #288]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	4a47      	ldr	r2, [pc, #284]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	6313      	str	r3, [r2, #48]	; 0x30
 8005548:	4b45      	ldr	r3, [pc, #276]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005554:	2330      	movs	r3, #48	; 0x30
 8005556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005558:	2302      	movs	r3, #2
 800555a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005560:	2300      	movs	r3, #0
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005564:	2302      	movs	r3, #2
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005568:	f107 031c 	add.w	r3, r7, #28
 800556c:	4619      	mov	r1, r3
 800556e:	483f      	ldr	r0, [pc, #252]	; (800566c <HAL_TIM_MspPostInit+0x1a0>)
 8005570:	f002 fe6a 	bl	8008248 <HAL_GPIO_Init>
}
 8005574:	e06d      	b.n	8005652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a3d      	ldr	r2, [pc, #244]	; (8005670 <HAL_TIM_MspPostInit+0x1a4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d11f      	bne.n	80055c0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	4b36      	ldr	r3, [pc, #216]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	4a35      	ldr	r2, [pc, #212]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 800558a:	f043 0308 	orr.w	r3, r3, #8
 800558e:	6313      	str	r3, [r2, #48]	; 0x30
 8005590:	4b33      	ldr	r3, [pc, #204]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800559c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a2:	2302      	movs	r3, #2
 80055a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055aa:	2300      	movs	r3, #0
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055ae:	2302      	movs	r3, #2
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055b2:	f107 031c 	add.w	r3, r7, #28
 80055b6:	4619      	mov	r1, r3
 80055b8:	482e      	ldr	r0, [pc, #184]	; (8005674 <HAL_TIM_MspPostInit+0x1a8>)
 80055ba:	f002 fe45 	bl	8008248 <HAL_GPIO_Init>
}
 80055be:	e048      	b.n	8005652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <HAL_TIM_MspPostInit+0x1ac>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d11f      	bne.n	800560a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4a23      	ldr	r2, [pc, #140]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	6313      	str	r3, [r2, #48]	; 0x30
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f4:	2300      	movs	r3, #0
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80055f8:	2303      	movs	r3, #3
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fc:	f107 031c 	add.w	r3, r7, #28
 8005600:	4619      	mov	r1, r3
 8005602:	481a      	ldr	r0, [pc, #104]	; (800566c <HAL_TIM_MspPostInit+0x1a0>)
 8005604:	f002 fe20 	bl	8008248 <HAL_GPIO_Init>
}
 8005608:	e023      	b.n	8005652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1b      	ldr	r2, [pc, #108]	; (800567c <HAL_TIM_MspPostInit+0x1b0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d11e      	bne.n	8005652 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	4a10      	ldr	r2, [pc, #64]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	6313      	str	r3, [r2, #48]	; 0x30
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_TIM_MspPostInit+0x194>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563a:	2300      	movs	r3, #0
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563e:	2300      	movs	r3, #0
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005642:	2303      	movs	r3, #3
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005646:	f107 031c 	add.w	r3, r7, #28
 800564a:	4619      	mov	r1, r3
 800564c:	4807      	ldr	r0, [pc, #28]	; (800566c <HAL_TIM_MspPostInit+0x1a0>)
 800564e:	f002 fdfb 	bl	8008248 <HAL_GPIO_Init>
}
 8005652:	bf00      	nop
 8005654:	3730      	adds	r7, #48	; 0x30
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40023800 	.word	0x40023800
 8005664:	40021000 	.word	0x40021000
 8005668:	40000400 	.word	0x40000400
 800566c:	40020400 	.word	0x40020400
 8005670:	40000800 	.word	0x40000800
 8005674:	40020c00 	.word	0x40020c00
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	609a      	str	r2, [r3, #8]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a19      	ldr	r2, [pc, #100]	; (8005704 <HAL_UART_MspInit+0x84>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d12b      	bne.n	80056fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b0:	6413      	str	r3, [r2, #64]	; 0x40
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	4a10      	ldr	r2, [pc, #64]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056c8:	f043 0308 	orr.w	r3, r3, #8
 80056cc:	6313      	str	r3, [r2, #48]	; 0x30
 80056ce:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <HAL_UART_MspInit+0x88>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80056da:	2360      	movs	r3, #96	; 0x60
 80056dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e6:	2303      	movs	r3, #3
 80056e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056ea:	2307      	movs	r3, #7
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	4619      	mov	r1, r3
 80056f4:	4805      	ldr	r0, [pc, #20]	; (800570c <HAL_UART_MspInit+0x8c>)
 80056f6:	f002 fda7 	bl	8008248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80056fa:	bf00      	nop
 80056fc:	3728      	adds	r7, #40	; 0x28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40004400 	.word	0x40004400
 8005708:	40023800 	.word	0x40023800
 800570c:	40020c00 	.word	0x40020c00

08005710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005714:	e7fe      	b.n	8005714 <NMI_Handler+0x4>

08005716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800571a:	e7fe      	b.n	800571a <HardFault_Handler+0x4>

0800571c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005720:	e7fe      	b.n	8005720 <MemManage_Handler+0x4>

08005722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005726:	e7fe      	b.n	8005726 <BusFault_Handler+0x4>

08005728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800572c:	e7fe      	b.n	800572c <UsageFault_Handler+0x4>

0800572e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800572e:	b480      	push	{r7}
 8005730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005732:	bf00      	nop
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800575c:	f001 fc80 	bl	8007060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}

08005764 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005768:	2004      	movs	r0, #4
 800576a:	f002 ff49 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}

08005772 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800577a:	f002 ff41 	bl	8008600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005788:	4803      	ldr	r0, [pc, #12]	; (8005798 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800578a:	f006 ff58 	bl	800c63e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800578e:	4803      	ldr	r0, [pc, #12]	; (800579c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005790:	f006 ff55 	bl	800c63e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2003983c 	.word	0x2003983c
 800579c:	20039a38 	.word	0x20039a38

080057a0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80057a4:	4802      	ldr	r0, [pc, #8]	; (80057b0 <SDIO_IRQHandler+0x10>)
 80057a6:	f004 fff1 	bl	800a78c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20039b98 	.word	0x20039b98

080057b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80057b8:	4802      	ldr	r0, [pc, #8]	; (80057c4 <TIM6_DAC_IRQHandler+0x10>)
 80057ba:	f006 ff40 	bl	800c63e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20039b18 	.word	0x20039b18

080057c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80057cc:	4802      	ldr	r0, [pc, #8]	; (80057d8 <TIM7_IRQHandler+0x10>)
 80057ce:	f006 ff36 	bl	800c63e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20039cbc 	.word	0x20039cbc

080057dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80057e0:	4802      	ldr	r0, [pc, #8]	; (80057ec <DMA2_Stream2_IRQHandler+0x10>)
 80057e2:	f002 fabd 	bl	8007d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20039c5c 	.word	0x20039c5c

080057f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80057f4:	4802      	ldr	r0, [pc, #8]	; (8005800 <DMA2_Stream3_IRQHandler+0x10>)
 80057f6:	f002 fab3 	bl	8007d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20039784 	.word	0x20039784

08005804 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <DMA2_Stream6_IRQHandler+0x10>)
 800580a:	f002 faa9 	bl	8007d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20039ab8 	.word	0x20039ab8

08005818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e00a      	b.n	8005840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800582a:	f3af 8000 	nop.w
 800582e:	4601      	mov	r1, r0
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	60ba      	str	r2, [r7, #8]
 8005836:	b2ca      	uxtb	r2, r1
 8005838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3301      	adds	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	dbf0      	blt.n	800582a <_read+0x12>
	}

return len;
 8005848:	687b      	ldr	r3, [r7, #4]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
	return -1;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800587a:	605a      	str	r2, [r3, #4]
	return 0;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_isatty>:

int _isatty(int file)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
	return 1;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	return 0;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058c4:	4a14      	ldr	r2, [pc, #80]	; (8005918 <_sbrk+0x5c>)
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <_sbrk+0x60>)
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <_sbrk+0x64>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <_sbrk+0x64>)
 80058da:	4a12      	ldr	r2, [pc, #72]	; (8005924 <_sbrk+0x68>)
 80058dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <_sbrk+0x64>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d207      	bcs.n	80058fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058ec:	f00d f93a 	bl	8012b64 <__errno>
 80058f0:	4602      	mov	r2, r0
 80058f2:	230c      	movs	r3, #12
 80058f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	e009      	b.n	8005910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <_sbrk+0x64>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <_sbrk+0x64>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4413      	add	r3, r2
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <_sbrk+0x64>)
 800590c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800590e:	68fb      	ldr	r3, [r7, #12]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20050000 	.word	0x20050000
 800591c:	00000800 	.word	0x00000800
 8005920:	20000294 	.word	0x20000294
 8005924:	2003be10 	.word	0x2003be10

08005928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <SystemInit+0x28>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	4a07      	ldr	r2, [pc, #28]	; (8005950 <SystemInit+0x28>)
 8005934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <SystemInit+0x28>)
 800593e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005942:	609a      	str	r2, [r3, #8]
#endif
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	lcd_clear();
 8005958:	f7fb fba2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800595c:	2100      	movs	r1, #0
 800595e:	2000      	movs	r0, #0
 8005960:	f7fb fbae 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005964:	4814      	ldr	r0, [pc, #80]	; (80059b8 <batteryLowMode+0x64>)
 8005966:	f7fb fbd5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800596a:	2101      	movs	r1, #1
 800596c:	2000      	movs	r0, #0
 800596e:	f7fb fba7 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005972:	4812      	ldr	r0, [pc, #72]	; (80059bc <batteryLowMode+0x68>)
 8005974:	f7fb fbce 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005978:	2152      	movs	r1, #82	; 0x52
 800597a:	4811      	ldr	r0, [pc, #68]	; (80059c0 <batteryLowMode+0x6c>)
 800597c:	f7fc fa7a 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005980:	2064      	movs	r0, #100	; 0x64
 8005982:	f001 fb8d 	bl	80070a0 <HAL_Delay>
		led.fullColor('Y');
 8005986:	2159      	movs	r1, #89	; 0x59
 8005988:	480d      	ldr	r0, [pc, #52]	; (80059c0 <batteryLowMode+0x6c>)
 800598a:	f7fc fa73 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800598e:	2064      	movs	r0, #100	; 0x64
 8005990:	f001 fb86 	bl	80070a0 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005994:	480b      	ldr	r0, [pc, #44]	; (80059c4 <batteryLowMode+0x70>)
 8005996:	f7fc fa09 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800599a:	4603      	mov	r3, r0
 800599c:	2b02      	cmp	r3, #2
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0e6      	beq.n	8005978 <batteryLowMode+0x24>
			HAL_Delay(500);
 80059aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059ae:	f001 fb77 	bl	80070a0 <HAL_Delay>
			break;
 80059b2:	bf00      	nop
		}
	}
}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08017d7c 	.word	0x08017d7c
 80059bc:	08017d84 	.word	0x08017d84
 80059c0:	200005a4 	.word	0x200005a4
 80059c4:	20000598 	.word	0x20000598

080059c8 <cppInit>:

void cppInit(void)
{
 80059c8:	b598      	push	{r3, r4, r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	lcd_init();
 80059cc:	f7fb fb24 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80059d0:	483f      	ldr	r0, [pc, #252]	; (8005ad0 <cppInit+0x108>)
 80059d2:	f7fd fd79 	bl	80034c8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80059d6:	2064      	movs	r0, #100	; 0x64
 80059d8:	f001 fb62 	bl	80070a0 <HAL_Delay>
	power_sensor.updateValues();
 80059dc:	483c      	ldr	r0, [pc, #240]	; (8005ad0 <cppInit+0x108>)
 80059de:	f7fd fd83 	bl	80034e8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80059e2:	f7fb fb5d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80059e6:	2100      	movs	r1, #0
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7fb fb69 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80059ee:	4839      	ldr	r0, [pc, #228]	; (8005ad4 <cppInit+0x10c>)
 80059f0:	f7fb fb90 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059f4:	2101      	movs	r1, #1
 80059f6:	2000      	movs	r0, #0
 80059f8:	f7fb fb62 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80059fc:	4834      	ldr	r0, [pc, #208]	; (8005ad0 <cppInit+0x108>)
 80059fe:	f7fd fd9d 	bl	800353c <_ZN11PowerSensor17getButteryVoltageEv>
 8005a02:	ee10 3a10 	vmov	r3, s0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fa fdb6 	bl	8000578 <__aeabi_f2d>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	461a      	mov	r2, r3
 8005a12:	4623      	mov	r3, r4
 8005a14:	4830      	ldr	r0, [pc, #192]	; (8005ad8 <cppInit+0x110>)
 8005a16:	f7fb fb7d 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a1e:	f001 fb3f 	bl	80070a0 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a22:	482b      	ldr	r0, [pc, #172]	; (8005ad0 <cppInit+0x108>)
 8005a24:	f7fd fd9c 	bl	8003560 <_ZN11PowerSensor12butteryCheckEv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <cppInit+0x6a>
 8005a2e:	f7ff ff91 	bl	8005954 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a32:	482a      	ldr	r0, [pc, #168]	; (8005adc <cppInit+0x114>)
 8005a34:	f7fd f8fa 	bl	8002c2c <_ZN6Logger10sdCardInitEv>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <cppInit+0x86>
		led.fullColor('G');
 8005a3e:	2147      	movs	r1, #71	; 0x47
 8005a40:	4827      	ldr	r0, [pc, #156]	; (8005ae0 <cppInit+0x118>)
 8005a42:	f7fc fa17 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a46:	2064      	movs	r0, #100	; 0x64
 8005a48:	f001 fb2a 	bl	80070a0 <HAL_Delay>
 8005a4c:	e006      	b.n	8005a5c <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005a4e:	2152      	movs	r1, #82	; 0x52
 8005a50:	4823      	ldr	r0, [pc, #140]	; (8005ae0 <cppInit+0x118>)
 8005a52:	f7fc fa0f 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a56:	2064      	movs	r0, #100	; 0x64
 8005a58:	f001 fb22 	bl	80070a0 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005a5c:	4821      	ldr	r0, [pc, #132]	; (8005ae4 <cppInit+0x11c>)
 8005a5e:	f7fc fb65 	bl	800212c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005a62:	4821      	ldr	r0, [pc, #132]	; (8005ae8 <cppInit+0x120>)
 8005a64:	f7fd fa22 	bl	8002eac <_ZN5Motor4initEv>
	encoder.init();
 8005a68:	4820      	ldr	r0, [pc, #128]	; (8005aec <cppInit+0x124>)
 8005a6a:	f7fb fb97 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005a6e:	4820      	ldr	r0, [pc, #128]	; (8005af0 <cppInit+0x128>)
 8005a70:	f7fb ffb8 	bl	80019e4 <_ZN3IMU4initEv>
	line_trace.init();
 8005a74:	481f      	ldr	r0, [pc, #124]	; (8005af4 <cppInit+0x12c>)
 8005a76:	f7fc ffb7 	bl	80029e8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005a7a:	481a      	ldr	r0, [pc, #104]	; (8005ae4 <cppInit+0x11c>)
 8005a7c:	f7fc fc96 	bl	80023ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a84:	f001 fb0c 	bl	80070a0 <HAL_Delay>

	led.fullColor('M');
 8005a88:	214d      	movs	r1, #77	; 0x4d
 8005a8a:	4815      	ldr	r0, [pc, #84]	; (8005ae0 <cppInit+0x118>)
 8005a8c:	f7fc f9f2 	bl	8001e74 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005a90:	4817      	ldr	r0, [pc, #92]	; (8005af0 <cppInit+0x128>)
 8005a92:	f7fc f877 	bl	8001b84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8005a96:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005af8 <cppInit+0x130>
 8005a9a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005afc <cppInit+0x134>
 8005a9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005b00 <cppInit+0x138>
 8005aa2:	4818      	ldr	r0, [pc, #96]	; (8005b04 <cppInit+0x13c>)
 8005aa4:	f7fe f8c4 	bl	8003c30 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8005aa8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8005b08 <cppInit+0x140>
 8005aac:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005b0c <cppInit+0x144>
 8005ab0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8005b10 <cppInit+0x148>
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <cppInit+0x13c>)
 8005ab6:	f7fe f8d4 	bl	8003c62 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005aba:	480c      	ldr	r0, [pc, #48]	; (8005aec <cppInit+0x124>)
 8005abc:	f7fb fc9d 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005ac0:	4814      	ldr	r0, [pc, #80]	; (8005b14 <cppInit+0x14c>)
 8005ac2:	f7fd fbce 	bl	8003262 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005ac6:	4814      	ldr	r0, [pc, #80]	; (8005b18 <cppInit+0x150>)
 8005ac8:	f7fd fc66 	bl	8003398 <_ZN13PathFollowing4initEv>

}
 8005acc:	bf00      	nop
 8005ace:	bd98      	pop	{r3, r4, r7, pc}
 8005ad0:	200005a8 	.word	0x200005a8
 8005ad4:	08017d88 	.word	0x08017d88
 8005ad8:	08017d90 	.word	0x08017d90
 8005adc:	200005c8 	.word	0x200005c8
 8005ae0:	200005a4 	.word	0x200005a4
 8005ae4:	20000298 	.word	0x20000298
 8005ae8:	200005a0 	.word	0x200005a0
 8005aec:	2001f9d0 	.word	0x2001f9d0
 8005af0:	200005b4 	.word	0x200005b4
 8005af4:	2001fa24 	.word	0x2001fa24
 8005af8:	3cceca68 	.word	0x3cceca68
 8005afc:	4180f06f 	.word	0x4180f06f
 8005b00:	3fea2d0e 	.word	0x3fea2d0e
 8005b04:	2001f9e8 	.word	0x2001f9e8
 8005b08:	3ab7dacd 	.word	0x3ab7dacd
 8005b0c:	3f5e3fbc 	.word	0x3f5e3fbc
 8005b10:	3d8eefa2 	.word	0x3d8eefa2
 8005b14:	2001fa90 	.word	0x2001fa90
 8005b18:	2001fcd0 	.word	0x2001fcd0

08005b1c <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b20:	481d      	ldr	r0, [pc, #116]	; (8005b98 <cppFlip1ms+0x7c>)
 8005b22:	f7fc fb61 	bl	80021e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b26:	481d      	ldr	r0, [pc, #116]	; (8005b9c <cppFlip1ms+0x80>)
 8005b28:	f7fb ff8a 	bl	8001a40 <_ZN3IMU12updateValuesEv>
	//mon_zg = imu.getOmega();
	//mon_offset = imu.getOffsetVal();
	encoder.updateCnt();
 8005b2c:	481c      	ldr	r0, [pc, #112]	; (8005ba0 <cppFlip1ms+0x84>)
 8005b2e:	f7fb fb57 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005b32:	481c      	ldr	r0, [pc, #112]	; (8005ba4 <cppFlip1ms+0x88>)
 8005b34:	f7fc fff0 	bl	8002b18 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005b38:	481b      	ldr	r0, [pc, #108]	; (8005ba8 <cppFlip1ms+0x8c>)
 8005b3a:	f7fe f8ab 	bl	8003c94 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005b3e:	481b      	ldr	r0, [pc, #108]	; (8005bac <cppFlip1ms+0x90>)
 8005b40:	f7fd fb84 	bl	800324c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005b44:	481a      	ldr	r0, [pc, #104]	; (8005bb0 <cppFlip1ms+0x94>)
 8005b46:	f7fd f9c3 	bl	8002ed0 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 8005b4a:	4817      	ldr	r0, [pc, #92]	; (8005ba8 <cppFlip1ms+0x8c>)
 8005b4c:	f7fe f8e4 	bl	8003d18 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005b50:	eef0 7a40 	vmov.f32	s15, s0
 8005b54:	eeb0 0a67 	vmov.f32	s0, s15
 8005b58:	4816      	ldr	r0, [pc, #88]	; (8005bb4 <cppFlip1ms+0x98>)
 8005b5a:	f7fd f8b9 	bl	8002cd0 <_ZN6Logger8storeLogEf>
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8005b5e:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <cppFlip1ms+0x9c>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <cppFlip1ms+0x9c>)
 8005b68:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <cppFlip1ms+0x9c>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d90c      	bls.n	8005b8c <cppFlip1ms+0x70>
		sys_ident.inOutputStore(imu.getOmega());
 8005b72:	480a      	ldr	r0, [pc, #40]	; (8005b9c <cppFlip1ms+0x80>)
 8005b74:	f7fb ffbc 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005b78:	eef0 7a40 	vmov.f32	s15, s0
 8005b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b80:	480e      	ldr	r0, [pc, #56]	; (8005bbc <cppFlip1ms+0xa0>)
 8005b82:	f7fd fe27 	bl	80037d4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <cppFlip1ms+0x9c>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005b8c:	4804      	ldr	r0, [pc, #16]	; (8005ba0 <cppFlip1ms+0x84>)
 8005b8e:	f7fb fc43 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000298 	.word	0x20000298
 8005b9c:	200005b4 	.word	0x200005b4
 8005ba0:	2001f9d0 	.word	0x2001f9d0
 8005ba4:	2001fa24 	.word	0x2001fa24
 8005ba8:	2001f9e8 	.word	0x2001f9e8
 8005bac:	2001fa90 	.word	0x2001fa90
 8005bb0:	200005a0 	.word	0x200005a0
 8005bb4:	200005c8 	.word	0x200005c8
 8005bb8:	200373fa 	.word	0x200373fa
 8005bbc:	2001fac0 	.word	0x2001fac0

08005bc0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <cppFlip100ns+0x10>)
 8005bc6:	f7fc fac1 	bl	800214c <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000298 	.word	0x20000298

08005bd4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <cppFlip10ms+0x30>)
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <cppFlip10ms+0x30>)
 8005be2:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <cppFlip10ms+0x30>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d905      	bls.n	8005bf8 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005bec:	4806      	ldr	r0, [pc, #24]	; (8005c08 <cppFlip10ms+0x34>)
 8005bee:	f7fd fe2d 	bl	800384c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <cppFlip10ms+0x30>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <cppFlip10ms+0x30>)
 8005bfa:	881a      	ldrh	r2, [r3, #0]
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <cppFlip10ms+0x38>)
 8005bfe:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005c00:	bf00      	nop
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200373fc 	.word	0x200373fc
 8005c08:	2001fac0 	.word	0x2001fac0
 8005c0c:	200373f8 	.word	0x200373f8

08005c10 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4805      	ldr	r0, [pc, #20]	; (8005c34 <cppExit+0x24>)
 8005c20:	f7fd fd32 	bl	8003688 <_ZN10SideSensor12updateStatusEt>
	printf("intertuptin\n");
 8005c24:	4804      	ldr	r0, [pc, #16]	; (8005c38 <cppExit+0x28>)
 8005c26:	f00d fea1 	bl	801396c <puts>
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000590 	.word	0x20000590
 8005c38:	08017d94 	.word	0x08017d94
 8005c3c:	00000000 	.word	0x00000000

08005c40 <cppLoop>:

void cppLoop(void)
{
 8005c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c44:	b08b      	sub	sp, #44	; 0x2c
 8005c46:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005c48:	48bf      	ldr	r0, [pc, #764]	; (8005f48 <cppLoop+0x308>)
 8005c4a:	f7fd fcbb 	bl	80035c4 <_ZN12RotarySwitch8getValueEv>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b0f      	cmp	r3, #15
 8005c52:	f201 80e9 	bhi.w	8006e28 <cppLoop+0x11e8>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <cppLoop+0x1c>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c9d 	.word	0x08005c9d
 8005c60:	08006177 	.word	0x08006177
 8005c64:	08006259 	.word	0x08006259
 8005c68:	080062e1 	.word	0x080062e1
 8005c6c:	08006391 	.word	0x08006391
 8005c70:	0800641f 	.word	0x0800641f
 8005c74:	08006531 	.word	0x08006531
 8005c78:	080065ed 	.word	0x080065ed
 8005c7c:	080066d1 	.word	0x080066d1
 8005c80:	08006bbb 	.word	0x08006bbb
 8005c84:	08006cbd 	.word	0x08006cbd
 8005c88:	08006d57 	.word	0x08006d57
 8005c8c:	08006d81 	.word	0x08006d81
 8005c90:	08006dab 	.word	0x08006dab
 8005c94:	08006dd5 	.word	0x08006dd5
 8005c98:	08006dff 	.word	0x08006dff
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005c9c:	2152      	movs	r1, #82	; 0x52
 8005c9e:	48ab      	ldr	r0, [pc, #684]	; (8005f4c <cppLoop+0x30c>)
 8005ca0:	f7fc f8e8 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005ca4:	f7fb f9fc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2000      	movs	r0, #0
 8005cac:	f7fb fa08 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8005cb0:	48a7      	ldr	r0, [pc, #668]	; (8005f50 <cppLoop+0x310>)
 8005cb2:	f7fc fee6 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005cb6:	eeb0 7a40 	vmov.f32	s14, s0
 8005cba:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8005f54 <cppLoop+0x314>
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	ee17 0a90 	vmov	r0, s15
 8005cc6:	f7fa fc57 	bl	8000578 <__aeabi_f2d>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4623      	mov	r3, r4
 8005cd2:	48a1      	ldr	r0, [pc, #644]	; (8005f58 <cppLoop+0x318>)
 8005cd4:	f7fb fa1e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005cd8:	2101      	movs	r1, #1
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7fb f9f0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8005ce0:	489b      	ldr	r0, [pc, #620]	; (8005f50 <cppLoop+0x310>)
 8005ce2:	f7fc fedd 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8005cea:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8005f5c <cppLoop+0x31c>
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	ee17 0a90 	vmov	r0, s15
 8005cf6:	f7fa fc3f 	bl	8000578 <__aeabi_f2d>
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	460e      	mov	r6, r1
 8005cfe:	4894      	ldr	r0, [pc, #592]	; (8005f50 <cppLoop+0x310>)
 8005d00:	f7fc fedd 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005d04:	eeb0 7a40 	vmov.f32	s14, s0
 8005d08:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005f60 <cppLoop+0x320>
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	ee17 0a90 	vmov	r0, s15
 8005d14:	f7fa fc30 	bl	8000578 <__aeabi_f2d>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	e9cd 3400 	strd	r3, r4, [sp]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4633      	mov	r3, r6
 8005d24:	488f      	ldr	r0, [pc, #572]	; (8005f64 <cppLoop+0x324>)
 8005d26:	f7fb f9f5 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8005d2a:	4b8f      	ldr	r3, [pc, #572]	; (8005f68 <cppLoop+0x328>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f3bf 8f5b 	dmb	ish
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d015      	beq.n	8005d72 <cppLoop+0x132>
 8005d46:	4888      	ldr	r0, [pc, #544]	; (8005f68 <cppLoop+0x328>)
 8005d48:	f00b fea7 	bl	8011a9a <__cxa_guard_acquire>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <cppLoop+0x132>
 8005d5c:	487c      	ldr	r0, [pc, #496]	; (8005f50 <cppLoop+0x310>)
 8005d5e:	f7fc fe90 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005d62:	eef0 7a40 	vmov.f32	s15, s0
 8005d66:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <cppLoop+0x32c>)
 8005d68:	edc3 7a00 	vstr	s15, [r3]
 8005d6c:	487e      	ldr	r0, [pc, #504]	; (8005f68 <cppLoop+0x328>)
 8005d6e:	f00b fea0 	bl	8011ab2 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8005d72:	4b7f      	ldr	r3, [pc, #508]	; (8005f70 <cppLoop+0x330>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f3bf 8f5b 	dmb	ish
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d015      	beq.n	8005dba <cppLoop+0x17a>
 8005d8e:	4878      	ldr	r0, [pc, #480]	; (8005f70 <cppLoop+0x330>)
 8005d90:	f00b fe83 	bl	8011a9a <__cxa_guard_acquire>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <cppLoop+0x17a>
 8005da4:	486a      	ldr	r0, [pc, #424]	; (8005f50 <cppLoop+0x310>)
 8005da6:	f7fc fe7b 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005daa:	eef0 7a40 	vmov.f32	s15, s0
 8005dae:	4b71      	ldr	r3, [pc, #452]	; (8005f74 <cppLoop+0x334>)
 8005db0:	edc3 7a00 	vstr	s15, [r3]
 8005db4:	486e      	ldr	r0, [pc, #440]	; (8005f70 <cppLoop+0x330>)
 8005db6:	f00b fe7c 	bl	8011ab2 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8005dba:	4b6f      	ldr	r3, [pc, #444]	; (8005f78 <cppLoop+0x338>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f3bf 8f5b 	dmb	ish
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d015      	beq.n	8005e02 <cppLoop+0x1c2>
 8005dd6:	4868      	ldr	r0, [pc, #416]	; (8005f78 <cppLoop+0x338>)
 8005dd8:	f00b fe5f 	bl	8011a9a <__cxa_guard_acquire>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <cppLoop+0x1c2>
 8005dec:	4858      	ldr	r0, [pc, #352]	; (8005f50 <cppLoop+0x310>)
 8005dee:	f7fc fe66 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005df2:	eef0 7a40 	vmov.f32	s15, s0
 8005df6:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <cppLoop+0x33c>)
 8005df8:	edc3 7a00 	vstr	s15, [r3]
 8005dfc:	485e      	ldr	r0, [pc, #376]	; (8005f78 <cppLoop+0x338>)
 8005dfe:	f00b fe58 	bl	8011ab2 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005e02:	485f      	ldr	r0, [pc, #380]	; (8005f80 <cppLoop+0x340>)
 8005e04:	f7fb ffd2 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d022      	beq.n	8005e5e <cppLoop+0x21e>
			led.LR(-1, 1);
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1e:	484b      	ldr	r0, [pc, #300]	; (8005f4c <cppLoop+0x30c>)
 8005e20:	f7fc f8e4 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005e24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005e28:	f001 f93a 	bl	80070a0 <HAL_Delay>

			selector++;
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <cppLoop+0x344>)
 8005e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3301      	adds	r3, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <cppLoop+0x344>)
 8005e3c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005e3e:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <cppLoop+0x344>)
 8005e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	dd02      	ble.n	8005e4e <cppLoop+0x20e>
 8005e48:	4b4e      	ldr	r3, [pc, #312]	; (8005f84 <cppLoop+0x344>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f04f 31ff 	mov.w	r1, #4294967295
 8005e54:	483d      	ldr	r0, [pc, #244]	; (8005f4c <cppLoop+0x30c>)
 8005e56:	f7fc f8c9 	bl	8001fec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8005e5a:	f000 bfe7 	b.w	8006e2c <cppLoop+0x11ec>
		else if(joy_stick.getValue() == JOY_R){
 8005e5e:	4848      	ldr	r0, [pc, #288]	; (8005f80 <cppLoop+0x340>)
 8005e60:	f7fb ffa4 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8089 	beq.w	8005f88 <cppLoop+0x348>
			led.LR(-1, 1);
 8005e76:	2201      	movs	r2, #1
 8005e78:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7c:	4833      	ldr	r0, [pc, #204]	; (8005f4c <cppLoop+0x30c>)
 8005e7e:	f7fc f8b5 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005e82:	2064      	movs	r0, #100	; 0x64
 8005e84:	f001 f90c 	bl	80070a0 <HAL_Delay>
			if(selector == 0){
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <cppLoop+0x344>)
 8005e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d113      	bne.n	8005eba <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 8005e92:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <cppLoop+0x32c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa fb6e 	bl	8000578 <__aeabi_f2d>
 8005e9c:	a324      	add	r3, pc, #144	; (adr r3, 8005f30 <cppLoop+0x2f0>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fa0b 	bl	80002bc <__adddf3>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	4621      	mov	r1, r4
 8005eae:	f7fa feb3 	bl	8000c18 <__aeabi_d2f>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	; (8005f6c <cppLoop+0x32c>)
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e02b      	b.n	8005f12 <cppLoop+0x2d2>
			else if(selector == 1){
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <cppLoop+0x344>)
 8005ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d113      	bne.n	8005eec <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <cppLoop+0x334>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa fb55 	bl	8000578 <__aeabi_f2d>
 8005ece:	a31a      	add	r3, pc, #104	; (adr r3, 8005f38 <cppLoop+0x2f8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa f9f2 	bl	80002bc <__adddf3>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	4618      	mov	r0, r3
 8005ede:	4621      	mov	r1, r4
 8005ee0:	f7fa fe9a 	bl	8000c18 <__aeabi_d2f>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <cppLoop+0x334>)
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e012      	b.n	8005f12 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8005eec:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <cppLoop+0x33c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fb41 	bl	8000578 <__aeabi_f2d>
 8005ef6:	a312      	add	r3, pc, #72	; (adr r3, 8005f40 <cppLoop+0x300>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa f9de 	bl	80002bc <__adddf3>
 8005f00:	4603      	mov	r3, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	4618      	mov	r0, r3
 8005f06:	4621      	mov	r1, r4
 8005f08:	f7fa fe86 	bl	8000c18 <__aeabi_d2f>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <cppLoop+0x33c>)
 8005f10:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005f12:	2152      	movs	r1, #82	; 0x52
 8005f14:	480d      	ldr	r0, [pc, #52]	; (8005f4c <cppLoop+0x30c>)
 8005f16:	f7fb ffad 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f20:	480a      	ldr	r0, [pc, #40]	; (8005f4c <cppLoop+0x30c>)
 8005f22:	f7fc f863 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8005f26:	f000 bf81 	b.w	8006e2c <cppLoop+0x11ec>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	88e368f1 	.word	0x88e368f1
 8005f34:	3ee4f8b5 	.word	0x3ee4f8b5
 8005f38:	eb1c432d 	.word	0xeb1c432d
 8005f3c:	3f1a36e2 	.word	0x3f1a36e2
 8005f40:	a0b5ed8d 	.word	0xa0b5ed8d
 8005f44:	3eb0c6f7 	.word	0x3eb0c6f7
 8005f48:	2000059c 	.word	0x2000059c
 8005f4c:	200005a4 	.word	0x200005a4
 8005f50:	2001fa24 	.word	0x2001fa24
 8005f54:	447a0000 	.word	0x447a0000
 8005f58:	08017da0 	.word	0x08017da0
 8005f5c:	42c80000 	.word	0x42c80000
 8005f60:	461c4000 	.word	0x461c4000
 8005f64:	08017dac 	.word	0x08017dac
 8005f68:	20037404 	.word	0x20037404
 8005f6c:	20037400 	.word	0x20037400
 8005f70:	2003740c 	.word	0x2003740c
 8005f74:	20037408 	.word	0x20037408
 8005f78:	20037414 	.word	0x20037414
 8005f7c:	20037410 	.word	0x20037410
 8005f80:	20000598 	.word	0x20000598
 8005f84:	200373fe 	.word	0x200373fe
		else if(joy_stick.getValue() == JOY_L){
 8005f88:	48a5      	ldr	r0, [pc, #660]	; (8006220 <cppLoop+0x5e0>)
 8005f8a:	f7fb ff0f 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf0c      	ite	eq
 8005f94:	2301      	moveq	r3, #1
 8005f96:	2300      	movne	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d059      	beq.n	8006052 <cppLoop+0x412>
			led.LR(-1, 1);
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa4:	489f      	ldr	r0, [pc, #636]	; (8006224 <cppLoop+0x5e4>)
 8005fa6:	f7fc f821 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005faa:	2064      	movs	r0, #100	; 0x64
 8005fac:	f001 f878 	bl	80070a0 <HAL_Delay>
			if(selector == 0){
 8005fb0:	4b9d      	ldr	r3, [pc, #628]	; (8006228 <cppLoop+0x5e8>)
 8005fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8005fba:	4b9c      	ldr	r3, [pc, #624]	; (800622c <cppLoop+0x5ec>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fa fada 	bl	8000578 <__aeabi_f2d>
 8005fc4:	a390      	add	r3, pc, #576	; (adr r3, 8006208 <cppLoop+0x5c8>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f7fa f975 	bl	80002b8 <__aeabi_dsub>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7fa fe1f 	bl	8000c18 <__aeabi_d2f>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4b93      	ldr	r3, [pc, #588]	; (800622c <cppLoop+0x5ec>)
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e02b      	b.n	800603a <cppLoop+0x3fa>
			else if(selector == 1){
 8005fe2:	4b91      	ldr	r3, [pc, #580]	; (8006228 <cppLoop+0x5e8>)
 8005fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d113      	bne.n	8006014 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 8005fec:	4b90      	ldr	r3, [pc, #576]	; (8006230 <cppLoop+0x5f0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fa fac1 	bl	8000578 <__aeabi_f2d>
 8005ff6:	a386      	add	r3, pc, #536	; (adr r3, 8006210 <cppLoop+0x5d0>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f7fa f95c 	bl	80002b8 <__aeabi_dsub>
 8006000:	4603      	mov	r3, r0
 8006002:	460c      	mov	r4, r1
 8006004:	4618      	mov	r0, r3
 8006006:	4621      	mov	r1, r4
 8006008:	f7fa fe06 	bl	8000c18 <__aeabi_d2f>
 800600c:	4602      	mov	r2, r0
 800600e:	4b88      	ldr	r3, [pc, #544]	; (8006230 <cppLoop+0x5f0>)
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e012      	b.n	800603a <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006014:	4b87      	ldr	r3, [pc, #540]	; (8006234 <cppLoop+0x5f4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f7fa faad 	bl	8000578 <__aeabi_f2d>
 800601e:	a37e      	add	r3, pc, #504	; (adr r3, 8006218 <cppLoop+0x5d8>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa f948 	bl	80002b8 <__aeabi_dsub>
 8006028:	4603      	mov	r3, r0
 800602a:	460c      	mov	r4, r1
 800602c:	4618      	mov	r0, r3
 800602e:	4621      	mov	r1, r4
 8006030:	f7fa fdf2 	bl	8000c18 <__aeabi_d2f>
 8006034:	4602      	mov	r2, r0
 8006036:	4b7f      	ldr	r3, [pc, #508]	; (8006234 <cppLoop+0x5f4>)
 8006038:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800603a:	2152      	movs	r1, #82	; 0x52
 800603c:	4879      	ldr	r0, [pc, #484]	; (8006224 <cppLoop+0x5e4>)
 800603e:	f7fb ff19 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	4876      	ldr	r0, [pc, #472]	; (8006224 <cppLoop+0x5e4>)
 800604a:	f7fb ffcf 	bl	8001fec <_ZN3LED2LREaa>
		break;
 800604e:	f000 beed 	b.w	8006e2c <cppLoop+0x11ec>
		else if(joy_stick.getValue() == JOY_D){
 8006052:	4873      	ldr	r0, [pc, #460]	; (8006220 <cppLoop+0x5e0>)
 8006054:	f7fb feaa 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006058:	4603      	mov	r3, r0
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d03e      	beq.n	80060e6 <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006068:	2201      	movs	r2, #1
 800606a:	f04f 31ff 	mov.w	r1, #4294967295
 800606e:	486d      	ldr	r0, [pc, #436]	; (8006224 <cppLoop+0x5e4>)
 8006070:	f7fb ffbc 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006078:	f001 f812 	bl	80070a0 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800607c:	f107 031c 	add.w	r3, r7, #28
 8006080:	2201      	movs	r2, #1
 8006082:	496d      	ldr	r1, [pc, #436]	; (8006238 <cppLoop+0x5f8>)
 8006084:	486d      	ldr	r0, [pc, #436]	; (800623c <cppLoop+0x5fc>)
 8006086:	f7fb fad9 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800608a:	f107 0318 	add.w	r3, r7, #24
 800608e:	2201      	movs	r2, #1
 8006090:	496b      	ldr	r1, [pc, #428]	; (8006240 <cppLoop+0x600>)
 8006092:	486a      	ldr	r0, [pc, #424]	; (800623c <cppLoop+0x5fc>)
 8006094:	f7fb fad2 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	2201      	movs	r2, #1
 800609e:	4969      	ldr	r1, [pc, #420]	; (8006244 <cppLoop+0x604>)
 80060a0:	4866      	ldr	r0, [pc, #408]	; (800623c <cppLoop+0x5fc>)
 80060a2:	f7fb facb 	bl	800163c <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 80060a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80060aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80060ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80060b2:	eeb0 1a66 	vmov.f32	s2, s13
 80060b6:	eef0 0a47 	vmov.f32	s1, s14
 80060ba:	eeb0 0a67 	vmov.f32	s0, s15
 80060be:	4862      	ldr	r0, [pc, #392]	; (8006248 <cppLoop+0x608>)
 80060c0:	f7fc fcc6 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4a59      	ldr	r2, [pc, #356]	; (800622c <cppLoop+0x5ec>)
 80060c8:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4a58      	ldr	r2, [pc, #352]	; (8006230 <cppLoop+0x5f0>)
 80060ce:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4a58      	ldr	r2, [pc, #352]	; (8006234 <cppLoop+0x5f4>)
 80060d4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80060d6:	2200      	movs	r2, #0
 80060d8:	f04f 31ff 	mov.w	r1, #4294967295
 80060dc:	4851      	ldr	r0, [pc, #324]	; (8006224 <cppLoop+0x5e4>)
 80060de:	f7fb ff85 	bl	8001fec <_ZN3LED2LREaa>
		break;
 80060e2:	f000 bea3 	b.w	8006e2c <cppLoop+0x11ec>
		else if(joy_stick.getValue() == JOY_C){
 80060e6:	484e      	ldr	r0, [pc, #312]	; (8006220 <cppLoop+0x5e0>)
 80060e8:	f7fb fe60 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8697 	beq.w	8006e2c <cppLoop+0x11ec>
			led.LR(-1, 1);
 80060fe:	2201      	movs	r2, #1
 8006100:	f04f 31ff 	mov.w	r1, #4294967295
 8006104:	4847      	ldr	r0, [pc, #284]	; (8006224 <cppLoop+0x5e4>)
 8006106:	f7fb ff71 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800610a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800610e:	f000 ffc7 	bl	80070a0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006112:	2300      	movs	r3, #0
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4b45      	ldr	r3, [pc, #276]	; (800622c <cppLoop+0x5ec>)
 8006118:	2201      	movs	r2, #1
 800611a:	4947      	ldr	r1, [pc, #284]	; (8006238 <cppLoop+0x5f8>)
 800611c:	4847      	ldr	r0, [pc, #284]	; (800623c <cppLoop+0x5fc>)
 800611e:	f7fb fa27 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006122:	2300      	movs	r3, #0
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	4b42      	ldr	r3, [pc, #264]	; (8006230 <cppLoop+0x5f0>)
 8006128:	2201      	movs	r2, #1
 800612a:	4945      	ldr	r1, [pc, #276]	; (8006240 <cppLoop+0x600>)
 800612c:	4843      	ldr	r0, [pc, #268]	; (800623c <cppLoop+0x5fc>)
 800612e:	f7fb fa1f 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4b3f      	ldr	r3, [pc, #252]	; (8006234 <cppLoop+0x5f4>)
 8006138:	2201      	movs	r2, #1
 800613a:	4942      	ldr	r1, [pc, #264]	; (8006244 <cppLoop+0x604>)
 800613c:	483f      	ldr	r0, [pc, #252]	; (800623c <cppLoop+0x5fc>)
 800613e:	f7fb fa17 	bl	8001570 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006142:	4b3a      	ldr	r3, [pc, #232]	; (800622c <cppLoop+0x5ec>)
 8006144:	edd3 7a00 	vldr	s15, [r3]
 8006148:	4b39      	ldr	r3, [pc, #228]	; (8006230 <cppLoop+0x5f0>)
 800614a:	ed93 7a00 	vldr	s14, [r3]
 800614e:	4b39      	ldr	r3, [pc, #228]	; (8006234 <cppLoop+0x5f4>)
 8006150:	edd3 6a00 	vldr	s13, [r3]
 8006154:	eeb0 1a66 	vmov.f32	s2, s13
 8006158:	eef0 0a47 	vmov.f32	s1, s14
 800615c:	eeb0 0a67 	vmov.f32	s0, s15
 8006160:	4839      	ldr	r0, [pc, #228]	; (8006248 <cppLoop+0x608>)
 8006162:	f7fc fc75 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	f04f 31ff 	mov.w	r1, #4294967295
 800616c:	482d      	ldr	r0, [pc, #180]	; (8006224 <cppLoop+0x5e4>)
 800616e:	f7fb ff3d 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006172:	f000 be5b 	b.w	8006e2c <cppLoop+0x11ec>

	case 1:
		led.fullColor('G');
 8006176:	2147      	movs	r1, #71	; 0x47
 8006178:	482a      	ldr	r0, [pc, #168]	; (8006224 <cppLoop+0x5e4>)
 800617a:	f7fb fe7b 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 800617e:	f7fa ff8f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006182:	2100      	movs	r1, #0
 8006184:	2000      	movs	r0, #0
 8006186:	f7fa ff9b 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800618a:	4830      	ldr	r0, [pc, #192]	; (800624c <cppLoop+0x60c>)
 800618c:	f7fa ffc2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006190:	2101      	movs	r1, #1
 8006192:	2000      	movs	r0, #0
 8006194:	f7fa ff94 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006198:	482d      	ldr	r0, [pc, #180]	; (8006250 <cppLoop+0x610>)
 800619a:	f7fa ffbb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800619e:	4820      	ldr	r0, [pc, #128]	; (8006220 <cppLoop+0x5e0>)
 80061a0:	f7fb fe04 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	bf0c      	ite	eq
 80061aa:	2301      	moveq	r3, #1
 80061ac:	2300      	movne	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 863d 	beq.w	8006e30 <cppLoop+0x11f0>
			HAL_Delay(500);
 80061b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061ba:	f000 ff71 	bl	80070a0 <HAL_Delay>

			line_trace.start();
 80061be:	4822      	ldr	r0, [pc, #136]	; (8006248 <cppLoop+0x608>)
 80061c0:	f7fc fce2 	bl	8002b88 <_ZN9LineTrace5startEv>
			velocity_ctrl.start();
 80061c4:	4823      	ldr	r0, [pc, #140]	; (8006254 <cppLoop+0x614>)
 80061c6:	f7fd fd78 	bl	8003cba <_ZN12VelocityCtrl5startEv>
			line_trace.setTargetVelocity(1.0);
 80061ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80061ce:	481e      	ldr	r0, [pc, #120]	; (8006248 <cppLoop+0x608>)
 80061d0:	f7fc fc93 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295
 80061d8:	2101      	movs	r1, #1
 80061da:	4812      	ldr	r0, [pc, #72]	; (8006224 <cppLoop+0x5e4>)
 80061dc:	f7fb ff06 	bl	8001fec <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80061e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80061e4:	f000 ff5c 	bl	80070a0 <HAL_Delay>

			line_trace.stop();
 80061e8:	4817      	ldr	r0, [pc, #92]	; (8006248 <cppLoop+0x608>)
 80061ea:	f7fc fce1 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80061ee:	4819      	ldr	r0, [pc, #100]	; (8006254 <cppLoop+0x614>)
 80061f0:	f7fd fd76 	bl	8003ce0 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	2100      	movs	r1, #0
 80061fa:	480a      	ldr	r0, [pc, #40]	; (8006224 <cppLoop+0x5e4>)
 80061fc:	f7fb fef6 	bl	8001fec <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006200:	f000 be16 	b.w	8006e30 <cppLoop+0x11f0>
 8006204:	f3af 8000 	nop.w
 8006208:	88e368f1 	.word	0x88e368f1
 800620c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006210:	eb1c432d 	.word	0xeb1c432d
 8006214:	3f1a36e2 	.word	0x3f1a36e2
 8006218:	a0b5ed8d 	.word	0xa0b5ed8d
 800621c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006220:	20000598 	.word	0x20000598
 8006224:	200005a4 	.word	0x200005a4
 8006228:	200373fe 	.word	0x200373fe
 800622c:	20037400 	.word	0x20037400
 8006230:	20037408 	.word	0x20037408
 8006234:	20037410 	.word	0x20037410
 8006238:	08017dbc 	.word	0x08017dbc
 800623c:	08017dc4 	.word	0x08017dc4
 8006240:	08017dcc 	.word	0x08017dcc
 8006244:	08017dd4 	.word	0x08017dd4
 8006248:	2001fa24 	.word	0x2001fa24
 800624c:	08017ddc 	.word	0x08017ddc
 8006250:	08017de8 	.word	0x08017de8
 8006254:	2001f9e8 	.word	0x2001f9e8

	case 2:
		led.fullColor('B');
 8006258:	2142      	movs	r1, #66	; 0x42
 800625a:	48a2      	ldr	r0, [pc, #648]	; (80064e4 <cppLoop+0x8a4>)
 800625c:	f7fb fe0a 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006260:	f7fa ff1e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006264:	2100      	movs	r1, #0
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa ff2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800626c:	489e      	ldr	r0, [pc, #632]	; (80064e8 <cppLoop+0x8a8>)
 800626e:	f7fa ff51 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006272:	2101      	movs	r1, #1
 8006274:	2000      	movs	r0, #0
 8006276:	f7fa ff23 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800627a:	489c      	ldr	r0, [pc, #624]	; (80064ec <cppLoop+0x8ac>)
 800627c:	f7fa ff4a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006280:	489b      	ldr	r0, [pc, #620]	; (80064f0 <cppLoop+0x8b0>)
 8006282:	f7fb fd93 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006286:	4603      	mov	r3, r0
 8006288:	2b02      	cmp	r3, #2
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 85ce 	beq.w	8006e34 <cppLoop+0x11f4>
			led.LR(-1, 1);
 8006298:	2201      	movs	r2, #1
 800629a:	f04f 31ff 	mov.w	r1, #4294967295
 800629e:	4891      	ldr	r0, [pc, #580]	; (80064e4 <cppLoop+0x8a4>)
 80062a0:	f7fb fea4 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80062a4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80062a8:	f000 fefa 	bl	80070a0 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80062ac:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80064f4 <cppLoop+0x8b4>
 80062b0:	4891      	ldr	r0, [pc, #580]	; (80064f8 <cppLoop+0x8b8>)
 80062b2:	f7fd fb21 	bl	80038f8 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80062b6:	4890      	ldr	r0, [pc, #576]	; (80064f8 <cppLoop+0x8b8>)
 80062b8:	f7fd fb2e 	bl	8003918 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80062bc:	f244 405c 	movw	r0, #17500	; 0x445c
 80062c0:	f000 feee 	bl	80070a0 <HAL_Delay>
			sys_ident.stop();
 80062c4:	488c      	ldr	r0, [pc, #560]	; (80064f8 <cppLoop+0x8b8>)
 80062c6:	f7fd fb3b 	bl	8003940 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80062ca:	488b      	ldr	r0, [pc, #556]	; (80064f8 <cppLoop+0x8b8>)
 80062cc:	f7fd faa2 	bl	8003814 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80062d0:	2200      	movs	r2, #0
 80062d2:	f04f 31ff 	mov.w	r1, #4294967295
 80062d6:	4883      	ldr	r0, [pc, #524]	; (80064e4 <cppLoop+0x8a4>)
 80062d8:	f7fb fe88 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 80062dc:	f000 bdaa 	b.w	8006e34 <cppLoop+0x11f4>

	case 3:
		led.fullColor('M');
 80062e0:	214d      	movs	r1, #77	; 0x4d
 80062e2:	4880      	ldr	r0, [pc, #512]	; (80064e4 <cppLoop+0x8a4>)
 80062e4:	f7fb fdc6 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062e8:	f7fa feda 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062ec:	2100      	movs	r1, #0
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7fa fee6 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80062f4:	4881      	ldr	r0, [pc, #516]	; (80064fc <cppLoop+0x8bc>)
 80062f6:	f7fa ff0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062fa:	2101      	movs	r1, #1
 80062fc:	2000      	movs	r0, #0
 80062fe:	f7fa fedf 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006302:	487f      	ldr	r0, [pc, #508]	; (8006500 <cppLoop+0x8c0>)
 8006304:	f7fa ff06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006308:	4879      	ldr	r0, [pc, #484]	; (80064f0 <cppLoop+0x8b0>)
 800630a:	f7fb fd4f 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800630e:	4603      	mov	r3, r0
 8006310:	2b02      	cmp	r3, #2
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 858c 	beq.w	8006e38 <cppLoop+0x11f8>
			led.LR(-1, 1);
 8006320:	2201      	movs	r2, #1
 8006322:	f04f 31ff 	mov.w	r1, #4294967295
 8006326:	486f      	ldr	r0, [pc, #444]	; (80064e4 <cppLoop+0x8a4>)
 8006328:	f7fb fe60 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 800632c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006330:	f000 feb6 	bl	80070a0 <HAL_Delay>

			logger.start();
 8006334:	4873      	ldr	r0, [pc, #460]	; (8006504 <cppLoop+0x8c4>)
 8006336:	f7fc fd89 	bl	8002e4c <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800633a:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006508 <cppLoop+0x8c8>
 800633e:	4873      	ldr	r0, [pc, #460]	; (800650c <cppLoop+0x8cc>)
 8006340:	f7fc fbcc 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006344:	4871      	ldr	r0, [pc, #452]	; (800650c <cppLoop+0x8cc>)
 8006346:	f7fc fc1f 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800634a:	f241 3088 	movw	r0, #5000	; 0x1388
 800634e:	f000 fea7 	bl	80070a0 <HAL_Delay>

			logger.stop();
 8006352:	486c      	ldr	r0, [pc, #432]	; (8006504 <cppLoop+0x8c4>)
 8006354:	f7fc fd89 	bl	8002e6a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006358:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8006508 <cppLoop+0x8c8>
 800635c:	486b      	ldr	r0, [pc, #428]	; (800650c <cppLoop+0x8cc>)
 800635e:	f7fc fbbd 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006362:	486a      	ldr	r0, [pc, #424]	; (800650c <cppLoop+0x8cc>)
 8006364:	f7fc fc24 	bl	8002bb0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	2101      	movs	r1, #1
 800636e:	485d      	ldr	r0, [pc, #372]	; (80064e4 <cppLoop+0x8a4>)
 8006370:	f7fb fe3c 	bl	8001fec <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	2100      	movs	r1, #0
 800637a:	485a      	ldr	r0, [pc, #360]	; (80064e4 <cppLoop+0x8a4>)
 800637c:	f7fb fe36 	bl	8001fec <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006380:	2200      	movs	r2, #0
 8006382:	f04f 31ff 	mov.w	r1, #4294967295
 8006386:	4857      	ldr	r0, [pc, #348]	; (80064e4 <cppLoop+0x8a4>)
 8006388:	f7fb fe30 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 800638c:	f000 bd54 	b.w	8006e38 <cppLoop+0x11f8>

	case 4:
		led.fullColor('Y');
 8006390:	2159      	movs	r1, #89	; 0x59
 8006392:	4854      	ldr	r0, [pc, #336]	; (80064e4 <cppLoop+0x8a4>)
 8006394:	f7fb fd6e 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006398:	f7fa fe82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800639c:	2100      	movs	r1, #0
 800639e:	2000      	movs	r0, #0
 80063a0:	f7fa fe8e 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80063a4:	485a      	ldr	r0, [pc, #360]	; (8006510 <cppLoop+0x8d0>)
 80063a6:	f7fa feb5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80063aa:	2101      	movs	r1, #1
 80063ac:	2000      	movs	r0, #0
 80063ae:	f7fa fe87 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80063b2:	4853      	ldr	r0, [pc, #332]	; (8006500 <cppLoop+0x8c0>)
 80063b4:	f7fa feae 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80063b8:	484d      	ldr	r0, [pc, #308]	; (80064f0 <cppLoop+0x8b0>)
 80063ba:	f7fb fcf7 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8536 	beq.w	8006e3c <cppLoop+0x11fc>
			led.LR(-1, 1);
 80063d0:	2201      	movs	r2, #1
 80063d2:	f04f 31ff 	mov.w	r1, #4294967295
 80063d6:	4843      	ldr	r0, [pc, #268]	; (80064e4 <cppLoop+0x8a4>)
 80063d8:	f7fb fe08 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063e0:	f000 fe5e 	bl	80070a0 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80063e4:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8006508 <cppLoop+0x8c8>
 80063e8:	4848      	ldr	r0, [pc, #288]	; (800650c <cppLoop+0x8cc>)
 80063ea:	f7fc fb86 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80063ee:	4849      	ldr	r0, [pc, #292]	; (8006514 <cppLoop+0x8d4>)
 80063f0:	f7fd fc63 	bl	8003cba <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80063f4:	4845      	ldr	r0, [pc, #276]	; (800650c <cppLoop+0x8cc>)
 80063f6:	f7fc fbc7 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80063fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80063fe:	f000 fe4f 	bl	80070a0 <HAL_Delay>

			line_trace.stop();
 8006402:	4842      	ldr	r0, [pc, #264]	; (800650c <cppLoop+0x8cc>)
 8006404:	f7fc fbd4 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006408:	4842      	ldr	r0, [pc, #264]	; (8006514 <cppLoop+0x8d4>)
 800640a:	f7fd fc69 	bl	8003ce0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 800640e:	2200      	movs	r2, #0
 8006410:	f04f 31ff 	mov.w	r1, #4294967295
 8006414:	4833      	ldr	r0, [pc, #204]	; (80064e4 <cppLoop+0x8a4>)
 8006416:	f7fb fde9 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 800641a:	f000 bd0f 	b.w	8006e3c <cppLoop+0x11fc>

	case 5:
		led.fullColor('C');
 800641e:	2143      	movs	r1, #67	; 0x43
 8006420:	4830      	ldr	r0, [pc, #192]	; (80064e4 <cppLoop+0x8a4>)
 8006422:	f7fb fd27 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006426:	f7fa fe3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800642a:	2100      	movs	r1, #0
 800642c:	2000      	movs	r0, #0
 800642e:	f7fa fe47 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006432:	4839      	ldr	r0, [pc, #228]	; (8006518 <cppLoop+0x8d8>)
 8006434:	f7fa fe6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006438:	2101      	movs	r1, #1
 800643a:	2000      	movs	r0, #0
 800643c:	f7fa fe40 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006440:	4836      	ldr	r0, [pc, #216]	; (800651c <cppLoop+0x8dc>)
 8006442:	f7fa fe67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006446:	482a      	ldr	r0, [pc, #168]	; (80064f0 <cppLoop+0x8b0>)
 8006448:	f7fb fcb0 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800644c:	4603      	mov	r3, r0
 800644e:	2b02      	cmp	r3, #2
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 84f1 	beq.w	8006e40 <cppLoop+0x1200>
			led.LR(-1, 1);
 800645e:	2201      	movs	r2, #1
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	481f      	ldr	r0, [pc, #124]	; (80064e4 <cppLoop+0x8a4>)
 8006466:	f7fb fdc1 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 800646a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800646e:	f000 fe17 	bl	80070a0 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006472:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006520 <cppLoop+0x8e0>
 8006476:	4825      	ldr	r0, [pc, #148]	; (800650c <cppLoop+0x8cc>)
 8006478:	f7fc fb30 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800647c:	4823      	ldr	r0, [pc, #140]	; (800650c <cppLoop+0x8cc>)
 800647e:	f7fc fb83 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006486:	f000 fe0b 	bl	80070a0 <HAL_Delay>

			led.fullColor('R');
 800648a:	2152      	movs	r1, #82	; 0x52
 800648c:	4815      	ldr	r0, [pc, #84]	; (80064e4 <cppLoop+0x8a4>)
 800648e:	f7fb fcf1 	bl	8001e74 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006492:	4824      	ldr	r0, [pc, #144]	; (8006524 <cppLoop+0x8e4>)
 8006494:	f7fa ffe2 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006498:	4822      	ldr	r0, [pc, #136]	; (8006524 <cppLoop+0x8e4>)
 800649a:	f7fa ffae 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800649e:	f242 7010 	movw	r0, #10000	; 0x2710
 80064a2:	f000 fdfd 	bl	80070a0 <HAL_Delay>

			line_trace.stop();
 80064a6:	4819      	ldr	r0, [pc, #100]	; (800650c <cppLoop+0x8cc>)
 80064a8:	f7fc fb82 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80064ac:	491e      	ldr	r1, [pc, #120]	; (8006528 <cppLoop+0x8e8>)
 80064ae:	481f      	ldr	r0, [pc, #124]	; (800652c <cppLoop+0x8ec>)
 80064b0:	f7fa ffea 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 80064b4:	481b      	ldr	r0, [pc, #108]	; (8006524 <cppLoop+0x8e4>)
 80064b6:	f7fa ff91 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 80064ba:	eef0 7a40 	vmov.f32	s15, s0
 80064be:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 80064c2:	f107 0310 	add.w	r3, r7, #16
 80064c6:	2201      	movs	r2, #1
 80064c8:	4619      	mov	r1, r3
 80064ca:	2001      	movs	r0, #1
 80064cc:	f7fa fffe 	bl	80014cc <sd_write_float>
			user_fclose();
 80064d0:	f7fa ffec 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 80064d4:	2200      	movs	r2, #0
 80064d6:	f04f 31ff 	mov.w	r1, #4294967295
 80064da:	4802      	ldr	r0, [pc, #8]	; (80064e4 <cppLoop+0x8a4>)
 80064dc:	f7fb fd86 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 80064e0:	f000 bcae 	b.w	8006e40 <cppLoop+0x1200>
 80064e4:	200005a4 	.word	0x200005a4
 80064e8:	08017df0 	.word	0x08017df0
 80064ec:	08017df8 	.word	0x08017df8
 80064f0:	20000598 	.word	0x20000598
 80064f4:	3e99999a 	.word	0x3e99999a
 80064f8:	2001fac0 	.word	0x2001fac0
 80064fc:	08017e00 	.word	0x08017e00
 8006500:	08017e08 	.word	0x08017e08
 8006504:	200005c8 	.word	0x200005c8
 8006508:	3dcccccd 	.word	0x3dcccccd
 800650c:	2001fa24 	.word	0x2001fa24
 8006510:	08017e10 	.word	0x08017e10
 8006514:	2001f9e8 	.word	0x2001f9e8
 8006518:	08017e1c 	.word	0x08017e1c
 800651c:	08017e24 	.word	0x08017e24
 8006520:	00000000 	.word	0x00000000
 8006524:	2001f9d0 	.word	0x2001f9d0
 8006528:	08017e30 	.word	0x08017e30
 800652c:	08017e38 	.word	0x08017e38

	case 6:
		led.fullColor('R');
 8006530:	2152      	movs	r1, #82	; 0x52
 8006532:	4856      	ldr	r0, [pc, #344]	; (800668c <cppLoop+0xa4c>)
 8006534:	f7fb fc9e 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006538:	f7fa fdb2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800653c:	2100      	movs	r1, #0
 800653e:	2000      	movs	r0, #0
 8006540:	f7fa fdbe 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006544:	4852      	ldr	r0, [pc, #328]	; (8006690 <cppLoop+0xa50>)
 8006546:	f7fa fde5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800654a:	2101      	movs	r1, #1
 800654c:	2000      	movs	r0, #0
 800654e:	f7fa fdb7 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006552:	4850      	ldr	r0, [pc, #320]	; (8006694 <cppLoop+0xa54>)
 8006554:	f7fa fdde 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006558:	484f      	ldr	r0, [pc, #316]	; (8006698 <cppLoop+0xa58>)
 800655a:	f7fb fc27 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800655e:	4603      	mov	r3, r0
 8006560:	2b02      	cmp	r3, #2
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 846a 	beq.w	8006e44 <cppLoop+0x1204>
			HAL_Delay(500);
 8006570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006574:	f000 fd94 	bl	80070a0 <HAL_Delay>
			led.LR(-1, 1);
 8006578:	2201      	movs	r2, #1
 800657a:	f04f 31ff 	mov.w	r1, #4294967295
 800657e:	4843      	ldr	r0, [pc, #268]	; (800668c <cppLoop+0xa4c>)
 8006580:	f7fb fd34 	bl	8001fec <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006584:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800669c <cppLoop+0xa5c>
 8006588:	4845      	ldr	r0, [pc, #276]	; (80066a0 <cppLoop+0xa60>)
 800658a:	f7fc faa7 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800658e:	4844      	ldr	r0, [pc, #272]	; (80066a0 <cppLoop+0xa60>)
 8006590:	f7fc fafa 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006594:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006598:	f000 fd82 	bl	80070a0 <HAL_Delay>

			led.fullColor('R');
 800659c:	2152      	movs	r1, #82	; 0x52
 800659e:	483b      	ldr	r0, [pc, #236]	; (800668c <cppLoop+0xa4c>)
 80065a0:	f7fb fc68 	bl	8001e74 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80065a4:	483f      	ldr	r0, [pc, #252]	; (80066a4 <cppLoop+0xa64>)
 80065a6:	f7fa ff59 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80065aa:	483e      	ldr	r0, [pc, #248]	; (80066a4 <cppLoop+0xa64>)
 80065ac:	f7fa ff25 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80065b0:	483d      	ldr	r0, [pc, #244]	; (80066a8 <cppLoop+0xa68>)
 80065b2:	f7fc fe56 	bl	8003262 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80065b6:	483d      	ldr	r0, [pc, #244]	; (80066ac <cppLoop+0xa6c>)
 80065b8:	f7fc fc48 	bl	8002e4c <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80065bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80065c0:	f000 fd6e 	bl	80070a0 <HAL_Delay>

			line_trace.stop();
 80065c4:	4836      	ldr	r0, [pc, #216]	; (80066a0 <cppLoop+0xa60>)
 80065c6:	f7fc faf3 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			logger.stop();
 80065ca:	4838      	ldr	r0, [pc, #224]	; (80066ac <cppLoop+0xa6c>)
 80065cc:	f7fc fc4d 	bl	8002e6a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <cppLoop+0xa70>)
 80065d2:	4a38      	ldr	r2, [pc, #224]	; (80066b4 <cppLoop+0xa74>)
 80065d4:	4938      	ldr	r1, [pc, #224]	; (80066b8 <cppLoop+0xa78>)
 80065d6:	4835      	ldr	r0, [pc, #212]	; (80066ac <cppLoop+0xa6c>)
 80065d8:	f7fc fc15 	bl	8002e06 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80065dc:	2200      	movs	r2, #0
 80065de:	f04f 31ff 	mov.w	r1, #4294967295
 80065e2:	482a      	ldr	r0, [pc, #168]	; (800668c <cppLoop+0xa4c>)
 80065e4:	f7fb fd02 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 80065e8:	f000 bc2c 	b.w	8006e44 <cppLoop+0x1204>

	case 7:
		led.fullColor('G');
 80065ec:	2147      	movs	r1, #71	; 0x47
 80065ee:	4827      	ldr	r0, [pc, #156]	; (800668c <cppLoop+0xa4c>)
 80065f0:	f7fb fc40 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 80065f4:	f7fa fd54 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80065f8:	2100      	movs	r1, #0
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7fa fd60 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006600:	482e      	ldr	r0, [pc, #184]	; (80066bc <cppLoop+0xa7c>)
 8006602:	f7fa fd87 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006606:	2101      	movs	r1, #1
 8006608:	2000      	movs	r0, #0
 800660a:	f7fa fd59 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 800660e:	482c      	ldr	r0, [pc, #176]	; (80066c0 <cppLoop+0xa80>)
 8006610:	f7fa fd80 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006614:	4820      	ldr	r0, [pc, #128]	; (8006698 <cppLoop+0xa58>)
 8006616:	f7fb fbc9 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800661a:	4603      	mov	r3, r0
 800661c:	2b02      	cmp	r3, #2
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 840e 	beq.w	8006e48 <cppLoop+0x1208>
			led.LR(-1, 1);
 800662c:	2201      	movs	r2, #1
 800662e:	f04f 31ff 	mov.w	r1, #4294967295
 8006632:	4816      	ldr	r0, [pc, #88]	; (800668c <cppLoop+0xa4c>)
 8006634:	f7fb fcda 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800663c:	f000 fd30 	bl	80070a0 <HAL_Delay>

			led.fullColor('R');
 8006640:	2152      	movs	r1, #82	; 0x52
 8006642:	4812      	ldr	r0, [pc, #72]	; (800668c <cppLoop+0xa4c>)
 8006644:	f7fb fc16 	bl	8001e74 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006648:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80066c4 <cppLoop+0xa84>
 800664c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80066c8 <cppLoop+0xa88>
 8006650:	481e      	ldr	r0, [pc, #120]	; (80066cc <cppLoop+0xa8c>)
 8006652:	f7fd fac5 	bl	8003be0 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006656:	481d      	ldr	r0, [pc, #116]	; (80066cc <cppLoop+0xa8c>)
 8006658:	f7fd fb2f 	bl	8003cba <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 800665c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006660:	f000 fd1e 	bl	80070a0 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006664:	eddf 0a18 	vldr	s1, [pc, #96]	; 80066c8 <cppLoop+0xa88>
 8006668:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80066c8 <cppLoop+0xa88>
 800666c:	4817      	ldr	r0, [pc, #92]	; (80066cc <cppLoop+0xa8c>)
 800666e:	f7fd fab7 	bl	8003be0 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006672:	2064      	movs	r0, #100	; 0x64
 8006674:	f000 fd14 	bl	80070a0 <HAL_Delay>
			velocity_ctrl.stop();
 8006678:	4814      	ldr	r0, [pc, #80]	; (80066cc <cppLoop+0xa8c>)
 800667a:	f7fd fb31 	bl	8003ce0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 800667e:	2200      	movs	r2, #0
 8006680:	f04f 31ff 	mov.w	r1, #4294967295
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <cppLoop+0xa4c>)
 8006686:	f7fb fcb1 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 800668a:	e3dd      	b.n	8006e48 <cppLoop+0x1208>
 800668c:	200005a4 	.word	0x200005a4
 8006690:	08017e44 	.word	0x08017e44
 8006694:	08017df8 	.word	0x08017df8
 8006698:	20000598 	.word	0x20000598
 800669c:	3d8f5c29 	.word	0x3d8f5c29
 80066a0:	2001fa24 	.word	0x2001fa24
 80066a4:	2001f9d0 	.word	0x2001f9d0
 80066a8:	2001fa90 	.word	0x2001fa90
 80066ac:	200005c8 	.word	0x200005c8
 80066b0:	08017e50 	.word	0x08017e50
 80066b4:	08017e5c 	.word	0x08017e5c
 80066b8:	08017e68 	.word	0x08017e68
 80066bc:	08017e6c 	.word	0x08017e6c
 80066c0:	08017e78 	.word	0x08017e78
 80066c4:	3fc8f5c3 	.word	0x3fc8f5c3
 80066c8:	00000000 	.word	0x00000000
 80066cc:	2001f9e8 	.word	0x2001f9e8

	case 8:
		led.fullColor('B');
 80066d0:	2142      	movs	r1, #66	; 0x42
 80066d2:	48a7      	ldr	r0, [pc, #668]	; (8006970 <cppLoop+0xd30>)
 80066d4:	f7fb fbce 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 80066d8:	f7fa fce2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80066dc:	2100      	movs	r1, #0
 80066de:	2000      	movs	r0, #0
 80066e0:	f7fa fcee 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 80066e4:	48a3      	ldr	r0, [pc, #652]	; (8006974 <cppLoop+0xd34>)
 80066e6:	f7fc feb3 	bl	8003450 <_ZN13PathFollowing8getKxValEv>
 80066ea:	ec51 0b10 	vmov	r0, r1, d0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	4ba1      	ldr	r3, [pc, #644]	; (8006978 <cppLoop+0xd38>)
 80066f4:	f7f9 ff98 	bl	8000628 <__aeabi_dmul>
 80066f8:	4603      	mov	r3, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	461a      	mov	r2, r3
 80066fe:	4623      	mov	r3, r4
 8006700:	489e      	ldr	r0, [pc, #632]	; (800697c <cppLoop+0xd3c>)
 8006702:	f7fa fd07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006706:	2101      	movs	r1, #1
 8006708:	2000      	movs	r0, #0
 800670a:	f7fa fcd9 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 800670e:	4899      	ldr	r0, [pc, #612]	; (8006974 <cppLoop+0xd34>)
 8006710:	f7fc feb2 	bl	8003478 <_ZN13PathFollowing8getKyValEv>
 8006714:	ec51 0b10 	vmov	r0, r1, d0
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	4b96      	ldr	r3, [pc, #600]	; (8006978 <cppLoop+0xd38>)
 800671e:	f7f9 ff83 	bl	8000628 <__aeabi_dmul>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461d      	mov	r5, r3
 8006728:	4626      	mov	r6, r4
 800672a:	4892      	ldr	r0, [pc, #584]	; (8006974 <cppLoop+0xd34>)
 800672c:	f7fc feb8 	bl	80034a0 <_ZN13PathFollowing8getKtValEv>
 8006730:	ec51 0b10 	vmov	r0, r1, d0
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4b8f      	ldr	r3, [pc, #572]	; (8006978 <cppLoop+0xd38>)
 800673a:	f7f9 ff75 	bl	8000628 <__aeabi_dmul>
 800673e:	4603      	mov	r3, r0
 8006740:	460c      	mov	r4, r1
 8006742:	e9cd 3400 	strd	r3, r4, [sp]
 8006746:	462a      	mov	r2, r5
 8006748:	4633      	mov	r3, r6
 800674a:	488d      	ldr	r0, [pc, #564]	; (8006980 <cppLoop+0xd40>)
 800674c:	f7fa fce2 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006750:	4b8c      	ldr	r3, [pc, #560]	; (8006984 <cppLoop+0xd44>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f3bf 8f5b 	dmb	ish
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d019      	beq.n	80067a0 <cppLoop+0xb60>
 800676c:	4885      	ldr	r0, [pc, #532]	; (8006984 <cppLoop+0xd44>)
 800676e:	f00b f994 	bl	8011a9a <__cxa_guard_acquire>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <cppLoop+0xb60>
 8006782:	487c      	ldr	r0, [pc, #496]	; (8006974 <cppLoop+0xd34>)
 8006784:	f7fc fe64 	bl	8003450 <_ZN13PathFollowing8getKxValEv>
 8006788:	ec54 3b10 	vmov	r3, r4, d0
 800678c:	4618      	mov	r0, r3
 800678e:	4621      	mov	r1, r4
 8006790:	f7fa fa42 	bl	8000c18 <__aeabi_d2f>
 8006794:	4602      	mov	r2, r0
 8006796:	4b7c      	ldr	r3, [pc, #496]	; (8006988 <cppLoop+0xd48>)
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	487a      	ldr	r0, [pc, #488]	; (8006984 <cppLoop+0xd44>)
 800679c:	f00b f989 	bl	8011ab2 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 80067a0:	4b7a      	ldr	r3, [pc, #488]	; (800698c <cppLoop+0xd4c>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f3bf 8f5b 	dmb	ish
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d019      	beq.n	80067f0 <cppLoop+0xbb0>
 80067bc:	4873      	ldr	r0, [pc, #460]	; (800698c <cppLoop+0xd4c>)
 80067be:	f00b f96c 	bl	8011a9a <__cxa_guard_acquire>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <cppLoop+0xbb0>
 80067d2:	4868      	ldr	r0, [pc, #416]	; (8006974 <cppLoop+0xd34>)
 80067d4:	f7fc fe50 	bl	8003478 <_ZN13PathFollowing8getKyValEv>
 80067d8:	ec54 3b10 	vmov	r3, r4, d0
 80067dc:	4618      	mov	r0, r3
 80067de:	4621      	mov	r1, r4
 80067e0:	f7fa fa1a 	bl	8000c18 <__aeabi_d2f>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b6a      	ldr	r3, [pc, #424]	; (8006990 <cppLoop+0xd50>)
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	4868      	ldr	r0, [pc, #416]	; (800698c <cppLoop+0xd4c>)
 80067ec:	f00b f961 	bl	8011ab2 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 80067f0:	4b68      	ldr	r3, [pc, #416]	; (8006994 <cppLoop+0xd54>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f3bf 8f5b 	dmb	ish
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d019      	beq.n	8006840 <cppLoop+0xc00>
 800680c:	4861      	ldr	r0, [pc, #388]	; (8006994 <cppLoop+0xd54>)
 800680e:	f00b f944 	bl	8011a9a <__cxa_guard_acquire>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <cppLoop+0xc00>
 8006822:	4854      	ldr	r0, [pc, #336]	; (8006974 <cppLoop+0xd34>)
 8006824:	f7fc fe3c 	bl	80034a0 <_ZN13PathFollowing8getKtValEv>
 8006828:	ec54 3b10 	vmov	r3, r4, d0
 800682c:	4618      	mov	r0, r3
 800682e:	4621      	mov	r1, r4
 8006830:	f7fa f9f2 	bl	8000c18 <__aeabi_d2f>
 8006834:	4602      	mov	r2, r0
 8006836:	4b58      	ldr	r3, [pc, #352]	; (8006998 <cppLoop+0xd58>)
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	4856      	ldr	r0, [pc, #344]	; (8006994 <cppLoop+0xd54>)
 800683c:	f00b f939 	bl	8011ab2 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006840:	4856      	ldr	r0, [pc, #344]	; (800699c <cppLoop+0xd5c>)
 8006842:	f7fb fab3 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006846:	4603      	mov	r3, r0
 8006848:	2b08      	cmp	r3, #8
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d021      	beq.n	800689a <cppLoop+0xc5a>
			led.LR(-1, 1);
 8006856:	2201      	movs	r2, #1
 8006858:	f04f 31ff 	mov.w	r1, #4294967295
 800685c:	4844      	ldr	r0, [pc, #272]	; (8006970 <cppLoop+0xd30>)
 800685e:	f7fb fbc5 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006862:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006866:	f000 fc1b 	bl	80070a0 <HAL_Delay>

			selector++;
 800686a:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <cppLoop+0xd60>)
 800686c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006870:	b29b      	uxth	r3, r3
 8006872:	3301      	adds	r3, #1
 8006874:	b29b      	uxth	r3, r3
 8006876:	b21a      	sxth	r2, r3
 8006878:	4b49      	ldr	r3, [pc, #292]	; (80069a0 <cppLoop+0xd60>)
 800687a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800687c:	4b48      	ldr	r3, [pc, #288]	; (80069a0 <cppLoop+0xd60>)
 800687e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006882:	2b02      	cmp	r3, #2
 8006884:	dd02      	ble.n	800688c <cppLoop+0xc4c>
 8006886:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <cppLoop+0xd60>)
 8006888:	2200      	movs	r2, #0
 800688a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800688c:	2200      	movs	r2, #0
 800688e:	f04f 31ff 	mov.w	r1, #4294967295
 8006892:	4837      	ldr	r0, [pc, #220]	; (8006970 <cppLoop+0xd30>)
 8006894:	f7fb fbaa 	bl	8001fec <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006898:	e2d8      	b.n	8006e4c <cppLoop+0x120c>
		else if(joy_stick.getValue() == JOY_R){
 800689a:	4840      	ldr	r0, [pc, #256]	; (800699c <cppLoop+0xd5c>)
 800689c:	f7fb fa86 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d079      	beq.n	80069a4 <cppLoop+0xd64>
			led.LR(-1, 1);
 80068b0:	2201      	movs	r2, #1
 80068b2:	f04f 31ff 	mov.w	r1, #4294967295
 80068b6:	482e      	ldr	r0, [pc, #184]	; (8006970 <cppLoop+0xd30>)
 80068b8:	f7fb fb98 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	f000 fbef 	bl	80070a0 <HAL_Delay>
			if(selector == 0){
 80068c2:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <cppLoop+0xd60>)
 80068c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d113      	bne.n	80068f4 <cppLoop+0xcb4>
				adj_kx = adj_kx + 0.00001;
 80068cc:	4b2e      	ldr	r3, [pc, #184]	; (8006988 <cppLoop+0xd48>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7f9 fe51 	bl	8000578 <__aeabi_f2d>
 80068d6:	a324      	add	r3, pc, #144	; (adr r3, 8006968 <cppLoop+0xd28>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fcee 	bl	80002bc <__adddf3>
 80068e0:	4603      	mov	r3, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	4618      	mov	r0, r3
 80068e6:	4621      	mov	r1, r4
 80068e8:	f7fa f996 	bl	8000c18 <__aeabi_d2f>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <cppLoop+0xd48>)
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e02b      	b.n	800694c <cppLoop+0xd0c>
			else if(selector == 1){
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <cppLoop+0xd60>)
 80068f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d113      	bne.n	8006926 <cppLoop+0xce6>
				adj_ky = adj_ky + 0.00001;
 80068fe:	4b24      	ldr	r3, [pc, #144]	; (8006990 <cppLoop+0xd50>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fe38 	bl	8000578 <__aeabi_f2d>
 8006908:	a317      	add	r3, pc, #92	; (adr r3, 8006968 <cppLoop+0xd28>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f7f9 fcd5 	bl	80002bc <__adddf3>
 8006912:	4603      	mov	r3, r0
 8006914:	460c      	mov	r4, r1
 8006916:	4618      	mov	r0, r3
 8006918:	4621      	mov	r1, r4
 800691a:	f7fa f97d 	bl	8000c18 <__aeabi_d2f>
 800691e:	4602      	mov	r2, r0
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <cppLoop+0xd50>)
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e012      	b.n	800694c <cppLoop+0xd0c>
				adj_kt = adj_kt + 0.00001;
 8006926:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <cppLoop+0xd58>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7f9 fe24 	bl	8000578 <__aeabi_f2d>
 8006930:	a30d      	add	r3, pc, #52	; (adr r3, 8006968 <cppLoop+0xd28>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fcc1 	bl	80002bc <__adddf3>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	4618      	mov	r0, r3
 8006940:	4621      	mov	r1, r4
 8006942:	f7fa f969 	bl	8000c18 <__aeabi_d2f>
 8006946:	4602      	mov	r2, r0
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <cppLoop+0xd58>)
 800694a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800694c:	2152      	movs	r1, #82	; 0x52
 800694e:	4808      	ldr	r0, [pc, #32]	; (8006970 <cppLoop+0xd30>)
 8006950:	f7fb fa90 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006954:	2200      	movs	r2, #0
 8006956:	f04f 31ff 	mov.w	r1, #4294967295
 800695a:	4805      	ldr	r0, [pc, #20]	; (8006970 <cppLoop+0xd30>)
 800695c:	f7fb fb46 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006960:	e274      	b.n	8006e4c <cppLoop+0x120c>
 8006962:	bf00      	nop
 8006964:	f3af 8000 	nop.w
 8006968:	88e368f1 	.word	0x88e368f1
 800696c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006970:	200005a4 	.word	0x200005a4
 8006974:	2001fcd0 	.word	0x2001fcd0
 8006978:	408f4000 	.word	0x408f4000
 800697c:	08017da0 	.word	0x08017da0
 8006980:	08017dac 	.word	0x08017dac
 8006984:	2003741c 	.word	0x2003741c
 8006988:	20037418 	.word	0x20037418
 800698c:	20037424 	.word	0x20037424
 8006990:	20037420 	.word	0x20037420
 8006994:	2003742c 	.word	0x2003742c
 8006998:	20037428 	.word	0x20037428
 800699c:	20000598 	.word	0x20000598
 80069a0:	200373fe 	.word	0x200373fe
		else if(joy_stick.getValue() == JOY_L){
 80069a4:	48b4      	ldr	r0, [pc, #720]	; (8006c78 <cppLoop+0x1038>)
 80069a6:	f7fb fa01 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d058      	beq.n	8006a6c <cppLoop+0xe2c>
			led.LR(-1, 1);
 80069ba:	2201      	movs	r2, #1
 80069bc:	f04f 31ff 	mov.w	r1, #4294967295
 80069c0:	48ae      	ldr	r0, [pc, #696]	; (8006c7c <cppLoop+0x103c>)
 80069c2:	f7fb fb13 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80069c6:	2064      	movs	r0, #100	; 0x64
 80069c8:	f000 fb6a 	bl	80070a0 <HAL_Delay>
			if(selector == 0){
 80069cc:	4bac      	ldr	r3, [pc, #688]	; (8006c80 <cppLoop+0x1040>)
 80069ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d113      	bne.n	80069fe <cppLoop+0xdbe>
				adj_kx = adj_kx - 0.00001;
 80069d6:	4bab      	ldr	r3, [pc, #684]	; (8006c84 <cppLoop+0x1044>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7f9 fdcc 	bl	8000578 <__aeabi_f2d>
 80069e0:	a39d      	add	r3, pc, #628	; (adr r3, 8006c58 <cppLoop+0x1018>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fc67 	bl	80002b8 <__aeabi_dsub>
 80069ea:	4603      	mov	r3, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	4618      	mov	r0, r3
 80069f0:	4621      	mov	r1, r4
 80069f2:	f7fa f911 	bl	8000c18 <__aeabi_d2f>
 80069f6:	4602      	mov	r2, r0
 80069f8:	4ba2      	ldr	r3, [pc, #648]	; (8006c84 <cppLoop+0x1044>)
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e02b      	b.n	8006a56 <cppLoop+0xe16>
			else if(selector == 1){
 80069fe:	4ba0      	ldr	r3, [pc, #640]	; (8006c80 <cppLoop+0x1040>)
 8006a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d113      	bne.n	8006a30 <cppLoop+0xdf0>
				adj_ky = adj_ky - 0.00001;
 8006a08:	4b9f      	ldr	r3, [pc, #636]	; (8006c88 <cppLoop+0x1048>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fdb3 	bl	8000578 <__aeabi_f2d>
 8006a12:	a391      	add	r3, pc, #580	; (adr r3, 8006c58 <cppLoop+0x1018>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fc4e 	bl	80002b8 <__aeabi_dsub>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4618      	mov	r0, r3
 8006a22:	4621      	mov	r1, r4
 8006a24:	f7fa f8f8 	bl	8000c18 <__aeabi_d2f>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	4b97      	ldr	r3, [pc, #604]	; (8006c88 <cppLoop+0x1048>)
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e012      	b.n	8006a56 <cppLoop+0xe16>
				adj_kt = adj_kt - 0.00001;
 8006a30:	4b96      	ldr	r3, [pc, #600]	; (8006c8c <cppLoop+0x104c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7f9 fd9f 	bl	8000578 <__aeabi_f2d>
 8006a3a:	a387      	add	r3, pc, #540	; (adr r3, 8006c58 <cppLoop+0x1018>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fc3a 	bl	80002b8 <__aeabi_dsub>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f7fa f8e4 	bl	8000c18 <__aeabi_d2f>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b8e      	ldr	r3, [pc, #568]	; (8006c8c <cppLoop+0x104c>)
 8006a54:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006a56:	2152      	movs	r1, #82	; 0x52
 8006a58:	4888      	ldr	r0, [pc, #544]	; (8006c7c <cppLoop+0x103c>)
 8006a5a:	f7fb fa0b 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	4885      	ldr	r0, [pc, #532]	; (8006c7c <cppLoop+0x103c>)
 8006a66:	f7fb fac1 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006a6a:	e1ef      	b.n	8006e4c <cppLoop+0x120c>
		else if(joy_stick.getValue() == JOY_D){
 8006a6c:	4882      	ldr	r0, [pc, #520]	; (8006c78 <cppLoop+0x1038>)
 8006a6e:	f7fb f99d 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d048      	beq.n	8006b14 <cppLoop+0xed4>
			led.LR(-1, 1);
 8006a82:	2201      	movs	r2, #1
 8006a84:	f04f 31ff 	mov.w	r1, #4294967295
 8006a88:	487c      	ldr	r0, [pc, #496]	; (8006c7c <cppLoop+0x103c>)
 8006a8a:	f7fb faaf 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a92:	f000 fb05 	bl	80070a0 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	497c      	ldr	r1, [pc, #496]	; (8006c90 <cppLoop+0x1050>)
 8006a9e:	487d      	ldr	r0, [pc, #500]	; (8006c94 <cppLoop+0x1054>)
 8006aa0:	f7fa fdcc 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006aa4:	f107 0308 	add.w	r3, r7, #8
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	497b      	ldr	r1, [pc, #492]	; (8006c98 <cppLoop+0x1058>)
 8006aac:	4879      	ldr	r0, [pc, #484]	; (8006c94 <cppLoop+0x1054>)
 8006aae:	f7fa fdc5 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006ab2:	1d3b      	adds	r3, r7, #4
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	4979      	ldr	r1, [pc, #484]	; (8006c9c <cppLoop+0x105c>)
 8006ab8:	4876      	ldr	r0, [pc, #472]	; (8006c94 <cppLoop+0x1054>)
 8006aba:	f7fa fdbf 	bl	800163c <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7f9 fd59 	bl	8000578 <__aeabi_f2d>
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	460d      	mov	r5, r1
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7f9 fd53 	bl	8000578 <__aeabi_f2d>
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	4689      	mov	r9, r1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7f9 fd4d 	bl	8000578 <__aeabi_f2d>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	ec43 2b12 	vmov	d2, r2, r3
 8006ae6:	ec49 8b11 	vmov	d1, r8, r9
 8006aea:	ec45 4b10 	vmov	d0, r4, r5
 8006aee:	486c      	ldr	r0, [pc, #432]	; (8006ca0 <cppLoop+0x1060>)
 8006af0:	f7fc fc8e 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a63      	ldr	r2, [pc, #396]	; (8006c84 <cppLoop+0x1044>)
 8006af8:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a62      	ldr	r2, [pc, #392]	; (8006c88 <cppLoop+0x1048>)
 8006afe:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a62      	ldr	r2, [pc, #392]	; (8006c8c <cppLoop+0x104c>)
 8006b04:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006b06:	2200      	movs	r2, #0
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	485b      	ldr	r0, [pc, #364]	; (8006c7c <cppLoop+0x103c>)
 8006b0e:	f7fb fa6d 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006b12:	e19b      	b.n	8006e4c <cppLoop+0x120c>
		else if(joy_stick.getValue() == JOY_C){
 8006b14:	4858      	ldr	r0, [pc, #352]	; (8006c78 <cppLoop+0x1038>)
 8006b16:	f7fb f949 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8190 	beq.w	8006e4c <cppLoop+0x120c>
			led.LR(-1, 1);
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b32:	4852      	ldr	r0, [pc, #328]	; (8006c7c <cppLoop+0x103c>)
 8006b34:	f7fb fa5a 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006b38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b3c:	f000 fab0 	bl	80070a0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006b40:	2300      	movs	r3, #0
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <cppLoop+0x1044>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	4951      	ldr	r1, [pc, #324]	; (8006c90 <cppLoop+0x1050>)
 8006b4a:	4852      	ldr	r0, [pc, #328]	; (8006c94 <cppLoop+0x1054>)
 8006b4c:	f7fa fd10 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006b50:	2300      	movs	r3, #0
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <cppLoop+0x1048>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	494f      	ldr	r1, [pc, #316]	; (8006c98 <cppLoop+0x1058>)
 8006b5a:	484e      	ldr	r0, [pc, #312]	; (8006c94 <cppLoop+0x1054>)
 8006b5c:	f7fa fd08 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	4b49      	ldr	r3, [pc, #292]	; (8006c8c <cppLoop+0x104c>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	494c      	ldr	r1, [pc, #304]	; (8006c9c <cppLoop+0x105c>)
 8006b6a:	484a      	ldr	r0, [pc, #296]	; (8006c94 <cppLoop+0x1054>)
 8006b6c:	f7fa fd00 	bl	8001570 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006b70:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <cppLoop+0x1044>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7f9 fcff 	bl	8000578 <__aeabi_f2d>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	4b42      	ldr	r3, [pc, #264]	; (8006c88 <cppLoop+0x1048>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7f9 fcf8 	bl	8000578 <__aeabi_f2d>
 8006b88:	4680      	mov	r8, r0
 8006b8a:	4689      	mov	r9, r1
 8006b8c:	4b3f      	ldr	r3, [pc, #252]	; (8006c8c <cppLoop+0x104c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7f9 fcf1 	bl	8000578 <__aeabi_f2d>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	ec43 2b12 	vmov	d2, r2, r3
 8006b9e:	ec49 8b11 	vmov	d1, r8, r9
 8006ba2:	ec45 4b10 	vmov	d0, r4, r5
 8006ba6:	483e      	ldr	r0, [pc, #248]	; (8006ca0 <cppLoop+0x1060>)
 8006ba8:	f7fc fc32 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006bac:	2200      	movs	r2, #0
 8006bae:	f04f 31ff 	mov.w	r1, #4294967295
 8006bb2:	4832      	ldr	r0, [pc, #200]	; (8006c7c <cppLoop+0x103c>)
 8006bb4:	f7fb fa1a 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006bb8:	e148      	b.n	8006e4c <cppLoop+0x120c>

	case 9:
		led.fullColor('M');
 8006bba:	214d      	movs	r1, #77	; 0x4d
 8006bbc:	482f      	ldr	r0, [pc, #188]	; (8006c7c <cppLoop+0x103c>)
 8006bbe:	f7fb f959 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006bc2:	f7fa fa6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f7fa fa79 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006bce:	4835      	ldr	r0, [pc, #212]	; (8006ca4 <cppLoop+0x1064>)
 8006bd0:	f7fa faa0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7fa fa72 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006bdc:	4832      	ldr	r0, [pc, #200]	; (8006ca8 <cppLoop+0x1068>)
 8006bde:	f7fa fa99 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006be2:	4825      	ldr	r0, [pc, #148]	; (8006c78 <cppLoop+0x1038>)
 8006be4:	f7fb f8e2 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	bf0c      	ite	eq
 8006bee:	2301      	moveq	r3, #1
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 812b 	beq.w	8006e50 <cppLoop+0x1210>
			HAL_Delay(1500);
 8006bfa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006bfe:	f000 fa4f 	bl	80070a0 <HAL_Delay>
			led.LR(-1, 1);
 8006c02:	2201      	movs	r2, #1
 8006c04:	f04f 31ff 	mov.w	r1, #4294967295
 8006c08:	481c      	ldr	r0, [pc, #112]	; (8006c7c <cppLoop+0x103c>)
 8006c0a:	f7fb f9ef 	bl	8001fec <_ZN3LED2LREaa>

			logger.start();
 8006c0e:	4827      	ldr	r0, [pc, #156]	; (8006cac <cppLoop+0x106c>)
 8006c10:	f7fc f91c 	bl	8002e4c <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006c14:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8006c60 <cppLoop+0x1020>
 8006c18:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8006c68 <cppLoop+0x1028>
 8006c1c:	4824      	ldr	r0, [pc, #144]	; (8006cb0 <cppLoop+0x1070>)
 8006c1e:	f7fc f9a7 	bl	8002f70 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c26:	f000 fa3b 	bl	80070a0 <HAL_Delay>

			logger.stop();
 8006c2a:	4820      	ldr	r0, [pc, #128]	; (8006cac <cppLoop+0x106c>)
 8006c2c:	f7fc f91d 	bl	8002e6a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006c30:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8006c70 <cppLoop+0x1030>
 8006c34:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006c70 <cppLoop+0x1030>
 8006c38:	481d      	ldr	r0, [pc, #116]	; (8006cb0 <cppLoop+0x1070>)
 8006c3a:	f7fc f999 	bl	8002f70 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006c3e:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <cppLoop+0x1074>)
 8006c40:	491d      	ldr	r1, [pc, #116]	; (8006cb8 <cppLoop+0x1078>)
 8006c42:	481a      	ldr	r0, [pc, #104]	; (8006cac <cppLoop+0x106c>)
 8006c44:	f7fc f8b5 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c4e:	480b      	ldr	r0, [pc, #44]	; (8006c7c <cppLoop+0x103c>)
 8006c50:	f7fb f9cc 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 8006c54:	e0fc      	b.n	8006e50 <cppLoop+0x1210>
 8006c56:	bf00      	nop
 8006c58:	88e368f1 	.word	0x88e368f1
 8006c5c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c60:	33333333 	.word	0x33333333
 8006c64:	bfd33333 	.word	0xbfd33333
 8006c68:	33333333 	.word	0x33333333
 8006c6c:	3fd33333 	.word	0x3fd33333
	...
 8006c78:	20000598 	.word	0x20000598
 8006c7c:	200005a4 	.word	0x200005a4
 8006c80:	200373fe 	.word	0x200373fe
 8006c84:	20037418 	.word	0x20037418
 8006c88:	20037420 	.word	0x20037420
 8006c8c:	20037428 	.word	0x20037428
 8006c90:	08017e80 	.word	0x08017e80
 8006c94:	08017dc4 	.word	0x08017dc4
 8006c98:	08017e88 	.word	0x08017e88
 8006c9c:	08017e90 	.word	0x08017e90
 8006ca0:	2001fcd0 	.word	0x2001fcd0
 8006ca4:	08017e98 	.word	0x08017e98
 8006ca8:	08017df8 	.word	0x08017df8
 8006cac:	200005c8 	.word	0x200005c8
 8006cb0:	200005a0 	.word	0x200005a0
 8006cb4:	08017ea0 	.word	0x08017ea0
 8006cb8:	08017eac 	.word	0x08017eac

	case 10:
		led.fullColor('Y');
 8006cbc:	2159      	movs	r1, #89	; 0x59
 8006cbe:	486a      	ldr	r0, [pc, #424]	; (8006e68 <cppLoop+0x1228>)
 8006cc0:	f7fb f8d8 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006cc4:	f7fa f9ec 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f7fa f9f8 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006cd0:	4866      	ldr	r0, [pc, #408]	; (8006e6c <cppLoop+0x122c>)
 8006cd2:	f7fa fa1f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f7fa f9f1 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006cde:	4864      	ldr	r0, [pc, #400]	; (8006e70 <cppLoop+0x1230>)
 8006ce0:	f7fa fa18 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ce4:	4863      	ldr	r0, [pc, #396]	; (8006e74 <cppLoop+0x1234>)
 8006ce6:	f7fb f861 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80ac 	beq.w	8006e54 <cppLoop+0x1214>
			HAL_Delay(1500);
 8006cfc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006d00:	f000 f9ce 	bl	80070a0 <HAL_Delay>
			led.LR(-1, 1);
 8006d04:	2201      	movs	r2, #1
 8006d06:	f04f 31ff 	mov.w	r1, #4294967295
 8006d0a:	4857      	ldr	r0, [pc, #348]	; (8006e68 <cppLoop+0x1228>)
 8006d0c:	f7fb f96e 	bl	8001fec <_ZN3LED2LREaa>

			logger.start();
 8006d10:	4859      	ldr	r0, [pc, #356]	; (8006e78 <cppLoop+0x1238>)
 8006d12:	f7fc f89b 	bl	8002e4c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006d16:	4859      	ldr	r0, [pc, #356]	; (8006e7c <cppLoop+0x123c>)
 8006d18:	f7fc ffcf 	bl	8003cba <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8006d1c:	eddf 0a58 	vldr	s1, [pc, #352]	; 8006e80 <cppLoop+0x1240>
 8006d20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d24:	4855      	ldr	r0, [pc, #340]	; (8006e7c <cppLoop+0x123c>)
 8006d26:	f7fc ff5b 	bl	8003be0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d2e:	f000 f9b7 	bl	80070a0 <HAL_Delay>

			logger.stop();
 8006d32:	4851      	ldr	r0, [pc, #324]	; (8006e78 <cppLoop+0x1238>)
 8006d34:	f7fc f899 	bl	8002e6a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006d38:	4850      	ldr	r0, [pc, #320]	; (8006e7c <cppLoop+0x123c>)
 8006d3a:	f7fc ffd1 	bl	8003ce0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006d3e:	4a51      	ldr	r2, [pc, #324]	; (8006e84 <cppLoop+0x1244>)
 8006d40:	4951      	ldr	r1, [pc, #324]	; (8006e88 <cppLoop+0x1248>)
 8006d42:	484d      	ldr	r0, [pc, #308]	; (8006e78 <cppLoop+0x1238>)
 8006d44:	f7fc f835 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4e:	4846      	ldr	r0, [pc, #280]	; (8006e68 <cppLoop+0x1228>)
 8006d50:	f7fb f94c 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 8006d54:	e07e      	b.n	8006e54 <cppLoop+0x1214>

	case 11:
		led.fullColor('C');
 8006d56:	2143      	movs	r1, #67	; 0x43
 8006d58:	4843      	ldr	r0, [pc, #268]	; (8006e68 <cppLoop+0x1228>)
 8006d5a:	f7fb f88b 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d5e:	f7fa f99f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d62:	2100      	movs	r1, #0
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7fa f9ab 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006d6a:	4848      	ldr	r0, [pc, #288]	; (8006e8c <cppLoop+0x124c>)
 8006d6c:	f7fa f9d2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d70:	2101      	movs	r1, #1
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7fa f9a4 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006d78:	4845      	ldr	r0, [pc, #276]	; (8006e90 <cppLoop+0x1250>)
 8006d7a:	f7fa f9cb 	bl	8001114 <lcd_printf>

		break;
 8006d7e:	e06a      	b.n	8006e56 <cppLoop+0x1216>

	case 12:
		led.fullColor('R');
 8006d80:	2152      	movs	r1, #82	; 0x52
 8006d82:	4839      	ldr	r0, [pc, #228]	; (8006e68 <cppLoop+0x1228>)
 8006d84:	f7fb f876 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d88:	f7fa f98a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7fa f996 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8006d94:	483f      	ldr	r0, [pc, #252]	; (8006e94 <cppLoop+0x1254>)
 8006d96:	f7fa f9bd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7fa f98f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006da2:	483b      	ldr	r0, [pc, #236]	; (8006e90 <cppLoop+0x1250>)
 8006da4:	f7fa f9b6 	bl	8001114 <lcd_printf>

		break;
 8006da8:	e055      	b.n	8006e56 <cppLoop+0x1216>

	case 13:
		led.fullColor('G');
 8006daa:	2147      	movs	r1, #71	; 0x47
 8006dac:	482e      	ldr	r0, [pc, #184]	; (8006e68 <cppLoop+0x1228>)
 8006dae:	f7fb f861 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006db2:	f7fa f975 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006db6:	2100      	movs	r1, #0
 8006db8:	2000      	movs	r0, #0
 8006dba:	f7fa f981 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8006dbe:	4836      	ldr	r0, [pc, #216]	; (8006e98 <cppLoop+0x1258>)
 8006dc0:	f7fa f9a8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	f7fa f97a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006dcc:	4830      	ldr	r0, [pc, #192]	; (8006e90 <cppLoop+0x1250>)
 8006dce:	f7fa f9a1 	bl	8001114 <lcd_printf>

		break;
 8006dd2:	e040      	b.n	8006e56 <cppLoop+0x1216>

	case 14:
		led.fullColor('B');
 8006dd4:	2142      	movs	r1, #66	; 0x42
 8006dd6:	4824      	ldr	r0, [pc, #144]	; (8006e68 <cppLoop+0x1228>)
 8006dd8:	f7fb f84c 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ddc:	f7fa f960 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006de0:	2100      	movs	r1, #0
 8006de2:	2000      	movs	r0, #0
 8006de4:	f7fa f96c 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8006de8:	482c      	ldr	r0, [pc, #176]	; (8006e9c <cppLoop+0x125c>)
 8006dea:	f7fa f993 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dee:	2101      	movs	r1, #1
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7fa f965 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006df6:	4826      	ldr	r0, [pc, #152]	; (8006e90 <cppLoop+0x1250>)
 8006df8:	f7fa f98c 	bl	8001114 <lcd_printf>

		break;
 8006dfc:	e02b      	b.n	8006e56 <cppLoop+0x1216>

	case 15:
		led.fullColor('M');
 8006dfe:	214d      	movs	r1, #77	; 0x4d
 8006e00:	4819      	ldr	r0, [pc, #100]	; (8006e68 <cppLoop+0x1228>)
 8006e02:	f7fb f837 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e06:	f7fa f94b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f7fa f957 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8006e12:	4823      	ldr	r0, [pc, #140]	; (8006ea0 <cppLoop+0x1260>)
 8006e14:	f7fa f97e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e18:	2101      	movs	r1, #1
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f7fa f950 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e20:	481b      	ldr	r0, [pc, #108]	; (8006e90 <cppLoop+0x1250>)
 8006e22:	f7fa f977 	bl	8001114 <lcd_printf>

		break;
 8006e26:	e016      	b.n	8006e56 <cppLoop+0x1216>

	default:
		break;
 8006e28:	bf00      	nop
 8006e2a:	e014      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e2c:	bf00      	nop
 8006e2e:	e012      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e30:	bf00      	nop
 8006e32:	e010      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e34:	bf00      	nop
 8006e36:	e00e      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e38:	bf00      	nop
 8006e3a:	e00c      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e3c:	bf00      	nop
 8006e3e:	e00a      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e40:	bf00      	nop
 8006e42:	e008      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e44:	bf00      	nop
 8006e46:	e006      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e48:	bf00      	nop
 8006e4a:	e004      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e4c:	bf00      	nop
 8006e4e:	e002      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e50:	bf00      	nop
 8006e52:	e000      	b.n	8006e56 <cppLoop+0x1216>
		break;
 8006e54:	bf00      	nop

	}

	HAL_Delay(30);
 8006e56:	201e      	movs	r0, #30
 8006e58:	f000 f922 	bl	80070a0 <HAL_Delay>

}
 8006e5c:	bf00      	nop
 8006e5e:	3724      	adds	r7, #36	; 0x24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e66:	bf00      	nop
 8006e68:	200005a4 	.word	0x200005a4
 8006e6c:	08017eb8 	.word	0x08017eb8
 8006e70:	08017ebc 	.word	0x08017ebc
 8006e74:	20000598 	.word	0x20000598
 8006e78:	200005c8 	.word	0x200005c8
 8006e7c:	2001f9e8 	.word	0x2001f9e8
 8006e80:	00000000 	.word	0x00000000
 8006e84:	08017ec8 	.word	0x08017ec8
 8006e88:	08017eac 	.word	0x08017eac
 8006e8c:	08017ed4 	.word	0x08017ed4
 8006e90:	08017ee0 	.word	0x08017ee0
 8006e94:	08017eec 	.word	0x08017eec
 8006e98:	08017ef8 	.word	0x08017ef8
 8006e9c:	08017f04 	.word	0x08017f04
 8006ea0:	08017f10 	.word	0x08017f10

08006ea4 <_Z41__static_initialization_and_destruction_0ii>:
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d135      	bne.n	8006f20 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d130      	bne.n	8006f20 <_Z41__static_initialization_and_destruction_0ii+0x7c>
LineSensor line_sensor;
 8006ebe:	481a      	ldr	r0, [pc, #104]	; (8006f28 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006ec0:	f7fb f8cc 	bl	800205c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006ec4:	4819      	ldr	r0, [pc, #100]	; (8006f2c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006ec6:	f7fc fbcb 	bl	8003660 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ecc:	f7fa ff62 	bl	8001d94 <_ZN8JoyStickC1Ev>
Motor motor;
 8006ed0:	4818      	ldr	r0, [pc, #96]	; (8006f34 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006ed2:	f7fb ffd9 	bl	8002e88 <_ZN5MotorC1Ev>
IMU imu;
 8006ed6:	4818      	ldr	r0, [pc, #96]	; (8006f38 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006ed8:	f7fa fd62 	bl	80019a0 <_ZN3IMUC1Ev>
Logger logger;
 8006edc:	4817      	ldr	r0, [pc, #92]	; (8006f3c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ede:	f7fb fe83 	bl	8002be8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006ee2:	4817      	ldr	r0, [pc, #92]	; (8006f40 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006ee4:	f7fa f936 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006eec:	4911      	ldr	r1, [pc, #68]	; (8006f34 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006eee:	4815      	ldr	r0, [pc, #84]	; (8006f44 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006ef0:	f7fc fd4a 	bl	8003988 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor);
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006efa:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006efc:	490d      	ldr	r1, [pc, #52]	; (8006f34 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006efe:	4812      	ldr	r0, [pc, #72]	; (8006f48 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006f00:	f7fb fc04 	bl	800270c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensor>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006f06:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f08:	490d      	ldr	r1, [pc, #52]	; (8006f40 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f0a:	4810      	ldr	r0, [pc, #64]	; (8006f4c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006f0c:	f7fc f8a2 	bl	8003054 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f12:	490a      	ldr	r1, [pc, #40]	; (8006f3c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f14:	480e      	ldr	r0, [pc, #56]	; (8006f50 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006f16:	f7fc fc33 	bl	8003780 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006f1a:	480e      	ldr	r0, [pc, #56]	; (8006f54 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006f1c:	f7fc f9c0 	bl	80032a0 <_ZN13PathFollowingC1Ev>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000298 	.word	0x20000298
 8006f2c:	20000590 	.word	0x20000590
 8006f30:	20000598 	.word	0x20000598
 8006f34:	200005a0 	.word	0x200005a0
 8006f38:	200005b4 	.word	0x200005b4
 8006f3c:	200005c8 	.word	0x200005c8
 8006f40:	2001f9d0 	.word	0x2001f9d0
 8006f44:	2001f9e8 	.word	0x2001f9e8
 8006f48:	2001fa24 	.word	0x2001fa24
 8006f4c:	2001fa90 	.word	0x2001fa90
 8006f50:	2001fac0 	.word	0x2001fac0
 8006f54:	2001fcd0 	.word	0x2001fcd0

08006f58 <_GLOBAL__sub_I_line_sensor>:
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f60:	2001      	movs	r0, #1
 8006f62:	f7ff ff9f 	bl	8006ea4 <_Z41__static_initialization_and_destruction_0ii>
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f6e:	e003      	b.n	8006f78 <LoopCopyDataInit>

08006f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f76:	3104      	adds	r1, #4

08006f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f78:	480b      	ldr	r0, [pc, #44]	; (8006fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f80:	d3f6      	bcc.n	8006f70 <CopyDataInit>
  ldr  r2, =_sbss
 8006f82:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006f84:	e002      	b.n	8006f8c <LoopFillZerobss>

08006f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006f88:	f842 3b04 	str.w	r3, [r2], #4

08006f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006f90:	d3f9      	bcc.n	8006f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f92:	f7fe fcc9 	bl	8005928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f96:	f00b fdeb 	bl	8012b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f9a:	f7fc ff8d 	bl	8003eb8 <main>
  bx  lr    
 8006f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006fa0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006fa4:	08018518 	.word	0x08018518
  ldr  r0, =_sdata
 8006fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006fac:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006fb0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006fb4:	2003be10 	.word	0x2003be10

08006fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fb8:	e7fe      	b.n	8006fb8 <ADC_IRQHandler>
	...

08006fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <HAL_Init+0x40>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <HAL_Init+0x40>)
 8006fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_Init+0x40>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <HAL_Init+0x40>)
 8006fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_Init+0x40>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <HAL_Init+0x40>)
 8006fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fe4:	2003      	movs	r0, #3
 8006fe6:	f000 fd51 	bl	8007a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fea:	2000      	movs	r0, #0
 8006fec:	f000 f808 	bl	8007000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ff0:	f7fd fe88 	bl	8004d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023c00 	.word	0x40023c00

08007000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <HAL_InitTick+0x54>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4b12      	ldr	r3, [pc, #72]	; (8007058 <HAL_InitTick+0x58>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4619      	mov	r1, r3
 8007012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007016:	fbb3 f3f1 	udiv	r3, r3, r1
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd69 	bl	8007af6 <HAL_SYSTICK_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e00e      	b.n	800704c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d80a      	bhi.n	800704a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007034:	2200      	movs	r2, #0
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	f000 fd31 	bl	8007aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <HAL_InitTick+0x5c>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000000 	.word	0x20000000
 8007058:	20000008 	.word	0x20000008
 800705c:	20000004 	.word	0x20000004

08007060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <HAL_IncTick+0x20>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <HAL_IncTick+0x24>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4413      	add	r3, r2
 8007070:	4a04      	ldr	r2, [pc, #16]	; (8007084 <HAL_IncTick+0x24>)
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000008 	.word	0x20000008
 8007084:	20039d98 	.word	0x20039d98

08007088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return uwTick;
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <HAL_GetTick+0x14>)
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20039d98 	.word	0x20039d98

080070a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070a8:	f7ff ffee 	bl	8007088 <HAL_GetTick>
 80070ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d005      	beq.n	80070c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <HAL_Delay+0x40>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070c6:	bf00      	nop
 80070c8:	f7ff ffde 	bl	8007088 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d8f7      	bhi.n	80070c8 <HAL_Delay+0x28>
  {
  }
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000008 	.word	0x20000008

080070e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e033      	b.n	8007162 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fd fe26 	bl	8004d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	d118      	bne.n	8007154 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800712a:	f023 0302 	bic.w	r3, r3, #2
 800712e:	f043 0202 	orr.w	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa5a 	bl	80075f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	f043 0201 	orr.w	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	641a      	str	r2, [r3, #64]	; 0x40
 8007152:	e001      	b.n	8007158 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_ADC_Start_DMA+0x1e>
 8007186:	2302      	movs	r3, #2
 8007188:	e0cc      	b.n	8007324 <HAL_ADC_Start_DMA+0x1b8>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b01      	cmp	r3, #1
 800719e:	d018      	beq.n	80071d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80071b0:	4b5e      	ldr	r3, [pc, #376]	; (800732c <HAL_ADC_Start_DMA+0x1c0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a5e      	ldr	r2, [pc, #376]	; (8007330 <HAL_ADC_Start_DMA+0x1c4>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	0c9a      	lsrs	r2, r3, #18
 80071bc:	4613      	mov	r3, r2
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80071c4:	e002      	b.n	80071cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f9      	bne.n	80071c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	f040 80a0 	bne.w	8007322 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800720c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800721c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007220:	d106      	bne.n	8007230 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	f023 0206 	bic.w	r2, r3, #6
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	645a      	str	r2, [r3, #68]	; 0x44
 800722e:	e002      	b.n	8007236 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <HAL_ADC_Start_DMA+0x1c8>)
 8007240:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	4a3c      	ldr	r2, [pc, #240]	; (8007338 <HAL_ADC_Start_DMA+0x1cc>)
 8007248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	4a3b      	ldr	r2, [pc, #236]	; (800733c <HAL_ADC_Start_DMA+0x1d0>)
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4a3a      	ldr	r2, [pc, #232]	; (8007340 <HAL_ADC_Start_DMA+0x1d4>)
 8007258:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007262:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007272:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007282:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	334c      	adds	r3, #76	; 0x4c
 800728e:	4619      	mov	r1, r3
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f000 fcea 	bl	8007c6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d12a      	bne.n	80072fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a26      	ldr	r2, [pc, #152]	; (8007344 <HAL_ADC_Start_DMA+0x1d8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d015      	beq.n	80072da <HAL_ADC_Start_DMA+0x16e>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a25      	ldr	r2, [pc, #148]	; (8007348 <HAL_ADC_Start_DMA+0x1dc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d105      	bne.n	80072c4 <HAL_ADC_Start_DMA+0x158>
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <HAL_ADC_Start_DMA+0x1c8>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <HAL_ADC_Start_DMA+0x1e0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d129      	bne.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
 80072ce:	4b19      	ldr	r3, [pc, #100]	; (8007334 <HAL_ADC_Start_DMA+0x1c8>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d823      	bhi.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11c      	bne.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072f6:	609a      	str	r2, [r3, #8]
 80072f8:	e013      	b.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a11      	ldr	r2, [pc, #68]	; (8007344 <HAL_ADC_Start_DMA+0x1d8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10e      	bne.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d107      	bne.n	8007322 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007320:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000000 	.word	0x20000000
 8007330:	431bde83 	.word	0x431bde83
 8007334:	40012300 	.word	0x40012300
 8007338:	080077e9 	.word	0x080077e9
 800733c:	080078a3 	.word	0x080078a3
 8007340:	080078bf 	.word	0x080078bf
 8007344:	40012000 	.word	0x40012000
 8007348:	40012100 	.word	0x40012100
 800734c:	40012200 	.word	0x40012200

08007350 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_ADC_ConfigChannel+0x1c>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e113      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x244>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b09      	cmp	r3, #9
 80073b6:	d925      	bls.n	8007404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68d9      	ldr	r1, [r3, #12]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	3b1e      	subs	r3, #30
 80073ce:	2207      	movs	r2, #7
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	43da      	mvns	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	400a      	ands	r2, r1
 80073dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68d9      	ldr	r1, [r3, #12]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	4618      	mov	r0, r3
 80073f0:	4603      	mov	r3, r0
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4403      	add	r3, r0
 80073f6:	3b1e      	subs	r3, #30
 80073f8:	409a      	lsls	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	e022      	b.n	800744a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6919      	ldr	r1, [r3, #16]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	461a      	mov	r2, r3
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	2207      	movs	r2, #7
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	43da      	mvns	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	400a      	ands	r2, r1
 8007426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6919      	ldr	r1, [r3, #16]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	4618      	mov	r0, r3
 800743a:	4603      	mov	r3, r0
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4403      	add	r3, r0
 8007440:	409a      	lsls	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b06      	cmp	r3, #6
 8007450:	d824      	bhi.n	800749c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	3b05      	subs	r3, #5
 8007464:	221f      	movs	r2, #31
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43da      	mvns	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	400a      	ands	r2, r1
 8007472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	4618      	mov	r0, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	3b05      	subs	r3, #5
 800748e:	fa00 f203 	lsl.w	r2, r0, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	635a      	str	r2, [r3, #52]	; 0x34
 800749a:	e04c      	b.n	8007536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b0c      	cmp	r3, #12
 80074a2:	d824      	bhi.n	80074ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	3b23      	subs	r3, #35	; 0x23
 80074b6:	221f      	movs	r2, #31
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43da      	mvns	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	400a      	ands	r2, r1
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4618      	mov	r0, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	3b23      	subs	r3, #35	; 0x23
 80074e0:	fa00 f203 	lsl.w	r2, r0, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
 80074ec:	e023      	b.n	8007536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	3b41      	subs	r3, #65	; 0x41
 8007500:	221f      	movs	r2, #31
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43da      	mvns	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	400a      	ands	r2, r1
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	4618      	mov	r0, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	3b41      	subs	r3, #65	; 0x41
 800752a:	fa00 f203 	lsl.w	r2, r0, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007536:	4b29      	ldr	r3, [pc, #164]	; (80075dc <HAL_ADC_ConfigChannel+0x250>)
 8007538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a28      	ldr	r2, [pc, #160]	; (80075e0 <HAL_ADC_ConfigChannel+0x254>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d10f      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x1d8>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b12      	cmp	r3, #18
 800754a:	d10b      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <HAL_ADC_ConfigChannel+0x254>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d12b      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0x23a>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <HAL_ADC_ConfigChannel+0x258>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <HAL_ADC_ConfigChannel+0x1f4>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b11      	cmp	r3, #17
 800757e:	d122      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <HAL_ADC_ConfigChannel+0x258>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d111      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <HAL_ADC_ConfigChannel+0x25c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a11      	ldr	r2, [pc, #68]	; (80075ec <HAL_ADC_ConfigChannel+0x260>)
 80075a8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ac:	0c9a      	lsrs	r2, r3, #18
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80075b8:	e002      	b.n	80075c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3b01      	subs	r3, #1
 80075be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f9      	bne.n	80075ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	40012300 	.word	0x40012300
 80075e0:	40012000 	.word	0x40012000
 80075e4:	10000012 	.word	0x10000012
 80075e8:	20000000 	.word	0x20000000
 80075ec:	431bde83 	.word	0x431bde83

080075f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075f8:	4b79      	ldr	r3, [pc, #484]	; (80077e0 <ADC_Init+0x1f0>)
 80075fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	021a      	lsls	r2, r3, #8
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6859      	ldr	r1, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800766a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6899      	ldr	r1, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	4a58      	ldr	r2, [pc, #352]	; (80077e4 <ADC_Init+0x1f4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6899      	ldr	r1, [r3, #8]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	609a      	str	r2, [r3, #8]
 80076cc:	e00f      	b.n	80076ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0202 	bic.w	r2, r2, #2
 80076fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6899      	ldr	r1, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7e1b      	ldrb	r3, [r3, #24]
 8007708:	005a      	lsls	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800773a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6859      	ldr	r1, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	3b01      	subs	r3, #1
 8007748:	035a      	lsls	r2, r3, #13
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e007      	b.n	8007764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	3b01      	subs	r3, #1
 8007780:	051a      	lsls	r2, r3, #20
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6899      	ldr	r1, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077a6:	025a      	lsls	r2, r3, #9
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6899      	ldr	r1, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	029a      	lsls	r2, r3, #10
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	609a      	str	r2, [r3, #8]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	40012300 	.word	0x40012300
 80077e4:	0f000001 	.word	0x0f000001

080077e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d13c      	bne.n	800787c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d12b      	bne.n	8007874 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d127      	bne.n	8007874 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800783c:	2b00      	cmp	r3, #0
 800783e:	d119      	bne.n	8007874 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0220 	bic.w	r2, r2, #32
 800784e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	f043 0201 	orr.w	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fd6b 	bl	8007350 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800787a:	e00e      	b.n	800789a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff fd75 	bl	8007378 <HAL_ADC_ErrorCallback>
}
 800788e:	e004      	b.n	800789a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7ff fd57 	bl	8007364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2240      	movs	r2, #64	; 0x40
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	f043 0204 	orr.w	r2, r3, #4
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fd4a 	bl	8007378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <__NVIC_SetPriorityGrouping>:
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <__NVIC_SetPriorityGrouping+0x44>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007908:	4013      	ands	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800791e:	4a04      	ldr	r2, [pc, #16]	; (8007930 <__NVIC_SetPriorityGrouping+0x44>)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	60d3      	str	r3, [r2, #12]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	e000ed00 	.word	0xe000ed00

08007934 <__NVIC_GetPriorityGrouping>:
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <__NVIC_GetPriorityGrouping+0x18>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	f003 0307 	and.w	r3, r3, #7
}
 8007942:	4618      	mov	r0, r3
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	e000ed00 	.word	0xe000ed00

08007950 <__NVIC_EnableIRQ>:
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	2b00      	cmp	r3, #0
 8007960:	db0b      	blt.n	800797a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f003 021f 	and.w	r2, r3, #31
 8007968:	4907      	ldr	r1, [pc, #28]	; (8007988 <__NVIC_EnableIRQ+0x38>)
 800796a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	2001      	movs	r0, #1
 8007972:	fa00 f202 	lsl.w	r2, r0, r2
 8007976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	e000e100 	.word	0xe000e100

0800798c <__NVIC_SetPriority>:
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799c:	2b00      	cmp	r3, #0
 800799e:	db0a      	blt.n	80079b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	490c      	ldr	r1, [pc, #48]	; (80079d8 <__NVIC_SetPriority+0x4c>)
 80079a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079aa:	0112      	lsls	r2, r2, #4
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	440b      	add	r3, r1
 80079b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079b4:	e00a      	b.n	80079cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	4908      	ldr	r1, [pc, #32]	; (80079dc <__NVIC_SetPriority+0x50>)
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3b04      	subs	r3, #4
 80079c4:	0112      	lsls	r2, r2, #4
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	440b      	add	r3, r1
 80079ca:	761a      	strb	r2, [r3, #24]
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	e000e100 	.word	0xe000e100
 80079dc:	e000ed00 	.word	0xe000ed00

080079e0 <NVIC_EncodePriority>:
{
 80079e0:	b480      	push	{r7}
 80079e2:	b089      	sub	sp, #36	; 0x24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f1c3 0307 	rsb	r3, r3, #7
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	bf28      	it	cs
 80079fe:	2304      	movcs	r3, #4
 8007a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d902      	bls.n	8007a10 <NVIC_EncodePriority+0x30>
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3b03      	subs	r3, #3
 8007a0e:	e000      	b.n	8007a12 <NVIC_EncodePriority+0x32>
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	401a      	ands	r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a28:	f04f 31ff 	mov.w	r1, #4294967295
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a32:	43d9      	mvns	r1, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a38:	4313      	orrs	r3, r2
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3724      	adds	r7, #36	; 0x24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <SysTick_Config>:
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a58:	d301      	bcc.n	8007a5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e00f      	b.n	8007a7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	; (8007a88 <SysTick_Config+0x40>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a66:	210f      	movs	r1, #15
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	f7ff ff8e 	bl	800798c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <SysTick_Config+0x40>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a76:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <SysTick_Config+0x40>)
 8007a78:	2207      	movs	r2, #7
 8007a7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000e010 	.word	0xe000e010

08007a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ff29 	bl	80078ec <__NVIC_SetPriorityGrouping>
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	607a      	str	r2, [r7, #4]
 8007aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ab4:	f7ff ff3e 	bl	8007934 <__NVIC_GetPriorityGrouping>
 8007ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	6978      	ldr	r0, [r7, #20]
 8007ac0:	f7ff ff8e 	bl	80079e0 <NVIC_EncodePriority>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff5d 	bl	800798c <__NVIC_SetPriority>
}
 8007ad2:	bf00      	nop
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ff31 	bl	8007950 <__NVIC_EnableIRQ>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ffa2 	bl	8007a48 <SysTick_Config>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b1c:	f7ff fab4 	bl	8007088 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e099      	b.n	8007c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b4c:	e00f      	b.n	8007b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b4e:	f7ff fa9b 	bl	8007088 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d908      	bls.n	8007b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2203      	movs	r2, #3
 8007b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e078      	b.n	8007c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e8      	bne.n	8007b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <HAL_DMA_Init+0x158>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d107      	bne.n	8007bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d117      	bne.n	8007c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa9d 	bl	8008154 <DMA_CheckFifoParam>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d008      	beq.n	8007c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2240      	movs	r2, #64	; 0x40
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e016      	b.n	8007c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa54 	bl	80080e8 <DMA_CalcBaseAndBitshift>
 8007c40:	4603      	mov	r3, r0
 8007c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	223f      	movs	r2, #63	; 0x3f
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	f010803f 	.word	0xf010803f

08007c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_DMA_Start_IT+0x26>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e040      	b.n	8007d14 <HAL_DMA_Start_IT+0xa8>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d12f      	bne.n	8007d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f9e6 	bl	800808c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc4:	223f      	movs	r2, #63	; 0x3f
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0216 	orr.w	r2, r2, #22
 8007cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0208 	orr.w	r2, r2, #8
 8007cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e005      	b.n	8007d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d004      	beq.n	8007d3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e00c      	b.n	8007d54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0201 	bic.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d6c:	4b92      	ldr	r3, [pc, #584]	; (8007fb8 <HAL_DMA_IRQHandler+0x258>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a92      	ldr	r2, [pc, #584]	; (8007fbc <HAL_DMA_IRQHandler+0x25c>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	0a9b      	lsrs	r3, r3, #10
 8007d78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01a      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0204 	bic.w	r2, r2, #4
 8007db2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db8:	2208      	movs	r2, #8
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc4:	f043 0201 	orr.w	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d012      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dee:	2201      	movs	r2, #1
 8007df0:	409a      	lsls	r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f043 0202 	orr.w	r2, r3, #2
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e06:	2204      	movs	r2, #4
 8007e08:	409a      	lsls	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d012      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e24:	2204      	movs	r2, #4
 8007e26:	409a      	lsls	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3c:	2210      	movs	r2, #16
 8007e3e:	409a      	lsls	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d043      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d03c      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d018      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d108      	bne.n	8007e90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d024      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	e01f      	b.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01b      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
 8007ea0:	e016      	b.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0208 	bic.w	r2, r2, #8
 8007ebe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	409a      	lsls	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 808e 	beq.w	8007ffe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8086 	beq.w	8007ffe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	409a      	lsls	r2, r3
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b05      	cmp	r3, #5
 8007f08:	d136      	bne.n	8007f78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0216 	bic.w	r2, r2, #22
 8007f18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <HAL_DMA_IRQHandler+0x1da>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0208 	bic.w	r2, r2, #8
 8007f48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4e:	223f      	movs	r2, #63	; 0x3f
 8007f50:	409a      	lsls	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d07d      	beq.n	800806a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
        }
        return;
 8007f76:	e078      	b.n	800806a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01c      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d108      	bne.n	8007fa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d030      	beq.n	8007ffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	e02b      	b.n	8007ffe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d027      	beq.n	8007ffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	e022      	b.n	8007ffe <HAL_DMA_IRQHandler+0x29e>
 8007fb8:	20000000 	.word	0x20000000
 8007fbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0210 	bic.w	r2, r2, #16
 8007fdc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	2b00      	cmp	r3, #0
 8008004:	d032      	beq.n	800806c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d022      	beq.n	8008058 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2205      	movs	r2, #5
 8008016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0201 	bic.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3301      	adds	r3, #1
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	d307      	bcc.n	8008046 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f2      	bne.n	800802a <HAL_DMA_IRQHandler+0x2ca>
 8008044:	e000      	b.n	8008048 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008046:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
 8008068:	e000      	b.n	800806c <HAL_DMA_IRQHandler+0x30c>
        return;
 800806a:	bf00      	nop
    }
  }
}
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop

08008074 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d108      	bne.n	80080cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80080ca:	e007      	b.n	80080dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	60da      	str	r2, [r3, #12]
}
 80080dc:	bf00      	nop
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	3b10      	subs	r3, #16
 80080f8:	4a14      	ldr	r2, [pc, #80]	; (800814c <DMA_CalcBaseAndBitshift+0x64>)
 80080fa:	fba2 2303 	umull	r2, r3, r2, r3
 80080fe:	091b      	lsrs	r3, r3, #4
 8008100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <DMA_CalcBaseAndBitshift+0x68>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b03      	cmp	r3, #3
 8008114:	d909      	bls.n	800812a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	1d1a      	adds	r2, r3, #4
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	659a      	str	r2, [r3, #88]	; 0x58
 8008128:	e007      	b.n	800813a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	aaaaaaab 	.word	0xaaaaaaab
 8008150:	08017f50 	.word	0x08017f50

08008154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d11f      	bne.n	80081ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b03      	cmp	r3, #3
 8008172:	d855      	bhi.n	8008220 <DMA_CheckFifoParam+0xcc>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <DMA_CheckFifoParam+0x28>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	0800818d 	.word	0x0800818d
 8008180:	0800819f 	.word	0x0800819f
 8008184:	0800818d 	.word	0x0800818d
 8008188:	08008221 	.word	0x08008221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d045      	beq.n	8008224 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800819c:	e042      	b.n	8008224 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081a6:	d13f      	bne.n	8008228 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ac:	e03c      	b.n	8008228 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b6:	d121      	bne.n	80081fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d836      	bhi.n	800822c <DMA_CheckFifoParam+0xd8>
 80081be:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <DMA_CheckFifoParam+0x70>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081db 	.word	0x080081db
 80081cc:	080081d5 	.word	0x080081d5
 80081d0:	080081ed 	.word	0x080081ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
      break;
 80081d8:	e02f      	b.n	800823a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d024      	beq.n	8008230 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ea:	e021      	b.n	8008230 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081f4:	d11e      	bne.n	8008234 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80081fa:	e01b      	b.n	8008234 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d902      	bls.n	8008208 <DMA_CheckFifoParam+0xb4>
 8008202:	2b03      	cmp	r3, #3
 8008204:	d003      	beq.n	800820e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008206:	e018      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
      break;
 800820c:	e015      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]
      break;
 800821e:	e00b      	b.n	8008238 <DMA_CheckFifoParam+0xe4>
      break;
 8008220:	bf00      	nop
 8008222:	e00a      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;
 8008224:	bf00      	nop
 8008226:	e008      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;
 8008228:	bf00      	nop
 800822a:	e006      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;
 800822c:	bf00      	nop
 800822e:	e004      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;
 8008230:	bf00      	nop
 8008232:	e002      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;   
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <DMA_CheckFifoParam+0xe6>
      break;
 8008238:	bf00      	nop
    }
  } 
  
  return status; 
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008248:	b480      	push	{r7}
 800824a:	b089      	sub	sp, #36	; 0x24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008252:	2300      	movs	r3, #0
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800825a:	2300      	movs	r3, #0
 800825c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800825e:	2300      	movs	r3, #0
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	e177      	b.n	8008554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008264:	2201      	movs	r2, #1
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4013      	ands	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	429a      	cmp	r2, r3
 800827e:	f040 8166 	bne.w	800854e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d00b      	beq.n	80082a2 <HAL_GPIO_Init+0x5a>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d007      	beq.n	80082a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008296:	2b11      	cmp	r3, #17
 8008298:	d003      	beq.n	80082a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b12      	cmp	r3, #18
 80082a0:	d130      	bne.n	8008304 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	2203      	movs	r2, #3
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082d8:	2201      	movs	r2, #1
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	4013      	ands	r3, r2
 80082e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	f003 0201 	and.w	r2, r3, #1
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	2203      	movs	r2, #3
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	43db      	mvns	r3, r3
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	4013      	ands	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	4313      	orrs	r3, r2
 800832c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d003      	beq.n	8008344 <HAL_GPIO_Init+0xfc>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b12      	cmp	r3, #18
 8008342:	d123      	bne.n	800838c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	08da      	lsrs	r2, r3, #3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3208      	adds	r2, #8
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	220f      	movs	r2, #15
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4013      	ands	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	4313      	orrs	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	08da      	lsrs	r2, r3, #3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3208      	adds	r2, #8
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	2203      	movs	r2, #3
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	4013      	ands	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f003 0203 	and.w	r2, r3, #3
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80c0 	beq.w	800854e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	4b65      	ldr	r3, [pc, #404]	; (8008568 <HAL_GPIO_Init+0x320>)
 80083d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d6:	4a64      	ldr	r2, [pc, #400]	; (8008568 <HAL_GPIO_Init+0x320>)
 80083d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083dc:	6453      	str	r3, [r2, #68]	; 0x44
 80083de:	4b62      	ldr	r3, [pc, #392]	; (8008568 <HAL_GPIO_Init+0x320>)
 80083e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ea:	4a60      	ldr	r2, [pc, #384]	; (800856c <HAL_GPIO_Init+0x324>)
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	3302      	adds	r3, #2
 80083f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	220f      	movs	r2, #15
 8008402:	fa02 f303 	lsl.w	r3, r2, r3
 8008406:	43db      	mvns	r3, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4013      	ands	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a57      	ldr	r2, [pc, #348]	; (8008570 <HAL_GPIO_Init+0x328>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d037      	beq.n	8008486 <HAL_GPIO_Init+0x23e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a56      	ldr	r2, [pc, #344]	; (8008574 <HAL_GPIO_Init+0x32c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d031      	beq.n	8008482 <HAL_GPIO_Init+0x23a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a55      	ldr	r2, [pc, #340]	; (8008578 <HAL_GPIO_Init+0x330>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d02b      	beq.n	800847e <HAL_GPIO_Init+0x236>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a54      	ldr	r2, [pc, #336]	; (800857c <HAL_GPIO_Init+0x334>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d025      	beq.n	800847a <HAL_GPIO_Init+0x232>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a53      	ldr	r2, [pc, #332]	; (8008580 <HAL_GPIO_Init+0x338>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01f      	beq.n	8008476 <HAL_GPIO_Init+0x22e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a52      	ldr	r2, [pc, #328]	; (8008584 <HAL_GPIO_Init+0x33c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d019      	beq.n	8008472 <HAL_GPIO_Init+0x22a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a51      	ldr	r2, [pc, #324]	; (8008588 <HAL_GPIO_Init+0x340>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <HAL_GPIO_Init+0x226>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a50      	ldr	r2, [pc, #320]	; (800858c <HAL_GPIO_Init+0x344>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00d      	beq.n	800846a <HAL_GPIO_Init+0x222>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a4f      	ldr	r2, [pc, #316]	; (8008590 <HAL_GPIO_Init+0x348>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d007      	beq.n	8008466 <HAL_GPIO_Init+0x21e>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a4e      	ldr	r2, [pc, #312]	; (8008594 <HAL_GPIO_Init+0x34c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <HAL_GPIO_Init+0x21a>
 800845e:	2309      	movs	r3, #9
 8008460:	e012      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008462:	230a      	movs	r3, #10
 8008464:	e010      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008466:	2308      	movs	r3, #8
 8008468:	e00e      	b.n	8008488 <HAL_GPIO_Init+0x240>
 800846a:	2307      	movs	r3, #7
 800846c:	e00c      	b.n	8008488 <HAL_GPIO_Init+0x240>
 800846e:	2306      	movs	r3, #6
 8008470:	e00a      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008472:	2305      	movs	r3, #5
 8008474:	e008      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008476:	2304      	movs	r3, #4
 8008478:	e006      	b.n	8008488 <HAL_GPIO_Init+0x240>
 800847a:	2303      	movs	r3, #3
 800847c:	e004      	b.n	8008488 <HAL_GPIO_Init+0x240>
 800847e:	2302      	movs	r3, #2
 8008480:	e002      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <HAL_GPIO_Init+0x240>
 8008486:	2300      	movs	r3, #0
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	f002 0203 	and.w	r2, r2, #3
 800848e:	0092      	lsls	r2, r2, #2
 8008490:	4093      	lsls	r3, r2
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	4313      	orrs	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008498:	4934      	ldr	r1, [pc, #208]	; (800856c <HAL_GPIO_Init+0x324>)
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	089b      	lsrs	r3, r3, #2
 800849e:	3302      	adds	r3, #2
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084a6:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <HAL_GPIO_Init+0x350>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	43db      	mvns	r3, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	4013      	ands	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084ca:	4a33      	ldr	r2, [pc, #204]	; (8008598 <HAL_GPIO_Init+0x350>)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084d0:	4b31      	ldr	r3, [pc, #196]	; (8008598 <HAL_GPIO_Init+0x350>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084f4:	4a28      	ldr	r2, [pc, #160]	; (8008598 <HAL_GPIO_Init+0x350>)
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084fa:	4b27      	ldr	r3, [pc, #156]	; (8008598 <HAL_GPIO_Init+0x350>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	43db      	mvns	r3, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4013      	ands	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800851e:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <HAL_GPIO_Init+0x350>)
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008524:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <HAL_GPIO_Init+0x350>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	43db      	mvns	r3, r3
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	4013      	ands	r3, r2
 8008532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008548:	4a13      	ldr	r2, [pc, #76]	; (8008598 <HAL_GPIO_Init+0x350>)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	3301      	adds	r3, #1
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	f67f ae84 	bls.w	8008264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800855c:	bf00      	nop
 800855e:	3724      	adds	r7, #36	; 0x24
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40023800 	.word	0x40023800
 800856c:	40013800 	.word	0x40013800
 8008570:	40020000 	.word	0x40020000
 8008574:	40020400 	.word	0x40020400
 8008578:	40020800 	.word	0x40020800
 800857c:	40020c00 	.word	0x40020c00
 8008580:	40021000 	.word	0x40021000
 8008584:	40021400 	.word	0x40021400
 8008588:	40021800 	.word	0x40021800
 800858c:	40021c00 	.word	0x40021c00
 8008590:	40022000 	.word	0x40022000
 8008594:	40022400 	.word	0x40022400
 8008598:	40013c00 	.word	0x40013c00

0800859c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	887b      	ldrh	r3, [r7, #2]
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085b4:	2301      	movs	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
 80085b8:	e001      	b.n	80085be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
 80085d8:	4613      	mov	r3, r2
 80085da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085dc:	787b      	ldrb	r3, [r7, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085e2:	887a      	ldrh	r2, [r7, #2]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085e8:	e003      	b.n	80085f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	041a      	lsls	r2, r3, #16
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	619a      	str	r2, [r3, #24]
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800860a:	4b08      	ldr	r3, [pc, #32]	; (800862c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	4013      	ands	r3, r2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d006      	beq.n	8008624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008616:	4a05      	ldr	r2, [pc, #20]	; (800862c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800861c:	88fb      	ldrh	r3, [r7, #6]
 800861e:	4618      	mov	r0, r3
 8008620:	f7fb fbcc 	bl	8003dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40013c00 	.word	0x40013c00

08008630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e11f      	b.n	8008882 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fc fc2e 	bl	8004eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2224      	movs	r2, #36	; 0x24
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008694:	f001 f96e 	bl	8009974 <HAL_RCC_GetPCLK1Freq>
 8008698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	4a7b      	ldr	r2, [pc, #492]	; (800888c <HAL_I2C_Init+0x25c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d807      	bhi.n	80086b4 <HAL_I2C_Init+0x84>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a7a      	ldr	r2, [pc, #488]	; (8008890 <HAL_I2C_Init+0x260>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	bf94      	ite	ls
 80086ac:	2301      	movls	r3, #1
 80086ae:	2300      	movhi	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	e006      	b.n	80086c2 <HAL_I2C_Init+0x92>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a77      	ldr	r2, [pc, #476]	; (8008894 <HAL_I2C_Init+0x264>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bf94      	ite	ls
 80086bc:	2301      	movls	r3, #1
 80086be:	2300      	movhi	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e0db      	b.n	8008882 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a72      	ldr	r2, [pc, #456]	; (8008898 <HAL_I2C_Init+0x268>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	0c9b      	lsrs	r3, r3, #18
 80086d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a64      	ldr	r2, [pc, #400]	; (800888c <HAL_I2C_Init+0x25c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d802      	bhi.n	8008704 <HAL_I2C_Init+0xd4>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	3301      	adds	r3, #1
 8008702:	e009      	b.n	8008718 <HAL_I2C_Init+0xe8>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	4a63      	ldr	r2, [pc, #396]	; (800889c <HAL_I2C_Init+0x26c>)
 8008710:	fba2 2303 	umull	r2, r3, r2, r3
 8008714:	099b      	lsrs	r3, r3, #6
 8008716:	3301      	adds	r3, #1
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	430b      	orrs	r3, r1
 800871e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800872a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	4956      	ldr	r1, [pc, #344]	; (800888c <HAL_I2C_Init+0x25c>)
 8008734:	428b      	cmp	r3, r1
 8008736:	d80d      	bhi.n	8008754 <HAL_I2C_Init+0x124>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	1e59      	subs	r1, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	fbb1 f3f3 	udiv	r3, r1, r3
 8008746:	3301      	adds	r3, #1
 8008748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800874c:	2b04      	cmp	r3, #4
 800874e:	bf38      	it	cc
 8008750:	2304      	movcc	r3, #4
 8008752:	e04f      	b.n	80087f4 <HAL_I2C_Init+0x1c4>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d111      	bne.n	8008780 <HAL_I2C_Init+0x150>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	1e58      	subs	r0, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	440b      	add	r3, r1
 800876a:	fbb0 f3f3 	udiv	r3, r0, r3
 800876e:	3301      	adds	r3, #1
 8008770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008774:	2b00      	cmp	r3, #0
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e012      	b.n	80087a6 <HAL_I2C_Init+0x176>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1e58      	subs	r0, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6859      	ldr	r1, [r3, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	0099      	lsls	r1, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	fbb0 f3f3 	udiv	r3, r0, r3
 8008796:	3301      	adds	r3, #1
 8008798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800879c:	2b00      	cmp	r3, #0
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_I2C_Init+0x17e>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e022      	b.n	80087f4 <HAL_I2C_Init+0x1c4>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10e      	bne.n	80087d4 <HAL_I2C_Init+0x1a4>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1e58      	subs	r0, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6859      	ldr	r1, [r3, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	440b      	add	r3, r1
 80087c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087c8:	3301      	adds	r3, #1
 80087ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	e00f      	b.n	80087f4 <HAL_I2C_Init+0x1c4>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	1e58      	subs	r0, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	0099      	lsls	r1, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087ea:	3301      	adds	r3, #1
 80087ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	6809      	ldr	r1, [r1, #0]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6911      	ldr	r1, [r2, #16]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	68d2      	ldr	r2, [r2, #12]
 800882e:	4311      	orrs	r1, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6812      	ldr	r2, [r2, #0]
 8008834:	430b      	orrs	r3, r1
 8008836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695a      	ldr	r2, [r3, #20]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0201 	orr.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	000186a0 	.word	0x000186a0
 8008890:	001e847f 	.word	0x001e847f
 8008894:	003d08ff 	.word	0x003d08ff
 8008898:	431bde83 	.word	0x431bde83
 800889c:	10624dd3 	.word	0x10624dd3

080088a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	461a      	mov	r2, r3
 80088ac:	460b      	mov	r3, r1
 80088ae:	817b      	strh	r3, [r7, #10]
 80088b0:	4613      	mov	r3, r2
 80088b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088b4:	f7fe fbe8 	bl	8007088 <HAL_GetTick>
 80088b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	f040 80e0 	bne.w	8008a88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2319      	movs	r3, #25
 80088ce:	2201      	movs	r2, #1
 80088d0:	4970      	ldr	r1, [pc, #448]	; (8008a94 <HAL_I2C_Master_Transmit+0x1f4>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fc58 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80088de:	2302      	movs	r3, #2
 80088e0:	e0d3      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_I2C_Master_Transmit+0x50>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e0cc      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b01      	cmp	r3, #1
 8008904:	d007      	beq.n	8008916 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008924:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2221      	movs	r2, #33	; 0x21
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2210      	movs	r2, #16
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	893a      	ldrh	r2, [r7, #8]
 8008946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	4a50      	ldr	r2, [pc, #320]	; (8008a98 <HAL_I2C_Master_Transmit+0x1f8>)
 8008956:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008958:	8979      	ldrh	r1, [r7, #10]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fac2 	bl	8008ee8 <I2C_MasterRequestWrite>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e08d      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008984:	e066      	b.n	8008a54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	6a39      	ldr	r1, [r7, #32]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fcd2 	bl	8009334 <I2C_WaitOnTXEFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00d      	beq.n	80089b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	2b04      	cmp	r3, #4
 800899c:	d107      	bne.n	80089ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e06b      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d11b      	bne.n	8008a28 <HAL_I2C_Master_Transmit+0x188>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d017      	beq.n	8008a28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	6a39      	ldr	r1, [r7, #32]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fcc2 	bl	80093b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00d      	beq.n	8008a54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d107      	bne.n	8008a50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e01a      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d194      	bne.n	8008986 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e000      	b.n	8008a8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
  }
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	00100002 	.word	0x00100002
 8008a98:	ffff0000 	.word	0xffff0000

08008a9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08c      	sub	sp, #48	; 0x30
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	817b      	strh	r3, [r7, #10]
 8008aac:	4613      	mov	r3, r2
 8008aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ab0:	f7fe faea 	bl	8007088 <HAL_GetTick>
 8008ab4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	f040 820b 	bne.w	8008eda <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2319      	movs	r3, #25
 8008aca:	2201      	movs	r2, #1
 8008acc:	497c      	ldr	r1, [pc, #496]	; (8008cc0 <HAL_I2C_Master_Receive+0x224>)
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fb5a 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
 8008adc:	e1fe      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_I2C_Master_Receive+0x50>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e1f7      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d007      	beq.n	8008b12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0201 	orr.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2222      	movs	r2, #34	; 0x22
 8008b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	893a      	ldrh	r2, [r7, #8]
 8008b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4a5c      	ldr	r2, [pc, #368]	; (8008cc4 <HAL_I2C_Master_Receive+0x228>)
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b54:	8979      	ldrh	r1, [r7, #10]
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fa46 	bl	8008fec <I2C_MasterRequestRead>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e1b8      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d113      	bne.n	8008b9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b72:	2300      	movs	r3, #0
 8008b74:	623b      	str	r3, [r7, #32]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	623b      	str	r3, [r7, #32]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	623b      	str	r3, [r7, #32]
 8008b86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e18c      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d11b      	bne.n	8008bda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e16c      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d11b      	bne.n	8008c1a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c02:	2300      	movs	r3, #0
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	e14c      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c40:	e138      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	f200 80f1 	bhi.w	8008e2e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d123      	bne.n	8008c9c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fbed 	bl	8009438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e139      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c9a:	e10b      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d14e      	bne.n	8008d42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	2200      	movs	r2, #0
 8008cac:	4906      	ldr	r1, [pc, #24]	; (8008cc8 <HAL_I2C_Master_Receive+0x22c>)
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fa6a 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e10e      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
 8008cbe:	bf00      	nop
 8008cc0:	00100002 	.word	0x00100002
 8008cc4:	ffff0000 	.word	0xffff0000
 8008cc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d40:	e0b8      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4966      	ldr	r1, [pc, #408]	; (8008ee4 <HAL_I2C_Master_Receive+0x448>)
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fa1b 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0bf      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	2200      	movs	r2, #0
 8008da6:	494f      	ldr	r1, [pc, #316]	; (8008ee4 <HAL_I2C_Master_Receive+0x448>)
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 f9ed 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e091      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	3b01      	subs	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e2c:	e042      	b.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fb00 	bl	8009438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e04c      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d118      	bne.n	8008eb4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f47f aec2 	bne.w	8008c42 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e000      	b.n	8008edc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008eda:	2302      	movs	r3, #2
  }
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	00010004 	.word	0x00010004

08008ee8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d006      	beq.n	8008f12 <I2C_MasterRequestWrite+0x2a>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d003      	beq.n	8008f12 <I2C_MasterRequestWrite+0x2a>
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f10:	d108      	bne.n	8008f24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e00b      	b.n	8008f3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	2b12      	cmp	r3, #18
 8008f2a:	d107      	bne.n	8008f3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f91d 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00d      	beq.n	8008f70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f62:	d103      	bne.n	8008f6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e035      	b.n	8008fdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f78:	d108      	bne.n	8008f8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f7a:	897b      	ldrh	r3, [r7, #10]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f88:	611a      	str	r2, [r3, #16]
 8008f8a:	e01b      	b.n	8008fc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f8c:	897b      	ldrh	r3, [r7, #10]
 8008f8e:	11db      	asrs	r3, r3, #7
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0306 	and.w	r3, r3, #6
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f063 030f 	orn	r3, r3, #15
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	490e      	ldr	r1, [pc, #56]	; (8008fe4 <I2C_MasterRequestWrite+0xfc>)
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f943 	bl	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e010      	b.n	8008fdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008fba:	897b      	ldrh	r3, [r7, #10]
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	4907      	ldr	r1, [pc, #28]	; (8008fe8 <I2C_MasterRequestWrite+0x100>)
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 f933 	bl	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	00010008 	.word	0x00010008
 8008fe8:	00010002 	.word	0x00010002

08008fec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009010:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b08      	cmp	r3, #8
 8009016:	d006      	beq.n	8009026 <I2C_MasterRequestRead+0x3a>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d003      	beq.n	8009026 <I2C_MasterRequestRead+0x3a>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009024:	d108      	bne.n	8009038 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e00b      	b.n	8009050 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	2b11      	cmp	r3, #17
 800903e:	d107      	bne.n	8009050 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800904e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f893 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00d      	beq.n	8009084 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009076:	d103      	bne.n	8009080 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800907e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e079      	b.n	8009178 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800908c:	d108      	bne.n	80090a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800908e:	897b      	ldrh	r3, [r7, #10]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	611a      	str	r2, [r3, #16]
 800909e:	e05f      	b.n	8009160 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090a0:	897b      	ldrh	r3, [r7, #10]
 80090a2:	11db      	asrs	r3, r3, #7
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f003 0306 	and.w	r3, r3, #6
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f063 030f 	orn	r3, r3, #15
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4930      	ldr	r1, [pc, #192]	; (8009180 <I2C_MasterRequestRead+0x194>)
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f8b9 	bl	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e054      	b.n	8009178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090ce:	897b      	ldrh	r3, [r7, #10]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4929      	ldr	r1, [pc, #164]	; (8009184 <I2C_MasterRequestRead+0x198>)
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f8a9 	bl	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e044      	b.n	8009178 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009112:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f831 	bl	8009188 <I2C_WaitOnFlagUntilTimeout>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00d      	beq.n	8009148 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913a:	d103      	bne.n	8009144 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009142:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e017      	b.n	8009178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009148:	897b      	ldrh	r3, [r7, #10]
 800914a:	11db      	asrs	r3, r3, #7
 800914c:	b2db      	uxtb	r3, r3
 800914e:	f003 0306 	and.w	r3, r3, #6
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f063 030e 	orn	r3, r3, #14
 8009158:	b2da      	uxtb	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4907      	ldr	r1, [pc, #28]	; (8009184 <I2C_MasterRequestRead+0x198>)
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 f865 	bl	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	00010008 	.word	0x00010008
 8009184:	00010002 	.word	0x00010002

08009188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009198:	e025      	b.n	80091e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d021      	beq.n	80091e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a2:	f7fd ff71 	bl	8007088 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d116      	bne.n	80091e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f043 0220 	orr.w	r2, r3, #32
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e023      	b.n	800922e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d10d      	bne.n	800920c <I2C_WaitOnFlagUntilTimeout+0x84>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	43da      	mvns	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4013      	ands	r3, r2
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	e00c      	b.n	8009226 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	43da      	mvns	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4013      	ands	r3, r2
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	bf0c      	ite	eq
 800921e:	2301      	moveq	r3, #1
 8009220:	2300      	movne	r3, #0
 8009222:	b2db      	uxtb	r3, r3
 8009224:	461a      	mov	r2, r3
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	429a      	cmp	r2, r3
 800922a:	d0b6      	beq.n	800919a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009244:	e051      	b.n	80092ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009254:	d123      	bne.n	800929e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009264:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800926e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f043 0204 	orr.w	r2, r3, #4
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e046      	b.n	800932c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a4:	d021      	beq.n	80092ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a6:	f7fd feef 	bl	8007088 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d116      	bne.n	80092ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	f043 0220 	orr.w	r2, r3, #32
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e020      	b.n	800932c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d10c      	bne.n	800930e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	43da      	mvns	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4013      	ands	r3, r2
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	bf14      	ite	ne
 8009306:	2301      	movne	r3, #1
 8009308:	2300      	moveq	r3, #0
 800930a:	b2db      	uxtb	r3, r3
 800930c:	e00b      	b.n	8009326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	43da      	mvns	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	4013      	ands	r3, r2
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	bf14      	ite	ne
 8009320:	2301      	movne	r3, #1
 8009322:	2300      	moveq	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d18d      	bne.n	8009246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009340:	e02d      	b.n	800939e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f8ce 	bl	80094e4 <I2C_IsAcknowledgeFailed>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e02d      	b.n	80093ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009358:	d021      	beq.n	800939e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935a:	f7fd fe95 	bl	8007088 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	d302      	bcc.n	8009370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d116      	bne.n	800939e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	f043 0220 	orr.w	r2, r3, #32
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e007      	b.n	80093ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a8:	2b80      	cmp	r3, #128	; 0x80
 80093aa:	d1ca      	bne.n	8009342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093c2:	e02d      	b.n	8009420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f88d 	bl	80094e4 <I2C_IsAcknowledgeFailed>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e02d      	b.n	8009430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d021      	beq.n	8009420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093dc:	f7fd fe54 	bl	8007088 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d116      	bne.n	8009420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e007      	b.n	8009430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b04      	cmp	r3, #4
 800942c:	d1ca      	bne.n	80093c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009444:	e042      	b.n	80094cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b10      	cmp	r3, #16
 8009452:	d119      	bne.n	8009488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0210 	mvn.w	r2, #16
 800945c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2220      	movs	r2, #32
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e029      	b.n	80094dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009488:	f7fd fdfe 	bl	8007088 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	429a      	cmp	r2, r3
 8009496:	d302      	bcc.n	800949e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d116      	bne.n	80094cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b8:	f043 0220 	orr.w	r2, r3, #32
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e007      	b.n	80094dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d6:	2b40      	cmp	r3, #64	; 0x40
 80094d8:	d1b5      	bne.n	8009446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094fa:	d11b      	bne.n	8009534 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009504:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	f043 0204 	orr.w	r2, r3, #4
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800954e:	2300      	movs	r3, #0
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	4a1f      	ldr	r2, [pc, #124]	; (80095d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800955c:	6413      	str	r3, [r2, #64]	; 0x40
 800955e:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800956a:	4b1b      	ldr	r3, [pc, #108]	; (80095d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800956c:	2201      	movs	r2, #1
 800956e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009570:	f7fd fd8a 	bl	8007088 <HAL_GetTick>
 8009574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009576:	e009      	b.n	800958c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009578:	f7fd fd86 	bl	8007088 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009586:	d901      	bls.n	800958c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e01f      	b.n	80095cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800958c:	4b13      	ldr	r3, [pc, #76]	; (80095dc <HAL_PWREx_EnableOverDrive+0x98>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009598:	d1ee      	bne.n	8009578 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800959c:	2201      	movs	r2, #1
 800959e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095a0:	f7fd fd72 	bl	8007088 <HAL_GetTick>
 80095a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095a6:	e009      	b.n	80095bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095a8:	f7fd fd6e 	bl	8007088 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b6:	d901      	bls.n	80095bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e007      	b.n	80095cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_PWREx_EnableOverDrive+0x98>)
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c8:	d1ee      	bne.n	80095a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	40023800 	.word	0x40023800
 80095d8:	420e0040 	.word	0x420e0040
 80095dc:	40007000 	.word	0x40007000
 80095e0:	420e0044 	.word	0x420e0044

080095e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0cc      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095f8:	4b68      	ldr	r3, [pc, #416]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d90c      	bls.n	8009620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009606:	4b65      	ldr	r3, [pc, #404]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800960e:	4b63      	ldr	r3, [pc, #396]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d001      	beq.n	8009620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e0b8      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d020      	beq.n	800966e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009638:	4b59      	ldr	r3, [pc, #356]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	4a58      	ldr	r2, [pc, #352]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009650:	4b53      	ldr	r3, [pc, #332]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	4a52      	ldr	r2, [pc, #328]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800965a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800965c:	4b50      	ldr	r3, [pc, #320]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	494d      	ldr	r1, [pc, #308]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	4313      	orrs	r3, r2
 800966c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d044      	beq.n	8009704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d107      	bne.n	8009692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009682:	4b47      	ldr	r3, [pc, #284]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d119      	bne.n	80096c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e07f      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d003      	beq.n	80096a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d107      	bne.n	80096b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a2:	4b3f      	ldr	r3, [pc, #252]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e06f      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096b2:	4b3b      	ldr	r3, [pc, #236]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e067      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096c2:	4b37      	ldr	r3, [pc, #220]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f023 0203 	bic.w	r2, r3, #3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4934      	ldr	r1, [pc, #208]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096d4:	f7fd fcd8 	bl	8007088 <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096da:	e00a      	b.n	80096f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096dc:	f7fd fcd4 	bl	8007088 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d901      	bls.n	80096f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e04f      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f2:	4b2b      	ldr	r3, [pc, #172]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 020c 	and.w	r2, r3, #12
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	429a      	cmp	r2, r3
 8009702:	d1eb      	bne.n	80096dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009704:	4b25      	ldr	r3, [pc, #148]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d20c      	bcs.n	800972c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009712:	4b22      	ldr	r3, [pc, #136]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800971a:	4b20      	ldr	r3, [pc, #128]	; (800979c <HAL_RCC_ClockConfig+0x1b8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d001      	beq.n	800972c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e032      	b.n	8009792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009738:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	4916      	ldr	r1, [pc, #88]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009746:	4313      	orrs	r3, r2
 8009748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0308 	and.w	r3, r3, #8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009756:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	490e      	ldr	r1, [pc, #56]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009766:	4313      	orrs	r3, r2
 8009768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800976a:	f000 f821 	bl	80097b0 <HAL_RCC_GetSysClockFreq>
 800976e:	4601      	mov	r1, r0
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	091b      	lsrs	r3, r3, #4
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	4a0a      	ldr	r2, [pc, #40]	; (80097a4 <HAL_RCC_ClockConfig+0x1c0>)
 800977c:	5cd3      	ldrb	r3, [r2, r3]
 800977e:	fa21 f303 	lsr.w	r3, r1, r3
 8009782:	4a09      	ldr	r2, [pc, #36]	; (80097a8 <HAL_RCC_ClockConfig+0x1c4>)
 8009784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009786:	4b09      	ldr	r3, [pc, #36]	; (80097ac <HAL_RCC_ClockConfig+0x1c8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f7fd fc38 	bl	8007000 <HAL_InitTick>

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40023c00 	.word	0x40023c00
 80097a0:	40023800 	.word	0x40023800
 80097a4:	08017f38 	.word	0x08017f38
 80097a8:	20000000 	.word	0x20000000
 80097ac:	20000004 	.word	0x20000004

080097b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097c6:	4b63      	ldr	r3, [pc, #396]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 030c 	and.w	r3, r3, #12
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d007      	beq.n	80097e2 <HAL_RCC_GetSysClockFreq+0x32>
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d008      	beq.n	80097e8 <HAL_RCC_GetSysClockFreq+0x38>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 80b4 	bne.w	8009944 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097dc:	4b5e      	ldr	r3, [pc, #376]	; (8009958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80097de:	60bb      	str	r3, [r7, #8]
       break;
 80097e0:	e0b3      	b.n	800994a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097e2:	4b5d      	ldr	r3, [pc, #372]	; (8009958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80097e4:	60bb      	str	r3, [r7, #8]
      break;
 80097e6:	e0b0      	b.n	800994a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097e8:	4b5a      	ldr	r3, [pc, #360]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097f2:	4b58      	ldr	r3, [pc, #352]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d04a      	beq.n	8009894 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097fe:	4b55      	ldr	r3, [pc, #340]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	099b      	lsrs	r3, r3, #6
 8009804:	f04f 0400 	mov.w	r4, #0
 8009808:	f240 11ff 	movw	r1, #511	; 0x1ff
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	ea03 0501 	and.w	r5, r3, r1
 8009814:	ea04 0602 	and.w	r6, r4, r2
 8009818:	4629      	mov	r1, r5
 800981a:	4632      	mov	r2, r6
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	f04f 0400 	mov.w	r4, #0
 8009824:	0154      	lsls	r4, r2, #5
 8009826:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800982a:	014b      	lsls	r3, r1, #5
 800982c:	4619      	mov	r1, r3
 800982e:	4622      	mov	r2, r4
 8009830:	1b49      	subs	r1, r1, r5
 8009832:	eb62 0206 	sbc.w	r2, r2, r6
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	f04f 0400 	mov.w	r4, #0
 800983e:	0194      	lsls	r4, r2, #6
 8009840:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009844:	018b      	lsls	r3, r1, #6
 8009846:	1a5b      	subs	r3, r3, r1
 8009848:	eb64 0402 	sbc.w	r4, r4, r2
 800984c:	f04f 0100 	mov.w	r1, #0
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	00e2      	lsls	r2, r4, #3
 8009856:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800985a:	00d9      	lsls	r1, r3, #3
 800985c:	460b      	mov	r3, r1
 800985e:	4614      	mov	r4, r2
 8009860:	195b      	adds	r3, r3, r5
 8009862:	eb44 0406 	adc.w	r4, r4, r6
 8009866:	f04f 0100 	mov.w	r1, #0
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	02a2      	lsls	r2, r4, #10
 8009870:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009874:	0299      	lsls	r1, r3, #10
 8009876:	460b      	mov	r3, r1
 8009878:	4614      	mov	r4, r2
 800987a:	4618      	mov	r0, r3
 800987c:	4621      	mov	r1, r4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f04f 0400 	mov.w	r4, #0
 8009884:	461a      	mov	r2, r3
 8009886:	4623      	mov	r3, r4
 8009888:	f7f7 fa16 	bl	8000cb8 <__aeabi_uldivmod>
 800988c:	4603      	mov	r3, r0
 800988e:	460c      	mov	r4, r1
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e049      	b.n	8009928 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009894:	4b2f      	ldr	r3, [pc, #188]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	099b      	lsrs	r3, r3, #6
 800989a:	f04f 0400 	mov.w	r4, #0
 800989e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80098a2:	f04f 0200 	mov.w	r2, #0
 80098a6:	ea03 0501 	and.w	r5, r3, r1
 80098aa:	ea04 0602 	and.w	r6, r4, r2
 80098ae:	4629      	mov	r1, r5
 80098b0:	4632      	mov	r2, r6
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	f04f 0400 	mov.w	r4, #0
 80098ba:	0154      	lsls	r4, r2, #5
 80098bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80098c0:	014b      	lsls	r3, r1, #5
 80098c2:	4619      	mov	r1, r3
 80098c4:	4622      	mov	r2, r4
 80098c6:	1b49      	subs	r1, r1, r5
 80098c8:	eb62 0206 	sbc.w	r2, r2, r6
 80098cc:	f04f 0300 	mov.w	r3, #0
 80098d0:	f04f 0400 	mov.w	r4, #0
 80098d4:	0194      	lsls	r4, r2, #6
 80098d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80098da:	018b      	lsls	r3, r1, #6
 80098dc:	1a5b      	subs	r3, r3, r1
 80098de:	eb64 0402 	sbc.w	r4, r4, r2
 80098e2:	f04f 0100 	mov.w	r1, #0
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	00e2      	lsls	r2, r4, #3
 80098ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098f0:	00d9      	lsls	r1, r3, #3
 80098f2:	460b      	mov	r3, r1
 80098f4:	4614      	mov	r4, r2
 80098f6:	195b      	adds	r3, r3, r5
 80098f8:	eb44 0406 	adc.w	r4, r4, r6
 80098fc:	f04f 0100 	mov.w	r1, #0
 8009900:	f04f 0200 	mov.w	r2, #0
 8009904:	02a2      	lsls	r2, r4, #10
 8009906:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800990a:	0299      	lsls	r1, r3, #10
 800990c:	460b      	mov	r3, r1
 800990e:	4614      	mov	r4, r2
 8009910:	4618      	mov	r0, r3
 8009912:	4621      	mov	r1, r4
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f04f 0400 	mov.w	r4, #0
 800991a:	461a      	mov	r2, r3
 800991c:	4623      	mov	r3, r4
 800991e:	f7f7 f9cb 	bl	8000cb8 <__aeabi_uldivmod>
 8009922:	4603      	mov	r3, r0
 8009924:	460c      	mov	r4, r1
 8009926:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	0c1b      	lsrs	r3, r3, #16
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	3301      	adds	r3, #1
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009940:	60bb      	str	r3, [r7, #8]
      break;
 8009942:	e002      	b.n	800994a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009946:	60bb      	str	r3, [r7, #8]
      break;
 8009948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800994a:	68bb      	ldr	r3, [r7, #8]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009954:	40023800 	.word	0x40023800
 8009958:	00f42400 	.word	0x00f42400

0800995c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <HAL_RCC_GetHCLKFreq+0x14>)
 8009962:	681b      	ldr	r3, [r3, #0]
}
 8009964:	4618      	mov	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000000 	.word	0x20000000

08009974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009978:	f7ff fff0 	bl	800995c <HAL_RCC_GetHCLKFreq>
 800997c:	4601      	mov	r1, r0
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	0a9b      	lsrs	r3, r3, #10
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	4a03      	ldr	r2, [pc, #12]	; (8009998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800998a:	5cd3      	ldrb	r3, [r2, r3]
 800998c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009990:	4618      	mov	r0, r3
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40023800 	.word	0x40023800
 8009998:	08017f48 	.word	0x08017f48

0800999c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80099a0:	f7ff ffdc 	bl	800995c <HAL_RCC_GetHCLKFreq>
 80099a4:	4601      	mov	r1, r0
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	0b5b      	lsrs	r3, r3, #13
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	4a03      	ldr	r2, [pc, #12]	; (80099c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80099b2:	5cd3      	ldrb	r3, [r2, r3]
 80099b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	40023800 	.word	0x40023800
 80099c0:	08017f48 	.word	0x08017f48

080099c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80099ec:	4b66      	ldr	r3, [pc, #408]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fa:	4963      	ldr	r1, [pc, #396]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009a0e:	4b5e      	ldr	r3, [pc, #376]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	495a      	ldr	r1, [pc, #360]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10b      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d105      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d075      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009a48:	4b50      	ldr	r3, [pc, #320]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a4e:	f7fd fb1b 	bl	8007088 <HAL_GetTick>
 8009a52:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a54:	e008      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a56:	f7fd fb17 	bl	8007088 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e1dc      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a68:	4b47      	ldr	r3, [pc, #284]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1f0      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d009      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	019a      	lsls	r2, r3, #6
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	071b      	lsls	r3, r3, #28
 8009a8c:	493e      	ldr	r1, [pc, #248]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0302 	and.w	r3, r3, #2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01f      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009aa0:	4b39      	ldr	r3, [pc, #228]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aa6:	0f1b      	lsrs	r3, r3, #28
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	019a      	lsls	r2, r3, #6
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	061b      	lsls	r3, r3, #24
 8009aba:	431a      	orrs	r2, r3
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	071b      	lsls	r3, r3, #28
 8009ac0:	4931      	ldr	r1, [pc, #196]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ac8:	4b2f      	ldr	r3, [pc, #188]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ace:	f023 021f 	bic.w	r2, r3, #31
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	492b      	ldr	r1, [pc, #172]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00d      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	019a      	lsls	r2, r3, #6
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	071b      	lsls	r3, r3, #28
 8009b00:	4921      	ldr	r1, [pc, #132]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b08:	4b20      	ldr	r3, [pc, #128]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b0e:	f7fd fabb 	bl	8007088 <HAL_GetTick>
 8009b12:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b14:	e008      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b16:	f7fd fab7 	bl	8007088 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e17c      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b28:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0f0      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d112      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10c      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80ce 	beq.w	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b62:	f040 80c8 	bne.w	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b66:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b6c:	f7fd fa8c 	bl	8007088 <HAL_GetTick>
 8009b70:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b72:	e00f      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009b74:	f7fd fa88 	bl	8007088 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d908      	bls.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e14d      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009b86:	bf00      	nop
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	42470068 	.word	0x42470068
 8009b90:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b94:	4ba5      	ldr	r3, [pc, #660]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ba0:	d0e8      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d02e      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009bae:	4b9f      	ldr	r3, [pc, #636]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb4:	0c1b      	lsrs	r3, r3, #16
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	3301      	adds	r3, #1
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009bc0:	4b9a      	ldr	r3, [pc, #616]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc6:	0f1b      	lsrs	r3, r3, #28
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	019a      	lsls	r2, r3, #6
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	431a      	orrs	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	071b      	lsls	r3, r3, #28
 8009bea:	4990      	ldr	r1, [pc, #576]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009bf2:	4b8e      	ldr	r3, [pc, #568]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	3b01      	subs	r3, #1
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	4989      	ldr	r1, [pc, #548]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0308 	and.w	r3, r3, #8
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d02c      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009c18:	4b84      	ldr	r3, [pc, #528]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	3301      	adds	r3, #1
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c2a:	4b80      	ldr	r3, [pc, #512]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c30:	0e1b      	lsrs	r3, r3, #24
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	019a      	lsls	r2, r3, #6
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	3b01      	subs	r3, #1
 8009c44:	041b      	lsls	r3, r3, #16
 8009c46:	431a      	orrs	r2, r3
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	071b      	lsls	r3, r3, #28
 8009c54:	4975      	ldr	r1, [pc, #468]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009c5c:	4b73      	ldr	r3, [pc, #460]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	4970      	ldr	r1, [pc, #448]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d024      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c86:	d11f      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c88:	4b68      	ldr	r3, [pc, #416]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	0e1b      	lsrs	r3, r3, #24
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c96:	4b65      	ldr	r3, [pc, #404]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	0f1b      	lsrs	r3, r3, #28
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	019a      	lsls	r2, r3, #6
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	041b      	lsls	r3, r3, #16
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	061b      	lsls	r3, r3, #24
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	071b      	lsls	r3, r3, #28
 8009cc0:	495a      	ldr	r1, [pc, #360]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009cce:	f7fd f9db 	bl	8007088 <HAL_GetTick>
 8009cd2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cd4:	e008      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009cd6:	f7fd f9d7 	bl	8007088 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d901      	bls.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e09c      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ce8:	4b50      	ldr	r3, [pc, #320]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf4:	d1ef      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 8083 	beq.w	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d04:	2300      	movs	r3, #0
 8009d06:	60bb      	str	r3, [r7, #8]
 8009d08:	4b48      	ldr	r3, [pc, #288]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	4a47      	ldr	r2, [pc, #284]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d12:	6413      	str	r3, [r2, #64]	; 0x40
 8009d14:	4b45      	ldr	r3, [pc, #276]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1c:	60bb      	str	r3, [r7, #8]
 8009d1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009d20:	4b44      	ldr	r3, [pc, #272]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a43      	ldr	r2, [pc, #268]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d2c:	f7fd f9ac 	bl	8007088 <HAL_GetTick>
 8009d30:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d32:	e008      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d34:	f7fd f9a8 	bl	8007088 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e06d      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d46:	4b3b      	ldr	r3, [pc, #236]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d52:	4b36      	ldr	r3, [pc, #216]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d5a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d02f      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d028      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d70:	4b2e      	ldr	r3, [pc, #184]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d78:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d7a:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d80:	4b2d      	ldr	r3, [pc, #180]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009d86:	4a29      	ldr	r2, [pc, #164]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d8c:	4b27      	ldr	r3, [pc, #156]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d114      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009d98:	f7fd f976 	bl	8007088 <HAL_GetTick>
 8009d9c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d9e:	e00a      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009da0:	f7fd f972 	bl	8007088 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d901      	bls.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e035      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009db6:	4b1d      	ldr	r3, [pc, #116]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0ee      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dce:	d10d      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009dd0:	4b16      	ldr	r3, [pc, #88]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de4:	4911      	ldr	r1, [pc, #68]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	608b      	str	r3, [r1, #8]
 8009dea:	e005      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009dec:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	4a0e      	ldr	r2, [pc, #56]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009df6:	6093      	str	r3, [r2, #8]
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e04:	4909      	ldr	r1, [pc, #36]	; (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0310 	and.w	r3, r3, #16
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009e1c:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009e1e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	42470070 	.word	0x42470070
 8009e34:	40007000 	.word	0x40007000
 8009e38:	42470e40 	.word	0x42470e40
 8009e3c:	424711e0 	.word	0x424711e0

08009e40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d075      	beq.n	8009f44 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e58:	4ba2      	ldr	r3, [pc, #648]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f003 030c 	and.w	r3, r3, #12
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d00c      	beq.n	8009e7e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e64:	4b9f      	ldr	r3, [pc, #636]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d112      	bne.n	8009e96 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e70:	4b9c      	ldr	r3, [pc, #624]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e7c:	d10b      	bne.n	8009e96 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e7e:	4b99      	ldr	r3, [pc, #612]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d05b      	beq.n	8009f42 <HAL_RCC_OscConfig+0x102>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d157      	bne.n	8009f42 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e20b      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9e:	d106      	bne.n	8009eae <HAL_RCC_OscConfig+0x6e>
 8009ea0:	4b90      	ldr	r3, [pc, #576]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a8f      	ldr	r2, [pc, #572]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	e01d      	b.n	8009eea <HAL_RCC_OscConfig+0xaa>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eb6:	d10c      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x92>
 8009eb8:	4b8a      	ldr	r3, [pc, #552]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a89      	ldr	r2, [pc, #548]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	4b87      	ldr	r3, [pc, #540]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a86      	ldr	r2, [pc, #536]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	e00b      	b.n	8009eea <HAL_RCC_OscConfig+0xaa>
 8009ed2:	4b84      	ldr	r3, [pc, #528]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a83      	ldr	r2, [pc, #524]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	4b81      	ldr	r3, [pc, #516]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a80      	ldr	r2, [pc, #512]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ee8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d013      	beq.n	8009f1a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef2:	f7fd f8c9 	bl	8007088 <HAL_GetTick>
 8009ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009efa:	f7fd f8c5 	bl	8007088 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b64      	cmp	r3, #100	; 0x64
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e1d0      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f0c:	4b75      	ldr	r3, [pc, #468]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0f0      	beq.n	8009efa <HAL_RCC_OscConfig+0xba>
 8009f18:	e014      	b.n	8009f44 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1a:	f7fd f8b5 	bl	8007088 <HAL_GetTick>
 8009f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f20:	e008      	b.n	8009f34 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f22:	f7fd f8b1 	bl	8007088 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b64      	cmp	r3, #100	; 0x64
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e1bc      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f34:	4b6b      	ldr	r3, [pc, #428]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f0      	bne.n	8009f22 <HAL_RCC_OscConfig+0xe2>
 8009f40:	e000      	b.n	8009f44 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d063      	beq.n	800a018 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f50:	4b64      	ldr	r3, [pc, #400]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 030c 	and.w	r3, r3, #12
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f5c:	4b61      	ldr	r3, [pc, #388]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d11c      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f68:	4b5e      	ldr	r3, [pc, #376]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d116      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f74:	4b5b      	ldr	r3, [pc, #364]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <HAL_RCC_OscConfig+0x14c>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d001      	beq.n	8009f8c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e190      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f8c:	4b55      	ldr	r3, [pc, #340]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4952      	ldr	r1, [pc, #328]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fa0:	e03a      	b.n	800a018 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d020      	beq.n	8009fec <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009faa:	4b4f      	ldr	r3, [pc, #316]	; (800a0e8 <HAL_RCC_OscConfig+0x2a8>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb0:	f7fd f86a 	bl	8007088 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fb8:	f7fd f866 	bl	8007088 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e171      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fca:	4b46      	ldr	r3, [pc, #280]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0f0      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd6:	4b43      	ldr	r3, [pc, #268]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	493f      	ldr	r1, [pc, #252]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	600b      	str	r3, [r1, #0]
 8009fea:	e015      	b.n	800a018 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fec:	4b3e      	ldr	r3, [pc, #248]	; (800a0e8 <HAL_RCC_OscConfig+0x2a8>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff2:	f7fd f849 	bl	8007088 <HAL_GetTick>
 8009ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ff8:	e008      	b.n	800a00c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ffa:	f7fd f845 	bl	8007088 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e150      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a00c:	4b35      	ldr	r3, [pc, #212]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1f0      	bne.n	8009ffa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d030      	beq.n	800a086 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d016      	beq.n	800a05a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a02c:	4b2f      	ldr	r3, [pc, #188]	; (800a0ec <HAL_RCC_OscConfig+0x2ac>)
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a032:	f7fd f829 	bl	8007088 <HAL_GetTick>
 800a036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a038:	e008      	b.n	800a04c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a03a:	f7fd f825 	bl	8007088 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b02      	cmp	r3, #2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e130      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a04c:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0f0      	beq.n	800a03a <HAL_RCC_OscConfig+0x1fa>
 800a058:	e015      	b.n	800a086 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <HAL_RCC_OscConfig+0x2ac>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a060:	f7fd f812 	bl	8007088 <HAL_GetTick>
 800a064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a066:	e008      	b.n	800a07a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a068:	f7fd f80e 	bl	8007088 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d901      	bls.n	800a07a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e119      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a07a:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a07c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f0      	bne.n	800a068 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f000 809f 	beq.w	800a1d2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a094:	2300      	movs	r3, #0
 800a096:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a098:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10f      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a0ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	6413      	str	r3, [r2, #64]	; 0x40
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <HAL_RCC_OscConfig+0x2a4>)
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <HAL_RCC_OscConfig+0x2b0>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d120      	bne.n	800a112 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <HAL_RCC_OscConfig+0x2b0>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <HAL_RCC_OscConfig+0x2b0>)
 800a0d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0dc:	f7fc ffd4 	bl	8007088 <HAL_GetTick>
 800a0e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0e2:	e010      	b.n	800a106 <HAL_RCC_OscConfig+0x2c6>
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	42470000 	.word	0x42470000
 800a0ec:	42470e80 	.word	0x42470e80
 800a0f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0f4:	f7fc ffc8 	bl	8007088 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d901      	bls.n	800a106 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e0d3      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a106:	4b6c      	ldr	r3, [pc, #432]	; (800a2b8 <HAL_RCC_OscConfig+0x478>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0f0      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d106      	bne.n	800a128 <HAL_RCC_OscConfig+0x2e8>
 800a11a:	4b68      	ldr	r3, [pc, #416]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11e:	4a67      	ldr	r2, [pc, #412]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6713      	str	r3, [r2, #112]	; 0x70
 800a126:	e01c      	b.n	800a162 <HAL_RCC_OscConfig+0x322>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b05      	cmp	r3, #5
 800a12e:	d10c      	bne.n	800a14a <HAL_RCC_OscConfig+0x30a>
 800a130:	4b62      	ldr	r3, [pc, #392]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a134:	4a61      	ldr	r2, [pc, #388]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a136:	f043 0304 	orr.w	r3, r3, #4
 800a13a:	6713      	str	r3, [r2, #112]	; 0x70
 800a13c:	4b5f      	ldr	r3, [pc, #380]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a140:	4a5e      	ldr	r2, [pc, #376]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a142:	f043 0301 	orr.w	r3, r3, #1
 800a146:	6713      	str	r3, [r2, #112]	; 0x70
 800a148:	e00b      	b.n	800a162 <HAL_RCC_OscConfig+0x322>
 800a14a:	4b5c      	ldr	r3, [pc, #368]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	4a5b      	ldr	r2, [pc, #364]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a150:	f023 0301 	bic.w	r3, r3, #1
 800a154:	6713      	str	r3, [r2, #112]	; 0x70
 800a156:	4b59      	ldr	r3, [pc, #356]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	4a58      	ldr	r2, [pc, #352]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a15c:	f023 0304 	bic.w	r3, r3, #4
 800a160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d015      	beq.n	800a196 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16a:	f7fc ff8d 	bl	8007088 <HAL_GetTick>
 800a16e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a170:	e00a      	b.n	800a188 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a172:	f7fc ff89 	bl	8007088 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a180:	4293      	cmp	r3, r2
 800a182:	d901      	bls.n	800a188 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e092      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a188:	4b4c      	ldr	r3, [pc, #304]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0ee      	beq.n	800a172 <HAL_RCC_OscConfig+0x332>
 800a194:	e014      	b.n	800a1c0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a196:	f7fc ff77 	bl	8007088 <HAL_GetTick>
 800a19a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a19c:	e00a      	b.n	800a1b4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a19e:	f7fc ff73 	bl	8007088 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d901      	bls.n	800a1b4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e07c      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1b4:	4b41      	ldr	r3, [pc, #260]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1ee      	bne.n	800a19e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d105      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1c6:	4b3d      	ldr	r3, [pc, #244]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	4a3c      	ldr	r2, [pc, #240]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a1cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d068      	beq.n	800a2ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1da:	4b38      	ldr	r3, [pc, #224]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b08      	cmp	r3, #8
 800a1e4:	d060      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d145      	bne.n	800a27a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1ee:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <HAL_RCC_OscConfig+0x480>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f4:	f7fc ff48 	bl	8007088 <HAL_GetTick>
 800a1f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1fa:	e008      	b.n	800a20e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1fc:	f7fc ff44 	bl	8007088 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e04f      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a20e:	4b2b      	ldr	r3, [pc, #172]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f0      	bne.n	800a1fc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	69da      	ldr	r2, [r3, #28]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	019b      	lsls	r3, r3, #6
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a230:	085b      	lsrs	r3, r3, #1
 800a232:	3b01      	subs	r3, #1
 800a234:	041b      	lsls	r3, r3, #16
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	061b      	lsls	r3, r3, #24
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a244:	071b      	lsls	r3, r3, #28
 800a246:	491d      	ldr	r1, [pc, #116]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <HAL_RCC_OscConfig+0x480>)
 800a24e:	2201      	movs	r2, #1
 800a250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a252:	f7fc ff19 	bl	8007088 <HAL_GetTick>
 800a256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a258:	e008      	b.n	800a26c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a25a:	f7fc ff15 	bl	8007088 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e020      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0f0      	beq.n	800a25a <HAL_RCC_OscConfig+0x41a>
 800a278:	e018      	b.n	800a2ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <HAL_RCC_OscConfig+0x480>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a280:	f7fc ff02 	bl	8007088 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a288:	f7fc fefe 	bl	8007088 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b02      	cmp	r3, #2
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e009      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <HAL_RCC_OscConfig+0x47c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1f0      	bne.n	800a288 <HAL_RCC_OscConfig+0x448>
 800a2a6:	e001      	b.n	800a2ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40007000 	.word	0x40007000
 800a2bc:	40023800 	.word	0x40023800
 800a2c0:	42470060 	.word	0x42470060

0800a2c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e022      	b.n	800a31c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fa fe61 	bl	8004fb0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f814 	bl	800a324 <HAL_SD_InitCard>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e00a      	b.n	800a31c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a324:	b5b0      	push	{r4, r5, r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af04      	add	r7, sp, #16
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a338:	2300      	movs	r3, #0
 800a33a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a340:	2376      	movs	r3, #118	; 0x76
 800a342:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681d      	ldr	r5, [r3, #0]
 800a348:	466c      	mov	r4, sp
 800a34a:	f107 0314 	add.w	r3, r7, #20
 800a34e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a35c:	4628      	mov	r0, r5
 800a35e:	f003 fa87 	bl	800d870 <SDIO_Init>
 800a362:	4603      	mov	r3, r0
 800a364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e031      	b.n	800a3d8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a374:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <HAL_SD_InitCard+0xbc>)
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f003 fabf 	bl	800d902 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a384:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <HAL_SD_InitCard+0xbc>)
 800a386:	2201      	movs	r2, #1
 800a388:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 ffc6 	bl	800b31c <SD_PowerON>
 800a390:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e013      	b.n	800a3d8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fee5 	bl	800b180 <SD_InitCard>
 800a3b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e000      	b.n	800a3d8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3728      	adds	r7, #40	; 0x28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e0:	422580a0 	.word	0x422580a0

0800a3e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08c      	sub	sp, #48	; 0x30
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d107      	bne.n	800a40c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e0c7      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b01      	cmp	r3, #1
 800a416:	f040 80c0 	bne.w	800a59a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	441a      	add	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d907      	bls.n	800a43e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e0ae      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2203      	movs	r2, #3
 800a442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2200      	movs	r2, #0
 800a44c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a45c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	4a50      	ldr	r2, [pc, #320]	; (800a5a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46a:	4a4f      	ldr	r2, [pc, #316]	; (800a5a8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a46c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	2200      	movs	r2, #0
 800a474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3380      	adds	r3, #128	; 0x80
 800a480:	4619      	mov	r1, r3
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	025b      	lsls	r3, r3, #9
 800a488:	089b      	lsrs	r3, r3, #2
 800a48a:	f7fd fbef 	bl	8007c6c <HAL_DMA_Start_IT>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d017      	beq.n	800a4c4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a4a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a40      	ldr	r2, [pc, #256]	; (800a5ac <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e06b      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a4c4:	4b3a      	ldr	r3, [pc, #232]	; (800a5b0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d002      	beq.n	800a4d8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	025b      	lsls	r3, r3, #9
 800a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f003 faa1 	bl	800da28 <SDMMC_CmdBlockLength>
 800a4e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00f      	beq.n	800a50e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a2e      	ldr	r2, [pc, #184]	; (800a5ac <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e046      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	025b      	lsls	r3, r3, #9
 800a518:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a51a:	2390      	movs	r3, #144	; 0x90
 800a51c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a51e:	2302      	movs	r3, #2
 800a520:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a522:	2300      	movs	r3, #0
 800a524:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a526:	2301      	movs	r3, #1
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f107 0210 	add.w	r2, r7, #16
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f003 fa4b 	bl	800d9d0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d90a      	bls.n	800a556 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2282      	movs	r2, #130	; 0x82
 800a544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a54c:	4618      	mov	r0, r3
 800a54e:	f003 faaf 	bl	800dab0 <SDMMC_CmdReadMultiBlock>
 800a552:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a554:	e009      	b.n	800a56a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2281      	movs	r2, #129	; 0x81
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a562:	4618      	mov	r0, r3
 800a564:	f003 fa82 	bl	800da6c <SDMMC_CmdReadSingleBlock>
 800a568:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d012      	beq.n	800a596 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a576:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	431a      	orrs	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e002      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3730      	adds	r7, #48	; 0x30
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	0800af8f 	.word	0x0800af8f
 800a5a8:	0800b001 	.word	0x0800b001
 800a5ac:	004005ff 	.word	0x004005ff
 800a5b0:	4225858c 	.word	0x4225858c

0800a5b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08c      	sub	sp, #48	; 0x30
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e0ca      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	f040 80c3 	bne.w	800a770 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d907      	bls.n	800a60e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e0b1      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2203      	movs	r2, #3
 800a612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2200      	movs	r2, #0
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f042 021a 	orr.w	r2, r2, #26
 800a62c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	4a52      	ldr	r2, [pc, #328]	; (800a77c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	4a51      	ldr	r2, [pc, #324]	; (800a780 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a63c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	2200      	movs	r2, #0
 800a644:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d002      	beq.n	800a654 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	025b      	lsls	r3, r3, #9
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a65c:	4618      	mov	r0, r3
 800a65e:	f003 f9e3 	bl	800da28 <SDMMC_CmdBlockLength>
 800a662:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a45      	ldr	r2, [pc, #276]	; (800a784 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	431a      	orrs	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e073      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d90a      	bls.n	800a6a6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	22a0      	movs	r2, #160	; 0xa0
 800a694:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a69c:	4618      	mov	r0, r3
 800a69e:	f003 fa4b 	bl	800db38 <SDMMC_CmdWriteMultiBlock>
 800a6a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a6a4:	e009      	b.n	800a6ba <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2290      	movs	r2, #144	; 0x90
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f003 fa1e 	bl	800daf4 <SDMMC_CmdWriteSingleBlock>
 800a6b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d012      	beq.n	800a6e6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a2f      	ldr	r2, [pc, #188]	; (800a784 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e045      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a6e6:	4b28      	ldr	r3, [pc, #160]	; (800a788 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3380      	adds	r3, #128	; 0x80
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	025b      	lsls	r3, r3, #9
 800a6fe:	089b      	lsrs	r3, r3, #2
 800a700:	f7fd fab4 	bl	8007c6c <HAL_DMA_Start_IT>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d01a      	beq.n	800a740 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 021a 	bic.w	r2, r2, #26
 800a718:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a19      	ldr	r2, [pc, #100]	; (800a784 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e018      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a740:	f04f 33ff 	mov.w	r3, #4294967295
 800a744:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	025b      	lsls	r3, r3, #9
 800a74a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a74c:	2390      	movs	r3, #144	; 0x90
 800a74e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a750:	2300      	movs	r3, #0
 800a752:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a754:	2300      	movs	r3, #0
 800a756:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a758:	2301      	movs	r3, #1
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f107 0210 	add.w	r2, r7, #16
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f003 f932 	bl	800d9d0 <SDIO_ConfigData>

      return HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	e000      	b.n	800a772 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a770:	2302      	movs	r3, #2
  }
}
 800a772:	4618      	mov	r0, r3
 800a774:	3730      	adds	r7, #48	; 0x30
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	0800af65 	.word	0x0800af65
 800a780:	0800b001 	.word	0x0800b001
 800a784:	004005ff 	.word	0x004005ff
 800a788:	4225858c 	.word	0x4225858c

0800a78c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a798:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <HAL_SD_IRQHandler+0x2e>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 ffc8 	bl	800b748 <SD_Read_IT>
 800a7b8:	e155      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 808f 	beq.w	800a8e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a7e2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a7e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d039      	beq.n	800a876 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <HAL_SD_IRQHandler+0x8a>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d011      	beq.n	800a83a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f003 f9ae 	bl	800db7c <SDMMC_CmdStopTransfer>
 800a820:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d008      	beq.n	800a83a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	431a      	orrs	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f91f 	bl	800aa78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a842:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d104      	bne.n	800a866 <HAL_SD_IRQHandler+0xda>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f003 fe04 	bl	800e474 <HAL_SD_RxCpltCallback>
 800a86c:	e0fb      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f003 fdf6 	bl	800e460 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a874:	e0f7      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80f2 	beq.w	800aa66 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f003 0320 	and.w	r3, r3, #32
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d011      	beq.n	800a8b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f003 f973 	bl	800db7c <SDMMC_CmdStopTransfer>
 800a896:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	431a      	orrs	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f8e4 	bl	800aa78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 80d5 	bne.w	800aa66 <HAL_SD_IRQHandler+0x2da>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f040 80cf 	bne.w	800aa66 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0208 	bic.w	r2, r2, #8
 800a8d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f003 fdbd 	bl	800e460 <HAL_SD_TxCpltCallback>
}
 800a8e6:	e0be      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <HAL_SD_IRQHandler+0x17c>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f003 0308 	and.w	r3, r3, #8
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 ff72 	bl	800b7ea <SD_Write_IT>
 800a906:	e0ae      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80a7 	beq.w	800aa66 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	d005      	beq.n	800a932 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	f043 0202 	orr.w	r2, r3, #2
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	f043 0208 	orr.w	r2, r3, #8
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f003 0320 	and.w	r3, r3, #32
 800a956:	2b00      	cmp	r3, #0
 800a958:	d005      	beq.n	800a966 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	f043 0220 	orr.w	r2, r3, #32
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	f043 0210 	orr.w	r2, r3, #16
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f240 523a 	movw	r2, #1338	; 0x53a
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a998:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f003 f8ec 	bl	800db7c <SDMMC_CmdStopTransfer>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f855 	bl	800aa78 <HAL_SD_ErrorCallback>
}
 800a9ce:	e04a      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d045      	beq.n	800aa66 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d104      	bne.n	800a9ee <HAL_SD_IRQHandler+0x262>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f003 0320 	and.w	r3, r3, #32
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d011      	beq.n	800aa12 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <HAL_SD_IRQHandler+0x2e4>)
 800a9f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fd f98e 	bl	8007d1c <HAL_DMA_Abort_IT>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02f      	beq.n	800aa66 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fb4a 	bl	800b0a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aa10:	e029      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <HAL_SD_IRQHandler+0x29a>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d011      	beq.n	800aa4a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	4a12      	ldr	r2, [pc, #72]	; (800aa74 <HAL_SD_IRQHandler+0x2e8>)
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fd f972 	bl	8007d1c <HAL_DMA_Abort_IT>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d013      	beq.n	800aa66 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 fb65 	bl	800b112 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa48:	e00d      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f003 fcf4 	bl	800e44c <HAL_SD_AbortCallback>
}
 800aa64:	e7ff      	b.n	800aa66 <HAL_SD_IRQHandler+0x2da>
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800b0a5 	.word	0x0800b0a5
 800aa74:	0800b113 	.word	0x0800b113

0800aa78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa9a:	0f9b      	lsrs	r3, r3, #30
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa6:	0e9b      	lsrs	r3, r3, #26
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab8:	0e1b      	lsrs	r3, r3, #24
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 0303 	and.w	r3, r3, #3
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaca:	0c1b      	lsrs	r3, r3, #16
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad6:	0a1b      	lsrs	r3, r3, #8
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaec:	0d1b      	lsrs	r3, r3, #20
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf8:	0c1b      	lsrs	r3, r3, #16
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 030f 	and.w	r3, r3, #15
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab0a:	0bdb      	lsrs	r3, r3, #15
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab1c:	0b9b      	lsrs	r3, r3, #14
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab2e:	0b5b      	lsrs	r3, r3, #13
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab40:	0b1b      	lsrs	r3, r3, #12
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d163      	bne.n	800ac24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab60:	009a      	lsls	r2, r3, #2
 800ab62:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab66:	4013      	ands	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ab6c:	0f92      	lsrs	r2, r2, #30
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab78:	0edb      	lsrs	r3, r3, #27
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8a:	0e1b      	lsrs	r3, r3, #24
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	f003 0307 	and.w	r3, r3, #7
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9c:	0d5b      	lsrs	r3, r3, #21
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0307 	and.w	r3, r3, #7
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abae:	0c9b      	lsrs	r3, r3, #18
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc0:	0bdb      	lsrs	r3, r3, #15
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	7e1b      	ldrb	r3, [r3, #24]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	3302      	adds	r3, #2
 800abe4:	2201      	movs	r2, #1
 800abe6:	fa02 f303 	lsl.w	r3, r2, r3
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800abee:	fb02 f203 	mul.w	r2, r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	7a1b      	ldrb	r3, [r3, #8]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	2201      	movs	r2, #1
 800ac02:	409a      	lsls	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ac10:	0a52      	lsrs	r2, r2, #9
 800ac12:	fb02 f203 	mul.w	r2, r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60
 800ac22:	e031      	b.n	800ac88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d11d      	bne.n	800ac68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac30:	041b      	lsls	r3, r3, #16
 800ac32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	3301      	adds	r3, #1
 800ac48:	029a      	lsls	r2, r3, #10
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	661a      	str	r2, [r3, #96]	; 0x60
 800ac66:	e00f      	b.n	800ac88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a58      	ldr	r2, [pc, #352]	; (800add0 <HAL_SD_GetCardCSD+0x344>)
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e09d      	b.n	800adc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8c:	0b9b      	lsrs	r3, r3, #14
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9e:	09db      	lsrs	r3, r3, #7
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc0:	0fdb      	lsrs	r3, r3, #31
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800accc:	0f5b      	lsrs	r3, r3, #29
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f003 0303 	and.w	r3, r3, #3
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acde:	0e9b      	lsrs	r3, r3, #26
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf0:	0d9b      	lsrs	r3, r3, #22
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad02:	0d5b      	lsrs	r3, r3, #21
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	0c1b      	lsrs	r3, r3, #16
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad32:	0bdb      	lsrs	r3, r3, #15
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad46:	0b9b      	lsrs	r3, r3, #14
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5a:	0b5b      	lsrs	r3, r3, #13
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6e:	0b1b      	lsrs	r3, r3, #12
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad82:	0a9b      	lsrs	r3, r3, #10
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	004005ff 	.word	0x004005ff

0800add4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae2c:	b5b0      	push	{r4, r5, r7, lr}
 800ae2e:	b08e      	sub	sp, #56	; 0x38
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2203      	movs	r2, #3
 800ae3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d02e      	beq.n	800aea4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae4c:	d106      	bne.n	800ae5c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38
 800ae5a:	e029      	b.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae62:	d10a      	bne.n	800ae7a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fb0f 	bl	800b488 <SD_WideBus_Enable>
 800ae6a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	639a      	str	r2, [r3, #56]	; 0x38
 800ae78:	e01a      	b.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fb4c 	bl	800b51e <SD_WideBus_Disable>
 800ae86:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
 800ae94:	e00c      	b.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38
 800aea2:	e005      	b.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d009      	beq.n	800aecc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a18      	ldr	r2, [pc, #96]	; (800af20 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e024      	b.n	800af16 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681d      	ldr	r5, [r3, #0]
 800aef2:	466c      	mov	r4, sp
 800aef4:	f107 0318 	add.w	r3, r7, #24
 800aef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aefc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af00:	f107 030c 	add.w	r3, r7, #12
 800af04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af06:	4628      	mov	r0, r5
 800af08:	f002 fcb2 	bl	800d870 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3728      	adds	r7, #40	; 0x28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bdb0      	pop	{r4, r5, r7, pc}
 800af1e:	bf00      	nop
 800af20:	004005ff 	.word	0x004005ff

0800af24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af30:	f107 030c 	add.w	r3, r7, #12
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa7e 	bl	800b438 <SD_SendStatus>
 800af3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d005      	beq.n	800af50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	0a5b      	lsrs	r3, r3, #9
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af5a:	693b      	ldr	r3, [r7, #16]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	2b82      	cmp	r3, #130	; 0x82
 800afa2:	d111      	bne.n	800afc8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 fde7 	bl	800db7c <SDMMC_CmdStopTransfer>
 800afae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d008      	beq.n	800afc8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7ff fd58 	bl	800aa78 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0208 	bic.w	r2, r2, #8
 800afd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f240 523a 	movw	r2, #1338	; 0x53a
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f003 fa3f 	bl	800e474 <HAL_SD_RxCpltCallback>
#endif
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7fd f830 	bl	8008074 <HAL_DMA_GetError>
 800b014:	4603      	mov	r3, r0
 800b016:	2b02      	cmp	r3, #2
 800b018:	d03e      	beq.n	800b098 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b020:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b028:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d002      	beq.n	800b036 <SD_DMAError+0x36>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d12d      	bne.n	800b092 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a19      	ldr	r2, [pc, #100]	; (800b0a0 <SD_DMAError+0xa0>)
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b04c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f7ff ff62 	bl	800af24 <HAL_SD_GetCardState>
 800b060:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b06      	cmp	r3, #6
 800b066:	d002      	beq.n	800b06e <SD_DMAError+0x6e>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	d10a      	bne.n	800b084 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f002 fd82 	bl	800db7c <SDMMC_CmdStopTransfer>
 800b078:	4602      	mov	r2, r0
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	431a      	orrs	r2, r3
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2200      	movs	r2, #0
 800b090:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b092:	6978      	ldr	r0, [r7, #20]
 800b094:	f7ff fcf0 	bl	800aa78 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b098:	bf00      	nop
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	004005ff 	.word	0x004005ff

0800b0a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff ff31 	bl	800af24 <HAL_SD_GetCardState>
 800b0c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b06      	cmp	r3, #6
 800b0d6:	d002      	beq.n	800b0de <SD_DMATxAbort+0x3a>
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	d10a      	bne.n	800b0f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fd4a 	bl	800db7c <SDMMC_CmdStopTransfer>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f003 f9a5 	bl	800e44c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b102:	e002      	b.n	800b10a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff fcb7 	bl	800aa78 <HAL_SD_ErrorCallback>
}
 800b10a:	bf00      	nop
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f240 523a 	movw	r2, #1338	; 0x53a
 800b128:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f7ff fefa 	bl	800af24 <HAL_SD_GetCardState>
 800b130:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2201      	movs	r2, #1
 800b136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b06      	cmp	r3, #6
 800b144:	d002      	beq.n	800b14c <SD_DMARxAbort+0x3a>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b05      	cmp	r3, #5
 800b14a:	d10a      	bne.n	800b162 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4618      	mov	r0, r3
 800b152:	f002 fd13 	bl	800db7c <SDMMC_CmdStopTransfer>
 800b156:	4602      	mov	r2, r0
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15c:	431a      	orrs	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f003 f96e 	bl	800e44c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b170:	e002      	b.n	800b178 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7ff fc80 	bl	800aa78 <HAL_SD_ErrorCallback>
}
 800b178:	bf00      	nop
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b180:	b5b0      	push	{r4, r5, r7, lr}
 800b182:	b094      	sub	sp, #80	; 0x50
 800b184:	af04      	add	r7, sp, #16
 800b186:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b188:	2301      	movs	r3, #1
 800b18a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f002 fbc5 	bl	800d920 <SDIO_GetPowerState>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b19c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b1a0:	e0b7      	b.n	800b312 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d02f      	beq.n	800b20a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f002 fdee 	bl	800dd90 <SDMMC_CmdSendCID>
 800b1b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <SD_InitCard+0x40>
    {
      return errorstate;
 800b1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1be:	e0a8      	b.n	800b312 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 fbef 	bl	800d9aa <SDIO_GetResponse>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2104      	movs	r1, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f002 fbe6 	bl	800d9aa <SDIO_GetResponse>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2108      	movs	r1, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 fbdd 	bl	800d9aa <SDIO_GetResponse>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	210c      	movs	r1, #12
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fbd4 	bl	800d9aa <SDIO_GetResponse>
 800b202:	4602      	mov	r2, r0
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d00d      	beq.n	800b22e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f107 020e 	add.w	r2, r7, #14
 800b21a:	4611      	mov	r1, r2
 800b21c:	4618      	mov	r0, r3
 800b21e:	f002 fdf4 	bl	800de0a <SDMMC_CmdSetRelAdd>
 800b222:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <SD_InitCard+0xae>
    {
      return errorstate;
 800b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22c:	e071      	b.n	800b312 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b232:	2b03      	cmp	r3, #3
 800b234:	d036      	beq.n	800b2a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b236:	89fb      	ldrh	r3, [r7, #14]
 800b238:	461a      	mov	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	4619      	mov	r1, r3
 800b24a:	4610      	mov	r0, r2
 800b24c:	f002 fdbe 	bl	800ddcc <SDMMC_CmdSendCSD>
 800b250:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <SD_InitCard+0xdc>
    {
      return errorstate;
 800b258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25a:	e05a      	b.n	800b312 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fba1 	bl	800d9aa <SDIO_GetResponse>
 800b268:	4602      	mov	r2, r0
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2104      	movs	r1, #4
 800b274:	4618      	mov	r0, r3
 800b276:	f002 fb98 	bl	800d9aa <SDIO_GetResponse>
 800b27a:	4602      	mov	r2, r0
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2108      	movs	r1, #8
 800b286:	4618      	mov	r0, r3
 800b288:	f002 fb8f 	bl	800d9aa <SDIO_GetResponse>
 800b28c:	4602      	mov	r2, r0
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	210c      	movs	r1, #12
 800b298:	4618      	mov	r0, r3
 800b29a:	f002 fb86 	bl	800d9aa <SDIO_GetResponse>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2104      	movs	r1, #4
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 fb7d 	bl	800d9aa <SDIO_GetResponse>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	0d1a      	lsrs	r2, r3, #20
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b2b8:	f107 0310 	add.w	r3, r7, #16
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff fbe4 	bl	800aa8c <HAL_SD_GetCardCSD>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2ce:	e020      	b.n	800b312 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6819      	ldr	r1, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d8:	041b      	lsls	r3, r3, #16
 800b2da:	f04f 0400 	mov.w	r4, #0
 800b2de:	461a      	mov	r2, r3
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	f002 fc6c 	bl	800dbc0 <SDMMC_CmdSelDesel>
 800b2e8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <SD_InitCard+0x174>
  {
    return errorstate;
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f2:	e00e      	b.n	800b312 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681d      	ldr	r5, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	466c      	mov	r4, sp
 800b2fc:	f103 0210 	add.w	r2, r3, #16
 800b300:	ca07      	ldmia	r2, {r0, r1, r2}
 800b302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b306:	3304      	adds	r3, #4
 800b308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b30a:	4628      	mov	r0, r5
 800b30c:	f002 fab0 	bl	800d870 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3740      	adds	r7, #64	; 0x40
 800b316:	46bd      	mov	sp, r7
 800b318:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b31c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	2300      	movs	r3, #0
 800b32e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f002 fc66 	bl	800dc06 <SDMMC_CmdGoIdleState>
 800b33a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	e072      	b.n	800b42c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f002 fc79 	bl	800dc42 <SDMMC_CmdOperCond>
 800b350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00d      	beq.n	800b374 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f002 fc4f 	bl	800dc06 <SDMMC_CmdGoIdleState>
 800b368:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d004      	beq.n	800b37a <SD_PowerON+0x5e>
    {
      return errorstate;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	e05b      	b.n	800b42c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d137      	bne.n	800b3f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2100      	movs	r1, #0
 800b388:	4618      	mov	r0, r3
 800b38a:	f002 fc79 	bl	800dc80 <SDMMC_CmdAppCommand>
 800b38e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d02d      	beq.n	800b3f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b39a:	e047      	b.n	800b42c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f002 fc6c 	bl	800dc80 <SDMMC_CmdAppCommand>
 800b3a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <SD_PowerON+0x98>
    {
      return errorstate;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	e03b      	b.n	800b42c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	491e      	ldr	r1, [pc, #120]	; (800b434 <SD_PowerON+0x118>)
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f002 fc82 	bl	800dcc4 <SDMMC_CmdAppOperCommand>
 800b3c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3cc:	e02e      	b.n	800b42c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f002 fae8 	bl	800d9aa <SDIO_GetResponse>
 800b3da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	0fdb      	lsrs	r3, r3, #31
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <SD_PowerON+0xcc>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e000      	b.n	800b3ea <SD_PowerON+0xce>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]

    count++;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d802      	bhi.n	800b402 <SD_PowerON+0xe6>
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0cc      	beq.n	800b39c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b408:	4293      	cmp	r3, r2
 800b40a:	d902      	bls.n	800b412 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b40c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b410:	e00c      	b.n	800b42c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	645a      	str	r2, [r3, #68]	; 0x44
 800b422:	e002      	b.n	800b42a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	c1100000 	.word	0xc1100000

0800b438 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d102      	bne.n	800b44e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b44c:	e018      	b.n	800b480 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f002 fcf6 	bl	800de4c <SDMMC_CmdSendStatus>
 800b460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	e009      	b.n	800b480 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fa99 	bl	800d9aa <SDIO_GetResponse>
 800b478:	4602      	mov	r2, r0
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b490:	2300      	movs	r3, #0
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	2300      	movs	r3, #0
 800b496:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2100      	movs	r1, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f002 fa83 	bl	800d9aa <SDIO_GetResponse>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ae:	d102      	bne.n	800b4b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4b4:	e02f      	b.n	800b516 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b4b6:	f107 030c 	add.w	r3, r7, #12
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f879 	bl	800b5b4 <SD_FindSCR>
 800b4c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	e023      	b.n	800b516 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01c      	beq.n	800b512 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e0:	041b      	lsls	r3, r3, #16
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f002 fbcb 	bl	800dc80 <SDMMC_CmdAppCommand>
 800b4ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	e00f      	b.n	800b516 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f002 fc04 	bl	800dd0a <SDMMC_CmdBusWidth>
 800b502:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	e003      	b.n	800b516 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b50e:	2300      	movs	r3, #0
 800b510:	e001      	b.n	800b516 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b512:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b516:	4618      	mov	r0, r3
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
 800b52a:	2300      	movs	r3, #0
 800b52c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f002 fa38 	bl	800d9aa <SDIO_GetResponse>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b544:	d102      	bne.n	800b54c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b54a:	e02f      	b.n	800b5ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b54c:	f107 030c 	add.w	r3, r7, #12
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f82e 	bl	800b5b4 <SD_FindSCR>
 800b558:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	e023      	b.n	800b5ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d01c      	beq.n	800b5a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b576:	041b      	lsls	r3, r3, #16
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f002 fb80 	bl	800dc80 <SDMMC_CmdAppCommand>
 800b580:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	e00f      	b.n	800b5ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2100      	movs	r1, #0
 800b592:	4618      	mov	r0, r3
 800b594:	f002 fbb9 	bl	800dd0a <SDMMC_CmdBusWidth>
 800b598:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	e003      	b.n	800b5ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e001      	b.n	800b5ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b5a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b08f      	sub	sp, #60	; 0x3c
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5be:	f7fb fd63 	bl	8007088 <HAL_GetTick>
 800b5c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60bb      	str	r3, [r7, #8]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2108      	movs	r1, #8
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f002 fa24 	bl	800da28 <SDMMC_CmdBlockLength>
 800b5e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	e0a9      	b.n	800b740 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f4:	041b      	lsls	r3, r3, #16
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f002 fb41 	bl	800dc80 <SDMMC_CmdAppCommand>
 800b5fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b608:	e09a      	b.n	800b740 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b610:	2308      	movs	r3, #8
 800b612:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b614:	2330      	movs	r3, #48	; 0x30
 800b616:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b618:	2302      	movs	r3, #2
 800b61a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b620:	2301      	movs	r3, #1
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f107 0210 	add.w	r2, r7, #16
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 f9ce 	bl	800d9d0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4618      	mov	r0, r3
 800b63a:	f002 fb88 	bl	800dd4e <SDMMC_CmdSendSCR>
 800b63e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	2b00      	cmp	r3, #0
 800b644:	d022      	beq.n	800b68c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	e07a      	b.n	800b740 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00e      	beq.n	800b676 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6819      	ldr	r1, [r3, #0]
 800b65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	f107 0208 	add.w	r2, r7, #8
 800b664:	18d4      	adds	r4, r2, r3
 800b666:	4608      	mov	r0, r1
 800b668:	f002 f92d 	bl	800d8c6 <SDIO_ReadFIFO>
 800b66c:	4603      	mov	r3, r0
 800b66e:	6023      	str	r3, [r4, #0]
      index++;
 800b670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b672:	3301      	adds	r3, #1
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b676:	f7fb fd07 	bl	8007088 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b684:	d102      	bne.n	800b68c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b68a:	e059      	b.n	800b740 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b692:	f240 432a 	movw	r3, #1066	; 0x42a
 800b696:	4013      	ands	r3, r2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0d6      	beq.n	800b64a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a2:	f003 0308 	and.w	r3, r3, #8
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2208      	movs	r2, #8
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b6b2:	2308      	movs	r3, #8
 800b6b4:	e044      	b.n	800b740 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d005      	beq.n	800b6d0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e037      	b.n	800b740 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b6e6:	2320      	movs	r3, #32
 800b6e8:	e02a      	b.n	800b740 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	061a      	lsls	r2, r3, #24
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b700:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	0a1b      	lsrs	r3, r3, #8
 800b706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b70a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	0e1b      	lsrs	r3, r3, #24
 800b710:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	601a      	str	r2, [r3, #0]
    scr++;
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	3304      	adds	r3, #4
 800b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	061a      	lsls	r2, r3, #24
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b728:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	0a1b      	lsrs	r3, r3, #8
 800b72e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b732:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	0e1b      	lsrs	r3, r3, #24
 800b738:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	373c      	adds	r7, #60	; 0x3c
 800b744:	46bd      	mov	sp, r7
 800b746:	bd90      	pop	{r4, r7, pc}

0800b748 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b754:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d03f      	beq.n	800b7e2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	e033      	b.n	800b7d0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f002 f8aa 	bl	800d8c6 <SDIO_ReadFIFO>
 800b772:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3b01      	subs	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	0c1b      	lsrs	r3, r3, #16
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	0e1b      	lsrs	r3, r3, #24
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2b07      	cmp	r3, #7
 800b7d4:	d9c8      	bls.n	800b768 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b086      	sub	sp, #24
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d043      	beq.n	800b88c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b804:	2300      	movs	r3, #0
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e037      	b.n	800b87a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3301      	adds	r3, #1
 800b814:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	3b01      	subs	r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	021a      	lsls	r2, r3, #8
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	4313      	orrs	r3, r2
 800b826:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3b01      	subs	r3, #1
 800b832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	041a      	lsls	r2, r3, #16
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	3301      	adds	r3, #1
 800b844:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	3b01      	subs	r3, #1
 800b84a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	061a      	lsls	r2, r3, #24
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4313      	orrs	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3b01      	subs	r3, #1
 800b862:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f107 0208 	add.w	r2, r7, #8
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f002 f836 	bl	800d8e0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	3301      	adds	r3, #1
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	2b07      	cmp	r3, #7
 800b87e:	d9c4      	bls.n	800b80a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b88c:	bf00      	nop
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e056      	b.n	800b954 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f9 fc67 	bl	8005194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	431a      	orrs	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b902:	431a      	orrs	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	431a      	orrs	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	ea42 0103 	orr.w	r1, r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	0c1b      	lsrs	r3, r3, #16
 800b924:	f003 0104 	and.w	r1, r3, #4
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	69da      	ldr	r2, [r3, #28]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	4613      	mov	r3, r2
 800b96a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b976:	2b01      	cmp	r3, #1
 800b978:	d101      	bne.n	800b97e <HAL_SPI_Transmit+0x22>
 800b97a:	2302      	movs	r3, #2
 800b97c:	e11e      	b.n	800bbbc <HAL_SPI_Transmit+0x260>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b986:	f7fb fb7f 	bl	8007088 <HAL_GetTick>
 800b98a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b98c:	88fb      	ldrh	r3, [r7, #6]
 800b98e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d002      	beq.n	800b9a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b99c:	2302      	movs	r3, #2
 800b99e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b9a0:	e103      	b.n	800bbaa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <HAL_SPI_Transmit+0x52>
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d102      	bne.n	800b9b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b9b2:	e0fa      	b.n	800bbaa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	88fa      	ldrh	r2, [r7, #6]
 800b9cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	88fa      	ldrh	r2, [r7, #6]
 800b9d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9fa:	d107      	bne.n	800ba0c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba16:	2b40      	cmp	r3, #64	; 0x40
 800ba18:	d007      	beq.n	800ba2a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba32:	d14b      	bne.n	800bacc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <HAL_SPI_Transmit+0xe6>
 800ba3c:	8afb      	ldrh	r3, [r7, #22]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d13e      	bne.n	800bac0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba46:	881a      	ldrh	r2, [r3, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba52:	1c9a      	adds	r2, r3, #2
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ba66:	e02b      	b.n	800bac0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d112      	bne.n	800ba9c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7a:	881a      	ldrh	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	1c9a      	adds	r2, r3, #2
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba9a:	e011      	b.n	800bac0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba9c:	f7fb faf4 	bl	8007088 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d803      	bhi.n	800bab4 <HAL_SPI_Transmit+0x158>
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab2:	d102      	bne.n	800baba <HAL_SPI_Transmit+0x15e>
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800babe:	e074      	b.n	800bbaa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1ce      	bne.n	800ba68 <HAL_SPI_Transmit+0x10c>
 800baca:	e04c      	b.n	800bb66 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <HAL_SPI_Transmit+0x17e>
 800bad4:	8afb      	ldrh	r3, [r7, #22]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d140      	bne.n	800bb5c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	330c      	adds	r3, #12
 800bae4:	7812      	ldrb	r2, [r2, #0]
 800bae6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bb00:	e02c      	b.n	800bb5c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d113      	bne.n	800bb38 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	330c      	adds	r3, #12
 800bb1a:	7812      	ldrb	r2, [r2, #0]
 800bb1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb36:	e011      	b.n	800bb5c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb38:	f7fb faa6 	bl	8007088 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d803      	bhi.n	800bb50 <HAL_SPI_Transmit+0x1f4>
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4e:	d102      	bne.n	800bb56 <HAL_SPI_Transmit+0x1fa>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb5a:	e026      	b.n	800bbaa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1cd      	bne.n	800bb02 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f000 fba4 	bl	800c2b8 <SPI_EndRxTxTransaction>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	77fb      	strb	r3, [r7, #31]
 800bba6:	e000      	b.n	800bbaa <HAL_SPI_Transmit+0x24e>
  }

error:
 800bba8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbba:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbe0:	d112      	bne.n	800bc08 <HAL_SPI_Receive+0x44>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10e      	bne.n	800bc08 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2204      	movs	r2, #4
 800bbee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbf2:	88fa      	ldrh	r2, [r7, #6]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 f8e9 	bl	800bdd6 <HAL_SPI_TransmitReceive>
 800bc04:	4603      	mov	r3, r0
 800bc06:	e0e2      	b.n	800bdce <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d101      	bne.n	800bc16 <HAL_SPI_Receive+0x52>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e0db      	b.n	800bdce <HAL_SPI_Receive+0x20a>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc1e:	f7fb fa33 	bl	8007088 <HAL_GetTick>
 800bc22:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d002      	beq.n	800bc36 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc30:	2302      	movs	r3, #2
 800bc32:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc34:	e0c2      	b.n	800bdbc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <HAL_SPI_Receive+0x7e>
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc46:	e0b9      	b.n	800bdbc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2204      	movs	r2, #4
 800bc4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	88fa      	ldrh	r2, [r7, #6]
 800bc60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	88fa      	ldrh	r2, [r7, #6]
 800bc66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc8e:	d107      	bne.n	800bca0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcaa:	2b40      	cmp	r3, #64	; 0x40
 800bcac:	d007      	beq.n	800bcbe <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcbc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d162      	bne.n	800bd8c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bcc6:	e02e      	b.n	800bd26 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d115      	bne.n	800bd02 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f103 020c 	add.w	r2, r3, #12
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce2:	7812      	ldrb	r2, [r2, #0]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd00:	e011      	b.n	800bd26 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd02:	f7fb f9c1 	bl	8007088 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d803      	bhi.n	800bd1a <HAL_SPI_Receive+0x156>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d102      	bne.n	800bd20 <HAL_SPI_Receive+0x15c>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd24:	e04a      	b.n	800bdbc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1cb      	bne.n	800bcc8 <HAL_SPI_Receive+0x104>
 800bd30:	e031      	b.n	800bd96 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d113      	bne.n	800bd68 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	b292      	uxth	r2, r2
 800bd4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	1c9a      	adds	r2, r3, #2
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd66:	e011      	b.n	800bd8c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd68:	f7fb f98e 	bl	8007088 <HAL_GetTick>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d803      	bhi.n	800bd80 <HAL_SPI_Receive+0x1bc>
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7e:	d102      	bne.n	800bd86 <HAL_SPI_Receive+0x1c2>
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d102      	bne.n	800bd8c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd8a:	e017      	b.n	800bdbc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1cd      	bne.n	800bd32 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fa27 	bl	800c1ee <SPI_EndRxTransaction>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]
 800bdb8:	e000      	b.n	800bdbc <HAL_SPI_Receive+0x1f8>
  }

error :
 800bdba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b08c      	sub	sp, #48	; 0x30
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bde4:	2301      	movs	r3, #1
 800bde6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <HAL_SPI_TransmitReceive+0x26>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e18a      	b.n	800c112 <HAL_SPI_TransmitReceive+0x33c>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be04:	f7fb f940 	bl	8007088 <HAL_GetTick>
 800be08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800be1a:	887b      	ldrh	r3, [r7, #2]
 800be1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be22:	2b01      	cmp	r3, #1
 800be24:	d00f      	beq.n	800be46 <HAL_SPI_TransmitReceive+0x70>
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be2c:	d107      	bne.n	800be3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d103      	bne.n	800be3e <HAL_SPI_TransmitReceive+0x68>
 800be36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d003      	beq.n	800be46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800be3e:	2302      	movs	r3, #2
 800be40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be44:	e15b      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <HAL_SPI_TransmitReceive+0x82>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <HAL_SPI_TransmitReceive+0x82>
 800be52:	887b      	ldrh	r3, [r7, #2]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be5e:	e14e      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d003      	beq.n	800be74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2205      	movs	r2, #5
 800be70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	887a      	ldrh	r2, [r7, #2]
 800be84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	887a      	ldrh	r2, [r7, #2]
 800be8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	887a      	ldrh	r2, [r7, #2]
 800be96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	887a      	ldrh	r2, [r7, #2]
 800be9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d007      	beq.n	800bec8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bed0:	d178      	bne.n	800bfc4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <HAL_SPI_TransmitReceive+0x10a>
 800beda:	8b7b      	ldrh	r3, [r7, #26]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d166      	bne.n	800bfae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee4:	881a      	ldrh	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef0:	1c9a      	adds	r2, r3, #2
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800befa:	b29b      	uxth	r3, r3
 800befc:	3b01      	subs	r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf04:	e053      	b.n	800bfae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f003 0302 	and.w	r3, r3, #2
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d11b      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x176>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d016      	beq.n	800bf4c <HAL_SPI_TransmitReceive+0x176>
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d113      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	881a      	ldrh	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf34:	1c9a      	adds	r2, r3, #2
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d119      	bne.n	800bf8e <HAL_SPI_TransmitReceive+0x1b8>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d014      	beq.n	800bf8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	1c9a      	adds	r2, r3, #2
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	3b01      	subs	r3, #1
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf8e:	f7fb f87b 	bl	8007088 <HAL_GetTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d807      	bhi.n	800bfae <HAL_SPI_TransmitReceive+0x1d8>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa4:	d003      	beq.n	800bfae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bfac:	e0a7      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1a6      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x130>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1a1      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x130>
 800bfc2:	e07c      	b.n	800c0be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <HAL_SPI_TransmitReceive+0x1fc>
 800bfcc:	8b7b      	ldrh	r3, [r7, #26]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d16b      	bne.n	800c0aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	7812      	ldrb	r2, [r2, #0]
 800bfde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bff8:	e057      	b.n	800c0aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b02      	cmp	r3, #2
 800c006:	d11c      	bne.n	800c042 <HAL_SPI_TransmitReceive+0x26c>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d017      	beq.n	800c042 <HAL_SPI_TransmitReceive+0x26c>
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	2b01      	cmp	r3, #1
 800c016:	d114      	bne.n	800c042 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	330c      	adds	r3, #12
 800c022:	7812      	ldrb	r2, [r2, #0]
 800c024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c034:	b29b      	uxth	r3, r3
 800c036:	3b01      	subs	r3, #1
 800c038:	b29a      	uxth	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d119      	bne.n	800c084 <HAL_SPI_TransmitReceive+0x2ae>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d014      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c064:	b2d2      	uxtb	r2, r2
 800c066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06c:	1c5a      	adds	r2, r3, #1
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c076:	b29b      	uxth	r3, r3
 800c078:	3b01      	subs	r3, #1
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c080:	2301      	movs	r3, #1
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c084:	f7fb f800 	bl	8007088 <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c090:	429a      	cmp	r2, r3
 800c092:	d803      	bhi.n	800c09c <HAL_SPI_TransmitReceive+0x2c6>
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d102      	bne.n	800c0a2 <HAL_SPI_TransmitReceive+0x2cc>
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d103      	bne.n	800c0aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c0a8:	e029      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1a2      	bne.n	800bffa <HAL_SPI_TransmitReceive+0x224>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d19d      	bne.n	800bffa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 f8f8 	bl	800c2b8 <SPI_EndRxTxTransaction>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d006      	beq.n	800c0dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2220      	movs	r2, #32
 800c0d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c0da:	e010      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10b      	bne.n	800c0fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	617b      	str	r3, [r7, #20]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	e000      	b.n	800c0fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c0fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c10e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c112:	4618      	mov	r0, r3
 800c114:	3730      	adds	r7, #48	; 0x30
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	603b      	str	r3, [r7, #0]
 800c126:	4613      	mov	r3, r2
 800c128:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c12a:	e04c      	b.n	800c1c6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c132:	d048      	beq.n	800c1c6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c134:	f7fa ffa8 	bl	8007088 <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	d902      	bls.n	800c14a <SPI_WaitFlagStateUntilTimeout+0x30>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d13d      	bne.n	800c1c6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c162:	d111      	bne.n	800c188 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c16c:	d004      	beq.n	800c178 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c176:	d107      	bne.n	800c188 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c190:	d10f      	bne.n	800c1b2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e00f      	b.n	800c1e6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bf0c      	ite	eq
 800c1d6:	2301      	moveq	r3, #1
 800c1d8:	2300      	movne	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	461a      	mov	r2, r3
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d1a3      	bne.n	800c12c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b086      	sub	sp, #24
 800c1f2:	af02      	add	r7, sp, #8
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c202:	d111      	bne.n	800c228 <SPI_EndRxTransaction+0x3a>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c20c:	d004      	beq.n	800c218 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c216:	d107      	bne.n	800c228 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c226:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c230:	d12a      	bne.n	800c288 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c23a:	d012      	beq.n	800c262 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2200      	movs	r2, #0
 800c244:	2180      	movs	r1, #128	; 0x80
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff ff67 	bl	800c11a <SPI_WaitFlagStateUntilTimeout>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d02d      	beq.n	800c2ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c256:	f043 0220 	orr.w	r2, r3, #32
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c25e:	2303      	movs	r3, #3
 800c260:	e026      	b.n	800c2b0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2200      	movs	r2, #0
 800c26a:	2101      	movs	r1, #1
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff ff54 	bl	800c11a <SPI_WaitFlagStateUntilTimeout>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01a      	beq.n	800c2ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c27c:	f043 0220 	orr.w	r2, r3, #32
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e013      	b.n	800c2b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2200      	movs	r2, #0
 800c290:	2101      	movs	r1, #1
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff ff41 	bl	800c11a <SPI_WaitFlagStateUntilTimeout>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a2:	f043 0220 	orr.w	r2, r3, #32
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e000      	b.n	800c2b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c2c4:	4b1b      	ldr	r3, [pc, #108]	; (800c334 <SPI_EndRxTxTransaction+0x7c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a1b      	ldr	r2, [pc, #108]	; (800c338 <SPI_EndRxTxTransaction+0x80>)
 800c2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ce:	0d5b      	lsrs	r3, r3, #21
 800c2d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2d4:	fb02 f303 	mul.w	r3, r2, r3
 800c2d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2e2:	d112      	bne.n	800c30a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2180      	movs	r1, #128	; 0x80
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f7ff ff13 	bl	800c11a <SPI_WaitFlagStateUntilTimeout>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d016      	beq.n	800c328 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fe:	f043 0220 	orr.w	r2, r3, #32
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e00f      	b.n	800c32a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00a      	beq.n	800c326 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	3b01      	subs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c320:	2b80      	cmp	r3, #128	; 0x80
 800c322:	d0f2      	beq.n	800c30a <SPI_EndRxTxTransaction+0x52>
 800c324:	e000      	b.n	800c328 <SPI_EndRxTxTransaction+0x70>
        break;
 800c326:	bf00      	nop
  }

  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	20000000 	.word	0x20000000
 800c338:	165e9f81 	.word	0x165e9f81

0800c33c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e01d      	b.n	800c38a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7f8 ffd2 	bl	800530c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f000 fb56 	bl	800ca2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f042 0201 	orr.w	r2, r2, #1
 800c3a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f003 0307 	and.w	r3, r3, #7
 800c3b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b06      	cmp	r3, #6
 800c3ba:	d007      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0201 	orr.w	r2, r2, #1
 800c3ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e01d      	b.n	800c428 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d106      	bne.n	800c406 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7f8 ff0f 	bl	8005224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2202      	movs	r2, #2
 800c40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3304      	adds	r3, #4
 800c416:	4619      	mov	r1, r3
 800c418:	4610      	mov	r0, r2
 800c41a:	f000 fb07 	bl	800ca2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2201      	movs	r2, #1
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fd42 	bl	800cecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a15      	ldr	r2, [pc, #84]	; (800c4a4 <HAL_TIM_PWM_Start+0x74>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d004      	beq.n	800c45c <HAL_TIM_PWM_Start+0x2c>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a14      	ldr	r2, [pc, #80]	; (800c4a8 <HAL_TIM_PWM_Start+0x78>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d101      	bne.n	800c460 <HAL_TIM_PWM_Start+0x30>
 800c45c:	2301      	movs	r3, #1
 800c45e:	e000      	b.n	800c462 <HAL_TIM_PWM_Start+0x32>
 800c460:	2300      	movs	r3, #0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d007      	beq.n	800c476 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b06      	cmp	r3, #6
 800c486:	d007      	beq.n	800c498 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0201 	orr.w	r2, r2, #1
 800c496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	40010000 	.word	0x40010000
 800c4a8:	40010400 	.word	0x40010400

0800c4ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e083      	b.n	800c5c8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7f8 ffa9 	bl	800542c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	6812      	ldr	r2, [r2, #0]
 800c4ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4f0:	f023 0307 	bic.w	r3, r3, #7
 800c4f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	4619      	mov	r1, r3
 800c500:	4610      	mov	r0, r2
 800c502:	f000 fa93 	bl	800ca2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	4313      	orrs	r3, r2
 800c526:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c52e:	f023 0303 	bic.w	r3, r3, #3
 800c532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	4313      	orrs	r3, r2
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	4313      	orrs	r3, r2
 800c544:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c54c:	f023 030c 	bic.w	r3, r3, #12
 800c550:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c55c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68da      	ldr	r2, [r3, #12]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	021b      	lsls	r3, r3, #8
 800c568:	4313      	orrs	r3, r2
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	011a      	lsls	r2, r3, #4
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	031b      	lsls	r3, r3, #12
 800c57c:	4313      	orrs	r3, r2
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	4313      	orrs	r3, r2
 800c582:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c58a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c592:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <HAL_TIM_Encoder_Start+0x16>
 800c5e0:	2b04      	cmp	r3, #4
 800c5e2:	d008      	beq.n	800c5f6 <HAL_TIM_Encoder_Start+0x26>
 800c5e4:	e00f      	b.n	800c606 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fc6c 	bl	800cecc <TIM_CCxChannelCmd>
      break;
 800c5f4:	e016      	b.n	800c624 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fc64 	bl	800cecc <TIM_CCxChannelCmd>
      break;
 800c604:	e00e      	b.n	800c624 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2201      	movs	r2, #1
 800c60c:	2100      	movs	r1, #0
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fc5c 	bl	800cecc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2201      	movs	r2, #1
 800c61a:	2104      	movs	r1, #4
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 fc55 	bl	800cecc <TIM_CCxChannelCmd>
      break;
 800c622:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f042 0201 	orr.w	r2, r2, #1
 800c632:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b02      	cmp	r3, #2
 800c652:	d122      	bne.n	800c69a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f003 0302 	and.w	r3, r3, #2
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d11b      	bne.n	800c69a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f06f 0202 	mvn.w	r2, #2
 800c66a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d003      	beq.n	800c688 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f9b5 	bl	800c9f0 <HAL_TIM_IC_CaptureCallback>
 800c686:	e005      	b.n	800c694 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f9a7 	bl	800c9dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f9b8 	bl	800ca04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d122      	bne.n	800c6ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d11b      	bne.n	800c6ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f06f 0204 	mvn.w	r2, #4
 800c6be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f98b 	bl	800c9f0 <HAL_TIM_IC_CaptureCallback>
 800c6da:	e005      	b.n	800c6e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f97d 	bl	800c9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f98e 	bl	800ca04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	f003 0308 	and.w	r3, r3, #8
 800c6f8:	2b08      	cmp	r3, #8
 800c6fa:	d122      	bne.n	800c742 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b08      	cmp	r3, #8
 800c708:	d11b      	bne.n	800c742 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f06f 0208 	mvn.w	r2, #8
 800c712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2204      	movs	r2, #4
 800c718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f961 	bl	800c9f0 <HAL_TIM_IC_CaptureCallback>
 800c72e:	e005      	b.n	800c73c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f953 	bl	800c9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f964 	bl	800ca04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	2b10      	cmp	r3, #16
 800c74e:	d122      	bne.n	800c796 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	f003 0310 	and.w	r3, r3, #16
 800c75a:	2b10      	cmp	r3, #16
 800c75c:	d11b      	bne.n	800c796 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f06f 0210 	mvn.w	r2, #16
 800c766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2208      	movs	r2, #8
 800c76c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f937 	bl	800c9f0 <HAL_TIM_IC_CaptureCallback>
 800c782:	e005      	b.n	800c790 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f929 	bl	800c9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f93a 	bl	800ca04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d10e      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d107      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f06f 0201 	mvn.w	r2, #1
 800c7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7f7 fb0b 	bl	8003dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7cc:	2b80      	cmp	r3, #128	; 0x80
 800c7ce:	d10e      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7da:	2b80      	cmp	r3, #128	; 0x80
 800c7dc:	d107      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fc6d 	bl	800d0c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f8:	2b40      	cmp	r3, #64	; 0x40
 800c7fa:	d10e      	bne.n	800c81a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b40      	cmp	r3, #64	; 0x40
 800c808:	d107      	bne.n	800c81a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f8ff 	bl	800ca18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b20      	cmp	r3, #32
 800c826:	d10e      	bne.n	800c846 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b20      	cmp	r3, #32
 800c834:	d107      	bne.n	800c846 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f06f 0220 	mvn.w	r2, #32
 800c83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fc37 	bl	800d0b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c846:	bf00      	nop
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c866:	2302      	movs	r3, #2
 800c868:	e0b4      	b.n	800c9d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2202      	movs	r2, #2
 800c876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b0c      	cmp	r3, #12
 800c87e:	f200 809f 	bhi.w	800c9c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c882:	a201      	add	r2, pc, #4	; (adr r2, 800c888 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c888:	0800c8bd 	.word	0x0800c8bd
 800c88c:	0800c9c1 	.word	0x0800c9c1
 800c890:	0800c9c1 	.word	0x0800c9c1
 800c894:	0800c9c1 	.word	0x0800c9c1
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c9c1 	.word	0x0800c9c1
 800c8a0:	0800c9c1 	.word	0x0800c9c1
 800c8a4:	0800c9c1 	.word	0x0800c9c1
 800c8a8:	0800c93f 	.word	0x0800c93f
 800c8ac:	0800c9c1 	.word	0x0800c9c1
 800c8b0:	0800c9c1 	.word	0x0800c9c1
 800c8b4:	0800c9c1 	.word	0x0800c9c1
 800c8b8:	0800c97f 	.word	0x0800c97f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f952 	bl	800cb6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	699a      	ldr	r2, [r3, #24]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f042 0208 	orr.w	r2, r2, #8
 800c8d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 0204 	bic.w	r2, r2, #4
 800c8e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6999      	ldr	r1, [r3, #24]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	691a      	ldr	r2, [r3, #16]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	430a      	orrs	r2, r1
 800c8f8:	619a      	str	r2, [r3, #24]
      break;
 800c8fa:	e062      	b.n	800c9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f9a2 	bl	800cc4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699a      	ldr	r2, [r3, #24]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	699a      	ldr	r2, [r3, #24]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6999      	ldr	r1, [r3, #24]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	021a      	lsls	r2, r3, #8
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	430a      	orrs	r2, r1
 800c93a:	619a      	str	r2, [r3, #24]
      break;
 800c93c:	e041      	b.n	800c9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f9f7 	bl	800cd38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	69da      	ldr	r2, [r3, #28]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0208 	orr.w	r2, r2, #8
 800c958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	69da      	ldr	r2, [r3, #28]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f022 0204 	bic.w	r2, r2, #4
 800c968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	69d9      	ldr	r1, [r3, #28]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	691a      	ldr	r2, [r3, #16]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	61da      	str	r2, [r3, #28]
      break;
 800c97c:	e021      	b.n	800c9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fa4b 	bl	800ce20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	69da      	ldr	r2, [r3, #28]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	69da      	ldr	r2, [r3, #28]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69d9      	ldr	r1, [r3, #28]
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	021a      	lsls	r2, r3, #8
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	61da      	str	r2, [r3, #28]
      break;
 800c9be:	e000      	b.n	800c9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c9c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a40      	ldr	r2, [pc, #256]	; (800cb40 <TIM_Base_SetConfig+0x114>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d013      	beq.n	800ca6c <TIM_Base_SetConfig+0x40>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca4a:	d00f      	beq.n	800ca6c <TIM_Base_SetConfig+0x40>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a3d      	ldr	r2, [pc, #244]	; (800cb44 <TIM_Base_SetConfig+0x118>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d00b      	beq.n	800ca6c <TIM_Base_SetConfig+0x40>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a3c      	ldr	r2, [pc, #240]	; (800cb48 <TIM_Base_SetConfig+0x11c>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d007      	beq.n	800ca6c <TIM_Base_SetConfig+0x40>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a3b      	ldr	r2, [pc, #236]	; (800cb4c <TIM_Base_SetConfig+0x120>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <TIM_Base_SetConfig+0x40>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a3a      	ldr	r2, [pc, #232]	; (800cb50 <TIM_Base_SetConfig+0x124>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d108      	bne.n	800ca7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a2f      	ldr	r2, [pc, #188]	; (800cb40 <TIM_Base_SetConfig+0x114>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d02b      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca8c:	d027      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a2c      	ldr	r2, [pc, #176]	; (800cb44 <TIM_Base_SetConfig+0x118>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d023      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a2b      	ldr	r2, [pc, #172]	; (800cb48 <TIM_Base_SetConfig+0x11c>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d01f      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a2a      	ldr	r2, [pc, #168]	; (800cb4c <TIM_Base_SetConfig+0x120>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d01b      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a29      	ldr	r2, [pc, #164]	; (800cb50 <TIM_Base_SetConfig+0x124>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d017      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a28      	ldr	r2, [pc, #160]	; (800cb54 <TIM_Base_SetConfig+0x128>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d013      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a27      	ldr	r2, [pc, #156]	; (800cb58 <TIM_Base_SetConfig+0x12c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00f      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a26      	ldr	r2, [pc, #152]	; (800cb5c <TIM_Base_SetConfig+0x130>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00b      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a25      	ldr	r2, [pc, #148]	; (800cb60 <TIM_Base_SetConfig+0x134>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d007      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a24      	ldr	r2, [pc, #144]	; (800cb64 <TIM_Base_SetConfig+0x138>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d003      	beq.n	800cade <TIM_Base_SetConfig+0xb2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a23      	ldr	r2, [pc, #140]	; (800cb68 <TIM_Base_SetConfig+0x13c>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d108      	bne.n	800caf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	4313      	orrs	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a0a      	ldr	r2, [pc, #40]	; (800cb40 <TIM_Base_SetConfig+0x114>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d003      	beq.n	800cb24 <TIM_Base_SetConfig+0xf8>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a0c      	ldr	r2, [pc, #48]	; (800cb50 <TIM_Base_SetConfig+0x124>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d103      	bne.n	800cb2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	691a      	ldr	r2, [r3, #16]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	615a      	str	r2, [r3, #20]
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	40010000 	.word	0x40010000
 800cb44:	40000400 	.word	0x40000400
 800cb48:	40000800 	.word	0x40000800
 800cb4c:	40000c00 	.word	0x40000c00
 800cb50:	40010400 	.word	0x40010400
 800cb54:	40014000 	.word	0x40014000
 800cb58:	40014400 	.word	0x40014400
 800cb5c:	40014800 	.word	0x40014800
 800cb60:	40001800 	.word	0x40001800
 800cb64:	40001c00 	.word	0x40001c00
 800cb68:	40002000 	.word	0x40002000

0800cb6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	f023 0201 	bic.w	r2, r3, #1
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f023 0303 	bic.w	r3, r3, #3
 800cba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f023 0302 	bic.w	r3, r3, #2
 800cbb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a20      	ldr	r2, [pc, #128]	; (800cc44 <TIM_OC1_SetConfig+0xd8>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d003      	beq.n	800cbd0 <TIM_OC1_SetConfig+0x64>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a1f      	ldr	r2, [pc, #124]	; (800cc48 <TIM_OC1_SetConfig+0xdc>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d10c      	bne.n	800cbea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f023 0308 	bic.w	r3, r3, #8
 800cbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f023 0304 	bic.w	r3, r3, #4
 800cbe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a15      	ldr	r2, [pc, #84]	; (800cc44 <TIM_OC1_SetConfig+0xd8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d003      	beq.n	800cbfa <TIM_OC1_SetConfig+0x8e>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a14      	ldr	r2, [pc, #80]	; (800cc48 <TIM_OC1_SetConfig+0xdc>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d111      	bne.n	800cc1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	693a      	ldr	r2, [r7, #16]
 800cc22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	621a      	str	r2, [r3, #32]
}
 800cc38:	bf00      	nop
 800cc3a:	371c      	adds	r7, #28
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	40010000 	.word	0x40010000
 800cc48:	40010400 	.word	0x40010400

0800cc4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f023 0210 	bic.w	r2, r3, #16
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	021b      	lsls	r3, r3, #8
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f023 0320 	bic.w	r3, r3, #32
 800cc96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	011b      	lsls	r3, r3, #4
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a22      	ldr	r2, [pc, #136]	; (800cd30 <TIM_OC2_SetConfig+0xe4>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d003      	beq.n	800ccb4 <TIM_OC2_SetConfig+0x68>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a21      	ldr	r2, [pc, #132]	; (800cd34 <TIM_OC2_SetConfig+0xe8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d10d      	bne.n	800ccd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	011b      	lsls	r3, r3, #4
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a17      	ldr	r2, [pc, #92]	; (800cd30 <TIM_OC2_SetConfig+0xe4>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d003      	beq.n	800cce0 <TIM_OC2_SetConfig+0x94>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a16      	ldr	r2, [pc, #88]	; (800cd34 <TIM_OC2_SetConfig+0xe8>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d113      	bne.n	800cd08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	621a      	str	r2, [r3, #32]
}
 800cd22:	bf00      	nop
 800cd24:	371c      	adds	r7, #28
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	40010000 	.word	0x40010000
 800cd34:	40010400 	.word	0x40010400

0800cd38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	021b      	lsls	r3, r3, #8
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a21      	ldr	r2, [pc, #132]	; (800ce18 <TIM_OC3_SetConfig+0xe0>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d003      	beq.n	800cd9e <TIM_OC3_SetConfig+0x66>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a20      	ldr	r2, [pc, #128]	; (800ce1c <TIM_OC3_SetConfig+0xe4>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d10d      	bne.n	800cdba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cda4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	021b      	lsls	r3, r3, #8
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a16      	ldr	r2, [pc, #88]	; (800ce18 <TIM_OC3_SetConfig+0xe0>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d003      	beq.n	800cdca <TIM_OC3_SetConfig+0x92>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a15      	ldr	r2, [pc, #84]	; (800ce1c <TIM_OC3_SetConfig+0xe4>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d113      	bne.n	800cdf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	011b      	lsls	r3, r3, #4
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	621a      	str	r2, [r3, #32]
}
 800ce0c:	bf00      	nop
 800ce0e:	371c      	adds	r7, #28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	40010000 	.word	0x40010000
 800ce1c:	40010400 	.word	0x40010400

0800ce20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	031b      	lsls	r3, r3, #12
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a12      	ldr	r2, [pc, #72]	; (800cec4 <TIM_OC4_SetConfig+0xa4>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d003      	beq.n	800ce88 <TIM_OC4_SetConfig+0x68>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <TIM_OC4_SetConfig+0xa8>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d109      	bne.n	800ce9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	695b      	ldr	r3, [r3, #20]
 800ce94:	019b      	lsls	r3, r3, #6
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	621a      	str	r2, [r3, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	40010000 	.word	0x40010000
 800cec8:	40010400 	.word	0x40010400

0800cecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cecc:	b480      	push	{r7}
 800cece:	b087      	sub	sp, #28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f003 031f 	and.w	r3, r3, #31
 800cede:	2201      	movs	r2, #1
 800cee0:	fa02 f303 	lsl.w	r3, r2, r3
 800cee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6a1a      	ldr	r2, [r3, #32]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	43db      	mvns	r3, r3
 800ceee:	401a      	ands	r2, r3
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6a1a      	ldr	r2, [r3, #32]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f003 031f 	and.w	r3, r3, #31
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	fa01 f303 	lsl.w	r3, r1, r3
 800cf04:	431a      	orrs	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	621a      	str	r2, [r3, #32]
}
 800cf0a:	bf00      	nop
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
	...

0800cf18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d101      	bne.n	800cf30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	e05a      	b.n	800cfe6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a21      	ldr	r2, [pc, #132]	; (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d022      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7c:	d01d      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a1d      	ldr	r2, [pc, #116]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d018      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a1b      	ldr	r2, [pc, #108]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d013      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a1a      	ldr	r2, [pc, #104]	; (800d000 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d00e      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a18      	ldr	r2, [pc, #96]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d009      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d004      	beq.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a15      	ldr	r2, [pc, #84]	; (800d00c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d10c      	bne.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	40010000 	.word	0x40010000
 800cff8:	40000400 	.word	0x40000400
 800cffc:	40000800 	.word	0x40000800
 800d000:	40000c00 	.word	0x40000c00
 800d004:	40010400 	.word	0x40010400
 800d008:	40014000 	.word	0x40014000
 800d00c:	40001800 	.word	0x40001800

0800d010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d024:	2b01      	cmp	r3, #1
 800d026:	d101      	bne.n	800d02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d028:	2302      	movs	r3, #2
 800d02a:	e03d      	b.n	800d0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4313      	orrs	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	4313      	orrs	r3, r2
 800d078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	4313      	orrs	r3, r2
 800d094:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e03f      	b.n	800d16e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7f8 fabc 	bl	8005680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2224      	movs	r2, #36	; 0x24
 800d10c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d11e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f829 	bl	800d178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	691a      	ldr	r2, [r3, #16]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	695a      	ldr	r2, [r3, #20]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2220      	movs	r2, #32
 800d160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2220      	movs	r2, #32
 800d168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	430a      	orrs	r2, r1
 800d196:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689a      	ldr	r2, [r3, #8]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	69db      	ldr	r3, [r3, #28]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d1ba:	f023 030c 	bic.w	r3, r3, #12
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	6812      	ldr	r2, [r2, #0]
 800d1c2:	68f9      	ldr	r1, [r7, #12]
 800d1c4:	430b      	orrs	r3, r1
 800d1c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	699a      	ldr	r2, [r3, #24]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	430a      	orrs	r2, r1
 800d1dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1e6:	f040 818b 	bne.w	800d500 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4ac1      	ldr	r2, [pc, #772]	; (800d4f4 <UART_SetConfig+0x37c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d005      	beq.n	800d200 <UART_SetConfig+0x88>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4abf      	ldr	r2, [pc, #764]	; (800d4f8 <UART_SetConfig+0x380>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	f040 80bd 	bne.w	800d37a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d200:	f7fc fbcc 	bl	800999c <HAL_RCC_GetPCLK2Freq>
 800d204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	461d      	mov	r5, r3
 800d20a:	f04f 0600 	mov.w	r6, #0
 800d20e:	46a8      	mov	r8, r5
 800d210:	46b1      	mov	r9, r6
 800d212:	eb18 0308 	adds.w	r3, r8, r8
 800d216:	eb49 0409 	adc.w	r4, r9, r9
 800d21a:	4698      	mov	r8, r3
 800d21c:	46a1      	mov	r9, r4
 800d21e:	eb18 0805 	adds.w	r8, r8, r5
 800d222:	eb49 0906 	adc.w	r9, r9, r6
 800d226:	f04f 0100 	mov.w	r1, #0
 800d22a:	f04f 0200 	mov.w	r2, #0
 800d22e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d23a:	4688      	mov	r8, r1
 800d23c:	4691      	mov	r9, r2
 800d23e:	eb18 0005 	adds.w	r0, r8, r5
 800d242:	eb49 0106 	adc.w	r1, r9, r6
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	461d      	mov	r5, r3
 800d24c:	f04f 0600 	mov.w	r6, #0
 800d250:	196b      	adds	r3, r5, r5
 800d252:	eb46 0406 	adc.w	r4, r6, r6
 800d256:	461a      	mov	r2, r3
 800d258:	4623      	mov	r3, r4
 800d25a:	f7f3 fd2d 	bl	8000cb8 <__aeabi_uldivmod>
 800d25e:	4603      	mov	r3, r0
 800d260:	460c      	mov	r4, r1
 800d262:	461a      	mov	r2, r3
 800d264:	4ba5      	ldr	r3, [pc, #660]	; (800d4fc <UART_SetConfig+0x384>)
 800d266:	fba3 2302 	umull	r2, r3, r3, r2
 800d26a:	095b      	lsrs	r3, r3, #5
 800d26c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	461d      	mov	r5, r3
 800d274:	f04f 0600 	mov.w	r6, #0
 800d278:	46a9      	mov	r9, r5
 800d27a:	46b2      	mov	sl, r6
 800d27c:	eb19 0309 	adds.w	r3, r9, r9
 800d280:	eb4a 040a 	adc.w	r4, sl, sl
 800d284:	4699      	mov	r9, r3
 800d286:	46a2      	mov	sl, r4
 800d288:	eb19 0905 	adds.w	r9, r9, r5
 800d28c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d290:	f04f 0100 	mov.w	r1, #0
 800d294:	f04f 0200 	mov.w	r2, #0
 800d298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d29c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2a4:	4689      	mov	r9, r1
 800d2a6:	4692      	mov	sl, r2
 800d2a8:	eb19 0005 	adds.w	r0, r9, r5
 800d2ac:	eb4a 0106 	adc.w	r1, sl, r6
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	461d      	mov	r5, r3
 800d2b6:	f04f 0600 	mov.w	r6, #0
 800d2ba:	196b      	adds	r3, r5, r5
 800d2bc:	eb46 0406 	adc.w	r4, r6, r6
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4623      	mov	r3, r4
 800d2c4:	f7f3 fcf8 	bl	8000cb8 <__aeabi_uldivmod>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	4b8b      	ldr	r3, [pc, #556]	; (800d4fc <UART_SetConfig+0x384>)
 800d2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d2d4:	095b      	lsrs	r3, r3, #5
 800d2d6:	2164      	movs	r1, #100	; 0x64
 800d2d8:	fb01 f303 	mul.w	r3, r1, r3
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	3332      	adds	r3, #50	; 0x32
 800d2e2:	4a86      	ldr	r2, [pc, #536]	; (800d4fc <UART_SetConfig+0x384>)
 800d2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e8:	095b      	lsrs	r3, r3, #5
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2f0:	4498      	add	r8, r3
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	461d      	mov	r5, r3
 800d2f6:	f04f 0600 	mov.w	r6, #0
 800d2fa:	46a9      	mov	r9, r5
 800d2fc:	46b2      	mov	sl, r6
 800d2fe:	eb19 0309 	adds.w	r3, r9, r9
 800d302:	eb4a 040a 	adc.w	r4, sl, sl
 800d306:	4699      	mov	r9, r3
 800d308:	46a2      	mov	sl, r4
 800d30a:	eb19 0905 	adds.w	r9, r9, r5
 800d30e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d312:	f04f 0100 	mov.w	r1, #0
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d31e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d326:	4689      	mov	r9, r1
 800d328:	4692      	mov	sl, r2
 800d32a:	eb19 0005 	adds.w	r0, r9, r5
 800d32e:	eb4a 0106 	adc.w	r1, sl, r6
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	461d      	mov	r5, r3
 800d338:	f04f 0600 	mov.w	r6, #0
 800d33c:	196b      	adds	r3, r5, r5
 800d33e:	eb46 0406 	adc.w	r4, r6, r6
 800d342:	461a      	mov	r2, r3
 800d344:	4623      	mov	r3, r4
 800d346:	f7f3 fcb7 	bl	8000cb8 <__aeabi_uldivmod>
 800d34a:	4603      	mov	r3, r0
 800d34c:	460c      	mov	r4, r1
 800d34e:	461a      	mov	r2, r3
 800d350:	4b6a      	ldr	r3, [pc, #424]	; (800d4fc <UART_SetConfig+0x384>)
 800d352:	fba3 1302 	umull	r1, r3, r3, r2
 800d356:	095b      	lsrs	r3, r3, #5
 800d358:	2164      	movs	r1, #100	; 0x64
 800d35a:	fb01 f303 	mul.w	r3, r1, r3
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	3332      	adds	r3, #50	; 0x32
 800d364:	4a65      	ldr	r2, [pc, #404]	; (800d4fc <UART_SetConfig+0x384>)
 800d366:	fba2 2303 	umull	r2, r3, r2, r3
 800d36a:	095b      	lsrs	r3, r3, #5
 800d36c:	f003 0207 	and.w	r2, r3, #7
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4442      	add	r2, r8
 800d376:	609a      	str	r2, [r3, #8]
 800d378:	e26f      	b.n	800d85a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d37a:	f7fc fafb 	bl	8009974 <HAL_RCC_GetPCLK1Freq>
 800d37e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	461d      	mov	r5, r3
 800d384:	f04f 0600 	mov.w	r6, #0
 800d388:	46a8      	mov	r8, r5
 800d38a:	46b1      	mov	r9, r6
 800d38c:	eb18 0308 	adds.w	r3, r8, r8
 800d390:	eb49 0409 	adc.w	r4, r9, r9
 800d394:	4698      	mov	r8, r3
 800d396:	46a1      	mov	r9, r4
 800d398:	eb18 0805 	adds.w	r8, r8, r5
 800d39c:	eb49 0906 	adc.w	r9, r9, r6
 800d3a0:	f04f 0100 	mov.w	r1, #0
 800d3a4:	f04f 0200 	mov.w	r2, #0
 800d3a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d3ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d3b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d3b4:	4688      	mov	r8, r1
 800d3b6:	4691      	mov	r9, r2
 800d3b8:	eb18 0005 	adds.w	r0, r8, r5
 800d3bc:	eb49 0106 	adc.w	r1, r9, r6
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	461d      	mov	r5, r3
 800d3c6:	f04f 0600 	mov.w	r6, #0
 800d3ca:	196b      	adds	r3, r5, r5
 800d3cc:	eb46 0406 	adc.w	r4, r6, r6
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4623      	mov	r3, r4
 800d3d4:	f7f3 fc70 	bl	8000cb8 <__aeabi_uldivmod>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	460c      	mov	r4, r1
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4b47      	ldr	r3, [pc, #284]	; (800d4fc <UART_SetConfig+0x384>)
 800d3e0:	fba3 2302 	umull	r2, r3, r3, r2
 800d3e4:	095b      	lsrs	r3, r3, #5
 800d3e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	461d      	mov	r5, r3
 800d3ee:	f04f 0600 	mov.w	r6, #0
 800d3f2:	46a9      	mov	r9, r5
 800d3f4:	46b2      	mov	sl, r6
 800d3f6:	eb19 0309 	adds.w	r3, r9, r9
 800d3fa:	eb4a 040a 	adc.w	r4, sl, sl
 800d3fe:	4699      	mov	r9, r3
 800d400:	46a2      	mov	sl, r4
 800d402:	eb19 0905 	adds.w	r9, r9, r5
 800d406:	eb4a 0a06 	adc.w	sl, sl, r6
 800d40a:	f04f 0100 	mov.w	r1, #0
 800d40e:	f04f 0200 	mov.w	r2, #0
 800d412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d41a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d41e:	4689      	mov	r9, r1
 800d420:	4692      	mov	sl, r2
 800d422:	eb19 0005 	adds.w	r0, r9, r5
 800d426:	eb4a 0106 	adc.w	r1, sl, r6
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	461d      	mov	r5, r3
 800d430:	f04f 0600 	mov.w	r6, #0
 800d434:	196b      	adds	r3, r5, r5
 800d436:	eb46 0406 	adc.w	r4, r6, r6
 800d43a:	461a      	mov	r2, r3
 800d43c:	4623      	mov	r3, r4
 800d43e:	f7f3 fc3b 	bl	8000cb8 <__aeabi_uldivmod>
 800d442:	4603      	mov	r3, r0
 800d444:	460c      	mov	r4, r1
 800d446:	461a      	mov	r2, r3
 800d448:	4b2c      	ldr	r3, [pc, #176]	; (800d4fc <UART_SetConfig+0x384>)
 800d44a:	fba3 1302 	umull	r1, r3, r3, r2
 800d44e:	095b      	lsrs	r3, r3, #5
 800d450:	2164      	movs	r1, #100	; 0x64
 800d452:	fb01 f303 	mul.w	r3, r1, r3
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	00db      	lsls	r3, r3, #3
 800d45a:	3332      	adds	r3, #50	; 0x32
 800d45c:	4a27      	ldr	r2, [pc, #156]	; (800d4fc <UART_SetConfig+0x384>)
 800d45e:	fba2 2303 	umull	r2, r3, r2, r3
 800d462:	095b      	lsrs	r3, r3, #5
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d46a:	4498      	add	r8, r3
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	461d      	mov	r5, r3
 800d470:	f04f 0600 	mov.w	r6, #0
 800d474:	46a9      	mov	r9, r5
 800d476:	46b2      	mov	sl, r6
 800d478:	eb19 0309 	adds.w	r3, r9, r9
 800d47c:	eb4a 040a 	adc.w	r4, sl, sl
 800d480:	4699      	mov	r9, r3
 800d482:	46a2      	mov	sl, r4
 800d484:	eb19 0905 	adds.w	r9, r9, r5
 800d488:	eb4a 0a06 	adc.w	sl, sl, r6
 800d48c:	f04f 0100 	mov.w	r1, #0
 800d490:	f04f 0200 	mov.w	r2, #0
 800d494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d49c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d4a0:	4689      	mov	r9, r1
 800d4a2:	4692      	mov	sl, r2
 800d4a4:	eb19 0005 	adds.w	r0, r9, r5
 800d4a8:	eb4a 0106 	adc.w	r1, sl, r6
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	461d      	mov	r5, r3
 800d4b2:	f04f 0600 	mov.w	r6, #0
 800d4b6:	196b      	adds	r3, r5, r5
 800d4b8:	eb46 0406 	adc.w	r4, r6, r6
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4623      	mov	r3, r4
 800d4c0:	f7f3 fbfa 	bl	8000cb8 <__aeabi_uldivmod>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	; (800d4fc <UART_SetConfig+0x384>)
 800d4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d4d0:	095b      	lsrs	r3, r3, #5
 800d4d2:	2164      	movs	r1, #100	; 0x64
 800d4d4:	fb01 f303 	mul.w	r3, r1, r3
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	3332      	adds	r3, #50	; 0x32
 800d4de:	4a07      	ldr	r2, [pc, #28]	; (800d4fc <UART_SetConfig+0x384>)
 800d4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e4:	095b      	lsrs	r3, r3, #5
 800d4e6:	f003 0207 	and.w	r2, r3, #7
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4442      	add	r2, r8
 800d4f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d4f2:	e1b2      	b.n	800d85a <UART_SetConfig+0x6e2>
 800d4f4:	40011000 	.word	0x40011000
 800d4f8:	40011400 	.word	0x40011400
 800d4fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4ad7      	ldr	r2, [pc, #860]	; (800d864 <UART_SetConfig+0x6ec>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d005      	beq.n	800d516 <UART_SetConfig+0x39e>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4ad6      	ldr	r2, [pc, #856]	; (800d868 <UART_SetConfig+0x6f0>)
 800d510:	4293      	cmp	r3, r2
 800d512:	f040 80d1 	bne.w	800d6b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d516:	f7fc fa41 	bl	800999c <HAL_RCC_GetPCLK2Freq>
 800d51a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	469a      	mov	sl, r3
 800d520:	f04f 0b00 	mov.w	fp, #0
 800d524:	46d0      	mov	r8, sl
 800d526:	46d9      	mov	r9, fp
 800d528:	eb18 0308 	adds.w	r3, r8, r8
 800d52c:	eb49 0409 	adc.w	r4, r9, r9
 800d530:	4698      	mov	r8, r3
 800d532:	46a1      	mov	r9, r4
 800d534:	eb18 080a 	adds.w	r8, r8, sl
 800d538:	eb49 090b 	adc.w	r9, r9, fp
 800d53c:	f04f 0100 	mov.w	r1, #0
 800d540:	f04f 0200 	mov.w	r2, #0
 800d544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d54c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d550:	4688      	mov	r8, r1
 800d552:	4691      	mov	r9, r2
 800d554:	eb1a 0508 	adds.w	r5, sl, r8
 800d558:	eb4b 0609 	adc.w	r6, fp, r9
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4619      	mov	r1, r3
 800d562:	f04f 0200 	mov.w	r2, #0
 800d566:	f04f 0300 	mov.w	r3, #0
 800d56a:	f04f 0400 	mov.w	r4, #0
 800d56e:	0094      	lsls	r4, r2, #2
 800d570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d574:	008b      	lsls	r3, r1, #2
 800d576:	461a      	mov	r2, r3
 800d578:	4623      	mov	r3, r4
 800d57a:	4628      	mov	r0, r5
 800d57c:	4631      	mov	r1, r6
 800d57e:	f7f3 fb9b 	bl	8000cb8 <__aeabi_uldivmod>
 800d582:	4603      	mov	r3, r0
 800d584:	460c      	mov	r4, r1
 800d586:	461a      	mov	r2, r3
 800d588:	4bb8      	ldr	r3, [pc, #736]	; (800d86c <UART_SetConfig+0x6f4>)
 800d58a:	fba3 2302 	umull	r2, r3, r3, r2
 800d58e:	095b      	lsrs	r3, r3, #5
 800d590:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	469b      	mov	fp, r3
 800d598:	f04f 0c00 	mov.w	ip, #0
 800d59c:	46d9      	mov	r9, fp
 800d59e:	46e2      	mov	sl, ip
 800d5a0:	eb19 0309 	adds.w	r3, r9, r9
 800d5a4:	eb4a 040a 	adc.w	r4, sl, sl
 800d5a8:	4699      	mov	r9, r3
 800d5aa:	46a2      	mov	sl, r4
 800d5ac:	eb19 090b 	adds.w	r9, r9, fp
 800d5b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d5b4:	f04f 0100 	mov.w	r1, #0
 800d5b8:	f04f 0200 	mov.w	r2, #0
 800d5bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d5c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d5c8:	4689      	mov	r9, r1
 800d5ca:	4692      	mov	sl, r2
 800d5cc:	eb1b 0509 	adds.w	r5, fp, r9
 800d5d0:	eb4c 060a 	adc.w	r6, ip, sl
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f04f 0200 	mov.w	r2, #0
 800d5de:	f04f 0300 	mov.w	r3, #0
 800d5e2:	f04f 0400 	mov.w	r4, #0
 800d5e6:	0094      	lsls	r4, r2, #2
 800d5e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5ec:	008b      	lsls	r3, r1, #2
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	f7f3 fb5f 	bl	8000cb8 <__aeabi_uldivmod>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	461a      	mov	r2, r3
 800d600:	4b9a      	ldr	r3, [pc, #616]	; (800d86c <UART_SetConfig+0x6f4>)
 800d602:	fba3 1302 	umull	r1, r3, r3, r2
 800d606:	095b      	lsrs	r3, r3, #5
 800d608:	2164      	movs	r1, #100	; 0x64
 800d60a:	fb01 f303 	mul.w	r3, r1, r3
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	011b      	lsls	r3, r3, #4
 800d612:	3332      	adds	r3, #50	; 0x32
 800d614:	4a95      	ldr	r2, [pc, #596]	; (800d86c <UART_SetConfig+0x6f4>)
 800d616:	fba2 2303 	umull	r2, r3, r2, r3
 800d61a:	095b      	lsrs	r3, r3, #5
 800d61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d620:	4498      	add	r8, r3
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	469b      	mov	fp, r3
 800d626:	f04f 0c00 	mov.w	ip, #0
 800d62a:	46d9      	mov	r9, fp
 800d62c:	46e2      	mov	sl, ip
 800d62e:	eb19 0309 	adds.w	r3, r9, r9
 800d632:	eb4a 040a 	adc.w	r4, sl, sl
 800d636:	4699      	mov	r9, r3
 800d638:	46a2      	mov	sl, r4
 800d63a:	eb19 090b 	adds.w	r9, r9, fp
 800d63e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d642:	f04f 0100 	mov.w	r1, #0
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d64e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d656:	4689      	mov	r9, r1
 800d658:	4692      	mov	sl, r2
 800d65a:	eb1b 0509 	adds.w	r5, fp, r9
 800d65e:	eb4c 060a 	adc.w	r6, ip, sl
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	4619      	mov	r1, r3
 800d668:	f04f 0200 	mov.w	r2, #0
 800d66c:	f04f 0300 	mov.w	r3, #0
 800d670:	f04f 0400 	mov.w	r4, #0
 800d674:	0094      	lsls	r4, r2, #2
 800d676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d67a:	008b      	lsls	r3, r1, #2
 800d67c:	461a      	mov	r2, r3
 800d67e:	4623      	mov	r3, r4
 800d680:	4628      	mov	r0, r5
 800d682:	4631      	mov	r1, r6
 800d684:	f7f3 fb18 	bl	8000cb8 <__aeabi_uldivmod>
 800d688:	4603      	mov	r3, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	461a      	mov	r2, r3
 800d68e:	4b77      	ldr	r3, [pc, #476]	; (800d86c <UART_SetConfig+0x6f4>)
 800d690:	fba3 1302 	umull	r1, r3, r3, r2
 800d694:	095b      	lsrs	r3, r3, #5
 800d696:	2164      	movs	r1, #100	; 0x64
 800d698:	fb01 f303 	mul.w	r3, r1, r3
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	011b      	lsls	r3, r3, #4
 800d6a0:	3332      	adds	r3, #50	; 0x32
 800d6a2:	4a72      	ldr	r2, [pc, #456]	; (800d86c <UART_SetConfig+0x6f4>)
 800d6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a8:	095b      	lsrs	r3, r3, #5
 800d6aa:	f003 020f 	and.w	r2, r3, #15
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4442      	add	r2, r8
 800d6b4:	609a      	str	r2, [r3, #8]
 800d6b6:	e0d0      	b.n	800d85a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d6b8:	f7fc f95c 	bl	8009974 <HAL_RCC_GetPCLK1Freq>
 800d6bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	469a      	mov	sl, r3
 800d6c2:	f04f 0b00 	mov.w	fp, #0
 800d6c6:	46d0      	mov	r8, sl
 800d6c8:	46d9      	mov	r9, fp
 800d6ca:	eb18 0308 	adds.w	r3, r8, r8
 800d6ce:	eb49 0409 	adc.w	r4, r9, r9
 800d6d2:	4698      	mov	r8, r3
 800d6d4:	46a1      	mov	r9, r4
 800d6d6:	eb18 080a 	adds.w	r8, r8, sl
 800d6da:	eb49 090b 	adc.w	r9, r9, fp
 800d6de:	f04f 0100 	mov.w	r1, #0
 800d6e2:	f04f 0200 	mov.w	r2, #0
 800d6e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d6ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d6ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d6f2:	4688      	mov	r8, r1
 800d6f4:	4691      	mov	r9, r2
 800d6f6:	eb1a 0508 	adds.w	r5, sl, r8
 800d6fa:	eb4b 0609 	adc.w	r6, fp, r9
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	4619      	mov	r1, r3
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	f04f 0300 	mov.w	r3, #0
 800d70c:	f04f 0400 	mov.w	r4, #0
 800d710:	0094      	lsls	r4, r2, #2
 800d712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d716:	008b      	lsls	r3, r1, #2
 800d718:	461a      	mov	r2, r3
 800d71a:	4623      	mov	r3, r4
 800d71c:	4628      	mov	r0, r5
 800d71e:	4631      	mov	r1, r6
 800d720:	f7f3 faca 	bl	8000cb8 <__aeabi_uldivmod>
 800d724:	4603      	mov	r3, r0
 800d726:	460c      	mov	r4, r1
 800d728:	461a      	mov	r2, r3
 800d72a:	4b50      	ldr	r3, [pc, #320]	; (800d86c <UART_SetConfig+0x6f4>)
 800d72c:	fba3 2302 	umull	r2, r3, r3, r2
 800d730:	095b      	lsrs	r3, r3, #5
 800d732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	469b      	mov	fp, r3
 800d73a:	f04f 0c00 	mov.w	ip, #0
 800d73e:	46d9      	mov	r9, fp
 800d740:	46e2      	mov	sl, ip
 800d742:	eb19 0309 	adds.w	r3, r9, r9
 800d746:	eb4a 040a 	adc.w	r4, sl, sl
 800d74a:	4699      	mov	r9, r3
 800d74c:	46a2      	mov	sl, r4
 800d74e:	eb19 090b 	adds.w	r9, r9, fp
 800d752:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d756:	f04f 0100 	mov.w	r1, #0
 800d75a:	f04f 0200 	mov.w	r2, #0
 800d75e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d76a:	4689      	mov	r9, r1
 800d76c:	4692      	mov	sl, r2
 800d76e:	eb1b 0509 	adds.w	r5, fp, r9
 800d772:	eb4c 060a 	adc.w	r6, ip, sl
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	4619      	mov	r1, r3
 800d77c:	f04f 0200 	mov.w	r2, #0
 800d780:	f04f 0300 	mov.w	r3, #0
 800d784:	f04f 0400 	mov.w	r4, #0
 800d788:	0094      	lsls	r4, r2, #2
 800d78a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d78e:	008b      	lsls	r3, r1, #2
 800d790:	461a      	mov	r2, r3
 800d792:	4623      	mov	r3, r4
 800d794:	4628      	mov	r0, r5
 800d796:	4631      	mov	r1, r6
 800d798:	f7f3 fa8e 	bl	8000cb8 <__aeabi_uldivmod>
 800d79c:	4603      	mov	r3, r0
 800d79e:	460c      	mov	r4, r1
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4b32      	ldr	r3, [pc, #200]	; (800d86c <UART_SetConfig+0x6f4>)
 800d7a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d7a8:	095b      	lsrs	r3, r3, #5
 800d7aa:	2164      	movs	r1, #100	; 0x64
 800d7ac:	fb01 f303 	mul.w	r3, r1, r3
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	3332      	adds	r3, #50	; 0x32
 800d7b6:	4a2d      	ldr	r2, [pc, #180]	; (800d86c <UART_SetConfig+0x6f4>)
 800d7b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7bc:	095b      	lsrs	r3, r3, #5
 800d7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7c2:	4498      	add	r8, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	469b      	mov	fp, r3
 800d7c8:	f04f 0c00 	mov.w	ip, #0
 800d7cc:	46d9      	mov	r9, fp
 800d7ce:	46e2      	mov	sl, ip
 800d7d0:	eb19 0309 	adds.w	r3, r9, r9
 800d7d4:	eb4a 040a 	adc.w	r4, sl, sl
 800d7d8:	4699      	mov	r9, r3
 800d7da:	46a2      	mov	sl, r4
 800d7dc:	eb19 090b 	adds.w	r9, r9, fp
 800d7e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d7e4:	f04f 0100 	mov.w	r1, #0
 800d7e8:	f04f 0200 	mov.w	r2, #0
 800d7ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7f8:	4689      	mov	r9, r1
 800d7fa:	4692      	mov	sl, r2
 800d7fc:	eb1b 0509 	adds.w	r5, fp, r9
 800d800:	eb4c 060a 	adc.w	r6, ip, sl
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	4619      	mov	r1, r3
 800d80a:	f04f 0200 	mov.w	r2, #0
 800d80e:	f04f 0300 	mov.w	r3, #0
 800d812:	f04f 0400 	mov.w	r4, #0
 800d816:	0094      	lsls	r4, r2, #2
 800d818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d81c:	008b      	lsls	r3, r1, #2
 800d81e:	461a      	mov	r2, r3
 800d820:	4623      	mov	r3, r4
 800d822:	4628      	mov	r0, r5
 800d824:	4631      	mov	r1, r6
 800d826:	f7f3 fa47 	bl	8000cb8 <__aeabi_uldivmod>
 800d82a:	4603      	mov	r3, r0
 800d82c:	460c      	mov	r4, r1
 800d82e:	461a      	mov	r2, r3
 800d830:	4b0e      	ldr	r3, [pc, #56]	; (800d86c <UART_SetConfig+0x6f4>)
 800d832:	fba3 1302 	umull	r1, r3, r3, r2
 800d836:	095b      	lsrs	r3, r3, #5
 800d838:	2164      	movs	r1, #100	; 0x64
 800d83a:	fb01 f303 	mul.w	r3, r1, r3
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	011b      	lsls	r3, r3, #4
 800d842:	3332      	adds	r3, #50	; 0x32
 800d844:	4a09      	ldr	r2, [pc, #36]	; (800d86c <UART_SetConfig+0x6f4>)
 800d846:	fba2 2303 	umull	r2, r3, r2, r3
 800d84a:	095b      	lsrs	r3, r3, #5
 800d84c:	f003 020f 	and.w	r2, r3, #15
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4442      	add	r2, r8
 800d856:	609a      	str	r2, [r3, #8]
}
 800d858:	e7ff      	b.n	800d85a <UART_SetConfig+0x6e2>
 800d85a:	bf00      	nop
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d864:	40011000 	.word	0x40011000
 800d868:	40011400 	.word	0x40011400
 800d86c:	51eb851f 	.word	0x51eb851f

0800d870 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d870:	b084      	sub	sp, #16
 800d872:	b480      	push	{r7}
 800d874:	b085      	sub	sp, #20
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	f107 001c 	add.w	r0, r7, #28
 800d87e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d886:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d888:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d88a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d88e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d892:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d896:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d89a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d8aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	431a      	orrs	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	b004      	add	sp, #16
 800d8c4:	4770      	bx	lr

0800d8c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b083      	sub	sp, #12
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2203      	movs	r2, #3
 800d90e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d910:	2002      	movs	r0, #2
 800d912:	f7f9 fbc5 	bl	80070a0 <HAL_Delay>
  
  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f003 0303 	and.w	r3, r3, #3
}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d95a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d960:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d966:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d976:	f023 030f 	bic.w	r3, r3, #15
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	431a      	orrs	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	b2db      	uxtb	r3, r3
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3314      	adds	r3, #20
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	4413      	add	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
}  
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800da02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	4313      	orrs	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	431a      	orrs	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0

}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da36:	2310      	movs	r3, #16
 800da38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da3a:	2340      	movs	r3, #64	; 0x40
 800da3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da48:	f107 0308 	add.w	r3, r7, #8
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff74 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800da54:	f241 3288 	movw	r2, #5000	; 0x1388
 800da58:	2110      	movs	r1, #16
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fa40 	bl	800dee0 <SDMMC_GetCmdResp1>
 800da60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da62:	69fb      	ldr	r3, [r7, #28]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3720      	adds	r7, #32
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da7a:	2311      	movs	r3, #17
 800da7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da7e:	2340      	movs	r3, #64	; 0x40
 800da80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da82:	2300      	movs	r3, #0
 800da84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da8c:	f107 0308 	add.w	r3, r7, #8
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ff52 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800da98:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9c:	2111      	movs	r1, #17
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fa1e 	bl	800dee0 <SDMMC_GetCmdResp1>
 800daa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daa6:	69fb      	ldr	r3, [r7, #28]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3720      	adds	r7, #32
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dabe:	2312      	movs	r3, #18
 800dac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dac2:	2340      	movs	r3, #64	; 0x40
 800dac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dad0:	f107 0308 	add.w	r3, r7, #8
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff ff30 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	2112      	movs	r1, #18
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f9fc 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daea:	69fb      	ldr	r3, [r7, #28]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3720      	adds	r7, #32
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db02:	2318      	movs	r3, #24
 800db04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db06:	2340      	movs	r3, #64	; 0x40
 800db08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db0a:	2300      	movs	r3, #0
 800db0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db14:	f107 0308 	add.w	r3, r7, #8
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff ff0e 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db20:	f241 3288 	movw	r2, #5000	; 0x1388
 800db24:	2118      	movs	r1, #24
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f9da 	bl	800dee0 <SDMMC_GetCmdResp1>
 800db2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db2e:	69fb      	ldr	r3, [r7, #28]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3720      	adds	r7, #32
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db46:	2319      	movs	r3, #25
 800db48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db4a:	2340      	movs	r3, #64	; 0x40
 800db4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db4e:	2300      	movs	r3, #0
 800db50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db58:	f107 0308 	add.w	r3, r7, #8
 800db5c:	4619      	mov	r1, r3
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff feec 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800db64:	f241 3288 	movw	r2, #5000	; 0x1388
 800db68:	2119      	movs	r1, #25
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f9b8 	bl	800dee0 <SDMMC_GetCmdResp1>
 800db70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db72:	69fb      	ldr	r3, [r7, #28]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db88:	230c      	movs	r3, #12
 800db8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db8c:	2340      	movs	r3, #64	; 0x40
 800db8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db9a:	f107 0308 	add.w	r3, r7, #8
 800db9e:	4619      	mov	r1, r3
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff fecb 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dba6:	4a05      	ldr	r2, [pc, #20]	; (800dbbc <SDMMC_CmdStopTransfer+0x40>)
 800dba8:	210c      	movs	r1, #12
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f998 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dbb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3720      	adds	r7, #32
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	05f5e100 	.word	0x05f5e100

0800dbc0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08a      	sub	sp, #40	; 0x28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbd0:	2307      	movs	r3, #7
 800dbd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbd4:	2340      	movs	r3, #64	; 0x40
 800dbd6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbe2:	f107 0310 	add.w	r3, r7, #16
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fea7 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dbee:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbf2:	2107      	movs	r1, #7
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f000 f973 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dbfa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3728      	adds	r7, #40	; 0x28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b088      	sub	sp, #32
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc24:	f107 0308 	add.w	r3, r7, #8
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff fe86 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f92d 	bl	800de90 <SDMMC_GetCmdError>
 800dc36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc38:	69fb      	ldr	r3, [r7, #28]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b088      	sub	sp, #32
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc50:	2308      	movs	r3, #8
 800dc52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc54:	2340      	movs	r3, #64	; 0x40
 800dc56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc62:	f107 0308 	add.w	r3, r7, #8
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fe67 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fb16 	bl	800e2a0 <SDMMC_GetCmdResp7>
 800dc74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc76:	69fb      	ldr	r3, [r7, #28]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc8e:	2337      	movs	r3, #55	; 0x37
 800dc90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc92:	2340      	movs	r3, #64	; 0x40
 800dc94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc96:	2300      	movs	r3, #0
 800dc98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dca0:	f107 0308 	add.w	r3, r7, #8
 800dca4:	4619      	mov	r1, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff fe48 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb0:	2137      	movs	r1, #55	; 0x37
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f914 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dcb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcba:	69fb      	ldr	r3, [r7, #28]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3720      	adds	r7, #32
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dcda:	2329      	movs	r3, #41	; 0x29
 800dcdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcde:	2340      	movs	r3, #64	; 0x40
 800dce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dce2:	2300      	movs	r3, #0
 800dce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcec:	f107 0308 	add.w	r3, r7, #8
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fe22 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fa23 	bl	800e144 <SDMMC_GetCmdResp3>
 800dcfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd00:	69fb      	ldr	r3, [r7, #28]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b088      	sub	sp, #32
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd18:	2306      	movs	r3, #6
 800dd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd20:	2300      	movs	r3, #0
 800dd22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd2a:	f107 0308 	add.w	r3, r7, #8
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fe03 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800dd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd3a:	2106      	movs	r1, #6
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f8cf 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd44:	69fb      	ldr	r3, [r7, #28]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b088      	sub	sp, #32
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd5a:	2333      	movs	r3, #51	; 0x33
 800dd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd6c:	f107 0308 	add.w	r3, r7, #8
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fde2 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dd78:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd7c:	2133      	movs	r1, #51	; 0x33
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f8ae 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dd84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd86:	69fb      	ldr	r3, [r7, #28]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3720      	adds	r7, #32
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b088      	sub	sp, #32
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dda0:	23c0      	movs	r3, #192	; 0xc0
 800dda2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dda4:	2300      	movs	r3, #0
 800dda6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fdc1 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f97c 	bl	800e0b8 <SDMMC_GetCmdResp2>
 800ddc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddc2:	69fb      	ldr	r3, [r7, #28]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3720      	adds	r7, #32
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddda:	2309      	movs	r3, #9
 800dddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ddde:	23c0      	movs	r3, #192	; 0xc0
 800dde0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dde2:	2300      	movs	r3, #0
 800dde4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddec:	f107 0308 	add.w	r3, r7, #8
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff fda2 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f95d 	bl	800e0b8 <SDMMC_GetCmdResp2>
 800ddfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de00:	69fb      	ldr	r3, [r7, #28]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b088      	sub	sp, #32
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de18:	2303      	movs	r3, #3
 800de1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de20:	2300      	movs	r3, #0
 800de22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de2a:	f107 0308 	add.w	r3, r7, #8
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff fd83 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	2103      	movs	r1, #3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f9bc 	bl	800e1b8 <SDMMC_GetCmdResp6>
 800de40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de42:	69fb      	ldr	r3, [r7, #28]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3720      	adds	r7, #32
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b088      	sub	sp, #32
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de5a:	230d      	movs	r3, #13
 800de5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de5e:	2340      	movs	r3, #64	; 0x40
 800de60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de6c:	f107 0308 	add.w	r3, r7, #8
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff fd62 	bl	800d93c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800de78:	f241 3288 	movw	r2, #5000	; 0x1388
 800de7c:	210d      	movs	r1, #13
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 f82e 	bl	800dee0 <SDMMC_GetCmdResp1>
 800de84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de86:	69fb      	ldr	r3, [r7, #28]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3720      	adds	r7, #32
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800de90:	b490      	push	{r4, r7}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de98:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <SDMMC_GetCmdError+0x48>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a0f      	ldr	r2, [pc, #60]	; (800dedc <SDMMC_GetCmdError+0x4c>)
 800de9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dea2:	0a5b      	lsrs	r3, r3, #9
 800dea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dea8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800deac:	4623      	mov	r3, r4
 800deae:	1e5c      	subs	r4, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800deb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800deb8:	e009      	b.n	800dece <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800debe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d0f2      	beq.n	800deac <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	22c5      	movs	r2, #197	; 0xc5
 800deca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bc90      	pop	{r4, r7}
 800ded6:	4770      	bx	lr
 800ded8:	20000000 	.word	0x20000000
 800dedc:	10624dd3 	.word	0x10624dd3

0800dee0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	460b      	mov	r3, r1
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800deee:	4b6f      	ldr	r3, [pc, #444]	; (800e0ac <SDMMC_GetCmdResp1+0x1cc>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a6f      	ldr	r2, [pc, #444]	; (800e0b0 <SDMMC_GetCmdResp1+0x1d0>)
 800def4:	fba2 2303 	umull	r2, r3, r2, r3
 800def8:	0a5b      	lsrs	r3, r3, #9
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df00:	4623      	mov	r3, r4
 800df02:	1e5c      	subs	r4, r3, #1
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df0c:	e0c9      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df12:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f0      	beq.n	800df00 <SDMMC_GetCmdResp1+0x20>
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1eb      	bne.n	800df00 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2c:	f003 0304 	and.w	r3, r3, #4
 800df30:	2b00      	cmp	r3, #0
 800df32:	d004      	beq.n	800df3e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2204      	movs	r2, #4
 800df38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df3a:	2304      	movs	r3, #4
 800df3c:	e0b1      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	f003 0301 	and.w	r3, r3, #1
 800df46:	2b00      	cmp	r3, #0
 800df48:	d004      	beq.n	800df54 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2201      	movs	r2, #1
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df50:	2301      	movs	r3, #1
 800df52:	e0a6      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	22c5      	movs	r2, #197	; 0xc5
 800df58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fd18 	bl	800d990 <SDIO_GetCommandResponse>
 800df60:	4603      	mov	r3, r0
 800df62:	461a      	mov	r2, r3
 800df64:	7afb      	ldrb	r3, [r7, #11]
 800df66:	4293      	cmp	r3, r2
 800df68:	d001      	beq.n	800df6e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e099      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800df6e:	2100      	movs	r1, #0
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f7ff fd1a 	bl	800d9aa <SDIO_GetResponse>
 800df76:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	4b4e      	ldr	r3, [pc, #312]	; (800e0b4 <SDMMC_GetCmdResp1+0x1d4>)
 800df7c:	4013      	ands	r3, r2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800df82:	2300      	movs	r3, #0
 800df84:	e08d      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	da02      	bge.n	800df92 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df90:	e087      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df9c:	2340      	movs	r3, #64	; 0x40
 800df9e:	e080      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfaa:	2380      	movs	r3, #128	; 0x80
 800dfac:	e079      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfbc:	e071      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfcc:	e069      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfdc:	e061      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfec:	e059      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dffc:	e051      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e00c:	e049      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e01c:	e041      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e02c:	e039      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e03c:	e031      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e048:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e04c:	e029      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e05c:	e021      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e06c:	e019      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e078:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e07c:	e011      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e088:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e08c:	e009      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f003 0308 	and.w	r3, r3, #8
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e098:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e09c:	e001      	b.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e09e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	371c      	adds	r7, #28
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd90      	pop	{r4, r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000000 	.word	0x20000000
 800e0b0:	10624dd3 	.word	0x10624dd3
 800e0b4:	fdffe008 	.word	0xfdffe008

0800e0b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e0b8:	b490      	push	{r4, r7}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0c0:	4b1e      	ldr	r3, [pc, #120]	; (800e13c <SDMMC_GetCmdResp2+0x84>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a1e      	ldr	r2, [pc, #120]	; (800e140 <SDMMC_GetCmdResp2+0x88>)
 800e0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ca:	0a5b      	lsrs	r3, r3, #9
 800e0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e0d4:	4623      	mov	r3, r4
 800e0d6:	1e5c      	subs	r4, r3, #1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d102      	bne.n	800e0e2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0e0:	e026      	b.n	800e130 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0f0      	beq.n	800e0d4 <SDMMC_GetCmdResp2+0x1c>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1eb      	bne.n	800e0d4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e100:	f003 0304 	and.w	r3, r3, #4
 800e104:	2b00      	cmp	r3, #0
 800e106:	d004      	beq.n	800e112 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2204      	movs	r2, #4
 800e10c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e10e:	2304      	movs	r3, #4
 800e110:	e00e      	b.n	800e130 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d004      	beq.n	800e128 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e124:	2301      	movs	r3, #1
 800e126:	e003      	b.n	800e130 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	22c5      	movs	r2, #197	; 0xc5
 800e12c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bc90      	pop	{r4, r7}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20000000 	.word	0x20000000
 800e140:	10624dd3 	.word	0x10624dd3

0800e144 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e144:	b490      	push	{r4, r7}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e14c:	4b18      	ldr	r3, [pc, #96]	; (800e1b0 <SDMMC_GetCmdResp3+0x6c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a18      	ldr	r2, [pc, #96]	; (800e1b4 <SDMMC_GetCmdResp3+0x70>)
 800e152:	fba2 2303 	umull	r2, r3, r2, r3
 800e156:	0a5b      	lsrs	r3, r3, #9
 800e158:	f241 3288 	movw	r2, #5000	; 0x1388
 800e15c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e160:	4623      	mov	r3, r4
 800e162:	1e5c      	subs	r4, r3, #1
 800e164:	2b00      	cmp	r3, #0
 800e166:	d102      	bne.n	800e16e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e16c:	e01b      	b.n	800e1a6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e172:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d0f0      	beq.n	800e160 <SDMMC_GetCmdResp3+0x1c>
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1eb      	bne.n	800e160 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18c:	f003 0304 	and.w	r3, r3, #4
 800e190:	2b00      	cmp	r3, #0
 800e192:	d004      	beq.n	800e19e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2204      	movs	r2, #4
 800e198:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e19a:	2304      	movs	r3, #4
 800e19c:	e003      	b.n	800e1a6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	22c5      	movs	r2, #197	; 0xc5
 800e1a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bc90      	pop	{r4, r7}
 800e1ae:	4770      	bx	lr
 800e1b0:	20000000 	.word	0x20000000
 800e1b4:	10624dd3 	.word	0x10624dd3

0800e1b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1b8:	b590      	push	{r4, r7, lr}
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1c6:	4b34      	ldr	r3, [pc, #208]	; (800e298 <SDMMC_GetCmdResp6+0xe0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a34      	ldr	r2, [pc, #208]	; (800e29c <SDMMC_GetCmdResp6+0xe4>)
 800e1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d0:	0a5b      	lsrs	r3, r3, #9
 800e1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1d6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e1da:	4623      	mov	r3, r4
 800e1dc:	1e5c      	subs	r4, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1e6:	e052      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ec:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0f0      	beq.n	800e1da <SDMMC_GetCmdResp6+0x22>
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1eb      	bne.n	800e1da <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e206:	f003 0304 	and.w	r3, r3, #4
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d004      	beq.n	800e218 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2204      	movs	r2, #4
 800e212:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e214:	2304      	movs	r3, #4
 800e216:	e03a      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2201      	movs	r2, #1
 800e228:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e22a:	2301      	movs	r3, #1
 800e22c:	e02f      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7ff fbae 	bl	800d990 <SDIO_GetCommandResponse>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	7afb      	ldrb	r3, [r7, #11]
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d001      	beq.n	800e242 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e23e:	2301      	movs	r3, #1
 800e240:	e025      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	22c5      	movs	r2, #197	; 0xc5
 800e246:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e248:	2100      	movs	r1, #0
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fbad 	bl	800d9aa <SDIO_GetResponse>
 800e250:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d106      	bne.n	800e26a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	0c1b      	lsrs	r3, r3, #16
 800e260:	b29a      	uxth	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e266:	2300      	movs	r3, #0
 800e268:	e011      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e278:	e009      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e288:	e001      	b.n	800e28e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e28a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	371c      	adds	r7, #28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd90      	pop	{r4, r7, pc}
 800e296:	bf00      	nop
 800e298:	20000000 	.word	0x20000000
 800e29c:	10624dd3 	.word	0x10624dd3

0800e2a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e2a0:	b490      	push	{r4, r7}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2a8:	4b21      	ldr	r3, [pc, #132]	; (800e330 <SDMMC_GetCmdResp7+0x90>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a21      	ldr	r2, [pc, #132]	; (800e334 <SDMMC_GetCmdResp7+0x94>)
 800e2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b2:	0a5b      	lsrs	r3, r3, #9
 800e2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e2bc:	4623      	mov	r3, r4
 800e2be:	1e5c      	subs	r4, r3, #1
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2c8:	e02c      	b.n	800e324 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d0f0      	beq.n	800e2bc <SDMMC_GetCmdResp7+0x1c>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1eb      	bne.n	800e2bc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d004      	beq.n	800e2fa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2204      	movs	r2, #4
 800e2f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2f6:	2304      	movs	r3, #4
 800e2f8:	e014      	b.n	800e324 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	2b00      	cmp	r3, #0
 800e304:	d004      	beq.n	800e310 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e009      	b.n	800e324 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2240      	movs	r2, #64	; 0x40
 800e320:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e322:	2300      	movs	r3, #0
  
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bc90      	pop	{r4, r7}
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	20000000 	.word	0x20000000
 800e334:	10624dd3 	.word	0x10624dd3

0800e338 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e33c:	4904      	ldr	r1, [pc, #16]	; (800e350 <MX_FATFS_Init+0x18>)
 800e33e:	4805      	ldr	r0, [pc, #20]	; (800e354 <MX_FATFS_Init+0x1c>)
 800e340:	f003 fb9c 	bl	8011a7c <FATFS_LinkDriver>
 800e344:	4603      	mov	r3, r0
 800e346:	461a      	mov	r2, r3
 800e348:	4b03      	ldr	r3, [pc, #12]	; (800e358 <MX_FATFS_Init+0x20>)
 800e34a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e34c:	bf00      	nop
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20039da0 	.word	0x20039da0
 800e354:	08017f58 	.word	0x08017f58
 800e358:	20039d9c 	.word	0x20039d9c

0800e35c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e366:	f000 f896 	bl	800e496 <BSP_SD_IsDetected>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d001      	beq.n	800e374 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e012      	b.n	800e39a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e374:	480b      	ldr	r0, [pc, #44]	; (800e3a4 <BSP_SD_Init+0x48>)
 800e376:	f7fb ffa5 	bl	800a2c4 <HAL_SD_Init>
 800e37a:	4603      	mov	r3, r0
 800e37c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e388:	4806      	ldr	r0, [pc, #24]	; (800e3a4 <BSP_SD_Init+0x48>)
 800e38a:	f7fc fd4f 	bl	800ae2c <HAL_SD_ConfigWideBusOperation>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e398:	79fb      	ldrb	r3, [r7, #7]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3708      	adds	r7, #8
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20039b98 	.word	0x20039b98

0800e3a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	68f9      	ldr	r1, [r7, #12]
 800e3be:	4806      	ldr	r0, [pc, #24]	; (800e3d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e3c0:	f7fc f810 	bl	800a3e4 <HAL_SD_ReadBlocks_DMA>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	20039b98 	.word	0x20039b98

0800e3dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	68f9      	ldr	r1, [r7, #12]
 800e3f2:	4806      	ldr	r0, [pc, #24]	; (800e40c <BSP_SD_WriteBlocks_DMA+0x30>)
 800e3f4:	f7fc f8de 	bl	800a5b4 <HAL_SD_WriteBlocks_DMA>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e402:	7dfb      	ldrb	r3, [r7, #23]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	20039b98 	.word	0x20039b98

0800e410 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e414:	4805      	ldr	r0, [pc, #20]	; (800e42c <BSP_SD_GetCardState+0x1c>)
 800e416:	f7fc fd85 	bl	800af24 <HAL_SD_GetCardState>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	bf14      	ite	ne
 800e420:	2301      	movne	r3, #1
 800e422:	2300      	moveq	r3, #0
 800e424:	b2db      	uxtb	r3, r3
}
 800e426:	4618      	mov	r0, r3
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20039b98 	.word	0x20039b98

0800e430 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e438:	6879      	ldr	r1, [r7, #4]
 800e43a:	4803      	ldr	r0, [pc, #12]	; (800e448 <BSP_SD_GetCardInfo+0x18>)
 800e43c:	f7fc fcca 	bl	800add4 <HAL_SD_GetCardInfo>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20039b98 	.word	0x20039b98

0800e44c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e454:	f000 f818 	bl	800e488 <BSP_SD_AbortCallback>
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e468:	f000 f9a8 	bl	800e7bc <BSP_SD_WriteCpltCallback>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e47c:	f000 f9aa 	bl	800e7d4 <BSP_SD_ReadCpltCallback>
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e488:	b480      	push	{r7}
 800e48a:	af00      	add	r7, sp, #0

}
 800e48c:	bf00      	nop
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b082      	sub	sp, #8
 800e49a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e49c:	2301      	movs	r3, #1
 800e49e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e4a0:	f000 f80c 	bl	800e4bc <BSP_PlatformIsDetected>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	b2db      	uxtb	r3, r3
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e4c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e4ca:	4806      	ldr	r0, [pc, #24]	; (800e4e4 <BSP_PlatformIsDetected+0x28>)
 800e4cc:	f7fa f866 	bl	800859c <HAL_GPIO_ReadPin>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e4da:	79fb      	ldrb	r3, [r7, #7]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40020000 	.word	0x40020000

0800e4e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e4f0:	f7f8 fdca 	bl	8007088 <HAL_GetTick>
 800e4f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e4f6:	e006      	b.n	800e506 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4f8:	f7ff ff8a 	bl	800e410 <BSP_SD_GetCardState>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e502:	2300      	movs	r3, #0
 800e504:	e009      	b.n	800e51a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e506:	f7f8 fdbf 	bl	8007088 <HAL_GetTick>
 800e50a:	4602      	mov	r2, r0
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	429a      	cmp	r2, r3
 800e514:	d8f0      	bhi.n	800e4f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e52e:	4b0b      	ldr	r3, [pc, #44]	; (800e55c <SD_CheckStatus+0x38>)
 800e530:	2201      	movs	r2, #1
 800e532:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e534:	f7ff ff6c 	bl	800e410 <BSP_SD_GetCardState>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d107      	bne.n	800e54e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e53e:	4b07      	ldr	r3, [pc, #28]	; (800e55c <SD_CheckStatus+0x38>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f023 0301 	bic.w	r3, r3, #1
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b04      	ldr	r3, [pc, #16]	; (800e55c <SD_CheckStatus+0x38>)
 800e54c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e54e:	4b03      	ldr	r3, [pc, #12]	; (800e55c <SD_CheckStatus+0x38>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	b2db      	uxtb	r3, r3
}
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	20000009 	.word	0x20000009

0800e560 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e56a:	f7ff fef7 	bl	800e35c <BSP_SD_Init>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d107      	bne.n	800e584 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff ffd4 	bl	800e524 <SD_CheckStatus>
 800e57c:	4603      	mov	r3, r0
 800e57e:	461a      	mov	r2, r3
 800e580:	4b04      	ldr	r3, [pc, #16]	; (800e594 <SD_initialize+0x34>)
 800e582:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e584:	4b03      	ldr	r3, [pc, #12]	; (800e594 <SD_initialize+0x34>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	b2db      	uxtb	r3, r3
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20000009 	.word	0x20000009

0800e598 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e5a2:	79fb      	ldrb	r3, [r7, #7]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7ff ffbd 	bl	800e524 <SD_CheckStatus>
 800e5aa:	4603      	mov	r3, r0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
 800e5be:	603b      	str	r3, [r7, #0]
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e5c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800e5cc:	f7ff ff8c 	bl	800e4e8 <SD_CheckStatusWithTimeout>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	da01      	bge.n	800e5da <SD_read+0x26>
  {
    return res;
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	e03b      	b.n	800e652 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	6879      	ldr	r1, [r7, #4]
 800e5de:	68b8      	ldr	r0, [r7, #8]
 800e5e0:	f7ff fee2 	bl	800e3a8 <BSP_SD_ReadBlocks_DMA>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d132      	bne.n	800e650 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	; (800e65c <SD_read+0xa8>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e5f0:	f7f8 fd4a 	bl	8007088 <HAL_GetTick>
 800e5f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5f6:	bf00      	nop
 800e5f8:	4b18      	ldr	r3, [pc, #96]	; (800e65c <SD_read+0xa8>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d108      	bne.n	800e612 <SD_read+0x5e>
 800e600:	f7f8 fd42 	bl	8007088 <HAL_GetTick>
 800e604:	4602      	mov	r2, r0
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e60e:	4293      	cmp	r3, r2
 800e610:	d9f2      	bls.n	800e5f8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e612:	4b12      	ldr	r3, [pc, #72]	; (800e65c <SD_read+0xa8>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d102      	bne.n	800e620 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	75fb      	strb	r3, [r7, #23]
 800e61e:	e017      	b.n	800e650 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e620:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <SD_read+0xa8>)
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e626:	f7f8 fd2f 	bl	8007088 <HAL_GetTick>
 800e62a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e62c:	e007      	b.n	800e63e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e62e:	f7ff feef 	bl	800e410 <BSP_SD_GetCardState>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d102      	bne.n	800e63e <SD_read+0x8a>
          {
            res = RES_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e63c:	e008      	b.n	800e650 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e63e:	f7f8 fd23 	bl	8007088 <HAL_GetTick>
 800e642:	4602      	mov	r2, r0
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	f247 522f 	movw	r2, #29999	; 0x752f
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d9ee      	bls.n	800e62e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e650:	7dfb      	ldrb	r3, [r7, #23]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3718      	adds	r7, #24
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	20037434 	.word	0x20037434

0800e660 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	603b      	str	r3, [r7, #0]
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e674:	4b24      	ldr	r3, [pc, #144]	; (800e708 <SD_write+0xa8>)
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e67a:	f247 5030 	movw	r0, #30000	; 0x7530
 800e67e:	f7ff ff33 	bl	800e4e8 <SD_CheckStatusWithTimeout>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	da01      	bge.n	800e68c <SD_write+0x2c>
  {
    return res;
 800e688:	7dfb      	ldrb	r3, [r7, #23]
 800e68a:	e038      	b.n	800e6fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	6879      	ldr	r1, [r7, #4]
 800e690:	68b8      	ldr	r0, [r7, #8]
 800e692:	f7ff fea3 	bl	800e3dc <BSP_SD_WriteBlocks_DMA>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d12f      	bne.n	800e6fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e69c:	f7f8 fcf4 	bl	8007088 <HAL_GetTick>
 800e6a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e6a2:	bf00      	nop
 800e6a4:	4b18      	ldr	r3, [pc, #96]	; (800e708 <SD_write+0xa8>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d108      	bne.n	800e6be <SD_write+0x5e>
 800e6ac:	f7f8 fcec 	bl	8007088 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d9f2      	bls.n	800e6a4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e6be:	4b12      	ldr	r3, [pc, #72]	; (800e708 <SD_write+0xa8>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d102      	bne.n	800e6cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	75fb      	strb	r3, [r7, #23]
 800e6ca:	e017      	b.n	800e6fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e6cc:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <SD_write+0xa8>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e6d2:	f7f8 fcd9 	bl	8007088 <HAL_GetTick>
 800e6d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6d8:	e007      	b.n	800e6ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6da:	f7ff fe99 	bl	800e410 <BSP_SD_GetCardState>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <SD_write+0x8a>
          {
            res = RES_OK;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	75fb      	strb	r3, [r7, #23]
            break;
 800e6e8:	e008      	b.n	800e6fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6ea:	f7f8 fccd 	bl	8007088 <HAL_GetTick>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d9ee      	bls.n	800e6da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20037430 	.word	0x20037430

0800e70c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08c      	sub	sp, #48	; 0x30
 800e710:	af00      	add	r7, sp, #0
 800e712:	4603      	mov	r3, r0
 800e714:	603a      	str	r2, [r7, #0]
 800e716:	71fb      	strb	r3, [r7, #7]
 800e718:	460b      	mov	r3, r1
 800e71a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e722:	4b25      	ldr	r3, [pc, #148]	; (800e7b8 <SD_ioctl+0xac>)
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 0301 	and.w	r3, r3, #1
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <SD_ioctl+0x28>
 800e730:	2303      	movs	r3, #3
 800e732:	e03c      	b.n	800e7ae <SD_ioctl+0xa2>

  switch (cmd)
 800e734:	79bb      	ldrb	r3, [r7, #6]
 800e736:	2b03      	cmp	r3, #3
 800e738:	d834      	bhi.n	800e7a4 <SD_ioctl+0x98>
 800e73a:	a201      	add	r2, pc, #4	; (adr r2, 800e740 <SD_ioctl+0x34>)
 800e73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e759 	.word	0x0800e759
 800e748:	0800e771 	.word	0x0800e771
 800e74c:	0800e78b 	.word	0x0800e78b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e756:	e028      	b.n	800e7aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e758:	f107 030c 	add.w	r3, r7, #12
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff fe67 	bl	800e430 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e768:	2300      	movs	r3, #0
 800e76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e76e:	e01c      	b.n	800e7aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e770:	f107 030c 	add.w	r3, r7, #12
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fe5b 	bl	800e430 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e788:	e00f      	b.n	800e7aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e78a:	f107 030c 	add.w	r3, r7, #12
 800e78e:	4618      	mov	r0, r3
 800e790:	f7ff fe4e 	bl	800e430 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	0a5a      	lsrs	r2, r3, #9
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7a2:	e002      	b.n	800e7aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3730      	adds	r7, #48	; 0x30
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	20000009 	.word	0x20000009

0800e7bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e7c0:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <BSP_SD_WriteCpltCallback+0x14>)
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	601a      	str	r2, [r3, #0]
}
 800e7c6:	bf00      	nop
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	20037430 	.word	0x20037430

0800e7d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e7d8:	4b03      	ldr	r3, [pc, #12]	; (800e7e8 <BSP_SD_ReadCpltCallback+0x14>)
 800e7da:	2201      	movs	r2, #1
 800e7dc:	601a      	str	r2, [r3, #0]
}
 800e7de:	bf00      	nop
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	20037434 	.word	0x20037434

0800e7ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e7f6:	79fb      	ldrb	r3, [r7, #7]
 800e7f8:	4a08      	ldr	r2, [pc, #32]	; (800e81c <disk_status+0x30>)
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	79fa      	ldrb	r2, [r7, #7]
 800e804:	4905      	ldr	r1, [pc, #20]	; (800e81c <disk_status+0x30>)
 800e806:	440a      	add	r2, r1
 800e808:	7a12      	ldrb	r2, [r2, #8]
 800e80a:	4610      	mov	r0, r2
 800e80c:	4798      	blx	r3
 800e80e:	4603      	mov	r3, r0
 800e810:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e812:	7bfb      	ldrb	r3, [r7, #15]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20037460 	.word	0x20037460

0800e820 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e82e:	79fb      	ldrb	r3, [r7, #7]
 800e830:	4a0d      	ldr	r2, [pc, #52]	; (800e868 <disk_initialize+0x48>)
 800e832:	5cd3      	ldrb	r3, [r2, r3]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d111      	bne.n	800e85c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	4a0b      	ldr	r2, [pc, #44]	; (800e868 <disk_initialize+0x48>)
 800e83c:	2101      	movs	r1, #1
 800e83e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e840:	79fb      	ldrb	r3, [r7, #7]
 800e842:	4a09      	ldr	r2, [pc, #36]	; (800e868 <disk_initialize+0x48>)
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	79fa      	ldrb	r2, [r7, #7]
 800e84e:	4906      	ldr	r1, [pc, #24]	; (800e868 <disk_initialize+0x48>)
 800e850:	440a      	add	r2, r1
 800e852:	7a12      	ldrb	r2, [r2, #8]
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	4603      	mov	r3, r0
 800e85a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	20037460 	.word	0x20037460

0800e86c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e86c:	b590      	push	{r4, r7, lr}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60b9      	str	r1, [r7, #8]
 800e874:	607a      	str	r2, [r7, #4]
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	4a0a      	ldr	r2, [pc, #40]	; (800e8a8 <disk_read+0x3c>)
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	689c      	ldr	r4, [r3, #8]
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	4a07      	ldr	r2, [pc, #28]	; (800e8a8 <disk_read+0x3c>)
 800e88c:	4413      	add	r3, r2
 800e88e:	7a18      	ldrb	r0, [r3, #8]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	68b9      	ldr	r1, [r7, #8]
 800e896:	47a0      	blx	r4
 800e898:	4603      	mov	r3, r0
 800e89a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd90      	pop	{r4, r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20037460 	.word	0x20037460

0800e8ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e8ac:	b590      	push	{r4, r7, lr}
 800e8ae:	b087      	sub	sp, #28
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	603b      	str	r3, [r7, #0]
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	4a0a      	ldr	r2, [pc, #40]	; (800e8e8 <disk_write+0x3c>)
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	68dc      	ldr	r4, [r3, #12]
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	4a07      	ldr	r2, [pc, #28]	; (800e8e8 <disk_write+0x3c>)
 800e8cc:	4413      	add	r3, r2
 800e8ce:	7a18      	ldrb	r0, [r3, #8]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	68b9      	ldr	r1, [r7, #8]
 800e8d6:	47a0      	blx	r4
 800e8d8:	4603      	mov	r3, r0
 800e8da:	75fb      	strb	r3, [r7, #23]
  return res;
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	371c      	adds	r7, #28
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd90      	pop	{r4, r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20037460 	.word	0x20037460

0800e8ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	603a      	str	r2, [r7, #0]
 800e8f6:	71fb      	strb	r3, [r7, #7]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	4a09      	ldr	r2, [pc, #36]	; (800e924 <disk_ioctl+0x38>)
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	79fa      	ldrb	r2, [r7, #7]
 800e90a:	4906      	ldr	r1, [pc, #24]	; (800e924 <disk_ioctl+0x38>)
 800e90c:	440a      	add	r2, r1
 800e90e:	7a10      	ldrb	r0, [r2, #8]
 800e910:	79b9      	ldrb	r1, [r7, #6]
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	4798      	blx	r3
 800e916:	4603      	mov	r3, r0
 800e918:	73fb      	strb	r3, [r7, #15]
  return res;
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	20037460 	.word	0x20037460

0800e928 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3301      	adds	r3, #1
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e938:	89fb      	ldrh	r3, [r7, #14]
 800e93a:	021b      	lsls	r3, r3, #8
 800e93c:	b21a      	sxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	b21b      	sxth	r3, r3
 800e944:	4313      	orrs	r3, r2
 800e946:	b21b      	sxth	r3, r3
 800e948:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e94a:	89fb      	ldrh	r3, [r7, #14]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3303      	adds	r3, #3
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	021b      	lsls	r3, r3, #8
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	3202      	adds	r2, #2
 800e970:	7812      	ldrb	r2, [r2, #0]
 800e972:	4313      	orrs	r3, r2
 800e974:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	3201      	adds	r2, #1
 800e97e:	7812      	ldrb	r2, [r2, #0]
 800e980:	4313      	orrs	r3, r2
 800e982:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	021b      	lsls	r3, r3, #8
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	7812      	ldrb	r2, [r2, #0]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e990:	68fb      	ldr	r3, [r7, #12]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b083      	sub	sp, #12
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	1c5a      	adds	r2, r3, #1
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	887a      	ldrh	r2, [r7, #2]
 800e9b2:	b2d2      	uxtb	r2, r2
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	887b      	ldrh	r3, [r7, #2]
 800e9b8:	0a1b      	lsrs	r3, r3, #8
 800e9ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	1c5a      	adds	r2, r3, #1
 800e9c0:	607a      	str	r2, [r7, #4]
 800e9c2:	887a      	ldrh	r2, [r7, #2]
 800e9c4:	b2d2      	uxtb	r2, r2
 800e9c6:	701a      	strb	r2, [r3, #0]
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	683a      	ldr	r2, [r7, #0]
 800e9e6:	b2d2      	uxtb	r2, r2
 800e9e8:	701a      	strb	r2, [r3, #0]
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	0a1b      	lsrs	r3, r3, #8
 800e9ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	607a      	str	r2, [r7, #4]
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	b2d2      	uxtb	r2, r2
 800e9fa:	701a      	strb	r2, [r3, #0]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	0a1b      	lsrs	r3, r3, #8
 800ea00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	701a      	strb	r2, [r3, #0]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	0a1b      	lsrs	r3, r3, #8
 800ea12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	1c5a      	adds	r2, r3, #1
 800ea18:	607a      	str	r2, [r7, #4]
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	701a      	strb	r2, [r3, #0]
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea2c:	b480      	push	{r7}
 800ea2e:	b087      	sub	sp, #28
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00d      	beq.n	800ea62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	1c53      	adds	r3, r2, #1
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	1c59      	adds	r1, r3, #1
 800ea50:	6179      	str	r1, [r7, #20]
 800ea52:	7812      	ldrb	r2, [r2, #0]
 800ea54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	607b      	str	r3, [r7, #4]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1f1      	bne.n	800ea46 <mem_cpy+0x1a>
	}
}
 800ea62:	bf00      	nop
 800ea64:	371c      	adds	r7, #28
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ea6e:	b480      	push	{r7}
 800ea70:	b087      	sub	sp, #28
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	60f8      	str	r0, [r7, #12]
 800ea76:	60b9      	str	r1, [r7, #8]
 800ea78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	617a      	str	r2, [r7, #20]
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1f3      	bne.n	800ea7e <mem_set+0x10>
}
 800ea96:	bf00      	nop
 800ea98:	371c      	adds	r7, #28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eaa2:	b480      	push	{r7}
 800eaa4:	b089      	sub	sp, #36	; 0x24
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	60f8      	str	r0, [r7, #12]
 800eaaa:	60b9      	str	r1, [r7, #8]
 800eaac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	61fb      	str	r3, [r7, #28]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	1c5a      	adds	r2, r3, #1
 800eabe:	61fa      	str	r2, [r7, #28]
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	4619      	mov	r1, r3
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	61ba      	str	r2, [r7, #24]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	1acb      	subs	r3, r1, r3
 800eace:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	607b      	str	r3, [r7, #4]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <mem_cmp+0x40>
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0eb      	beq.n	800eaba <mem_cmp+0x18>

	return r;
 800eae2:	697b      	ldr	r3, [r7, #20]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3724      	adds	r7, #36	; 0x24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eafa:	e002      	b.n	800eb02 <chk_chr+0x12>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	3301      	adds	r3, #1
 800eb00:	607b      	str	r3, [r7, #4]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d005      	beq.n	800eb16 <chk_chr+0x26>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d1f2      	bne.n	800eafc <chk_chr+0xc>
	return *str;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	781b      	ldrb	r3, [r3, #0]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr
	...

0800eb28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb32:	2300      	movs	r3, #0
 800eb34:	60bb      	str	r3, [r7, #8]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e029      	b.n	800eb90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eb3c:	4a27      	ldr	r2, [pc, #156]	; (800ebdc <chk_lock+0xb4>)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	011b      	lsls	r3, r3, #4
 800eb42:	4413      	add	r3, r2
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d01d      	beq.n	800eb86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb4a:	4a24      	ldr	r2, [pc, #144]	; (800ebdc <chk_lock+0xb4>)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	011b      	lsls	r3, r3, #4
 800eb50:	4413      	add	r3, r2
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d116      	bne.n	800eb8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eb5c:	4a1f      	ldr	r2, [pc, #124]	; (800ebdc <chk_lock+0xb4>)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	011b      	lsls	r3, r3, #4
 800eb62:	4413      	add	r3, r2
 800eb64:	3304      	adds	r3, #4
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d10c      	bne.n	800eb8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb70:	4a1a      	ldr	r2, [pc, #104]	; (800ebdc <chk_lock+0xb4>)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	011b      	lsls	r3, r3, #4
 800eb76:	4413      	add	r3, r2
 800eb78:	3308      	adds	r3, #8
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d102      	bne.n	800eb8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb84:	e007      	b.n	800eb96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eb86:	2301      	movs	r3, #1
 800eb88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d9d2      	bls.n	800eb3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d109      	bne.n	800ebb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <chk_lock+0x80>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d101      	bne.n	800ebac <chk_lock+0x84>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	e010      	b.n	800ebce <chk_lock+0xa6>
 800ebac:	2312      	movs	r3, #18
 800ebae:	e00e      	b.n	800ebce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d108      	bne.n	800ebc8 <chk_lock+0xa0>
 800ebb6:	4a09      	ldr	r2, [pc, #36]	; (800ebdc <chk_lock+0xb4>)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	011b      	lsls	r3, r3, #4
 800ebbc:	4413      	add	r3, r2
 800ebbe:	330c      	adds	r3, #12
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebc6:	d101      	bne.n	800ebcc <chk_lock+0xa4>
 800ebc8:	2310      	movs	r3, #16
 800ebca:	e000      	b.n	800ebce <chk_lock+0xa6>
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	20037440 	.word	0x20037440

0800ebe0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	e002      	b.n	800ebf2 <enq_lock+0x12>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	607b      	str	r3, [r7, #4]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d806      	bhi.n	800ec06 <enq_lock+0x26>
 800ebf8:	4a09      	ldr	r2, [pc, #36]	; (800ec20 <enq_lock+0x40>)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	011b      	lsls	r3, r3, #4
 800ebfe:	4413      	add	r3, r2
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1f2      	bne.n	800ebec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	bf14      	ite	ne
 800ec0c:	2301      	movne	r3, #1
 800ec0e:	2300      	moveq	r3, #0
 800ec10:	b2db      	uxtb	r3, r3
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	370c      	adds	r7, #12
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20037440 	.word	0x20037440

0800ec24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	e01f      	b.n	800ec74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ec34:	4a41      	ldr	r2, [pc, #260]	; (800ed3c <inc_lock+0x118>)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	4413      	add	r3, r2
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d113      	bne.n	800ec6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ec46:	4a3d      	ldr	r2, [pc, #244]	; (800ed3c <inc_lock+0x118>)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	011b      	lsls	r3, r3, #4
 800ec4c:	4413      	add	r3, r2
 800ec4e:	3304      	adds	r3, #4
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d109      	bne.n	800ec6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ec5a:	4a38      	ldr	r2, [pc, #224]	; (800ed3c <inc_lock+0x118>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	011b      	lsls	r3, r3, #4
 800ec60:	4413      	add	r3, r2
 800ec62:	3308      	adds	r3, #8
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d006      	beq.n	800ec7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	3301      	adds	r3, #1
 800ec72:	60fb      	str	r3, [r7, #12]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d9dc      	bls.n	800ec34 <inc_lock+0x10>
 800ec7a:	e000      	b.n	800ec7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ec7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d132      	bne.n	800ecea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec84:	2300      	movs	r3, #0
 800ec86:	60fb      	str	r3, [r7, #12]
 800ec88:	e002      	b.n	800ec90 <inc_lock+0x6c>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d806      	bhi.n	800eca4 <inc_lock+0x80>
 800ec96:	4a29      	ldr	r2, [pc, #164]	; (800ed3c <inc_lock+0x118>)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	4413      	add	r3, r2
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f2      	bne.n	800ec8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d101      	bne.n	800ecae <inc_lock+0x8a>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	e040      	b.n	800ed30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	4922      	ldr	r1, [pc, #136]	; (800ed3c <inc_lock+0x118>)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	011b      	lsls	r3, r3, #4
 800ecb8:	440b      	add	r3, r1
 800ecba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	689a      	ldr	r2, [r3, #8]
 800ecc0:	491e      	ldr	r1, [pc, #120]	; (800ed3c <inc_lock+0x118>)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	011b      	lsls	r3, r3, #4
 800ecc6:	440b      	add	r3, r1
 800ecc8:	3304      	adds	r3, #4
 800ecca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	695a      	ldr	r2, [r3, #20]
 800ecd0:	491a      	ldr	r1, [pc, #104]	; (800ed3c <inc_lock+0x118>)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	011b      	lsls	r3, r3, #4
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3308      	adds	r3, #8
 800ecda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ecdc:	4a17      	ldr	r2, [pc, #92]	; (800ed3c <inc_lock+0x118>)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	011b      	lsls	r3, r3, #4
 800ece2:	4413      	add	r3, r2
 800ece4:	330c      	adds	r3, #12
 800ece6:	2200      	movs	r2, #0
 800ece8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d009      	beq.n	800ed04 <inc_lock+0xe0>
 800ecf0:	4a12      	ldr	r2, [pc, #72]	; (800ed3c <inc_lock+0x118>)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	011b      	lsls	r3, r3, #4
 800ecf6:	4413      	add	r3, r2
 800ecf8:	330c      	adds	r3, #12
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <inc_lock+0xe0>
 800ed00:	2300      	movs	r3, #0
 800ed02:	e015      	b.n	800ed30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d108      	bne.n	800ed1c <inc_lock+0xf8>
 800ed0a:	4a0c      	ldr	r2, [pc, #48]	; (800ed3c <inc_lock+0x118>)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	011b      	lsls	r3, r3, #4
 800ed10:	4413      	add	r3, r2
 800ed12:	330c      	adds	r3, #12
 800ed14:	881b      	ldrh	r3, [r3, #0]
 800ed16:	3301      	adds	r3, #1
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	e001      	b.n	800ed20 <inc_lock+0xfc>
 800ed1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed20:	4906      	ldr	r1, [pc, #24]	; (800ed3c <inc_lock+0x118>)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	011b      	lsls	r3, r3, #4
 800ed26:	440b      	add	r3, r1
 800ed28:	330c      	adds	r3, #12
 800ed2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3301      	adds	r3, #1
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	20037440 	.word	0x20037440

0800ed40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	607b      	str	r3, [r7, #4]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d825      	bhi.n	800eda0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ed54:	4a17      	ldr	r2, [pc, #92]	; (800edb4 <dec_lock+0x74>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	011b      	lsls	r3, r3, #4
 800ed5a:	4413      	add	r3, r2
 800ed5c:	330c      	adds	r3, #12
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ed62:	89fb      	ldrh	r3, [r7, #14]
 800ed64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed68:	d101      	bne.n	800ed6e <dec_lock+0x2e>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ed6e:	89fb      	ldrh	r3, [r7, #14]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <dec_lock+0x3a>
 800ed74:	89fb      	ldrh	r3, [r7, #14]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ed7a:	4a0e      	ldr	r2, [pc, #56]	; (800edb4 <dec_lock+0x74>)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	011b      	lsls	r3, r3, #4
 800ed80:	4413      	add	r3, r2
 800ed82:	330c      	adds	r3, #12
 800ed84:	89fa      	ldrh	r2, [r7, #14]
 800ed86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed88:	89fb      	ldrh	r3, [r7, #14]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d105      	bne.n	800ed9a <dec_lock+0x5a>
 800ed8e:	4a09      	ldr	r2, [pc, #36]	; (800edb4 <dec_lock+0x74>)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	011b      	lsls	r3, r3, #4
 800ed94:	4413      	add	r3, r2
 800ed96:	2200      	movs	r2, #0
 800ed98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	737b      	strb	r3, [r7, #13]
 800ed9e:	e001      	b.n	800eda4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eda0:	2302      	movs	r3, #2
 800eda2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eda4:	7b7b      	ldrb	r3, [r7, #13]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	20037440 	.word	0x20037440

0800edb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800edc0:	2300      	movs	r3, #0
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e010      	b.n	800ede8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800edc6:	4a0d      	ldr	r2, [pc, #52]	; (800edfc <clear_lock+0x44>)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	011b      	lsls	r3, r3, #4
 800edcc:	4413      	add	r3, r2
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d105      	bne.n	800ede2 <clear_lock+0x2a>
 800edd6:	4a09      	ldr	r2, [pc, #36]	; (800edfc <clear_lock+0x44>)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	011b      	lsls	r3, r3, #4
 800eddc:	4413      	add	r3, r2
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3301      	adds	r3, #1
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d9eb      	bls.n	800edc6 <clear_lock+0xe>
	}
}
 800edee:	bf00      	nop
 800edf0:	3714      	adds	r7, #20
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	20037440 	.word	0x20037440

0800ee00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	78db      	ldrb	r3, [r3, #3]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d034      	beq.n	800ee7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	7858      	ldrb	r0, [r3, #1]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee24:	2301      	movs	r3, #1
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	f7ff fd40 	bl	800e8ac <disk_write>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	73fb      	strb	r3, [r7, #15]
 800ee36:	e022      	b.n	800ee7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	1ad2      	subs	r2, r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d217      	bcs.n	800ee7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	789b      	ldrb	r3, [r3, #2]
 800ee52:	613b      	str	r3, [r7, #16]
 800ee54:	e010      	b.n	800ee78 <sync_window+0x78>
					wsect += fs->fsize;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	7858      	ldrb	r0, [r3, #1]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	f7ff fd1d 	bl	800e8ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	613b      	str	r3, [r7, #16]
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d8eb      	bhi.n	800ee56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee92:	2300      	movs	r3, #0
 800ee94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d01b      	beq.n	800eed8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff ffad 	bl	800ee00 <sync_window>
 800eea6:	4603      	mov	r3, r0
 800eea8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d113      	bne.n	800eed8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	7858      	ldrb	r0, [r3, #1]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eeba:	2301      	movs	r3, #1
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	f7ff fcd5 	bl	800e86c <disk_read>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d004      	beq.n	800eed2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eec8:	f04f 33ff 	mov.w	r3, #4294967295
 800eecc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eece:	2301      	movs	r3, #1
 800eed0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800eed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
	...

0800eee4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff ff87 	bl	800ee00 <sync_window>
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eef6:	7bfb      	ldrb	r3, [r7, #15]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d159      	bne.n	800efb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b03      	cmp	r3, #3
 800ef02:	d149      	bne.n	800ef98 <sync_fs+0xb4>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	791b      	ldrb	r3, [r3, #4]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d145      	bne.n	800ef98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	899b      	ldrh	r3, [r3, #12]
 800ef16:	461a      	mov	r2, r3
 800ef18:	2100      	movs	r1, #0
 800ef1a:	f7ff fda8 	bl	800ea6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3338      	adds	r3, #56	; 0x38
 800ef22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef26:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff fd37 	bl	800e99e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3338      	adds	r3, #56	; 0x38
 800ef34:	4921      	ldr	r1, [pc, #132]	; (800efbc <sync_fs+0xd8>)
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fd4c 	bl	800e9d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	3338      	adds	r3, #56	; 0x38
 800ef40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef44:	491e      	ldr	r1, [pc, #120]	; (800efc0 <sync_fs+0xdc>)
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7ff fd44 	bl	800e9d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3338      	adds	r3, #56	; 0x38
 800ef50:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7ff fd3a 	bl	800e9d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3338      	adds	r3, #56	; 0x38
 800ef64:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4610      	mov	r0, r2
 800ef70:	f7ff fd30 	bl	800e9d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	7858      	ldrb	r0, [r3, #1]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	f7ff fc8d 	bl	800e8ac <disk_write>
			fs->fsi_flag = 0;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	785b      	ldrb	r3, [r3, #1]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2100      	movs	r1, #0
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff fca3 	bl	800e8ec <disk_ioctl>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <sync_fs+0xcc>
 800efac:	2301      	movs	r3, #1
 800efae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	41615252 	.word	0x41615252
 800efc0:	61417272 	.word	0x61417272

0800efc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	3b02      	subs	r3, #2
 800efd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	69db      	ldr	r3, [r3, #28]
 800efd8:	3b02      	subs	r3, #2
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d301      	bcc.n	800efe4 <clust2sect+0x20>
 800efe0:	2300      	movs	r3, #0
 800efe2:	e008      	b.n	800eff6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	895b      	ldrh	r3, [r3, #10]
 800efe8:	461a      	mov	r2, r3
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	fb03 f202 	mul.w	r2, r3, r2
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff4:	4413      	add	r3, r2
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	370c      	adds	r7, #12
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b086      	sub	sp, #24
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d904      	bls.n	800f022 <get_fat+0x20>
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	69db      	ldr	r3, [r3, #28]
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d302      	bcc.n	800f028 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f022:	2301      	movs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]
 800f026:	e0b7      	b.n	800f198 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f028:	f04f 33ff 	mov.w	r3, #4294967295
 800f02c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	2b02      	cmp	r3, #2
 800f034:	d05a      	beq.n	800f0ec <get_fat+0xea>
 800f036:	2b03      	cmp	r3, #3
 800f038:	d07d      	beq.n	800f136 <get_fat+0x134>
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	f040 80a2 	bne.w	800f184 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	085b      	lsrs	r3, r3, #1
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	899b      	ldrh	r3, [r3, #12]
 800f056:	4619      	mov	r1, r3
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f05e:	4413      	add	r3, r2
 800f060:	4619      	mov	r1, r3
 800f062:	6938      	ldr	r0, [r7, #16]
 800f064:	f7ff ff10 	bl	800ee88 <move_window>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 808d 	bne.w	800f18a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	60fa      	str	r2, [r7, #12]
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	8992      	ldrh	r2, [r2, #12]
 800f07a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f07e:	fb02 f201 	mul.w	r2, r2, r1
 800f082:	1a9b      	subs	r3, r3, r2
 800f084:	693a      	ldr	r2, [r7, #16]
 800f086:	4413      	add	r3, r2
 800f088:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f08c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	899b      	ldrh	r3, [r3, #12]
 800f096:	4619      	mov	r1, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f09e:	4413      	add	r3, r2
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	6938      	ldr	r0, [r7, #16]
 800f0a4:	f7ff fef0 	bl	800ee88 <move_window>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d16f      	bne.n	800f18e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	899b      	ldrh	r3, [r3, #12]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0ba:	fb02 f201 	mul.w	r2, r2, r1
 800f0be:	1a9b      	subs	r3, r3, r2
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0c8:	021b      	lsls	r3, r3, #8
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	f003 0301 	and.w	r3, r3, #1
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <get_fat+0xe0>
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	091b      	lsrs	r3, r3, #4
 800f0e0:	e002      	b.n	800f0e8 <get_fat+0xe6>
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f0e8:	617b      	str	r3, [r7, #20]
			break;
 800f0ea:	e055      	b.n	800f198 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	899b      	ldrh	r3, [r3, #12]
 800f0f4:	085b      	lsrs	r3, r3, #1
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f100:	4413      	add	r3, r2
 800f102:	4619      	mov	r1, r3
 800f104:	6938      	ldr	r0, [r7, #16]
 800f106:	f7ff febf 	bl	800ee88 <move_window>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d140      	bne.n	800f192 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	8992      	ldrh	r2, [r2, #12]
 800f11e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f122:	fb02 f200 	mul.w	r2, r2, r0
 800f126:	1a9b      	subs	r3, r3, r2
 800f128:	440b      	add	r3, r1
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff fbfc 	bl	800e928 <ld_word>
 800f130:	4603      	mov	r3, r0
 800f132:	617b      	str	r3, [r7, #20]
			break;
 800f134:	e030      	b.n	800f198 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	899b      	ldrh	r3, [r3, #12]
 800f13e:	089b      	lsrs	r3, r3, #2
 800f140:	b29b      	uxth	r3, r3
 800f142:	4619      	mov	r1, r3
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	fbb3 f3f1 	udiv	r3, r3, r1
 800f14a:	4413      	add	r3, r2
 800f14c:	4619      	mov	r1, r3
 800f14e:	6938      	ldr	r0, [r7, #16]
 800f150:	f7ff fe9a 	bl	800ee88 <move_window>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d11d      	bne.n	800f196 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	8992      	ldrh	r2, [r2, #12]
 800f168:	fbb3 f0f2 	udiv	r0, r3, r2
 800f16c:	fb02 f200 	mul.w	r2, r2, r0
 800f170:	1a9b      	subs	r3, r3, r2
 800f172:	440b      	add	r3, r1
 800f174:	4618      	mov	r0, r3
 800f176:	f7ff fbef 	bl	800e958 <ld_dword>
 800f17a:	4603      	mov	r3, r0
 800f17c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f180:	617b      	str	r3, [r7, #20]
			break;
 800f182:	e009      	b.n	800f198 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f184:	2301      	movs	r3, #1
 800f186:	617b      	str	r3, [r7, #20]
 800f188:	e006      	b.n	800f198 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f18a:	bf00      	nop
 800f18c:	e004      	b.n	800f198 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f18e:	bf00      	nop
 800f190:	e002      	b.n	800f198 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f192:	bf00      	nop
 800f194:	e000      	b.n	800f198 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f196:	bf00      	nop
		}
	}

	return val;
 800f198:	697b      	ldr	r3, [r7, #20]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f1a2:	b590      	push	{r4, r7, lr}
 800f1a4:	b089      	sub	sp, #36	; 0x24
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	60f8      	str	r0, [r7, #12]
 800f1aa:	60b9      	str	r1, [r7, #8]
 800f1ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	f240 8106 	bls.w	800f3c6 <put_fat+0x224>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	69db      	ldr	r3, [r3, #28]
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	f080 8100 	bcs.w	800f3c6 <put_fat+0x224>
		switch (fs->fs_type) {
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	f000 8088 	beq.w	800f2e0 <put_fat+0x13e>
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	f000 80b0 	beq.w	800f336 <put_fat+0x194>
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	f040 80f5 	bne.w	800f3c6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	61bb      	str	r3, [r7, #24]
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	085b      	lsrs	r3, r3, #1
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	899b      	ldrh	r3, [r3, #12]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7ff fe42 	bl	800ee88 <move_window>
 800f204:	4603      	mov	r3, r0
 800f206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f208:	7ffb      	ldrb	r3, [r7, #31]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f040 80d4 	bne.w	800f3b8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	1c5a      	adds	r2, r3, #1
 800f21a:	61ba      	str	r2, [r7, #24]
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	8992      	ldrh	r2, [r2, #12]
 800f220:	fbb3 f0f2 	udiv	r0, r3, r2
 800f224:	fb02 f200 	mul.w	r2, r2, r0
 800f228:	1a9b      	subs	r3, r3, r2
 800f22a:	440b      	add	r3, r1
 800f22c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	f003 0301 	and.w	r3, r3, #1
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00d      	beq.n	800f254 <put_fat+0xb2>
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	b25b      	sxtb	r3, r3
 800f23e:	f003 030f 	and.w	r3, r3, #15
 800f242:	b25a      	sxtb	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	011b      	lsls	r3, r3, #4
 800f24a:	b25b      	sxtb	r3, r3
 800f24c:	4313      	orrs	r3, r2
 800f24e:	b25b      	sxtb	r3, r3
 800f250:	b2db      	uxtb	r3, r3
 800f252:	e001      	b.n	800f258 <put_fat+0xb6>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	b2db      	uxtb	r3, r3
 800f258:	697a      	ldr	r2, [r7, #20]
 800f25a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2201      	movs	r2, #1
 800f260:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	899b      	ldrh	r3, [r3, #12]
 800f26a:	4619      	mov	r1, r3
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f272:	4413      	add	r3, r2
 800f274:	4619      	mov	r1, r3
 800f276:	68f8      	ldr	r0, [r7, #12]
 800f278:	f7ff fe06 	bl	800ee88 <move_window>
 800f27c:	4603      	mov	r3, r0
 800f27e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f280:	7ffb      	ldrb	r3, [r7, #31]
 800f282:	2b00      	cmp	r3, #0
 800f284:	f040 809a 	bne.w	800f3bc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	899b      	ldrh	r3, [r3, #12]
 800f292:	461a      	mov	r2, r3
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	fbb3 f0f2 	udiv	r0, r3, r2
 800f29a:	fb02 f200 	mul.w	r2, r2, r0
 800f29e:	1a9b      	subs	r3, r3, r2
 800f2a0:	440b      	add	r3, r1
 800f2a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <put_fat+0x114>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	091b      	lsrs	r3, r3, #4
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	e00e      	b.n	800f2d4 <put_fat+0x132>
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	b25b      	sxtb	r3, r3
 800f2bc:	f023 030f 	bic.w	r3, r3, #15
 800f2c0:	b25a      	sxtb	r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	0a1b      	lsrs	r3, r3, #8
 800f2c6:	b25b      	sxtb	r3, r3
 800f2c8:	f003 030f 	and.w	r3, r3, #15
 800f2cc:	b25b      	sxtb	r3, r3
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	b25b      	sxtb	r3, r3
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	70da      	strb	r2, [r3, #3]
			break;
 800f2de:	e072      	b.n	800f3c6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	899b      	ldrh	r3, [r3, #12]
 800f2e8:	085b      	lsrs	r3, r3, #1
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2f4:	4413      	add	r3, r2
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f7ff fdc5 	bl	800ee88 <move_window>
 800f2fe:	4603      	mov	r3, r0
 800f300:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f302:	7ffb      	ldrb	r3, [r7, #31]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d15b      	bne.n	800f3c0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	8992      	ldrh	r2, [r2, #12]
 800f316:	fbb3 f0f2 	udiv	r0, r3, r2
 800f31a:	fb02 f200 	mul.w	r2, r2, r0
 800f31e:	1a9b      	subs	r3, r3, r2
 800f320:	440b      	add	r3, r1
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	b292      	uxth	r2, r2
 800f326:	4611      	mov	r1, r2
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff fb38 	bl	800e99e <st_word>
			fs->wflag = 1;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2201      	movs	r2, #1
 800f332:	70da      	strb	r2, [r3, #3]
			break;
 800f334:	e047      	b.n	800f3c6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	899b      	ldrh	r3, [r3, #12]
 800f33e:	089b      	lsrs	r3, r3, #2
 800f340:	b29b      	uxth	r3, r3
 800f342:	4619      	mov	r1, r3
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	fbb3 f3f1 	udiv	r3, r3, r1
 800f34a:	4413      	add	r3, r2
 800f34c:	4619      	mov	r1, r3
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff fd9a 	bl	800ee88 <move_window>
 800f354:	4603      	mov	r3, r0
 800f356:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f358:	7ffb      	ldrb	r3, [r7, #31]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d132      	bne.n	800f3c4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	8992      	ldrh	r2, [r2, #12]
 800f372:	fbb3 f0f2 	udiv	r0, r3, r2
 800f376:	fb02 f200 	mul.w	r2, r2, r0
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	440b      	add	r3, r1
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff faea 	bl	800e958 <ld_dword>
 800f384:	4603      	mov	r3, r0
 800f386:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f38a:	4323      	orrs	r3, r4
 800f38c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	8992      	ldrh	r2, [r2, #12]
 800f39c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3a0:	fb02 f200 	mul.w	r2, r2, r0
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	6879      	ldr	r1, [r7, #4]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff fb12 	bl	800e9d4 <st_dword>
			fs->wflag = 1;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	70da      	strb	r2, [r3, #3]
			break;
 800f3b6:	e006      	b.n	800f3c6 <put_fat+0x224>
			if (res != FR_OK) break;
 800f3b8:	bf00      	nop
 800f3ba:	e004      	b.n	800f3c6 <put_fat+0x224>
			if (res != FR_OK) break;
 800f3bc:	bf00      	nop
 800f3be:	e002      	b.n	800f3c6 <put_fat+0x224>
			if (res != FR_OK) break;
 800f3c0:	bf00      	nop
 800f3c2:	e000      	b.n	800f3c6 <put_fat+0x224>
			if (res != FR_OK) break;
 800f3c4:	bf00      	nop
		}
	}
	return res;
 800f3c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3724      	adds	r7, #36	; 0x24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd90      	pop	{r4, r7, pc}

0800f3d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d904      	bls.n	800f3f6 <remove_chain+0x26>
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	69db      	ldr	r3, [r3, #28]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d301      	bcc.n	800f3fa <remove_chain+0x2a>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e04b      	b.n	800f492 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00c      	beq.n	800f41a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f400:	f04f 32ff 	mov.w	r2, #4294967295
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	69b8      	ldr	r0, [r7, #24]
 800f408:	f7ff fecb 	bl	800f1a2 <put_fat>
 800f40c:	4603      	mov	r3, r0
 800f40e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f410:	7ffb      	ldrb	r3, [r7, #31]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <remove_chain+0x4a>
 800f416:	7ffb      	ldrb	r3, [r7, #31]
 800f418:	e03b      	b.n	800f492 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f41a:	68b9      	ldr	r1, [r7, #8]
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f7ff fdf0 	bl	800f002 <get_fat>
 800f422:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d031      	beq.n	800f48e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d101      	bne.n	800f434 <remove_chain+0x64>
 800f430:	2302      	movs	r3, #2
 800f432:	e02e      	b.n	800f492 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f43a:	d101      	bne.n	800f440 <remove_chain+0x70>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e028      	b.n	800f492 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f440:	2200      	movs	r2, #0
 800f442:	68b9      	ldr	r1, [r7, #8]
 800f444:	69b8      	ldr	r0, [r7, #24]
 800f446:	f7ff feac 	bl	800f1a2 <put_fat>
 800f44a:	4603      	mov	r3, r0
 800f44c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f44e:	7ffb      	ldrb	r3, [r7, #31]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <remove_chain+0x88>
 800f454:	7ffb      	ldrb	r3, [r7, #31]
 800f456:	e01c      	b.n	800f492 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	695a      	ldr	r2, [r3, #20]
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	3b02      	subs	r3, #2
 800f462:	429a      	cmp	r2, r3
 800f464:	d20b      	bcs.n	800f47e <remove_chain+0xae>
			fs->free_clst++;
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	695b      	ldr	r3, [r3, #20]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	791b      	ldrb	r3, [r3, #4]
 800f474:	f043 0301 	orr.w	r3, r3, #1
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	69db      	ldr	r3, [r3, #28]
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d3c6      	bcc.n	800f41a <remove_chain+0x4a>
 800f48c:	e000      	b.n	800f490 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f48e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3720      	adds	r7, #32
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b088      	sub	sp, #32
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10d      	bne.n	800f4cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d004      	beq.n	800f4c6 <create_chain+0x2c>
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	69db      	ldr	r3, [r3, #28]
 800f4c0:	69ba      	ldr	r2, [r7, #24]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d31b      	bcc.n	800f4fe <create_chain+0x64>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	61bb      	str	r3, [r7, #24]
 800f4ca:	e018      	b.n	800f4fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4cc:	6839      	ldr	r1, [r7, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fd97 	bl	800f002 <get_fat>
 800f4d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d801      	bhi.n	800f4e0 <create_chain+0x46>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e070      	b.n	800f5c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e6:	d101      	bne.n	800f4ec <create_chain+0x52>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	e06a      	b.n	800f5c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	69db      	ldr	r3, [r3, #28]
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d201      	bcs.n	800f4fa <create_chain+0x60>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	e063      	b.n	800f5c2 <create_chain+0x128>
		scl = clst;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	3301      	adds	r3, #1
 800f506:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	69db      	ldr	r3, [r3, #28]
 800f50c:	69fa      	ldr	r2, [r7, #28]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d307      	bcc.n	800f522 <create_chain+0x88>
				ncl = 2;
 800f512:	2302      	movs	r3, #2
 800f514:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f516:	69fa      	ldr	r2, [r7, #28]
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d901      	bls.n	800f522 <create_chain+0x88>
 800f51e:	2300      	movs	r3, #0
 800f520:	e04f      	b.n	800f5c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f522:	69f9      	ldr	r1, [r7, #28]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff fd6c 	bl	800f002 <get_fat>
 800f52a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00e      	beq.n	800f550 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d003      	beq.n	800f540 <create_chain+0xa6>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d101      	bne.n	800f544 <create_chain+0xaa>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	e03e      	b.n	800f5c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f544:	69fa      	ldr	r2, [r7, #28]
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d1da      	bne.n	800f502 <create_chain+0x68>
 800f54c:	2300      	movs	r3, #0
 800f54e:	e038      	b.n	800f5c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f550:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f552:	f04f 32ff 	mov.w	r2, #4294967295
 800f556:	69f9      	ldr	r1, [r7, #28]
 800f558:	6938      	ldr	r0, [r7, #16]
 800f55a:	f7ff fe22 	bl	800f1a2 <put_fat>
 800f55e:	4603      	mov	r3, r0
 800f560:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f562:	7dfb      	ldrb	r3, [r7, #23]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d109      	bne.n	800f57c <create_chain+0xe2>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d006      	beq.n	800f57c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6938      	ldr	r0, [r7, #16]
 800f574:	f7ff fe15 	bl	800f1a2 <put_fat>
 800f578:	4603      	mov	r3, r0
 800f57a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f57c:	7dfb      	ldrb	r3, [r7, #23]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d116      	bne.n	800f5b0 <create_chain+0x116>
		fs->last_clst = ncl;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	69fa      	ldr	r2, [r7, #28]
 800f586:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	695a      	ldr	r2, [r3, #20]
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	69db      	ldr	r3, [r3, #28]
 800f590:	3b02      	subs	r3, #2
 800f592:	429a      	cmp	r2, r3
 800f594:	d804      	bhi.n	800f5a0 <create_chain+0x106>
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	1e5a      	subs	r2, r3, #1
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	791b      	ldrb	r3, [r3, #4]
 800f5a4:	f043 0301 	orr.w	r3, r3, #1
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	711a      	strb	r2, [r3, #4]
 800f5ae:	e007      	b.n	800f5c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f5b0:	7dfb      	ldrb	r3, [r7, #23]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d102      	bne.n	800f5bc <create_chain+0x122>
 800f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ba:	e000      	b.n	800f5be <create_chain+0x124>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f5c0:	69fb      	ldr	r3, [r7, #28]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3720      	adds	r7, #32
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b087      	sub	sp, #28
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
 800f5d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5de:	3304      	adds	r3, #4
 800f5e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	899b      	ldrh	r3, [r3, #12]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	8952      	ldrh	r2, [r2, #10]
 800f5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	1d1a      	adds	r2, r3, #4
 800f5fc:	613a      	str	r2, [r7, #16]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <clmt_clust+0x42>
 800f608:	2300      	movs	r3, #0
 800f60a:	e010      	b.n	800f62e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f60c:	697a      	ldr	r2, [r7, #20]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	429a      	cmp	r2, r3
 800f612:	d307      	bcc.n	800f624 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	3304      	adds	r3, #4
 800f620:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f622:	e7e9      	b.n	800f5f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f624:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	4413      	add	r3, r2
}
 800f62e:	4618      	mov	r0, r3
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b086      	sub	sp, #24
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f650:	d204      	bcs.n	800f65c <dir_sdi+0x22>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	f003 031f 	and.w	r3, r3, #31
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f65c:	2302      	movs	r3, #2
 800f65e:	e071      	b.n	800f744 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <dir_sdi+0x46>
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d902      	bls.n	800f680 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f67e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10c      	bne.n	800f6a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	095b      	lsrs	r3, r3, #5
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	8912      	ldrh	r2, [r2, #8]
 800f68e:	4293      	cmp	r3, r2
 800f690:	d301      	bcc.n	800f696 <dir_sdi+0x5c>
 800f692:	2302      	movs	r3, #2
 800f694:	e056      	b.n	800f744 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	61da      	str	r2, [r3, #28]
 800f69e:	e02d      	b.n	800f6fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	895b      	ldrh	r3, [r3, #10]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	899b      	ldrh	r3, [r3, #12]
 800f6aa:	fb03 f302 	mul.w	r3, r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6b0:	e019      	b.n	800f6e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6979      	ldr	r1, [r7, #20]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fca3 	bl	800f002 <get_fat>
 800f6bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c4:	d101      	bne.n	800f6ca <dir_sdi+0x90>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e03c      	b.n	800f744 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d904      	bls.n	800f6da <dir_sdi+0xa0>
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	69db      	ldr	r3, [r3, #28]
 800f6d4:	697a      	ldr	r2, [r7, #20]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d301      	bcc.n	800f6de <dir_sdi+0xa4>
 800f6da:	2302      	movs	r3, #2
 800f6dc:	e032      	b.n	800f744 <dir_sdi+0x10a>
			ofs -= csz;
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d2e1      	bcs.n	800f6b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f6ee:	6979      	ldr	r1, [r7, #20]
 800f6f0:	6938      	ldr	r0, [r7, #16]
 800f6f2:	f7ff fc67 	bl	800efc4 <clust2sect>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d101      	bne.n	800f70e <dir_sdi+0xd4>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e01a      	b.n	800f744 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	69da      	ldr	r2, [r3, #28]
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	899b      	ldrh	r3, [r3, #12]
 800f716:	4619      	mov	r1, r3
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f71e:	441a      	add	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	899b      	ldrh	r3, [r3, #12]
 800f72e:	461a      	mov	r2, r3
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	fbb3 f0f2 	udiv	r0, r3, r2
 800f736:	fb02 f200 	mul.w	r2, r2, r0
 800f73a:	1a9b      	subs	r3, r3, r2
 800f73c:	18ca      	adds	r2, r1, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f742:	2300      	movs	r3, #0
}
 800f744:	4618      	mov	r0, r3
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	3320      	adds	r3, #32
 800f762:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d003      	beq.n	800f774 <dir_next+0x28>
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f772:	d301      	bcc.n	800f778 <dir_next+0x2c>
 800f774:	2304      	movs	r3, #4
 800f776:	e0bb      	b.n	800f8f0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	899b      	ldrh	r3, [r3, #12]
 800f77c:	461a      	mov	r2, r3
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	fbb3 f1f2 	udiv	r1, r3, r2
 800f784:	fb02 f201 	mul.w	r2, r2, r1
 800f788:	1a9b      	subs	r3, r3, r2
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f040 809d 	bne.w	800f8ca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	69db      	ldr	r3, [r3, #28]
 800f794:	1c5a      	adds	r2, r3, #1
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	699b      	ldr	r3, [r3, #24]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10b      	bne.n	800f7ba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	095b      	lsrs	r3, r3, #5
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	8912      	ldrh	r2, [r2, #8]
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	f0c0 808d 	bcc.w	800f8ca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	61da      	str	r2, [r3, #28]
 800f7b6:	2304      	movs	r3, #4
 800f7b8:	e09a      	b.n	800f8f0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	899b      	ldrh	r3, [r3, #12]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	8952      	ldrh	r2, [r2, #10]
 800f7ca:	3a01      	subs	r2, #1
 800f7cc:	4013      	ands	r3, r2
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d17b      	bne.n	800f8ca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	4619      	mov	r1, r3
 800f7da:	4610      	mov	r0, r2
 800f7dc:	f7ff fc11 	bl	800f002 <get_fat>
 800f7e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d801      	bhi.n	800f7ec <dir_next+0xa0>
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	e081      	b.n	800f8f0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	d101      	bne.n	800f7f8 <dir_next+0xac>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e07b      	b.n	800f8f0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	69db      	ldr	r3, [r3, #28]
 800f7fc:	697a      	ldr	r2, [r7, #20]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d359      	bcc.n	800f8b6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d104      	bne.n	800f812 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	61da      	str	r2, [r3, #28]
 800f80e:	2304      	movs	r3, #4
 800f810:	e06e      	b.n	800f8f0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7ff fe3d 	bl	800f49a <create_chain>
 800f820:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <dir_next+0xe0>
 800f828:	2307      	movs	r3, #7
 800f82a:	e061      	b.n	800f8f0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d101      	bne.n	800f836 <dir_next+0xea>
 800f832:	2302      	movs	r3, #2
 800f834:	e05c      	b.n	800f8f0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83c:	d101      	bne.n	800f842 <dir_next+0xf6>
 800f83e:	2301      	movs	r3, #1
 800f840:	e056      	b.n	800f8f0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f7ff fadc 	bl	800ee00 <sync_window>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <dir_next+0x106>
 800f84e:	2301      	movs	r3, #1
 800f850:	e04e      	b.n	800f8f0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	899b      	ldrh	r3, [r3, #12]
 800f85c:	461a      	mov	r2, r3
 800f85e:	2100      	movs	r1, #0
 800f860:	f7ff f905 	bl	800ea6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f864:	2300      	movs	r3, #0
 800f866:	613b      	str	r3, [r7, #16]
 800f868:	6979      	ldr	r1, [r7, #20]
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7ff fbaa 	bl	800efc4 <clust2sect>
 800f870:	4602      	mov	r2, r0
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	635a      	str	r2, [r3, #52]	; 0x34
 800f876:	e012      	b.n	800f89e <dir_next+0x152>
						fs->wflag = 1;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2201      	movs	r2, #1
 800f87c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff fabe 	bl	800ee00 <sync_window>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <dir_next+0x142>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e030      	b.n	800f8f0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	3301      	adds	r3, #1
 800f892:	613b      	str	r3, [r7, #16]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	635a      	str	r2, [r3, #52]	; 0x34
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	895b      	ldrh	r3, [r3, #10]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d3e6      	bcc.n	800f878 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	1ad2      	subs	r2, r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	697a      	ldr	r2, [r7, #20]
 800f8ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8bc:	6979      	ldr	r1, [r7, #20]
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f7ff fb80 	bl	800efc4 <clust2sect>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	899b      	ldrh	r3, [r3, #12]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8e2:	fb02 f200 	mul.w	r2, r2, r0
 800f8e6:	1a9b      	subs	r3, r3, r2
 800f8e8:	18ca      	adds	r2, r1, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f908:	2100      	movs	r1, #0
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7ff fe95 	bl	800f63a <dir_sdi>
 800f910:	4603      	mov	r3, r0
 800f912:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f914:	7dfb      	ldrb	r3, [r7, #23]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d12b      	bne.n	800f972 <dir_alloc+0x7a>
		n = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	69db      	ldr	r3, [r3, #28]
 800f922:	4619      	mov	r1, r3
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f7ff faaf 	bl	800ee88 <move_window>
 800f92a:	4603      	mov	r3, r0
 800f92c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d11d      	bne.n	800f970 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a1b      	ldr	r3, [r3, #32]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2be5      	cmp	r3, #229	; 0xe5
 800f93c:	d004      	beq.n	800f948 <dir_alloc+0x50>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d107      	bne.n	800f958 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	3301      	adds	r3, #1
 800f94c:	613b      	str	r3, [r7, #16]
 800f94e:	693a      	ldr	r2, [r7, #16]
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	429a      	cmp	r2, r3
 800f954:	d102      	bne.n	800f95c <dir_alloc+0x64>
 800f956:	e00c      	b.n	800f972 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f958:	2300      	movs	r3, #0
 800f95a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f95c:	2101      	movs	r1, #1
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff fef4 	bl	800f74c <dir_next>
 800f964:	4603      	mov	r3, r0
 800f966:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0d7      	beq.n	800f91e <dir_alloc+0x26>
 800f96e:	e000      	b.n	800f972 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f970:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f972:	7dfb      	ldrb	r3, [r7, #23]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d101      	bne.n	800f97c <dir_alloc+0x84>
 800f978:	2307      	movs	r3, #7
 800f97a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3718      	adds	r7, #24
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	331a      	adds	r3, #26
 800f994:	4618      	mov	r0, r3
 800f996:	f7fe ffc7 	bl	800e928 <ld_word>
 800f99a:	4603      	mov	r3, r0
 800f99c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b03      	cmp	r3, #3
 800f9a4:	d109      	bne.n	800f9ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	3314      	adds	r3, #20
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fe ffbc 	bl	800e928 <ld_word>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	041b      	lsls	r3, r3, #16
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	4313      	orrs	r3, r2
 800f9b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	331a      	adds	r3, #26
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	b292      	uxth	r2, r2
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe ffdf 	bl	800e99e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d109      	bne.n	800f9fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	f103 0214 	add.w	r2, r3, #20
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	0c1b      	lsrs	r3, r3, #16
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	f7fe ffd1 	bl	800e99e <st_word>
	}
}
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fa0e:	2304      	movs	r3, #4
 800fa10:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fa18:	e03c      	b.n	800fa94 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	69db      	ldr	r3, [r3, #28]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6938      	ldr	r0, [r7, #16]
 800fa22:	f7ff fa31 	bl	800ee88 <move_window>
 800fa26:	4603      	mov	r3, r0
 800fa28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa2a:	7dfb      	ldrb	r3, [r7, #23]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d136      	bne.n	800fa9e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d102      	bne.n	800fa44 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fa3e:	2304      	movs	r3, #4
 800fa40:	75fb      	strb	r3, [r7, #23]
 800fa42:	e031      	b.n	800faa8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6a1b      	ldr	r3, [r3, #32]
 800fa48:	330b      	adds	r3, #11
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa50:	73bb      	strb	r3, [r7, #14]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	7bba      	ldrb	r2, [r7, #14]
 800fa56:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	2be5      	cmp	r3, #229	; 0xe5
 800fa5c:	d011      	beq.n	800fa82 <dir_read+0x7e>
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
 800fa60:	2b2e      	cmp	r3, #46	; 0x2e
 800fa62:	d00e      	beq.n	800fa82 <dir_read+0x7e>
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
 800fa66:	2b0f      	cmp	r3, #15
 800fa68:	d00b      	beq.n	800fa82 <dir_read+0x7e>
 800fa6a:	7bbb      	ldrb	r3, [r7, #14]
 800fa6c:	f023 0320 	bic.w	r3, r3, #32
 800fa70:	2b08      	cmp	r3, #8
 800fa72:	bf0c      	ite	eq
 800fa74:	2301      	moveq	r3, #1
 800fa76:	2300      	movne	r3, #0
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d00f      	beq.n	800faa2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fa82:	2100      	movs	r1, #0
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff fe61 	bl	800f74c <dir_next>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa8e:	7dfb      	ldrb	r3, [r7, #23]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d108      	bne.n	800faa6 <dir_read+0xa2>
	while (dp->sect) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	69db      	ldr	r3, [r3, #28]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1be      	bne.n	800fa1a <dir_read+0x16>
 800fa9c:	e004      	b.n	800faa8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fa9e:	bf00      	nop
 800faa0:	e002      	b.n	800faa8 <dir_read+0xa4>
				break;
 800faa2:	bf00      	nop
 800faa4:	e000      	b.n	800faa8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800faa6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <dir_read+0xb0>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	61da      	str	r2, [r3, #28]
	return res;
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b086      	sub	sp, #24
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800facc:	2100      	movs	r1, #0
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7ff fdb3 	bl	800f63a <dir_sdi>
 800fad4:	4603      	mov	r3, r0
 800fad6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fad8:	7dfb      	ldrb	r3, [r7, #23]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <dir_find+0x24>
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	e03e      	b.n	800fb60 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	4619      	mov	r1, r3
 800fae8:	6938      	ldr	r0, [r7, #16]
 800faea:	f7ff f9cd 	bl	800ee88 <move_window>
 800faee:	4603      	mov	r3, r0
 800faf0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800faf2:	7dfb      	ldrb	r3, [r7, #23]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d12f      	bne.n	800fb58 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a1b      	ldr	r3, [r3, #32]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb00:	7bfb      	ldrb	r3, [r7, #15]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d102      	bne.n	800fb0c <dir_find+0x4e>
 800fb06:	2304      	movs	r3, #4
 800fb08:	75fb      	strb	r3, [r7, #23]
 800fb0a:	e028      	b.n	800fb5e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a1b      	ldr	r3, [r3, #32]
 800fb10:	330b      	adds	r3, #11
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb18:	b2da      	uxtb	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	330b      	adds	r3, #11
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	f003 0308 	and.w	r3, r3, #8
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10a      	bne.n	800fb44 <dir_find+0x86>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a18      	ldr	r0, [r3, #32]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3324      	adds	r3, #36	; 0x24
 800fb36:	220b      	movs	r2, #11
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f7fe ffb2 	bl	800eaa2 <mem_cmp>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00b      	beq.n	800fb5c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb44:	2100      	movs	r1, #0
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fe00 	bl	800f74c <dir_next>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d0c5      	beq.n	800fae2 <dir_find+0x24>
 800fb56:	e002      	b.n	800fb5e <dir_find+0xa0>
		if (res != FR_OK) break;
 800fb58:	bf00      	nop
 800fb5a:	e000      	b.n	800fb5e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb5c:	bf00      	nop

	return res;
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fb76:	2101      	movs	r1, #1
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7ff febd 	bl	800f8f8 <dir_alloc>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d11c      	bne.n	800fbc2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	69db      	ldr	r3, [r3, #28]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	68b8      	ldr	r0, [r7, #8]
 800fb90:	f7ff f97a 	bl	800ee88 <move_window>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d111      	bne.n	800fbc2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	2220      	movs	r2, #32
 800fba4:	2100      	movs	r1, #0
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fe ff61 	bl	800ea6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6a18      	ldr	r0, [r3, #32]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3324      	adds	r3, #36	; 0x24
 800fbb4:	220b      	movs	r2, #11
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	f7fe ff38 	bl	800ea2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3710      	adds	r7, #16
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	4619      	mov	r1, r3
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	f7ff f951 	bl	800ee88 <move_window>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fbea:	7afb      	ldrb	r3, [r7, #11]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d106      	bne.n	800fbfe <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6a1b      	ldr	r3, [r3, #32]
 800fbf4:	22e5      	movs	r2, #229	; 0xe5
 800fbf6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fbfe:	7afb      	ldrb	r3, [r7, #11]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3324      	adds	r3, #36	; 0x24
 800fc1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fc1e:	220b      	movs	r2, #11
 800fc20:	2120      	movs	r1, #32
 800fc22:	68b8      	ldr	r0, [r7, #8]
 800fc24:	f7fe ff23 	bl	800ea6e <mem_set>
	si = i = 0; ni = 8;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	617b      	str	r3, [r7, #20]
 800fc30:	2308      	movs	r3, #8
 800fc32:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	4413      	add	r3, r2
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	2b2e      	cmp	r3, #46	; 0x2e
 800fc3e:	d12f      	bne.n	800fca0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	617a      	str	r2, [r7, #20]
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	4413      	add	r3, r2
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800fc4e:	7ffb      	ldrb	r3, [r7, #31]
 800fc50:	2b2e      	cmp	r3, #46	; 0x2e
 800fc52:	d10a      	bne.n	800fc6a <create_name+0x62>
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d807      	bhi.n	800fc6a <create_name+0x62>
			sfn[i++] = c;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	613a      	str	r2, [r7, #16]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	4413      	add	r3, r2
 800fc64:	7ffa      	ldrb	r2, [r7, #31]
 800fc66:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fc68:	e7ea      	b.n	800fc40 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fc6a:	7ffb      	ldrb	r3, [r7, #31]
 800fc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800fc6e:	d007      	beq.n	800fc80 <create_name+0x78>
 800fc70:	7ffb      	ldrb	r3, [r7, #31]
 800fc72:	2b5c      	cmp	r3, #92	; 0x5c
 800fc74:	d004      	beq.n	800fc80 <create_name+0x78>
 800fc76:	7ffb      	ldrb	r3, [r7, #31]
 800fc78:	2b20      	cmp	r3, #32
 800fc7a:	d901      	bls.n	800fc80 <create_name+0x78>
 800fc7c:	2306      	movs	r3, #6
 800fc7e:	e084      	b.n	800fd8a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	441a      	add	r2, r3
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fc8a:	7ffb      	ldrb	r3, [r7, #31]
 800fc8c:	2b20      	cmp	r3, #32
 800fc8e:	d801      	bhi.n	800fc94 <create_name+0x8c>
 800fc90:	2224      	movs	r2, #36	; 0x24
 800fc92:	e000      	b.n	800fc96 <create_name+0x8e>
 800fc94:	2220      	movs	r2, #32
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	330b      	adds	r3, #11
 800fc9a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	e074      	b.n	800fd8a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	617a      	str	r2, [r7, #20]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	4413      	add	r3, r2
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fcae:	7ffb      	ldrb	r3, [r7, #31]
 800fcb0:	2b20      	cmp	r3, #32
 800fcb2:	d94e      	bls.n	800fd52 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fcb4:	7ffb      	ldrb	r3, [r7, #31]
 800fcb6:	2b2f      	cmp	r3, #47	; 0x2f
 800fcb8:	d006      	beq.n	800fcc8 <create_name+0xc0>
 800fcba:	7ffb      	ldrb	r3, [r7, #31]
 800fcbc:	2b5c      	cmp	r3, #92	; 0x5c
 800fcbe:	d110      	bne.n	800fce2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fcc0:	e002      	b.n	800fcc8 <create_name+0xc0>
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	617b      	str	r3, [r7, #20]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	4413      	add	r3, r2
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b2f      	cmp	r3, #47	; 0x2f
 800fcd2:	d0f6      	beq.n	800fcc2 <create_name+0xba>
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	4413      	add	r3, r2
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	2b5c      	cmp	r3, #92	; 0x5c
 800fcde:	d0f0      	beq.n	800fcc2 <create_name+0xba>
			break;
 800fce0:	e038      	b.n	800fd54 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fce2:	7ffb      	ldrb	r3, [r7, #31]
 800fce4:	2b2e      	cmp	r3, #46	; 0x2e
 800fce6:	d003      	beq.n	800fcf0 <create_name+0xe8>
 800fce8:	693a      	ldr	r2, [r7, #16]
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d30c      	bcc.n	800fd0a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	2b0b      	cmp	r3, #11
 800fcf4:	d002      	beq.n	800fcfc <create_name+0xf4>
 800fcf6:	7ffb      	ldrb	r3, [r7, #31]
 800fcf8:	2b2e      	cmp	r3, #46	; 0x2e
 800fcfa:	d001      	beq.n	800fd00 <create_name+0xf8>
 800fcfc:	2306      	movs	r3, #6
 800fcfe:	e044      	b.n	800fd8a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800fd00:	2308      	movs	r3, #8
 800fd02:	613b      	str	r3, [r7, #16]
 800fd04:	230b      	movs	r3, #11
 800fd06:	61bb      	str	r3, [r7, #24]
			continue;
 800fd08:	e022      	b.n	800fd50 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fd0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	da04      	bge.n	800fd1c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fd12:	7ffb      	ldrb	r3, [r7, #31]
 800fd14:	3b80      	subs	r3, #128	; 0x80
 800fd16:	4a1f      	ldr	r2, [pc, #124]	; (800fd94 <create_name+0x18c>)
 800fd18:	5cd3      	ldrb	r3, [r2, r3]
 800fd1a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fd1c:	7ffb      	ldrb	r3, [r7, #31]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	481d      	ldr	r0, [pc, #116]	; (800fd98 <create_name+0x190>)
 800fd22:	f7fe fee5 	bl	800eaf0 <chk_chr>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <create_name+0x128>
 800fd2c:	2306      	movs	r3, #6
 800fd2e:	e02c      	b.n	800fd8a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fd30:	7ffb      	ldrb	r3, [r7, #31]
 800fd32:	2b60      	cmp	r3, #96	; 0x60
 800fd34:	d905      	bls.n	800fd42 <create_name+0x13a>
 800fd36:	7ffb      	ldrb	r3, [r7, #31]
 800fd38:	2b7a      	cmp	r3, #122	; 0x7a
 800fd3a:	d802      	bhi.n	800fd42 <create_name+0x13a>
 800fd3c:	7ffb      	ldrb	r3, [r7, #31]
 800fd3e:	3b20      	subs	r3, #32
 800fd40:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	1c5a      	adds	r2, r3, #1
 800fd46:	613a      	str	r2, [r7, #16]
 800fd48:	68ba      	ldr	r2, [r7, #8]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	7ffa      	ldrb	r2, [r7, #31]
 800fd4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fd50:	e7a6      	b.n	800fca0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fd52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	441a      	add	r2, r3
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d101      	bne.n	800fd68 <create_name+0x160>
 800fd64:	2306      	movs	r3, #6
 800fd66:	e010      	b.n	800fd8a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2be5      	cmp	r3, #229	; 0xe5
 800fd6e:	d102      	bne.n	800fd76 <create_name+0x16e>
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	2205      	movs	r2, #5
 800fd74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fd76:	7ffb      	ldrb	r3, [r7, #31]
 800fd78:	2b20      	cmp	r3, #32
 800fd7a:	d801      	bhi.n	800fd80 <create_name+0x178>
 800fd7c:	2204      	movs	r2, #4
 800fd7e:	e000      	b.n	800fd82 <create_name+0x17a>
 800fd80:	2200      	movs	r2, #0
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	330b      	adds	r3, #11
 800fd86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fd88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3720      	adds	r7, #32
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	08017f6c 	.word	0x08017f6c
 800fd98:	08017f1c 	.word	0x08017f1c

0800fd9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b2f      	cmp	r3, #47	; 0x2f
 800fdb6:	d00b      	beq.n	800fdd0 <follow_path+0x34>
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	2b5c      	cmp	r3, #92	; 0x5c
 800fdbe:	d007      	beq.n	800fdd0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	699a      	ldr	r2, [r3, #24]
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	609a      	str	r2, [r3, #8]
 800fdc8:	e00d      	b.n	800fde6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	2b2f      	cmp	r3, #47	; 0x2f
 800fdd6:	d0f8      	beq.n	800fdca <follow_path+0x2e>
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	2b5c      	cmp	r3, #92	; 0x5c
 800fdde:	d0f4      	beq.n	800fdca <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	2200      	movs	r2, #0
 800fde4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	2b1f      	cmp	r3, #31
 800fdec:	d80a      	bhi.n	800fe04 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2280      	movs	r2, #128	; 0x80
 800fdf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7ff fc1e 	bl	800f63a <dir_sdi>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	75fb      	strb	r3, [r7, #23]
 800fe02:	e05b      	b.n	800febc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe04:	463b      	mov	r3, r7
 800fe06:	4619      	mov	r1, r3
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7ff fefd 	bl	800fc08 <create_name>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d14c      	bne.n	800feb2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fe50 	bl	800fabe <dir_find>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fe2a:	7dfb      	ldrb	r3, [r7, #23]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01b      	beq.n	800fe68 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
 800fe32:	2b04      	cmp	r3, #4
 800fe34:	d13f      	bne.n	800feb6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fe36:	7afb      	ldrb	r3, [r7, #11]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00b      	beq.n	800fe58 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fe40:	7afb      	ldrb	r3, [r7, #11]
 800fe42:	f003 0304 	and.w	r3, r3, #4
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d031      	beq.n	800feae <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2280      	movs	r2, #128	; 0x80
 800fe4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fe56:	e02e      	b.n	800feb6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fe58:	7afb      	ldrb	r3, [r7, #11]
 800fe5a:	f003 0304 	and.w	r3, r3, #4
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d129      	bne.n	800feb6 <follow_path+0x11a>
 800fe62:	2305      	movs	r3, #5
 800fe64:	75fb      	strb	r3, [r7, #23]
				break;
 800fe66:	e026      	b.n	800feb6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe68:	7afb      	ldrb	r3, [r7, #11]
 800fe6a:	f003 0304 	and.w	r3, r3, #4
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d123      	bne.n	800feba <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	799b      	ldrb	r3, [r3, #6]
 800fe76:	f003 0310 	and.w	r3, r3, #16
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d102      	bne.n	800fe84 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fe7e:	2305      	movs	r3, #5
 800fe80:	75fb      	strb	r3, [r7, #23]
 800fe82:	e01b      	b.n	800febc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	695b      	ldr	r3, [r3, #20]
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	8992      	ldrh	r2, [r2, #12]
 800fe92:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe96:	fb02 f200 	mul.w	r2, r2, r0
 800fe9a:	1a9b      	subs	r3, r3, r2
 800fe9c:	440b      	add	r3, r1
 800fe9e:	4619      	mov	r1, r3
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7ff fd70 	bl	800f986 <ld_clust>
 800fea6:	4602      	mov	r2, r0
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	609a      	str	r2, [r3, #8]
 800feac:	e7aa      	b.n	800fe04 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800feae:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800feb0:	e7a8      	b.n	800fe04 <follow_path+0x68>
			if (res != FR_OK) break;
 800feb2:	bf00      	nop
 800feb4:	e002      	b.n	800febc <follow_path+0x120>
				break;
 800feb6:	bf00      	nop
 800feb8:	e000      	b.n	800febc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800feba:	bf00      	nop
			}
		}
	}

	return res;
 800febc:	7dfb      	ldrb	r3, [r7, #23]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3718      	adds	r7, #24
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fec6:	b480      	push	{r7}
 800fec8:	b087      	sub	sp, #28
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fece:	f04f 33ff 	mov.w	r3, #4294967295
 800fed2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d031      	beq.n	800ff40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	617b      	str	r3, [r7, #20]
 800fee2:	e002      	b.n	800feea <get_ldnumber+0x24>
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	3301      	adds	r3, #1
 800fee8:	617b      	str	r3, [r7, #20]
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b20      	cmp	r3, #32
 800fef0:	d903      	bls.n	800fefa <get_ldnumber+0x34>
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2b3a      	cmp	r3, #58	; 0x3a
 800fef8:	d1f4      	bne.n	800fee4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	2b3a      	cmp	r3, #58	; 0x3a
 800ff00:	d11c      	bne.n	800ff3c <get_ldnumber+0x76>
			tp = *path;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	60fa      	str	r2, [r7, #12]
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	3b30      	subs	r3, #48	; 0x30
 800ff12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b09      	cmp	r3, #9
 800ff18:	d80e      	bhi.n	800ff38 <get_ldnumber+0x72>
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d10a      	bne.n	800ff38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d107      	bne.n	800ff38 <get_ldnumber+0x72>
					vol = (int)i;
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	e002      	b.n	800ff42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ff40:	693b      	ldr	r3, [r7, #16]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	371c      	adds	r7, #28
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
	...

0800ff50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	70da      	strb	r2, [r3, #3]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f04f 32ff 	mov.w	r2, #4294967295
 800ff66:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7fe ff8c 	bl	800ee88 <move_window>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d001      	beq.n	800ff7a <check_fs+0x2a>
 800ff76:	2304      	movs	r3, #4
 800ff78:	e038      	b.n	800ffec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	3338      	adds	r3, #56	; 0x38
 800ff7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe fcd0 	bl	800e928 <ld_word>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d001      	beq.n	800ff98 <check_fs+0x48>
 800ff94:	2303      	movs	r3, #3
 800ff96:	e029      	b.n	800ffec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff9e:	2be9      	cmp	r3, #233	; 0xe9
 800ffa0:	d009      	beq.n	800ffb6 <check_fs+0x66>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ffa8:	2beb      	cmp	r3, #235	; 0xeb
 800ffaa:	d11e      	bne.n	800ffea <check_fs+0x9a>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ffb2:	2b90      	cmp	r3, #144	; 0x90
 800ffb4:	d119      	bne.n	800ffea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	3338      	adds	r3, #56	; 0x38
 800ffba:	3336      	adds	r3, #54	; 0x36
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fe fccb 	bl	800e958 <ld_dword>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ffc8:	4a0a      	ldr	r2, [pc, #40]	; (800fff4 <check_fs+0xa4>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d101      	bne.n	800ffd2 <check_fs+0x82>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	e00c      	b.n	800ffec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3338      	adds	r3, #56	; 0x38
 800ffd6:	3352      	adds	r3, #82	; 0x52
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fe fcbd 	bl	800e958 <ld_dword>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <check_fs+0xa8>)
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d101      	bne.n	800ffea <check_fs+0x9a>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	e000      	b.n	800ffec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ffea:	2302      	movs	r3, #2
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	00544146 	.word	0x00544146
 800fff8:	33544146 	.word	0x33544146

0800fffc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b096      	sub	sp, #88	; 0x58
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	4613      	mov	r3, r2
 8010008:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2200      	movs	r2, #0
 801000e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f7ff ff58 	bl	800fec6 <get_ldnumber>
 8010016:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801001a:	2b00      	cmp	r3, #0
 801001c:	da01      	bge.n	8010022 <find_volume+0x26>
 801001e:	230b      	movs	r3, #11
 8010020:	e268      	b.n	80104f4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010022:	4ab0      	ldr	r2, [pc, #704]	; (80102e4 <find_volume+0x2e8>)
 8010024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <find_volume+0x3a>
 8010032:	230c      	movs	r3, #12
 8010034:	e25e      	b.n	80104f4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801003a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	f023 0301 	bic.w	r3, r3, #1
 8010042:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d01a      	beq.n	8010082 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	785b      	ldrb	r3, [r3, #1]
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe fbcb 	bl	800e7ec <disk_status>
 8010056:	4603      	mov	r3, r0
 8010058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801005c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	2b00      	cmp	r3, #0
 8010066:	d10c      	bne.n	8010082 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d007      	beq.n	801007e <find_volume+0x82>
 801006e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010072:	f003 0304 	and.w	r3, r3, #4
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801007a:	230a      	movs	r3, #10
 801007c:	e23a      	b.n	80104f4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801007e:	2300      	movs	r3, #0
 8010080:	e238      	b.n	80104f4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801008a:	b2da      	uxtb	r2, r3
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	785b      	ldrb	r3, [r3, #1]
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe fbc3 	bl	800e820 <disk_initialize>
 801009a:	4603      	mov	r3, r0
 801009c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80100a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100a4:	f003 0301 	and.w	r3, r3, #1
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80100ac:	2303      	movs	r3, #3
 80100ae:	e221      	b.n	80104f4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80100b0:	79fb      	ldrb	r3, [r7, #7]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d007      	beq.n	80100c6 <find_volume+0xca>
 80100b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100ba:	f003 0304 	and.w	r3, r3, #4
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80100c2:	230a      	movs	r3, #10
 80100c4:	e216      	b.n	80104f4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	7858      	ldrb	r0, [r3, #1]
 80100ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100cc:	330c      	adds	r3, #12
 80100ce:	461a      	mov	r2, r3
 80100d0:	2102      	movs	r1, #2
 80100d2:	f7fe fc0b 	bl	800e8ec <disk_ioctl>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <find_volume+0xe4>
 80100dc:	2301      	movs	r3, #1
 80100de:	e209      	b.n	80104f4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80100e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e2:	899b      	ldrh	r3, [r3, #12]
 80100e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100e8:	d80d      	bhi.n	8010106 <find_volume+0x10a>
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f2:	d308      	bcc.n	8010106 <find_volume+0x10a>
 80100f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f6:	899b      	ldrh	r3, [r3, #12]
 80100f8:	461a      	mov	r2, r3
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	899b      	ldrh	r3, [r3, #12]
 80100fe:	3b01      	subs	r3, #1
 8010100:	4013      	ands	r3, r2
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <find_volume+0x10e>
 8010106:	2301      	movs	r3, #1
 8010108:	e1f4      	b.n	80104f4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801010e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010112:	f7ff ff1d 	bl	800ff50 <check_fs>
 8010116:	4603      	mov	r3, r0
 8010118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801011c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010120:	2b02      	cmp	r3, #2
 8010122:	d14b      	bne.n	80101bc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010124:	2300      	movs	r3, #0
 8010126:	643b      	str	r3, [r7, #64]	; 0x40
 8010128:	e01f      	b.n	801016a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010138:	4413      	add	r3, r2
 801013a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	3304      	adds	r3, #4
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d006      	beq.n	8010154 <find_volume+0x158>
 8010146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010148:	3308      	adds	r3, #8
 801014a:	4618      	mov	r0, r3
 801014c:	f7fe fc04 	bl	800e958 <ld_dword>
 8010150:	4602      	mov	r2, r0
 8010152:	e000      	b.n	8010156 <find_volume+0x15a>
 8010154:	2200      	movs	r2, #0
 8010156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801015e:	440b      	add	r3, r1
 8010160:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010166:	3301      	adds	r3, #1
 8010168:	643b      	str	r3, [r7, #64]	; 0x40
 801016a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801016c:	2b03      	cmp	r3, #3
 801016e:	d9dc      	bls.n	801012a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010170:	2300      	movs	r3, #0
 8010172:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010176:	2b00      	cmp	r3, #0
 8010178:	d002      	beq.n	8010180 <find_volume+0x184>
 801017a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801017c:	3b01      	subs	r3, #1
 801017e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010188:	4413      	add	r3, r2
 801018a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801018e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010192:	2b00      	cmp	r3, #0
 8010194:	d005      	beq.n	80101a2 <find_volume+0x1a6>
 8010196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801019a:	f7ff fed9 	bl	800ff50 <check_fs>
 801019e:	4603      	mov	r3, r0
 80101a0:	e000      	b.n	80101a4 <find_volume+0x1a8>
 80101a2:	2303      	movs	r3, #3
 80101a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80101a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d905      	bls.n	80101bc <find_volume+0x1c0>
 80101b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b2:	3301      	adds	r3, #1
 80101b4:	643b      	str	r3, [r7, #64]	; 0x40
 80101b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b8:	2b03      	cmp	r3, #3
 80101ba:	d9e1      	bls.n	8010180 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80101bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101c0:	2b04      	cmp	r3, #4
 80101c2:	d101      	bne.n	80101c8 <find_volume+0x1cc>
 80101c4:	2301      	movs	r3, #1
 80101c6:	e195      	b.n	80104f4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80101c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d901      	bls.n	80101d4 <find_volume+0x1d8>
 80101d0:	230d      	movs	r3, #13
 80101d2:	e18f      	b.n	80104f4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	3338      	adds	r3, #56	; 0x38
 80101d8:	330b      	adds	r3, #11
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fba4 	bl	800e928 <ld_word>
 80101e0:	4603      	mov	r3, r0
 80101e2:	461a      	mov	r2, r3
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	899b      	ldrh	r3, [r3, #12]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d001      	beq.n	80101f0 <find_volume+0x1f4>
 80101ec:	230d      	movs	r3, #13
 80101ee:	e181      	b.n	80104f4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	3338      	adds	r3, #56	; 0x38
 80101f4:	3316      	adds	r3, #22
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe fb96 	bl	800e928 <ld_word>
 80101fc:	4603      	mov	r3, r0
 80101fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <find_volume+0x218>
 8010206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010208:	3338      	adds	r3, #56	; 0x38
 801020a:	3324      	adds	r3, #36	; 0x24
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe fba3 	bl	800e958 <ld_dword>
 8010212:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010218:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	789b      	ldrb	r3, [r3, #2]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d005      	beq.n	8010238 <find_volume+0x23c>
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	789b      	ldrb	r3, [r3, #2]
 8010230:	2b02      	cmp	r3, #2
 8010232:	d001      	beq.n	8010238 <find_volume+0x23c>
 8010234:	230d      	movs	r3, #13
 8010236:	e15d      	b.n	80104f4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023a:	789b      	ldrb	r3, [r3, #2]
 801023c:	461a      	mov	r2, r3
 801023e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010240:	fb02 f303 	mul.w	r3, r2, r3
 8010244:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801024c:	b29a      	uxth	r2, r3
 801024e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010250:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010254:	895b      	ldrh	r3, [r3, #10]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d008      	beq.n	801026c <find_volume+0x270>
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	895b      	ldrh	r3, [r3, #10]
 801025e:	461a      	mov	r2, r3
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	895b      	ldrh	r3, [r3, #10]
 8010264:	3b01      	subs	r3, #1
 8010266:	4013      	ands	r3, r2
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <find_volume+0x274>
 801026c:	230d      	movs	r3, #13
 801026e:	e141      	b.n	80104f4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010272:	3338      	adds	r3, #56	; 0x38
 8010274:	3311      	adds	r3, #17
 8010276:	4618      	mov	r0, r3
 8010278:	f7fe fb56 	bl	800e928 <ld_word>
 801027c:	4603      	mov	r3, r0
 801027e:	461a      	mov	r2, r3
 8010280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010282:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	891b      	ldrh	r3, [r3, #8]
 8010288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801028a:	8992      	ldrh	r2, [r2, #12]
 801028c:	0952      	lsrs	r2, r2, #5
 801028e:	b292      	uxth	r2, r2
 8010290:	fbb3 f1f2 	udiv	r1, r3, r2
 8010294:	fb02 f201 	mul.w	r2, r2, r1
 8010298:	1a9b      	subs	r3, r3, r2
 801029a:	b29b      	uxth	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <find_volume+0x2a8>
 80102a0:	230d      	movs	r3, #13
 80102a2:	e127      	b.n	80104f4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	3338      	adds	r3, #56	; 0x38
 80102a8:	3313      	adds	r3, #19
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe fb3c 	bl	800e928 <ld_word>
 80102b0:	4603      	mov	r3, r0
 80102b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80102b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d106      	bne.n	80102c8 <find_volume+0x2cc>
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	3338      	adds	r3, #56	; 0x38
 80102be:	3320      	adds	r3, #32
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fe fb49 	bl	800e958 <ld_dword>
 80102c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	3338      	adds	r3, #56	; 0x38
 80102cc:	330e      	adds	r3, #14
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fb2a 	bl	800e928 <ld_word>
 80102d4:	4603      	mov	r3, r0
 80102d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80102d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d104      	bne.n	80102e8 <find_volume+0x2ec>
 80102de:	230d      	movs	r3, #13
 80102e0:	e108      	b.n	80104f4 <find_volume+0x4f8>
 80102e2:	bf00      	nop
 80102e4:	20037438 	.word	0x20037438

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80102e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ec:	4413      	add	r3, r2
 80102ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102f0:	8911      	ldrh	r1, [r2, #8]
 80102f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102f4:	8992      	ldrh	r2, [r2, #12]
 80102f6:	0952      	lsrs	r2, r2, #5
 80102f8:	b292      	uxth	r2, r2
 80102fa:	fbb1 f2f2 	udiv	r2, r1, r2
 80102fe:	b292      	uxth	r2, r2
 8010300:	4413      	add	r3, r2
 8010302:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	429a      	cmp	r2, r3
 801030a:	d201      	bcs.n	8010310 <find_volume+0x314>
 801030c:	230d      	movs	r3, #13
 801030e:	e0f1      	b.n	80104f4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010318:	8952      	ldrh	r2, [r2, #10]
 801031a:	fbb3 f3f2 	udiv	r3, r3, r2
 801031e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <find_volume+0x32e>
 8010326:	230d      	movs	r3, #13
 8010328:	e0e4      	b.n	80104f4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801032a:	2303      	movs	r3, #3
 801032c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010332:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010336:	4293      	cmp	r3, r2
 8010338:	d802      	bhi.n	8010340 <find_volume+0x344>
 801033a:	2302      	movs	r3, #2
 801033c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010346:	4293      	cmp	r3, r2
 8010348:	d802      	bhi.n	8010350 <find_volume+0x354>
 801034a:	2301      	movs	r3, #1
 801034c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	1c9a      	adds	r2, r3, #2
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801035c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801035e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010362:	441a      	add	r2, r3
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	441a      	add	r2, r3
 801036e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010370:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010376:	2b03      	cmp	r3, #3
 8010378:	d11e      	bne.n	80103b8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801037a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037c:	3338      	adds	r3, #56	; 0x38
 801037e:	332a      	adds	r3, #42	; 0x2a
 8010380:	4618      	mov	r0, r3
 8010382:	f7fe fad1 	bl	800e928 <ld_word>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d001      	beq.n	8010390 <find_volume+0x394>
 801038c:	230d      	movs	r3, #13
 801038e:	e0b1      	b.n	80104f4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	891b      	ldrh	r3, [r3, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <find_volume+0x3a0>
 8010398:	230d      	movs	r3, #13
 801039a:	e0ab      	b.n	80104f4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801039c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039e:	3338      	adds	r3, #56	; 0x38
 80103a0:	332c      	adds	r3, #44	; 0x2c
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe fad8 	bl	800e958 <ld_dword>
 80103a8:	4602      	mov	r2, r0
 80103aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ac:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80103ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b0:	69db      	ldr	r3, [r3, #28]
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	647b      	str	r3, [r7, #68]	; 0x44
 80103b6:	e01f      	b.n	80103f8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80103b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ba:	891b      	ldrh	r3, [r3, #8]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <find_volume+0x3c8>
 80103c0:	230d      	movs	r3, #13
 80103c2:	e097      	b.n	80104f4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ca:	441a      	add	r2, r3
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80103d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d103      	bne.n	80103e0 <find_volume+0x3e4>
 80103d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103da:	69db      	ldr	r3, [r3, #28]
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	e00a      	b.n	80103f6 <find_volume+0x3fa>
 80103e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e2:	69da      	ldr	r2, [r3, #28]
 80103e4:	4613      	mov	r3, r2
 80103e6:	005b      	lsls	r3, r3, #1
 80103e8:	4413      	add	r3, r2
 80103ea:	085a      	lsrs	r2, r3, #1
 80103ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ee:	69db      	ldr	r3, [r3, #28]
 80103f0:	f003 0301 	and.w	r3, r3, #1
 80103f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80103f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fa:	6a1a      	ldr	r2, [r3, #32]
 80103fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fe:	899b      	ldrh	r3, [r3, #12]
 8010400:	4619      	mov	r1, r3
 8010402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010404:	440b      	add	r3, r1
 8010406:	3b01      	subs	r3, #1
 8010408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801040a:	8989      	ldrh	r1, [r1, #12]
 801040c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010410:	429a      	cmp	r2, r3
 8010412:	d201      	bcs.n	8010418 <find_volume+0x41c>
 8010414:	230d      	movs	r3, #13
 8010416:	e06d      	b.n	80104f4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	f04f 32ff 	mov.w	r2, #4294967295
 801041e:	615a      	str	r2, [r3, #20]
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	695a      	ldr	r2, [r3, #20]
 8010424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010426:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	2280      	movs	r2, #128	; 0x80
 801042c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801042e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010432:	2b03      	cmp	r3, #3
 8010434:	d149      	bne.n	80104ca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010438:	3338      	adds	r3, #56	; 0x38
 801043a:	3330      	adds	r3, #48	; 0x30
 801043c:	4618      	mov	r0, r3
 801043e:	f7fe fa73 	bl	800e928 <ld_word>
 8010442:	4603      	mov	r3, r0
 8010444:	2b01      	cmp	r3, #1
 8010446:	d140      	bne.n	80104ca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044a:	3301      	adds	r3, #1
 801044c:	4619      	mov	r1, r3
 801044e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010450:	f7fe fd1a 	bl	800ee88 <move_window>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d137      	bne.n	80104ca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	2200      	movs	r2, #0
 801045e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010462:	3338      	adds	r3, #56	; 0x38
 8010464:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe fa5d 	bl	800e928 <ld_word>
 801046e:	4603      	mov	r3, r0
 8010470:	461a      	mov	r2, r3
 8010472:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010476:	429a      	cmp	r2, r3
 8010478:	d127      	bne.n	80104ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801047a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047c:	3338      	adds	r3, #56	; 0x38
 801047e:	4618      	mov	r0, r3
 8010480:	f7fe fa6a 	bl	800e958 <ld_dword>
 8010484:	4602      	mov	r2, r0
 8010486:	4b1d      	ldr	r3, [pc, #116]	; (80104fc <find_volume+0x500>)
 8010488:	429a      	cmp	r2, r3
 801048a:	d11e      	bne.n	80104ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801048c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048e:	3338      	adds	r3, #56	; 0x38
 8010490:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fa5f 	bl	800e958 <ld_dword>
 801049a:	4602      	mov	r2, r0
 801049c:	4b18      	ldr	r3, [pc, #96]	; (8010500 <find_volume+0x504>)
 801049e:	429a      	cmp	r2, r3
 80104a0:	d113      	bne.n	80104ca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80104a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a4:	3338      	adds	r3, #56	; 0x38
 80104a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fe fa54 	bl	800e958 <ld_dword>
 80104b0:	4602      	mov	r2, r0
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80104b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b8:	3338      	adds	r3, #56	; 0x38
 80104ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fe fa4a 	bl	800e958 <ld_dword>
 80104c4:	4602      	mov	r2, r0
 80104c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80104d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80104d2:	4b0c      	ldr	r3, [pc, #48]	; (8010504 <find_volume+0x508>)
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	3301      	adds	r3, #1
 80104d8:	b29a      	uxth	r2, r3
 80104da:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <find_volume+0x508>)
 80104dc:	801a      	strh	r2, [r3, #0]
 80104de:	4b09      	ldr	r3, [pc, #36]	; (8010504 <find_volume+0x508>)
 80104e0:	881a      	ldrh	r2, [r3, #0]
 80104e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80104e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e8:	2200      	movs	r2, #0
 80104ea:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80104ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104ee:	f7fe fc63 	bl	800edb8 <clear_lock>
#endif
	return FR_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3758      	adds	r7, #88	; 0x58
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	41615252 	.word	0x41615252
 8010500:	61417272 	.word	0x61417272
 8010504:	2003743c 	.word	0x2003743c

08010508 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010512:	2309      	movs	r3, #9
 8010514:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d01c      	beq.n	8010556 <validate+0x4e>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d018      	beq.n	8010556 <validate+0x4e>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d013      	beq.n	8010556 <validate+0x4e>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	889a      	ldrh	r2, [r3, #4]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	88db      	ldrh	r3, [r3, #6]
 8010538:	429a      	cmp	r2, r3
 801053a:	d10c      	bne.n	8010556 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	785b      	ldrb	r3, [r3, #1]
 8010542:	4618      	mov	r0, r3
 8010544:	f7fe f952 	bl	800e7ec <disk_status>
 8010548:	4603      	mov	r3, r0
 801054a:	f003 0301 	and.w	r3, r3, #1
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <validate+0x4e>
			res = FR_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <validate+0x5a>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	e000      	b.n	8010564 <validate+0x5c>
 8010562:	2300      	movs	r3, #0
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	6013      	str	r3, [r2, #0]
	return res;
 8010568:	7bfb      	ldrb	r3, [r7, #15]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b088      	sub	sp, #32
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	4613      	mov	r3, r2
 8010580:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010586:	f107 0310 	add.w	r3, r7, #16
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff fc9b 	bl	800fec6 <get_ldnumber>
 8010590:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	2b00      	cmp	r3, #0
 8010596:	da01      	bge.n	801059c <f_mount+0x28>
 8010598:	230b      	movs	r3, #11
 801059a:	e02b      	b.n	80105f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801059c:	4a17      	ldr	r2, [pc, #92]	; (80105fc <f_mount+0x88>)
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d005      	beq.n	80105b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80105ac:	69b8      	ldr	r0, [r7, #24]
 80105ae:	f7fe fc03 	bl	800edb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	2200      	movs	r2, #0
 80105b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d002      	beq.n	80105c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2200      	movs	r2, #0
 80105c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	490d      	ldr	r1, [pc, #52]	; (80105fc <f_mount+0x88>)
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <f_mount+0x66>
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d001      	beq.n	80105de <f_mount+0x6a>
 80105da:	2300      	movs	r3, #0
 80105dc:	e00a      	b.n	80105f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80105de:	f107 010c 	add.w	r1, r7, #12
 80105e2:	f107 0308 	add.w	r3, r7, #8
 80105e6:	2200      	movs	r2, #0
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fd07 	bl	800fffc <find_volume>
 80105ee:	4603      	mov	r3, r0
 80105f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3720      	adds	r7, #32
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	20037438 	.word	0x20037438

08010600 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b098      	sub	sp, #96	; 0x60
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	4613      	mov	r3, r2
 801060c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d101      	bne.n	8010618 <f_open+0x18>
 8010614:	2309      	movs	r3, #9
 8010616:	e1ba      	b.n	801098e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801061e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010620:	79fa      	ldrb	r2, [r7, #7]
 8010622:	f107 0110 	add.w	r1, r7, #16
 8010626:	f107 0308 	add.w	r3, r7, #8
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff fce6 	bl	800fffc <find_volume>
 8010630:	4603      	mov	r3, r0
 8010632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801063a:	2b00      	cmp	r3, #0
 801063c:	f040 819e 	bne.w	801097c <f_open+0x37c>
		dj.obj.fs = fs;
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	f107 0314 	add.w	r3, r7, #20
 801064a:	4611      	mov	r1, r2
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff fba5 	bl	800fd9c <follow_path>
 8010652:	4603      	mov	r3, r0
 8010654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801065c:	2b00      	cmp	r3, #0
 801065e:	d11a      	bne.n	8010696 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010664:	b25b      	sxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	da03      	bge.n	8010672 <f_open+0x72>
				res = FR_INVALID_NAME;
 801066a:	2306      	movs	r3, #6
 801066c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010670:	e011      	b.n	8010696 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	f023 0301 	bic.w	r3, r3, #1
 8010678:	2b00      	cmp	r3, #0
 801067a:	bf14      	ite	ne
 801067c:	2301      	movne	r3, #1
 801067e:	2300      	moveq	r3, #0
 8010680:	b2db      	uxtb	r3, r3
 8010682:	461a      	mov	r2, r3
 8010684:	f107 0314 	add.w	r3, r7, #20
 8010688:	4611      	mov	r1, r2
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe fa4c 	bl	800eb28 <chk_lock>
 8010690:	4603      	mov	r3, r0
 8010692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010696:	79fb      	ldrb	r3, [r7, #7]
 8010698:	f003 031c 	and.w	r3, r3, #28
 801069c:	2b00      	cmp	r3, #0
 801069e:	d07e      	beq.n	801079e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80106a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d017      	beq.n	80106d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80106a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106ac:	2b04      	cmp	r3, #4
 80106ae:	d10e      	bne.n	80106ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80106b0:	f7fe fa96 	bl	800ebe0 <enq_lock>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d006      	beq.n	80106c8 <f_open+0xc8>
 80106ba:	f107 0314 	add.w	r3, r7, #20
 80106be:	4618      	mov	r0, r3
 80106c0:	f7ff fa52 	bl	800fb68 <dir_register>
 80106c4:	4603      	mov	r3, r0
 80106c6:	e000      	b.n	80106ca <f_open+0xca>
 80106c8:	2312      	movs	r3, #18
 80106ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80106ce:	79fb      	ldrb	r3, [r7, #7]
 80106d0:	f043 0308 	orr.w	r3, r3, #8
 80106d4:	71fb      	strb	r3, [r7, #7]
 80106d6:	e010      	b.n	80106fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80106d8:	7ebb      	ldrb	r3, [r7, #26]
 80106da:	f003 0311 	and.w	r3, r3, #17
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <f_open+0xea>
					res = FR_DENIED;
 80106e2:	2307      	movs	r3, #7
 80106e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106e8:	e007      	b.n	80106fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80106ea:	79fb      	ldrb	r3, [r7, #7]
 80106ec:	f003 0304 	and.w	r3, r3, #4
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <f_open+0xfa>
 80106f4:	2308      	movs	r3, #8
 80106f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80106fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d167      	bne.n	80107d2 <f_open+0x1d2>
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	f003 0308 	and.w	r3, r3, #8
 8010708:	2b00      	cmp	r3, #0
 801070a:	d062      	beq.n	80107d2 <f_open+0x1d2>
				dw = GET_FATTIME();
 801070c:	4ba2      	ldr	r3, [pc, #648]	; (8010998 <f_open+0x398>)
 801070e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010712:	330e      	adds	r3, #14
 8010714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe f95c 	bl	800e9d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801071c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071e:	3316      	adds	r3, #22
 8010720:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe f956 	bl	800e9d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072a:	330b      	adds	r3, #11
 801072c:	2220      	movs	r2, #32
 801072e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010734:	4611      	mov	r1, r2
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff f925 	bl	800f986 <ld_clust>
 801073c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010742:	2200      	movs	r2, #0
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff f93d 	bl	800f9c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074c:	331c      	adds	r3, #28
 801074e:	2100      	movs	r1, #0
 8010750:	4618      	mov	r0, r3
 8010752:	f7fe f93f 	bl	800e9d4 <st_dword>
					fs->wflag = 1;
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2201      	movs	r2, #1
 801075a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801075c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075e:	2b00      	cmp	r3, #0
 8010760:	d037      	beq.n	80107d2 <f_open+0x1d2>
						dw = fs->winsect;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010766:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010768:	f107 0314 	add.w	r3, r7, #20
 801076c:	2200      	movs	r2, #0
 801076e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010770:	4618      	mov	r0, r3
 8010772:	f7fe fe2d 	bl	800f3d0 <remove_chain>
 8010776:	4603      	mov	r3, r0
 8010778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801077c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010780:	2b00      	cmp	r3, #0
 8010782:	d126      	bne.n	80107d2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010788:	4618      	mov	r0, r3
 801078a:	f7fe fb7d 	bl	800ee88 <move_window>
 801078e:	4603      	mov	r3, r0
 8010790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010798:	3a01      	subs	r2, #1
 801079a:	611a      	str	r2, [r3, #16]
 801079c:	e019      	b.n	80107d2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801079e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d115      	bne.n	80107d2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80107a6:	7ebb      	ldrb	r3, [r7, #26]
 80107a8:	f003 0310 	and.w	r3, r3, #16
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107b6:	e00c      	b.n	80107d2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	f003 0302 	and.w	r3, r3, #2
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d007      	beq.n	80107d2 <f_open+0x1d2>
 80107c2:	7ebb      	ldrb	r3, [r7, #26]
 80107c4:	f003 0301 	and.w	r3, r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <f_open+0x1d2>
						res = FR_DENIED;
 80107cc:	2307      	movs	r3, #7
 80107ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80107d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d128      	bne.n	801082c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	f003 0308 	and.w	r3, r3, #8
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d003      	beq.n	80107ec <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107ea:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80107f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	f023 0301 	bic.w	r3, r3, #1
 8010800:	2b00      	cmp	r3, #0
 8010802:	bf14      	ite	ne
 8010804:	2301      	movne	r3, #1
 8010806:	2300      	moveq	r3, #0
 8010808:	b2db      	uxtb	r3, r3
 801080a:	461a      	mov	r2, r3
 801080c:	f107 0314 	add.w	r3, r7, #20
 8010810:	4611      	mov	r1, r2
 8010812:	4618      	mov	r0, r3
 8010814:	f7fe fa06 	bl	800ec24 <inc_lock>
 8010818:	4602      	mov	r2, r0
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	691b      	ldr	r3, [r3, #16]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d102      	bne.n	801082c <f_open+0x22c>
 8010826:	2302      	movs	r3, #2
 8010828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801082c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010830:	2b00      	cmp	r3, #0
 8010832:	f040 80a3 	bne.w	801097c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801083a:	4611      	mov	r1, r2
 801083c:	4618      	mov	r0, r3
 801083e:	f7ff f8a2 	bl	800f986 <ld_clust>
 8010842:	4602      	mov	r2, r0
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801084a:	331c      	adds	r3, #28
 801084c:	4618      	mov	r0, r3
 801084e:	f7fe f883 	bl	800e958 <ld_dword>
 8010852:	4602      	mov	r2, r0
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2200      	movs	r2, #0
 801085c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801085e:	693a      	ldr	r2, [r7, #16]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	88da      	ldrh	r2, [r3, #6]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	79fa      	ldrb	r2, [r7, #7]
 8010870:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2200      	movs	r2, #0
 8010876:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2200      	movs	r2, #0
 8010882:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	3330      	adds	r3, #48	; 0x30
 8010888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe f8ed 	bl	800ea6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010894:	79fb      	ldrb	r3, [r7, #7]
 8010896:	f003 0320 	and.w	r3, r3, #32
 801089a:	2b00      	cmp	r3, #0
 801089c:	d06e      	beq.n	801097c <f_open+0x37c>
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d06a      	beq.n	801097c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	68da      	ldr	r2, [r3, #12]
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	895b      	ldrh	r3, [r3, #10]
 80108b2:	461a      	mov	r2, r3
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	899b      	ldrh	r3, [r3, #12]
 80108b8:	fb03 f302 	mul.w	r3, r3, r2
 80108bc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	657b      	str	r3, [r7, #84]	; 0x54
 80108ca:	e016      	b.n	80108fa <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fe fb96 	bl	800f002 <get_fat>
 80108d6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80108d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d802      	bhi.n	80108e4 <f_open+0x2e4>
 80108de:	2302      	movs	r3, #2
 80108e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80108e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ea:	d102      	bne.n	80108f2 <f_open+0x2f2>
 80108ec:	2301      	movs	r3, #1
 80108ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80108f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	657b      	str	r3, [r7, #84]	; 0x54
 80108fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d103      	bne.n	801090a <f_open+0x30a>
 8010902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010906:	429a      	cmp	r2, r3
 8010908:	d8e0      	bhi.n	80108cc <f_open+0x2cc>
				}
				fp->clust = clst;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801090e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010914:	2b00      	cmp	r3, #0
 8010916:	d131      	bne.n	801097c <f_open+0x37c>
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	899b      	ldrh	r3, [r3, #12]
 801091c:	461a      	mov	r2, r3
 801091e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010920:	fbb3 f1f2 	udiv	r1, r3, r2
 8010924:	fb02 f201 	mul.w	r2, r2, r1
 8010928:	1a9b      	subs	r3, r3, r2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d026      	beq.n	801097c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fb46 	bl	800efc4 <clust2sect>
 8010938:	6478      	str	r0, [r7, #68]	; 0x44
 801093a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801093c:	2b00      	cmp	r3, #0
 801093e:	d103      	bne.n	8010948 <f_open+0x348>
						res = FR_INT_ERR;
 8010940:	2302      	movs	r3, #2
 8010942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010946:	e019      	b.n	801097c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	899b      	ldrh	r3, [r3, #12]
 801094c:	461a      	mov	r2, r3
 801094e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010950:	fbb3 f2f2 	udiv	r2, r3, r2
 8010954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010956:	441a      	add	r2, r3
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	7858      	ldrb	r0, [r3, #1]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6a1a      	ldr	r2, [r3, #32]
 801096a:	2301      	movs	r3, #1
 801096c:	f7fd ff7e 	bl	800e86c <disk_read>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d002      	beq.n	801097c <f_open+0x37c>
 8010976:	2301      	movs	r3, #1
 8010978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801097c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <f_open+0x38a>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2200      	movs	r2, #0
 8010988:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801098a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801098e:	4618      	mov	r0, r3
 8010990:	3760      	adds	r7, #96	; 0x60
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	274a0000 	.word	0x274a0000

0801099c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b08e      	sub	sp, #56	; 0x38
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2200      	movs	r2, #0
 80109b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f107 0214 	add.w	r2, r7, #20
 80109ba:	4611      	mov	r1, r2
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fda3 	bl	8010508 <validate>
 80109c2:	4603      	mov	r3, r0
 80109c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80109c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d107      	bne.n	80109e0 <f_read+0x44>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	7d5b      	ldrb	r3, [r3, #21]
 80109d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <f_read+0x4a>
 80109e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109e4:	e135      	b.n	8010c52 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	7d1b      	ldrb	r3, [r3, #20]
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <f_read+0x5a>
 80109f2:	2307      	movs	r3, #7
 80109f4:	e12d      	b.n	8010c52 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	699b      	ldr	r3, [r3, #24]
 80109fe:	1ad3      	subs	r3, r2, r3
 8010a00:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	f240 811e 	bls.w	8010c48 <f_read+0x2ac>
 8010a0c:	6a3b      	ldr	r3, [r7, #32]
 8010a0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010a10:	e11a      	b.n	8010c48 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	699b      	ldr	r3, [r3, #24]
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	8992      	ldrh	r2, [r2, #12]
 8010a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a1e:	fb02 f201 	mul.w	r2, r2, r1
 8010a22:	1a9b      	subs	r3, r3, r2
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f040 80d5 	bne.w	8010bd4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	699b      	ldr	r3, [r3, #24]
 8010a2e:	697a      	ldr	r2, [r7, #20]
 8010a30:	8992      	ldrh	r2, [r2, #12]
 8010a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	8952      	ldrh	r2, [r2, #10]
 8010a3a:	3a01      	subs	r2, #1
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d12f      	bne.n	8010aa6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d103      	bne.n	8010a56 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	689b      	ldr	r3, [r3, #8]
 8010a52:	633b      	str	r3, [r7, #48]	; 0x30
 8010a54:	e013      	b.n	8010a7e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d007      	beq.n	8010a6e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	4619      	mov	r1, r3
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f7fe fdb0 	bl	800f5ca <clmt_clust>
 8010a6a:	6338      	str	r0, [r7, #48]	; 0x30
 8010a6c:	e007      	b.n	8010a7e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f7fe fac3 	bl	800f002 <get_fat>
 8010a7c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d804      	bhi.n	8010a8e <f_read+0xf2>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2202      	movs	r2, #2
 8010a88:	755a      	strb	r2, [r3, #21]
 8010a8a:	2302      	movs	r3, #2
 8010a8c:	e0e1      	b.n	8010c52 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a94:	d104      	bne.n	8010aa0 <f_read+0x104>
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2201      	movs	r2, #1
 8010a9a:	755a      	strb	r2, [r3, #21]
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e0d8      	b.n	8010c52 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	4619      	mov	r1, r3
 8010aae:	4610      	mov	r0, r2
 8010ab0:	f7fe fa88 	bl	800efc4 <clust2sect>
 8010ab4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d104      	bne.n	8010ac6 <f_read+0x12a>
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2202      	movs	r2, #2
 8010ac0:	755a      	strb	r2, [r3, #21]
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	e0c5      	b.n	8010c52 <f_read+0x2b6>
			sect += csect;
 8010ac6:	69ba      	ldr	r2, [r7, #24]
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	4413      	add	r3, r2
 8010acc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	899b      	ldrh	r3, [r3, #12]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ada:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d041      	beq.n	8010b66 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010ae2:	69fa      	ldr	r2, [r7, #28]
 8010ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae6:	4413      	add	r3, r2
 8010ae8:	697a      	ldr	r2, [r7, #20]
 8010aea:	8952      	ldrh	r2, [r2, #10]
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d905      	bls.n	8010afc <f_read+0x160>
					cc = fs->csize - csect;
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	895b      	ldrh	r3, [r3, #10]
 8010af4:	461a      	mov	r2, r3
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	7858      	ldrb	r0, [r3, #1]
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	69ba      	ldr	r2, [r7, #24]
 8010b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b06:	f7fd feb1 	bl	800e86c <disk_read>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d004      	beq.n	8010b1a <f_read+0x17e>
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2201      	movs	r2, #1
 8010b14:	755a      	strb	r2, [r3, #21]
 8010b16:	2301      	movs	r3, #1
 8010b18:	e09b      	b.n	8010c52 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	7d1b      	ldrb	r3, [r3, #20]
 8010b1e:	b25b      	sxtb	r3, r3
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	da18      	bge.n	8010b56 <f_read+0x1ba>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6a1a      	ldr	r2, [r3, #32]
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d911      	bls.n	8010b56 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6a1a      	ldr	r2, [r3, #32]
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	8992      	ldrh	r2, [r2, #12]
 8010b3e:	fb02 f303 	mul.w	r3, r2, r3
 8010b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b44:	18d0      	adds	r0, r2, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	899b      	ldrh	r3, [r3, #12]
 8010b50:	461a      	mov	r2, r3
 8010b52:	f7fd ff6b 	bl	800ea2c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	899b      	ldrh	r3, [r3, #12]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	fb02 f303 	mul.w	r3, r2, r3
 8010b62:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010b64:	e05c      	b.n	8010c20 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6a1b      	ldr	r3, [r3, #32]
 8010b6a:	69ba      	ldr	r2, [r7, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d02e      	beq.n	8010bce <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	7d1b      	ldrb	r3, [r3, #20]
 8010b74:	b25b      	sxtb	r3, r3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	da18      	bge.n	8010bac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	7858      	ldrb	r0, [r3, #1]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6a1a      	ldr	r2, [r3, #32]
 8010b88:	2301      	movs	r3, #1
 8010b8a:	f7fd fe8f 	bl	800e8ac <disk_write>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d004      	beq.n	8010b9e <f_read+0x202>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2201      	movs	r2, #1
 8010b98:	755a      	strb	r2, [r3, #21]
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e059      	b.n	8010c52 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	7d1b      	ldrb	r3, [r3, #20]
 8010ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	7858      	ldrb	r0, [r3, #1]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	69ba      	ldr	r2, [r7, #24]
 8010bba:	f7fd fe57 	bl	800e86c <disk_read>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d004      	beq.n	8010bce <f_read+0x232>
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	755a      	strb	r2, [r3, #21]
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e041      	b.n	8010c52 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	69ba      	ldr	r2, [r7, #24]
 8010bd2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	899b      	ldrh	r3, [r3, #12]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	8992      	ldrh	r2, [r2, #12]
 8010be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010be6:	fb02 f201 	mul.w	r2, r2, r1
 8010bea:	1a9b      	subs	r3, r3, r2
 8010bec:	1ac3      	subs	r3, r0, r3
 8010bee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d901      	bls.n	8010bfc <f_read+0x260>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	699b      	ldr	r3, [r3, #24]
 8010c06:	697a      	ldr	r2, [r7, #20]
 8010c08:	8992      	ldrh	r2, [r2, #12]
 8010c0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c0e:	fb02 f200 	mul.w	r2, r2, r0
 8010c12:	1a9b      	subs	r3, r3, r2
 8010c14:	440b      	add	r3, r1
 8010c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c18:	4619      	mov	r1, r3
 8010c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c1c:	f7fd ff06 	bl	800ea2c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c24:	4413      	add	r3, r2
 8010c26:	627b      	str	r3, [r7, #36]	; 0x24
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	699a      	ldr	r2, [r3, #24]
 8010c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2e:	441a      	add	r2, r3
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	619a      	str	r2, [r3, #24]
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3a:	441a      	add	r2, r3
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f47f aee1 	bne.w	8010a12 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3738      	adds	r7, #56	; 0x38
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b08c      	sub	sp, #48	; 0x30
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
 8010c66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f107 0210 	add.w	r2, r7, #16
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7ff fc44 	bl	8010508 <validate>
 8010c80:	4603      	mov	r3, r0
 8010c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d107      	bne.n	8010c9e <f_write+0x44>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	7d5b      	ldrb	r3, [r3, #21]
 8010c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d002      	beq.n	8010ca4 <f_write+0x4a>
 8010c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ca2:	e16a      	b.n	8010f7a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
 8010ca8:	f003 0302 	and.w	r3, r3, #2
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <f_write+0x5a>
 8010cb0:	2307      	movs	r3, #7
 8010cb2:	e162      	b.n	8010f7a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	699a      	ldr	r2, [r3, #24]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	441a      	add	r2, r3
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	f080 814c 	bcs.w	8010f5e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	43db      	mvns	r3, r3
 8010ccc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010cce:	e146      	b.n	8010f5e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	693a      	ldr	r2, [r7, #16]
 8010cd6:	8992      	ldrh	r2, [r2, #12]
 8010cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cdc:	fb02 f201 	mul.w	r2, r2, r1
 8010ce0:	1a9b      	subs	r3, r3, r2
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f040 80f1 	bne.w	8010eca <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	8992      	ldrh	r2, [r2, #12]
 8010cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	8952      	ldrh	r2, [r2, #10]
 8010cf8:	3a01      	subs	r2, #1
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d143      	bne.n	8010d8c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10c      	bne.n	8010d26 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d11a      	bne.n	8010d4e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe fbbc 	bl	800f49a <create_chain>
 8010d22:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d24:	e013      	b.n	8010d4e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7fe fc48 	bl	800f5ca <clmt_clust>
 8010d3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d3c:	e007      	b.n	8010d4e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	4619      	mov	r1, r3
 8010d46:	4610      	mov	r0, r2
 8010d48:	f7fe fba7 	bl	800f49a <create_chain>
 8010d4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 8109 	beq.w	8010f68 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d104      	bne.n	8010d66 <f_write+0x10c>
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2202      	movs	r2, #2
 8010d60:	755a      	strb	r2, [r3, #21]
 8010d62:	2302      	movs	r3, #2
 8010d64:	e109      	b.n	8010f7a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6c:	d104      	bne.n	8010d78 <f_write+0x11e>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	2201      	movs	r2, #1
 8010d72:	755a      	strb	r2, [r3, #21]
 8010d74:	2301      	movs	r3, #1
 8010d76:	e100      	b.n	8010f7a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d7c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <f_write+0x132>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d8a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	b25b      	sxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	da18      	bge.n	8010dc8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	7858      	ldrb	r0, [r3, #1]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6a1a      	ldr	r2, [r3, #32]
 8010da4:	2301      	movs	r3, #1
 8010da6:	f7fd fd81 	bl	800e8ac <disk_write>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <f_write+0x160>
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2201      	movs	r2, #1
 8010db4:	755a      	strb	r2, [r3, #21]
 8010db6:	2301      	movs	r3, #1
 8010db8:	e0df      	b.n	8010f7a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	7d1b      	ldrb	r3, [r3, #20]
 8010dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc2:	b2da      	uxtb	r2, r3
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010dc8:	693a      	ldr	r2, [r7, #16]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	f7fe f8f7 	bl	800efc4 <clust2sect>
 8010dd6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d104      	bne.n	8010de8 <f_write+0x18e>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2202      	movs	r2, #2
 8010de2:	755a      	strb	r2, [r3, #21]
 8010de4:	2302      	movs	r3, #2
 8010de6:	e0c8      	b.n	8010f7a <f_write+0x320>
			sect += csect;
 8010de8:	697a      	ldr	r2, [r7, #20]
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	4413      	add	r3, r2
 8010dee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	899b      	ldrh	r3, [r3, #12]
 8010df4:	461a      	mov	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dfc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d043      	beq.n	8010e8c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	4413      	add	r3, r2
 8010e0a:	693a      	ldr	r2, [r7, #16]
 8010e0c:	8952      	ldrh	r2, [r2, #10]
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d905      	bls.n	8010e1e <f_write+0x1c4>
					cc = fs->csize - csect;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	895b      	ldrh	r3, [r3, #10]
 8010e16:	461a      	mov	r2, r3
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	7858      	ldrb	r0, [r3, #1]
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	697a      	ldr	r2, [r7, #20]
 8010e26:	69f9      	ldr	r1, [r7, #28]
 8010e28:	f7fd fd40 	bl	800e8ac <disk_write>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d004      	beq.n	8010e3c <f_write+0x1e2>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2201      	movs	r2, #1
 8010e36:	755a      	strb	r2, [r3, #21]
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e09e      	b.n	8010f7a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6a1a      	ldr	r2, [r3, #32]
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	6a3a      	ldr	r2, [r7, #32]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d918      	bls.n	8010e7c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6a1a      	ldr	r2, [r3, #32]
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	8992      	ldrh	r2, [r2, #12]
 8010e5c:	fb02 f303 	mul.w	r3, r2, r3
 8010e60:	69fa      	ldr	r2, [r7, #28]
 8010e62:	18d1      	adds	r1, r2, r3
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	899b      	ldrh	r3, [r3, #12]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	f7fd fddf 	bl	800ea2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	7d1b      	ldrb	r3, [r3, #20]
 8010e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	899b      	ldrh	r3, [r3, #12]
 8010e80:	461a      	mov	r2, r3
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	fb02 f303 	mul.w	r3, r2, r3
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010e8a:	e04b      	b.n	8010f24 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	6a1b      	ldr	r3, [r3, #32]
 8010e90:	697a      	ldr	r2, [r7, #20]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d016      	beq.n	8010ec4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	699a      	ldr	r2, [r3, #24]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d210      	bcs.n	8010ec4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	7858      	ldrb	r0, [r3, #1]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010eac:	2301      	movs	r3, #1
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	f7fd fcdc 	bl	800e86c <disk_read>
 8010eb4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d004      	beq.n	8010ec4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	755a      	strb	r2, [r3, #21]
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e05a      	b.n	8010f7a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	699b      	ldr	r3, [r3, #24]
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	8992      	ldrh	r2, [r2, #12]
 8010ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010edc:	fb02 f201 	mul.w	r2, r2, r1
 8010ee0:	1a9b      	subs	r3, r3, r2
 8010ee2:	1ac3      	subs	r3, r0, r3
 8010ee4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d901      	bls.n	8010ef2 <f_write+0x298>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	699b      	ldr	r3, [r3, #24]
 8010efc:	693a      	ldr	r2, [r7, #16]
 8010efe:	8992      	ldrh	r2, [r2, #12]
 8010f00:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f04:	fb02 f200 	mul.w	r2, r2, r0
 8010f08:	1a9b      	subs	r3, r3, r2
 8010f0a:	440b      	add	r3, r1
 8010f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f0e:	69f9      	ldr	r1, [r7, #28]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7fd fd8b 	bl	800ea2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	7d1b      	ldrb	r3, [r3, #20]
 8010f1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010f24:	69fa      	ldr	r2, [r7, #28]
 8010f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f28:	4413      	add	r3, r2
 8010f2a:	61fb      	str	r3, [r7, #28]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	699a      	ldr	r2, [r3, #24]
 8010f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f32:	441a      	add	r2, r3
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	619a      	str	r2, [r3, #24]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68da      	ldr	r2, [r3, #12]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	699b      	ldr	r3, [r3, #24]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	bf38      	it	cc
 8010f44:	461a      	movcc	r2, r3
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	60da      	str	r2, [r3, #12]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	441a      	add	r2, r3
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	601a      	str	r2, [r3, #0]
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f47f aeb5 	bne.w	8010cd0 <f_write+0x76>
 8010f66:	e000      	b.n	8010f6a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f68:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	7d1b      	ldrb	r3, [r3, #20]
 8010f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3730      	adds	r7, #48	; 0x30
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
	...

08010f84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f107 0208 	add.w	r2, r7, #8
 8010f92:	4611      	mov	r1, r2
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff fab7 	bl	8010508 <validate>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f9e:	7dfb      	ldrb	r3, [r7, #23]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d167      	bne.n	8011074 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	7d1b      	ldrb	r3, [r3, #20]
 8010fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d061      	beq.n	8011074 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	7d1b      	ldrb	r3, [r3, #20]
 8010fb4:	b25b      	sxtb	r3, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	da15      	bge.n	8010fe6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	7858      	ldrb	r0, [r3, #1]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6a1a      	ldr	r2, [r3, #32]
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f7fd fc6f 	bl	800e8ac <disk_write>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <f_sync+0x54>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	e04e      	b.n	8011076 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	7d1b      	ldrb	r3, [r3, #20]
 8010fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010fe6:	4b26      	ldr	r3, [pc, #152]	; (8011080 <f_sync+0xfc>)
 8010fe8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	f7fd ff48 	bl	800ee88 <move_window>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010ffc:	7dfb      	ldrb	r3, [r7, #23]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d138      	bne.n	8011074 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011006:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	330b      	adds	r3, #11
 801100c:	781a      	ldrb	r2, [r3, #0]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	330b      	adds	r3, #11
 8011012:	f042 0220 	orr.w	r2, r2, #32
 8011016:	b2d2      	uxtb	r2, r2
 8011018:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6818      	ldr	r0, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	461a      	mov	r2, r3
 8011024:	68f9      	ldr	r1, [r7, #12]
 8011026:	f7fe fccd 	bl	800f9c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f103 021c 	add.w	r2, r3, #28
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	4619      	mov	r1, r3
 8011036:	4610      	mov	r0, r2
 8011038:	f7fd fccc 	bl	800e9d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	3316      	adds	r3, #22
 8011040:	6939      	ldr	r1, [r7, #16]
 8011042:	4618      	mov	r0, r3
 8011044:	f7fd fcc6 	bl	800e9d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	3312      	adds	r3, #18
 801104c:	2100      	movs	r1, #0
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd fca5 	bl	800e99e <st_word>
					fs->wflag = 1;
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	2201      	movs	r2, #1
 8011058:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	4618      	mov	r0, r3
 801105e:	f7fd ff41 	bl	800eee4 <sync_fs>
 8011062:	4603      	mov	r3, r0
 8011064:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	7d1b      	ldrb	r3, [r3, #20]
 801106a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801106e:	b2da      	uxtb	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011074:	7dfb      	ldrb	r3, [r7, #23]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3718      	adds	r7, #24
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	274a0000 	.word	0x274a0000

08011084 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7ff ff79 	bl	8010f84 <f_sync>
 8011092:	4603      	mov	r3, r0
 8011094:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011096:	7bfb      	ldrb	r3, [r7, #15]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d118      	bne.n	80110ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f107 0208 	add.w	r2, r7, #8
 80110a2:	4611      	mov	r1, r2
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7ff fa2f 	bl	8010508 <validate>
 80110aa:	4603      	mov	r3, r0
 80110ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80110ae:	7bfb      	ldrb	r3, [r7, #15]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10c      	bne.n	80110ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	691b      	ldr	r3, [r3, #16]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fd fe41 	bl	800ed40 <dec_lock>
 80110be:	4603      	mov	r3, r0
 80110c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80110c2:	7bfb      	ldrb	r3, [r7, #15]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d102      	bne.n	80110ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80110ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80110d8:	b590      	push	{r4, r7, lr}
 80110da:	b091      	sub	sp, #68	; 0x44
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80110e0:	f107 0108 	add.w	r1, r7, #8
 80110e4:	1d3b      	adds	r3, r7, #4
 80110e6:	2200      	movs	r2, #0
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe ff87 	bl	800fffc <find_volume>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80110f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d131      	bne.n	8011160 <f_chdir+0x88>
		dj.obj.fs = fs;
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	f107 030c 	add.w	r3, r7, #12
 8011106:	4611      	mov	r1, r2
 8011108:	4618      	mov	r0, r3
 801110a:	f7fe fe47 	bl	800fd9c <follow_path>
 801110e:	4603      	mov	r3, r0
 8011110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011118:	2b00      	cmp	r3, #0
 801111a:	d11a      	bne.n	8011152 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801111c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011120:	b25b      	sxtb	r3, r3
 8011122:	2b00      	cmp	r3, #0
 8011124:	da03      	bge.n	801112e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	697a      	ldr	r2, [r7, #20]
 801112a:	619a      	str	r2, [r3, #24]
 801112c:	e011      	b.n	8011152 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801112e:	7cbb      	ldrb	r3, [r7, #18]
 8011130:	f003 0310 	and.w	r3, r3, #16
 8011134:	2b00      	cmp	r3, #0
 8011136:	d009      	beq.n	801114c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801113c:	68bc      	ldr	r4, [r7, #8]
 801113e:	4611      	mov	r1, r2
 8011140:	4618      	mov	r0, r3
 8011142:	f7fe fc20 	bl	800f986 <ld_clust>
 8011146:	4603      	mov	r3, r0
 8011148:	61a3      	str	r3, [r4, #24]
 801114a:	e002      	b.n	8011152 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801114c:	2305      	movs	r3, #5
 801114e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011152:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011156:	2b04      	cmp	r3, #4
 8011158:	d102      	bne.n	8011160 <f_chdir+0x88>
 801115a:	2305      	movs	r3, #5
 801115c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011164:	4618      	mov	r0, r3
 8011166:	3744      	adds	r7, #68	; 0x44
 8011168:	46bd      	mov	sp, r7
 801116a:	bd90      	pop	{r4, r7, pc}

0801116c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b090      	sub	sp, #64	; 0x40
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f107 0208 	add.w	r2, r7, #8
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff f9c2 	bl	8010508 <validate>
 8011184:	4603      	mov	r3, r0
 8011186:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801118a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801118e:	2b00      	cmp	r3, #0
 8011190:	d103      	bne.n	801119a <f_lseek+0x2e>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	7d5b      	ldrb	r3, [r3, #21]
 8011196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801119a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <f_lseek+0x3c>
 80111a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111a6:	e201      	b.n	80115ac <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 80d9 	beq.w	8011364 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b8:	d15a      	bne.n	8011270 <f_lseek+0x104>
			tbl = fp->cltbl;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111be:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c2:	1d1a      	adds	r2, r3, #4
 80111c4:	627a      	str	r2, [r7, #36]	; 0x24
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	617b      	str	r3, [r7, #20]
 80111ca:	2302      	movs	r3, #2
 80111cc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80111d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d03a      	beq.n	8011250 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80111da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111dc:	613b      	str	r3, [r7, #16]
 80111de:	2300      	movs	r3, #0
 80111e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e4:	3302      	adds	r3, #2
 80111e6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	60fb      	str	r3, [r7, #12]
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	3301      	adds	r3, #1
 80111f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fd ff03 	bl	800f002 <get_fat>
 80111fc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	2b01      	cmp	r3, #1
 8011202:	d804      	bhi.n	801120e <f_lseek+0xa2>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2202      	movs	r2, #2
 8011208:	755a      	strb	r2, [r3, #21]
 801120a:	2302      	movs	r3, #2
 801120c:	e1ce      	b.n	80115ac <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011214:	d104      	bne.n	8011220 <f_lseek+0xb4>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	755a      	strb	r2, [r3, #21]
 801121c:	2301      	movs	r3, #1
 801121e:	e1c5      	b.n	80115ac <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3301      	adds	r3, #1
 8011224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011226:	429a      	cmp	r2, r3
 8011228:	d0de      	beq.n	80111e8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801122a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	429a      	cmp	r2, r3
 8011230:	d809      	bhi.n	8011246 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011234:	1d1a      	adds	r2, r3, #4
 8011236:	627a      	str	r2, [r7, #36]	; 0x24
 8011238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801123a:	601a      	str	r2, [r3, #0]
 801123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123e:	1d1a      	adds	r2, r3, #4
 8011240:	627a      	str	r2, [r7, #36]	; 0x24
 8011242:	693a      	ldr	r2, [r7, #16]
 8011244:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	69db      	ldr	r3, [r3, #28]
 801124a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801124c:	429a      	cmp	r2, r3
 801124e:	d3c4      	bcc.n	80111da <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011256:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	429a      	cmp	r2, r3
 801125e:	d803      	bhi.n	8011268 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
 8011266:	e19f      	b.n	80115a8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011268:	2311      	movs	r3, #17
 801126a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801126e:	e19b      	b.n	80115a8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	429a      	cmp	r2, r3
 8011278:	d902      	bls.n	8011280 <f_lseek+0x114>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	683a      	ldr	r2, [r7, #0]
 8011284:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	f000 818d 	beq.w	80115a8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	3b01      	subs	r3, #1
 8011292:	4619      	mov	r1, r3
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7fe f998 	bl	800f5ca <clmt_clust>
 801129a:	4602      	mov	r2, r0
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	69db      	ldr	r3, [r3, #28]
 80112a6:	4619      	mov	r1, r3
 80112a8:	4610      	mov	r0, r2
 80112aa:	f7fd fe8b 	bl	800efc4 <clust2sect>
 80112ae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d104      	bne.n	80112c0 <f_lseek+0x154>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2202      	movs	r2, #2
 80112ba:	755a      	strb	r2, [r3, #21]
 80112bc:	2302      	movs	r3, #2
 80112be:	e175      	b.n	80115ac <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	3b01      	subs	r3, #1
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	8992      	ldrh	r2, [r2, #12]
 80112c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	8952      	ldrh	r2, [r2, #10]
 80112d0:	3a01      	subs	r2, #1
 80112d2:	4013      	ands	r3, r2
 80112d4:	69ba      	ldr	r2, [r7, #24]
 80112d6:	4413      	add	r3, r2
 80112d8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	699b      	ldr	r3, [r3, #24]
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	8992      	ldrh	r2, [r2, #12]
 80112e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112e6:	fb02 f201 	mul.w	r2, r2, r1
 80112ea:	1a9b      	subs	r3, r3, r2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f000 815b 	beq.w	80115a8 <f_lseek+0x43c>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a1b      	ldr	r3, [r3, #32]
 80112f6:	69ba      	ldr	r2, [r7, #24]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	f000 8155 	beq.w	80115a8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	7d1b      	ldrb	r3, [r3, #20]
 8011302:	b25b      	sxtb	r3, r3
 8011304:	2b00      	cmp	r3, #0
 8011306:	da18      	bge.n	801133a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	7858      	ldrb	r0, [r3, #1]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a1a      	ldr	r2, [r3, #32]
 8011316:	2301      	movs	r3, #1
 8011318:	f7fd fac8 	bl	800e8ac <disk_write>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d004      	beq.n	801132c <f_lseek+0x1c0>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2201      	movs	r2, #1
 8011326:	755a      	strb	r2, [r3, #21]
 8011328:	2301      	movs	r3, #1
 801132a:	e13f      	b.n	80115ac <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	7d1b      	ldrb	r3, [r3, #20]
 8011330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011334:	b2da      	uxtb	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	7858      	ldrb	r0, [r3, #1]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011344:	2301      	movs	r3, #1
 8011346:	69ba      	ldr	r2, [r7, #24]
 8011348:	f7fd fa90 	bl	800e86c <disk_read>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d004      	beq.n	801135c <f_lseek+0x1f0>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2201      	movs	r2, #1
 8011356:	755a      	strb	r2, [r3, #21]
 8011358:	2301      	movs	r3, #1
 801135a:	e127      	b.n	80115ac <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	69ba      	ldr	r2, [r7, #24]
 8011360:	621a      	str	r2, [r3, #32]
 8011362:	e121      	b.n	80115a8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	683a      	ldr	r2, [r7, #0]
 801136a:	429a      	cmp	r2, r3
 801136c:	d908      	bls.n	8011380 <f_lseek+0x214>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	7d1b      	ldrb	r3, [r3, #20]
 8011372:	f003 0302 	and.w	r3, r3, #2
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	699b      	ldr	r3, [r3, #24]
 8011384:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011386:	2300      	movs	r3, #0
 8011388:	637b      	str	r3, [r7, #52]	; 0x34
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801138e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	f000 80b5 	beq.w	8011502 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	895b      	ldrh	r3, [r3, #10]
 801139c:	461a      	mov	r2, r3
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	899b      	ldrh	r3, [r3, #12]
 80113a2:	fb03 f302 	mul.w	r3, r3, r2
 80113a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d01b      	beq.n	80113e6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	1e5a      	subs	r2, r3, #1
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80113b8:	6a3b      	ldr	r3, [r7, #32]
 80113ba:	1e59      	subs	r1, r3, #1
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d30f      	bcc.n	80113e6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	1e5a      	subs	r2, r3, #1
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	425b      	negs	r3, r3
 80113ce:	401a      	ands	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	699b      	ldr	r3, [r3, #24]
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	69db      	ldr	r3, [r3, #28]
 80113e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80113e4:	e022      	b.n	801142c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80113ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d119      	bne.n	8011426 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2100      	movs	r1, #0
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fe f84f 	bl	800f49a <create_chain>
 80113fc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	2b01      	cmp	r3, #1
 8011402:	d104      	bne.n	801140e <f_lseek+0x2a2>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2202      	movs	r2, #2
 8011408:	755a      	strb	r2, [r3, #21]
 801140a:	2302      	movs	r3, #2
 801140c:	e0ce      	b.n	80115ac <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011414:	d104      	bne.n	8011420 <f_lseek+0x2b4>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2201      	movs	r2, #1
 801141a:	755a      	strb	r2, [r3, #21]
 801141c:	2301      	movs	r3, #1
 801141e:	e0c5      	b.n	80115ac <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011424:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801142a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	2b00      	cmp	r3, #0
 8011430:	d067      	beq.n	8011502 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011432:	e03a      	b.n	80114aa <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	603b      	str	r3, [r7, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	699a      	ldr	r2, [r3, #24]
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	441a      	add	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7d1b      	ldrb	r3, [r3, #20]
 801144c:	f003 0302 	and.w	r3, r3, #2
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00b      	beq.n	801146c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe f81e 	bl	800f49a <create_chain>
 801145e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011462:	2b00      	cmp	r3, #0
 8011464:	d108      	bne.n	8011478 <f_lseek+0x30c>
							ofs = 0; break;
 8011466:	2300      	movs	r3, #0
 8011468:	603b      	str	r3, [r7, #0]
 801146a:	e022      	b.n	80114b2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011470:	4618      	mov	r0, r3
 8011472:	f7fd fdc6 	bl	800f002 <get_fat>
 8011476:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147e:	d104      	bne.n	801148a <f_lseek+0x31e>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2201      	movs	r2, #1
 8011484:	755a      	strb	r2, [r3, #21]
 8011486:	2301      	movs	r3, #1
 8011488:	e090      	b.n	80115ac <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801148a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148c:	2b01      	cmp	r3, #1
 801148e:	d904      	bls.n	801149a <f_lseek+0x32e>
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	69db      	ldr	r3, [r3, #28]
 8011494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011496:	429a      	cmp	r2, r3
 8011498:	d304      	bcc.n	80114a4 <f_lseek+0x338>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2202      	movs	r2, #2
 801149e:	755a      	strb	r2, [r3, #21]
 80114a0:	2302      	movs	r3, #2
 80114a2:	e083      	b.n	80115ac <f_lseek+0x440>
					fp->clust = clst;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114a8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80114aa:	683a      	ldr	r2, [r7, #0]
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d8c0      	bhi.n	8011434 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	699a      	ldr	r2, [r3, #24]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	441a      	add	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	899b      	ldrh	r3, [r3, #12]
 80114c2:	461a      	mov	r2, r3
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80114ca:	fb02 f201 	mul.w	r2, r2, r1
 80114ce:	1a9b      	subs	r3, r3, r2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d016      	beq.n	8011502 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fd fd73 	bl	800efc4 <clust2sect>
 80114de:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80114e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d104      	bne.n	80114f0 <f_lseek+0x384>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2202      	movs	r2, #2
 80114ea:	755a      	strb	r2, [r3, #21]
 80114ec:	2302      	movs	r3, #2
 80114ee:	e05d      	b.n	80115ac <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	899b      	ldrh	r3, [r3, #12]
 80114f4:	461a      	mov	r2, r3
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80114fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114fe:	4413      	add	r3, r2
 8011500:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	699a      	ldr	r2, [r3, #24]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	429a      	cmp	r2, r3
 801150c:	d90a      	bls.n	8011524 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	699a      	ldr	r2, [r3, #24]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	7d1b      	ldrb	r3, [r3, #20]
 801151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801151e:	b2da      	uxtb	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	699b      	ldr	r3, [r3, #24]
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	8992      	ldrh	r2, [r2, #12]
 801152c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011530:	fb02 f201 	mul.w	r2, r2, r1
 8011534:	1a9b      	subs	r3, r3, r2
 8011536:	2b00      	cmp	r3, #0
 8011538:	d036      	beq.n	80115a8 <f_lseek+0x43c>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a1b      	ldr	r3, [r3, #32]
 801153e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011540:	429a      	cmp	r2, r3
 8011542:	d031      	beq.n	80115a8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	7d1b      	ldrb	r3, [r3, #20]
 8011548:	b25b      	sxtb	r3, r3
 801154a:	2b00      	cmp	r3, #0
 801154c:	da18      	bge.n	8011580 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	7858      	ldrb	r0, [r3, #1]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6a1a      	ldr	r2, [r3, #32]
 801155c:	2301      	movs	r3, #1
 801155e:	f7fd f9a5 	bl	800e8ac <disk_write>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d004      	beq.n	8011572 <f_lseek+0x406>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2201      	movs	r2, #1
 801156c:	755a      	strb	r2, [r3, #21]
 801156e:	2301      	movs	r3, #1
 8011570:	e01c      	b.n	80115ac <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	7d1b      	ldrb	r3, [r3, #20]
 8011576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801157a:	b2da      	uxtb	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	7858      	ldrb	r0, [r3, #1]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801158a:	2301      	movs	r3, #1
 801158c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801158e:	f7fd f96d 	bl	800e86c <disk_read>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <f_lseek+0x436>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2201      	movs	r2, #1
 801159c:	755a      	strb	r2, [r3, #21]
 801159e:	2301      	movs	r3, #1
 80115a0:	e004      	b.n	80115ac <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115a6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80115a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3740      	adds	r7, #64	; 0x40
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b09e      	sub	sp, #120	; 0x78
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80115c0:	f107 010c 	add.w	r1, r7, #12
 80115c4:	1d3b      	adds	r3, r7, #4
 80115c6:	2202      	movs	r2, #2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fe fd17 	bl	800fffc <find_volume>
 80115ce:	4603      	mov	r3, r0
 80115d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80115d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f040 80a4 	bne.w	801172a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115e8:	4611      	mov	r1, r2
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fe fbd6 	bl	800fd9c <follow_path>
 80115f0:	4603      	mov	r3, r0
 80115f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80115f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d108      	bne.n	8011610 <f_unlink+0x5c>
 80115fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011602:	f003 0320 	and.w	r3, r3, #32
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801160a:	2306      	movs	r3, #6
 801160c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011610:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011614:	2b00      	cmp	r3, #0
 8011616:	d108      	bne.n	801162a <f_unlink+0x76>
 8011618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801161c:	2102      	movs	r1, #2
 801161e:	4618      	mov	r0, r3
 8011620:	f7fd fa82 	bl	800eb28 <chk_lock>
 8011624:	4603      	mov	r3, r0
 8011626:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801162a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801162e:	2b00      	cmp	r3, #0
 8011630:	d17b      	bne.n	801172a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011632:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011636:	b25b      	sxtb	r3, r3
 8011638:	2b00      	cmp	r3, #0
 801163a:	da03      	bge.n	8011644 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801163c:	2306      	movs	r3, #6
 801163e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011642:	e008      	b.n	8011656 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011644:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011648:	f003 0301 	and.w	r3, r3, #1
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011650:	2307      	movs	r3, #7
 8011652:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011656:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801165a:	2b00      	cmp	r3, #0
 801165c:	d13d      	bne.n	80116da <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011662:	4611      	mov	r1, r2
 8011664:	4618      	mov	r0, r3
 8011666:	f7fe f98e 	bl	800f986 <ld_clust>
 801166a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801166c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011670:	f003 0310 	and.w	r3, r3, #16
 8011674:	2b00      	cmp	r3, #0
 8011676:	d030      	beq.n	80116da <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	699b      	ldr	r3, [r3, #24]
 801167c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801167e:	429a      	cmp	r2, r3
 8011680:	d103      	bne.n	801168a <f_unlink+0xd6>
						res = FR_DENIED;
 8011682:	2307      	movs	r3, #7
 8011684:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011688:	e027      	b.n	80116da <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801168e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011690:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011692:	f107 0310 	add.w	r3, r7, #16
 8011696:	2100      	movs	r1, #0
 8011698:	4618      	mov	r0, r3
 801169a:	f7fd ffce 	bl	800f63a <dir_sdi>
 801169e:	4603      	mov	r3, r0
 80116a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80116a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d116      	bne.n	80116da <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80116ac:	f107 0310 	add.w	r3, r7, #16
 80116b0:	2100      	movs	r1, #0
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe f9a6 	bl	800fa04 <dir_read>
 80116b8:	4603      	mov	r3, r0
 80116ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80116be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d102      	bne.n	80116cc <f_unlink+0x118>
 80116c6:	2307      	movs	r3, #7
 80116c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80116cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116d0:	2b04      	cmp	r3, #4
 80116d2:	d102      	bne.n	80116da <f_unlink+0x126>
 80116d4:	2300      	movs	r3, #0
 80116d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80116da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d123      	bne.n	801172a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80116e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe fa70 	bl	800fbcc <dir_remove>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80116f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d10c      	bne.n	8011714 <f_unlink+0x160>
 80116fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d009      	beq.n	8011714 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011704:	2200      	movs	r2, #0
 8011706:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011708:	4618      	mov	r0, r3
 801170a:	f7fd fe61 	bl	800f3d0 <remove_chain>
 801170e:	4603      	mov	r3, r0
 8011710:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011714:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011718:	2b00      	cmp	r3, #0
 801171a:	d106      	bne.n	801172a <f_unlink+0x176>
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4618      	mov	r0, r3
 8011720:	f7fd fbe0 	bl	800eee4 <sync_fs>
 8011724:	4603      	mov	r3, r0
 8011726:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801172a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801172e:	4618      	mov	r0, r3
 8011730:	3778      	adds	r7, #120	; 0x78
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
	...

08011738 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b096      	sub	sp, #88	; 0x58
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011740:	f107 0108 	add.w	r1, r7, #8
 8011744:	1d3b      	adds	r3, r7, #4
 8011746:	2202      	movs	r2, #2
 8011748:	4618      	mov	r0, r3
 801174a:	f7fe fc57 	bl	800fffc <find_volume>
 801174e:	4603      	mov	r3, r0
 8011750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801175c:	2b00      	cmp	r3, #0
 801175e:	f040 80fe 	bne.w	801195e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011762:	687a      	ldr	r2, [r7, #4]
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	4611      	mov	r1, r2
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe fb16 	bl	800fd9c <follow_path>
 8011770:	4603      	mov	r3, r0
 8011772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011776:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801177a:	2b00      	cmp	r3, #0
 801177c:	d102      	bne.n	8011784 <f_mkdir+0x4c>
 801177e:	2308      	movs	r3, #8
 8011780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011788:	2b04      	cmp	r3, #4
 801178a:	d108      	bne.n	801179e <f_mkdir+0x66>
 801178c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011790:	f003 0320 	and.w	r3, r3, #32
 8011794:	2b00      	cmp	r3, #0
 8011796:	d002      	beq.n	801179e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011798:	2306      	movs	r3, #6
 801179a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801179e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	f040 80db 	bne.w	801195e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80117a8:	f107 030c 	add.w	r3, r7, #12
 80117ac:	2100      	movs	r1, #0
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fd fe73 	bl	800f49a <create_chain>
 80117b4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	895b      	ldrh	r3, [r3, #10]
 80117ba:	461a      	mov	r2, r3
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	899b      	ldrh	r3, [r3, #12]
 80117c0:	fb03 f302 	mul.w	r3, r3, r2
 80117c4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80117c6:	2300      	movs	r3, #0
 80117c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80117cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d102      	bne.n	80117d8 <f_mkdir+0xa0>
 80117d2:	2307      	movs	r3, #7
 80117d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80117d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d102      	bne.n	80117e4 <f_mkdir+0xac>
 80117de:	2302      	movs	r3, #2
 80117e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ea:	d102      	bne.n	80117f2 <f_mkdir+0xba>
 80117ec:	2301      	movs	r3, #1
 80117ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80117f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d106      	bne.n	8011808 <f_mkdir+0xd0>
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fd faff 	bl	800ee00 <sync_window>
 8011802:	4603      	mov	r3, r0
 8011804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011808:	4b58      	ldr	r3, [pc, #352]	; (801196c <f_mkdir+0x234>)
 801180a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801180c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011810:	2b00      	cmp	r3, #0
 8011812:	d16c      	bne.n	80118ee <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011818:	4618      	mov	r0, r3
 801181a:	f7fd fbd3 	bl	800efc4 <clust2sect>
 801181e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	3338      	adds	r3, #56	; 0x38
 8011824:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	899b      	ldrh	r3, [r3, #12]
 801182a:	461a      	mov	r2, r3
 801182c:	2100      	movs	r1, #0
 801182e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011830:	f7fd f91d 	bl	800ea6e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011834:	220b      	movs	r2, #11
 8011836:	2120      	movs	r1, #32
 8011838:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801183a:	f7fd f918 	bl	800ea6e <mem_set>
					dir[DIR_Name] = '.';
 801183e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011840:	222e      	movs	r2, #46	; 0x2e
 8011842:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011846:	330b      	adds	r3, #11
 8011848:	2210      	movs	r2, #16
 801184a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801184c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801184e:	3316      	adds	r3, #22
 8011850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011852:	4618      	mov	r0, r3
 8011854:	f7fd f8be 	bl	800e9d4 <st_dword>
					st_clust(fs, dir, dcl);
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801185c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801185e:	4618      	mov	r0, r3
 8011860:	f7fe f8b0 	bl	800f9c4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011866:	3320      	adds	r3, #32
 8011868:	2220      	movs	r2, #32
 801186a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801186c:	4618      	mov	r0, r3
 801186e:	f7fd f8dd 	bl	800ea2c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011874:	3321      	adds	r3, #33	; 0x21
 8011876:	222e      	movs	r2, #46	; 0x2e
 8011878:	701a      	strb	r2, [r3, #0]
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	2b03      	cmp	r3, #3
 8011884:	d106      	bne.n	8011894 <f_mkdir+0x15c>
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801188a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801188c:	429a      	cmp	r2, r3
 801188e:	d101      	bne.n	8011894 <f_mkdir+0x15c>
 8011890:	2300      	movs	r3, #0
 8011892:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011894:	68b8      	ldr	r0, [r7, #8]
 8011896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011898:	3320      	adds	r3, #32
 801189a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801189c:	4619      	mov	r1, r3
 801189e:	f7fe f891 	bl	800f9c4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	895b      	ldrh	r3, [r3, #10]
 80118a6:	653b      	str	r3, [r7, #80]	; 0x50
 80118a8:	e01c      	b.n	80118e4 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80118aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	2201      	movs	r2, #1
 80118b8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fd fa9f 	bl	800ee00 <sync_window>
 80118c2:	4603      	mov	r3, r0
 80118c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80118c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10d      	bne.n	80118ec <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	899b      	ldrh	r3, [r3, #12]
 80118d4:	461a      	mov	r2, r3
 80118d6:	2100      	movs	r1, #0
 80118d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118da:	f7fd f8c8 	bl	800ea6e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80118de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e0:	3b01      	subs	r3, #1
 80118e2:	653b      	str	r3, [r7, #80]	; 0x50
 80118e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1df      	bne.n	80118aa <f_mkdir+0x172>
 80118ea:	e000      	b.n	80118ee <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80118ec:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80118ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d107      	bne.n	8011906 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80118f6:	f107 030c 	add.w	r3, r7, #12
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fe f934 	bl	800fb68 <dir_register>
 8011900:	4603      	mov	r3, r0
 8011902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801190a:	2b00      	cmp	r3, #0
 801190c:	d120      	bne.n	8011950 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011914:	3316      	adds	r3, #22
 8011916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011918:	4618      	mov	r0, r3
 801191a:	f7fd f85b 	bl	800e9d4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011922:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011924:	4618      	mov	r0, r3
 8011926:	f7fe f84d 	bl	800f9c4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801192c:	330b      	adds	r3, #11
 801192e:	2210      	movs	r2, #16
 8011930:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	2201      	movs	r2, #1
 8011936:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10e      	bne.n	801195e <f_mkdir+0x226>
					res = sync_fs(fs);
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	4618      	mov	r0, r3
 8011944:	f7fd face 	bl	800eee4 <sync_fs>
 8011948:	4603      	mov	r3, r0
 801194a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801194e:	e006      	b.n	801195e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011950:	f107 030c 	add.w	r3, r7, #12
 8011954:	2200      	movs	r2, #0
 8011956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011958:	4618      	mov	r0, r3
 801195a:	f7fd fd39 	bl	800f3d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801195e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011962:	4618      	mov	r0, r3
 8011964:	3758      	adds	r7, #88	; 0x58
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	274a0000 	.word	0x274a0000

08011970 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b088      	sub	sp, #32
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801197c:	2300      	movs	r3, #0
 801197e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011984:	e017      	b.n	80119b6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011986:	f107 0310 	add.w	r3, r7, #16
 801198a:	f107 0114 	add.w	r1, r7, #20
 801198e:	2201      	movs	r2, #1
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff f803 	bl	801099c <f_read>
		if (rc != 1) break;
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d112      	bne.n	80119c2 <f_gets+0x52>
		c = s[0];
 801199c:	7d3b      	ldrb	r3, [r7, #20]
 801199e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	1c5a      	adds	r2, r3, #1
 80119a4:	61ba      	str	r2, [r7, #24]
 80119a6:	7dfa      	ldrb	r2, [r7, #23]
 80119a8:	701a      	strb	r2, [r3, #0]
		n++;
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	3301      	adds	r3, #1
 80119ae:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	2b0a      	cmp	r3, #10
 80119b4:	d007      	beq.n	80119c6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	3b01      	subs	r3, #1
 80119ba:	69fa      	ldr	r2, [r7, #28]
 80119bc:	429a      	cmp	r2, r3
 80119be:	dbe2      	blt.n	8011986 <f_gets+0x16>
 80119c0:	e002      	b.n	80119c8 <f_gets+0x58>
		if (rc != 1) break;
 80119c2:	bf00      	nop
 80119c4:	e000      	b.n	80119c8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80119c6:	bf00      	nop
	}
	*p = 0;
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	2200      	movs	r2, #0
 80119cc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d001      	beq.n	80119d8 <f_gets+0x68>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	e000      	b.n	80119da <f_gets+0x6a>
 80119d8:	2300      	movs	r3, #0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3720      	adds	r7, #32
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
	...

080119e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b087      	sub	sp, #28
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	4613      	mov	r3, r2
 80119f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80119f2:	2301      	movs	r3, #1
 80119f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80119f6:	2300      	movs	r3, #0
 80119f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80119fa:	4b1f      	ldr	r3, [pc, #124]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 80119fc:	7a5b      	ldrb	r3, [r3, #9]
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d131      	bne.n	8011a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a04:	4b1c      	ldr	r3, [pc, #112]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a06:	7a5b      	ldrb	r3, [r3, #9]
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	4b1a      	ldr	r3, [pc, #104]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a0e:	2100      	movs	r1, #0
 8011a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a12:	4b19      	ldr	r3, [pc, #100]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a14:	7a5b      	ldrb	r3, [r3, #9]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	4a17      	ldr	r2, [pc, #92]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	4413      	add	r3, r2
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a22:	4b15      	ldr	r3, [pc, #84]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a24:	7a5b      	ldrb	r3, [r3, #9]
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4b13      	ldr	r3, [pc, #76]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a2c:	4413      	add	r3, r2
 8011a2e:	79fa      	ldrb	r2, [r7, #7]
 8011a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a32:	4b11      	ldr	r3, [pc, #68]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a34:	7a5b      	ldrb	r3, [r3, #9]
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	1c5a      	adds	r2, r3, #1
 8011a3a:	b2d1      	uxtb	r1, r2
 8011a3c:	4a0e      	ldr	r2, [pc, #56]	; (8011a78 <FATFS_LinkDriverEx+0x94>)
 8011a3e:	7251      	strb	r1, [r2, #9]
 8011a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a42:	7dbb      	ldrb	r3, [r7, #22]
 8011a44:	3330      	adds	r3, #48	; 0x30
 8011a46:	b2da      	uxtb	r2, r3
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	223a      	movs	r2, #58	; 0x3a
 8011a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	3302      	adds	r3, #2
 8011a58:	222f      	movs	r2, #47	; 0x2f
 8011a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	3303      	adds	r3, #3
 8011a60:	2200      	movs	r2, #0
 8011a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a64:	2300      	movs	r3, #0
 8011a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	371c      	adds	r7, #28
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	20037460 	.word	0x20037460

08011a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a86:	2200      	movs	r2, #0
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7ff ffaa 	bl	80119e4 <FATFS_LinkDriverEx>
 8011a90:	4603      	mov	r3, r0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <__cxa_guard_acquire>:
 8011a9a:	6803      	ldr	r3, [r0, #0]
 8011a9c:	07db      	lsls	r3, r3, #31
 8011a9e:	d406      	bmi.n	8011aae <__cxa_guard_acquire+0x14>
 8011aa0:	7843      	ldrb	r3, [r0, #1]
 8011aa2:	b103      	cbz	r3, 8011aa6 <__cxa_guard_acquire+0xc>
 8011aa4:	deff      	udf	#255	; 0xff
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	7043      	strb	r3, [r0, #1]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	4770      	bx	lr
 8011aae:	2000      	movs	r0, #0
 8011ab0:	4770      	bx	lr

08011ab2 <__cxa_guard_release>:
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	6003      	str	r3, [r0, #0]
 8011ab6:	4770      	bx	lr

08011ab8 <cos>:
 8011ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aba:	ec51 0b10 	vmov	r0, r1, d0
 8011abe:	4a1e      	ldr	r2, [pc, #120]	; (8011b38 <cos+0x80>)
 8011ac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	dc06      	bgt.n	8011ad6 <cos+0x1e>
 8011ac8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011b30 <cos+0x78>
 8011acc:	f000 fa74 	bl	8011fb8 <__kernel_cos>
 8011ad0:	ec51 0b10 	vmov	r0, r1, d0
 8011ad4:	e007      	b.n	8011ae6 <cos+0x2e>
 8011ad6:	4a19      	ldr	r2, [pc, #100]	; (8011b3c <cos+0x84>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	dd09      	ble.n	8011af0 <cos+0x38>
 8011adc:	ee10 2a10 	vmov	r2, s0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	f7ee fbe9 	bl	80002b8 <__aeabi_dsub>
 8011ae6:	ec41 0b10 	vmov	d0, r0, r1
 8011aea:	b005      	add	sp, #20
 8011aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8011af0:	4668      	mov	r0, sp
 8011af2:	f000 f86d 	bl	8011bd0 <__ieee754_rem_pio2>
 8011af6:	f000 0003 	and.w	r0, r0, #3
 8011afa:	2801      	cmp	r0, #1
 8011afc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b00:	ed9d 0b00 	vldr	d0, [sp]
 8011b04:	d007      	beq.n	8011b16 <cos+0x5e>
 8011b06:	2802      	cmp	r0, #2
 8011b08:	d00e      	beq.n	8011b28 <cos+0x70>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	d0de      	beq.n	8011acc <cos+0x14>
 8011b0e:	2001      	movs	r0, #1
 8011b10:	f000 fe5a 	bl	80127c8 <__kernel_sin>
 8011b14:	e7dc      	b.n	8011ad0 <cos+0x18>
 8011b16:	f000 fe57 	bl	80127c8 <__kernel_sin>
 8011b1a:	ec53 2b10 	vmov	r2, r3, d0
 8011b1e:	ee10 0a10 	vmov	r0, s0
 8011b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b26:	e7de      	b.n	8011ae6 <cos+0x2e>
 8011b28:	f000 fa46 	bl	8011fb8 <__kernel_cos>
 8011b2c:	e7f5      	b.n	8011b1a <cos+0x62>
 8011b2e:	bf00      	nop
	...
 8011b38:	3fe921fb 	.word	0x3fe921fb
 8011b3c:	7fefffff 	.word	0x7fefffff

08011b40 <sin>:
 8011b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b42:	ec51 0b10 	vmov	r0, r1, d0
 8011b46:	4a20      	ldr	r2, [pc, #128]	; (8011bc8 <sin+0x88>)
 8011b48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	dc07      	bgt.n	8011b60 <sin+0x20>
 8011b50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011bc0 <sin+0x80>
 8011b54:	2000      	movs	r0, #0
 8011b56:	f000 fe37 	bl	80127c8 <__kernel_sin>
 8011b5a:	ec51 0b10 	vmov	r0, r1, d0
 8011b5e:	e007      	b.n	8011b70 <sin+0x30>
 8011b60:	4a1a      	ldr	r2, [pc, #104]	; (8011bcc <sin+0x8c>)
 8011b62:	4293      	cmp	r3, r2
 8011b64:	dd09      	ble.n	8011b7a <sin+0x3a>
 8011b66:	ee10 2a10 	vmov	r2, s0
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	f7ee fba4 	bl	80002b8 <__aeabi_dsub>
 8011b70:	ec41 0b10 	vmov	d0, r0, r1
 8011b74:	b005      	add	sp, #20
 8011b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b7a:	4668      	mov	r0, sp
 8011b7c:	f000 f828 	bl	8011bd0 <__ieee754_rem_pio2>
 8011b80:	f000 0003 	and.w	r0, r0, #3
 8011b84:	2801      	cmp	r0, #1
 8011b86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b8a:	ed9d 0b00 	vldr	d0, [sp]
 8011b8e:	d004      	beq.n	8011b9a <sin+0x5a>
 8011b90:	2802      	cmp	r0, #2
 8011b92:	d005      	beq.n	8011ba0 <sin+0x60>
 8011b94:	b970      	cbnz	r0, 8011bb4 <sin+0x74>
 8011b96:	2001      	movs	r0, #1
 8011b98:	e7dd      	b.n	8011b56 <sin+0x16>
 8011b9a:	f000 fa0d 	bl	8011fb8 <__kernel_cos>
 8011b9e:	e7dc      	b.n	8011b5a <sin+0x1a>
 8011ba0:	2001      	movs	r0, #1
 8011ba2:	f000 fe11 	bl	80127c8 <__kernel_sin>
 8011ba6:	ec53 2b10 	vmov	r2, r3, d0
 8011baa:	ee10 0a10 	vmov	r0, s0
 8011bae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011bb2:	e7dd      	b.n	8011b70 <sin+0x30>
 8011bb4:	f000 fa00 	bl	8011fb8 <__kernel_cos>
 8011bb8:	e7f5      	b.n	8011ba6 <sin+0x66>
 8011bba:	bf00      	nop
 8011bbc:	f3af 8000 	nop.w
	...
 8011bc8:	3fe921fb 	.word	0x3fe921fb
 8011bcc:	7fefffff 	.word	0x7fefffff

08011bd0 <__ieee754_rem_pio2>:
 8011bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	ec57 6b10 	vmov	r6, r7, d0
 8011bd8:	4bc3      	ldr	r3, [pc, #780]	; (8011ee8 <__ieee754_rem_pio2+0x318>)
 8011bda:	b08d      	sub	sp, #52	; 0x34
 8011bdc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011be0:	4598      	cmp	r8, r3
 8011be2:	4604      	mov	r4, r0
 8011be4:	9704      	str	r7, [sp, #16]
 8011be6:	dc07      	bgt.n	8011bf8 <__ieee754_rem_pio2+0x28>
 8011be8:	2200      	movs	r2, #0
 8011bea:	2300      	movs	r3, #0
 8011bec:	ed84 0b00 	vstr	d0, [r4]
 8011bf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011bf4:	2500      	movs	r5, #0
 8011bf6:	e027      	b.n	8011c48 <__ieee754_rem_pio2+0x78>
 8011bf8:	4bbc      	ldr	r3, [pc, #752]	; (8011eec <__ieee754_rem_pio2+0x31c>)
 8011bfa:	4598      	cmp	r8, r3
 8011bfc:	dc75      	bgt.n	8011cea <__ieee754_rem_pio2+0x11a>
 8011bfe:	9b04      	ldr	r3, [sp, #16]
 8011c00:	4dbb      	ldr	r5, [pc, #748]	; (8011ef0 <__ieee754_rem_pio2+0x320>)
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	ee10 0a10 	vmov	r0, s0
 8011c08:	a3a9      	add	r3, pc, #676	; (adr r3, 8011eb0 <__ieee754_rem_pio2+0x2e0>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	4639      	mov	r1, r7
 8011c10:	dd36      	ble.n	8011c80 <__ieee754_rem_pio2+0xb0>
 8011c12:	f7ee fb51 	bl	80002b8 <__aeabi_dsub>
 8011c16:	45a8      	cmp	r8, r5
 8011c18:	4606      	mov	r6, r0
 8011c1a:	460f      	mov	r7, r1
 8011c1c:	d018      	beq.n	8011c50 <__ieee754_rem_pio2+0x80>
 8011c1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x2e8>)
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	f7ee fb48 	bl	80002b8 <__aeabi_dsub>
 8011c28:	4602      	mov	r2, r0
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	e9c4 2300 	strd	r2, r3, [r4]
 8011c30:	4630      	mov	r0, r6
 8011c32:	4639      	mov	r1, r7
 8011c34:	f7ee fb40 	bl	80002b8 <__aeabi_dsub>
 8011c38:	a39f      	add	r3, pc, #636	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x2e8>)
 8011c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3e:	f7ee fb3b 	bl	80002b8 <__aeabi_dsub>
 8011c42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c46:	2501      	movs	r5, #1
 8011c48:	4628      	mov	r0, r5
 8011c4a:	b00d      	add	sp, #52	; 0x34
 8011c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c50:	a39b      	add	r3, pc, #620	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x2f0>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	f7ee fb2f 	bl	80002b8 <__aeabi_dsub>
 8011c5a:	a39b      	add	r3, pc, #620	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x2f8>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	4606      	mov	r6, r0
 8011c62:	460f      	mov	r7, r1
 8011c64:	f7ee fb28 	bl	80002b8 <__aeabi_dsub>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	e9c4 2300 	strd	r2, r3, [r4]
 8011c70:	4630      	mov	r0, r6
 8011c72:	4639      	mov	r1, r7
 8011c74:	f7ee fb20 	bl	80002b8 <__aeabi_dsub>
 8011c78:	a393      	add	r3, pc, #588	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x2f8>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	e7de      	b.n	8011c3e <__ieee754_rem_pio2+0x6e>
 8011c80:	f7ee fb1c 	bl	80002bc <__adddf3>
 8011c84:	45a8      	cmp	r8, r5
 8011c86:	4606      	mov	r6, r0
 8011c88:	460f      	mov	r7, r1
 8011c8a:	d016      	beq.n	8011cba <__ieee754_rem_pio2+0xea>
 8011c8c:	a38a      	add	r3, pc, #552	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x2e8>)
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	f7ee fb13 	bl	80002bc <__adddf3>
 8011c96:	4602      	mov	r2, r0
 8011c98:	460b      	mov	r3, r1
 8011c9a:	e9c4 2300 	strd	r2, r3, [r4]
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	4639      	mov	r1, r7
 8011ca2:	f7ee fb09 	bl	80002b8 <__aeabi_dsub>
 8011ca6:	a384      	add	r3, pc, #528	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x2e8>)
 8011ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cac:	f7ee fb06 	bl	80002bc <__adddf3>
 8011cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8011cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cb8:	e7c6      	b.n	8011c48 <__ieee754_rem_pio2+0x78>
 8011cba:	a381      	add	r3, pc, #516	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x2f0>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fafc 	bl	80002bc <__adddf3>
 8011cc4:	a380      	add	r3, pc, #512	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x2f8>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	4606      	mov	r6, r0
 8011ccc:	460f      	mov	r7, r1
 8011cce:	f7ee faf5 	bl	80002bc <__adddf3>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8011cda:	4630      	mov	r0, r6
 8011cdc:	4639      	mov	r1, r7
 8011cde:	f7ee faeb 	bl	80002b8 <__aeabi_dsub>
 8011ce2:	a379      	add	r3, pc, #484	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x2f8>)
 8011ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce8:	e7e0      	b.n	8011cac <__ieee754_rem_pio2+0xdc>
 8011cea:	4b82      	ldr	r3, [pc, #520]	; (8011ef4 <__ieee754_rem_pio2+0x324>)
 8011cec:	4598      	cmp	r8, r3
 8011cee:	f300 80d0 	bgt.w	8011e92 <__ieee754_rem_pio2+0x2c2>
 8011cf2:	f000 fe23 	bl	801293c <fabs>
 8011cf6:	ec57 6b10 	vmov	r6, r7, d0
 8011cfa:	ee10 0a10 	vmov	r0, s0
 8011cfe:	a374      	add	r3, pc, #464	; (adr r3, 8011ed0 <__ieee754_rem_pio2+0x300>)
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	4639      	mov	r1, r7
 8011d06:	f7ee fc8f 	bl	8000628 <__aeabi_dmul>
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	4b7a      	ldr	r3, [pc, #488]	; (8011ef8 <__ieee754_rem_pio2+0x328>)
 8011d0e:	f7ee fad5 	bl	80002bc <__adddf3>
 8011d12:	f7ee ff39 	bl	8000b88 <__aeabi_d2iz>
 8011d16:	4605      	mov	r5, r0
 8011d18:	f7ee fc1c 	bl	8000554 <__aeabi_i2d>
 8011d1c:	a364      	add	r3, pc, #400	; (adr r3, 8011eb0 <__ieee754_rem_pio2+0x2e0>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d26:	f7ee fc7f 	bl	8000628 <__aeabi_dmul>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	4630      	mov	r0, r6
 8011d30:	4639      	mov	r1, r7
 8011d32:	f7ee fac1 	bl	80002b8 <__aeabi_dsub>
 8011d36:	a360      	add	r3, pc, #384	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x2e8>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4682      	mov	sl, r0
 8011d3e:	468b      	mov	fp, r1
 8011d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d44:	f7ee fc70 	bl	8000628 <__aeabi_dmul>
 8011d48:	2d1f      	cmp	r5, #31
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	460f      	mov	r7, r1
 8011d4e:	dc0c      	bgt.n	8011d6a <__ieee754_rem_pio2+0x19a>
 8011d50:	1e6a      	subs	r2, r5, #1
 8011d52:	4b6a      	ldr	r3, [pc, #424]	; (8011efc <__ieee754_rem_pio2+0x32c>)
 8011d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d58:	4543      	cmp	r3, r8
 8011d5a:	d006      	beq.n	8011d6a <__ieee754_rem_pio2+0x19a>
 8011d5c:	4632      	mov	r2, r6
 8011d5e:	463b      	mov	r3, r7
 8011d60:	4650      	mov	r0, sl
 8011d62:	4659      	mov	r1, fp
 8011d64:	f7ee faa8 	bl	80002b8 <__aeabi_dsub>
 8011d68:	e00e      	b.n	8011d88 <__ieee754_rem_pio2+0x1b8>
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	463b      	mov	r3, r7
 8011d6e:	4650      	mov	r0, sl
 8011d70:	4659      	mov	r1, fp
 8011d72:	f7ee faa1 	bl	80002b8 <__aeabi_dsub>
 8011d76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d7a:	9305      	str	r3, [sp, #20]
 8011d7c:	9a05      	ldr	r2, [sp, #20]
 8011d7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	2b10      	cmp	r3, #16
 8011d86:	dc02      	bgt.n	8011d8e <__ieee754_rem_pio2+0x1be>
 8011d88:	e9c4 0100 	strd	r0, r1, [r4]
 8011d8c:	e039      	b.n	8011e02 <__ieee754_rem_pio2+0x232>
 8011d8e:	a34c      	add	r3, pc, #304	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x2f0>)
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d98:	f7ee fc46 	bl	8000628 <__aeabi_dmul>
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	460f      	mov	r7, r1
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4650      	mov	r0, sl
 8011da6:	4659      	mov	r1, fp
 8011da8:	f7ee fa86 	bl	80002b8 <__aeabi_dsub>
 8011dac:	4602      	mov	r2, r0
 8011dae:	460b      	mov	r3, r1
 8011db0:	4680      	mov	r8, r0
 8011db2:	4689      	mov	r9, r1
 8011db4:	4650      	mov	r0, sl
 8011db6:	4659      	mov	r1, fp
 8011db8:	f7ee fa7e 	bl	80002b8 <__aeabi_dsub>
 8011dbc:	4632      	mov	r2, r6
 8011dbe:	463b      	mov	r3, r7
 8011dc0:	f7ee fa7a 	bl	80002b8 <__aeabi_dsub>
 8011dc4:	a340      	add	r3, pc, #256	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x2f8>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	4606      	mov	r6, r0
 8011dcc:	460f      	mov	r7, r1
 8011dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dd2:	f7ee fc29 	bl	8000628 <__aeabi_dmul>
 8011dd6:	4632      	mov	r2, r6
 8011dd8:	463b      	mov	r3, r7
 8011dda:	f7ee fa6d 	bl	80002b8 <__aeabi_dsub>
 8011dde:	4602      	mov	r2, r0
 8011de0:	460b      	mov	r3, r1
 8011de2:	4606      	mov	r6, r0
 8011de4:	460f      	mov	r7, r1
 8011de6:	4640      	mov	r0, r8
 8011de8:	4649      	mov	r1, r9
 8011dea:	f7ee fa65 	bl	80002b8 <__aeabi_dsub>
 8011dee:	9a05      	ldr	r2, [sp, #20]
 8011df0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	2b31      	cmp	r3, #49	; 0x31
 8011df8:	dc20      	bgt.n	8011e3c <__ieee754_rem_pio2+0x26c>
 8011dfa:	e9c4 0100 	strd	r0, r1, [r4]
 8011dfe:	46c2      	mov	sl, r8
 8011e00:	46cb      	mov	fp, r9
 8011e02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e06:	4650      	mov	r0, sl
 8011e08:	4642      	mov	r2, r8
 8011e0a:	464b      	mov	r3, r9
 8011e0c:	4659      	mov	r1, fp
 8011e0e:	f7ee fa53 	bl	80002b8 <__aeabi_dsub>
 8011e12:	463b      	mov	r3, r7
 8011e14:	4632      	mov	r2, r6
 8011e16:	f7ee fa4f 	bl	80002b8 <__aeabi_dsub>
 8011e1a:	9b04      	ldr	r3, [sp, #16]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e22:	f6bf af11 	bge.w	8011c48 <__ieee754_rem_pio2+0x78>
 8011e26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e2a:	6063      	str	r3, [r4, #4]
 8011e2c:	f8c4 8000 	str.w	r8, [r4]
 8011e30:	60a0      	str	r0, [r4, #8]
 8011e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e36:	60e3      	str	r3, [r4, #12]
 8011e38:	426d      	negs	r5, r5
 8011e3a:	e705      	b.n	8011c48 <__ieee754_rem_pio2+0x78>
 8011e3c:	a326      	add	r3, pc, #152	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x308>)
 8011e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e46:	f7ee fbef 	bl	8000628 <__aeabi_dmul>
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	4602      	mov	r2, r0
 8011e50:	460b      	mov	r3, r1
 8011e52:	4640      	mov	r0, r8
 8011e54:	4649      	mov	r1, r9
 8011e56:	f7ee fa2f 	bl	80002b8 <__aeabi_dsub>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4682      	mov	sl, r0
 8011e60:	468b      	mov	fp, r1
 8011e62:	4640      	mov	r0, r8
 8011e64:	4649      	mov	r1, r9
 8011e66:	f7ee fa27 	bl	80002b8 <__aeabi_dsub>
 8011e6a:	4632      	mov	r2, r6
 8011e6c:	463b      	mov	r3, r7
 8011e6e:	f7ee fa23 	bl	80002b8 <__aeabi_dsub>
 8011e72:	a31b      	add	r3, pc, #108	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x310>)
 8011e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e78:	4606      	mov	r6, r0
 8011e7a:	460f      	mov	r7, r1
 8011e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e80:	f7ee fbd2 	bl	8000628 <__aeabi_dmul>
 8011e84:	4632      	mov	r2, r6
 8011e86:	463b      	mov	r3, r7
 8011e88:	f7ee fa16 	bl	80002b8 <__aeabi_dsub>
 8011e8c:	4606      	mov	r6, r0
 8011e8e:	460f      	mov	r7, r1
 8011e90:	e764      	b.n	8011d5c <__ieee754_rem_pio2+0x18c>
 8011e92:	4b1b      	ldr	r3, [pc, #108]	; (8011f00 <__ieee754_rem_pio2+0x330>)
 8011e94:	4598      	cmp	r8, r3
 8011e96:	dd35      	ble.n	8011f04 <__ieee754_rem_pio2+0x334>
 8011e98:	ee10 2a10 	vmov	r2, s0
 8011e9c:	463b      	mov	r3, r7
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f7ee fa09 	bl	80002b8 <__aeabi_dsub>
 8011ea6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011eaa:	e9c4 0100 	strd	r0, r1, [r4]
 8011eae:	e6a1      	b.n	8011bf4 <__ieee754_rem_pio2+0x24>
 8011eb0:	54400000 	.word	0x54400000
 8011eb4:	3ff921fb 	.word	0x3ff921fb
 8011eb8:	1a626331 	.word	0x1a626331
 8011ebc:	3dd0b461 	.word	0x3dd0b461
 8011ec0:	1a600000 	.word	0x1a600000
 8011ec4:	3dd0b461 	.word	0x3dd0b461
 8011ec8:	2e037073 	.word	0x2e037073
 8011ecc:	3ba3198a 	.word	0x3ba3198a
 8011ed0:	6dc9c883 	.word	0x6dc9c883
 8011ed4:	3fe45f30 	.word	0x3fe45f30
 8011ed8:	2e000000 	.word	0x2e000000
 8011edc:	3ba3198a 	.word	0x3ba3198a
 8011ee0:	252049c1 	.word	0x252049c1
 8011ee4:	397b839a 	.word	0x397b839a
 8011ee8:	3fe921fb 	.word	0x3fe921fb
 8011eec:	4002d97b 	.word	0x4002d97b
 8011ef0:	3ff921fb 	.word	0x3ff921fb
 8011ef4:	413921fb 	.word	0x413921fb
 8011ef8:	3fe00000 	.word	0x3fe00000
 8011efc:	08017fec 	.word	0x08017fec
 8011f00:	7fefffff 	.word	0x7fefffff
 8011f04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011f08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011f0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011f10:	4630      	mov	r0, r6
 8011f12:	460f      	mov	r7, r1
 8011f14:	f7ee fe38 	bl	8000b88 <__aeabi_d2iz>
 8011f18:	f7ee fb1c 	bl	8000554 <__aeabi_i2d>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	460b      	mov	r3, r1
 8011f20:	4630      	mov	r0, r6
 8011f22:	4639      	mov	r1, r7
 8011f24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f28:	f7ee f9c6 	bl	80002b8 <__aeabi_dsub>
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	4b1f      	ldr	r3, [pc, #124]	; (8011fac <__ieee754_rem_pio2+0x3dc>)
 8011f30:	f7ee fb7a 	bl	8000628 <__aeabi_dmul>
 8011f34:	460f      	mov	r7, r1
 8011f36:	4606      	mov	r6, r0
 8011f38:	f7ee fe26 	bl	8000b88 <__aeabi_d2iz>
 8011f3c:	f7ee fb0a 	bl	8000554 <__aeabi_i2d>
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	4630      	mov	r0, r6
 8011f46:	4639      	mov	r1, r7
 8011f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011f4c:	f7ee f9b4 	bl	80002b8 <__aeabi_dsub>
 8011f50:	2200      	movs	r2, #0
 8011f52:	4b16      	ldr	r3, [pc, #88]	; (8011fac <__ieee754_rem_pio2+0x3dc>)
 8011f54:	f7ee fb68 	bl	8000628 <__aeabi_dmul>
 8011f58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011f5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011f60:	f04f 0803 	mov.w	r8, #3
 8011f64:	2600      	movs	r6, #0
 8011f66:	2700      	movs	r7, #0
 8011f68:	4632      	mov	r2, r6
 8011f6a:	463b      	mov	r3, r7
 8011f6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8011f74:	f7ee fdc0 	bl	8000af8 <__aeabi_dcmpeq>
 8011f78:	b9b0      	cbnz	r0, 8011fa8 <__ieee754_rem_pio2+0x3d8>
 8011f7a:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <__ieee754_rem_pio2+0x3e0>)
 8011f7c:	9301      	str	r3, [sp, #4]
 8011f7e:	2302      	movs	r3, #2
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	462a      	mov	r2, r5
 8011f84:	4643      	mov	r3, r8
 8011f86:	4621      	mov	r1, r4
 8011f88:	a806      	add	r0, sp, #24
 8011f8a:	f000 f8dd 	bl	8012148 <__kernel_rem_pio2>
 8011f8e:	9b04      	ldr	r3, [sp, #16]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	4605      	mov	r5, r0
 8011f94:	f6bf ae58 	bge.w	8011c48 <__ieee754_rem_pio2+0x78>
 8011f98:	6863      	ldr	r3, [r4, #4]
 8011f9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f9e:	6063      	str	r3, [r4, #4]
 8011fa0:	68e3      	ldr	r3, [r4, #12]
 8011fa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011fa6:	e746      	b.n	8011e36 <__ieee754_rem_pio2+0x266>
 8011fa8:	46d0      	mov	r8, sl
 8011faa:	e7dd      	b.n	8011f68 <__ieee754_rem_pio2+0x398>
 8011fac:	41700000 	.word	0x41700000
 8011fb0:	0801806c 	.word	0x0801806c
 8011fb4:	00000000 	.word	0x00000000

08011fb8 <__kernel_cos>:
 8011fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fbc:	ec59 8b10 	vmov	r8, r9, d0
 8011fc0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011fc4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011fc8:	ed2d 8b02 	vpush	{d8}
 8011fcc:	eeb0 8a41 	vmov.f32	s16, s2
 8011fd0:	eef0 8a61 	vmov.f32	s17, s3
 8011fd4:	da07      	bge.n	8011fe6 <__kernel_cos+0x2e>
 8011fd6:	ee10 0a10 	vmov	r0, s0
 8011fda:	4649      	mov	r1, r9
 8011fdc:	f7ee fdd4 	bl	8000b88 <__aeabi_d2iz>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	f000 8089 	beq.w	80120f8 <__kernel_cos+0x140>
 8011fe6:	4642      	mov	r2, r8
 8011fe8:	464b      	mov	r3, r9
 8011fea:	4640      	mov	r0, r8
 8011fec:	4649      	mov	r1, r9
 8011fee:	f7ee fb1b 	bl	8000628 <__aeabi_dmul>
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	4b4e      	ldr	r3, [pc, #312]	; (8012130 <__kernel_cos+0x178>)
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	460d      	mov	r5, r1
 8011ffa:	f7ee fb15 	bl	8000628 <__aeabi_dmul>
 8011ffe:	a340      	add	r3, pc, #256	; (adr r3, 8012100 <__kernel_cos+0x148>)
 8012000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012004:	4682      	mov	sl, r0
 8012006:	468b      	mov	fp, r1
 8012008:	4620      	mov	r0, r4
 801200a:	4629      	mov	r1, r5
 801200c:	f7ee fb0c 	bl	8000628 <__aeabi_dmul>
 8012010:	a33d      	add	r3, pc, #244	; (adr r3, 8012108 <__kernel_cos+0x150>)
 8012012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012016:	f7ee f951 	bl	80002bc <__adddf3>
 801201a:	4622      	mov	r2, r4
 801201c:	462b      	mov	r3, r5
 801201e:	f7ee fb03 	bl	8000628 <__aeabi_dmul>
 8012022:	a33b      	add	r3, pc, #236	; (adr r3, 8012110 <__kernel_cos+0x158>)
 8012024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012028:	f7ee f946 	bl	80002b8 <__aeabi_dsub>
 801202c:	4622      	mov	r2, r4
 801202e:	462b      	mov	r3, r5
 8012030:	f7ee fafa 	bl	8000628 <__aeabi_dmul>
 8012034:	a338      	add	r3, pc, #224	; (adr r3, 8012118 <__kernel_cos+0x160>)
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	f7ee f93f 	bl	80002bc <__adddf3>
 801203e:	4622      	mov	r2, r4
 8012040:	462b      	mov	r3, r5
 8012042:	f7ee faf1 	bl	8000628 <__aeabi_dmul>
 8012046:	a336      	add	r3, pc, #216	; (adr r3, 8012120 <__kernel_cos+0x168>)
 8012048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204c:	f7ee f934 	bl	80002b8 <__aeabi_dsub>
 8012050:	4622      	mov	r2, r4
 8012052:	462b      	mov	r3, r5
 8012054:	f7ee fae8 	bl	8000628 <__aeabi_dmul>
 8012058:	a333      	add	r3, pc, #204	; (adr r3, 8012128 <__kernel_cos+0x170>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	f7ee f92d 	bl	80002bc <__adddf3>
 8012062:	4622      	mov	r2, r4
 8012064:	462b      	mov	r3, r5
 8012066:	f7ee fadf 	bl	8000628 <__aeabi_dmul>
 801206a:	4622      	mov	r2, r4
 801206c:	462b      	mov	r3, r5
 801206e:	f7ee fadb 	bl	8000628 <__aeabi_dmul>
 8012072:	ec53 2b18 	vmov	r2, r3, d8
 8012076:	4604      	mov	r4, r0
 8012078:	460d      	mov	r5, r1
 801207a:	4640      	mov	r0, r8
 801207c:	4649      	mov	r1, r9
 801207e:	f7ee fad3 	bl	8000628 <__aeabi_dmul>
 8012082:	460b      	mov	r3, r1
 8012084:	4602      	mov	r2, r0
 8012086:	4629      	mov	r1, r5
 8012088:	4620      	mov	r0, r4
 801208a:	f7ee f915 	bl	80002b8 <__aeabi_dsub>
 801208e:	4b29      	ldr	r3, [pc, #164]	; (8012134 <__kernel_cos+0x17c>)
 8012090:	429e      	cmp	r6, r3
 8012092:	4680      	mov	r8, r0
 8012094:	4689      	mov	r9, r1
 8012096:	dc11      	bgt.n	80120bc <__kernel_cos+0x104>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4650      	mov	r0, sl
 801209e:	4659      	mov	r1, fp
 80120a0:	f7ee f90a 	bl	80002b8 <__aeabi_dsub>
 80120a4:	460b      	mov	r3, r1
 80120a6:	4924      	ldr	r1, [pc, #144]	; (8012138 <__kernel_cos+0x180>)
 80120a8:	4602      	mov	r2, r0
 80120aa:	2000      	movs	r0, #0
 80120ac:	f7ee f904 	bl	80002b8 <__aeabi_dsub>
 80120b0:	ecbd 8b02 	vpop	{d8}
 80120b4:	ec41 0b10 	vmov	d0, r0, r1
 80120b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120bc:	4b1f      	ldr	r3, [pc, #124]	; (801213c <__kernel_cos+0x184>)
 80120be:	491e      	ldr	r1, [pc, #120]	; (8012138 <__kernel_cos+0x180>)
 80120c0:	429e      	cmp	r6, r3
 80120c2:	bfcc      	ite	gt
 80120c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8012140 <__kernel_cos+0x188>)
 80120c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80120ca:	2400      	movs	r4, #0
 80120cc:	4622      	mov	r2, r4
 80120ce:	462b      	mov	r3, r5
 80120d0:	2000      	movs	r0, #0
 80120d2:	f7ee f8f1 	bl	80002b8 <__aeabi_dsub>
 80120d6:	4622      	mov	r2, r4
 80120d8:	4606      	mov	r6, r0
 80120da:	460f      	mov	r7, r1
 80120dc:	462b      	mov	r3, r5
 80120de:	4650      	mov	r0, sl
 80120e0:	4659      	mov	r1, fp
 80120e2:	f7ee f8e9 	bl	80002b8 <__aeabi_dsub>
 80120e6:	4642      	mov	r2, r8
 80120e8:	464b      	mov	r3, r9
 80120ea:	f7ee f8e5 	bl	80002b8 <__aeabi_dsub>
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4630      	mov	r0, r6
 80120f4:	4639      	mov	r1, r7
 80120f6:	e7d9      	b.n	80120ac <__kernel_cos+0xf4>
 80120f8:	2000      	movs	r0, #0
 80120fa:	490f      	ldr	r1, [pc, #60]	; (8012138 <__kernel_cos+0x180>)
 80120fc:	e7d8      	b.n	80120b0 <__kernel_cos+0xf8>
 80120fe:	bf00      	nop
 8012100:	be8838d4 	.word	0xbe8838d4
 8012104:	bda8fae9 	.word	0xbda8fae9
 8012108:	bdb4b1c4 	.word	0xbdb4b1c4
 801210c:	3e21ee9e 	.word	0x3e21ee9e
 8012110:	809c52ad 	.word	0x809c52ad
 8012114:	3e927e4f 	.word	0x3e927e4f
 8012118:	19cb1590 	.word	0x19cb1590
 801211c:	3efa01a0 	.word	0x3efa01a0
 8012120:	16c15177 	.word	0x16c15177
 8012124:	3f56c16c 	.word	0x3f56c16c
 8012128:	5555554c 	.word	0x5555554c
 801212c:	3fa55555 	.word	0x3fa55555
 8012130:	3fe00000 	.word	0x3fe00000
 8012134:	3fd33332 	.word	0x3fd33332
 8012138:	3ff00000 	.word	0x3ff00000
 801213c:	3fe90000 	.word	0x3fe90000
 8012140:	3fd20000 	.word	0x3fd20000
 8012144:	00000000 	.word	0x00000000

08012148 <__kernel_rem_pio2>:
 8012148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801214c:	ed2d 8b02 	vpush	{d8}
 8012150:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012154:	1ed4      	subs	r4, r2, #3
 8012156:	9308      	str	r3, [sp, #32]
 8012158:	9101      	str	r1, [sp, #4]
 801215a:	4bc5      	ldr	r3, [pc, #788]	; (8012470 <__kernel_rem_pio2+0x328>)
 801215c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801215e:	9009      	str	r0, [sp, #36]	; 0x24
 8012160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012164:	9304      	str	r3, [sp, #16]
 8012166:	9b08      	ldr	r3, [sp, #32]
 8012168:	3b01      	subs	r3, #1
 801216a:	9307      	str	r3, [sp, #28]
 801216c:	2318      	movs	r3, #24
 801216e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012172:	f06f 0317 	mvn.w	r3, #23
 8012176:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801217a:	fb04 3303 	mla	r3, r4, r3, r3
 801217e:	eb03 0a02 	add.w	sl, r3, r2
 8012182:	9b04      	ldr	r3, [sp, #16]
 8012184:	9a07      	ldr	r2, [sp, #28]
 8012186:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012460 <__kernel_rem_pio2+0x318>
 801218a:	eb03 0802 	add.w	r8, r3, r2
 801218e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012190:	1aa7      	subs	r7, r4, r2
 8012192:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012196:	ae22      	add	r6, sp, #136	; 0x88
 8012198:	2500      	movs	r5, #0
 801219a:	4545      	cmp	r5, r8
 801219c:	dd13      	ble.n	80121c6 <__kernel_rem_pio2+0x7e>
 801219e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012460 <__kernel_rem_pio2+0x318>
 80121a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80121a6:	2600      	movs	r6, #0
 80121a8:	9b04      	ldr	r3, [sp, #16]
 80121aa:	429e      	cmp	r6, r3
 80121ac:	dc32      	bgt.n	8012214 <__kernel_rem_pio2+0xcc>
 80121ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b0:	9302      	str	r3, [sp, #8]
 80121b2:	9b08      	ldr	r3, [sp, #32]
 80121b4:	199d      	adds	r5, r3, r6
 80121b6:	ab22      	add	r3, sp, #136	; 0x88
 80121b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121bc:	9306      	str	r3, [sp, #24]
 80121be:	ec59 8b18 	vmov	r8, r9, d8
 80121c2:	2700      	movs	r7, #0
 80121c4:	e01f      	b.n	8012206 <__kernel_rem_pio2+0xbe>
 80121c6:	42ef      	cmn	r7, r5
 80121c8:	d407      	bmi.n	80121da <__kernel_rem_pio2+0x92>
 80121ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80121ce:	f7ee f9c1 	bl	8000554 <__aeabi_i2d>
 80121d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121d6:	3501      	adds	r5, #1
 80121d8:	e7df      	b.n	801219a <__kernel_rem_pio2+0x52>
 80121da:	ec51 0b18 	vmov	r0, r1, d8
 80121de:	e7f8      	b.n	80121d2 <__kernel_rem_pio2+0x8a>
 80121e0:	9906      	ldr	r1, [sp, #24]
 80121e2:	9d02      	ldr	r5, [sp, #8]
 80121e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80121e8:	9106      	str	r1, [sp, #24]
 80121ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80121ee:	9502      	str	r5, [sp, #8]
 80121f0:	f7ee fa1a 	bl	8000628 <__aeabi_dmul>
 80121f4:	4602      	mov	r2, r0
 80121f6:	460b      	mov	r3, r1
 80121f8:	4640      	mov	r0, r8
 80121fa:	4649      	mov	r1, r9
 80121fc:	f7ee f85e 	bl	80002bc <__adddf3>
 8012200:	3701      	adds	r7, #1
 8012202:	4680      	mov	r8, r0
 8012204:	4689      	mov	r9, r1
 8012206:	9b07      	ldr	r3, [sp, #28]
 8012208:	429f      	cmp	r7, r3
 801220a:	dde9      	ble.n	80121e0 <__kernel_rem_pio2+0x98>
 801220c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012210:	3601      	adds	r6, #1
 8012212:	e7c9      	b.n	80121a8 <__kernel_rem_pio2+0x60>
 8012214:	9b04      	ldr	r3, [sp, #16]
 8012216:	aa0e      	add	r2, sp, #56	; 0x38
 8012218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801221c:	930c      	str	r3, [sp, #48]	; 0x30
 801221e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012220:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012224:	9c04      	ldr	r4, [sp, #16]
 8012226:	930b      	str	r3, [sp, #44]	; 0x2c
 8012228:	ab9a      	add	r3, sp, #616	; 0x268
 801222a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801222e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012232:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012236:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801223a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801223e:	ab9a      	add	r3, sp, #616	; 0x268
 8012240:	445b      	add	r3, fp
 8012242:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012246:	2500      	movs	r5, #0
 8012248:	1b63      	subs	r3, r4, r5
 801224a:	2b00      	cmp	r3, #0
 801224c:	dc78      	bgt.n	8012340 <__kernel_rem_pio2+0x1f8>
 801224e:	4650      	mov	r0, sl
 8012250:	ec49 8b10 	vmov	d0, r8, r9
 8012254:	f000 fc00 	bl	8012a58 <scalbn>
 8012258:	ec57 6b10 	vmov	r6, r7, d0
 801225c:	2200      	movs	r2, #0
 801225e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012262:	ee10 0a10 	vmov	r0, s0
 8012266:	4639      	mov	r1, r7
 8012268:	f7ee f9de 	bl	8000628 <__aeabi_dmul>
 801226c:	ec41 0b10 	vmov	d0, r0, r1
 8012270:	f000 fb6e 	bl	8012950 <floor>
 8012274:	2200      	movs	r2, #0
 8012276:	ec51 0b10 	vmov	r0, r1, d0
 801227a:	4b7e      	ldr	r3, [pc, #504]	; (8012474 <__kernel_rem_pio2+0x32c>)
 801227c:	f7ee f9d4 	bl	8000628 <__aeabi_dmul>
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	4630      	mov	r0, r6
 8012286:	4639      	mov	r1, r7
 8012288:	f7ee f816 	bl	80002b8 <__aeabi_dsub>
 801228c:	460f      	mov	r7, r1
 801228e:	4606      	mov	r6, r0
 8012290:	f7ee fc7a 	bl	8000b88 <__aeabi_d2iz>
 8012294:	9006      	str	r0, [sp, #24]
 8012296:	f7ee f95d 	bl	8000554 <__aeabi_i2d>
 801229a:	4602      	mov	r2, r0
 801229c:	460b      	mov	r3, r1
 801229e:	4630      	mov	r0, r6
 80122a0:	4639      	mov	r1, r7
 80122a2:	f7ee f809 	bl	80002b8 <__aeabi_dsub>
 80122a6:	f1ba 0f00 	cmp.w	sl, #0
 80122aa:	4606      	mov	r6, r0
 80122ac:	460f      	mov	r7, r1
 80122ae:	dd6c      	ble.n	801238a <__kernel_rem_pio2+0x242>
 80122b0:	1e62      	subs	r2, r4, #1
 80122b2:	ab0e      	add	r3, sp, #56	; 0x38
 80122b4:	f1ca 0118 	rsb	r1, sl, #24
 80122b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80122bc:	9d06      	ldr	r5, [sp, #24]
 80122be:	fa40 f301 	asr.w	r3, r0, r1
 80122c2:	441d      	add	r5, r3
 80122c4:	408b      	lsls	r3, r1
 80122c6:	1ac0      	subs	r0, r0, r3
 80122c8:	ab0e      	add	r3, sp, #56	; 0x38
 80122ca:	9506      	str	r5, [sp, #24]
 80122cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80122d0:	f1ca 0317 	rsb	r3, sl, #23
 80122d4:	fa40 f303 	asr.w	r3, r0, r3
 80122d8:	9302      	str	r3, [sp, #8]
 80122da:	9b02      	ldr	r3, [sp, #8]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	dd62      	ble.n	80123a6 <__kernel_rem_pio2+0x25e>
 80122e0:	9b06      	ldr	r3, [sp, #24]
 80122e2:	2200      	movs	r2, #0
 80122e4:	3301      	adds	r3, #1
 80122e6:	9306      	str	r3, [sp, #24]
 80122e8:	4615      	mov	r5, r2
 80122ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80122ee:	4294      	cmp	r4, r2
 80122f0:	f300 8095 	bgt.w	801241e <__kernel_rem_pio2+0x2d6>
 80122f4:	f1ba 0f00 	cmp.w	sl, #0
 80122f8:	dd07      	ble.n	801230a <__kernel_rem_pio2+0x1c2>
 80122fa:	f1ba 0f01 	cmp.w	sl, #1
 80122fe:	f000 80a2 	beq.w	8012446 <__kernel_rem_pio2+0x2fe>
 8012302:	f1ba 0f02 	cmp.w	sl, #2
 8012306:	f000 80c1 	beq.w	801248c <__kernel_rem_pio2+0x344>
 801230a:	9b02      	ldr	r3, [sp, #8]
 801230c:	2b02      	cmp	r3, #2
 801230e:	d14a      	bne.n	80123a6 <__kernel_rem_pio2+0x25e>
 8012310:	4632      	mov	r2, r6
 8012312:	463b      	mov	r3, r7
 8012314:	2000      	movs	r0, #0
 8012316:	4958      	ldr	r1, [pc, #352]	; (8012478 <__kernel_rem_pio2+0x330>)
 8012318:	f7ed ffce 	bl	80002b8 <__aeabi_dsub>
 801231c:	4606      	mov	r6, r0
 801231e:	460f      	mov	r7, r1
 8012320:	2d00      	cmp	r5, #0
 8012322:	d040      	beq.n	80123a6 <__kernel_rem_pio2+0x25e>
 8012324:	4650      	mov	r0, sl
 8012326:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012468 <__kernel_rem_pio2+0x320>
 801232a:	f000 fb95 	bl	8012a58 <scalbn>
 801232e:	4630      	mov	r0, r6
 8012330:	4639      	mov	r1, r7
 8012332:	ec53 2b10 	vmov	r2, r3, d0
 8012336:	f7ed ffbf 	bl	80002b8 <__aeabi_dsub>
 801233a:	4606      	mov	r6, r0
 801233c:	460f      	mov	r7, r1
 801233e:	e032      	b.n	80123a6 <__kernel_rem_pio2+0x25e>
 8012340:	2200      	movs	r2, #0
 8012342:	4b4e      	ldr	r3, [pc, #312]	; (801247c <__kernel_rem_pio2+0x334>)
 8012344:	4640      	mov	r0, r8
 8012346:	4649      	mov	r1, r9
 8012348:	f7ee f96e 	bl	8000628 <__aeabi_dmul>
 801234c:	f7ee fc1c 	bl	8000b88 <__aeabi_d2iz>
 8012350:	f7ee f900 	bl	8000554 <__aeabi_i2d>
 8012354:	2200      	movs	r2, #0
 8012356:	4b4a      	ldr	r3, [pc, #296]	; (8012480 <__kernel_rem_pio2+0x338>)
 8012358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801235c:	f7ee f964 	bl	8000628 <__aeabi_dmul>
 8012360:	4602      	mov	r2, r0
 8012362:	460b      	mov	r3, r1
 8012364:	4640      	mov	r0, r8
 8012366:	4649      	mov	r1, r9
 8012368:	f7ed ffa6 	bl	80002b8 <__aeabi_dsub>
 801236c:	f7ee fc0c 	bl	8000b88 <__aeabi_d2iz>
 8012370:	ab0e      	add	r3, sp, #56	; 0x38
 8012372:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012376:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801237a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801237e:	f7ed ff9d 	bl	80002bc <__adddf3>
 8012382:	3501      	adds	r5, #1
 8012384:	4680      	mov	r8, r0
 8012386:	4689      	mov	r9, r1
 8012388:	e75e      	b.n	8012248 <__kernel_rem_pio2+0x100>
 801238a:	d105      	bne.n	8012398 <__kernel_rem_pio2+0x250>
 801238c:	1e63      	subs	r3, r4, #1
 801238e:	aa0e      	add	r2, sp, #56	; 0x38
 8012390:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012394:	15c3      	asrs	r3, r0, #23
 8012396:	e79f      	b.n	80122d8 <__kernel_rem_pio2+0x190>
 8012398:	2200      	movs	r2, #0
 801239a:	4b3a      	ldr	r3, [pc, #232]	; (8012484 <__kernel_rem_pio2+0x33c>)
 801239c:	f7ee fbca 	bl	8000b34 <__aeabi_dcmpge>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d139      	bne.n	8012418 <__kernel_rem_pio2+0x2d0>
 80123a4:	9002      	str	r0, [sp, #8]
 80123a6:	2200      	movs	r2, #0
 80123a8:	2300      	movs	r3, #0
 80123aa:	4630      	mov	r0, r6
 80123ac:	4639      	mov	r1, r7
 80123ae:	f7ee fba3 	bl	8000af8 <__aeabi_dcmpeq>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	f000 80c7 	beq.w	8012546 <__kernel_rem_pio2+0x3fe>
 80123b8:	1e65      	subs	r5, r4, #1
 80123ba:	462b      	mov	r3, r5
 80123bc:	2200      	movs	r2, #0
 80123be:	9904      	ldr	r1, [sp, #16]
 80123c0:	428b      	cmp	r3, r1
 80123c2:	da6a      	bge.n	801249a <__kernel_rem_pio2+0x352>
 80123c4:	2a00      	cmp	r2, #0
 80123c6:	f000 8088 	beq.w	80124da <__kernel_rem_pio2+0x392>
 80123ca:	ab0e      	add	r3, sp, #56	; 0x38
 80123cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80123d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f000 80b4 	beq.w	8012542 <__kernel_rem_pio2+0x3fa>
 80123da:	4650      	mov	r0, sl
 80123dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012468 <__kernel_rem_pio2+0x320>
 80123e0:	f000 fb3a 	bl	8012a58 <scalbn>
 80123e4:	00ec      	lsls	r4, r5, #3
 80123e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80123e8:	191e      	adds	r6, r3, r4
 80123ea:	ec59 8b10 	vmov	r8, r9, d0
 80123ee:	f106 0a08 	add.w	sl, r6, #8
 80123f2:	462f      	mov	r7, r5
 80123f4:	2f00      	cmp	r7, #0
 80123f6:	f280 80df 	bge.w	80125b8 <__kernel_rem_pio2+0x470>
 80123fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012460 <__kernel_rem_pio2+0x318>
 80123fe:	f04f 0a00 	mov.w	sl, #0
 8012402:	eba5 030a 	sub.w	r3, r5, sl
 8012406:	2b00      	cmp	r3, #0
 8012408:	f2c0 810a 	blt.w	8012620 <__kernel_rem_pio2+0x4d8>
 801240c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012488 <__kernel_rem_pio2+0x340>
 8012410:	ec59 8b18 	vmov	r8, r9, d8
 8012414:	2700      	movs	r7, #0
 8012416:	e0f5      	b.n	8012604 <__kernel_rem_pio2+0x4bc>
 8012418:	2302      	movs	r3, #2
 801241a:	9302      	str	r3, [sp, #8]
 801241c:	e760      	b.n	80122e0 <__kernel_rem_pio2+0x198>
 801241e:	ab0e      	add	r3, sp, #56	; 0x38
 8012420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012424:	b94d      	cbnz	r5, 801243a <__kernel_rem_pio2+0x2f2>
 8012426:	b12b      	cbz	r3, 8012434 <__kernel_rem_pio2+0x2ec>
 8012428:	a80e      	add	r0, sp, #56	; 0x38
 801242a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801242e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012432:	2301      	movs	r3, #1
 8012434:	3201      	adds	r2, #1
 8012436:	461d      	mov	r5, r3
 8012438:	e759      	b.n	80122ee <__kernel_rem_pio2+0x1a6>
 801243a:	a80e      	add	r0, sp, #56	; 0x38
 801243c:	1acb      	subs	r3, r1, r3
 801243e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012442:	462b      	mov	r3, r5
 8012444:	e7f6      	b.n	8012434 <__kernel_rem_pio2+0x2ec>
 8012446:	1e62      	subs	r2, r4, #1
 8012448:	ab0e      	add	r3, sp, #56	; 0x38
 801244a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801244e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012452:	a90e      	add	r1, sp, #56	; 0x38
 8012454:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012458:	e757      	b.n	801230a <__kernel_rem_pio2+0x1c2>
 801245a:	bf00      	nop
 801245c:	f3af 8000 	nop.w
	...
 801246c:	3ff00000 	.word	0x3ff00000
 8012470:	080181b8 	.word	0x080181b8
 8012474:	40200000 	.word	0x40200000
 8012478:	3ff00000 	.word	0x3ff00000
 801247c:	3e700000 	.word	0x3e700000
 8012480:	41700000 	.word	0x41700000
 8012484:	3fe00000 	.word	0x3fe00000
 8012488:	08018178 	.word	0x08018178
 801248c:	1e62      	subs	r2, r4, #1
 801248e:	ab0e      	add	r3, sp, #56	; 0x38
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012498:	e7db      	b.n	8012452 <__kernel_rem_pio2+0x30a>
 801249a:	a90e      	add	r1, sp, #56	; 0x38
 801249c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80124a0:	3b01      	subs	r3, #1
 80124a2:	430a      	orrs	r2, r1
 80124a4:	e78b      	b.n	80123be <__kernel_rem_pio2+0x276>
 80124a6:	3301      	adds	r3, #1
 80124a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80124ac:	2900      	cmp	r1, #0
 80124ae:	d0fa      	beq.n	80124a6 <__kernel_rem_pio2+0x35e>
 80124b0:	9a08      	ldr	r2, [sp, #32]
 80124b2:	4422      	add	r2, r4
 80124b4:	00d2      	lsls	r2, r2, #3
 80124b6:	a922      	add	r1, sp, #136	; 0x88
 80124b8:	18e3      	adds	r3, r4, r3
 80124ba:	9206      	str	r2, [sp, #24]
 80124bc:	440a      	add	r2, r1
 80124be:	9302      	str	r3, [sp, #8]
 80124c0:	f10b 0108 	add.w	r1, fp, #8
 80124c4:	f102 0308 	add.w	r3, r2, #8
 80124c8:	1c66      	adds	r6, r4, #1
 80124ca:	910a      	str	r1, [sp, #40]	; 0x28
 80124cc:	2500      	movs	r5, #0
 80124ce:	930d      	str	r3, [sp, #52]	; 0x34
 80124d0:	9b02      	ldr	r3, [sp, #8]
 80124d2:	42b3      	cmp	r3, r6
 80124d4:	da04      	bge.n	80124e0 <__kernel_rem_pio2+0x398>
 80124d6:	461c      	mov	r4, r3
 80124d8:	e6a6      	b.n	8012228 <__kernel_rem_pio2+0xe0>
 80124da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124dc:	2301      	movs	r3, #1
 80124de:	e7e3      	b.n	80124a8 <__kernel_rem_pio2+0x360>
 80124e0:	9b06      	ldr	r3, [sp, #24]
 80124e2:	18ef      	adds	r7, r5, r3
 80124e4:	ab22      	add	r3, sp, #136	; 0x88
 80124e6:	441f      	add	r7, r3
 80124e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80124ee:	f7ee f831 	bl	8000554 <__aeabi_i2d>
 80124f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f4:	461c      	mov	r4, r3
 80124f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124f8:	e9c7 0100 	strd	r0, r1, [r7]
 80124fc:	eb03 0b05 	add.w	fp, r3, r5
 8012500:	2700      	movs	r7, #0
 8012502:	f04f 0800 	mov.w	r8, #0
 8012506:	f04f 0900 	mov.w	r9, #0
 801250a:	9b07      	ldr	r3, [sp, #28]
 801250c:	429f      	cmp	r7, r3
 801250e:	dd08      	ble.n	8012522 <__kernel_rem_pio2+0x3da>
 8012510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012512:	aa72      	add	r2, sp, #456	; 0x1c8
 8012514:	18eb      	adds	r3, r5, r3
 8012516:	4413      	add	r3, r2
 8012518:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801251c:	3601      	adds	r6, #1
 801251e:	3508      	adds	r5, #8
 8012520:	e7d6      	b.n	80124d0 <__kernel_rem_pio2+0x388>
 8012522:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012526:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801252a:	f7ee f87d 	bl	8000628 <__aeabi_dmul>
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	4640      	mov	r0, r8
 8012534:	4649      	mov	r1, r9
 8012536:	f7ed fec1 	bl	80002bc <__adddf3>
 801253a:	3701      	adds	r7, #1
 801253c:	4680      	mov	r8, r0
 801253e:	4689      	mov	r9, r1
 8012540:	e7e3      	b.n	801250a <__kernel_rem_pio2+0x3c2>
 8012542:	3d01      	subs	r5, #1
 8012544:	e741      	b.n	80123ca <__kernel_rem_pio2+0x282>
 8012546:	f1ca 0000 	rsb	r0, sl, #0
 801254a:	ec47 6b10 	vmov	d0, r6, r7
 801254e:	f000 fa83 	bl	8012a58 <scalbn>
 8012552:	ec57 6b10 	vmov	r6, r7, d0
 8012556:	2200      	movs	r2, #0
 8012558:	4b99      	ldr	r3, [pc, #612]	; (80127c0 <__kernel_rem_pio2+0x678>)
 801255a:	ee10 0a10 	vmov	r0, s0
 801255e:	4639      	mov	r1, r7
 8012560:	f7ee fae8 	bl	8000b34 <__aeabi_dcmpge>
 8012564:	b1f8      	cbz	r0, 80125a6 <__kernel_rem_pio2+0x45e>
 8012566:	2200      	movs	r2, #0
 8012568:	4b96      	ldr	r3, [pc, #600]	; (80127c4 <__kernel_rem_pio2+0x67c>)
 801256a:	4630      	mov	r0, r6
 801256c:	4639      	mov	r1, r7
 801256e:	f7ee f85b 	bl	8000628 <__aeabi_dmul>
 8012572:	f7ee fb09 	bl	8000b88 <__aeabi_d2iz>
 8012576:	4680      	mov	r8, r0
 8012578:	f7ed ffec 	bl	8000554 <__aeabi_i2d>
 801257c:	2200      	movs	r2, #0
 801257e:	4b90      	ldr	r3, [pc, #576]	; (80127c0 <__kernel_rem_pio2+0x678>)
 8012580:	f7ee f852 	bl	8000628 <__aeabi_dmul>
 8012584:	460b      	mov	r3, r1
 8012586:	4602      	mov	r2, r0
 8012588:	4639      	mov	r1, r7
 801258a:	4630      	mov	r0, r6
 801258c:	f7ed fe94 	bl	80002b8 <__aeabi_dsub>
 8012590:	f7ee fafa 	bl	8000b88 <__aeabi_d2iz>
 8012594:	1c65      	adds	r5, r4, #1
 8012596:	ab0e      	add	r3, sp, #56	; 0x38
 8012598:	f10a 0a18 	add.w	sl, sl, #24
 801259c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80125a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80125a4:	e719      	b.n	80123da <__kernel_rem_pio2+0x292>
 80125a6:	4630      	mov	r0, r6
 80125a8:	4639      	mov	r1, r7
 80125aa:	f7ee faed 	bl	8000b88 <__aeabi_d2iz>
 80125ae:	ab0e      	add	r3, sp, #56	; 0x38
 80125b0:	4625      	mov	r5, r4
 80125b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80125b6:	e710      	b.n	80123da <__kernel_rem_pio2+0x292>
 80125b8:	ab0e      	add	r3, sp, #56	; 0x38
 80125ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80125be:	f7ed ffc9 	bl	8000554 <__aeabi_i2d>
 80125c2:	4642      	mov	r2, r8
 80125c4:	464b      	mov	r3, r9
 80125c6:	f7ee f82f 	bl	8000628 <__aeabi_dmul>
 80125ca:	2200      	movs	r2, #0
 80125cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80125d0:	4b7c      	ldr	r3, [pc, #496]	; (80127c4 <__kernel_rem_pio2+0x67c>)
 80125d2:	4640      	mov	r0, r8
 80125d4:	4649      	mov	r1, r9
 80125d6:	f7ee f827 	bl	8000628 <__aeabi_dmul>
 80125da:	3f01      	subs	r7, #1
 80125dc:	4680      	mov	r8, r0
 80125de:	4689      	mov	r9, r1
 80125e0:	e708      	b.n	80123f4 <__kernel_rem_pio2+0x2ac>
 80125e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80125ee:	f7ee f81b 	bl	8000628 <__aeabi_dmul>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	4640      	mov	r0, r8
 80125f8:	4649      	mov	r1, r9
 80125fa:	f7ed fe5f 	bl	80002bc <__adddf3>
 80125fe:	3701      	adds	r7, #1
 8012600:	4680      	mov	r8, r0
 8012602:	4689      	mov	r9, r1
 8012604:	9b04      	ldr	r3, [sp, #16]
 8012606:	429f      	cmp	r7, r3
 8012608:	dc01      	bgt.n	801260e <__kernel_rem_pio2+0x4c6>
 801260a:	45ba      	cmp	sl, r7
 801260c:	dae9      	bge.n	80125e2 <__kernel_rem_pio2+0x49a>
 801260e:	ab4a      	add	r3, sp, #296	; 0x128
 8012610:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012614:	e9c3 8900 	strd	r8, r9, [r3]
 8012618:	f10a 0a01 	add.w	sl, sl, #1
 801261c:	3e08      	subs	r6, #8
 801261e:	e6f0      	b.n	8012402 <__kernel_rem_pio2+0x2ba>
 8012620:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012622:	2b03      	cmp	r3, #3
 8012624:	d85b      	bhi.n	80126de <__kernel_rem_pio2+0x596>
 8012626:	e8df f003 	tbb	[pc, r3]
 801262a:	264a      	.short	0x264a
 801262c:	0226      	.short	0x0226
 801262e:	ab9a      	add	r3, sp, #616	; 0x268
 8012630:	441c      	add	r4, r3
 8012632:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012636:	46a2      	mov	sl, r4
 8012638:	46ab      	mov	fp, r5
 801263a:	f1bb 0f00 	cmp.w	fp, #0
 801263e:	dc6c      	bgt.n	801271a <__kernel_rem_pio2+0x5d2>
 8012640:	46a2      	mov	sl, r4
 8012642:	46ab      	mov	fp, r5
 8012644:	f1bb 0f01 	cmp.w	fp, #1
 8012648:	f300 8086 	bgt.w	8012758 <__kernel_rem_pio2+0x610>
 801264c:	2000      	movs	r0, #0
 801264e:	2100      	movs	r1, #0
 8012650:	2d01      	cmp	r5, #1
 8012652:	f300 80a0 	bgt.w	8012796 <__kernel_rem_pio2+0x64e>
 8012656:	9b02      	ldr	r3, [sp, #8]
 8012658:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801265c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012660:	2b00      	cmp	r3, #0
 8012662:	f040 809e 	bne.w	80127a2 <__kernel_rem_pio2+0x65a>
 8012666:	9b01      	ldr	r3, [sp, #4]
 8012668:	e9c3 7800 	strd	r7, r8, [r3]
 801266c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012670:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012674:	e033      	b.n	80126de <__kernel_rem_pio2+0x596>
 8012676:	3408      	adds	r4, #8
 8012678:	ab4a      	add	r3, sp, #296	; 0x128
 801267a:	441c      	add	r4, r3
 801267c:	462e      	mov	r6, r5
 801267e:	2000      	movs	r0, #0
 8012680:	2100      	movs	r1, #0
 8012682:	2e00      	cmp	r6, #0
 8012684:	da3a      	bge.n	80126fc <__kernel_rem_pio2+0x5b4>
 8012686:	9b02      	ldr	r3, [sp, #8]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d03d      	beq.n	8012708 <__kernel_rem_pio2+0x5c0>
 801268c:	4602      	mov	r2, r0
 801268e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012692:	9c01      	ldr	r4, [sp, #4]
 8012694:	e9c4 2300 	strd	r2, r3, [r4]
 8012698:	4602      	mov	r2, r0
 801269a:	460b      	mov	r3, r1
 801269c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80126a0:	f7ed fe0a 	bl	80002b8 <__aeabi_dsub>
 80126a4:	ae4c      	add	r6, sp, #304	; 0x130
 80126a6:	2401      	movs	r4, #1
 80126a8:	42a5      	cmp	r5, r4
 80126aa:	da30      	bge.n	801270e <__kernel_rem_pio2+0x5c6>
 80126ac:	9b02      	ldr	r3, [sp, #8]
 80126ae:	b113      	cbz	r3, 80126b6 <__kernel_rem_pio2+0x56e>
 80126b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126b4:	4619      	mov	r1, r3
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80126bc:	e00f      	b.n	80126de <__kernel_rem_pio2+0x596>
 80126be:	ab9a      	add	r3, sp, #616	; 0x268
 80126c0:	441c      	add	r4, r3
 80126c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80126c6:	2000      	movs	r0, #0
 80126c8:	2100      	movs	r1, #0
 80126ca:	2d00      	cmp	r5, #0
 80126cc:	da10      	bge.n	80126f0 <__kernel_rem_pio2+0x5a8>
 80126ce:	9b02      	ldr	r3, [sp, #8]
 80126d0:	b113      	cbz	r3, 80126d8 <__kernel_rem_pio2+0x590>
 80126d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126d6:	4619      	mov	r1, r3
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	e9c3 0100 	strd	r0, r1, [r3]
 80126de:	9b06      	ldr	r3, [sp, #24]
 80126e0:	f003 0007 	and.w	r0, r3, #7
 80126e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80126e8:	ecbd 8b02 	vpop	{d8}
 80126ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126f4:	f7ed fde2 	bl	80002bc <__adddf3>
 80126f8:	3d01      	subs	r5, #1
 80126fa:	e7e6      	b.n	80126ca <__kernel_rem_pio2+0x582>
 80126fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012700:	f7ed fddc 	bl	80002bc <__adddf3>
 8012704:	3e01      	subs	r6, #1
 8012706:	e7bc      	b.n	8012682 <__kernel_rem_pio2+0x53a>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	e7c1      	b.n	8012692 <__kernel_rem_pio2+0x54a>
 801270e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012712:	f7ed fdd3 	bl	80002bc <__adddf3>
 8012716:	3401      	adds	r4, #1
 8012718:	e7c6      	b.n	80126a8 <__kernel_rem_pio2+0x560>
 801271a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801271e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012722:	4640      	mov	r0, r8
 8012724:	ec53 2b17 	vmov	r2, r3, d7
 8012728:	4649      	mov	r1, r9
 801272a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801272e:	f7ed fdc5 	bl	80002bc <__adddf3>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	4606      	mov	r6, r0
 8012738:	460f      	mov	r7, r1
 801273a:	4640      	mov	r0, r8
 801273c:	4649      	mov	r1, r9
 801273e:	f7ed fdbb 	bl	80002b8 <__aeabi_dsub>
 8012742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012746:	f7ed fdb9 	bl	80002bc <__adddf3>
 801274a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801274e:	e9ca 0100 	strd	r0, r1, [sl]
 8012752:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012756:	e770      	b.n	801263a <__kernel_rem_pio2+0x4f2>
 8012758:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801275c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012760:	4630      	mov	r0, r6
 8012762:	ec53 2b17 	vmov	r2, r3, d7
 8012766:	4639      	mov	r1, r7
 8012768:	ed8d 7b04 	vstr	d7, [sp, #16]
 801276c:	f7ed fda6 	bl	80002bc <__adddf3>
 8012770:	4602      	mov	r2, r0
 8012772:	460b      	mov	r3, r1
 8012774:	4680      	mov	r8, r0
 8012776:	4689      	mov	r9, r1
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ed fd9c 	bl	80002b8 <__aeabi_dsub>
 8012780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012784:	f7ed fd9a 	bl	80002bc <__adddf3>
 8012788:	f10b 3bff 	add.w	fp, fp, #4294967295
 801278c:	e9ca 0100 	strd	r0, r1, [sl]
 8012790:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012794:	e756      	b.n	8012644 <__kernel_rem_pio2+0x4fc>
 8012796:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801279a:	f7ed fd8f 	bl	80002bc <__adddf3>
 801279e:	3d01      	subs	r5, #1
 80127a0:	e756      	b.n	8012650 <__kernel_rem_pio2+0x508>
 80127a2:	9b01      	ldr	r3, [sp, #4]
 80127a4:	9a01      	ldr	r2, [sp, #4]
 80127a6:	601f      	str	r7, [r3, #0]
 80127a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80127ac:	605c      	str	r4, [r3, #4]
 80127ae:	609d      	str	r5, [r3, #8]
 80127b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80127b4:	60d3      	str	r3, [r2, #12]
 80127b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127ba:	6110      	str	r0, [r2, #16]
 80127bc:	6153      	str	r3, [r2, #20]
 80127be:	e78e      	b.n	80126de <__kernel_rem_pio2+0x596>
 80127c0:	41700000 	.word	0x41700000
 80127c4:	3e700000 	.word	0x3e700000

080127c8 <__kernel_sin>:
 80127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127cc:	ec55 4b10 	vmov	r4, r5, d0
 80127d0:	b085      	sub	sp, #20
 80127d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80127d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80127da:	ed8d 1b00 	vstr	d1, [sp]
 80127de:	9002      	str	r0, [sp, #8]
 80127e0:	da06      	bge.n	80127f0 <__kernel_sin+0x28>
 80127e2:	ee10 0a10 	vmov	r0, s0
 80127e6:	4629      	mov	r1, r5
 80127e8:	f7ee f9ce 	bl	8000b88 <__aeabi_d2iz>
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d051      	beq.n	8012894 <__kernel_sin+0xcc>
 80127f0:	4622      	mov	r2, r4
 80127f2:	462b      	mov	r3, r5
 80127f4:	4620      	mov	r0, r4
 80127f6:	4629      	mov	r1, r5
 80127f8:	f7ed ff16 	bl	8000628 <__aeabi_dmul>
 80127fc:	4682      	mov	sl, r0
 80127fe:	468b      	mov	fp, r1
 8012800:	4602      	mov	r2, r0
 8012802:	460b      	mov	r3, r1
 8012804:	4620      	mov	r0, r4
 8012806:	4629      	mov	r1, r5
 8012808:	f7ed ff0e 	bl	8000628 <__aeabi_dmul>
 801280c:	a341      	add	r3, pc, #260	; (adr r3, 8012914 <__kernel_sin+0x14c>)
 801280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012812:	4680      	mov	r8, r0
 8012814:	4689      	mov	r9, r1
 8012816:	4650      	mov	r0, sl
 8012818:	4659      	mov	r1, fp
 801281a:	f7ed ff05 	bl	8000628 <__aeabi_dmul>
 801281e:	a33f      	add	r3, pc, #252	; (adr r3, 801291c <__kernel_sin+0x154>)
 8012820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012824:	f7ed fd48 	bl	80002b8 <__aeabi_dsub>
 8012828:	4652      	mov	r2, sl
 801282a:	465b      	mov	r3, fp
 801282c:	f7ed fefc 	bl	8000628 <__aeabi_dmul>
 8012830:	a33c      	add	r3, pc, #240	; (adr r3, 8012924 <__kernel_sin+0x15c>)
 8012832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012836:	f7ed fd41 	bl	80002bc <__adddf3>
 801283a:	4652      	mov	r2, sl
 801283c:	465b      	mov	r3, fp
 801283e:	f7ed fef3 	bl	8000628 <__aeabi_dmul>
 8012842:	a33a      	add	r3, pc, #232	; (adr r3, 801292c <__kernel_sin+0x164>)
 8012844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012848:	f7ed fd36 	bl	80002b8 <__aeabi_dsub>
 801284c:	4652      	mov	r2, sl
 801284e:	465b      	mov	r3, fp
 8012850:	f7ed feea 	bl	8000628 <__aeabi_dmul>
 8012854:	a337      	add	r3, pc, #220	; (adr r3, 8012934 <__kernel_sin+0x16c>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	f7ed fd2f 	bl	80002bc <__adddf3>
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	4606      	mov	r6, r0
 8012862:	460f      	mov	r7, r1
 8012864:	b9db      	cbnz	r3, 801289e <__kernel_sin+0xd6>
 8012866:	4602      	mov	r2, r0
 8012868:	460b      	mov	r3, r1
 801286a:	4650      	mov	r0, sl
 801286c:	4659      	mov	r1, fp
 801286e:	f7ed fedb 	bl	8000628 <__aeabi_dmul>
 8012872:	a325      	add	r3, pc, #148	; (adr r3, 8012908 <__kernel_sin+0x140>)
 8012874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012878:	f7ed fd1e 	bl	80002b8 <__aeabi_dsub>
 801287c:	4642      	mov	r2, r8
 801287e:	464b      	mov	r3, r9
 8012880:	f7ed fed2 	bl	8000628 <__aeabi_dmul>
 8012884:	4602      	mov	r2, r0
 8012886:	460b      	mov	r3, r1
 8012888:	4620      	mov	r0, r4
 801288a:	4629      	mov	r1, r5
 801288c:	f7ed fd16 	bl	80002bc <__adddf3>
 8012890:	4604      	mov	r4, r0
 8012892:	460d      	mov	r5, r1
 8012894:	ec45 4b10 	vmov	d0, r4, r5
 8012898:	b005      	add	sp, #20
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289e:	2200      	movs	r2, #0
 80128a0:	4b1b      	ldr	r3, [pc, #108]	; (8012910 <__kernel_sin+0x148>)
 80128a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128a6:	f7ed febf 	bl	8000628 <__aeabi_dmul>
 80128aa:	4632      	mov	r2, r6
 80128ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128b0:	463b      	mov	r3, r7
 80128b2:	4640      	mov	r0, r8
 80128b4:	4649      	mov	r1, r9
 80128b6:	f7ed feb7 	bl	8000628 <__aeabi_dmul>
 80128ba:	4602      	mov	r2, r0
 80128bc:	460b      	mov	r3, r1
 80128be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128c2:	f7ed fcf9 	bl	80002b8 <__aeabi_dsub>
 80128c6:	4652      	mov	r2, sl
 80128c8:	465b      	mov	r3, fp
 80128ca:	f7ed fead 	bl	8000628 <__aeabi_dmul>
 80128ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128d2:	f7ed fcf1 	bl	80002b8 <__aeabi_dsub>
 80128d6:	a30c      	add	r3, pc, #48	; (adr r3, 8012908 <__kernel_sin+0x140>)
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	4606      	mov	r6, r0
 80128de:	460f      	mov	r7, r1
 80128e0:	4640      	mov	r0, r8
 80128e2:	4649      	mov	r1, r9
 80128e4:	f7ed fea0 	bl	8000628 <__aeabi_dmul>
 80128e8:	4602      	mov	r2, r0
 80128ea:	460b      	mov	r3, r1
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ed fce4 	bl	80002bc <__adddf3>
 80128f4:	4602      	mov	r2, r0
 80128f6:	460b      	mov	r3, r1
 80128f8:	4620      	mov	r0, r4
 80128fa:	4629      	mov	r1, r5
 80128fc:	f7ed fcdc 	bl	80002b8 <__aeabi_dsub>
 8012900:	e7c6      	b.n	8012890 <__kernel_sin+0xc8>
 8012902:	bf00      	nop
 8012904:	f3af 8000 	nop.w
 8012908:	55555549 	.word	0x55555549
 801290c:	3fc55555 	.word	0x3fc55555
 8012910:	3fe00000 	.word	0x3fe00000
 8012914:	5acfd57c 	.word	0x5acfd57c
 8012918:	3de5d93a 	.word	0x3de5d93a
 801291c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012920:	3e5ae5e6 	.word	0x3e5ae5e6
 8012924:	57b1fe7d 	.word	0x57b1fe7d
 8012928:	3ec71de3 	.word	0x3ec71de3
 801292c:	19c161d5 	.word	0x19c161d5
 8012930:	3f2a01a0 	.word	0x3f2a01a0
 8012934:	1110f8a6 	.word	0x1110f8a6
 8012938:	3f811111 	.word	0x3f811111

0801293c <fabs>:
 801293c:	ec51 0b10 	vmov	r0, r1, d0
 8012940:	ee10 2a10 	vmov	r2, s0
 8012944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012948:	ec43 2b10 	vmov	d0, r2, r3
 801294c:	4770      	bx	lr
	...

08012950 <floor>:
 8012950:	ec51 0b10 	vmov	r0, r1, d0
 8012954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012958:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801295c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012960:	2e13      	cmp	r6, #19
 8012962:	460c      	mov	r4, r1
 8012964:	ee10 5a10 	vmov	r5, s0
 8012968:	4680      	mov	r8, r0
 801296a:	dc34      	bgt.n	80129d6 <floor+0x86>
 801296c:	2e00      	cmp	r6, #0
 801296e:	da16      	bge.n	801299e <floor+0x4e>
 8012970:	a335      	add	r3, pc, #212	; (adr r3, 8012a48 <floor+0xf8>)
 8012972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012976:	f7ed fca1 	bl	80002bc <__adddf3>
 801297a:	2200      	movs	r2, #0
 801297c:	2300      	movs	r3, #0
 801297e:	f7ee f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 8012982:	b148      	cbz	r0, 8012998 <floor+0x48>
 8012984:	2c00      	cmp	r4, #0
 8012986:	da59      	bge.n	8012a3c <floor+0xec>
 8012988:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801298c:	4a30      	ldr	r2, [pc, #192]	; (8012a50 <floor+0x100>)
 801298e:	432b      	orrs	r3, r5
 8012990:	2500      	movs	r5, #0
 8012992:	42ab      	cmp	r3, r5
 8012994:	bf18      	it	ne
 8012996:	4614      	movne	r4, r2
 8012998:	4621      	mov	r1, r4
 801299a:	4628      	mov	r0, r5
 801299c:	e025      	b.n	80129ea <floor+0x9a>
 801299e:	4f2d      	ldr	r7, [pc, #180]	; (8012a54 <floor+0x104>)
 80129a0:	4137      	asrs	r7, r6
 80129a2:	ea01 0307 	and.w	r3, r1, r7
 80129a6:	4303      	orrs	r3, r0
 80129a8:	d01f      	beq.n	80129ea <floor+0x9a>
 80129aa:	a327      	add	r3, pc, #156	; (adr r3, 8012a48 <floor+0xf8>)
 80129ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b0:	f7ed fc84 	bl	80002bc <__adddf3>
 80129b4:	2200      	movs	r2, #0
 80129b6:	2300      	movs	r3, #0
 80129b8:	f7ee f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 80129bc:	2800      	cmp	r0, #0
 80129be:	d0eb      	beq.n	8012998 <floor+0x48>
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	bfbe      	ittt	lt
 80129c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80129cc:	19a4      	addlt	r4, r4, r6
 80129ce:	ea24 0407 	bic.w	r4, r4, r7
 80129d2:	2500      	movs	r5, #0
 80129d4:	e7e0      	b.n	8012998 <floor+0x48>
 80129d6:	2e33      	cmp	r6, #51	; 0x33
 80129d8:	dd0b      	ble.n	80129f2 <floor+0xa2>
 80129da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80129de:	d104      	bne.n	80129ea <floor+0x9a>
 80129e0:	ee10 2a10 	vmov	r2, s0
 80129e4:	460b      	mov	r3, r1
 80129e6:	f7ed fc69 	bl	80002bc <__adddf3>
 80129ea:	ec41 0b10 	vmov	d0, r0, r1
 80129ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80129f6:	f04f 33ff 	mov.w	r3, #4294967295
 80129fa:	fa23 f707 	lsr.w	r7, r3, r7
 80129fe:	4207      	tst	r7, r0
 8012a00:	d0f3      	beq.n	80129ea <floor+0x9a>
 8012a02:	a311      	add	r3, pc, #68	; (adr r3, 8012a48 <floor+0xf8>)
 8012a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a08:	f7ed fc58 	bl	80002bc <__adddf3>
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	2300      	movs	r3, #0
 8012a10:	f7ee f89a 	bl	8000b48 <__aeabi_dcmpgt>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d0bf      	beq.n	8012998 <floor+0x48>
 8012a18:	2c00      	cmp	r4, #0
 8012a1a:	da02      	bge.n	8012a22 <floor+0xd2>
 8012a1c:	2e14      	cmp	r6, #20
 8012a1e:	d103      	bne.n	8012a28 <floor+0xd8>
 8012a20:	3401      	adds	r4, #1
 8012a22:	ea25 0507 	bic.w	r5, r5, r7
 8012a26:	e7b7      	b.n	8012998 <floor+0x48>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a2e:	fa03 f606 	lsl.w	r6, r3, r6
 8012a32:	4435      	add	r5, r6
 8012a34:	4545      	cmp	r5, r8
 8012a36:	bf38      	it	cc
 8012a38:	18e4      	addcc	r4, r4, r3
 8012a3a:	e7f2      	b.n	8012a22 <floor+0xd2>
 8012a3c:	2500      	movs	r5, #0
 8012a3e:	462c      	mov	r4, r5
 8012a40:	e7aa      	b.n	8012998 <floor+0x48>
 8012a42:	bf00      	nop
 8012a44:	f3af 8000 	nop.w
 8012a48:	8800759c 	.word	0x8800759c
 8012a4c:	7e37e43c 	.word	0x7e37e43c
 8012a50:	bff00000 	.word	0xbff00000
 8012a54:	000fffff 	.word	0x000fffff

08012a58 <scalbn>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	ec55 4b10 	vmov	r4, r5, d0
 8012a5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a62:	4606      	mov	r6, r0
 8012a64:	462b      	mov	r3, r5
 8012a66:	b9aa      	cbnz	r2, 8012a94 <scalbn+0x3c>
 8012a68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a6c:	4323      	orrs	r3, r4
 8012a6e:	d03b      	beq.n	8012ae8 <scalbn+0x90>
 8012a70:	4b31      	ldr	r3, [pc, #196]	; (8012b38 <scalbn+0xe0>)
 8012a72:	4629      	mov	r1, r5
 8012a74:	2200      	movs	r2, #0
 8012a76:	ee10 0a10 	vmov	r0, s0
 8012a7a:	f7ed fdd5 	bl	8000628 <__aeabi_dmul>
 8012a7e:	4b2f      	ldr	r3, [pc, #188]	; (8012b3c <scalbn+0xe4>)
 8012a80:	429e      	cmp	r6, r3
 8012a82:	4604      	mov	r4, r0
 8012a84:	460d      	mov	r5, r1
 8012a86:	da12      	bge.n	8012aae <scalbn+0x56>
 8012a88:	a327      	add	r3, pc, #156	; (adr r3, 8012b28 <scalbn+0xd0>)
 8012a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8e:	f7ed fdcb 	bl	8000628 <__aeabi_dmul>
 8012a92:	e009      	b.n	8012aa8 <scalbn+0x50>
 8012a94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012a98:	428a      	cmp	r2, r1
 8012a9a:	d10c      	bne.n	8012ab6 <scalbn+0x5e>
 8012a9c:	ee10 2a10 	vmov	r2, s0
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	4629      	mov	r1, r5
 8012aa4:	f7ed fc0a 	bl	80002bc <__adddf3>
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	460d      	mov	r5, r1
 8012aac:	e01c      	b.n	8012ae8 <scalbn+0x90>
 8012aae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	3a36      	subs	r2, #54	; 0x36
 8012ab6:	4432      	add	r2, r6
 8012ab8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012abc:	428a      	cmp	r2, r1
 8012abe:	dd0b      	ble.n	8012ad8 <scalbn+0x80>
 8012ac0:	ec45 4b11 	vmov	d1, r4, r5
 8012ac4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012b30 <scalbn+0xd8>
 8012ac8:	f000 f83c 	bl	8012b44 <copysign>
 8012acc:	a318      	add	r3, pc, #96	; (adr r3, 8012b30 <scalbn+0xd8>)
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	ec51 0b10 	vmov	r0, r1, d0
 8012ad6:	e7da      	b.n	8012a8e <scalbn+0x36>
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	dd08      	ble.n	8012aee <scalbn+0x96>
 8012adc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ae0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ae8:	ec45 4b10 	vmov	d0, r4, r5
 8012aec:	bd70      	pop	{r4, r5, r6, pc}
 8012aee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012af2:	da0d      	bge.n	8012b10 <scalbn+0xb8>
 8012af4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012af8:	429e      	cmp	r6, r3
 8012afa:	ec45 4b11 	vmov	d1, r4, r5
 8012afe:	dce1      	bgt.n	8012ac4 <scalbn+0x6c>
 8012b00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b28 <scalbn+0xd0>
 8012b04:	f000 f81e 	bl	8012b44 <copysign>
 8012b08:	a307      	add	r3, pc, #28	; (adr r3, 8012b28 <scalbn+0xd0>)
 8012b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0e:	e7e0      	b.n	8012ad2 <scalbn+0x7a>
 8012b10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b14:	3236      	adds	r2, #54	; 0x36
 8012b16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b1e:	4620      	mov	r0, r4
 8012b20:	4629      	mov	r1, r5
 8012b22:	2200      	movs	r2, #0
 8012b24:	4b06      	ldr	r3, [pc, #24]	; (8012b40 <scalbn+0xe8>)
 8012b26:	e7b2      	b.n	8012a8e <scalbn+0x36>
 8012b28:	c2f8f359 	.word	0xc2f8f359
 8012b2c:	01a56e1f 	.word	0x01a56e1f
 8012b30:	8800759c 	.word	0x8800759c
 8012b34:	7e37e43c 	.word	0x7e37e43c
 8012b38:	43500000 	.word	0x43500000
 8012b3c:	ffff3cb0 	.word	0xffff3cb0
 8012b40:	3c900000 	.word	0x3c900000

08012b44 <copysign>:
 8012b44:	ec51 0b10 	vmov	r0, r1, d0
 8012b48:	ee11 0a90 	vmov	r0, s3
 8012b4c:	ee10 2a10 	vmov	r2, s0
 8012b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012b54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012b58:	ea41 0300 	orr.w	r3, r1, r0
 8012b5c:	ec43 2b10 	vmov	d0, r2, r3
 8012b60:	4770      	bx	lr
	...

08012b64 <__errno>:
 8012b64:	4b01      	ldr	r3, [pc, #4]	; (8012b6c <__errno+0x8>)
 8012b66:	6818      	ldr	r0, [r3, #0]
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	2000000c 	.word	0x2000000c

08012b70 <__libc_init_array>:
 8012b70:	b570      	push	{r4, r5, r6, lr}
 8012b72:	4e0d      	ldr	r6, [pc, #52]	; (8012ba8 <__libc_init_array+0x38>)
 8012b74:	4c0d      	ldr	r4, [pc, #52]	; (8012bac <__libc_init_array+0x3c>)
 8012b76:	1ba4      	subs	r4, r4, r6
 8012b78:	10a4      	asrs	r4, r4, #2
 8012b7a:	2500      	movs	r5, #0
 8012b7c:	42a5      	cmp	r5, r4
 8012b7e:	d109      	bne.n	8012b94 <__libc_init_array+0x24>
 8012b80:	4e0b      	ldr	r6, [pc, #44]	; (8012bb0 <__libc_init_array+0x40>)
 8012b82:	4c0c      	ldr	r4, [pc, #48]	; (8012bb4 <__libc_init_array+0x44>)
 8012b84:	f004 ff38 	bl	80179f8 <_init>
 8012b88:	1ba4      	subs	r4, r4, r6
 8012b8a:	10a4      	asrs	r4, r4, #2
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	42a5      	cmp	r5, r4
 8012b90:	d105      	bne.n	8012b9e <__libc_init_array+0x2e>
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b98:	4798      	blx	r3
 8012b9a:	3501      	adds	r5, #1
 8012b9c:	e7ee      	b.n	8012b7c <__libc_init_array+0xc>
 8012b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ba2:	4798      	blx	r3
 8012ba4:	3501      	adds	r5, #1
 8012ba6:	e7f2      	b.n	8012b8e <__libc_init_array+0x1e>
 8012ba8:	0801850c 	.word	0x0801850c
 8012bac:	0801850c 	.word	0x0801850c
 8012bb0:	0801850c 	.word	0x0801850c
 8012bb4:	08018514 	.word	0x08018514

08012bb8 <memcpy>:
 8012bb8:	b510      	push	{r4, lr}
 8012bba:	1e43      	subs	r3, r0, #1
 8012bbc:	440a      	add	r2, r1
 8012bbe:	4291      	cmp	r1, r2
 8012bc0:	d100      	bne.n	8012bc4 <memcpy+0xc>
 8012bc2:	bd10      	pop	{r4, pc}
 8012bc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bcc:	e7f7      	b.n	8012bbe <memcpy+0x6>

08012bce <memset>:
 8012bce:	4402      	add	r2, r0
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d100      	bne.n	8012bd8 <memset+0xa>
 8012bd6:	4770      	bx	lr
 8012bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8012bdc:	e7f9      	b.n	8012bd2 <memset+0x4>

08012bde <__cvt>:
 8012bde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012be2:	ec55 4b10 	vmov	r4, r5, d0
 8012be6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012be8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bec:	2d00      	cmp	r5, #0
 8012bee:	460e      	mov	r6, r1
 8012bf0:	4691      	mov	r9, r2
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	bfb8      	it	lt
 8012bf6:	4622      	movlt	r2, r4
 8012bf8:	462b      	mov	r3, r5
 8012bfa:	f027 0720 	bic.w	r7, r7, #32
 8012bfe:	bfbb      	ittet	lt
 8012c00:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012c04:	461d      	movlt	r5, r3
 8012c06:	2300      	movge	r3, #0
 8012c08:	232d      	movlt	r3, #45	; 0x2d
 8012c0a:	bfb8      	it	lt
 8012c0c:	4614      	movlt	r4, r2
 8012c0e:	2f46      	cmp	r7, #70	; 0x46
 8012c10:	700b      	strb	r3, [r1, #0]
 8012c12:	d004      	beq.n	8012c1e <__cvt+0x40>
 8012c14:	2f45      	cmp	r7, #69	; 0x45
 8012c16:	d100      	bne.n	8012c1a <__cvt+0x3c>
 8012c18:	3601      	adds	r6, #1
 8012c1a:	2102      	movs	r1, #2
 8012c1c:	e000      	b.n	8012c20 <__cvt+0x42>
 8012c1e:	2103      	movs	r1, #3
 8012c20:	ab03      	add	r3, sp, #12
 8012c22:	9301      	str	r3, [sp, #4]
 8012c24:	ab02      	add	r3, sp, #8
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	4632      	mov	r2, r6
 8012c2a:	4653      	mov	r3, sl
 8012c2c:	ec45 4b10 	vmov	d0, r4, r5
 8012c30:	f001 ffb2 	bl	8014b98 <_dtoa_r>
 8012c34:	2f47      	cmp	r7, #71	; 0x47
 8012c36:	4680      	mov	r8, r0
 8012c38:	d102      	bne.n	8012c40 <__cvt+0x62>
 8012c3a:	f019 0f01 	tst.w	r9, #1
 8012c3e:	d026      	beq.n	8012c8e <__cvt+0xb0>
 8012c40:	2f46      	cmp	r7, #70	; 0x46
 8012c42:	eb08 0906 	add.w	r9, r8, r6
 8012c46:	d111      	bne.n	8012c6c <__cvt+0x8e>
 8012c48:	f898 3000 	ldrb.w	r3, [r8]
 8012c4c:	2b30      	cmp	r3, #48	; 0x30
 8012c4e:	d10a      	bne.n	8012c66 <__cvt+0x88>
 8012c50:	2200      	movs	r2, #0
 8012c52:	2300      	movs	r3, #0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed ff4e 	bl	8000af8 <__aeabi_dcmpeq>
 8012c5c:	b918      	cbnz	r0, 8012c66 <__cvt+0x88>
 8012c5e:	f1c6 0601 	rsb	r6, r6, #1
 8012c62:	f8ca 6000 	str.w	r6, [sl]
 8012c66:	f8da 3000 	ldr.w	r3, [sl]
 8012c6a:	4499      	add	r9, r3
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	2300      	movs	r3, #0
 8012c70:	4620      	mov	r0, r4
 8012c72:	4629      	mov	r1, r5
 8012c74:	f7ed ff40 	bl	8000af8 <__aeabi_dcmpeq>
 8012c78:	b938      	cbnz	r0, 8012c8a <__cvt+0xac>
 8012c7a:	2230      	movs	r2, #48	; 0x30
 8012c7c:	9b03      	ldr	r3, [sp, #12]
 8012c7e:	454b      	cmp	r3, r9
 8012c80:	d205      	bcs.n	8012c8e <__cvt+0xb0>
 8012c82:	1c59      	adds	r1, r3, #1
 8012c84:	9103      	str	r1, [sp, #12]
 8012c86:	701a      	strb	r2, [r3, #0]
 8012c88:	e7f8      	b.n	8012c7c <__cvt+0x9e>
 8012c8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c92:	eba3 0308 	sub.w	r3, r3, r8
 8012c96:	4640      	mov	r0, r8
 8012c98:	6013      	str	r3, [r2, #0]
 8012c9a:	b004      	add	sp, #16
 8012c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012ca0 <__exponent>:
 8012ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ca2:	2900      	cmp	r1, #0
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	bfba      	itte	lt
 8012ca8:	4249      	neglt	r1, r1
 8012caa:	232d      	movlt	r3, #45	; 0x2d
 8012cac:	232b      	movge	r3, #43	; 0x2b
 8012cae:	2909      	cmp	r1, #9
 8012cb0:	f804 2b02 	strb.w	r2, [r4], #2
 8012cb4:	7043      	strb	r3, [r0, #1]
 8012cb6:	dd20      	ble.n	8012cfa <__exponent+0x5a>
 8012cb8:	f10d 0307 	add.w	r3, sp, #7
 8012cbc:	461f      	mov	r7, r3
 8012cbe:	260a      	movs	r6, #10
 8012cc0:	fb91 f5f6 	sdiv	r5, r1, r6
 8012cc4:	fb06 1115 	mls	r1, r6, r5, r1
 8012cc8:	3130      	adds	r1, #48	; 0x30
 8012cca:	2d09      	cmp	r5, #9
 8012ccc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012cd0:	f103 32ff 	add.w	r2, r3, #4294967295
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	dc09      	bgt.n	8012cec <__exponent+0x4c>
 8012cd8:	3130      	adds	r1, #48	; 0x30
 8012cda:	3b02      	subs	r3, #2
 8012cdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012ce0:	42bb      	cmp	r3, r7
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	d304      	bcc.n	8012cf0 <__exponent+0x50>
 8012ce6:	1a10      	subs	r0, r2, r0
 8012ce8:	b003      	add	sp, #12
 8012cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cec:	4613      	mov	r3, r2
 8012cee:	e7e7      	b.n	8012cc0 <__exponent+0x20>
 8012cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cf4:	f804 2b01 	strb.w	r2, [r4], #1
 8012cf8:	e7f2      	b.n	8012ce0 <__exponent+0x40>
 8012cfa:	2330      	movs	r3, #48	; 0x30
 8012cfc:	4419      	add	r1, r3
 8012cfe:	7083      	strb	r3, [r0, #2]
 8012d00:	1d02      	adds	r2, r0, #4
 8012d02:	70c1      	strb	r1, [r0, #3]
 8012d04:	e7ef      	b.n	8012ce6 <__exponent+0x46>
	...

08012d08 <_printf_float>:
 8012d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	b08d      	sub	sp, #52	; 0x34
 8012d0e:	460c      	mov	r4, r1
 8012d10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012d14:	4616      	mov	r6, r2
 8012d16:	461f      	mov	r7, r3
 8012d18:	4605      	mov	r5, r0
 8012d1a:	f003 f9a9 	bl	8016070 <_localeconv_r>
 8012d1e:	6803      	ldr	r3, [r0, #0]
 8012d20:	9304      	str	r3, [sp, #16]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ed fa6c 	bl	8000200 <strlen>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8012d30:	9005      	str	r0, [sp, #20]
 8012d32:	3307      	adds	r3, #7
 8012d34:	f023 0307 	bic.w	r3, r3, #7
 8012d38:	f103 0208 	add.w	r2, r3, #8
 8012d3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d40:	f8d4 b000 	ldr.w	fp, [r4]
 8012d44:	f8c8 2000 	str.w	r2, [r8]
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d58:	9307      	str	r3, [sp, #28]
 8012d5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d62:	4ba7      	ldr	r3, [pc, #668]	; (8013000 <_printf_float+0x2f8>)
 8012d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d68:	f7ed fef8 	bl	8000b5c <__aeabi_dcmpun>
 8012d6c:	bb70      	cbnz	r0, 8012dcc <_printf_float+0xc4>
 8012d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d72:	4ba3      	ldr	r3, [pc, #652]	; (8013000 <_printf_float+0x2f8>)
 8012d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d78:	f7ed fed2 	bl	8000b20 <__aeabi_dcmple>
 8012d7c:	bb30      	cbnz	r0, 8012dcc <_printf_float+0xc4>
 8012d7e:	2200      	movs	r2, #0
 8012d80:	2300      	movs	r3, #0
 8012d82:	4640      	mov	r0, r8
 8012d84:	4649      	mov	r1, r9
 8012d86:	f7ed fec1 	bl	8000b0c <__aeabi_dcmplt>
 8012d8a:	b110      	cbz	r0, 8012d92 <_printf_float+0x8a>
 8012d8c:	232d      	movs	r3, #45	; 0x2d
 8012d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d92:	4a9c      	ldr	r2, [pc, #624]	; (8013004 <_printf_float+0x2fc>)
 8012d94:	4b9c      	ldr	r3, [pc, #624]	; (8013008 <_printf_float+0x300>)
 8012d96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012d9a:	bf8c      	ite	hi
 8012d9c:	4690      	movhi	r8, r2
 8012d9e:	4698      	movls	r8, r3
 8012da0:	2303      	movs	r3, #3
 8012da2:	f02b 0204 	bic.w	r2, fp, #4
 8012da6:	6123      	str	r3, [r4, #16]
 8012da8:	6022      	str	r2, [r4, #0]
 8012daa:	f04f 0900 	mov.w	r9, #0
 8012dae:	9700      	str	r7, [sp, #0]
 8012db0:	4633      	mov	r3, r6
 8012db2:	aa0b      	add	r2, sp, #44	; 0x2c
 8012db4:	4621      	mov	r1, r4
 8012db6:	4628      	mov	r0, r5
 8012db8:	f000 f9e6 	bl	8013188 <_printf_common>
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	f040 808d 	bne.w	8012edc <_printf_float+0x1d4>
 8012dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc6:	b00d      	add	sp, #52	; 0x34
 8012dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dcc:	4642      	mov	r2, r8
 8012dce:	464b      	mov	r3, r9
 8012dd0:	4640      	mov	r0, r8
 8012dd2:	4649      	mov	r1, r9
 8012dd4:	f7ed fec2 	bl	8000b5c <__aeabi_dcmpun>
 8012dd8:	b110      	cbz	r0, 8012de0 <_printf_float+0xd8>
 8012dda:	4a8c      	ldr	r2, [pc, #560]	; (801300c <_printf_float+0x304>)
 8012ddc:	4b8c      	ldr	r3, [pc, #560]	; (8013010 <_printf_float+0x308>)
 8012dde:	e7da      	b.n	8012d96 <_printf_float+0x8e>
 8012de0:	6861      	ldr	r1, [r4, #4]
 8012de2:	1c4b      	adds	r3, r1, #1
 8012de4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012de8:	a80a      	add	r0, sp, #40	; 0x28
 8012dea:	d13e      	bne.n	8012e6a <_printf_float+0x162>
 8012dec:	2306      	movs	r3, #6
 8012dee:	6063      	str	r3, [r4, #4]
 8012df0:	2300      	movs	r3, #0
 8012df2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012df6:	ab09      	add	r3, sp, #36	; 0x24
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	ec49 8b10 	vmov	d0, r8, r9
 8012dfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e02:	6022      	str	r2, [r4, #0]
 8012e04:	f8cd a004 	str.w	sl, [sp, #4]
 8012e08:	6861      	ldr	r1, [r4, #4]
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	f7ff fee7 	bl	8012bde <__cvt>
 8012e10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012e14:	2b47      	cmp	r3, #71	; 0x47
 8012e16:	4680      	mov	r8, r0
 8012e18:	d109      	bne.n	8012e2e <_printf_float+0x126>
 8012e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e1c:	1cd8      	adds	r0, r3, #3
 8012e1e:	db02      	blt.n	8012e26 <_printf_float+0x11e>
 8012e20:	6862      	ldr	r2, [r4, #4]
 8012e22:	4293      	cmp	r3, r2
 8012e24:	dd47      	ble.n	8012eb6 <_printf_float+0x1ae>
 8012e26:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e2a:	fa5f fa8a 	uxtb.w	sl, sl
 8012e2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e34:	d824      	bhi.n	8012e80 <_printf_float+0x178>
 8012e36:	3901      	subs	r1, #1
 8012e38:	4652      	mov	r2, sl
 8012e3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e3e:	9109      	str	r1, [sp, #36]	; 0x24
 8012e40:	f7ff ff2e 	bl	8012ca0 <__exponent>
 8012e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e46:	1813      	adds	r3, r2, r0
 8012e48:	2a01      	cmp	r2, #1
 8012e4a:	4681      	mov	r9, r0
 8012e4c:	6123      	str	r3, [r4, #16]
 8012e4e:	dc02      	bgt.n	8012e56 <_printf_float+0x14e>
 8012e50:	6822      	ldr	r2, [r4, #0]
 8012e52:	07d1      	lsls	r1, r2, #31
 8012e54:	d501      	bpl.n	8012e5a <_printf_float+0x152>
 8012e56:	3301      	adds	r3, #1
 8012e58:	6123      	str	r3, [r4, #16]
 8012e5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d0a5      	beq.n	8012dae <_printf_float+0xa6>
 8012e62:	232d      	movs	r3, #45	; 0x2d
 8012e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e68:	e7a1      	b.n	8012dae <_printf_float+0xa6>
 8012e6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012e6e:	f000 8177 	beq.w	8013160 <_printf_float+0x458>
 8012e72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e76:	d1bb      	bne.n	8012df0 <_printf_float+0xe8>
 8012e78:	2900      	cmp	r1, #0
 8012e7a:	d1b9      	bne.n	8012df0 <_printf_float+0xe8>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e7b6      	b.n	8012dee <_printf_float+0xe6>
 8012e80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012e84:	d119      	bne.n	8012eba <_printf_float+0x1b2>
 8012e86:	2900      	cmp	r1, #0
 8012e88:	6863      	ldr	r3, [r4, #4]
 8012e8a:	dd0c      	ble.n	8012ea6 <_printf_float+0x19e>
 8012e8c:	6121      	str	r1, [r4, #16]
 8012e8e:	b913      	cbnz	r3, 8012e96 <_printf_float+0x18e>
 8012e90:	6822      	ldr	r2, [r4, #0]
 8012e92:	07d2      	lsls	r2, r2, #31
 8012e94:	d502      	bpl.n	8012e9c <_printf_float+0x194>
 8012e96:	3301      	adds	r3, #1
 8012e98:	440b      	add	r3, r1
 8012e9a:	6123      	str	r3, [r4, #16]
 8012e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012ea0:	f04f 0900 	mov.w	r9, #0
 8012ea4:	e7d9      	b.n	8012e5a <_printf_float+0x152>
 8012ea6:	b913      	cbnz	r3, 8012eae <_printf_float+0x1a6>
 8012ea8:	6822      	ldr	r2, [r4, #0]
 8012eaa:	07d0      	lsls	r0, r2, #31
 8012eac:	d501      	bpl.n	8012eb2 <_printf_float+0x1aa>
 8012eae:	3302      	adds	r3, #2
 8012eb0:	e7f3      	b.n	8012e9a <_printf_float+0x192>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	e7f1      	b.n	8012e9a <_printf_float+0x192>
 8012eb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012eba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	db05      	blt.n	8012ece <_printf_float+0x1c6>
 8012ec2:	6822      	ldr	r2, [r4, #0]
 8012ec4:	6123      	str	r3, [r4, #16]
 8012ec6:	07d1      	lsls	r1, r2, #31
 8012ec8:	d5e8      	bpl.n	8012e9c <_printf_float+0x194>
 8012eca:	3301      	adds	r3, #1
 8012ecc:	e7e5      	b.n	8012e9a <_printf_float+0x192>
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	bfd4      	ite	le
 8012ed2:	f1c3 0302 	rsble	r3, r3, #2
 8012ed6:	2301      	movgt	r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	e7de      	b.n	8012e9a <_printf_float+0x192>
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	055a      	lsls	r2, r3, #21
 8012ee0:	d407      	bmi.n	8012ef2 <_printf_float+0x1ea>
 8012ee2:	6923      	ldr	r3, [r4, #16]
 8012ee4:	4642      	mov	r2, r8
 8012ee6:	4631      	mov	r1, r6
 8012ee8:	4628      	mov	r0, r5
 8012eea:	47b8      	blx	r7
 8012eec:	3001      	adds	r0, #1
 8012eee:	d12b      	bne.n	8012f48 <_printf_float+0x240>
 8012ef0:	e767      	b.n	8012dc2 <_printf_float+0xba>
 8012ef2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012ef6:	f240 80dc 	bls.w	80130b2 <_printf_float+0x3aa>
 8012efa:	2200      	movs	r2, #0
 8012efc:	2300      	movs	r3, #0
 8012efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f02:	f7ed fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d033      	beq.n	8012f72 <_printf_float+0x26a>
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	4a41      	ldr	r2, [pc, #260]	; (8013014 <_printf_float+0x30c>)
 8012f0e:	4631      	mov	r1, r6
 8012f10:	4628      	mov	r0, r5
 8012f12:	47b8      	blx	r7
 8012f14:	3001      	adds	r0, #1
 8012f16:	f43f af54 	beq.w	8012dc2 <_printf_float+0xba>
 8012f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	db02      	blt.n	8012f28 <_printf_float+0x220>
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	07d8      	lsls	r0, r3, #31
 8012f26:	d50f      	bpl.n	8012f48 <_printf_float+0x240>
 8012f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f2c:	4631      	mov	r1, r6
 8012f2e:	4628      	mov	r0, r5
 8012f30:	47b8      	blx	r7
 8012f32:	3001      	adds	r0, #1
 8012f34:	f43f af45 	beq.w	8012dc2 <_printf_float+0xba>
 8012f38:	f04f 0800 	mov.w	r8, #0
 8012f3c:	f104 091a 	add.w	r9, r4, #26
 8012f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f42:	3b01      	subs	r3, #1
 8012f44:	4543      	cmp	r3, r8
 8012f46:	dc09      	bgt.n	8012f5c <_printf_float+0x254>
 8012f48:	6823      	ldr	r3, [r4, #0]
 8012f4a:	079b      	lsls	r3, r3, #30
 8012f4c:	f100 8103 	bmi.w	8013156 <_printf_float+0x44e>
 8012f50:	68e0      	ldr	r0, [r4, #12]
 8012f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f54:	4298      	cmp	r0, r3
 8012f56:	bfb8      	it	lt
 8012f58:	4618      	movlt	r0, r3
 8012f5a:	e734      	b.n	8012dc6 <_printf_float+0xbe>
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	464a      	mov	r2, r9
 8012f60:	4631      	mov	r1, r6
 8012f62:	4628      	mov	r0, r5
 8012f64:	47b8      	blx	r7
 8012f66:	3001      	adds	r0, #1
 8012f68:	f43f af2b 	beq.w	8012dc2 <_printf_float+0xba>
 8012f6c:	f108 0801 	add.w	r8, r8, #1
 8012f70:	e7e6      	b.n	8012f40 <_printf_float+0x238>
 8012f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dc2b      	bgt.n	8012fd0 <_printf_float+0x2c8>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	4a26      	ldr	r2, [pc, #152]	; (8013014 <_printf_float+0x30c>)
 8012f7c:	4631      	mov	r1, r6
 8012f7e:	4628      	mov	r0, r5
 8012f80:	47b8      	blx	r7
 8012f82:	3001      	adds	r0, #1
 8012f84:	f43f af1d 	beq.w	8012dc2 <_printf_float+0xba>
 8012f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f8a:	b923      	cbnz	r3, 8012f96 <_printf_float+0x28e>
 8012f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f8e:	b913      	cbnz	r3, 8012f96 <_printf_float+0x28e>
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	07d9      	lsls	r1, r3, #31
 8012f94:	d5d8      	bpl.n	8012f48 <_printf_float+0x240>
 8012f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	47b8      	blx	r7
 8012fa0:	3001      	adds	r0, #1
 8012fa2:	f43f af0e 	beq.w	8012dc2 <_printf_float+0xba>
 8012fa6:	f04f 0900 	mov.w	r9, #0
 8012faa:	f104 0a1a 	add.w	sl, r4, #26
 8012fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fb0:	425b      	negs	r3, r3
 8012fb2:	454b      	cmp	r3, r9
 8012fb4:	dc01      	bgt.n	8012fba <_printf_float+0x2b2>
 8012fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fb8:	e794      	b.n	8012ee4 <_printf_float+0x1dc>
 8012fba:	2301      	movs	r3, #1
 8012fbc:	4652      	mov	r2, sl
 8012fbe:	4631      	mov	r1, r6
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	47b8      	blx	r7
 8012fc4:	3001      	adds	r0, #1
 8012fc6:	f43f aefc 	beq.w	8012dc2 <_printf_float+0xba>
 8012fca:	f109 0901 	add.w	r9, r9, #1
 8012fce:	e7ee      	b.n	8012fae <_printf_float+0x2a6>
 8012fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	bfa8      	it	ge
 8012fd8:	461a      	movge	r2, r3
 8012fda:	2a00      	cmp	r2, #0
 8012fdc:	4691      	mov	r9, r2
 8012fde:	dd07      	ble.n	8012ff0 <_printf_float+0x2e8>
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4642      	mov	r2, r8
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	47b8      	blx	r7
 8012fea:	3001      	adds	r0, #1
 8012fec:	f43f aee9 	beq.w	8012dc2 <_printf_float+0xba>
 8012ff0:	f104 031a 	add.w	r3, r4, #26
 8012ff4:	f04f 0b00 	mov.w	fp, #0
 8012ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ffc:	9306      	str	r3, [sp, #24]
 8012ffe:	e015      	b.n	801302c <_printf_float+0x324>
 8013000:	7fefffff 	.word	0x7fefffff
 8013004:	080181d0 	.word	0x080181d0
 8013008:	080181cc 	.word	0x080181cc
 801300c:	080181d8 	.word	0x080181d8
 8013010:	080181d4 	.word	0x080181d4
 8013014:	080183fb 	.word	0x080183fb
 8013018:	2301      	movs	r3, #1
 801301a:	9a06      	ldr	r2, [sp, #24]
 801301c:	4631      	mov	r1, r6
 801301e:	4628      	mov	r0, r5
 8013020:	47b8      	blx	r7
 8013022:	3001      	adds	r0, #1
 8013024:	f43f aecd 	beq.w	8012dc2 <_printf_float+0xba>
 8013028:	f10b 0b01 	add.w	fp, fp, #1
 801302c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013030:	ebaa 0309 	sub.w	r3, sl, r9
 8013034:	455b      	cmp	r3, fp
 8013036:	dcef      	bgt.n	8013018 <_printf_float+0x310>
 8013038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801303c:	429a      	cmp	r2, r3
 801303e:	44d0      	add	r8, sl
 8013040:	db15      	blt.n	801306e <_printf_float+0x366>
 8013042:	6823      	ldr	r3, [r4, #0]
 8013044:	07da      	lsls	r2, r3, #31
 8013046:	d412      	bmi.n	801306e <_printf_float+0x366>
 8013048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801304a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801304c:	eba3 020a 	sub.w	r2, r3, sl
 8013050:	eba3 0a01 	sub.w	sl, r3, r1
 8013054:	4592      	cmp	sl, r2
 8013056:	bfa8      	it	ge
 8013058:	4692      	movge	sl, r2
 801305a:	f1ba 0f00 	cmp.w	sl, #0
 801305e:	dc0e      	bgt.n	801307e <_printf_float+0x376>
 8013060:	f04f 0800 	mov.w	r8, #0
 8013064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013068:	f104 091a 	add.w	r9, r4, #26
 801306c:	e019      	b.n	80130a2 <_printf_float+0x39a>
 801306e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013072:	4631      	mov	r1, r6
 8013074:	4628      	mov	r0, r5
 8013076:	47b8      	blx	r7
 8013078:	3001      	adds	r0, #1
 801307a:	d1e5      	bne.n	8013048 <_printf_float+0x340>
 801307c:	e6a1      	b.n	8012dc2 <_printf_float+0xba>
 801307e:	4653      	mov	r3, sl
 8013080:	4642      	mov	r2, r8
 8013082:	4631      	mov	r1, r6
 8013084:	4628      	mov	r0, r5
 8013086:	47b8      	blx	r7
 8013088:	3001      	adds	r0, #1
 801308a:	d1e9      	bne.n	8013060 <_printf_float+0x358>
 801308c:	e699      	b.n	8012dc2 <_printf_float+0xba>
 801308e:	2301      	movs	r3, #1
 8013090:	464a      	mov	r2, r9
 8013092:	4631      	mov	r1, r6
 8013094:	4628      	mov	r0, r5
 8013096:	47b8      	blx	r7
 8013098:	3001      	adds	r0, #1
 801309a:	f43f ae92 	beq.w	8012dc2 <_printf_float+0xba>
 801309e:	f108 0801 	add.w	r8, r8, #1
 80130a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130a6:	1a9b      	subs	r3, r3, r2
 80130a8:	eba3 030a 	sub.w	r3, r3, sl
 80130ac:	4543      	cmp	r3, r8
 80130ae:	dcee      	bgt.n	801308e <_printf_float+0x386>
 80130b0:	e74a      	b.n	8012f48 <_printf_float+0x240>
 80130b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130b4:	2a01      	cmp	r2, #1
 80130b6:	dc01      	bgt.n	80130bc <_printf_float+0x3b4>
 80130b8:	07db      	lsls	r3, r3, #31
 80130ba:	d53a      	bpl.n	8013132 <_printf_float+0x42a>
 80130bc:	2301      	movs	r3, #1
 80130be:	4642      	mov	r2, r8
 80130c0:	4631      	mov	r1, r6
 80130c2:	4628      	mov	r0, r5
 80130c4:	47b8      	blx	r7
 80130c6:	3001      	adds	r0, #1
 80130c8:	f43f ae7b 	beq.w	8012dc2 <_printf_float+0xba>
 80130cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130d0:	4631      	mov	r1, r6
 80130d2:	4628      	mov	r0, r5
 80130d4:	47b8      	blx	r7
 80130d6:	3001      	adds	r0, #1
 80130d8:	f108 0801 	add.w	r8, r8, #1
 80130dc:	f43f ae71 	beq.w	8012dc2 <_printf_float+0xba>
 80130e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130e2:	2200      	movs	r2, #0
 80130e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80130e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130ec:	2300      	movs	r3, #0
 80130ee:	f7ed fd03 	bl	8000af8 <__aeabi_dcmpeq>
 80130f2:	b9c8      	cbnz	r0, 8013128 <_printf_float+0x420>
 80130f4:	4653      	mov	r3, sl
 80130f6:	4642      	mov	r2, r8
 80130f8:	4631      	mov	r1, r6
 80130fa:	4628      	mov	r0, r5
 80130fc:	47b8      	blx	r7
 80130fe:	3001      	adds	r0, #1
 8013100:	d10e      	bne.n	8013120 <_printf_float+0x418>
 8013102:	e65e      	b.n	8012dc2 <_printf_float+0xba>
 8013104:	2301      	movs	r3, #1
 8013106:	4652      	mov	r2, sl
 8013108:	4631      	mov	r1, r6
 801310a:	4628      	mov	r0, r5
 801310c:	47b8      	blx	r7
 801310e:	3001      	adds	r0, #1
 8013110:	f43f ae57 	beq.w	8012dc2 <_printf_float+0xba>
 8013114:	f108 0801 	add.w	r8, r8, #1
 8013118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801311a:	3b01      	subs	r3, #1
 801311c:	4543      	cmp	r3, r8
 801311e:	dcf1      	bgt.n	8013104 <_printf_float+0x3fc>
 8013120:	464b      	mov	r3, r9
 8013122:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013126:	e6de      	b.n	8012ee6 <_printf_float+0x1de>
 8013128:	f04f 0800 	mov.w	r8, #0
 801312c:	f104 0a1a 	add.w	sl, r4, #26
 8013130:	e7f2      	b.n	8013118 <_printf_float+0x410>
 8013132:	2301      	movs	r3, #1
 8013134:	e7df      	b.n	80130f6 <_printf_float+0x3ee>
 8013136:	2301      	movs	r3, #1
 8013138:	464a      	mov	r2, r9
 801313a:	4631      	mov	r1, r6
 801313c:	4628      	mov	r0, r5
 801313e:	47b8      	blx	r7
 8013140:	3001      	adds	r0, #1
 8013142:	f43f ae3e 	beq.w	8012dc2 <_printf_float+0xba>
 8013146:	f108 0801 	add.w	r8, r8, #1
 801314a:	68e3      	ldr	r3, [r4, #12]
 801314c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801314e:	1a9b      	subs	r3, r3, r2
 8013150:	4543      	cmp	r3, r8
 8013152:	dcf0      	bgt.n	8013136 <_printf_float+0x42e>
 8013154:	e6fc      	b.n	8012f50 <_printf_float+0x248>
 8013156:	f04f 0800 	mov.w	r8, #0
 801315a:	f104 0919 	add.w	r9, r4, #25
 801315e:	e7f4      	b.n	801314a <_printf_float+0x442>
 8013160:	2900      	cmp	r1, #0
 8013162:	f43f ae8b 	beq.w	8012e7c <_printf_float+0x174>
 8013166:	2300      	movs	r3, #0
 8013168:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801316c:	ab09      	add	r3, sp, #36	; 0x24
 801316e:	9300      	str	r3, [sp, #0]
 8013170:	ec49 8b10 	vmov	d0, r8, r9
 8013174:	6022      	str	r2, [r4, #0]
 8013176:	f8cd a004 	str.w	sl, [sp, #4]
 801317a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801317e:	4628      	mov	r0, r5
 8013180:	f7ff fd2d 	bl	8012bde <__cvt>
 8013184:	4680      	mov	r8, r0
 8013186:	e648      	b.n	8012e1a <_printf_float+0x112>

08013188 <_printf_common>:
 8013188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801318c:	4691      	mov	r9, r2
 801318e:	461f      	mov	r7, r3
 8013190:	688a      	ldr	r2, [r1, #8]
 8013192:	690b      	ldr	r3, [r1, #16]
 8013194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013198:	4293      	cmp	r3, r2
 801319a:	bfb8      	it	lt
 801319c:	4613      	movlt	r3, r2
 801319e:	f8c9 3000 	str.w	r3, [r9]
 80131a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80131a6:	4606      	mov	r6, r0
 80131a8:	460c      	mov	r4, r1
 80131aa:	b112      	cbz	r2, 80131b2 <_printf_common+0x2a>
 80131ac:	3301      	adds	r3, #1
 80131ae:	f8c9 3000 	str.w	r3, [r9]
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	0699      	lsls	r1, r3, #26
 80131b6:	bf42      	ittt	mi
 80131b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80131bc:	3302      	addmi	r3, #2
 80131be:	f8c9 3000 	strmi.w	r3, [r9]
 80131c2:	6825      	ldr	r5, [r4, #0]
 80131c4:	f015 0506 	ands.w	r5, r5, #6
 80131c8:	d107      	bne.n	80131da <_printf_common+0x52>
 80131ca:	f104 0a19 	add.w	sl, r4, #25
 80131ce:	68e3      	ldr	r3, [r4, #12]
 80131d0:	f8d9 2000 	ldr.w	r2, [r9]
 80131d4:	1a9b      	subs	r3, r3, r2
 80131d6:	42ab      	cmp	r3, r5
 80131d8:	dc28      	bgt.n	801322c <_printf_common+0xa4>
 80131da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80131de:	6822      	ldr	r2, [r4, #0]
 80131e0:	3300      	adds	r3, #0
 80131e2:	bf18      	it	ne
 80131e4:	2301      	movne	r3, #1
 80131e6:	0692      	lsls	r2, r2, #26
 80131e8:	d42d      	bmi.n	8013246 <_printf_common+0xbe>
 80131ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131ee:	4639      	mov	r1, r7
 80131f0:	4630      	mov	r0, r6
 80131f2:	47c0      	blx	r8
 80131f4:	3001      	adds	r0, #1
 80131f6:	d020      	beq.n	801323a <_printf_common+0xb2>
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	68e5      	ldr	r5, [r4, #12]
 80131fc:	f8d9 2000 	ldr.w	r2, [r9]
 8013200:	f003 0306 	and.w	r3, r3, #6
 8013204:	2b04      	cmp	r3, #4
 8013206:	bf08      	it	eq
 8013208:	1aad      	subeq	r5, r5, r2
 801320a:	68a3      	ldr	r3, [r4, #8]
 801320c:	6922      	ldr	r2, [r4, #16]
 801320e:	bf0c      	ite	eq
 8013210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013214:	2500      	movne	r5, #0
 8013216:	4293      	cmp	r3, r2
 8013218:	bfc4      	itt	gt
 801321a:	1a9b      	subgt	r3, r3, r2
 801321c:	18ed      	addgt	r5, r5, r3
 801321e:	f04f 0900 	mov.w	r9, #0
 8013222:	341a      	adds	r4, #26
 8013224:	454d      	cmp	r5, r9
 8013226:	d11a      	bne.n	801325e <_printf_common+0xd6>
 8013228:	2000      	movs	r0, #0
 801322a:	e008      	b.n	801323e <_printf_common+0xb6>
 801322c:	2301      	movs	r3, #1
 801322e:	4652      	mov	r2, sl
 8013230:	4639      	mov	r1, r7
 8013232:	4630      	mov	r0, r6
 8013234:	47c0      	blx	r8
 8013236:	3001      	adds	r0, #1
 8013238:	d103      	bne.n	8013242 <_printf_common+0xba>
 801323a:	f04f 30ff 	mov.w	r0, #4294967295
 801323e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013242:	3501      	adds	r5, #1
 8013244:	e7c3      	b.n	80131ce <_printf_common+0x46>
 8013246:	18e1      	adds	r1, r4, r3
 8013248:	1c5a      	adds	r2, r3, #1
 801324a:	2030      	movs	r0, #48	; 0x30
 801324c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013250:	4422      	add	r2, r4
 8013252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013256:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801325a:	3302      	adds	r3, #2
 801325c:	e7c5      	b.n	80131ea <_printf_common+0x62>
 801325e:	2301      	movs	r3, #1
 8013260:	4622      	mov	r2, r4
 8013262:	4639      	mov	r1, r7
 8013264:	4630      	mov	r0, r6
 8013266:	47c0      	blx	r8
 8013268:	3001      	adds	r0, #1
 801326a:	d0e6      	beq.n	801323a <_printf_common+0xb2>
 801326c:	f109 0901 	add.w	r9, r9, #1
 8013270:	e7d8      	b.n	8013224 <_printf_common+0x9c>
	...

08013274 <_printf_i>:
 8013274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013278:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801327c:	460c      	mov	r4, r1
 801327e:	7e09      	ldrb	r1, [r1, #24]
 8013280:	b085      	sub	sp, #20
 8013282:	296e      	cmp	r1, #110	; 0x6e
 8013284:	4617      	mov	r7, r2
 8013286:	4606      	mov	r6, r0
 8013288:	4698      	mov	r8, r3
 801328a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801328c:	f000 80b3 	beq.w	80133f6 <_printf_i+0x182>
 8013290:	d822      	bhi.n	80132d8 <_printf_i+0x64>
 8013292:	2963      	cmp	r1, #99	; 0x63
 8013294:	d036      	beq.n	8013304 <_printf_i+0x90>
 8013296:	d80a      	bhi.n	80132ae <_printf_i+0x3a>
 8013298:	2900      	cmp	r1, #0
 801329a:	f000 80b9 	beq.w	8013410 <_printf_i+0x19c>
 801329e:	2958      	cmp	r1, #88	; 0x58
 80132a0:	f000 8083 	beq.w	80133aa <_printf_i+0x136>
 80132a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80132ac:	e032      	b.n	8013314 <_printf_i+0xa0>
 80132ae:	2964      	cmp	r1, #100	; 0x64
 80132b0:	d001      	beq.n	80132b6 <_printf_i+0x42>
 80132b2:	2969      	cmp	r1, #105	; 0x69
 80132b4:	d1f6      	bne.n	80132a4 <_printf_i+0x30>
 80132b6:	6820      	ldr	r0, [r4, #0]
 80132b8:	6813      	ldr	r3, [r2, #0]
 80132ba:	0605      	lsls	r5, r0, #24
 80132bc:	f103 0104 	add.w	r1, r3, #4
 80132c0:	d52a      	bpl.n	8013318 <_printf_i+0xa4>
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	6011      	str	r1, [r2, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	da03      	bge.n	80132d2 <_printf_i+0x5e>
 80132ca:	222d      	movs	r2, #45	; 0x2d
 80132cc:	425b      	negs	r3, r3
 80132ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80132d2:	486f      	ldr	r0, [pc, #444]	; (8013490 <_printf_i+0x21c>)
 80132d4:	220a      	movs	r2, #10
 80132d6:	e039      	b.n	801334c <_printf_i+0xd8>
 80132d8:	2973      	cmp	r1, #115	; 0x73
 80132da:	f000 809d 	beq.w	8013418 <_printf_i+0x1a4>
 80132de:	d808      	bhi.n	80132f2 <_printf_i+0x7e>
 80132e0:	296f      	cmp	r1, #111	; 0x6f
 80132e2:	d020      	beq.n	8013326 <_printf_i+0xb2>
 80132e4:	2970      	cmp	r1, #112	; 0x70
 80132e6:	d1dd      	bne.n	80132a4 <_printf_i+0x30>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	f043 0320 	orr.w	r3, r3, #32
 80132ee:	6023      	str	r3, [r4, #0]
 80132f0:	e003      	b.n	80132fa <_printf_i+0x86>
 80132f2:	2975      	cmp	r1, #117	; 0x75
 80132f4:	d017      	beq.n	8013326 <_printf_i+0xb2>
 80132f6:	2978      	cmp	r1, #120	; 0x78
 80132f8:	d1d4      	bne.n	80132a4 <_printf_i+0x30>
 80132fa:	2378      	movs	r3, #120	; 0x78
 80132fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013300:	4864      	ldr	r0, [pc, #400]	; (8013494 <_printf_i+0x220>)
 8013302:	e055      	b.n	80133b0 <_printf_i+0x13c>
 8013304:	6813      	ldr	r3, [r2, #0]
 8013306:	1d19      	adds	r1, r3, #4
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6011      	str	r1, [r2, #0]
 801330c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013314:	2301      	movs	r3, #1
 8013316:	e08c      	b.n	8013432 <_printf_i+0x1be>
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6011      	str	r1, [r2, #0]
 801331c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013320:	bf18      	it	ne
 8013322:	b21b      	sxthne	r3, r3
 8013324:	e7cf      	b.n	80132c6 <_printf_i+0x52>
 8013326:	6813      	ldr	r3, [r2, #0]
 8013328:	6825      	ldr	r5, [r4, #0]
 801332a:	1d18      	adds	r0, r3, #4
 801332c:	6010      	str	r0, [r2, #0]
 801332e:	0628      	lsls	r0, r5, #24
 8013330:	d501      	bpl.n	8013336 <_printf_i+0xc2>
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	e002      	b.n	801333c <_printf_i+0xc8>
 8013336:	0668      	lsls	r0, r5, #25
 8013338:	d5fb      	bpl.n	8013332 <_printf_i+0xbe>
 801333a:	881b      	ldrh	r3, [r3, #0]
 801333c:	4854      	ldr	r0, [pc, #336]	; (8013490 <_printf_i+0x21c>)
 801333e:	296f      	cmp	r1, #111	; 0x6f
 8013340:	bf14      	ite	ne
 8013342:	220a      	movne	r2, #10
 8013344:	2208      	moveq	r2, #8
 8013346:	2100      	movs	r1, #0
 8013348:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801334c:	6865      	ldr	r5, [r4, #4]
 801334e:	60a5      	str	r5, [r4, #8]
 8013350:	2d00      	cmp	r5, #0
 8013352:	f2c0 8095 	blt.w	8013480 <_printf_i+0x20c>
 8013356:	6821      	ldr	r1, [r4, #0]
 8013358:	f021 0104 	bic.w	r1, r1, #4
 801335c:	6021      	str	r1, [r4, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d13d      	bne.n	80133de <_printf_i+0x16a>
 8013362:	2d00      	cmp	r5, #0
 8013364:	f040 808e 	bne.w	8013484 <_printf_i+0x210>
 8013368:	4665      	mov	r5, ip
 801336a:	2a08      	cmp	r2, #8
 801336c:	d10b      	bne.n	8013386 <_printf_i+0x112>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	07db      	lsls	r3, r3, #31
 8013372:	d508      	bpl.n	8013386 <_printf_i+0x112>
 8013374:	6923      	ldr	r3, [r4, #16]
 8013376:	6862      	ldr	r2, [r4, #4]
 8013378:	429a      	cmp	r2, r3
 801337a:	bfde      	ittt	le
 801337c:	2330      	movle	r3, #48	; 0x30
 801337e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013382:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013386:	ebac 0305 	sub.w	r3, ip, r5
 801338a:	6123      	str	r3, [r4, #16]
 801338c:	f8cd 8000 	str.w	r8, [sp]
 8013390:	463b      	mov	r3, r7
 8013392:	aa03      	add	r2, sp, #12
 8013394:	4621      	mov	r1, r4
 8013396:	4630      	mov	r0, r6
 8013398:	f7ff fef6 	bl	8013188 <_printf_common>
 801339c:	3001      	adds	r0, #1
 801339e:	d14d      	bne.n	801343c <_printf_i+0x1c8>
 80133a0:	f04f 30ff 	mov.w	r0, #4294967295
 80133a4:	b005      	add	sp, #20
 80133a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133aa:	4839      	ldr	r0, [pc, #228]	; (8013490 <_printf_i+0x21c>)
 80133ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80133b0:	6813      	ldr	r3, [r2, #0]
 80133b2:	6821      	ldr	r1, [r4, #0]
 80133b4:	1d1d      	adds	r5, r3, #4
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	6015      	str	r5, [r2, #0]
 80133ba:	060a      	lsls	r2, r1, #24
 80133bc:	d50b      	bpl.n	80133d6 <_printf_i+0x162>
 80133be:	07ca      	lsls	r2, r1, #31
 80133c0:	bf44      	itt	mi
 80133c2:	f041 0120 	orrmi.w	r1, r1, #32
 80133c6:	6021      	strmi	r1, [r4, #0]
 80133c8:	b91b      	cbnz	r3, 80133d2 <_printf_i+0x15e>
 80133ca:	6822      	ldr	r2, [r4, #0]
 80133cc:	f022 0220 	bic.w	r2, r2, #32
 80133d0:	6022      	str	r2, [r4, #0]
 80133d2:	2210      	movs	r2, #16
 80133d4:	e7b7      	b.n	8013346 <_printf_i+0xd2>
 80133d6:	064d      	lsls	r5, r1, #25
 80133d8:	bf48      	it	mi
 80133da:	b29b      	uxthmi	r3, r3
 80133dc:	e7ef      	b.n	80133be <_printf_i+0x14a>
 80133de:	4665      	mov	r5, ip
 80133e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133e4:	fb02 3311 	mls	r3, r2, r1, r3
 80133e8:	5cc3      	ldrb	r3, [r0, r3]
 80133ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80133ee:	460b      	mov	r3, r1
 80133f0:	2900      	cmp	r1, #0
 80133f2:	d1f5      	bne.n	80133e0 <_printf_i+0x16c>
 80133f4:	e7b9      	b.n	801336a <_printf_i+0xf6>
 80133f6:	6813      	ldr	r3, [r2, #0]
 80133f8:	6825      	ldr	r5, [r4, #0]
 80133fa:	6961      	ldr	r1, [r4, #20]
 80133fc:	1d18      	adds	r0, r3, #4
 80133fe:	6010      	str	r0, [r2, #0]
 8013400:	0628      	lsls	r0, r5, #24
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	d501      	bpl.n	801340a <_printf_i+0x196>
 8013406:	6019      	str	r1, [r3, #0]
 8013408:	e002      	b.n	8013410 <_printf_i+0x19c>
 801340a:	066a      	lsls	r2, r5, #25
 801340c:	d5fb      	bpl.n	8013406 <_printf_i+0x192>
 801340e:	8019      	strh	r1, [r3, #0]
 8013410:	2300      	movs	r3, #0
 8013412:	6123      	str	r3, [r4, #16]
 8013414:	4665      	mov	r5, ip
 8013416:	e7b9      	b.n	801338c <_printf_i+0x118>
 8013418:	6813      	ldr	r3, [r2, #0]
 801341a:	1d19      	adds	r1, r3, #4
 801341c:	6011      	str	r1, [r2, #0]
 801341e:	681d      	ldr	r5, [r3, #0]
 8013420:	6862      	ldr	r2, [r4, #4]
 8013422:	2100      	movs	r1, #0
 8013424:	4628      	mov	r0, r5
 8013426:	f7ec fef3 	bl	8000210 <memchr>
 801342a:	b108      	cbz	r0, 8013430 <_printf_i+0x1bc>
 801342c:	1b40      	subs	r0, r0, r5
 801342e:	6060      	str	r0, [r4, #4]
 8013430:	6863      	ldr	r3, [r4, #4]
 8013432:	6123      	str	r3, [r4, #16]
 8013434:	2300      	movs	r3, #0
 8013436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801343a:	e7a7      	b.n	801338c <_printf_i+0x118>
 801343c:	6923      	ldr	r3, [r4, #16]
 801343e:	462a      	mov	r2, r5
 8013440:	4639      	mov	r1, r7
 8013442:	4630      	mov	r0, r6
 8013444:	47c0      	blx	r8
 8013446:	3001      	adds	r0, #1
 8013448:	d0aa      	beq.n	80133a0 <_printf_i+0x12c>
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	079b      	lsls	r3, r3, #30
 801344e:	d413      	bmi.n	8013478 <_printf_i+0x204>
 8013450:	68e0      	ldr	r0, [r4, #12]
 8013452:	9b03      	ldr	r3, [sp, #12]
 8013454:	4298      	cmp	r0, r3
 8013456:	bfb8      	it	lt
 8013458:	4618      	movlt	r0, r3
 801345a:	e7a3      	b.n	80133a4 <_printf_i+0x130>
 801345c:	2301      	movs	r3, #1
 801345e:	464a      	mov	r2, r9
 8013460:	4639      	mov	r1, r7
 8013462:	4630      	mov	r0, r6
 8013464:	47c0      	blx	r8
 8013466:	3001      	adds	r0, #1
 8013468:	d09a      	beq.n	80133a0 <_printf_i+0x12c>
 801346a:	3501      	adds	r5, #1
 801346c:	68e3      	ldr	r3, [r4, #12]
 801346e:	9a03      	ldr	r2, [sp, #12]
 8013470:	1a9b      	subs	r3, r3, r2
 8013472:	42ab      	cmp	r3, r5
 8013474:	dcf2      	bgt.n	801345c <_printf_i+0x1e8>
 8013476:	e7eb      	b.n	8013450 <_printf_i+0x1dc>
 8013478:	2500      	movs	r5, #0
 801347a:	f104 0919 	add.w	r9, r4, #25
 801347e:	e7f5      	b.n	801346c <_printf_i+0x1f8>
 8013480:	2b00      	cmp	r3, #0
 8013482:	d1ac      	bne.n	80133de <_printf_i+0x16a>
 8013484:	7803      	ldrb	r3, [r0, #0]
 8013486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801348a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801348e:	e76c      	b.n	801336a <_printf_i+0xf6>
 8013490:	080181dc 	.word	0x080181dc
 8013494:	080181ed 	.word	0x080181ed

08013498 <_scanf_float>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	469a      	mov	sl, r3
 801349e:	688b      	ldr	r3, [r1, #8]
 80134a0:	4616      	mov	r6, r2
 80134a2:	1e5a      	subs	r2, r3, #1
 80134a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80134a8:	b087      	sub	sp, #28
 80134aa:	bf83      	ittte	hi
 80134ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80134b0:	189b      	addhi	r3, r3, r2
 80134b2:	9301      	strhi	r3, [sp, #4]
 80134b4:	2300      	movls	r3, #0
 80134b6:	bf86      	itte	hi
 80134b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80134bc:	608b      	strhi	r3, [r1, #8]
 80134be:	9301      	strls	r3, [sp, #4]
 80134c0:	680b      	ldr	r3, [r1, #0]
 80134c2:	4688      	mov	r8, r1
 80134c4:	f04f 0b00 	mov.w	fp, #0
 80134c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80134cc:	f848 3b1c 	str.w	r3, [r8], #28
 80134d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80134d4:	4607      	mov	r7, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	4645      	mov	r5, r8
 80134da:	465a      	mov	r2, fp
 80134dc:	46d9      	mov	r9, fp
 80134de:	f8cd b008 	str.w	fp, [sp, #8]
 80134e2:	68a1      	ldr	r1, [r4, #8]
 80134e4:	b181      	cbz	r1, 8013508 <_scanf_float+0x70>
 80134e6:	6833      	ldr	r3, [r6, #0]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	2b49      	cmp	r3, #73	; 0x49
 80134ec:	d071      	beq.n	80135d2 <_scanf_float+0x13a>
 80134ee:	d84d      	bhi.n	801358c <_scanf_float+0xf4>
 80134f0:	2b39      	cmp	r3, #57	; 0x39
 80134f2:	d840      	bhi.n	8013576 <_scanf_float+0xde>
 80134f4:	2b31      	cmp	r3, #49	; 0x31
 80134f6:	f080 8088 	bcs.w	801360a <_scanf_float+0x172>
 80134fa:	2b2d      	cmp	r3, #45	; 0x2d
 80134fc:	f000 8090 	beq.w	8013620 <_scanf_float+0x188>
 8013500:	d815      	bhi.n	801352e <_scanf_float+0x96>
 8013502:	2b2b      	cmp	r3, #43	; 0x2b
 8013504:	f000 808c 	beq.w	8013620 <_scanf_float+0x188>
 8013508:	f1b9 0f00 	cmp.w	r9, #0
 801350c:	d003      	beq.n	8013516 <_scanf_float+0x7e>
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013514:	6023      	str	r3, [r4, #0]
 8013516:	3a01      	subs	r2, #1
 8013518:	2a01      	cmp	r2, #1
 801351a:	f200 80ea 	bhi.w	80136f2 <_scanf_float+0x25a>
 801351e:	4545      	cmp	r5, r8
 8013520:	f200 80dc 	bhi.w	80136dc <_scanf_float+0x244>
 8013524:	2601      	movs	r6, #1
 8013526:	4630      	mov	r0, r6
 8013528:	b007      	add	sp, #28
 801352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352e:	2b2e      	cmp	r3, #46	; 0x2e
 8013530:	f000 809f 	beq.w	8013672 <_scanf_float+0x1da>
 8013534:	2b30      	cmp	r3, #48	; 0x30
 8013536:	d1e7      	bne.n	8013508 <_scanf_float+0x70>
 8013538:	6820      	ldr	r0, [r4, #0]
 801353a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801353e:	d064      	beq.n	801360a <_scanf_float+0x172>
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013546:	6020      	str	r0, [r4, #0]
 8013548:	f109 0901 	add.w	r9, r9, #1
 801354c:	b11b      	cbz	r3, 8013556 <_scanf_float+0xbe>
 801354e:	3b01      	subs	r3, #1
 8013550:	3101      	adds	r1, #1
 8013552:	9301      	str	r3, [sp, #4]
 8013554:	60a1      	str	r1, [r4, #8]
 8013556:	68a3      	ldr	r3, [r4, #8]
 8013558:	3b01      	subs	r3, #1
 801355a:	60a3      	str	r3, [r4, #8]
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	3301      	adds	r3, #1
 8013560:	6123      	str	r3, [r4, #16]
 8013562:	6873      	ldr	r3, [r6, #4]
 8013564:	3b01      	subs	r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	6073      	str	r3, [r6, #4]
 801356a:	f340 80ac 	ble.w	80136c6 <_scanf_float+0x22e>
 801356e:	6833      	ldr	r3, [r6, #0]
 8013570:	3301      	adds	r3, #1
 8013572:	6033      	str	r3, [r6, #0]
 8013574:	e7b5      	b.n	80134e2 <_scanf_float+0x4a>
 8013576:	2b45      	cmp	r3, #69	; 0x45
 8013578:	f000 8085 	beq.w	8013686 <_scanf_float+0x1ee>
 801357c:	2b46      	cmp	r3, #70	; 0x46
 801357e:	d06a      	beq.n	8013656 <_scanf_float+0x1be>
 8013580:	2b41      	cmp	r3, #65	; 0x41
 8013582:	d1c1      	bne.n	8013508 <_scanf_float+0x70>
 8013584:	2a01      	cmp	r2, #1
 8013586:	d1bf      	bne.n	8013508 <_scanf_float+0x70>
 8013588:	2202      	movs	r2, #2
 801358a:	e046      	b.n	801361a <_scanf_float+0x182>
 801358c:	2b65      	cmp	r3, #101	; 0x65
 801358e:	d07a      	beq.n	8013686 <_scanf_float+0x1ee>
 8013590:	d818      	bhi.n	80135c4 <_scanf_float+0x12c>
 8013592:	2b54      	cmp	r3, #84	; 0x54
 8013594:	d066      	beq.n	8013664 <_scanf_float+0x1cc>
 8013596:	d811      	bhi.n	80135bc <_scanf_float+0x124>
 8013598:	2b4e      	cmp	r3, #78	; 0x4e
 801359a:	d1b5      	bne.n	8013508 <_scanf_float+0x70>
 801359c:	2a00      	cmp	r2, #0
 801359e:	d146      	bne.n	801362e <_scanf_float+0x196>
 80135a0:	f1b9 0f00 	cmp.w	r9, #0
 80135a4:	d145      	bne.n	8013632 <_scanf_float+0x19a>
 80135a6:	6821      	ldr	r1, [r4, #0]
 80135a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80135ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80135b0:	d13f      	bne.n	8013632 <_scanf_float+0x19a>
 80135b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80135b6:	6021      	str	r1, [r4, #0]
 80135b8:	2201      	movs	r2, #1
 80135ba:	e02e      	b.n	801361a <_scanf_float+0x182>
 80135bc:	2b59      	cmp	r3, #89	; 0x59
 80135be:	d01e      	beq.n	80135fe <_scanf_float+0x166>
 80135c0:	2b61      	cmp	r3, #97	; 0x61
 80135c2:	e7de      	b.n	8013582 <_scanf_float+0xea>
 80135c4:	2b6e      	cmp	r3, #110	; 0x6e
 80135c6:	d0e9      	beq.n	801359c <_scanf_float+0x104>
 80135c8:	d815      	bhi.n	80135f6 <_scanf_float+0x15e>
 80135ca:	2b66      	cmp	r3, #102	; 0x66
 80135cc:	d043      	beq.n	8013656 <_scanf_float+0x1be>
 80135ce:	2b69      	cmp	r3, #105	; 0x69
 80135d0:	d19a      	bne.n	8013508 <_scanf_float+0x70>
 80135d2:	f1bb 0f00 	cmp.w	fp, #0
 80135d6:	d138      	bne.n	801364a <_scanf_float+0x1b2>
 80135d8:	f1b9 0f00 	cmp.w	r9, #0
 80135dc:	d197      	bne.n	801350e <_scanf_float+0x76>
 80135de:	6821      	ldr	r1, [r4, #0]
 80135e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80135e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80135e8:	d195      	bne.n	8013516 <_scanf_float+0x7e>
 80135ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80135ee:	6021      	str	r1, [r4, #0]
 80135f0:	f04f 0b01 	mov.w	fp, #1
 80135f4:	e011      	b.n	801361a <_scanf_float+0x182>
 80135f6:	2b74      	cmp	r3, #116	; 0x74
 80135f8:	d034      	beq.n	8013664 <_scanf_float+0x1cc>
 80135fa:	2b79      	cmp	r3, #121	; 0x79
 80135fc:	d184      	bne.n	8013508 <_scanf_float+0x70>
 80135fe:	f1bb 0f07 	cmp.w	fp, #7
 8013602:	d181      	bne.n	8013508 <_scanf_float+0x70>
 8013604:	f04f 0b08 	mov.w	fp, #8
 8013608:	e007      	b.n	801361a <_scanf_float+0x182>
 801360a:	eb12 0f0b 	cmn.w	r2, fp
 801360e:	f47f af7b 	bne.w	8013508 <_scanf_float+0x70>
 8013612:	6821      	ldr	r1, [r4, #0]
 8013614:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013618:	6021      	str	r1, [r4, #0]
 801361a:	702b      	strb	r3, [r5, #0]
 801361c:	3501      	adds	r5, #1
 801361e:	e79a      	b.n	8013556 <_scanf_float+0xbe>
 8013620:	6821      	ldr	r1, [r4, #0]
 8013622:	0608      	lsls	r0, r1, #24
 8013624:	f57f af70 	bpl.w	8013508 <_scanf_float+0x70>
 8013628:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801362c:	e7f4      	b.n	8013618 <_scanf_float+0x180>
 801362e:	2a02      	cmp	r2, #2
 8013630:	d047      	beq.n	80136c2 <_scanf_float+0x22a>
 8013632:	f1bb 0f01 	cmp.w	fp, #1
 8013636:	d003      	beq.n	8013640 <_scanf_float+0x1a8>
 8013638:	f1bb 0f04 	cmp.w	fp, #4
 801363c:	f47f af64 	bne.w	8013508 <_scanf_float+0x70>
 8013640:	f10b 0b01 	add.w	fp, fp, #1
 8013644:	fa5f fb8b 	uxtb.w	fp, fp
 8013648:	e7e7      	b.n	801361a <_scanf_float+0x182>
 801364a:	f1bb 0f03 	cmp.w	fp, #3
 801364e:	d0f7      	beq.n	8013640 <_scanf_float+0x1a8>
 8013650:	f1bb 0f05 	cmp.w	fp, #5
 8013654:	e7f2      	b.n	801363c <_scanf_float+0x1a4>
 8013656:	f1bb 0f02 	cmp.w	fp, #2
 801365a:	f47f af55 	bne.w	8013508 <_scanf_float+0x70>
 801365e:	f04f 0b03 	mov.w	fp, #3
 8013662:	e7da      	b.n	801361a <_scanf_float+0x182>
 8013664:	f1bb 0f06 	cmp.w	fp, #6
 8013668:	f47f af4e 	bne.w	8013508 <_scanf_float+0x70>
 801366c:	f04f 0b07 	mov.w	fp, #7
 8013670:	e7d3      	b.n	801361a <_scanf_float+0x182>
 8013672:	6821      	ldr	r1, [r4, #0]
 8013674:	0588      	lsls	r0, r1, #22
 8013676:	f57f af47 	bpl.w	8013508 <_scanf_float+0x70>
 801367a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801367e:	6021      	str	r1, [r4, #0]
 8013680:	f8cd 9008 	str.w	r9, [sp, #8]
 8013684:	e7c9      	b.n	801361a <_scanf_float+0x182>
 8013686:	6821      	ldr	r1, [r4, #0]
 8013688:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801368c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013690:	d006      	beq.n	80136a0 <_scanf_float+0x208>
 8013692:	0548      	lsls	r0, r1, #21
 8013694:	f57f af38 	bpl.w	8013508 <_scanf_float+0x70>
 8013698:	f1b9 0f00 	cmp.w	r9, #0
 801369c:	f43f af3b 	beq.w	8013516 <_scanf_float+0x7e>
 80136a0:	0588      	lsls	r0, r1, #22
 80136a2:	bf58      	it	pl
 80136a4:	9802      	ldrpl	r0, [sp, #8]
 80136a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80136aa:	bf58      	it	pl
 80136ac:	eba9 0000 	subpl.w	r0, r9, r0
 80136b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80136b4:	bf58      	it	pl
 80136b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80136ba:	6021      	str	r1, [r4, #0]
 80136bc:	f04f 0900 	mov.w	r9, #0
 80136c0:	e7ab      	b.n	801361a <_scanf_float+0x182>
 80136c2:	2203      	movs	r2, #3
 80136c4:	e7a9      	b.n	801361a <_scanf_float+0x182>
 80136c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136ca:	9205      	str	r2, [sp, #20]
 80136cc:	4631      	mov	r1, r6
 80136ce:	4638      	mov	r0, r7
 80136d0:	4798      	blx	r3
 80136d2:	9a05      	ldr	r2, [sp, #20]
 80136d4:	2800      	cmp	r0, #0
 80136d6:	f43f af04 	beq.w	80134e2 <_scanf_float+0x4a>
 80136da:	e715      	b.n	8013508 <_scanf_float+0x70>
 80136dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136e4:	4632      	mov	r2, r6
 80136e6:	4638      	mov	r0, r7
 80136e8:	4798      	blx	r3
 80136ea:	6923      	ldr	r3, [r4, #16]
 80136ec:	3b01      	subs	r3, #1
 80136ee:	6123      	str	r3, [r4, #16]
 80136f0:	e715      	b.n	801351e <_scanf_float+0x86>
 80136f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80136f6:	2b06      	cmp	r3, #6
 80136f8:	d80a      	bhi.n	8013710 <_scanf_float+0x278>
 80136fa:	f1bb 0f02 	cmp.w	fp, #2
 80136fe:	d968      	bls.n	80137d2 <_scanf_float+0x33a>
 8013700:	f1ab 0b03 	sub.w	fp, fp, #3
 8013704:	fa5f fb8b 	uxtb.w	fp, fp
 8013708:	eba5 0b0b 	sub.w	fp, r5, fp
 801370c:	455d      	cmp	r5, fp
 801370e:	d14b      	bne.n	80137a8 <_scanf_float+0x310>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	05da      	lsls	r2, r3, #23
 8013714:	d51f      	bpl.n	8013756 <_scanf_float+0x2be>
 8013716:	055b      	lsls	r3, r3, #21
 8013718:	d468      	bmi.n	80137ec <_scanf_float+0x354>
 801371a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801371e:	6923      	ldr	r3, [r4, #16]
 8013720:	2965      	cmp	r1, #101	; 0x65
 8013722:	f103 33ff 	add.w	r3, r3, #4294967295
 8013726:	f105 3bff 	add.w	fp, r5, #4294967295
 801372a:	6123      	str	r3, [r4, #16]
 801372c:	d00d      	beq.n	801374a <_scanf_float+0x2b2>
 801372e:	2945      	cmp	r1, #69	; 0x45
 8013730:	d00b      	beq.n	801374a <_scanf_float+0x2b2>
 8013732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013736:	4632      	mov	r2, r6
 8013738:	4638      	mov	r0, r7
 801373a:	4798      	blx	r3
 801373c:	6923      	ldr	r3, [r4, #16]
 801373e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013742:	3b01      	subs	r3, #1
 8013744:	f1a5 0b02 	sub.w	fp, r5, #2
 8013748:	6123      	str	r3, [r4, #16]
 801374a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801374e:	4632      	mov	r2, r6
 8013750:	4638      	mov	r0, r7
 8013752:	4798      	blx	r3
 8013754:	465d      	mov	r5, fp
 8013756:	6826      	ldr	r6, [r4, #0]
 8013758:	f016 0610 	ands.w	r6, r6, #16
 801375c:	d17a      	bne.n	8013854 <_scanf_float+0x3bc>
 801375e:	702e      	strb	r6, [r5, #0]
 8013760:	6823      	ldr	r3, [r4, #0]
 8013762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801376a:	d142      	bne.n	80137f2 <_scanf_float+0x35a>
 801376c:	9b02      	ldr	r3, [sp, #8]
 801376e:	eba9 0303 	sub.w	r3, r9, r3
 8013772:	425a      	negs	r2, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	d149      	bne.n	801380c <_scanf_float+0x374>
 8013778:	2200      	movs	r2, #0
 801377a:	4641      	mov	r1, r8
 801377c:	4638      	mov	r0, r7
 801377e:	f000 ffdf 	bl	8014740 <_strtod_r>
 8013782:	6825      	ldr	r5, [r4, #0]
 8013784:	f8da 3000 	ldr.w	r3, [sl]
 8013788:	f015 0f02 	tst.w	r5, #2
 801378c:	f103 0204 	add.w	r2, r3, #4
 8013790:	ec59 8b10 	vmov	r8, r9, d0
 8013794:	f8ca 2000 	str.w	r2, [sl]
 8013798:	d043      	beq.n	8013822 <_scanf_float+0x38a>
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	e9c3 8900 	strd	r8, r9, [r3]
 80137a0:	68e3      	ldr	r3, [r4, #12]
 80137a2:	3301      	adds	r3, #1
 80137a4:	60e3      	str	r3, [r4, #12]
 80137a6:	e6be      	b.n	8013526 <_scanf_float+0x8e>
 80137a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137b0:	4632      	mov	r2, r6
 80137b2:	4638      	mov	r0, r7
 80137b4:	4798      	blx	r3
 80137b6:	6923      	ldr	r3, [r4, #16]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	6123      	str	r3, [r4, #16]
 80137bc:	e7a6      	b.n	801370c <_scanf_float+0x274>
 80137be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137c6:	4632      	mov	r2, r6
 80137c8:	4638      	mov	r0, r7
 80137ca:	4798      	blx	r3
 80137cc:	6923      	ldr	r3, [r4, #16]
 80137ce:	3b01      	subs	r3, #1
 80137d0:	6123      	str	r3, [r4, #16]
 80137d2:	4545      	cmp	r5, r8
 80137d4:	d8f3      	bhi.n	80137be <_scanf_float+0x326>
 80137d6:	e6a5      	b.n	8013524 <_scanf_float+0x8c>
 80137d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137e0:	4632      	mov	r2, r6
 80137e2:	4638      	mov	r0, r7
 80137e4:	4798      	blx	r3
 80137e6:	6923      	ldr	r3, [r4, #16]
 80137e8:	3b01      	subs	r3, #1
 80137ea:	6123      	str	r3, [r4, #16]
 80137ec:	4545      	cmp	r5, r8
 80137ee:	d8f3      	bhi.n	80137d8 <_scanf_float+0x340>
 80137f0:	e698      	b.n	8013524 <_scanf_float+0x8c>
 80137f2:	9b03      	ldr	r3, [sp, #12]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d0bf      	beq.n	8013778 <_scanf_float+0x2e0>
 80137f8:	9904      	ldr	r1, [sp, #16]
 80137fa:	230a      	movs	r3, #10
 80137fc:	4632      	mov	r2, r6
 80137fe:	3101      	adds	r1, #1
 8013800:	4638      	mov	r0, r7
 8013802:	f001 f829 	bl	8014858 <_strtol_r>
 8013806:	9b03      	ldr	r3, [sp, #12]
 8013808:	9d04      	ldr	r5, [sp, #16]
 801380a:	1ac2      	subs	r2, r0, r3
 801380c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013810:	429d      	cmp	r5, r3
 8013812:	bf28      	it	cs
 8013814:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013818:	490f      	ldr	r1, [pc, #60]	; (8013858 <_scanf_float+0x3c0>)
 801381a:	4628      	mov	r0, r5
 801381c:	f000 f8e8 	bl	80139f0 <siprintf>
 8013820:	e7aa      	b.n	8013778 <_scanf_float+0x2e0>
 8013822:	f015 0504 	ands.w	r5, r5, #4
 8013826:	d1b8      	bne.n	801379a <_scanf_float+0x302>
 8013828:	681f      	ldr	r7, [r3, #0]
 801382a:	ee10 2a10 	vmov	r2, s0
 801382e:	464b      	mov	r3, r9
 8013830:	ee10 0a10 	vmov	r0, s0
 8013834:	4649      	mov	r1, r9
 8013836:	f7ed f991 	bl	8000b5c <__aeabi_dcmpun>
 801383a:	b128      	cbz	r0, 8013848 <_scanf_float+0x3b0>
 801383c:	4628      	mov	r0, r5
 801383e:	f000 f89d 	bl	801397c <nanf>
 8013842:	ed87 0a00 	vstr	s0, [r7]
 8013846:	e7ab      	b.n	80137a0 <_scanf_float+0x308>
 8013848:	4640      	mov	r0, r8
 801384a:	4649      	mov	r1, r9
 801384c:	f7ed f9e4 	bl	8000c18 <__aeabi_d2f>
 8013850:	6038      	str	r0, [r7, #0]
 8013852:	e7a5      	b.n	80137a0 <_scanf_float+0x308>
 8013854:	2600      	movs	r6, #0
 8013856:	e666      	b.n	8013526 <_scanf_float+0x8e>
 8013858:	080181fe 	.word	0x080181fe

0801385c <iprintf>:
 801385c:	b40f      	push	{r0, r1, r2, r3}
 801385e:	4b0a      	ldr	r3, [pc, #40]	; (8013888 <iprintf+0x2c>)
 8013860:	b513      	push	{r0, r1, r4, lr}
 8013862:	681c      	ldr	r4, [r3, #0]
 8013864:	b124      	cbz	r4, 8013870 <iprintf+0x14>
 8013866:	69a3      	ldr	r3, [r4, #24]
 8013868:	b913      	cbnz	r3, 8013870 <iprintf+0x14>
 801386a:	4620      	mov	r0, r4
 801386c:	f002 f83c 	bl	80158e8 <__sinit>
 8013870:	ab05      	add	r3, sp, #20
 8013872:	9a04      	ldr	r2, [sp, #16]
 8013874:	68a1      	ldr	r1, [r4, #8]
 8013876:	9301      	str	r3, [sp, #4]
 8013878:	4620      	mov	r0, r4
 801387a:	f003 fc73 	bl	8017164 <_vfiprintf_r>
 801387e:	b002      	add	sp, #8
 8013880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013884:	b004      	add	sp, #16
 8013886:	4770      	bx	lr
 8013888:	2000000c 	.word	0x2000000c

0801388c <putchar>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4b08      	ldr	r3, [pc, #32]	; (80138b0 <putchar+0x24>)
 8013890:	681c      	ldr	r4, [r3, #0]
 8013892:	4605      	mov	r5, r0
 8013894:	b124      	cbz	r4, 80138a0 <putchar+0x14>
 8013896:	69a3      	ldr	r3, [r4, #24]
 8013898:	b913      	cbnz	r3, 80138a0 <putchar+0x14>
 801389a:	4620      	mov	r0, r4
 801389c:	f002 f824 	bl	80158e8 <__sinit>
 80138a0:	68a2      	ldr	r2, [r4, #8]
 80138a2:	4629      	mov	r1, r5
 80138a4:	4620      	mov	r0, r4
 80138a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138aa:	f003 bec9 	b.w	8017640 <_putc_r>
 80138ae:	bf00      	nop
 80138b0:	2000000c 	.word	0x2000000c

080138b4 <_puts_r>:
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	460e      	mov	r6, r1
 80138b8:	4605      	mov	r5, r0
 80138ba:	b118      	cbz	r0, 80138c4 <_puts_r+0x10>
 80138bc:	6983      	ldr	r3, [r0, #24]
 80138be:	b90b      	cbnz	r3, 80138c4 <_puts_r+0x10>
 80138c0:	f002 f812 	bl	80158e8 <__sinit>
 80138c4:	69ab      	ldr	r3, [r5, #24]
 80138c6:	68ac      	ldr	r4, [r5, #8]
 80138c8:	b913      	cbnz	r3, 80138d0 <_puts_r+0x1c>
 80138ca:	4628      	mov	r0, r5
 80138cc:	f002 f80c 	bl	80158e8 <__sinit>
 80138d0:	4b23      	ldr	r3, [pc, #140]	; (8013960 <_puts_r+0xac>)
 80138d2:	429c      	cmp	r4, r3
 80138d4:	d117      	bne.n	8013906 <_puts_r+0x52>
 80138d6:	686c      	ldr	r4, [r5, #4]
 80138d8:	89a3      	ldrh	r3, [r4, #12]
 80138da:	071b      	lsls	r3, r3, #28
 80138dc:	d51d      	bpl.n	801391a <_puts_r+0x66>
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	b1db      	cbz	r3, 801391a <_puts_r+0x66>
 80138e2:	3e01      	subs	r6, #1
 80138e4:	68a3      	ldr	r3, [r4, #8]
 80138e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80138ea:	3b01      	subs	r3, #1
 80138ec:	60a3      	str	r3, [r4, #8]
 80138ee:	b9e9      	cbnz	r1, 801392c <_puts_r+0x78>
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	da2e      	bge.n	8013952 <_puts_r+0x9e>
 80138f4:	4622      	mov	r2, r4
 80138f6:	210a      	movs	r1, #10
 80138f8:	4628      	mov	r0, r5
 80138fa:	f000 ffdf 	bl	80148bc <__swbuf_r>
 80138fe:	3001      	adds	r0, #1
 8013900:	d011      	beq.n	8013926 <_puts_r+0x72>
 8013902:	200a      	movs	r0, #10
 8013904:	e011      	b.n	801392a <_puts_r+0x76>
 8013906:	4b17      	ldr	r3, [pc, #92]	; (8013964 <_puts_r+0xb0>)
 8013908:	429c      	cmp	r4, r3
 801390a:	d101      	bne.n	8013910 <_puts_r+0x5c>
 801390c:	68ac      	ldr	r4, [r5, #8]
 801390e:	e7e3      	b.n	80138d8 <_puts_r+0x24>
 8013910:	4b15      	ldr	r3, [pc, #84]	; (8013968 <_puts_r+0xb4>)
 8013912:	429c      	cmp	r4, r3
 8013914:	bf08      	it	eq
 8013916:	68ec      	ldreq	r4, [r5, #12]
 8013918:	e7de      	b.n	80138d8 <_puts_r+0x24>
 801391a:	4621      	mov	r1, r4
 801391c:	4628      	mov	r0, r5
 801391e:	f001 f831 	bl	8014984 <__swsetup_r>
 8013922:	2800      	cmp	r0, #0
 8013924:	d0dd      	beq.n	80138e2 <_puts_r+0x2e>
 8013926:	f04f 30ff 	mov.w	r0, #4294967295
 801392a:	bd70      	pop	{r4, r5, r6, pc}
 801392c:	2b00      	cmp	r3, #0
 801392e:	da04      	bge.n	801393a <_puts_r+0x86>
 8013930:	69a2      	ldr	r2, [r4, #24]
 8013932:	429a      	cmp	r2, r3
 8013934:	dc06      	bgt.n	8013944 <_puts_r+0x90>
 8013936:	290a      	cmp	r1, #10
 8013938:	d004      	beq.n	8013944 <_puts_r+0x90>
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	6022      	str	r2, [r4, #0]
 8013940:	7019      	strb	r1, [r3, #0]
 8013942:	e7cf      	b.n	80138e4 <_puts_r+0x30>
 8013944:	4622      	mov	r2, r4
 8013946:	4628      	mov	r0, r5
 8013948:	f000 ffb8 	bl	80148bc <__swbuf_r>
 801394c:	3001      	adds	r0, #1
 801394e:	d1c9      	bne.n	80138e4 <_puts_r+0x30>
 8013950:	e7e9      	b.n	8013926 <_puts_r+0x72>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	200a      	movs	r0, #10
 8013956:	1c5a      	adds	r2, r3, #1
 8013958:	6022      	str	r2, [r4, #0]
 801395a:	7018      	strb	r0, [r3, #0]
 801395c:	e7e5      	b.n	801392a <_puts_r+0x76>
 801395e:	bf00      	nop
 8013960:	08018288 	.word	0x08018288
 8013964:	080182a8 	.word	0x080182a8
 8013968:	08018268 	.word	0x08018268

0801396c <puts>:
 801396c:	4b02      	ldr	r3, [pc, #8]	; (8013978 <puts+0xc>)
 801396e:	4601      	mov	r1, r0
 8013970:	6818      	ldr	r0, [r3, #0]
 8013972:	f7ff bf9f 	b.w	80138b4 <_puts_r>
 8013976:	bf00      	nop
 8013978:	2000000c 	.word	0x2000000c

0801397c <nanf>:
 801397c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013984 <nanf+0x8>
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop
 8013984:	7fc00000 	.word	0x7fc00000

08013988 <sniprintf>:
 8013988:	b40c      	push	{r2, r3}
 801398a:	b530      	push	{r4, r5, lr}
 801398c:	4b17      	ldr	r3, [pc, #92]	; (80139ec <sniprintf+0x64>)
 801398e:	1e0c      	subs	r4, r1, #0
 8013990:	b09d      	sub	sp, #116	; 0x74
 8013992:	681d      	ldr	r5, [r3, #0]
 8013994:	da08      	bge.n	80139a8 <sniprintf+0x20>
 8013996:	238b      	movs	r3, #139	; 0x8b
 8013998:	602b      	str	r3, [r5, #0]
 801399a:	f04f 30ff 	mov.w	r0, #4294967295
 801399e:	b01d      	add	sp, #116	; 0x74
 80139a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139a4:	b002      	add	sp, #8
 80139a6:	4770      	bx	lr
 80139a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80139ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80139b0:	bf14      	ite	ne
 80139b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80139b6:	4623      	moveq	r3, r4
 80139b8:	9304      	str	r3, [sp, #16]
 80139ba:	9307      	str	r3, [sp, #28]
 80139bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139c0:	9002      	str	r0, [sp, #8]
 80139c2:	9006      	str	r0, [sp, #24]
 80139c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80139ca:	ab21      	add	r3, sp, #132	; 0x84
 80139cc:	a902      	add	r1, sp, #8
 80139ce:	4628      	mov	r0, r5
 80139d0:	9301      	str	r3, [sp, #4]
 80139d2:	f003 f8fb 	bl	8016bcc <_svfiprintf_r>
 80139d6:	1c43      	adds	r3, r0, #1
 80139d8:	bfbc      	itt	lt
 80139da:	238b      	movlt	r3, #139	; 0x8b
 80139dc:	602b      	strlt	r3, [r5, #0]
 80139de:	2c00      	cmp	r4, #0
 80139e0:	d0dd      	beq.n	801399e <sniprintf+0x16>
 80139e2:	9b02      	ldr	r3, [sp, #8]
 80139e4:	2200      	movs	r2, #0
 80139e6:	701a      	strb	r2, [r3, #0]
 80139e8:	e7d9      	b.n	801399e <sniprintf+0x16>
 80139ea:	bf00      	nop
 80139ec:	2000000c 	.word	0x2000000c

080139f0 <siprintf>:
 80139f0:	b40e      	push	{r1, r2, r3}
 80139f2:	b500      	push	{lr}
 80139f4:	b09c      	sub	sp, #112	; 0x70
 80139f6:	ab1d      	add	r3, sp, #116	; 0x74
 80139f8:	9002      	str	r0, [sp, #8]
 80139fa:	9006      	str	r0, [sp, #24]
 80139fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a00:	4809      	ldr	r0, [pc, #36]	; (8013a28 <siprintf+0x38>)
 8013a02:	9107      	str	r1, [sp, #28]
 8013a04:	9104      	str	r1, [sp, #16]
 8013a06:	4909      	ldr	r1, [pc, #36]	; (8013a2c <siprintf+0x3c>)
 8013a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a0c:	9105      	str	r1, [sp, #20]
 8013a0e:	6800      	ldr	r0, [r0, #0]
 8013a10:	9301      	str	r3, [sp, #4]
 8013a12:	a902      	add	r1, sp, #8
 8013a14:	f003 f8da 	bl	8016bcc <_svfiprintf_r>
 8013a18:	9b02      	ldr	r3, [sp, #8]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	701a      	strb	r2, [r3, #0]
 8013a1e:	b01c      	add	sp, #112	; 0x70
 8013a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a24:	b003      	add	sp, #12
 8013a26:	4770      	bx	lr
 8013a28:	2000000c 	.word	0x2000000c
 8013a2c:	ffff0208 	.word	0xffff0208

08013a30 <siscanf>:
 8013a30:	b40e      	push	{r1, r2, r3}
 8013a32:	b530      	push	{r4, r5, lr}
 8013a34:	b09c      	sub	sp, #112	; 0x70
 8013a36:	ac1f      	add	r4, sp, #124	; 0x7c
 8013a38:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8013a40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a44:	9002      	str	r0, [sp, #8]
 8013a46:	9006      	str	r0, [sp, #24]
 8013a48:	f7ec fbda 	bl	8000200 <strlen>
 8013a4c:	4b0b      	ldr	r3, [pc, #44]	; (8013a7c <siscanf+0x4c>)
 8013a4e:	9003      	str	r0, [sp, #12]
 8013a50:	9007      	str	r0, [sp, #28]
 8013a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a54:	480a      	ldr	r0, [pc, #40]	; (8013a80 <siscanf+0x50>)
 8013a56:	9401      	str	r4, [sp, #4]
 8013a58:	2300      	movs	r3, #0
 8013a5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a5c:	9314      	str	r3, [sp, #80]	; 0x50
 8013a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a66:	462a      	mov	r2, r5
 8013a68:	4623      	mov	r3, r4
 8013a6a:	a902      	add	r1, sp, #8
 8013a6c:	6800      	ldr	r0, [r0, #0]
 8013a6e:	f003 f9ff 	bl	8016e70 <__ssvfiscanf_r>
 8013a72:	b01c      	add	sp, #112	; 0x70
 8013a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a78:	b003      	add	sp, #12
 8013a7a:	4770      	bx	lr
 8013a7c:	08013aa7 	.word	0x08013aa7
 8013a80:	2000000c 	.word	0x2000000c

08013a84 <__sread>:
 8013a84:	b510      	push	{r4, lr}
 8013a86:	460c      	mov	r4, r1
 8013a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a8c:	f003 fe0e 	bl	80176ac <_read_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	bfab      	itete	ge
 8013a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a96:	89a3      	ldrhlt	r3, [r4, #12]
 8013a98:	181b      	addge	r3, r3, r0
 8013a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a9e:	bfac      	ite	ge
 8013aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013aa2:	81a3      	strhlt	r3, [r4, #12]
 8013aa4:	bd10      	pop	{r4, pc}

08013aa6 <__seofread>:
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	4770      	bx	lr

08013aaa <__swrite>:
 8013aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aae:	461f      	mov	r7, r3
 8013ab0:	898b      	ldrh	r3, [r1, #12]
 8013ab2:	05db      	lsls	r3, r3, #23
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	460c      	mov	r4, r1
 8013ab8:	4616      	mov	r6, r2
 8013aba:	d505      	bpl.n	8013ac8 <__swrite+0x1e>
 8013abc:	2302      	movs	r3, #2
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac4:	f002 fae2 	bl	801608c <_lseek_r>
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ad2:	81a3      	strh	r3, [r4, #12]
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	463b      	mov	r3, r7
 8013ad8:	4628      	mov	r0, r5
 8013ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ade:	f000 bf3f 	b.w	8014960 <_write_r>

08013ae2 <__sseek>:
 8013ae2:	b510      	push	{r4, lr}
 8013ae4:	460c      	mov	r4, r1
 8013ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aea:	f002 facf 	bl	801608c <_lseek_r>
 8013aee:	1c43      	adds	r3, r0, #1
 8013af0:	89a3      	ldrh	r3, [r4, #12]
 8013af2:	bf15      	itete	ne
 8013af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013afe:	81a3      	strheq	r3, [r4, #12]
 8013b00:	bf18      	it	ne
 8013b02:	81a3      	strhne	r3, [r4, #12]
 8013b04:	bd10      	pop	{r4, pc}

08013b06 <__sclose>:
 8013b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b0a:	f000 bfa9 	b.w	8014a60 <_close_r>

08013b0e <strcpy>:
 8013b0e:	4603      	mov	r3, r0
 8013b10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b14:	f803 2b01 	strb.w	r2, [r3], #1
 8013b18:	2a00      	cmp	r2, #0
 8013b1a:	d1f9      	bne.n	8013b10 <strcpy+0x2>
 8013b1c:	4770      	bx	lr

08013b1e <sulp>:
 8013b1e:	b570      	push	{r4, r5, r6, lr}
 8013b20:	4604      	mov	r4, r0
 8013b22:	460d      	mov	r5, r1
 8013b24:	ec45 4b10 	vmov	d0, r4, r5
 8013b28:	4616      	mov	r6, r2
 8013b2a:	f002 fe0b 	bl	8016744 <__ulp>
 8013b2e:	ec51 0b10 	vmov	r0, r1, d0
 8013b32:	b17e      	cbz	r6, 8013b54 <sulp+0x36>
 8013b34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	dd09      	ble.n	8013b54 <sulp+0x36>
 8013b40:	051b      	lsls	r3, r3, #20
 8013b42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b46:	2400      	movs	r4, #0
 8013b48:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	462b      	mov	r3, r5
 8013b50:	f7ec fd6a 	bl	8000628 <__aeabi_dmul>
 8013b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b58 <_strtod_l>:
 8013b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	461f      	mov	r7, r3
 8013b5e:	b0a1      	sub	sp, #132	; 0x84
 8013b60:	2300      	movs	r3, #0
 8013b62:	4681      	mov	r9, r0
 8013b64:	4638      	mov	r0, r7
 8013b66:	460e      	mov	r6, r1
 8013b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8013b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8013b6c:	f002 fa7e 	bl	801606c <__localeconv_l>
 8013b70:	4680      	mov	r8, r0
 8013b72:	6800      	ldr	r0, [r0, #0]
 8013b74:	f7ec fb44 	bl	8000200 <strlen>
 8013b78:	f04f 0a00 	mov.w	sl, #0
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	f04f 0b00 	mov.w	fp, #0
 8013b82:	961b      	str	r6, [sp, #108]	; 0x6c
 8013b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b86:	781a      	ldrb	r2, [r3, #0]
 8013b88:	2a0d      	cmp	r2, #13
 8013b8a:	d832      	bhi.n	8013bf2 <_strtod_l+0x9a>
 8013b8c:	2a09      	cmp	r2, #9
 8013b8e:	d236      	bcs.n	8013bfe <_strtod_l+0xa6>
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	d03e      	beq.n	8013c12 <_strtod_l+0xba>
 8013b94:	2300      	movs	r3, #0
 8013b96:	930d      	str	r3, [sp, #52]	; 0x34
 8013b98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013b9a:	782b      	ldrb	r3, [r5, #0]
 8013b9c:	2b30      	cmp	r3, #48	; 0x30
 8013b9e:	f040 80ac 	bne.w	8013cfa <_strtod_l+0x1a2>
 8013ba2:	786b      	ldrb	r3, [r5, #1]
 8013ba4:	2b58      	cmp	r3, #88	; 0x58
 8013ba6:	d001      	beq.n	8013bac <_strtod_l+0x54>
 8013ba8:	2b78      	cmp	r3, #120	; 0x78
 8013baa:	d167      	bne.n	8013c7c <_strtod_l+0x124>
 8013bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bae:	9301      	str	r3, [sp, #4]
 8013bb0:	ab1c      	add	r3, sp, #112	; 0x70
 8013bb2:	9300      	str	r3, [sp, #0]
 8013bb4:	9702      	str	r7, [sp, #8]
 8013bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8013bb8:	4a88      	ldr	r2, [pc, #544]	; (8013ddc <_strtod_l+0x284>)
 8013bba:	a91b      	add	r1, sp, #108	; 0x6c
 8013bbc:	4648      	mov	r0, r9
 8013bbe:	f001 ff6c 	bl	8015a9a <__gethex>
 8013bc2:	f010 0407 	ands.w	r4, r0, #7
 8013bc6:	4606      	mov	r6, r0
 8013bc8:	d005      	beq.n	8013bd6 <_strtod_l+0x7e>
 8013bca:	2c06      	cmp	r4, #6
 8013bcc:	d12b      	bne.n	8013c26 <_strtod_l+0xce>
 8013bce:	3501      	adds	r5, #1
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	951b      	str	r5, [sp, #108]	; 0x6c
 8013bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8013bd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f040 859a 	bne.w	8014712 <_strtod_l+0xbba>
 8013bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013be0:	b1e3      	cbz	r3, 8013c1c <_strtod_l+0xc4>
 8013be2:	4652      	mov	r2, sl
 8013be4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013be8:	ec43 2b10 	vmov	d0, r2, r3
 8013bec:	b021      	add	sp, #132	; 0x84
 8013bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf2:	2a2b      	cmp	r2, #43	; 0x2b
 8013bf4:	d015      	beq.n	8013c22 <_strtod_l+0xca>
 8013bf6:	2a2d      	cmp	r2, #45	; 0x2d
 8013bf8:	d004      	beq.n	8013c04 <_strtod_l+0xac>
 8013bfa:	2a20      	cmp	r2, #32
 8013bfc:	d1ca      	bne.n	8013b94 <_strtod_l+0x3c>
 8013bfe:	3301      	adds	r3, #1
 8013c00:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c02:	e7bf      	b.n	8013b84 <_strtod_l+0x2c>
 8013c04:	2201      	movs	r2, #1
 8013c06:	920d      	str	r2, [sp, #52]	; 0x34
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c0c:	785b      	ldrb	r3, [r3, #1]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1c2      	bne.n	8013b98 <_strtod_l+0x40>
 8013c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c14:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f040 8579 	bne.w	801470e <_strtod_l+0xbb6>
 8013c1c:	4652      	mov	r2, sl
 8013c1e:	465b      	mov	r3, fp
 8013c20:	e7e2      	b.n	8013be8 <_strtod_l+0x90>
 8013c22:	2200      	movs	r2, #0
 8013c24:	e7ef      	b.n	8013c06 <_strtod_l+0xae>
 8013c26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c28:	b13a      	cbz	r2, 8013c3a <_strtod_l+0xe2>
 8013c2a:	2135      	movs	r1, #53	; 0x35
 8013c2c:	a81e      	add	r0, sp, #120	; 0x78
 8013c2e:	f002 fe81 	bl	8016934 <__copybits>
 8013c32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c34:	4648      	mov	r0, r9
 8013c36:	f002 faed 	bl	8016214 <_Bfree>
 8013c3a:	3c01      	subs	r4, #1
 8013c3c:	2c04      	cmp	r4, #4
 8013c3e:	d806      	bhi.n	8013c4e <_strtod_l+0xf6>
 8013c40:	e8df f004 	tbb	[pc, r4]
 8013c44:	1714030a 	.word	0x1714030a
 8013c48:	0a          	.byte	0x0a
 8013c49:	00          	.byte	0x00
 8013c4a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013c4e:	0730      	lsls	r0, r6, #28
 8013c50:	d5c1      	bpl.n	8013bd6 <_strtod_l+0x7e>
 8013c52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c56:	e7be      	b.n	8013bd6 <_strtod_l+0x7e>
 8013c58:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013c5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013c62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013c66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013c6a:	e7f0      	b.n	8013c4e <_strtod_l+0xf6>
 8013c6c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013de0 <_strtod_l+0x288>
 8013c70:	e7ed      	b.n	8013c4e <_strtod_l+0xf6>
 8013c72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013c76:	f04f 3aff 	mov.w	sl, #4294967295
 8013c7a:	e7e8      	b.n	8013c4e <_strtod_l+0xf6>
 8013c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c7e:	1c5a      	adds	r2, r3, #1
 8013c80:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c82:	785b      	ldrb	r3, [r3, #1]
 8013c84:	2b30      	cmp	r3, #48	; 0x30
 8013c86:	d0f9      	beq.n	8013c7c <_strtod_l+0x124>
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d0a4      	beq.n	8013bd6 <_strtod_l+0x7e>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	2500      	movs	r5, #0
 8013c90:	9306      	str	r3, [sp, #24]
 8013c92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c94:	9308      	str	r3, [sp, #32]
 8013c96:	9507      	str	r5, [sp, #28]
 8013c98:	9505      	str	r5, [sp, #20]
 8013c9a:	220a      	movs	r2, #10
 8013c9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013c9e:	7807      	ldrb	r7, [r0, #0]
 8013ca0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013ca4:	b2d9      	uxtb	r1, r3
 8013ca6:	2909      	cmp	r1, #9
 8013ca8:	d929      	bls.n	8013cfe <_strtod_l+0x1a6>
 8013caa:	4622      	mov	r2, r4
 8013cac:	f8d8 1000 	ldr.w	r1, [r8]
 8013cb0:	f003 fd50 	bl	8017754 <strncmp>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d031      	beq.n	8013d1c <_strtod_l+0x1c4>
 8013cb8:	2000      	movs	r0, #0
 8013cba:	9c05      	ldr	r4, [sp, #20]
 8013cbc:	9004      	str	r0, [sp, #16]
 8013cbe:	463b      	mov	r3, r7
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	2b65      	cmp	r3, #101	; 0x65
 8013cc4:	d001      	beq.n	8013cca <_strtod_l+0x172>
 8013cc6:	2b45      	cmp	r3, #69	; 0x45
 8013cc8:	d114      	bne.n	8013cf4 <_strtod_l+0x19c>
 8013cca:	b924      	cbnz	r4, 8013cd6 <_strtod_l+0x17e>
 8013ccc:	b910      	cbnz	r0, 8013cd4 <_strtod_l+0x17c>
 8013cce:	9b06      	ldr	r3, [sp, #24]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d09e      	beq.n	8013c12 <_strtod_l+0xba>
 8013cd4:	2400      	movs	r4, #0
 8013cd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013cd8:	1c73      	adds	r3, r6, #1
 8013cda:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cdc:	7873      	ldrb	r3, [r6, #1]
 8013cde:	2b2b      	cmp	r3, #43	; 0x2b
 8013ce0:	d078      	beq.n	8013dd4 <_strtod_l+0x27c>
 8013ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8013ce4:	d070      	beq.n	8013dc8 <_strtod_l+0x270>
 8013ce6:	f04f 0c00 	mov.w	ip, #0
 8013cea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013cee:	2f09      	cmp	r7, #9
 8013cf0:	d97c      	bls.n	8013dec <_strtod_l+0x294>
 8013cf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013cf4:	f04f 0e00 	mov.w	lr, #0
 8013cf8:	e09a      	b.n	8013e30 <_strtod_l+0x2d8>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e7c7      	b.n	8013c8e <_strtod_l+0x136>
 8013cfe:	9905      	ldr	r1, [sp, #20]
 8013d00:	2908      	cmp	r1, #8
 8013d02:	bfdd      	ittte	le
 8013d04:	9907      	ldrle	r1, [sp, #28]
 8013d06:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d0a:	9307      	strle	r3, [sp, #28]
 8013d0c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013d10:	9b05      	ldr	r3, [sp, #20]
 8013d12:	3001      	adds	r0, #1
 8013d14:	3301      	adds	r3, #1
 8013d16:	9305      	str	r3, [sp, #20]
 8013d18:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d1a:	e7bf      	b.n	8013c9c <_strtod_l+0x144>
 8013d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d1e:	191a      	adds	r2, r3, r4
 8013d20:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d22:	9a05      	ldr	r2, [sp, #20]
 8013d24:	5d1b      	ldrb	r3, [r3, r4]
 8013d26:	2a00      	cmp	r2, #0
 8013d28:	d037      	beq.n	8013d9a <_strtod_l+0x242>
 8013d2a:	9c05      	ldr	r4, [sp, #20]
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013d32:	2909      	cmp	r1, #9
 8013d34:	d913      	bls.n	8013d5e <_strtod_l+0x206>
 8013d36:	2101      	movs	r1, #1
 8013d38:	9104      	str	r1, [sp, #16]
 8013d3a:	e7c2      	b.n	8013cc2 <_strtod_l+0x16a>
 8013d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d3e:	1c5a      	adds	r2, r3, #1
 8013d40:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d42:	785b      	ldrb	r3, [r3, #1]
 8013d44:	3001      	adds	r0, #1
 8013d46:	2b30      	cmp	r3, #48	; 0x30
 8013d48:	d0f8      	beq.n	8013d3c <_strtod_l+0x1e4>
 8013d4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013d4e:	2a08      	cmp	r2, #8
 8013d50:	f200 84e4 	bhi.w	801471c <_strtod_l+0xbc4>
 8013d54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d56:	9208      	str	r2, [sp, #32]
 8013d58:	4602      	mov	r2, r0
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013d62:	f100 0101 	add.w	r1, r0, #1
 8013d66:	d012      	beq.n	8013d8e <_strtod_l+0x236>
 8013d68:	440a      	add	r2, r1
 8013d6a:	eb00 0c04 	add.w	ip, r0, r4
 8013d6e:	4621      	mov	r1, r4
 8013d70:	270a      	movs	r7, #10
 8013d72:	458c      	cmp	ip, r1
 8013d74:	d113      	bne.n	8013d9e <_strtod_l+0x246>
 8013d76:	1821      	adds	r1, r4, r0
 8013d78:	2908      	cmp	r1, #8
 8013d7a:	f104 0401 	add.w	r4, r4, #1
 8013d7e:	4404      	add	r4, r0
 8013d80:	dc19      	bgt.n	8013db6 <_strtod_l+0x25e>
 8013d82:	9b07      	ldr	r3, [sp, #28]
 8013d84:	210a      	movs	r1, #10
 8013d86:	fb01 e303 	mla	r3, r1, r3, lr
 8013d8a:	9307      	str	r3, [sp, #28]
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d90:	1c58      	adds	r0, r3, #1
 8013d92:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d94:	785b      	ldrb	r3, [r3, #1]
 8013d96:	4608      	mov	r0, r1
 8013d98:	e7c9      	b.n	8013d2e <_strtod_l+0x1d6>
 8013d9a:	9805      	ldr	r0, [sp, #20]
 8013d9c:	e7d3      	b.n	8013d46 <_strtod_l+0x1ee>
 8013d9e:	2908      	cmp	r1, #8
 8013da0:	f101 0101 	add.w	r1, r1, #1
 8013da4:	dc03      	bgt.n	8013dae <_strtod_l+0x256>
 8013da6:	9b07      	ldr	r3, [sp, #28]
 8013da8:	437b      	muls	r3, r7
 8013daa:	9307      	str	r3, [sp, #28]
 8013dac:	e7e1      	b.n	8013d72 <_strtod_l+0x21a>
 8013dae:	2910      	cmp	r1, #16
 8013db0:	bfd8      	it	le
 8013db2:	437d      	mulle	r5, r7
 8013db4:	e7dd      	b.n	8013d72 <_strtod_l+0x21a>
 8013db6:	2c10      	cmp	r4, #16
 8013db8:	bfdc      	itt	le
 8013dba:	210a      	movle	r1, #10
 8013dbc:	fb01 e505 	mlale	r5, r1, r5, lr
 8013dc0:	e7e4      	b.n	8013d8c <_strtod_l+0x234>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	e781      	b.n	8013ccc <_strtod_l+0x174>
 8013dc8:	f04f 0c01 	mov.w	ip, #1
 8013dcc:	1cb3      	adds	r3, r6, #2
 8013dce:	931b      	str	r3, [sp, #108]	; 0x6c
 8013dd0:	78b3      	ldrb	r3, [r6, #2]
 8013dd2:	e78a      	b.n	8013cea <_strtod_l+0x192>
 8013dd4:	f04f 0c00 	mov.w	ip, #0
 8013dd8:	e7f8      	b.n	8013dcc <_strtod_l+0x274>
 8013dda:	bf00      	nop
 8013ddc:	08018204 	.word	0x08018204
 8013de0:	7ff00000 	.word	0x7ff00000
 8013de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de6:	1c5f      	adds	r7, r3, #1
 8013de8:	971b      	str	r7, [sp, #108]	; 0x6c
 8013dea:	785b      	ldrb	r3, [r3, #1]
 8013dec:	2b30      	cmp	r3, #48	; 0x30
 8013dee:	d0f9      	beq.n	8013de4 <_strtod_l+0x28c>
 8013df0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013df4:	2f08      	cmp	r7, #8
 8013df6:	f63f af7d 	bhi.w	8013cf4 <_strtod_l+0x19c>
 8013dfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e00:	930a      	str	r3, [sp, #40]	; 0x28
 8013e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e04:	1c5f      	adds	r7, r3, #1
 8013e06:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e08:	785b      	ldrb	r3, [r3, #1]
 8013e0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013e0e:	f1b8 0f09 	cmp.w	r8, #9
 8013e12:	d937      	bls.n	8013e84 <_strtod_l+0x32c>
 8013e14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e16:	1a7f      	subs	r7, r7, r1
 8013e18:	2f08      	cmp	r7, #8
 8013e1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e1e:	dc37      	bgt.n	8013e90 <_strtod_l+0x338>
 8013e20:	45be      	cmp	lr, r7
 8013e22:	bfa8      	it	ge
 8013e24:	46be      	movge	lr, r7
 8013e26:	f1bc 0f00 	cmp.w	ip, #0
 8013e2a:	d001      	beq.n	8013e30 <_strtod_l+0x2d8>
 8013e2c:	f1ce 0e00 	rsb	lr, lr, #0
 8013e30:	2c00      	cmp	r4, #0
 8013e32:	d151      	bne.n	8013ed8 <_strtod_l+0x380>
 8013e34:	2800      	cmp	r0, #0
 8013e36:	f47f aece 	bne.w	8013bd6 <_strtod_l+0x7e>
 8013e3a:	9a06      	ldr	r2, [sp, #24]
 8013e3c:	2a00      	cmp	r2, #0
 8013e3e:	f47f aeca 	bne.w	8013bd6 <_strtod_l+0x7e>
 8013e42:	9a04      	ldr	r2, [sp, #16]
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	f47f aee4 	bne.w	8013c12 <_strtod_l+0xba>
 8013e4a:	2b4e      	cmp	r3, #78	; 0x4e
 8013e4c:	d027      	beq.n	8013e9e <_strtod_l+0x346>
 8013e4e:	dc21      	bgt.n	8013e94 <_strtod_l+0x33c>
 8013e50:	2b49      	cmp	r3, #73	; 0x49
 8013e52:	f47f aede 	bne.w	8013c12 <_strtod_l+0xba>
 8013e56:	49a0      	ldr	r1, [pc, #640]	; (80140d8 <_strtod_l+0x580>)
 8013e58:	a81b      	add	r0, sp, #108	; 0x6c
 8013e5a:	f002 f851 	bl	8015f00 <__match>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	f43f aed7 	beq.w	8013c12 <_strtod_l+0xba>
 8013e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e66:	499d      	ldr	r1, [pc, #628]	; (80140dc <_strtod_l+0x584>)
 8013e68:	3b01      	subs	r3, #1
 8013e6a:	a81b      	add	r0, sp, #108	; 0x6c
 8013e6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e6e:	f002 f847 	bl	8015f00 <__match>
 8013e72:	b910      	cbnz	r0, 8013e7a <_strtod_l+0x322>
 8013e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e76:	3301      	adds	r3, #1
 8013e78:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e7a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80140f0 <_strtod_l+0x598>
 8013e7e:	f04f 0a00 	mov.w	sl, #0
 8013e82:	e6a8      	b.n	8013bd6 <_strtod_l+0x7e>
 8013e84:	210a      	movs	r1, #10
 8013e86:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013e8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013e8e:	e7b8      	b.n	8013e02 <_strtod_l+0x2aa>
 8013e90:	46be      	mov	lr, r7
 8013e92:	e7c8      	b.n	8013e26 <_strtod_l+0x2ce>
 8013e94:	2b69      	cmp	r3, #105	; 0x69
 8013e96:	d0de      	beq.n	8013e56 <_strtod_l+0x2fe>
 8013e98:	2b6e      	cmp	r3, #110	; 0x6e
 8013e9a:	f47f aeba 	bne.w	8013c12 <_strtod_l+0xba>
 8013e9e:	4990      	ldr	r1, [pc, #576]	; (80140e0 <_strtod_l+0x588>)
 8013ea0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ea2:	f002 f82d 	bl	8015f00 <__match>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	f43f aeb3 	beq.w	8013c12 <_strtod_l+0xba>
 8013eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b28      	cmp	r3, #40	; 0x28
 8013eb2:	d10e      	bne.n	8013ed2 <_strtod_l+0x37a>
 8013eb4:	aa1e      	add	r2, sp, #120	; 0x78
 8013eb6:	498b      	ldr	r1, [pc, #556]	; (80140e4 <_strtod_l+0x58c>)
 8013eb8:	a81b      	add	r0, sp, #108	; 0x6c
 8013eba:	f002 f835 	bl	8015f28 <__hexnan>
 8013ebe:	2805      	cmp	r0, #5
 8013ec0:	d107      	bne.n	8013ed2 <_strtod_l+0x37a>
 8013ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ec4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013ec8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013ecc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013ed0:	e681      	b.n	8013bd6 <_strtod_l+0x7e>
 8013ed2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80140f8 <_strtod_l+0x5a0>
 8013ed6:	e7d2      	b.n	8013e7e <_strtod_l+0x326>
 8013ed8:	ebae 0302 	sub.w	r3, lr, r2
 8013edc:	9306      	str	r3, [sp, #24]
 8013ede:	9b05      	ldr	r3, [sp, #20]
 8013ee0:	9807      	ldr	r0, [sp, #28]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	bf08      	it	eq
 8013ee6:	4623      	moveq	r3, r4
 8013ee8:	2c10      	cmp	r4, #16
 8013eea:	9305      	str	r3, [sp, #20]
 8013eec:	46a0      	mov	r8, r4
 8013eee:	bfa8      	it	ge
 8013ef0:	f04f 0810 	movge.w	r8, #16
 8013ef4:	f7ec fb1e 	bl	8000534 <__aeabi_ui2d>
 8013ef8:	2c09      	cmp	r4, #9
 8013efa:	4682      	mov	sl, r0
 8013efc:	468b      	mov	fp, r1
 8013efe:	dc13      	bgt.n	8013f28 <_strtod_l+0x3d0>
 8013f00:	9b06      	ldr	r3, [sp, #24]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f43f ae67 	beq.w	8013bd6 <_strtod_l+0x7e>
 8013f08:	9b06      	ldr	r3, [sp, #24]
 8013f0a:	dd7a      	ble.n	8014002 <_strtod_l+0x4aa>
 8013f0c:	2b16      	cmp	r3, #22
 8013f0e:	dc61      	bgt.n	8013fd4 <_strtod_l+0x47c>
 8013f10:	4a75      	ldr	r2, [pc, #468]	; (80140e8 <_strtod_l+0x590>)
 8013f12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013f16:	e9de 0100 	ldrd	r0, r1, [lr]
 8013f1a:	4652      	mov	r2, sl
 8013f1c:	465b      	mov	r3, fp
 8013f1e:	f7ec fb83 	bl	8000628 <__aeabi_dmul>
 8013f22:	4682      	mov	sl, r0
 8013f24:	468b      	mov	fp, r1
 8013f26:	e656      	b.n	8013bd6 <_strtod_l+0x7e>
 8013f28:	4b6f      	ldr	r3, [pc, #444]	; (80140e8 <_strtod_l+0x590>)
 8013f2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f32:	f7ec fb79 	bl	8000628 <__aeabi_dmul>
 8013f36:	4606      	mov	r6, r0
 8013f38:	4628      	mov	r0, r5
 8013f3a:	460f      	mov	r7, r1
 8013f3c:	f7ec fafa 	bl	8000534 <__aeabi_ui2d>
 8013f40:	4602      	mov	r2, r0
 8013f42:	460b      	mov	r3, r1
 8013f44:	4630      	mov	r0, r6
 8013f46:	4639      	mov	r1, r7
 8013f48:	f7ec f9b8 	bl	80002bc <__adddf3>
 8013f4c:	2c0f      	cmp	r4, #15
 8013f4e:	4682      	mov	sl, r0
 8013f50:	468b      	mov	fp, r1
 8013f52:	ddd5      	ble.n	8013f00 <_strtod_l+0x3a8>
 8013f54:	9b06      	ldr	r3, [sp, #24]
 8013f56:	eba4 0808 	sub.w	r8, r4, r8
 8013f5a:	4498      	add	r8, r3
 8013f5c:	f1b8 0f00 	cmp.w	r8, #0
 8013f60:	f340 8096 	ble.w	8014090 <_strtod_l+0x538>
 8013f64:	f018 030f 	ands.w	r3, r8, #15
 8013f68:	d00a      	beq.n	8013f80 <_strtod_l+0x428>
 8013f6a:	495f      	ldr	r1, [pc, #380]	; (80140e8 <_strtod_l+0x590>)
 8013f6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f70:	4652      	mov	r2, sl
 8013f72:	465b      	mov	r3, fp
 8013f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f78:	f7ec fb56 	bl	8000628 <__aeabi_dmul>
 8013f7c:	4682      	mov	sl, r0
 8013f7e:	468b      	mov	fp, r1
 8013f80:	f038 080f 	bics.w	r8, r8, #15
 8013f84:	d073      	beq.n	801406e <_strtod_l+0x516>
 8013f86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013f8a:	dd47      	ble.n	801401c <_strtod_l+0x4c4>
 8013f8c:	2400      	movs	r4, #0
 8013f8e:	46a0      	mov	r8, r4
 8013f90:	9407      	str	r4, [sp, #28]
 8013f92:	9405      	str	r4, [sp, #20]
 8013f94:	2322      	movs	r3, #34	; 0x22
 8013f96:	f8df b158 	ldr.w	fp, [pc, #344]	; 80140f0 <_strtod_l+0x598>
 8013f9a:	f8c9 3000 	str.w	r3, [r9]
 8013f9e:	f04f 0a00 	mov.w	sl, #0
 8013fa2:	9b07      	ldr	r3, [sp, #28]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f43f ae16 	beq.w	8013bd6 <_strtod_l+0x7e>
 8013faa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013fac:	4648      	mov	r0, r9
 8013fae:	f002 f931 	bl	8016214 <_Bfree>
 8013fb2:	9905      	ldr	r1, [sp, #20]
 8013fb4:	4648      	mov	r0, r9
 8013fb6:	f002 f92d 	bl	8016214 <_Bfree>
 8013fba:	4641      	mov	r1, r8
 8013fbc:	4648      	mov	r0, r9
 8013fbe:	f002 f929 	bl	8016214 <_Bfree>
 8013fc2:	9907      	ldr	r1, [sp, #28]
 8013fc4:	4648      	mov	r0, r9
 8013fc6:	f002 f925 	bl	8016214 <_Bfree>
 8013fca:	4621      	mov	r1, r4
 8013fcc:	4648      	mov	r0, r9
 8013fce:	f002 f921 	bl	8016214 <_Bfree>
 8013fd2:	e600      	b.n	8013bd6 <_strtod_l+0x7e>
 8013fd4:	9a06      	ldr	r2, [sp, #24]
 8013fd6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	dbba      	blt.n	8013f54 <_strtod_l+0x3fc>
 8013fde:	4d42      	ldr	r5, [pc, #264]	; (80140e8 <_strtod_l+0x590>)
 8013fe0:	f1c4 040f 	rsb	r4, r4, #15
 8013fe4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013fe8:	4652      	mov	r2, sl
 8013fea:	465b      	mov	r3, fp
 8013fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff0:	f7ec fb1a 	bl	8000628 <__aeabi_dmul>
 8013ff4:	9b06      	ldr	r3, [sp, #24]
 8013ff6:	1b1c      	subs	r4, r3, r4
 8013ff8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013ffc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014000:	e78d      	b.n	8013f1e <_strtod_l+0x3c6>
 8014002:	f113 0f16 	cmn.w	r3, #22
 8014006:	dba5      	blt.n	8013f54 <_strtod_l+0x3fc>
 8014008:	4a37      	ldr	r2, [pc, #220]	; (80140e8 <_strtod_l+0x590>)
 801400a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801400e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014012:	4650      	mov	r0, sl
 8014014:	4659      	mov	r1, fp
 8014016:	f7ec fc31 	bl	800087c <__aeabi_ddiv>
 801401a:	e782      	b.n	8013f22 <_strtod_l+0x3ca>
 801401c:	2300      	movs	r3, #0
 801401e:	4e33      	ldr	r6, [pc, #204]	; (80140ec <_strtod_l+0x594>)
 8014020:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014024:	4650      	mov	r0, sl
 8014026:	4659      	mov	r1, fp
 8014028:	461d      	mov	r5, r3
 801402a:	f1b8 0f01 	cmp.w	r8, #1
 801402e:	dc21      	bgt.n	8014074 <_strtod_l+0x51c>
 8014030:	b10b      	cbz	r3, 8014036 <_strtod_l+0x4de>
 8014032:	4682      	mov	sl, r0
 8014034:	468b      	mov	fp, r1
 8014036:	4b2d      	ldr	r3, [pc, #180]	; (80140ec <_strtod_l+0x594>)
 8014038:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801403c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014040:	4652      	mov	r2, sl
 8014042:	465b      	mov	r3, fp
 8014044:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014048:	f7ec faee 	bl	8000628 <__aeabi_dmul>
 801404c:	4b28      	ldr	r3, [pc, #160]	; (80140f0 <_strtod_l+0x598>)
 801404e:	460a      	mov	r2, r1
 8014050:	400b      	ands	r3, r1
 8014052:	4928      	ldr	r1, [pc, #160]	; (80140f4 <_strtod_l+0x59c>)
 8014054:	428b      	cmp	r3, r1
 8014056:	4682      	mov	sl, r0
 8014058:	d898      	bhi.n	8013f8c <_strtod_l+0x434>
 801405a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801405e:	428b      	cmp	r3, r1
 8014060:	bf86      	itte	hi
 8014062:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80140fc <_strtod_l+0x5a4>
 8014066:	f04f 3aff 	movhi.w	sl, #4294967295
 801406a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801406e:	2300      	movs	r3, #0
 8014070:	9304      	str	r3, [sp, #16]
 8014072:	e077      	b.n	8014164 <_strtod_l+0x60c>
 8014074:	f018 0f01 	tst.w	r8, #1
 8014078:	d006      	beq.n	8014088 <_strtod_l+0x530>
 801407a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014082:	f7ec fad1 	bl	8000628 <__aeabi_dmul>
 8014086:	2301      	movs	r3, #1
 8014088:	3501      	adds	r5, #1
 801408a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801408e:	e7cc      	b.n	801402a <_strtod_l+0x4d2>
 8014090:	d0ed      	beq.n	801406e <_strtod_l+0x516>
 8014092:	f1c8 0800 	rsb	r8, r8, #0
 8014096:	f018 020f 	ands.w	r2, r8, #15
 801409a:	d00a      	beq.n	80140b2 <_strtod_l+0x55a>
 801409c:	4b12      	ldr	r3, [pc, #72]	; (80140e8 <_strtod_l+0x590>)
 801409e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140a2:	4650      	mov	r0, sl
 80140a4:	4659      	mov	r1, fp
 80140a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140aa:	f7ec fbe7 	bl	800087c <__aeabi_ddiv>
 80140ae:	4682      	mov	sl, r0
 80140b0:	468b      	mov	fp, r1
 80140b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80140b6:	d0da      	beq.n	801406e <_strtod_l+0x516>
 80140b8:	f1b8 0f1f 	cmp.w	r8, #31
 80140bc:	dd20      	ble.n	8014100 <_strtod_l+0x5a8>
 80140be:	2400      	movs	r4, #0
 80140c0:	46a0      	mov	r8, r4
 80140c2:	9407      	str	r4, [sp, #28]
 80140c4:	9405      	str	r4, [sp, #20]
 80140c6:	2322      	movs	r3, #34	; 0x22
 80140c8:	f04f 0a00 	mov.w	sl, #0
 80140cc:	f04f 0b00 	mov.w	fp, #0
 80140d0:	f8c9 3000 	str.w	r3, [r9]
 80140d4:	e765      	b.n	8013fa2 <_strtod_l+0x44a>
 80140d6:	bf00      	nop
 80140d8:	080181d1 	.word	0x080181d1
 80140dc:	0801825b 	.word	0x0801825b
 80140e0:	080181d9 	.word	0x080181d9
 80140e4:	08018218 	.word	0x08018218
 80140e8:	08018300 	.word	0x08018300
 80140ec:	080182d8 	.word	0x080182d8
 80140f0:	7ff00000 	.word	0x7ff00000
 80140f4:	7ca00000 	.word	0x7ca00000
 80140f8:	fff80000 	.word	0xfff80000
 80140fc:	7fefffff 	.word	0x7fefffff
 8014100:	f018 0310 	ands.w	r3, r8, #16
 8014104:	bf18      	it	ne
 8014106:	236a      	movne	r3, #106	; 0x6a
 8014108:	4da0      	ldr	r5, [pc, #640]	; (801438c <_strtod_l+0x834>)
 801410a:	9304      	str	r3, [sp, #16]
 801410c:	4650      	mov	r0, sl
 801410e:	4659      	mov	r1, fp
 8014110:	2300      	movs	r3, #0
 8014112:	f1b8 0f00 	cmp.w	r8, #0
 8014116:	f300 810a 	bgt.w	801432e <_strtod_l+0x7d6>
 801411a:	b10b      	cbz	r3, 8014120 <_strtod_l+0x5c8>
 801411c:	4682      	mov	sl, r0
 801411e:	468b      	mov	fp, r1
 8014120:	9b04      	ldr	r3, [sp, #16]
 8014122:	b1bb      	cbz	r3, 8014154 <_strtod_l+0x5fc>
 8014124:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014128:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801412c:	2b00      	cmp	r3, #0
 801412e:	4659      	mov	r1, fp
 8014130:	dd10      	ble.n	8014154 <_strtod_l+0x5fc>
 8014132:	2b1f      	cmp	r3, #31
 8014134:	f340 8107 	ble.w	8014346 <_strtod_l+0x7ee>
 8014138:	2b34      	cmp	r3, #52	; 0x34
 801413a:	bfde      	ittt	le
 801413c:	3b20      	suble	r3, #32
 801413e:	f04f 32ff 	movle.w	r2, #4294967295
 8014142:	fa02 f303 	lslle.w	r3, r2, r3
 8014146:	f04f 0a00 	mov.w	sl, #0
 801414a:	bfcc      	ite	gt
 801414c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014150:	ea03 0b01 	andle.w	fp, r3, r1
 8014154:	2200      	movs	r2, #0
 8014156:	2300      	movs	r3, #0
 8014158:	4650      	mov	r0, sl
 801415a:	4659      	mov	r1, fp
 801415c:	f7ec fccc 	bl	8000af8 <__aeabi_dcmpeq>
 8014160:	2800      	cmp	r0, #0
 8014162:	d1ac      	bne.n	80140be <_strtod_l+0x566>
 8014164:	9b07      	ldr	r3, [sp, #28]
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	9a05      	ldr	r2, [sp, #20]
 801416a:	9908      	ldr	r1, [sp, #32]
 801416c:	4623      	mov	r3, r4
 801416e:	4648      	mov	r0, r9
 8014170:	f002 f8a2 	bl	80162b8 <__s2b>
 8014174:	9007      	str	r0, [sp, #28]
 8014176:	2800      	cmp	r0, #0
 8014178:	f43f af08 	beq.w	8013f8c <_strtod_l+0x434>
 801417c:	9a06      	ldr	r2, [sp, #24]
 801417e:	9b06      	ldr	r3, [sp, #24]
 8014180:	2a00      	cmp	r2, #0
 8014182:	f1c3 0300 	rsb	r3, r3, #0
 8014186:	bfa8      	it	ge
 8014188:	2300      	movge	r3, #0
 801418a:	930e      	str	r3, [sp, #56]	; 0x38
 801418c:	2400      	movs	r4, #0
 801418e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014192:	9316      	str	r3, [sp, #88]	; 0x58
 8014194:	46a0      	mov	r8, r4
 8014196:	9b07      	ldr	r3, [sp, #28]
 8014198:	4648      	mov	r0, r9
 801419a:	6859      	ldr	r1, [r3, #4]
 801419c:	f002 f806 	bl	80161ac <_Balloc>
 80141a0:	9005      	str	r0, [sp, #20]
 80141a2:	2800      	cmp	r0, #0
 80141a4:	f43f aef6 	beq.w	8013f94 <_strtod_l+0x43c>
 80141a8:	9b07      	ldr	r3, [sp, #28]
 80141aa:	691a      	ldr	r2, [r3, #16]
 80141ac:	3202      	adds	r2, #2
 80141ae:	f103 010c 	add.w	r1, r3, #12
 80141b2:	0092      	lsls	r2, r2, #2
 80141b4:	300c      	adds	r0, #12
 80141b6:	f7fe fcff 	bl	8012bb8 <memcpy>
 80141ba:	aa1e      	add	r2, sp, #120	; 0x78
 80141bc:	a91d      	add	r1, sp, #116	; 0x74
 80141be:	ec4b ab10 	vmov	d0, sl, fp
 80141c2:	4648      	mov	r0, r9
 80141c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80141c8:	f002 fb32 	bl	8016830 <__d2b>
 80141cc:	901c      	str	r0, [sp, #112]	; 0x70
 80141ce:	2800      	cmp	r0, #0
 80141d0:	f43f aee0 	beq.w	8013f94 <_strtod_l+0x43c>
 80141d4:	2101      	movs	r1, #1
 80141d6:	4648      	mov	r0, r9
 80141d8:	f002 f8fa 	bl	80163d0 <__i2b>
 80141dc:	4680      	mov	r8, r0
 80141de:	2800      	cmp	r0, #0
 80141e0:	f43f aed8 	beq.w	8013f94 <_strtod_l+0x43c>
 80141e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80141e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141e8:	2e00      	cmp	r6, #0
 80141ea:	bfab      	itete	ge
 80141ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80141ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80141f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80141f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80141f4:	bfac      	ite	ge
 80141f6:	18f7      	addge	r7, r6, r3
 80141f8:	1b9d      	sublt	r5, r3, r6
 80141fa:	9b04      	ldr	r3, [sp, #16]
 80141fc:	1af6      	subs	r6, r6, r3
 80141fe:	4416      	add	r6, r2
 8014200:	4b63      	ldr	r3, [pc, #396]	; (8014390 <_strtod_l+0x838>)
 8014202:	3e01      	subs	r6, #1
 8014204:	429e      	cmp	r6, r3
 8014206:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801420a:	f280 80af 	bge.w	801436c <_strtod_l+0x814>
 801420e:	1b9b      	subs	r3, r3, r6
 8014210:	2b1f      	cmp	r3, #31
 8014212:	eba2 0203 	sub.w	r2, r2, r3
 8014216:	f04f 0101 	mov.w	r1, #1
 801421a:	f300 809b 	bgt.w	8014354 <_strtod_l+0x7fc>
 801421e:	fa01 f303 	lsl.w	r3, r1, r3
 8014222:	930f      	str	r3, [sp, #60]	; 0x3c
 8014224:	2300      	movs	r3, #0
 8014226:	930a      	str	r3, [sp, #40]	; 0x28
 8014228:	18be      	adds	r6, r7, r2
 801422a:	9b04      	ldr	r3, [sp, #16]
 801422c:	42b7      	cmp	r7, r6
 801422e:	4415      	add	r5, r2
 8014230:	441d      	add	r5, r3
 8014232:	463b      	mov	r3, r7
 8014234:	bfa8      	it	ge
 8014236:	4633      	movge	r3, r6
 8014238:	42ab      	cmp	r3, r5
 801423a:	bfa8      	it	ge
 801423c:	462b      	movge	r3, r5
 801423e:	2b00      	cmp	r3, #0
 8014240:	bfc2      	ittt	gt
 8014242:	1af6      	subgt	r6, r6, r3
 8014244:	1aed      	subgt	r5, r5, r3
 8014246:	1aff      	subgt	r7, r7, r3
 8014248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801424a:	b1bb      	cbz	r3, 801427c <_strtod_l+0x724>
 801424c:	4641      	mov	r1, r8
 801424e:	461a      	mov	r2, r3
 8014250:	4648      	mov	r0, r9
 8014252:	f002 f95d 	bl	8016510 <__pow5mult>
 8014256:	4680      	mov	r8, r0
 8014258:	2800      	cmp	r0, #0
 801425a:	f43f ae9b 	beq.w	8013f94 <_strtod_l+0x43c>
 801425e:	4601      	mov	r1, r0
 8014260:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014262:	4648      	mov	r0, r9
 8014264:	f002 f8bd 	bl	80163e2 <__multiply>
 8014268:	900c      	str	r0, [sp, #48]	; 0x30
 801426a:	2800      	cmp	r0, #0
 801426c:	f43f ae92 	beq.w	8013f94 <_strtod_l+0x43c>
 8014270:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014272:	4648      	mov	r0, r9
 8014274:	f001 ffce 	bl	8016214 <_Bfree>
 8014278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801427a:	931c      	str	r3, [sp, #112]	; 0x70
 801427c:	2e00      	cmp	r6, #0
 801427e:	dc7a      	bgt.n	8014376 <_strtod_l+0x81e>
 8014280:	9b06      	ldr	r3, [sp, #24]
 8014282:	2b00      	cmp	r3, #0
 8014284:	dd08      	ble.n	8014298 <_strtod_l+0x740>
 8014286:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014288:	9905      	ldr	r1, [sp, #20]
 801428a:	4648      	mov	r0, r9
 801428c:	f002 f940 	bl	8016510 <__pow5mult>
 8014290:	9005      	str	r0, [sp, #20]
 8014292:	2800      	cmp	r0, #0
 8014294:	f43f ae7e 	beq.w	8013f94 <_strtod_l+0x43c>
 8014298:	2d00      	cmp	r5, #0
 801429a:	dd08      	ble.n	80142ae <_strtod_l+0x756>
 801429c:	462a      	mov	r2, r5
 801429e:	9905      	ldr	r1, [sp, #20]
 80142a0:	4648      	mov	r0, r9
 80142a2:	f002 f983 	bl	80165ac <__lshift>
 80142a6:	9005      	str	r0, [sp, #20]
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f43f ae73 	beq.w	8013f94 <_strtod_l+0x43c>
 80142ae:	2f00      	cmp	r7, #0
 80142b0:	dd08      	ble.n	80142c4 <_strtod_l+0x76c>
 80142b2:	4641      	mov	r1, r8
 80142b4:	463a      	mov	r2, r7
 80142b6:	4648      	mov	r0, r9
 80142b8:	f002 f978 	bl	80165ac <__lshift>
 80142bc:	4680      	mov	r8, r0
 80142be:	2800      	cmp	r0, #0
 80142c0:	f43f ae68 	beq.w	8013f94 <_strtod_l+0x43c>
 80142c4:	9a05      	ldr	r2, [sp, #20]
 80142c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142c8:	4648      	mov	r0, r9
 80142ca:	f002 f9dd 	bl	8016688 <__mdiff>
 80142ce:	4604      	mov	r4, r0
 80142d0:	2800      	cmp	r0, #0
 80142d2:	f43f ae5f 	beq.w	8013f94 <_strtod_l+0x43c>
 80142d6:	68c3      	ldr	r3, [r0, #12]
 80142d8:	930c      	str	r3, [sp, #48]	; 0x30
 80142da:	2300      	movs	r3, #0
 80142dc:	60c3      	str	r3, [r0, #12]
 80142de:	4641      	mov	r1, r8
 80142e0:	f002 f9b8 	bl	8016654 <__mcmp>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	da55      	bge.n	8014394 <_strtod_l+0x83c>
 80142e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ea:	b9e3      	cbnz	r3, 8014326 <_strtod_l+0x7ce>
 80142ec:	f1ba 0f00 	cmp.w	sl, #0
 80142f0:	d119      	bne.n	8014326 <_strtod_l+0x7ce>
 80142f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142f6:	b9b3      	cbnz	r3, 8014326 <_strtod_l+0x7ce>
 80142f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142fc:	0d1b      	lsrs	r3, r3, #20
 80142fe:	051b      	lsls	r3, r3, #20
 8014300:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014304:	d90f      	bls.n	8014326 <_strtod_l+0x7ce>
 8014306:	6963      	ldr	r3, [r4, #20]
 8014308:	b913      	cbnz	r3, 8014310 <_strtod_l+0x7b8>
 801430a:	6923      	ldr	r3, [r4, #16]
 801430c:	2b01      	cmp	r3, #1
 801430e:	dd0a      	ble.n	8014326 <_strtod_l+0x7ce>
 8014310:	4621      	mov	r1, r4
 8014312:	2201      	movs	r2, #1
 8014314:	4648      	mov	r0, r9
 8014316:	f002 f949 	bl	80165ac <__lshift>
 801431a:	4641      	mov	r1, r8
 801431c:	4604      	mov	r4, r0
 801431e:	f002 f999 	bl	8016654 <__mcmp>
 8014322:	2800      	cmp	r0, #0
 8014324:	dc67      	bgt.n	80143f6 <_strtod_l+0x89e>
 8014326:	9b04      	ldr	r3, [sp, #16]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d171      	bne.n	8014410 <_strtod_l+0x8b8>
 801432c:	e63d      	b.n	8013faa <_strtod_l+0x452>
 801432e:	f018 0f01 	tst.w	r8, #1
 8014332:	d004      	beq.n	801433e <_strtod_l+0x7e6>
 8014334:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014338:	f7ec f976 	bl	8000628 <__aeabi_dmul>
 801433c:	2301      	movs	r3, #1
 801433e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014342:	3508      	adds	r5, #8
 8014344:	e6e5      	b.n	8014112 <_strtod_l+0x5ba>
 8014346:	f04f 32ff 	mov.w	r2, #4294967295
 801434a:	fa02 f303 	lsl.w	r3, r2, r3
 801434e:	ea03 0a0a 	and.w	sl, r3, sl
 8014352:	e6ff      	b.n	8014154 <_strtod_l+0x5fc>
 8014354:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014358:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801435c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014360:	36e2      	adds	r6, #226	; 0xe2
 8014362:	fa01 f306 	lsl.w	r3, r1, r6
 8014366:	930a      	str	r3, [sp, #40]	; 0x28
 8014368:	910f      	str	r1, [sp, #60]	; 0x3c
 801436a:	e75d      	b.n	8014228 <_strtod_l+0x6d0>
 801436c:	2300      	movs	r3, #0
 801436e:	930a      	str	r3, [sp, #40]	; 0x28
 8014370:	2301      	movs	r3, #1
 8014372:	930f      	str	r3, [sp, #60]	; 0x3c
 8014374:	e758      	b.n	8014228 <_strtod_l+0x6d0>
 8014376:	4632      	mov	r2, r6
 8014378:	991c      	ldr	r1, [sp, #112]	; 0x70
 801437a:	4648      	mov	r0, r9
 801437c:	f002 f916 	bl	80165ac <__lshift>
 8014380:	901c      	str	r0, [sp, #112]	; 0x70
 8014382:	2800      	cmp	r0, #0
 8014384:	f47f af7c 	bne.w	8014280 <_strtod_l+0x728>
 8014388:	e604      	b.n	8013f94 <_strtod_l+0x43c>
 801438a:	bf00      	nop
 801438c:	08018230 	.word	0x08018230
 8014390:	fffffc02 	.word	0xfffffc02
 8014394:	465d      	mov	r5, fp
 8014396:	f040 8086 	bne.w	80144a6 <_strtod_l+0x94e>
 801439a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801439c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143a0:	b32a      	cbz	r2, 80143ee <_strtod_l+0x896>
 80143a2:	4aaf      	ldr	r2, [pc, #700]	; (8014660 <_strtod_l+0xb08>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d153      	bne.n	8014450 <_strtod_l+0x8f8>
 80143a8:	9b04      	ldr	r3, [sp, #16]
 80143aa:	4650      	mov	r0, sl
 80143ac:	b1d3      	cbz	r3, 80143e4 <_strtod_l+0x88c>
 80143ae:	4aad      	ldr	r2, [pc, #692]	; (8014664 <_strtod_l+0xb0c>)
 80143b0:	402a      	ands	r2, r5
 80143b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80143b6:	f04f 31ff 	mov.w	r1, #4294967295
 80143ba:	d816      	bhi.n	80143ea <_strtod_l+0x892>
 80143bc:	0d12      	lsrs	r2, r2, #20
 80143be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80143c2:	fa01 f303 	lsl.w	r3, r1, r3
 80143c6:	4298      	cmp	r0, r3
 80143c8:	d142      	bne.n	8014450 <_strtod_l+0x8f8>
 80143ca:	4ba7      	ldr	r3, [pc, #668]	; (8014668 <_strtod_l+0xb10>)
 80143cc:	429d      	cmp	r5, r3
 80143ce:	d102      	bne.n	80143d6 <_strtod_l+0x87e>
 80143d0:	3001      	adds	r0, #1
 80143d2:	f43f addf 	beq.w	8013f94 <_strtod_l+0x43c>
 80143d6:	4ba3      	ldr	r3, [pc, #652]	; (8014664 <_strtod_l+0xb0c>)
 80143d8:	402b      	ands	r3, r5
 80143da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80143de:	f04f 0a00 	mov.w	sl, #0
 80143e2:	e7a0      	b.n	8014326 <_strtod_l+0x7ce>
 80143e4:	f04f 33ff 	mov.w	r3, #4294967295
 80143e8:	e7ed      	b.n	80143c6 <_strtod_l+0x86e>
 80143ea:	460b      	mov	r3, r1
 80143ec:	e7eb      	b.n	80143c6 <_strtod_l+0x86e>
 80143ee:	bb7b      	cbnz	r3, 8014450 <_strtod_l+0x8f8>
 80143f0:	f1ba 0f00 	cmp.w	sl, #0
 80143f4:	d12c      	bne.n	8014450 <_strtod_l+0x8f8>
 80143f6:	9904      	ldr	r1, [sp, #16]
 80143f8:	4a9a      	ldr	r2, [pc, #616]	; (8014664 <_strtod_l+0xb0c>)
 80143fa:	465b      	mov	r3, fp
 80143fc:	b1f1      	cbz	r1, 801443c <_strtod_l+0x8e4>
 80143fe:	ea02 010b 	and.w	r1, r2, fp
 8014402:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014406:	dc19      	bgt.n	801443c <_strtod_l+0x8e4>
 8014408:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801440c:	f77f ae5b 	ble.w	80140c6 <_strtod_l+0x56e>
 8014410:	4a96      	ldr	r2, [pc, #600]	; (801466c <_strtod_l+0xb14>)
 8014412:	2300      	movs	r3, #0
 8014414:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014418:	4650      	mov	r0, sl
 801441a:	4659      	mov	r1, fp
 801441c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014420:	f7ec f902 	bl	8000628 <__aeabi_dmul>
 8014424:	4682      	mov	sl, r0
 8014426:	468b      	mov	fp, r1
 8014428:	2900      	cmp	r1, #0
 801442a:	f47f adbe 	bne.w	8013faa <_strtod_l+0x452>
 801442e:	2800      	cmp	r0, #0
 8014430:	f47f adbb 	bne.w	8013faa <_strtod_l+0x452>
 8014434:	2322      	movs	r3, #34	; 0x22
 8014436:	f8c9 3000 	str.w	r3, [r9]
 801443a:	e5b6      	b.n	8013faa <_strtod_l+0x452>
 801443c:	4013      	ands	r3, r2
 801443e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014442:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014446:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801444a:	f04f 3aff 	mov.w	sl, #4294967295
 801444e:	e76a      	b.n	8014326 <_strtod_l+0x7ce>
 8014450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014452:	b193      	cbz	r3, 801447a <_strtod_l+0x922>
 8014454:	422b      	tst	r3, r5
 8014456:	f43f af66 	beq.w	8014326 <_strtod_l+0x7ce>
 801445a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801445c:	9a04      	ldr	r2, [sp, #16]
 801445e:	4650      	mov	r0, sl
 8014460:	4659      	mov	r1, fp
 8014462:	b173      	cbz	r3, 8014482 <_strtod_l+0x92a>
 8014464:	f7ff fb5b 	bl	8013b1e <sulp>
 8014468:	4602      	mov	r2, r0
 801446a:	460b      	mov	r3, r1
 801446c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014470:	f7eb ff24 	bl	80002bc <__adddf3>
 8014474:	4682      	mov	sl, r0
 8014476:	468b      	mov	fp, r1
 8014478:	e755      	b.n	8014326 <_strtod_l+0x7ce>
 801447a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801447c:	ea13 0f0a 	tst.w	r3, sl
 8014480:	e7e9      	b.n	8014456 <_strtod_l+0x8fe>
 8014482:	f7ff fb4c 	bl	8013b1e <sulp>
 8014486:	4602      	mov	r2, r0
 8014488:	460b      	mov	r3, r1
 801448a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801448e:	f7eb ff13 	bl	80002b8 <__aeabi_dsub>
 8014492:	2200      	movs	r2, #0
 8014494:	2300      	movs	r3, #0
 8014496:	4682      	mov	sl, r0
 8014498:	468b      	mov	fp, r1
 801449a:	f7ec fb2d 	bl	8000af8 <__aeabi_dcmpeq>
 801449e:	2800      	cmp	r0, #0
 80144a0:	f47f ae11 	bne.w	80140c6 <_strtod_l+0x56e>
 80144a4:	e73f      	b.n	8014326 <_strtod_l+0x7ce>
 80144a6:	4641      	mov	r1, r8
 80144a8:	4620      	mov	r0, r4
 80144aa:	f002 fa10 	bl	80168ce <__ratio>
 80144ae:	ec57 6b10 	vmov	r6, r7, d0
 80144b2:	2200      	movs	r2, #0
 80144b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80144b8:	ee10 0a10 	vmov	r0, s0
 80144bc:	4639      	mov	r1, r7
 80144be:	f7ec fb2f 	bl	8000b20 <__aeabi_dcmple>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	d077      	beq.n	80145b6 <_strtod_l+0xa5e>
 80144c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d04a      	beq.n	8014562 <_strtod_l+0xa0a>
 80144cc:	4b68      	ldr	r3, [pc, #416]	; (8014670 <_strtod_l+0xb18>)
 80144ce:	2200      	movs	r2, #0
 80144d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80144d4:	4f66      	ldr	r7, [pc, #408]	; (8014670 <_strtod_l+0xb18>)
 80144d6:	2600      	movs	r6, #0
 80144d8:	4b62      	ldr	r3, [pc, #392]	; (8014664 <_strtod_l+0xb0c>)
 80144da:	402b      	ands	r3, r5
 80144dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80144de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144e0:	4b64      	ldr	r3, [pc, #400]	; (8014674 <_strtod_l+0xb1c>)
 80144e2:	429a      	cmp	r2, r3
 80144e4:	f040 80ce 	bne.w	8014684 <_strtod_l+0xb2c>
 80144e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80144f4:	ec4b ab10 	vmov	d0, sl, fp
 80144f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80144fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014500:	f002 f920 	bl	8016744 <__ulp>
 8014504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014508:	ec53 2b10 	vmov	r2, r3, d0
 801450c:	f7ec f88c 	bl	8000628 <__aeabi_dmul>
 8014510:	4652      	mov	r2, sl
 8014512:	465b      	mov	r3, fp
 8014514:	f7eb fed2 	bl	80002bc <__adddf3>
 8014518:	460b      	mov	r3, r1
 801451a:	4952      	ldr	r1, [pc, #328]	; (8014664 <_strtod_l+0xb0c>)
 801451c:	4a56      	ldr	r2, [pc, #344]	; (8014678 <_strtod_l+0xb20>)
 801451e:	4019      	ands	r1, r3
 8014520:	4291      	cmp	r1, r2
 8014522:	4682      	mov	sl, r0
 8014524:	d95b      	bls.n	80145de <_strtod_l+0xa86>
 8014526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014528:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801452c:	4293      	cmp	r3, r2
 801452e:	d103      	bne.n	8014538 <_strtod_l+0x9e0>
 8014530:	9b08      	ldr	r3, [sp, #32]
 8014532:	3301      	adds	r3, #1
 8014534:	f43f ad2e 	beq.w	8013f94 <_strtod_l+0x43c>
 8014538:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014668 <_strtod_l+0xb10>
 801453c:	f04f 3aff 	mov.w	sl, #4294967295
 8014540:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014542:	4648      	mov	r0, r9
 8014544:	f001 fe66 	bl	8016214 <_Bfree>
 8014548:	9905      	ldr	r1, [sp, #20]
 801454a:	4648      	mov	r0, r9
 801454c:	f001 fe62 	bl	8016214 <_Bfree>
 8014550:	4641      	mov	r1, r8
 8014552:	4648      	mov	r0, r9
 8014554:	f001 fe5e 	bl	8016214 <_Bfree>
 8014558:	4621      	mov	r1, r4
 801455a:	4648      	mov	r0, r9
 801455c:	f001 fe5a 	bl	8016214 <_Bfree>
 8014560:	e619      	b.n	8014196 <_strtod_l+0x63e>
 8014562:	f1ba 0f00 	cmp.w	sl, #0
 8014566:	d11a      	bne.n	801459e <_strtod_l+0xa46>
 8014568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801456c:	b9eb      	cbnz	r3, 80145aa <_strtod_l+0xa52>
 801456e:	2200      	movs	r2, #0
 8014570:	4b3f      	ldr	r3, [pc, #252]	; (8014670 <_strtod_l+0xb18>)
 8014572:	4630      	mov	r0, r6
 8014574:	4639      	mov	r1, r7
 8014576:	f7ec fac9 	bl	8000b0c <__aeabi_dcmplt>
 801457a:	b9c8      	cbnz	r0, 80145b0 <_strtod_l+0xa58>
 801457c:	4630      	mov	r0, r6
 801457e:	4639      	mov	r1, r7
 8014580:	2200      	movs	r2, #0
 8014582:	4b3e      	ldr	r3, [pc, #248]	; (801467c <_strtod_l+0xb24>)
 8014584:	f7ec f850 	bl	8000628 <__aeabi_dmul>
 8014588:	4606      	mov	r6, r0
 801458a:	460f      	mov	r7, r1
 801458c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014590:	9618      	str	r6, [sp, #96]	; 0x60
 8014592:	9319      	str	r3, [sp, #100]	; 0x64
 8014594:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014598:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801459c:	e79c      	b.n	80144d8 <_strtod_l+0x980>
 801459e:	f1ba 0f01 	cmp.w	sl, #1
 80145a2:	d102      	bne.n	80145aa <_strtod_l+0xa52>
 80145a4:	2d00      	cmp	r5, #0
 80145a6:	f43f ad8e 	beq.w	80140c6 <_strtod_l+0x56e>
 80145aa:	2200      	movs	r2, #0
 80145ac:	4b34      	ldr	r3, [pc, #208]	; (8014680 <_strtod_l+0xb28>)
 80145ae:	e78f      	b.n	80144d0 <_strtod_l+0x978>
 80145b0:	2600      	movs	r6, #0
 80145b2:	4f32      	ldr	r7, [pc, #200]	; (801467c <_strtod_l+0xb24>)
 80145b4:	e7ea      	b.n	801458c <_strtod_l+0xa34>
 80145b6:	4b31      	ldr	r3, [pc, #196]	; (801467c <_strtod_l+0xb24>)
 80145b8:	4630      	mov	r0, r6
 80145ba:	4639      	mov	r1, r7
 80145bc:	2200      	movs	r2, #0
 80145be:	f7ec f833 	bl	8000628 <__aeabi_dmul>
 80145c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145c4:	4606      	mov	r6, r0
 80145c6:	460f      	mov	r7, r1
 80145c8:	b933      	cbnz	r3, 80145d8 <_strtod_l+0xa80>
 80145ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145ce:	9010      	str	r0, [sp, #64]	; 0x40
 80145d0:	9311      	str	r3, [sp, #68]	; 0x44
 80145d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80145d6:	e7df      	b.n	8014598 <_strtod_l+0xa40>
 80145d8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80145dc:	e7f9      	b.n	80145d2 <_strtod_l+0xa7a>
 80145de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80145e2:	9b04      	ldr	r3, [sp, #16]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d1ab      	bne.n	8014540 <_strtod_l+0x9e8>
 80145e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80145ec:	0d1b      	lsrs	r3, r3, #20
 80145ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145f0:	051b      	lsls	r3, r3, #20
 80145f2:	429a      	cmp	r2, r3
 80145f4:	465d      	mov	r5, fp
 80145f6:	d1a3      	bne.n	8014540 <_strtod_l+0x9e8>
 80145f8:	4639      	mov	r1, r7
 80145fa:	4630      	mov	r0, r6
 80145fc:	f7ec fac4 	bl	8000b88 <__aeabi_d2iz>
 8014600:	f7eb ffa8 	bl	8000554 <__aeabi_i2d>
 8014604:	460b      	mov	r3, r1
 8014606:	4602      	mov	r2, r0
 8014608:	4639      	mov	r1, r7
 801460a:	4630      	mov	r0, r6
 801460c:	f7eb fe54 	bl	80002b8 <__aeabi_dsub>
 8014610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014612:	4606      	mov	r6, r0
 8014614:	460f      	mov	r7, r1
 8014616:	b933      	cbnz	r3, 8014626 <_strtod_l+0xace>
 8014618:	f1ba 0f00 	cmp.w	sl, #0
 801461c:	d103      	bne.n	8014626 <_strtod_l+0xace>
 801461e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014622:	2d00      	cmp	r5, #0
 8014624:	d06d      	beq.n	8014702 <_strtod_l+0xbaa>
 8014626:	a30a      	add	r3, pc, #40	; (adr r3, 8014650 <_strtod_l+0xaf8>)
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	4630      	mov	r0, r6
 801462e:	4639      	mov	r1, r7
 8014630:	f7ec fa6c 	bl	8000b0c <__aeabi_dcmplt>
 8014634:	2800      	cmp	r0, #0
 8014636:	f47f acb8 	bne.w	8013faa <_strtod_l+0x452>
 801463a:	a307      	add	r3, pc, #28	; (adr r3, 8014658 <_strtod_l+0xb00>)
 801463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014640:	4630      	mov	r0, r6
 8014642:	4639      	mov	r1, r7
 8014644:	f7ec fa80 	bl	8000b48 <__aeabi_dcmpgt>
 8014648:	2800      	cmp	r0, #0
 801464a:	f43f af79 	beq.w	8014540 <_strtod_l+0x9e8>
 801464e:	e4ac      	b.n	8013faa <_strtod_l+0x452>
 8014650:	94a03595 	.word	0x94a03595
 8014654:	3fdfffff 	.word	0x3fdfffff
 8014658:	35afe535 	.word	0x35afe535
 801465c:	3fe00000 	.word	0x3fe00000
 8014660:	000fffff 	.word	0x000fffff
 8014664:	7ff00000 	.word	0x7ff00000
 8014668:	7fefffff 	.word	0x7fefffff
 801466c:	39500000 	.word	0x39500000
 8014670:	3ff00000 	.word	0x3ff00000
 8014674:	7fe00000 	.word	0x7fe00000
 8014678:	7c9fffff 	.word	0x7c9fffff
 801467c:	3fe00000 	.word	0x3fe00000
 8014680:	bff00000 	.word	0xbff00000
 8014684:	9b04      	ldr	r3, [sp, #16]
 8014686:	b333      	cbz	r3, 80146d6 <_strtod_l+0xb7e>
 8014688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801468a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801468e:	d822      	bhi.n	80146d6 <_strtod_l+0xb7e>
 8014690:	a327      	add	r3, pc, #156	; (adr r3, 8014730 <_strtod_l+0xbd8>)
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	4630      	mov	r0, r6
 8014698:	4639      	mov	r1, r7
 801469a:	f7ec fa41 	bl	8000b20 <__aeabi_dcmple>
 801469e:	b1a0      	cbz	r0, 80146ca <_strtod_l+0xb72>
 80146a0:	4639      	mov	r1, r7
 80146a2:	4630      	mov	r0, r6
 80146a4:	f7ec fa98 	bl	8000bd8 <__aeabi_d2uiz>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	bf08      	it	eq
 80146ac:	2001      	moveq	r0, #1
 80146ae:	f7eb ff41 	bl	8000534 <__aeabi_ui2d>
 80146b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146b4:	4606      	mov	r6, r0
 80146b6:	460f      	mov	r7, r1
 80146b8:	bb03      	cbnz	r3, 80146fc <_strtod_l+0xba4>
 80146ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146be:	9012      	str	r0, [sp, #72]	; 0x48
 80146c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80146c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80146c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80146ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80146d2:	1a9b      	subs	r3, r3, r2
 80146d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80146d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80146da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80146de:	f002 f831 	bl	8016744 <__ulp>
 80146e2:	4650      	mov	r0, sl
 80146e4:	ec53 2b10 	vmov	r2, r3, d0
 80146e8:	4659      	mov	r1, fp
 80146ea:	f7eb ff9d 	bl	8000628 <__aeabi_dmul>
 80146ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146f2:	f7eb fde3 	bl	80002bc <__adddf3>
 80146f6:	4682      	mov	sl, r0
 80146f8:	468b      	mov	fp, r1
 80146fa:	e772      	b.n	80145e2 <_strtod_l+0xa8a>
 80146fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014700:	e7df      	b.n	80146c2 <_strtod_l+0xb6a>
 8014702:	a30d      	add	r3, pc, #52	; (adr r3, 8014738 <_strtod_l+0xbe0>)
 8014704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014708:	f7ec fa00 	bl	8000b0c <__aeabi_dcmplt>
 801470c:	e79c      	b.n	8014648 <_strtod_l+0xaf0>
 801470e:	2300      	movs	r3, #0
 8014710:	930d      	str	r3, [sp, #52]	; 0x34
 8014712:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014716:	6013      	str	r3, [r2, #0]
 8014718:	f7ff ba61 	b.w	8013bde <_strtod_l+0x86>
 801471c:	2b65      	cmp	r3, #101	; 0x65
 801471e:	f04f 0200 	mov.w	r2, #0
 8014722:	f43f ab4e 	beq.w	8013dc2 <_strtod_l+0x26a>
 8014726:	2101      	movs	r1, #1
 8014728:	4614      	mov	r4, r2
 801472a:	9104      	str	r1, [sp, #16]
 801472c:	f7ff bacb 	b.w	8013cc6 <_strtod_l+0x16e>
 8014730:	ffc00000 	.word	0xffc00000
 8014734:	41dfffff 	.word	0x41dfffff
 8014738:	94a03595 	.word	0x94a03595
 801473c:	3fcfffff 	.word	0x3fcfffff

08014740 <_strtod_r>:
 8014740:	4b05      	ldr	r3, [pc, #20]	; (8014758 <_strtod_r+0x18>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	b410      	push	{r4}
 8014746:	6a1b      	ldr	r3, [r3, #32]
 8014748:	4c04      	ldr	r4, [pc, #16]	; (801475c <_strtod_r+0x1c>)
 801474a:	2b00      	cmp	r3, #0
 801474c:	bf08      	it	eq
 801474e:	4623      	moveq	r3, r4
 8014750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014754:	f7ff ba00 	b.w	8013b58 <_strtod_l>
 8014758:	2000000c 	.word	0x2000000c
 801475c:	20000070 	.word	0x20000070

08014760 <_strtol_l.isra.0>:
 8014760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014764:	4680      	mov	r8, r0
 8014766:	4689      	mov	r9, r1
 8014768:	4692      	mov	sl, r2
 801476a:	461e      	mov	r6, r3
 801476c:	460f      	mov	r7, r1
 801476e:	463d      	mov	r5, r7
 8014770:	9808      	ldr	r0, [sp, #32]
 8014772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014776:	f001 fc67 	bl	8016048 <__locale_ctype_ptr_l>
 801477a:	4420      	add	r0, r4
 801477c:	7843      	ldrb	r3, [r0, #1]
 801477e:	f013 0308 	ands.w	r3, r3, #8
 8014782:	d132      	bne.n	80147ea <_strtol_l.isra.0+0x8a>
 8014784:	2c2d      	cmp	r4, #45	; 0x2d
 8014786:	d132      	bne.n	80147ee <_strtol_l.isra.0+0x8e>
 8014788:	787c      	ldrb	r4, [r7, #1]
 801478a:	1cbd      	adds	r5, r7, #2
 801478c:	2201      	movs	r2, #1
 801478e:	2e00      	cmp	r6, #0
 8014790:	d05d      	beq.n	801484e <_strtol_l.isra.0+0xee>
 8014792:	2e10      	cmp	r6, #16
 8014794:	d109      	bne.n	80147aa <_strtol_l.isra.0+0x4a>
 8014796:	2c30      	cmp	r4, #48	; 0x30
 8014798:	d107      	bne.n	80147aa <_strtol_l.isra.0+0x4a>
 801479a:	782b      	ldrb	r3, [r5, #0]
 801479c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80147a0:	2b58      	cmp	r3, #88	; 0x58
 80147a2:	d14f      	bne.n	8014844 <_strtol_l.isra.0+0xe4>
 80147a4:	786c      	ldrb	r4, [r5, #1]
 80147a6:	2610      	movs	r6, #16
 80147a8:	3502      	adds	r5, #2
 80147aa:	2a00      	cmp	r2, #0
 80147ac:	bf14      	ite	ne
 80147ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80147b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80147b6:	2700      	movs	r7, #0
 80147b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80147bc:	4638      	mov	r0, r7
 80147be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80147c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80147c6:	2b09      	cmp	r3, #9
 80147c8:	d817      	bhi.n	80147fa <_strtol_l.isra.0+0x9a>
 80147ca:	461c      	mov	r4, r3
 80147cc:	42a6      	cmp	r6, r4
 80147ce:	dd23      	ble.n	8014818 <_strtol_l.isra.0+0xb8>
 80147d0:	1c7b      	adds	r3, r7, #1
 80147d2:	d007      	beq.n	80147e4 <_strtol_l.isra.0+0x84>
 80147d4:	4584      	cmp	ip, r0
 80147d6:	d31c      	bcc.n	8014812 <_strtol_l.isra.0+0xb2>
 80147d8:	d101      	bne.n	80147de <_strtol_l.isra.0+0x7e>
 80147da:	45a6      	cmp	lr, r4
 80147dc:	db19      	blt.n	8014812 <_strtol_l.isra.0+0xb2>
 80147de:	fb00 4006 	mla	r0, r0, r6, r4
 80147e2:	2701      	movs	r7, #1
 80147e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147e8:	e7eb      	b.n	80147c2 <_strtol_l.isra.0+0x62>
 80147ea:	462f      	mov	r7, r5
 80147ec:	e7bf      	b.n	801476e <_strtol_l.isra.0+0xe>
 80147ee:	2c2b      	cmp	r4, #43	; 0x2b
 80147f0:	bf04      	itt	eq
 80147f2:	1cbd      	addeq	r5, r7, #2
 80147f4:	787c      	ldrbeq	r4, [r7, #1]
 80147f6:	461a      	mov	r2, r3
 80147f8:	e7c9      	b.n	801478e <_strtol_l.isra.0+0x2e>
 80147fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80147fe:	2b19      	cmp	r3, #25
 8014800:	d801      	bhi.n	8014806 <_strtol_l.isra.0+0xa6>
 8014802:	3c37      	subs	r4, #55	; 0x37
 8014804:	e7e2      	b.n	80147cc <_strtol_l.isra.0+0x6c>
 8014806:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801480a:	2b19      	cmp	r3, #25
 801480c:	d804      	bhi.n	8014818 <_strtol_l.isra.0+0xb8>
 801480e:	3c57      	subs	r4, #87	; 0x57
 8014810:	e7dc      	b.n	80147cc <_strtol_l.isra.0+0x6c>
 8014812:	f04f 37ff 	mov.w	r7, #4294967295
 8014816:	e7e5      	b.n	80147e4 <_strtol_l.isra.0+0x84>
 8014818:	1c7b      	adds	r3, r7, #1
 801481a:	d108      	bne.n	801482e <_strtol_l.isra.0+0xce>
 801481c:	2322      	movs	r3, #34	; 0x22
 801481e:	f8c8 3000 	str.w	r3, [r8]
 8014822:	4608      	mov	r0, r1
 8014824:	f1ba 0f00 	cmp.w	sl, #0
 8014828:	d107      	bne.n	801483a <_strtol_l.isra.0+0xda>
 801482a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801482e:	b102      	cbz	r2, 8014832 <_strtol_l.isra.0+0xd2>
 8014830:	4240      	negs	r0, r0
 8014832:	f1ba 0f00 	cmp.w	sl, #0
 8014836:	d0f8      	beq.n	801482a <_strtol_l.isra.0+0xca>
 8014838:	b10f      	cbz	r7, 801483e <_strtol_l.isra.0+0xde>
 801483a:	f105 39ff 	add.w	r9, r5, #4294967295
 801483e:	f8ca 9000 	str.w	r9, [sl]
 8014842:	e7f2      	b.n	801482a <_strtol_l.isra.0+0xca>
 8014844:	2430      	movs	r4, #48	; 0x30
 8014846:	2e00      	cmp	r6, #0
 8014848:	d1af      	bne.n	80147aa <_strtol_l.isra.0+0x4a>
 801484a:	2608      	movs	r6, #8
 801484c:	e7ad      	b.n	80147aa <_strtol_l.isra.0+0x4a>
 801484e:	2c30      	cmp	r4, #48	; 0x30
 8014850:	d0a3      	beq.n	801479a <_strtol_l.isra.0+0x3a>
 8014852:	260a      	movs	r6, #10
 8014854:	e7a9      	b.n	80147aa <_strtol_l.isra.0+0x4a>
	...

08014858 <_strtol_r>:
 8014858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801485a:	4c06      	ldr	r4, [pc, #24]	; (8014874 <_strtol_r+0x1c>)
 801485c:	4d06      	ldr	r5, [pc, #24]	; (8014878 <_strtol_r+0x20>)
 801485e:	6824      	ldr	r4, [r4, #0]
 8014860:	6a24      	ldr	r4, [r4, #32]
 8014862:	2c00      	cmp	r4, #0
 8014864:	bf08      	it	eq
 8014866:	462c      	moveq	r4, r5
 8014868:	9400      	str	r4, [sp, #0]
 801486a:	f7ff ff79 	bl	8014760 <_strtol_l.isra.0>
 801486e:	b003      	add	sp, #12
 8014870:	bd30      	pop	{r4, r5, pc}
 8014872:	bf00      	nop
 8014874:	2000000c 	.word	0x2000000c
 8014878:	20000070 	.word	0x20000070

0801487c <_vsiprintf_r>:
 801487c:	b500      	push	{lr}
 801487e:	b09b      	sub	sp, #108	; 0x6c
 8014880:	9100      	str	r1, [sp, #0]
 8014882:	9104      	str	r1, [sp, #16]
 8014884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014888:	9105      	str	r1, [sp, #20]
 801488a:	9102      	str	r1, [sp, #8]
 801488c:	4905      	ldr	r1, [pc, #20]	; (80148a4 <_vsiprintf_r+0x28>)
 801488e:	9103      	str	r1, [sp, #12]
 8014890:	4669      	mov	r1, sp
 8014892:	f002 f99b 	bl	8016bcc <_svfiprintf_r>
 8014896:	9b00      	ldr	r3, [sp, #0]
 8014898:	2200      	movs	r2, #0
 801489a:	701a      	strb	r2, [r3, #0]
 801489c:	b01b      	add	sp, #108	; 0x6c
 801489e:	f85d fb04 	ldr.w	pc, [sp], #4
 80148a2:	bf00      	nop
 80148a4:	ffff0208 	.word	0xffff0208

080148a8 <vsiprintf>:
 80148a8:	4613      	mov	r3, r2
 80148aa:	460a      	mov	r2, r1
 80148ac:	4601      	mov	r1, r0
 80148ae:	4802      	ldr	r0, [pc, #8]	; (80148b8 <vsiprintf+0x10>)
 80148b0:	6800      	ldr	r0, [r0, #0]
 80148b2:	f7ff bfe3 	b.w	801487c <_vsiprintf_r>
 80148b6:	bf00      	nop
 80148b8:	2000000c 	.word	0x2000000c

080148bc <__swbuf_r>:
 80148bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148be:	460e      	mov	r6, r1
 80148c0:	4614      	mov	r4, r2
 80148c2:	4605      	mov	r5, r0
 80148c4:	b118      	cbz	r0, 80148ce <__swbuf_r+0x12>
 80148c6:	6983      	ldr	r3, [r0, #24]
 80148c8:	b90b      	cbnz	r3, 80148ce <__swbuf_r+0x12>
 80148ca:	f001 f80d 	bl	80158e8 <__sinit>
 80148ce:	4b21      	ldr	r3, [pc, #132]	; (8014954 <__swbuf_r+0x98>)
 80148d0:	429c      	cmp	r4, r3
 80148d2:	d12a      	bne.n	801492a <__swbuf_r+0x6e>
 80148d4:	686c      	ldr	r4, [r5, #4]
 80148d6:	69a3      	ldr	r3, [r4, #24]
 80148d8:	60a3      	str	r3, [r4, #8]
 80148da:	89a3      	ldrh	r3, [r4, #12]
 80148dc:	071a      	lsls	r2, r3, #28
 80148de:	d52e      	bpl.n	801493e <__swbuf_r+0x82>
 80148e0:	6923      	ldr	r3, [r4, #16]
 80148e2:	b363      	cbz	r3, 801493e <__swbuf_r+0x82>
 80148e4:	6923      	ldr	r3, [r4, #16]
 80148e6:	6820      	ldr	r0, [r4, #0]
 80148e8:	1ac0      	subs	r0, r0, r3
 80148ea:	6963      	ldr	r3, [r4, #20]
 80148ec:	b2f6      	uxtb	r6, r6
 80148ee:	4283      	cmp	r3, r0
 80148f0:	4637      	mov	r7, r6
 80148f2:	dc04      	bgt.n	80148fe <__swbuf_r+0x42>
 80148f4:	4621      	mov	r1, r4
 80148f6:	4628      	mov	r0, r5
 80148f8:	f000 ff8c 	bl	8015814 <_fflush_r>
 80148fc:	bb28      	cbnz	r0, 801494a <__swbuf_r+0x8e>
 80148fe:	68a3      	ldr	r3, [r4, #8]
 8014900:	3b01      	subs	r3, #1
 8014902:	60a3      	str	r3, [r4, #8]
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	1c5a      	adds	r2, r3, #1
 8014908:	6022      	str	r2, [r4, #0]
 801490a:	701e      	strb	r6, [r3, #0]
 801490c:	6963      	ldr	r3, [r4, #20]
 801490e:	3001      	adds	r0, #1
 8014910:	4283      	cmp	r3, r0
 8014912:	d004      	beq.n	801491e <__swbuf_r+0x62>
 8014914:	89a3      	ldrh	r3, [r4, #12]
 8014916:	07db      	lsls	r3, r3, #31
 8014918:	d519      	bpl.n	801494e <__swbuf_r+0x92>
 801491a:	2e0a      	cmp	r6, #10
 801491c:	d117      	bne.n	801494e <__swbuf_r+0x92>
 801491e:	4621      	mov	r1, r4
 8014920:	4628      	mov	r0, r5
 8014922:	f000 ff77 	bl	8015814 <_fflush_r>
 8014926:	b190      	cbz	r0, 801494e <__swbuf_r+0x92>
 8014928:	e00f      	b.n	801494a <__swbuf_r+0x8e>
 801492a:	4b0b      	ldr	r3, [pc, #44]	; (8014958 <__swbuf_r+0x9c>)
 801492c:	429c      	cmp	r4, r3
 801492e:	d101      	bne.n	8014934 <__swbuf_r+0x78>
 8014930:	68ac      	ldr	r4, [r5, #8]
 8014932:	e7d0      	b.n	80148d6 <__swbuf_r+0x1a>
 8014934:	4b09      	ldr	r3, [pc, #36]	; (801495c <__swbuf_r+0xa0>)
 8014936:	429c      	cmp	r4, r3
 8014938:	bf08      	it	eq
 801493a:	68ec      	ldreq	r4, [r5, #12]
 801493c:	e7cb      	b.n	80148d6 <__swbuf_r+0x1a>
 801493e:	4621      	mov	r1, r4
 8014940:	4628      	mov	r0, r5
 8014942:	f000 f81f 	bl	8014984 <__swsetup_r>
 8014946:	2800      	cmp	r0, #0
 8014948:	d0cc      	beq.n	80148e4 <__swbuf_r+0x28>
 801494a:	f04f 37ff 	mov.w	r7, #4294967295
 801494e:	4638      	mov	r0, r7
 8014950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014952:	bf00      	nop
 8014954:	08018288 	.word	0x08018288
 8014958:	080182a8 	.word	0x080182a8
 801495c:	08018268 	.word	0x08018268

08014960 <_write_r>:
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	4c07      	ldr	r4, [pc, #28]	; (8014980 <_write_r+0x20>)
 8014964:	4605      	mov	r5, r0
 8014966:	4608      	mov	r0, r1
 8014968:	4611      	mov	r1, r2
 801496a:	2200      	movs	r2, #0
 801496c:	6022      	str	r2, [r4, #0]
 801496e:	461a      	mov	r2, r3
 8014970:	f7ef fa08 	bl	8003d84 <_write>
 8014974:	1c43      	adds	r3, r0, #1
 8014976:	d102      	bne.n	801497e <_write_r+0x1e>
 8014978:	6823      	ldr	r3, [r4, #0]
 801497a:	b103      	cbz	r3, 801497e <_write_r+0x1e>
 801497c:	602b      	str	r3, [r5, #0]
 801497e:	bd38      	pop	{r3, r4, r5, pc}
 8014980:	2003be0c 	.word	0x2003be0c

08014984 <__swsetup_r>:
 8014984:	4b32      	ldr	r3, [pc, #200]	; (8014a50 <__swsetup_r+0xcc>)
 8014986:	b570      	push	{r4, r5, r6, lr}
 8014988:	681d      	ldr	r5, [r3, #0]
 801498a:	4606      	mov	r6, r0
 801498c:	460c      	mov	r4, r1
 801498e:	b125      	cbz	r5, 801499a <__swsetup_r+0x16>
 8014990:	69ab      	ldr	r3, [r5, #24]
 8014992:	b913      	cbnz	r3, 801499a <__swsetup_r+0x16>
 8014994:	4628      	mov	r0, r5
 8014996:	f000 ffa7 	bl	80158e8 <__sinit>
 801499a:	4b2e      	ldr	r3, [pc, #184]	; (8014a54 <__swsetup_r+0xd0>)
 801499c:	429c      	cmp	r4, r3
 801499e:	d10f      	bne.n	80149c0 <__swsetup_r+0x3c>
 80149a0:	686c      	ldr	r4, [r5, #4]
 80149a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	0715      	lsls	r5, r2, #28
 80149aa:	d42c      	bmi.n	8014a06 <__swsetup_r+0x82>
 80149ac:	06d0      	lsls	r0, r2, #27
 80149ae:	d411      	bmi.n	80149d4 <__swsetup_r+0x50>
 80149b0:	2209      	movs	r2, #9
 80149b2:	6032      	str	r2, [r6, #0]
 80149b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149b8:	81a3      	strh	r3, [r4, #12]
 80149ba:	f04f 30ff 	mov.w	r0, #4294967295
 80149be:	e03e      	b.n	8014a3e <__swsetup_r+0xba>
 80149c0:	4b25      	ldr	r3, [pc, #148]	; (8014a58 <__swsetup_r+0xd4>)
 80149c2:	429c      	cmp	r4, r3
 80149c4:	d101      	bne.n	80149ca <__swsetup_r+0x46>
 80149c6:	68ac      	ldr	r4, [r5, #8]
 80149c8:	e7eb      	b.n	80149a2 <__swsetup_r+0x1e>
 80149ca:	4b24      	ldr	r3, [pc, #144]	; (8014a5c <__swsetup_r+0xd8>)
 80149cc:	429c      	cmp	r4, r3
 80149ce:	bf08      	it	eq
 80149d0:	68ec      	ldreq	r4, [r5, #12]
 80149d2:	e7e6      	b.n	80149a2 <__swsetup_r+0x1e>
 80149d4:	0751      	lsls	r1, r2, #29
 80149d6:	d512      	bpl.n	80149fe <__swsetup_r+0x7a>
 80149d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149da:	b141      	cbz	r1, 80149ee <__swsetup_r+0x6a>
 80149dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149e0:	4299      	cmp	r1, r3
 80149e2:	d002      	beq.n	80149ea <__swsetup_r+0x66>
 80149e4:	4630      	mov	r0, r6
 80149e6:	f001 ffef 	bl	80169c8 <_free_r>
 80149ea:	2300      	movs	r3, #0
 80149ec:	6363      	str	r3, [r4, #52]	; 0x34
 80149ee:	89a3      	ldrh	r3, [r4, #12]
 80149f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80149f4:	81a3      	strh	r3, [r4, #12]
 80149f6:	2300      	movs	r3, #0
 80149f8:	6063      	str	r3, [r4, #4]
 80149fa:	6923      	ldr	r3, [r4, #16]
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	89a3      	ldrh	r3, [r4, #12]
 8014a00:	f043 0308 	orr.w	r3, r3, #8
 8014a04:	81a3      	strh	r3, [r4, #12]
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	b94b      	cbnz	r3, 8014a1e <__swsetup_r+0x9a>
 8014a0a:	89a3      	ldrh	r3, [r4, #12]
 8014a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a14:	d003      	beq.n	8014a1e <__swsetup_r+0x9a>
 8014a16:	4621      	mov	r1, r4
 8014a18:	4630      	mov	r0, r6
 8014a1a:	f001 fb6d 	bl	80160f8 <__smakebuf_r>
 8014a1e:	89a2      	ldrh	r2, [r4, #12]
 8014a20:	f012 0301 	ands.w	r3, r2, #1
 8014a24:	d00c      	beq.n	8014a40 <__swsetup_r+0xbc>
 8014a26:	2300      	movs	r3, #0
 8014a28:	60a3      	str	r3, [r4, #8]
 8014a2a:	6963      	ldr	r3, [r4, #20]
 8014a2c:	425b      	negs	r3, r3
 8014a2e:	61a3      	str	r3, [r4, #24]
 8014a30:	6923      	ldr	r3, [r4, #16]
 8014a32:	b953      	cbnz	r3, 8014a4a <__swsetup_r+0xc6>
 8014a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014a3c:	d1ba      	bne.n	80149b4 <__swsetup_r+0x30>
 8014a3e:	bd70      	pop	{r4, r5, r6, pc}
 8014a40:	0792      	lsls	r2, r2, #30
 8014a42:	bf58      	it	pl
 8014a44:	6963      	ldrpl	r3, [r4, #20]
 8014a46:	60a3      	str	r3, [r4, #8]
 8014a48:	e7f2      	b.n	8014a30 <__swsetup_r+0xac>
 8014a4a:	2000      	movs	r0, #0
 8014a4c:	e7f7      	b.n	8014a3e <__swsetup_r+0xba>
 8014a4e:	bf00      	nop
 8014a50:	2000000c 	.word	0x2000000c
 8014a54:	08018288 	.word	0x08018288
 8014a58:	080182a8 	.word	0x080182a8
 8014a5c:	08018268 	.word	0x08018268

08014a60 <_close_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4c06      	ldr	r4, [pc, #24]	; (8014a7c <_close_r+0x1c>)
 8014a64:	2300      	movs	r3, #0
 8014a66:	4605      	mov	r5, r0
 8014a68:	4608      	mov	r0, r1
 8014a6a:	6023      	str	r3, [r4, #0]
 8014a6c:	f7f0 fef1 	bl	8005852 <_close>
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	d102      	bne.n	8014a7a <_close_r+0x1a>
 8014a74:	6823      	ldr	r3, [r4, #0]
 8014a76:	b103      	cbz	r3, 8014a7a <_close_r+0x1a>
 8014a78:	602b      	str	r3, [r5, #0]
 8014a7a:	bd38      	pop	{r3, r4, r5, pc}
 8014a7c:	2003be0c 	.word	0x2003be0c

08014a80 <quorem>:
 8014a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	6903      	ldr	r3, [r0, #16]
 8014a86:	690c      	ldr	r4, [r1, #16]
 8014a88:	42a3      	cmp	r3, r4
 8014a8a:	4680      	mov	r8, r0
 8014a8c:	f2c0 8082 	blt.w	8014b94 <quorem+0x114>
 8014a90:	3c01      	subs	r4, #1
 8014a92:	f101 0714 	add.w	r7, r1, #20
 8014a96:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014a9a:	f100 0614 	add.w	r6, r0, #20
 8014a9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014aa2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014aa6:	eb06 030c 	add.w	r3, r6, ip
 8014aaa:	3501      	adds	r5, #1
 8014aac:	eb07 090c 	add.w	r9, r7, ip
 8014ab0:	9301      	str	r3, [sp, #4]
 8014ab2:	fbb0 f5f5 	udiv	r5, r0, r5
 8014ab6:	b395      	cbz	r5, 8014b1e <quorem+0x9e>
 8014ab8:	f04f 0a00 	mov.w	sl, #0
 8014abc:	4638      	mov	r0, r7
 8014abe:	46b6      	mov	lr, r6
 8014ac0:	46d3      	mov	fp, sl
 8014ac2:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ac6:	b293      	uxth	r3, r2
 8014ac8:	fb05 a303 	mla	r3, r5, r3, sl
 8014acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	ebab 0303 	sub.w	r3, fp, r3
 8014ad6:	0c12      	lsrs	r2, r2, #16
 8014ad8:	f8de b000 	ldr.w	fp, [lr]
 8014adc:	fb05 a202 	mla	r2, r5, r2, sl
 8014ae0:	fa13 f38b 	uxtah	r3, r3, fp
 8014ae4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014ae8:	fa1f fb82 	uxth.w	fp, r2
 8014aec:	f8de 2000 	ldr.w	r2, [lr]
 8014af0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014afe:	4581      	cmp	r9, r0
 8014b00:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014b04:	f84e 3b04 	str.w	r3, [lr], #4
 8014b08:	d2db      	bcs.n	8014ac2 <quorem+0x42>
 8014b0a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014b0e:	b933      	cbnz	r3, 8014b1e <quorem+0x9e>
 8014b10:	9b01      	ldr	r3, [sp, #4]
 8014b12:	3b04      	subs	r3, #4
 8014b14:	429e      	cmp	r6, r3
 8014b16:	461a      	mov	r2, r3
 8014b18:	d330      	bcc.n	8014b7c <quorem+0xfc>
 8014b1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b1e:	4640      	mov	r0, r8
 8014b20:	f001 fd98 	bl	8016654 <__mcmp>
 8014b24:	2800      	cmp	r0, #0
 8014b26:	db25      	blt.n	8014b74 <quorem+0xf4>
 8014b28:	3501      	adds	r5, #1
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	f04f 0c00 	mov.w	ip, #0
 8014b30:	f857 2b04 	ldr.w	r2, [r7], #4
 8014b34:	f8d0 e000 	ldr.w	lr, [r0]
 8014b38:	b293      	uxth	r3, r2
 8014b3a:	ebac 0303 	sub.w	r3, ip, r3
 8014b3e:	0c12      	lsrs	r2, r2, #16
 8014b40:	fa13 f38e 	uxtah	r3, r3, lr
 8014b44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b52:	45b9      	cmp	r9, r7
 8014b54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014b58:	f840 3b04 	str.w	r3, [r0], #4
 8014b5c:	d2e8      	bcs.n	8014b30 <quorem+0xb0>
 8014b5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014b62:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014b66:	b92a      	cbnz	r2, 8014b74 <quorem+0xf4>
 8014b68:	3b04      	subs	r3, #4
 8014b6a:	429e      	cmp	r6, r3
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	d30b      	bcc.n	8014b88 <quorem+0x108>
 8014b70:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b74:	4628      	mov	r0, r5
 8014b76:	b003      	add	sp, #12
 8014b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	3b04      	subs	r3, #4
 8014b80:	2a00      	cmp	r2, #0
 8014b82:	d1ca      	bne.n	8014b1a <quorem+0x9a>
 8014b84:	3c01      	subs	r4, #1
 8014b86:	e7c5      	b.n	8014b14 <quorem+0x94>
 8014b88:	6812      	ldr	r2, [r2, #0]
 8014b8a:	3b04      	subs	r3, #4
 8014b8c:	2a00      	cmp	r2, #0
 8014b8e:	d1ef      	bne.n	8014b70 <quorem+0xf0>
 8014b90:	3c01      	subs	r4, #1
 8014b92:	e7ea      	b.n	8014b6a <quorem+0xea>
 8014b94:	2000      	movs	r0, #0
 8014b96:	e7ee      	b.n	8014b76 <quorem+0xf6>

08014b98 <_dtoa_r>:
 8014b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9c:	ec57 6b10 	vmov	r6, r7, d0
 8014ba0:	b097      	sub	sp, #92	; 0x5c
 8014ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014ba4:	9106      	str	r1, [sp, #24]
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	920b      	str	r2, [sp, #44]	; 0x2c
 8014baa:	9312      	str	r3, [sp, #72]	; 0x48
 8014bac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014bb0:	e9cd 6700 	strd	r6, r7, [sp]
 8014bb4:	b93d      	cbnz	r5, 8014bc6 <_dtoa_r+0x2e>
 8014bb6:	2010      	movs	r0, #16
 8014bb8:	f001 fade 	bl	8016178 <malloc>
 8014bbc:	6260      	str	r0, [r4, #36]	; 0x24
 8014bbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014bc2:	6005      	str	r5, [r0, #0]
 8014bc4:	60c5      	str	r5, [r0, #12]
 8014bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bc8:	6819      	ldr	r1, [r3, #0]
 8014bca:	b151      	cbz	r1, 8014be2 <_dtoa_r+0x4a>
 8014bcc:	685a      	ldr	r2, [r3, #4]
 8014bce:	604a      	str	r2, [r1, #4]
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	4093      	lsls	r3, r2
 8014bd4:	608b      	str	r3, [r1, #8]
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	f001 fb1c 	bl	8016214 <_Bfree>
 8014bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bde:	2200      	movs	r2, #0
 8014be0:	601a      	str	r2, [r3, #0]
 8014be2:	1e3b      	subs	r3, r7, #0
 8014be4:	bfbb      	ittet	lt
 8014be6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014bea:	9301      	strlt	r3, [sp, #4]
 8014bec:	2300      	movge	r3, #0
 8014bee:	2201      	movlt	r2, #1
 8014bf0:	bfac      	ite	ge
 8014bf2:	f8c8 3000 	strge.w	r3, [r8]
 8014bf6:	f8c8 2000 	strlt.w	r2, [r8]
 8014bfa:	4baf      	ldr	r3, [pc, #700]	; (8014eb8 <_dtoa_r+0x320>)
 8014bfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c00:	ea33 0308 	bics.w	r3, r3, r8
 8014c04:	d114      	bne.n	8014c30 <_dtoa_r+0x98>
 8014c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c08:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c0c:	6013      	str	r3, [r2, #0]
 8014c0e:	9b00      	ldr	r3, [sp, #0]
 8014c10:	b923      	cbnz	r3, 8014c1c <_dtoa_r+0x84>
 8014c12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f000 8542 	beq.w	80156a0 <_dtoa_r+0xb08>
 8014c1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014ecc <_dtoa_r+0x334>
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f000 8544 	beq.w	80156b0 <_dtoa_r+0xb18>
 8014c28:	f10b 0303 	add.w	r3, fp, #3
 8014c2c:	f000 bd3e 	b.w	80156ac <_dtoa_r+0xb14>
 8014c30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014c34:	2200      	movs	r2, #0
 8014c36:	2300      	movs	r3, #0
 8014c38:	4630      	mov	r0, r6
 8014c3a:	4639      	mov	r1, r7
 8014c3c:	f7eb ff5c 	bl	8000af8 <__aeabi_dcmpeq>
 8014c40:	4681      	mov	r9, r0
 8014c42:	b168      	cbz	r0, 8014c60 <_dtoa_r+0xc8>
 8014c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c46:	2301      	movs	r3, #1
 8014c48:	6013      	str	r3, [r2, #0]
 8014c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 8524 	beq.w	801569a <_dtoa_r+0xb02>
 8014c52:	4b9a      	ldr	r3, [pc, #616]	; (8014ebc <_dtoa_r+0x324>)
 8014c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c56:	f103 3bff 	add.w	fp, r3, #4294967295
 8014c5a:	6013      	str	r3, [r2, #0]
 8014c5c:	f000 bd28 	b.w	80156b0 <_dtoa_r+0xb18>
 8014c60:	aa14      	add	r2, sp, #80	; 0x50
 8014c62:	a915      	add	r1, sp, #84	; 0x54
 8014c64:	ec47 6b10 	vmov	d0, r6, r7
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f001 fde1 	bl	8016830 <__d2b>
 8014c6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014c72:	9004      	str	r0, [sp, #16]
 8014c74:	2d00      	cmp	r5, #0
 8014c76:	d07c      	beq.n	8014d72 <_dtoa_r+0x1da>
 8014c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014c80:	46b2      	mov	sl, r6
 8014c82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014c8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014c8e:	2200      	movs	r2, #0
 8014c90:	4b8b      	ldr	r3, [pc, #556]	; (8014ec0 <_dtoa_r+0x328>)
 8014c92:	4650      	mov	r0, sl
 8014c94:	4659      	mov	r1, fp
 8014c96:	f7eb fb0f 	bl	80002b8 <__aeabi_dsub>
 8014c9a:	a381      	add	r3, pc, #516	; (adr r3, 8014ea0 <_dtoa_r+0x308>)
 8014c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca0:	f7eb fcc2 	bl	8000628 <__aeabi_dmul>
 8014ca4:	a380      	add	r3, pc, #512	; (adr r3, 8014ea8 <_dtoa_r+0x310>)
 8014ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014caa:	f7eb fb07 	bl	80002bc <__adddf3>
 8014cae:	4606      	mov	r6, r0
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	f7eb fc4e 	bl	8000554 <__aeabi_i2d>
 8014cb8:	a37d      	add	r3, pc, #500	; (adr r3, 8014eb0 <_dtoa_r+0x318>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb fcb3 	bl	8000628 <__aeabi_dmul>
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	4639      	mov	r1, r7
 8014cca:	f7eb faf7 	bl	80002bc <__adddf3>
 8014cce:	4606      	mov	r6, r0
 8014cd0:	460f      	mov	r7, r1
 8014cd2:	f7eb ff59 	bl	8000b88 <__aeabi_d2iz>
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	4682      	mov	sl, r0
 8014cda:	2300      	movs	r3, #0
 8014cdc:	4630      	mov	r0, r6
 8014cde:	4639      	mov	r1, r7
 8014ce0:	f7eb ff14 	bl	8000b0c <__aeabi_dcmplt>
 8014ce4:	b148      	cbz	r0, 8014cfa <_dtoa_r+0x162>
 8014ce6:	4650      	mov	r0, sl
 8014ce8:	f7eb fc34 	bl	8000554 <__aeabi_i2d>
 8014cec:	4632      	mov	r2, r6
 8014cee:	463b      	mov	r3, r7
 8014cf0:	f7eb ff02 	bl	8000af8 <__aeabi_dcmpeq>
 8014cf4:	b908      	cbnz	r0, 8014cfa <_dtoa_r+0x162>
 8014cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cfa:	f1ba 0f16 	cmp.w	sl, #22
 8014cfe:	d859      	bhi.n	8014db4 <_dtoa_r+0x21c>
 8014d00:	4970      	ldr	r1, [pc, #448]	; (8014ec4 <_dtoa_r+0x32c>)
 8014d02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d0e:	f7eb ff1b 	bl	8000b48 <__aeabi_dcmpgt>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d050      	beq.n	8014db8 <_dtoa_r+0x220>
 8014d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d20:	1b5d      	subs	r5, r3, r5
 8014d22:	f1b5 0801 	subs.w	r8, r5, #1
 8014d26:	bf49      	itett	mi
 8014d28:	f1c5 0301 	rsbmi	r3, r5, #1
 8014d2c:	2300      	movpl	r3, #0
 8014d2e:	9305      	strmi	r3, [sp, #20]
 8014d30:	f04f 0800 	movmi.w	r8, #0
 8014d34:	bf58      	it	pl
 8014d36:	9305      	strpl	r3, [sp, #20]
 8014d38:	f1ba 0f00 	cmp.w	sl, #0
 8014d3c:	db3e      	blt.n	8014dbc <_dtoa_r+0x224>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	44d0      	add	r8, sl
 8014d42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014d46:	9307      	str	r3, [sp, #28]
 8014d48:	9b06      	ldr	r3, [sp, #24]
 8014d4a:	2b09      	cmp	r3, #9
 8014d4c:	f200 8090 	bhi.w	8014e70 <_dtoa_r+0x2d8>
 8014d50:	2b05      	cmp	r3, #5
 8014d52:	bfc4      	itt	gt
 8014d54:	3b04      	subgt	r3, #4
 8014d56:	9306      	strgt	r3, [sp, #24]
 8014d58:	9b06      	ldr	r3, [sp, #24]
 8014d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8014d5e:	bfcc      	ite	gt
 8014d60:	2500      	movgt	r5, #0
 8014d62:	2501      	movle	r5, #1
 8014d64:	2b03      	cmp	r3, #3
 8014d66:	f200 808f 	bhi.w	8014e88 <_dtoa_r+0x2f0>
 8014d6a:	e8df f003 	tbb	[pc, r3]
 8014d6e:	7f7d      	.short	0x7f7d
 8014d70:	7131      	.short	0x7131
 8014d72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014d76:	441d      	add	r5, r3
 8014d78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014d7c:	2820      	cmp	r0, #32
 8014d7e:	dd13      	ble.n	8014da8 <_dtoa_r+0x210>
 8014d80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014d84:	9b00      	ldr	r3, [sp, #0]
 8014d86:	fa08 f800 	lsl.w	r8, r8, r0
 8014d8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014d8e:	fa23 f000 	lsr.w	r0, r3, r0
 8014d92:	ea48 0000 	orr.w	r0, r8, r0
 8014d96:	f7eb fbcd 	bl	8000534 <__aeabi_ui2d>
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	4682      	mov	sl, r0
 8014d9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014da2:	3d01      	subs	r5, #1
 8014da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8014da6:	e772      	b.n	8014c8e <_dtoa_r+0xf6>
 8014da8:	9b00      	ldr	r3, [sp, #0]
 8014daa:	f1c0 0020 	rsb	r0, r0, #32
 8014dae:	fa03 f000 	lsl.w	r0, r3, r0
 8014db2:	e7f0      	b.n	8014d96 <_dtoa_r+0x1fe>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e7b1      	b.n	8014d1c <_dtoa_r+0x184>
 8014db8:	900f      	str	r0, [sp, #60]	; 0x3c
 8014dba:	e7b0      	b.n	8014d1e <_dtoa_r+0x186>
 8014dbc:	9b05      	ldr	r3, [sp, #20]
 8014dbe:	eba3 030a 	sub.w	r3, r3, sl
 8014dc2:	9305      	str	r3, [sp, #20]
 8014dc4:	f1ca 0300 	rsb	r3, sl, #0
 8014dc8:	9307      	str	r3, [sp, #28]
 8014dca:	2300      	movs	r3, #0
 8014dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8014dce:	e7bb      	b.n	8014d48 <_dtoa_r+0x1b0>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8014dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	dd59      	ble.n	8014e8e <_dtoa_r+0x2f6>
 8014dda:	9302      	str	r3, [sp, #8]
 8014ddc:	4699      	mov	r9, r3
 8014dde:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014de0:	2200      	movs	r2, #0
 8014de2:	6072      	str	r2, [r6, #4]
 8014de4:	2204      	movs	r2, #4
 8014de6:	f102 0014 	add.w	r0, r2, #20
 8014dea:	4298      	cmp	r0, r3
 8014dec:	6871      	ldr	r1, [r6, #4]
 8014dee:	d953      	bls.n	8014e98 <_dtoa_r+0x300>
 8014df0:	4620      	mov	r0, r4
 8014df2:	f001 f9db 	bl	80161ac <_Balloc>
 8014df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014df8:	6030      	str	r0, [r6, #0]
 8014dfa:	f1b9 0f0e 	cmp.w	r9, #14
 8014dfe:	f8d3 b000 	ldr.w	fp, [r3]
 8014e02:	f200 80e6 	bhi.w	8014fd2 <_dtoa_r+0x43a>
 8014e06:	2d00      	cmp	r5, #0
 8014e08:	f000 80e3 	beq.w	8014fd2 <_dtoa_r+0x43a>
 8014e0c:	ed9d 7b00 	vldr	d7, [sp]
 8014e10:	f1ba 0f00 	cmp.w	sl, #0
 8014e14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014e18:	dd74      	ble.n	8014f04 <_dtoa_r+0x36c>
 8014e1a:	4a2a      	ldr	r2, [pc, #168]	; (8014ec4 <_dtoa_r+0x32c>)
 8014e1c:	f00a 030f 	and.w	r3, sl, #15
 8014e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014e24:	ed93 7b00 	vldr	d7, [r3]
 8014e28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014e2c:	06f0      	lsls	r0, r6, #27
 8014e2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014e32:	d565      	bpl.n	8014f00 <_dtoa_r+0x368>
 8014e34:	4b24      	ldr	r3, [pc, #144]	; (8014ec8 <_dtoa_r+0x330>)
 8014e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e3e:	f7eb fd1d 	bl	800087c <__aeabi_ddiv>
 8014e42:	e9cd 0100 	strd	r0, r1, [sp]
 8014e46:	f006 060f 	and.w	r6, r6, #15
 8014e4a:	2503      	movs	r5, #3
 8014e4c:	4f1e      	ldr	r7, [pc, #120]	; (8014ec8 <_dtoa_r+0x330>)
 8014e4e:	e04c      	b.n	8014eea <_dtoa_r+0x352>
 8014e50:	2301      	movs	r3, #1
 8014e52:	930a      	str	r3, [sp, #40]	; 0x28
 8014e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e56:	4453      	add	r3, sl
 8014e58:	f103 0901 	add.w	r9, r3, #1
 8014e5c:	9302      	str	r3, [sp, #8]
 8014e5e:	464b      	mov	r3, r9
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	bfb8      	it	lt
 8014e64:	2301      	movlt	r3, #1
 8014e66:	e7ba      	b.n	8014dde <_dtoa_r+0x246>
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e7b2      	b.n	8014dd2 <_dtoa_r+0x23a>
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e7f0      	b.n	8014e52 <_dtoa_r+0x2ba>
 8014e70:	2501      	movs	r5, #1
 8014e72:	2300      	movs	r3, #0
 8014e74:	9306      	str	r3, [sp, #24]
 8014e76:	950a      	str	r5, [sp, #40]	; 0x28
 8014e78:	f04f 33ff 	mov.w	r3, #4294967295
 8014e7c:	9302      	str	r3, [sp, #8]
 8014e7e:	4699      	mov	r9, r3
 8014e80:	2200      	movs	r2, #0
 8014e82:	2312      	movs	r3, #18
 8014e84:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e86:	e7aa      	b.n	8014dde <_dtoa_r+0x246>
 8014e88:	2301      	movs	r3, #1
 8014e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e8c:	e7f4      	b.n	8014e78 <_dtoa_r+0x2e0>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	9302      	str	r3, [sp, #8]
 8014e92:	4699      	mov	r9, r3
 8014e94:	461a      	mov	r2, r3
 8014e96:	e7f5      	b.n	8014e84 <_dtoa_r+0x2ec>
 8014e98:	3101      	adds	r1, #1
 8014e9a:	6071      	str	r1, [r6, #4]
 8014e9c:	0052      	lsls	r2, r2, #1
 8014e9e:	e7a2      	b.n	8014de6 <_dtoa_r+0x24e>
 8014ea0:	636f4361 	.word	0x636f4361
 8014ea4:	3fd287a7 	.word	0x3fd287a7
 8014ea8:	8b60c8b3 	.word	0x8b60c8b3
 8014eac:	3fc68a28 	.word	0x3fc68a28
 8014eb0:	509f79fb 	.word	0x509f79fb
 8014eb4:	3fd34413 	.word	0x3fd34413
 8014eb8:	7ff00000 	.word	0x7ff00000
 8014ebc:	080183fc 	.word	0x080183fc
 8014ec0:	3ff80000 	.word	0x3ff80000
 8014ec4:	08018300 	.word	0x08018300
 8014ec8:	080182d8 	.word	0x080182d8
 8014ecc:	08018261 	.word	0x08018261
 8014ed0:	07f1      	lsls	r1, r6, #31
 8014ed2:	d508      	bpl.n	8014ee6 <_dtoa_r+0x34e>
 8014ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014edc:	f7eb fba4 	bl	8000628 <__aeabi_dmul>
 8014ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ee4:	3501      	adds	r5, #1
 8014ee6:	1076      	asrs	r6, r6, #1
 8014ee8:	3708      	adds	r7, #8
 8014eea:	2e00      	cmp	r6, #0
 8014eec:	d1f0      	bne.n	8014ed0 <_dtoa_r+0x338>
 8014eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ef6:	f7eb fcc1 	bl	800087c <__aeabi_ddiv>
 8014efa:	e9cd 0100 	strd	r0, r1, [sp]
 8014efe:	e01a      	b.n	8014f36 <_dtoa_r+0x39e>
 8014f00:	2502      	movs	r5, #2
 8014f02:	e7a3      	b.n	8014e4c <_dtoa_r+0x2b4>
 8014f04:	f000 80a0 	beq.w	8015048 <_dtoa_r+0x4b0>
 8014f08:	f1ca 0600 	rsb	r6, sl, #0
 8014f0c:	4b9f      	ldr	r3, [pc, #636]	; (801518c <_dtoa_r+0x5f4>)
 8014f0e:	4fa0      	ldr	r7, [pc, #640]	; (8015190 <_dtoa_r+0x5f8>)
 8014f10:	f006 020f 	and.w	r2, r6, #15
 8014f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f20:	f7eb fb82 	bl	8000628 <__aeabi_dmul>
 8014f24:	e9cd 0100 	strd	r0, r1, [sp]
 8014f28:	1136      	asrs	r6, r6, #4
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	2502      	movs	r5, #2
 8014f2e:	2e00      	cmp	r6, #0
 8014f30:	d17f      	bne.n	8015032 <_dtoa_r+0x49a>
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d1e1      	bne.n	8014efa <_dtoa_r+0x362>
 8014f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f000 8087 	beq.w	801504c <_dtoa_r+0x4b4>
 8014f3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f42:	2200      	movs	r2, #0
 8014f44:	4b93      	ldr	r3, [pc, #588]	; (8015194 <_dtoa_r+0x5fc>)
 8014f46:	4630      	mov	r0, r6
 8014f48:	4639      	mov	r1, r7
 8014f4a:	f7eb fddf 	bl	8000b0c <__aeabi_dcmplt>
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d07c      	beq.n	801504c <_dtoa_r+0x4b4>
 8014f52:	f1b9 0f00 	cmp.w	r9, #0
 8014f56:	d079      	beq.n	801504c <_dtoa_r+0x4b4>
 8014f58:	9b02      	ldr	r3, [sp, #8]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	dd35      	ble.n	8014fca <_dtoa_r+0x432>
 8014f5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014f62:	9308      	str	r3, [sp, #32]
 8014f64:	4639      	mov	r1, r7
 8014f66:	2200      	movs	r2, #0
 8014f68:	4b8b      	ldr	r3, [pc, #556]	; (8015198 <_dtoa_r+0x600>)
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	f7eb fb5c 	bl	8000628 <__aeabi_dmul>
 8014f70:	e9cd 0100 	strd	r0, r1, [sp]
 8014f74:	9f02      	ldr	r7, [sp, #8]
 8014f76:	3501      	adds	r5, #1
 8014f78:	4628      	mov	r0, r5
 8014f7a:	f7eb faeb 	bl	8000554 <__aeabi_i2d>
 8014f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f82:	f7eb fb51 	bl	8000628 <__aeabi_dmul>
 8014f86:	2200      	movs	r2, #0
 8014f88:	4b84      	ldr	r3, [pc, #528]	; (801519c <_dtoa_r+0x604>)
 8014f8a:	f7eb f997 	bl	80002bc <__adddf3>
 8014f8e:	4605      	mov	r5, r0
 8014f90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014f94:	2f00      	cmp	r7, #0
 8014f96:	d15d      	bne.n	8015054 <_dtoa_r+0x4bc>
 8014f98:	2200      	movs	r2, #0
 8014f9a:	4b81      	ldr	r3, [pc, #516]	; (80151a0 <_dtoa_r+0x608>)
 8014f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fa0:	f7eb f98a 	bl	80002b8 <__aeabi_dsub>
 8014fa4:	462a      	mov	r2, r5
 8014fa6:	4633      	mov	r3, r6
 8014fa8:	e9cd 0100 	strd	r0, r1, [sp]
 8014fac:	f7eb fdcc 	bl	8000b48 <__aeabi_dcmpgt>
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	f040 8288 	bne.w	80154c6 <_dtoa_r+0x92e>
 8014fb6:	462a      	mov	r2, r5
 8014fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fc0:	f7eb fda4 	bl	8000b0c <__aeabi_dcmplt>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	f040 827c 	bne.w	80154c2 <_dtoa_r+0x92a>
 8014fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014fce:	e9cd 2300 	strd	r2, r3, [sp]
 8014fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f2c0 8150 	blt.w	801527a <_dtoa_r+0x6e2>
 8014fda:	f1ba 0f0e 	cmp.w	sl, #14
 8014fde:	f300 814c 	bgt.w	801527a <_dtoa_r+0x6e2>
 8014fe2:	4b6a      	ldr	r3, [pc, #424]	; (801518c <_dtoa_r+0x5f4>)
 8014fe4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fe8:	ed93 7b00 	vldr	d7, [r3]
 8014fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ff4:	f280 80d8 	bge.w	80151a8 <_dtoa_r+0x610>
 8014ff8:	f1b9 0f00 	cmp.w	r9, #0
 8014ffc:	f300 80d4 	bgt.w	80151a8 <_dtoa_r+0x610>
 8015000:	f040 825e 	bne.w	80154c0 <_dtoa_r+0x928>
 8015004:	2200      	movs	r2, #0
 8015006:	4b66      	ldr	r3, [pc, #408]	; (80151a0 <_dtoa_r+0x608>)
 8015008:	ec51 0b17 	vmov	r0, r1, d7
 801500c:	f7eb fb0c 	bl	8000628 <__aeabi_dmul>
 8015010:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015014:	f7eb fd8e 	bl	8000b34 <__aeabi_dcmpge>
 8015018:	464f      	mov	r7, r9
 801501a:	464e      	mov	r6, r9
 801501c:	2800      	cmp	r0, #0
 801501e:	f040 8234 	bne.w	801548a <_dtoa_r+0x8f2>
 8015022:	2331      	movs	r3, #49	; 0x31
 8015024:	f10b 0501 	add.w	r5, fp, #1
 8015028:	f88b 3000 	strb.w	r3, [fp]
 801502c:	f10a 0a01 	add.w	sl, sl, #1
 8015030:	e22f      	b.n	8015492 <_dtoa_r+0x8fa>
 8015032:	07f2      	lsls	r2, r6, #31
 8015034:	d505      	bpl.n	8015042 <_dtoa_r+0x4aa>
 8015036:	e9d7 2300 	ldrd	r2, r3, [r7]
 801503a:	f7eb faf5 	bl	8000628 <__aeabi_dmul>
 801503e:	3501      	adds	r5, #1
 8015040:	2301      	movs	r3, #1
 8015042:	1076      	asrs	r6, r6, #1
 8015044:	3708      	adds	r7, #8
 8015046:	e772      	b.n	8014f2e <_dtoa_r+0x396>
 8015048:	2502      	movs	r5, #2
 801504a:	e774      	b.n	8014f36 <_dtoa_r+0x39e>
 801504c:	f8cd a020 	str.w	sl, [sp, #32]
 8015050:	464f      	mov	r7, r9
 8015052:	e791      	b.n	8014f78 <_dtoa_r+0x3e0>
 8015054:	4b4d      	ldr	r3, [pc, #308]	; (801518c <_dtoa_r+0x5f4>)
 8015056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801505a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015060:	2b00      	cmp	r3, #0
 8015062:	d047      	beq.n	80150f4 <_dtoa_r+0x55c>
 8015064:	4602      	mov	r2, r0
 8015066:	460b      	mov	r3, r1
 8015068:	2000      	movs	r0, #0
 801506a:	494e      	ldr	r1, [pc, #312]	; (80151a4 <_dtoa_r+0x60c>)
 801506c:	f7eb fc06 	bl	800087c <__aeabi_ddiv>
 8015070:	462a      	mov	r2, r5
 8015072:	4633      	mov	r3, r6
 8015074:	f7eb f920 	bl	80002b8 <__aeabi_dsub>
 8015078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801507c:	465d      	mov	r5, fp
 801507e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015082:	f7eb fd81 	bl	8000b88 <__aeabi_d2iz>
 8015086:	4606      	mov	r6, r0
 8015088:	f7eb fa64 	bl	8000554 <__aeabi_i2d>
 801508c:	4602      	mov	r2, r0
 801508e:	460b      	mov	r3, r1
 8015090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015094:	f7eb f910 	bl	80002b8 <__aeabi_dsub>
 8015098:	3630      	adds	r6, #48	; 0x30
 801509a:	f805 6b01 	strb.w	r6, [r5], #1
 801509e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80150a2:	e9cd 0100 	strd	r0, r1, [sp]
 80150a6:	f7eb fd31 	bl	8000b0c <__aeabi_dcmplt>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d163      	bne.n	8015176 <_dtoa_r+0x5de>
 80150ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80150b2:	2000      	movs	r0, #0
 80150b4:	4937      	ldr	r1, [pc, #220]	; (8015194 <_dtoa_r+0x5fc>)
 80150b6:	f7eb f8ff 	bl	80002b8 <__aeabi_dsub>
 80150ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80150be:	f7eb fd25 	bl	8000b0c <__aeabi_dcmplt>
 80150c2:	2800      	cmp	r0, #0
 80150c4:	f040 80b7 	bne.w	8015236 <_dtoa_r+0x69e>
 80150c8:	eba5 030b 	sub.w	r3, r5, fp
 80150cc:	429f      	cmp	r7, r3
 80150ce:	f77f af7c 	ble.w	8014fca <_dtoa_r+0x432>
 80150d2:	2200      	movs	r2, #0
 80150d4:	4b30      	ldr	r3, [pc, #192]	; (8015198 <_dtoa_r+0x600>)
 80150d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80150da:	f7eb faa5 	bl	8000628 <__aeabi_dmul>
 80150de:	2200      	movs	r2, #0
 80150e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150e4:	4b2c      	ldr	r3, [pc, #176]	; (8015198 <_dtoa_r+0x600>)
 80150e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ea:	f7eb fa9d 	bl	8000628 <__aeabi_dmul>
 80150ee:	e9cd 0100 	strd	r0, r1, [sp]
 80150f2:	e7c4      	b.n	801507e <_dtoa_r+0x4e6>
 80150f4:	462a      	mov	r2, r5
 80150f6:	4633      	mov	r3, r6
 80150f8:	f7eb fa96 	bl	8000628 <__aeabi_dmul>
 80150fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015100:	eb0b 0507 	add.w	r5, fp, r7
 8015104:	465e      	mov	r6, fp
 8015106:	e9dd 0100 	ldrd	r0, r1, [sp]
 801510a:	f7eb fd3d 	bl	8000b88 <__aeabi_d2iz>
 801510e:	4607      	mov	r7, r0
 8015110:	f7eb fa20 	bl	8000554 <__aeabi_i2d>
 8015114:	3730      	adds	r7, #48	; 0x30
 8015116:	4602      	mov	r2, r0
 8015118:	460b      	mov	r3, r1
 801511a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801511e:	f7eb f8cb 	bl	80002b8 <__aeabi_dsub>
 8015122:	f806 7b01 	strb.w	r7, [r6], #1
 8015126:	42ae      	cmp	r6, r5
 8015128:	e9cd 0100 	strd	r0, r1, [sp]
 801512c:	f04f 0200 	mov.w	r2, #0
 8015130:	d126      	bne.n	8015180 <_dtoa_r+0x5e8>
 8015132:	4b1c      	ldr	r3, [pc, #112]	; (80151a4 <_dtoa_r+0x60c>)
 8015134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015138:	f7eb f8c0 	bl	80002bc <__adddf3>
 801513c:	4602      	mov	r2, r0
 801513e:	460b      	mov	r3, r1
 8015140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015144:	f7eb fd00 	bl	8000b48 <__aeabi_dcmpgt>
 8015148:	2800      	cmp	r0, #0
 801514a:	d174      	bne.n	8015236 <_dtoa_r+0x69e>
 801514c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015150:	2000      	movs	r0, #0
 8015152:	4914      	ldr	r1, [pc, #80]	; (80151a4 <_dtoa_r+0x60c>)
 8015154:	f7eb f8b0 	bl	80002b8 <__aeabi_dsub>
 8015158:	4602      	mov	r2, r0
 801515a:	460b      	mov	r3, r1
 801515c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015160:	f7eb fcd4 	bl	8000b0c <__aeabi_dcmplt>
 8015164:	2800      	cmp	r0, #0
 8015166:	f43f af30 	beq.w	8014fca <_dtoa_r+0x432>
 801516a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801516e:	2b30      	cmp	r3, #48	; 0x30
 8015170:	f105 32ff 	add.w	r2, r5, #4294967295
 8015174:	d002      	beq.n	801517c <_dtoa_r+0x5e4>
 8015176:	f8dd a020 	ldr.w	sl, [sp, #32]
 801517a:	e04a      	b.n	8015212 <_dtoa_r+0x67a>
 801517c:	4615      	mov	r5, r2
 801517e:	e7f4      	b.n	801516a <_dtoa_r+0x5d2>
 8015180:	4b05      	ldr	r3, [pc, #20]	; (8015198 <_dtoa_r+0x600>)
 8015182:	f7eb fa51 	bl	8000628 <__aeabi_dmul>
 8015186:	e9cd 0100 	strd	r0, r1, [sp]
 801518a:	e7bc      	b.n	8015106 <_dtoa_r+0x56e>
 801518c:	08018300 	.word	0x08018300
 8015190:	080182d8 	.word	0x080182d8
 8015194:	3ff00000 	.word	0x3ff00000
 8015198:	40240000 	.word	0x40240000
 801519c:	401c0000 	.word	0x401c0000
 80151a0:	40140000 	.word	0x40140000
 80151a4:	3fe00000 	.word	0x3fe00000
 80151a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151ac:	465d      	mov	r5, fp
 80151ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151b2:	4630      	mov	r0, r6
 80151b4:	4639      	mov	r1, r7
 80151b6:	f7eb fb61 	bl	800087c <__aeabi_ddiv>
 80151ba:	f7eb fce5 	bl	8000b88 <__aeabi_d2iz>
 80151be:	4680      	mov	r8, r0
 80151c0:	f7eb f9c8 	bl	8000554 <__aeabi_i2d>
 80151c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151c8:	f7eb fa2e 	bl	8000628 <__aeabi_dmul>
 80151cc:	4602      	mov	r2, r0
 80151ce:	460b      	mov	r3, r1
 80151d0:	4630      	mov	r0, r6
 80151d2:	4639      	mov	r1, r7
 80151d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80151d8:	f7eb f86e 	bl	80002b8 <__aeabi_dsub>
 80151dc:	f805 6b01 	strb.w	r6, [r5], #1
 80151e0:	eba5 060b 	sub.w	r6, r5, fp
 80151e4:	45b1      	cmp	r9, r6
 80151e6:	4602      	mov	r2, r0
 80151e8:	460b      	mov	r3, r1
 80151ea:	d139      	bne.n	8015260 <_dtoa_r+0x6c8>
 80151ec:	f7eb f866 	bl	80002bc <__adddf3>
 80151f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151f4:	4606      	mov	r6, r0
 80151f6:	460f      	mov	r7, r1
 80151f8:	f7eb fca6 	bl	8000b48 <__aeabi_dcmpgt>
 80151fc:	b9c8      	cbnz	r0, 8015232 <_dtoa_r+0x69a>
 80151fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015202:	4630      	mov	r0, r6
 8015204:	4639      	mov	r1, r7
 8015206:	f7eb fc77 	bl	8000af8 <__aeabi_dcmpeq>
 801520a:	b110      	cbz	r0, 8015212 <_dtoa_r+0x67a>
 801520c:	f018 0f01 	tst.w	r8, #1
 8015210:	d10f      	bne.n	8015232 <_dtoa_r+0x69a>
 8015212:	9904      	ldr	r1, [sp, #16]
 8015214:	4620      	mov	r0, r4
 8015216:	f000 fffd 	bl	8016214 <_Bfree>
 801521a:	2300      	movs	r3, #0
 801521c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801521e:	702b      	strb	r3, [r5, #0]
 8015220:	f10a 0301 	add.w	r3, sl, #1
 8015224:	6013      	str	r3, [r2, #0]
 8015226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015228:	2b00      	cmp	r3, #0
 801522a:	f000 8241 	beq.w	80156b0 <_dtoa_r+0xb18>
 801522e:	601d      	str	r5, [r3, #0]
 8015230:	e23e      	b.n	80156b0 <_dtoa_r+0xb18>
 8015232:	f8cd a020 	str.w	sl, [sp, #32]
 8015236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801523a:	2a39      	cmp	r2, #57	; 0x39
 801523c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015240:	d108      	bne.n	8015254 <_dtoa_r+0x6bc>
 8015242:	459b      	cmp	fp, r3
 8015244:	d10a      	bne.n	801525c <_dtoa_r+0x6c4>
 8015246:	9b08      	ldr	r3, [sp, #32]
 8015248:	3301      	adds	r3, #1
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	2330      	movs	r3, #48	; 0x30
 801524e:	f88b 3000 	strb.w	r3, [fp]
 8015252:	465b      	mov	r3, fp
 8015254:	781a      	ldrb	r2, [r3, #0]
 8015256:	3201      	adds	r2, #1
 8015258:	701a      	strb	r2, [r3, #0]
 801525a:	e78c      	b.n	8015176 <_dtoa_r+0x5de>
 801525c:	461d      	mov	r5, r3
 801525e:	e7ea      	b.n	8015236 <_dtoa_r+0x69e>
 8015260:	2200      	movs	r2, #0
 8015262:	4b9b      	ldr	r3, [pc, #620]	; (80154d0 <_dtoa_r+0x938>)
 8015264:	f7eb f9e0 	bl	8000628 <__aeabi_dmul>
 8015268:	2200      	movs	r2, #0
 801526a:	2300      	movs	r3, #0
 801526c:	4606      	mov	r6, r0
 801526e:	460f      	mov	r7, r1
 8015270:	f7eb fc42 	bl	8000af8 <__aeabi_dcmpeq>
 8015274:	2800      	cmp	r0, #0
 8015276:	d09a      	beq.n	80151ae <_dtoa_r+0x616>
 8015278:	e7cb      	b.n	8015212 <_dtoa_r+0x67a>
 801527a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801527c:	2a00      	cmp	r2, #0
 801527e:	f000 808b 	beq.w	8015398 <_dtoa_r+0x800>
 8015282:	9a06      	ldr	r2, [sp, #24]
 8015284:	2a01      	cmp	r2, #1
 8015286:	dc6e      	bgt.n	8015366 <_dtoa_r+0x7ce>
 8015288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801528a:	2a00      	cmp	r2, #0
 801528c:	d067      	beq.n	801535e <_dtoa_r+0x7c6>
 801528e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015292:	9f07      	ldr	r7, [sp, #28]
 8015294:	9d05      	ldr	r5, [sp, #20]
 8015296:	9a05      	ldr	r2, [sp, #20]
 8015298:	2101      	movs	r1, #1
 801529a:	441a      	add	r2, r3
 801529c:	4620      	mov	r0, r4
 801529e:	9205      	str	r2, [sp, #20]
 80152a0:	4498      	add	r8, r3
 80152a2:	f001 f895 	bl	80163d0 <__i2b>
 80152a6:	4606      	mov	r6, r0
 80152a8:	2d00      	cmp	r5, #0
 80152aa:	dd0c      	ble.n	80152c6 <_dtoa_r+0x72e>
 80152ac:	f1b8 0f00 	cmp.w	r8, #0
 80152b0:	dd09      	ble.n	80152c6 <_dtoa_r+0x72e>
 80152b2:	4545      	cmp	r5, r8
 80152b4:	9a05      	ldr	r2, [sp, #20]
 80152b6:	462b      	mov	r3, r5
 80152b8:	bfa8      	it	ge
 80152ba:	4643      	movge	r3, r8
 80152bc:	1ad2      	subs	r2, r2, r3
 80152be:	9205      	str	r2, [sp, #20]
 80152c0:	1aed      	subs	r5, r5, r3
 80152c2:	eba8 0803 	sub.w	r8, r8, r3
 80152c6:	9b07      	ldr	r3, [sp, #28]
 80152c8:	b1eb      	cbz	r3, 8015306 <_dtoa_r+0x76e>
 80152ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d067      	beq.n	80153a0 <_dtoa_r+0x808>
 80152d0:	b18f      	cbz	r7, 80152f6 <_dtoa_r+0x75e>
 80152d2:	4631      	mov	r1, r6
 80152d4:	463a      	mov	r2, r7
 80152d6:	4620      	mov	r0, r4
 80152d8:	f001 f91a 	bl	8016510 <__pow5mult>
 80152dc:	9a04      	ldr	r2, [sp, #16]
 80152de:	4601      	mov	r1, r0
 80152e0:	4606      	mov	r6, r0
 80152e2:	4620      	mov	r0, r4
 80152e4:	f001 f87d 	bl	80163e2 <__multiply>
 80152e8:	9904      	ldr	r1, [sp, #16]
 80152ea:	9008      	str	r0, [sp, #32]
 80152ec:	4620      	mov	r0, r4
 80152ee:	f000 ff91 	bl	8016214 <_Bfree>
 80152f2:	9b08      	ldr	r3, [sp, #32]
 80152f4:	9304      	str	r3, [sp, #16]
 80152f6:	9b07      	ldr	r3, [sp, #28]
 80152f8:	1bda      	subs	r2, r3, r7
 80152fa:	d004      	beq.n	8015306 <_dtoa_r+0x76e>
 80152fc:	9904      	ldr	r1, [sp, #16]
 80152fe:	4620      	mov	r0, r4
 8015300:	f001 f906 	bl	8016510 <__pow5mult>
 8015304:	9004      	str	r0, [sp, #16]
 8015306:	2101      	movs	r1, #1
 8015308:	4620      	mov	r0, r4
 801530a:	f001 f861 	bl	80163d0 <__i2b>
 801530e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015310:	4607      	mov	r7, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	f000 81d0 	beq.w	80156b8 <_dtoa_r+0xb20>
 8015318:	461a      	mov	r2, r3
 801531a:	4601      	mov	r1, r0
 801531c:	4620      	mov	r0, r4
 801531e:	f001 f8f7 	bl	8016510 <__pow5mult>
 8015322:	9b06      	ldr	r3, [sp, #24]
 8015324:	2b01      	cmp	r3, #1
 8015326:	4607      	mov	r7, r0
 8015328:	dc40      	bgt.n	80153ac <_dtoa_r+0x814>
 801532a:	9b00      	ldr	r3, [sp, #0]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d139      	bne.n	80153a4 <_dtoa_r+0x80c>
 8015330:	9b01      	ldr	r3, [sp, #4]
 8015332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015336:	2b00      	cmp	r3, #0
 8015338:	d136      	bne.n	80153a8 <_dtoa_r+0x810>
 801533a:	9b01      	ldr	r3, [sp, #4]
 801533c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015340:	0d1b      	lsrs	r3, r3, #20
 8015342:	051b      	lsls	r3, r3, #20
 8015344:	b12b      	cbz	r3, 8015352 <_dtoa_r+0x7ba>
 8015346:	9b05      	ldr	r3, [sp, #20]
 8015348:	3301      	adds	r3, #1
 801534a:	9305      	str	r3, [sp, #20]
 801534c:	f108 0801 	add.w	r8, r8, #1
 8015350:	2301      	movs	r3, #1
 8015352:	9307      	str	r3, [sp, #28]
 8015354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015356:	2b00      	cmp	r3, #0
 8015358:	d12a      	bne.n	80153b0 <_dtoa_r+0x818>
 801535a:	2001      	movs	r0, #1
 801535c:	e030      	b.n	80153c0 <_dtoa_r+0x828>
 801535e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015364:	e795      	b.n	8015292 <_dtoa_r+0x6fa>
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	f109 37ff 	add.w	r7, r9, #4294967295
 801536c:	42bb      	cmp	r3, r7
 801536e:	bfbf      	itttt	lt
 8015370:	9b07      	ldrlt	r3, [sp, #28]
 8015372:	9707      	strlt	r7, [sp, #28]
 8015374:	1afa      	sublt	r2, r7, r3
 8015376:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015378:	bfbb      	ittet	lt
 801537a:	189b      	addlt	r3, r3, r2
 801537c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801537e:	1bdf      	subge	r7, r3, r7
 8015380:	2700      	movlt	r7, #0
 8015382:	f1b9 0f00 	cmp.w	r9, #0
 8015386:	bfb5      	itete	lt
 8015388:	9b05      	ldrlt	r3, [sp, #20]
 801538a:	9d05      	ldrge	r5, [sp, #20]
 801538c:	eba3 0509 	sublt.w	r5, r3, r9
 8015390:	464b      	movge	r3, r9
 8015392:	bfb8      	it	lt
 8015394:	2300      	movlt	r3, #0
 8015396:	e77e      	b.n	8015296 <_dtoa_r+0x6fe>
 8015398:	9f07      	ldr	r7, [sp, #28]
 801539a:	9d05      	ldr	r5, [sp, #20]
 801539c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801539e:	e783      	b.n	80152a8 <_dtoa_r+0x710>
 80153a0:	9a07      	ldr	r2, [sp, #28]
 80153a2:	e7ab      	b.n	80152fc <_dtoa_r+0x764>
 80153a4:	2300      	movs	r3, #0
 80153a6:	e7d4      	b.n	8015352 <_dtoa_r+0x7ba>
 80153a8:	9b00      	ldr	r3, [sp, #0]
 80153aa:	e7d2      	b.n	8015352 <_dtoa_r+0x7ba>
 80153ac:	2300      	movs	r3, #0
 80153ae:	9307      	str	r3, [sp, #28]
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80153b6:	6918      	ldr	r0, [r3, #16]
 80153b8:	f000 ffbc 	bl	8016334 <__hi0bits>
 80153bc:	f1c0 0020 	rsb	r0, r0, #32
 80153c0:	4440      	add	r0, r8
 80153c2:	f010 001f 	ands.w	r0, r0, #31
 80153c6:	d047      	beq.n	8015458 <_dtoa_r+0x8c0>
 80153c8:	f1c0 0320 	rsb	r3, r0, #32
 80153cc:	2b04      	cmp	r3, #4
 80153ce:	dd3b      	ble.n	8015448 <_dtoa_r+0x8b0>
 80153d0:	9b05      	ldr	r3, [sp, #20]
 80153d2:	f1c0 001c 	rsb	r0, r0, #28
 80153d6:	4403      	add	r3, r0
 80153d8:	9305      	str	r3, [sp, #20]
 80153da:	4405      	add	r5, r0
 80153dc:	4480      	add	r8, r0
 80153de:	9b05      	ldr	r3, [sp, #20]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	dd05      	ble.n	80153f0 <_dtoa_r+0x858>
 80153e4:	461a      	mov	r2, r3
 80153e6:	9904      	ldr	r1, [sp, #16]
 80153e8:	4620      	mov	r0, r4
 80153ea:	f001 f8df 	bl	80165ac <__lshift>
 80153ee:	9004      	str	r0, [sp, #16]
 80153f0:	f1b8 0f00 	cmp.w	r8, #0
 80153f4:	dd05      	ble.n	8015402 <_dtoa_r+0x86a>
 80153f6:	4639      	mov	r1, r7
 80153f8:	4642      	mov	r2, r8
 80153fa:	4620      	mov	r0, r4
 80153fc:	f001 f8d6 	bl	80165ac <__lshift>
 8015400:	4607      	mov	r7, r0
 8015402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015404:	b353      	cbz	r3, 801545c <_dtoa_r+0x8c4>
 8015406:	4639      	mov	r1, r7
 8015408:	9804      	ldr	r0, [sp, #16]
 801540a:	f001 f923 	bl	8016654 <__mcmp>
 801540e:	2800      	cmp	r0, #0
 8015410:	da24      	bge.n	801545c <_dtoa_r+0x8c4>
 8015412:	2300      	movs	r3, #0
 8015414:	220a      	movs	r2, #10
 8015416:	9904      	ldr	r1, [sp, #16]
 8015418:	4620      	mov	r0, r4
 801541a:	f000 ff12 	bl	8016242 <__multadd>
 801541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015420:	9004      	str	r0, [sp, #16]
 8015422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 814d 	beq.w	80156c6 <_dtoa_r+0xb2e>
 801542c:	2300      	movs	r3, #0
 801542e:	4631      	mov	r1, r6
 8015430:	220a      	movs	r2, #10
 8015432:	4620      	mov	r0, r4
 8015434:	f000 ff05 	bl	8016242 <__multadd>
 8015438:	9b02      	ldr	r3, [sp, #8]
 801543a:	2b00      	cmp	r3, #0
 801543c:	4606      	mov	r6, r0
 801543e:	dc4f      	bgt.n	80154e0 <_dtoa_r+0x948>
 8015440:	9b06      	ldr	r3, [sp, #24]
 8015442:	2b02      	cmp	r3, #2
 8015444:	dd4c      	ble.n	80154e0 <_dtoa_r+0x948>
 8015446:	e011      	b.n	801546c <_dtoa_r+0x8d4>
 8015448:	d0c9      	beq.n	80153de <_dtoa_r+0x846>
 801544a:	9a05      	ldr	r2, [sp, #20]
 801544c:	331c      	adds	r3, #28
 801544e:	441a      	add	r2, r3
 8015450:	9205      	str	r2, [sp, #20]
 8015452:	441d      	add	r5, r3
 8015454:	4498      	add	r8, r3
 8015456:	e7c2      	b.n	80153de <_dtoa_r+0x846>
 8015458:	4603      	mov	r3, r0
 801545a:	e7f6      	b.n	801544a <_dtoa_r+0x8b2>
 801545c:	f1b9 0f00 	cmp.w	r9, #0
 8015460:	dc38      	bgt.n	80154d4 <_dtoa_r+0x93c>
 8015462:	9b06      	ldr	r3, [sp, #24]
 8015464:	2b02      	cmp	r3, #2
 8015466:	dd35      	ble.n	80154d4 <_dtoa_r+0x93c>
 8015468:	f8cd 9008 	str.w	r9, [sp, #8]
 801546c:	9b02      	ldr	r3, [sp, #8]
 801546e:	b963      	cbnz	r3, 801548a <_dtoa_r+0x8f2>
 8015470:	4639      	mov	r1, r7
 8015472:	2205      	movs	r2, #5
 8015474:	4620      	mov	r0, r4
 8015476:	f000 fee4 	bl	8016242 <__multadd>
 801547a:	4601      	mov	r1, r0
 801547c:	4607      	mov	r7, r0
 801547e:	9804      	ldr	r0, [sp, #16]
 8015480:	f001 f8e8 	bl	8016654 <__mcmp>
 8015484:	2800      	cmp	r0, #0
 8015486:	f73f adcc 	bgt.w	8015022 <_dtoa_r+0x48a>
 801548a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801548c:	465d      	mov	r5, fp
 801548e:	ea6f 0a03 	mvn.w	sl, r3
 8015492:	f04f 0900 	mov.w	r9, #0
 8015496:	4639      	mov	r1, r7
 8015498:	4620      	mov	r0, r4
 801549a:	f000 febb 	bl	8016214 <_Bfree>
 801549e:	2e00      	cmp	r6, #0
 80154a0:	f43f aeb7 	beq.w	8015212 <_dtoa_r+0x67a>
 80154a4:	f1b9 0f00 	cmp.w	r9, #0
 80154a8:	d005      	beq.n	80154b6 <_dtoa_r+0x91e>
 80154aa:	45b1      	cmp	r9, r6
 80154ac:	d003      	beq.n	80154b6 <_dtoa_r+0x91e>
 80154ae:	4649      	mov	r1, r9
 80154b0:	4620      	mov	r0, r4
 80154b2:	f000 feaf 	bl	8016214 <_Bfree>
 80154b6:	4631      	mov	r1, r6
 80154b8:	4620      	mov	r0, r4
 80154ba:	f000 feab 	bl	8016214 <_Bfree>
 80154be:	e6a8      	b.n	8015212 <_dtoa_r+0x67a>
 80154c0:	2700      	movs	r7, #0
 80154c2:	463e      	mov	r6, r7
 80154c4:	e7e1      	b.n	801548a <_dtoa_r+0x8f2>
 80154c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80154ca:	463e      	mov	r6, r7
 80154cc:	e5a9      	b.n	8015022 <_dtoa_r+0x48a>
 80154ce:	bf00      	nop
 80154d0:	40240000 	.word	0x40240000
 80154d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f000 80fa 	beq.w	80156d4 <_dtoa_r+0xb3c>
 80154e0:	2d00      	cmp	r5, #0
 80154e2:	dd05      	ble.n	80154f0 <_dtoa_r+0x958>
 80154e4:	4631      	mov	r1, r6
 80154e6:	462a      	mov	r2, r5
 80154e8:	4620      	mov	r0, r4
 80154ea:	f001 f85f 	bl	80165ac <__lshift>
 80154ee:	4606      	mov	r6, r0
 80154f0:	9b07      	ldr	r3, [sp, #28]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d04c      	beq.n	8015590 <_dtoa_r+0x9f8>
 80154f6:	6871      	ldr	r1, [r6, #4]
 80154f8:	4620      	mov	r0, r4
 80154fa:	f000 fe57 	bl	80161ac <_Balloc>
 80154fe:	6932      	ldr	r2, [r6, #16]
 8015500:	3202      	adds	r2, #2
 8015502:	4605      	mov	r5, r0
 8015504:	0092      	lsls	r2, r2, #2
 8015506:	f106 010c 	add.w	r1, r6, #12
 801550a:	300c      	adds	r0, #12
 801550c:	f7fd fb54 	bl	8012bb8 <memcpy>
 8015510:	2201      	movs	r2, #1
 8015512:	4629      	mov	r1, r5
 8015514:	4620      	mov	r0, r4
 8015516:	f001 f849 	bl	80165ac <__lshift>
 801551a:	9b00      	ldr	r3, [sp, #0]
 801551c:	f8cd b014 	str.w	fp, [sp, #20]
 8015520:	f003 0301 	and.w	r3, r3, #1
 8015524:	46b1      	mov	r9, r6
 8015526:	9307      	str	r3, [sp, #28]
 8015528:	4606      	mov	r6, r0
 801552a:	4639      	mov	r1, r7
 801552c:	9804      	ldr	r0, [sp, #16]
 801552e:	f7ff faa7 	bl	8014a80 <quorem>
 8015532:	4649      	mov	r1, r9
 8015534:	4605      	mov	r5, r0
 8015536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801553a:	9804      	ldr	r0, [sp, #16]
 801553c:	f001 f88a 	bl	8016654 <__mcmp>
 8015540:	4632      	mov	r2, r6
 8015542:	9000      	str	r0, [sp, #0]
 8015544:	4639      	mov	r1, r7
 8015546:	4620      	mov	r0, r4
 8015548:	f001 f89e 	bl	8016688 <__mdiff>
 801554c:	68c3      	ldr	r3, [r0, #12]
 801554e:	4602      	mov	r2, r0
 8015550:	bb03      	cbnz	r3, 8015594 <_dtoa_r+0x9fc>
 8015552:	4601      	mov	r1, r0
 8015554:	9008      	str	r0, [sp, #32]
 8015556:	9804      	ldr	r0, [sp, #16]
 8015558:	f001 f87c 	bl	8016654 <__mcmp>
 801555c:	9a08      	ldr	r2, [sp, #32]
 801555e:	4603      	mov	r3, r0
 8015560:	4611      	mov	r1, r2
 8015562:	4620      	mov	r0, r4
 8015564:	9308      	str	r3, [sp, #32]
 8015566:	f000 fe55 	bl	8016214 <_Bfree>
 801556a:	9b08      	ldr	r3, [sp, #32]
 801556c:	b9a3      	cbnz	r3, 8015598 <_dtoa_r+0xa00>
 801556e:	9a06      	ldr	r2, [sp, #24]
 8015570:	b992      	cbnz	r2, 8015598 <_dtoa_r+0xa00>
 8015572:	9a07      	ldr	r2, [sp, #28]
 8015574:	b982      	cbnz	r2, 8015598 <_dtoa_r+0xa00>
 8015576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801557a:	d029      	beq.n	80155d0 <_dtoa_r+0xa38>
 801557c:	9b00      	ldr	r3, [sp, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	dd01      	ble.n	8015586 <_dtoa_r+0x9ee>
 8015582:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015586:	9b05      	ldr	r3, [sp, #20]
 8015588:	1c5d      	adds	r5, r3, #1
 801558a:	f883 8000 	strb.w	r8, [r3]
 801558e:	e782      	b.n	8015496 <_dtoa_r+0x8fe>
 8015590:	4630      	mov	r0, r6
 8015592:	e7c2      	b.n	801551a <_dtoa_r+0x982>
 8015594:	2301      	movs	r3, #1
 8015596:	e7e3      	b.n	8015560 <_dtoa_r+0x9c8>
 8015598:	9a00      	ldr	r2, [sp, #0]
 801559a:	2a00      	cmp	r2, #0
 801559c:	db04      	blt.n	80155a8 <_dtoa_r+0xa10>
 801559e:	d125      	bne.n	80155ec <_dtoa_r+0xa54>
 80155a0:	9a06      	ldr	r2, [sp, #24]
 80155a2:	bb1a      	cbnz	r2, 80155ec <_dtoa_r+0xa54>
 80155a4:	9a07      	ldr	r2, [sp, #28]
 80155a6:	bb0a      	cbnz	r2, 80155ec <_dtoa_r+0xa54>
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	ddec      	ble.n	8015586 <_dtoa_r+0x9ee>
 80155ac:	2201      	movs	r2, #1
 80155ae:	9904      	ldr	r1, [sp, #16]
 80155b0:	4620      	mov	r0, r4
 80155b2:	f000 fffb 	bl	80165ac <__lshift>
 80155b6:	4639      	mov	r1, r7
 80155b8:	9004      	str	r0, [sp, #16]
 80155ba:	f001 f84b 	bl	8016654 <__mcmp>
 80155be:	2800      	cmp	r0, #0
 80155c0:	dc03      	bgt.n	80155ca <_dtoa_r+0xa32>
 80155c2:	d1e0      	bne.n	8015586 <_dtoa_r+0x9ee>
 80155c4:	f018 0f01 	tst.w	r8, #1
 80155c8:	d0dd      	beq.n	8015586 <_dtoa_r+0x9ee>
 80155ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155ce:	d1d8      	bne.n	8015582 <_dtoa_r+0x9ea>
 80155d0:	9b05      	ldr	r3, [sp, #20]
 80155d2:	9a05      	ldr	r2, [sp, #20]
 80155d4:	1c5d      	adds	r5, r3, #1
 80155d6:	2339      	movs	r3, #57	; 0x39
 80155d8:	7013      	strb	r3, [r2, #0]
 80155da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155de:	2b39      	cmp	r3, #57	; 0x39
 80155e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80155e4:	d04f      	beq.n	8015686 <_dtoa_r+0xaee>
 80155e6:	3301      	adds	r3, #1
 80155e8:	7013      	strb	r3, [r2, #0]
 80155ea:	e754      	b.n	8015496 <_dtoa_r+0x8fe>
 80155ec:	9a05      	ldr	r2, [sp, #20]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	f102 0501 	add.w	r5, r2, #1
 80155f4:	dd06      	ble.n	8015604 <_dtoa_r+0xa6c>
 80155f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155fa:	d0e9      	beq.n	80155d0 <_dtoa_r+0xa38>
 80155fc:	f108 0801 	add.w	r8, r8, #1
 8015600:	9b05      	ldr	r3, [sp, #20]
 8015602:	e7c2      	b.n	801558a <_dtoa_r+0x9f2>
 8015604:	9a02      	ldr	r2, [sp, #8]
 8015606:	f805 8c01 	strb.w	r8, [r5, #-1]
 801560a:	eba5 030b 	sub.w	r3, r5, fp
 801560e:	4293      	cmp	r3, r2
 8015610:	d021      	beq.n	8015656 <_dtoa_r+0xabe>
 8015612:	2300      	movs	r3, #0
 8015614:	220a      	movs	r2, #10
 8015616:	9904      	ldr	r1, [sp, #16]
 8015618:	4620      	mov	r0, r4
 801561a:	f000 fe12 	bl	8016242 <__multadd>
 801561e:	45b1      	cmp	r9, r6
 8015620:	9004      	str	r0, [sp, #16]
 8015622:	f04f 0300 	mov.w	r3, #0
 8015626:	f04f 020a 	mov.w	r2, #10
 801562a:	4649      	mov	r1, r9
 801562c:	4620      	mov	r0, r4
 801562e:	d105      	bne.n	801563c <_dtoa_r+0xaa4>
 8015630:	f000 fe07 	bl	8016242 <__multadd>
 8015634:	4681      	mov	r9, r0
 8015636:	4606      	mov	r6, r0
 8015638:	9505      	str	r5, [sp, #20]
 801563a:	e776      	b.n	801552a <_dtoa_r+0x992>
 801563c:	f000 fe01 	bl	8016242 <__multadd>
 8015640:	4631      	mov	r1, r6
 8015642:	4681      	mov	r9, r0
 8015644:	2300      	movs	r3, #0
 8015646:	220a      	movs	r2, #10
 8015648:	4620      	mov	r0, r4
 801564a:	f000 fdfa 	bl	8016242 <__multadd>
 801564e:	4606      	mov	r6, r0
 8015650:	e7f2      	b.n	8015638 <_dtoa_r+0xaa0>
 8015652:	f04f 0900 	mov.w	r9, #0
 8015656:	2201      	movs	r2, #1
 8015658:	9904      	ldr	r1, [sp, #16]
 801565a:	4620      	mov	r0, r4
 801565c:	f000 ffa6 	bl	80165ac <__lshift>
 8015660:	4639      	mov	r1, r7
 8015662:	9004      	str	r0, [sp, #16]
 8015664:	f000 fff6 	bl	8016654 <__mcmp>
 8015668:	2800      	cmp	r0, #0
 801566a:	dcb6      	bgt.n	80155da <_dtoa_r+0xa42>
 801566c:	d102      	bne.n	8015674 <_dtoa_r+0xadc>
 801566e:	f018 0f01 	tst.w	r8, #1
 8015672:	d1b2      	bne.n	80155da <_dtoa_r+0xa42>
 8015674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015678:	2b30      	cmp	r3, #48	; 0x30
 801567a:	f105 32ff 	add.w	r2, r5, #4294967295
 801567e:	f47f af0a 	bne.w	8015496 <_dtoa_r+0x8fe>
 8015682:	4615      	mov	r5, r2
 8015684:	e7f6      	b.n	8015674 <_dtoa_r+0xadc>
 8015686:	4593      	cmp	fp, r2
 8015688:	d105      	bne.n	8015696 <_dtoa_r+0xafe>
 801568a:	2331      	movs	r3, #49	; 0x31
 801568c:	f10a 0a01 	add.w	sl, sl, #1
 8015690:	f88b 3000 	strb.w	r3, [fp]
 8015694:	e6ff      	b.n	8015496 <_dtoa_r+0x8fe>
 8015696:	4615      	mov	r5, r2
 8015698:	e79f      	b.n	80155da <_dtoa_r+0xa42>
 801569a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015700 <_dtoa_r+0xb68>
 801569e:	e007      	b.n	80156b0 <_dtoa_r+0xb18>
 80156a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015704 <_dtoa_r+0xb6c>
 80156a6:	b11b      	cbz	r3, 80156b0 <_dtoa_r+0xb18>
 80156a8:	f10b 0308 	add.w	r3, fp, #8
 80156ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80156ae:	6013      	str	r3, [r2, #0]
 80156b0:	4658      	mov	r0, fp
 80156b2:	b017      	add	sp, #92	; 0x5c
 80156b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b8:	9b06      	ldr	r3, [sp, #24]
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	f77f ae35 	ble.w	801532a <_dtoa_r+0x792>
 80156c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156c2:	9307      	str	r3, [sp, #28]
 80156c4:	e649      	b.n	801535a <_dtoa_r+0x7c2>
 80156c6:	9b02      	ldr	r3, [sp, #8]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	dc03      	bgt.n	80156d4 <_dtoa_r+0xb3c>
 80156cc:	9b06      	ldr	r3, [sp, #24]
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	f73f aecc 	bgt.w	801546c <_dtoa_r+0x8d4>
 80156d4:	465d      	mov	r5, fp
 80156d6:	4639      	mov	r1, r7
 80156d8:	9804      	ldr	r0, [sp, #16]
 80156da:	f7ff f9d1 	bl	8014a80 <quorem>
 80156de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80156e2:	f805 8b01 	strb.w	r8, [r5], #1
 80156e6:	9a02      	ldr	r2, [sp, #8]
 80156e8:	eba5 030b 	sub.w	r3, r5, fp
 80156ec:	429a      	cmp	r2, r3
 80156ee:	ddb0      	ble.n	8015652 <_dtoa_r+0xaba>
 80156f0:	2300      	movs	r3, #0
 80156f2:	220a      	movs	r2, #10
 80156f4:	9904      	ldr	r1, [sp, #16]
 80156f6:	4620      	mov	r0, r4
 80156f8:	f000 fda3 	bl	8016242 <__multadd>
 80156fc:	9004      	str	r0, [sp, #16]
 80156fe:	e7ea      	b.n	80156d6 <_dtoa_r+0xb3e>
 8015700:	080183fb 	.word	0x080183fb
 8015704:	08018258 	.word	0x08018258

08015708 <__sflush_r>:
 8015708:	898a      	ldrh	r2, [r1, #12]
 801570a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801570e:	4605      	mov	r5, r0
 8015710:	0710      	lsls	r0, r2, #28
 8015712:	460c      	mov	r4, r1
 8015714:	d458      	bmi.n	80157c8 <__sflush_r+0xc0>
 8015716:	684b      	ldr	r3, [r1, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	dc05      	bgt.n	8015728 <__sflush_r+0x20>
 801571c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801571e:	2b00      	cmp	r3, #0
 8015720:	dc02      	bgt.n	8015728 <__sflush_r+0x20>
 8015722:	2000      	movs	r0, #0
 8015724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801572a:	2e00      	cmp	r6, #0
 801572c:	d0f9      	beq.n	8015722 <__sflush_r+0x1a>
 801572e:	2300      	movs	r3, #0
 8015730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015734:	682f      	ldr	r7, [r5, #0]
 8015736:	6a21      	ldr	r1, [r4, #32]
 8015738:	602b      	str	r3, [r5, #0]
 801573a:	d032      	beq.n	80157a2 <__sflush_r+0x9a>
 801573c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801573e:	89a3      	ldrh	r3, [r4, #12]
 8015740:	075a      	lsls	r2, r3, #29
 8015742:	d505      	bpl.n	8015750 <__sflush_r+0x48>
 8015744:	6863      	ldr	r3, [r4, #4]
 8015746:	1ac0      	subs	r0, r0, r3
 8015748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801574a:	b10b      	cbz	r3, 8015750 <__sflush_r+0x48>
 801574c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801574e:	1ac0      	subs	r0, r0, r3
 8015750:	2300      	movs	r3, #0
 8015752:	4602      	mov	r2, r0
 8015754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015756:	6a21      	ldr	r1, [r4, #32]
 8015758:	4628      	mov	r0, r5
 801575a:	47b0      	blx	r6
 801575c:	1c43      	adds	r3, r0, #1
 801575e:	89a3      	ldrh	r3, [r4, #12]
 8015760:	d106      	bne.n	8015770 <__sflush_r+0x68>
 8015762:	6829      	ldr	r1, [r5, #0]
 8015764:	291d      	cmp	r1, #29
 8015766:	d848      	bhi.n	80157fa <__sflush_r+0xf2>
 8015768:	4a29      	ldr	r2, [pc, #164]	; (8015810 <__sflush_r+0x108>)
 801576a:	40ca      	lsrs	r2, r1
 801576c:	07d6      	lsls	r6, r2, #31
 801576e:	d544      	bpl.n	80157fa <__sflush_r+0xf2>
 8015770:	2200      	movs	r2, #0
 8015772:	6062      	str	r2, [r4, #4]
 8015774:	04d9      	lsls	r1, r3, #19
 8015776:	6922      	ldr	r2, [r4, #16]
 8015778:	6022      	str	r2, [r4, #0]
 801577a:	d504      	bpl.n	8015786 <__sflush_r+0x7e>
 801577c:	1c42      	adds	r2, r0, #1
 801577e:	d101      	bne.n	8015784 <__sflush_r+0x7c>
 8015780:	682b      	ldr	r3, [r5, #0]
 8015782:	b903      	cbnz	r3, 8015786 <__sflush_r+0x7e>
 8015784:	6560      	str	r0, [r4, #84]	; 0x54
 8015786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015788:	602f      	str	r7, [r5, #0]
 801578a:	2900      	cmp	r1, #0
 801578c:	d0c9      	beq.n	8015722 <__sflush_r+0x1a>
 801578e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015792:	4299      	cmp	r1, r3
 8015794:	d002      	beq.n	801579c <__sflush_r+0x94>
 8015796:	4628      	mov	r0, r5
 8015798:	f001 f916 	bl	80169c8 <_free_r>
 801579c:	2000      	movs	r0, #0
 801579e:	6360      	str	r0, [r4, #52]	; 0x34
 80157a0:	e7c0      	b.n	8015724 <__sflush_r+0x1c>
 80157a2:	2301      	movs	r3, #1
 80157a4:	4628      	mov	r0, r5
 80157a6:	47b0      	blx	r6
 80157a8:	1c41      	adds	r1, r0, #1
 80157aa:	d1c8      	bne.n	801573e <__sflush_r+0x36>
 80157ac:	682b      	ldr	r3, [r5, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d0c5      	beq.n	801573e <__sflush_r+0x36>
 80157b2:	2b1d      	cmp	r3, #29
 80157b4:	d001      	beq.n	80157ba <__sflush_r+0xb2>
 80157b6:	2b16      	cmp	r3, #22
 80157b8:	d101      	bne.n	80157be <__sflush_r+0xb6>
 80157ba:	602f      	str	r7, [r5, #0]
 80157bc:	e7b1      	b.n	8015722 <__sflush_r+0x1a>
 80157be:	89a3      	ldrh	r3, [r4, #12]
 80157c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157c4:	81a3      	strh	r3, [r4, #12]
 80157c6:	e7ad      	b.n	8015724 <__sflush_r+0x1c>
 80157c8:	690f      	ldr	r7, [r1, #16]
 80157ca:	2f00      	cmp	r7, #0
 80157cc:	d0a9      	beq.n	8015722 <__sflush_r+0x1a>
 80157ce:	0793      	lsls	r3, r2, #30
 80157d0:	680e      	ldr	r6, [r1, #0]
 80157d2:	bf08      	it	eq
 80157d4:	694b      	ldreq	r3, [r1, #20]
 80157d6:	600f      	str	r7, [r1, #0]
 80157d8:	bf18      	it	ne
 80157da:	2300      	movne	r3, #0
 80157dc:	eba6 0807 	sub.w	r8, r6, r7
 80157e0:	608b      	str	r3, [r1, #8]
 80157e2:	f1b8 0f00 	cmp.w	r8, #0
 80157e6:	dd9c      	ble.n	8015722 <__sflush_r+0x1a>
 80157e8:	4643      	mov	r3, r8
 80157ea:	463a      	mov	r2, r7
 80157ec:	6a21      	ldr	r1, [r4, #32]
 80157ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157f0:	4628      	mov	r0, r5
 80157f2:	47b0      	blx	r6
 80157f4:	2800      	cmp	r0, #0
 80157f6:	dc06      	bgt.n	8015806 <__sflush_r+0xfe>
 80157f8:	89a3      	ldrh	r3, [r4, #12]
 80157fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157fe:	81a3      	strh	r3, [r4, #12]
 8015800:	f04f 30ff 	mov.w	r0, #4294967295
 8015804:	e78e      	b.n	8015724 <__sflush_r+0x1c>
 8015806:	4407      	add	r7, r0
 8015808:	eba8 0800 	sub.w	r8, r8, r0
 801580c:	e7e9      	b.n	80157e2 <__sflush_r+0xda>
 801580e:	bf00      	nop
 8015810:	20400001 	.word	0x20400001

08015814 <_fflush_r>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	690b      	ldr	r3, [r1, #16]
 8015818:	4605      	mov	r5, r0
 801581a:	460c      	mov	r4, r1
 801581c:	b1db      	cbz	r3, 8015856 <_fflush_r+0x42>
 801581e:	b118      	cbz	r0, 8015828 <_fflush_r+0x14>
 8015820:	6983      	ldr	r3, [r0, #24]
 8015822:	b90b      	cbnz	r3, 8015828 <_fflush_r+0x14>
 8015824:	f000 f860 	bl	80158e8 <__sinit>
 8015828:	4b0c      	ldr	r3, [pc, #48]	; (801585c <_fflush_r+0x48>)
 801582a:	429c      	cmp	r4, r3
 801582c:	d109      	bne.n	8015842 <_fflush_r+0x2e>
 801582e:	686c      	ldr	r4, [r5, #4]
 8015830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015834:	b17b      	cbz	r3, 8015856 <_fflush_r+0x42>
 8015836:	4621      	mov	r1, r4
 8015838:	4628      	mov	r0, r5
 801583a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801583e:	f7ff bf63 	b.w	8015708 <__sflush_r>
 8015842:	4b07      	ldr	r3, [pc, #28]	; (8015860 <_fflush_r+0x4c>)
 8015844:	429c      	cmp	r4, r3
 8015846:	d101      	bne.n	801584c <_fflush_r+0x38>
 8015848:	68ac      	ldr	r4, [r5, #8]
 801584a:	e7f1      	b.n	8015830 <_fflush_r+0x1c>
 801584c:	4b05      	ldr	r3, [pc, #20]	; (8015864 <_fflush_r+0x50>)
 801584e:	429c      	cmp	r4, r3
 8015850:	bf08      	it	eq
 8015852:	68ec      	ldreq	r4, [r5, #12]
 8015854:	e7ec      	b.n	8015830 <_fflush_r+0x1c>
 8015856:	2000      	movs	r0, #0
 8015858:	bd38      	pop	{r3, r4, r5, pc}
 801585a:	bf00      	nop
 801585c:	08018288 	.word	0x08018288
 8015860:	080182a8 	.word	0x080182a8
 8015864:	08018268 	.word	0x08018268

08015868 <std>:
 8015868:	2300      	movs	r3, #0
 801586a:	b510      	push	{r4, lr}
 801586c:	4604      	mov	r4, r0
 801586e:	e9c0 3300 	strd	r3, r3, [r0]
 8015872:	6083      	str	r3, [r0, #8]
 8015874:	8181      	strh	r1, [r0, #12]
 8015876:	6643      	str	r3, [r0, #100]	; 0x64
 8015878:	81c2      	strh	r2, [r0, #14]
 801587a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801587e:	6183      	str	r3, [r0, #24]
 8015880:	4619      	mov	r1, r3
 8015882:	2208      	movs	r2, #8
 8015884:	305c      	adds	r0, #92	; 0x5c
 8015886:	f7fd f9a2 	bl	8012bce <memset>
 801588a:	4b05      	ldr	r3, [pc, #20]	; (80158a0 <std+0x38>)
 801588c:	6263      	str	r3, [r4, #36]	; 0x24
 801588e:	4b05      	ldr	r3, [pc, #20]	; (80158a4 <std+0x3c>)
 8015890:	62a3      	str	r3, [r4, #40]	; 0x28
 8015892:	4b05      	ldr	r3, [pc, #20]	; (80158a8 <std+0x40>)
 8015894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015896:	4b05      	ldr	r3, [pc, #20]	; (80158ac <std+0x44>)
 8015898:	6224      	str	r4, [r4, #32]
 801589a:	6323      	str	r3, [r4, #48]	; 0x30
 801589c:	bd10      	pop	{r4, pc}
 801589e:	bf00      	nop
 80158a0:	08013a85 	.word	0x08013a85
 80158a4:	08013aab 	.word	0x08013aab
 80158a8:	08013ae3 	.word	0x08013ae3
 80158ac:	08013b07 	.word	0x08013b07

080158b0 <_cleanup_r>:
 80158b0:	4901      	ldr	r1, [pc, #4]	; (80158b8 <_cleanup_r+0x8>)
 80158b2:	f000 b885 	b.w	80159c0 <_fwalk_reent>
 80158b6:	bf00      	nop
 80158b8:	08015815 	.word	0x08015815

080158bc <__sfmoreglue>:
 80158bc:	b570      	push	{r4, r5, r6, lr}
 80158be:	1e4a      	subs	r2, r1, #1
 80158c0:	2568      	movs	r5, #104	; 0x68
 80158c2:	4355      	muls	r5, r2
 80158c4:	460e      	mov	r6, r1
 80158c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158ca:	f001 f8cb 	bl	8016a64 <_malloc_r>
 80158ce:	4604      	mov	r4, r0
 80158d0:	b140      	cbz	r0, 80158e4 <__sfmoreglue+0x28>
 80158d2:	2100      	movs	r1, #0
 80158d4:	e9c0 1600 	strd	r1, r6, [r0]
 80158d8:	300c      	adds	r0, #12
 80158da:	60a0      	str	r0, [r4, #8]
 80158dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158e0:	f7fd f975 	bl	8012bce <memset>
 80158e4:	4620      	mov	r0, r4
 80158e6:	bd70      	pop	{r4, r5, r6, pc}

080158e8 <__sinit>:
 80158e8:	6983      	ldr	r3, [r0, #24]
 80158ea:	b510      	push	{r4, lr}
 80158ec:	4604      	mov	r4, r0
 80158ee:	bb33      	cbnz	r3, 801593e <__sinit+0x56>
 80158f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158f4:	6503      	str	r3, [r0, #80]	; 0x50
 80158f6:	4b12      	ldr	r3, [pc, #72]	; (8015940 <__sinit+0x58>)
 80158f8:	4a12      	ldr	r2, [pc, #72]	; (8015944 <__sinit+0x5c>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	6282      	str	r2, [r0, #40]	; 0x28
 80158fe:	4298      	cmp	r0, r3
 8015900:	bf04      	itt	eq
 8015902:	2301      	moveq	r3, #1
 8015904:	6183      	streq	r3, [r0, #24]
 8015906:	f000 f81f 	bl	8015948 <__sfp>
 801590a:	6060      	str	r0, [r4, #4]
 801590c:	4620      	mov	r0, r4
 801590e:	f000 f81b 	bl	8015948 <__sfp>
 8015912:	60a0      	str	r0, [r4, #8]
 8015914:	4620      	mov	r0, r4
 8015916:	f000 f817 	bl	8015948 <__sfp>
 801591a:	2200      	movs	r2, #0
 801591c:	60e0      	str	r0, [r4, #12]
 801591e:	2104      	movs	r1, #4
 8015920:	6860      	ldr	r0, [r4, #4]
 8015922:	f7ff ffa1 	bl	8015868 <std>
 8015926:	2201      	movs	r2, #1
 8015928:	2109      	movs	r1, #9
 801592a:	68a0      	ldr	r0, [r4, #8]
 801592c:	f7ff ff9c 	bl	8015868 <std>
 8015930:	2202      	movs	r2, #2
 8015932:	2112      	movs	r1, #18
 8015934:	68e0      	ldr	r0, [r4, #12]
 8015936:	f7ff ff97 	bl	8015868 <std>
 801593a:	2301      	movs	r3, #1
 801593c:	61a3      	str	r3, [r4, #24]
 801593e:	bd10      	pop	{r4, pc}
 8015940:	080181c8 	.word	0x080181c8
 8015944:	080158b1 	.word	0x080158b1

08015948 <__sfp>:
 8015948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801594a:	4b1b      	ldr	r3, [pc, #108]	; (80159b8 <__sfp+0x70>)
 801594c:	681e      	ldr	r6, [r3, #0]
 801594e:	69b3      	ldr	r3, [r6, #24]
 8015950:	4607      	mov	r7, r0
 8015952:	b913      	cbnz	r3, 801595a <__sfp+0x12>
 8015954:	4630      	mov	r0, r6
 8015956:	f7ff ffc7 	bl	80158e8 <__sinit>
 801595a:	3648      	adds	r6, #72	; 0x48
 801595c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015960:	3b01      	subs	r3, #1
 8015962:	d503      	bpl.n	801596c <__sfp+0x24>
 8015964:	6833      	ldr	r3, [r6, #0]
 8015966:	b133      	cbz	r3, 8015976 <__sfp+0x2e>
 8015968:	6836      	ldr	r6, [r6, #0]
 801596a:	e7f7      	b.n	801595c <__sfp+0x14>
 801596c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015970:	b16d      	cbz	r5, 801598e <__sfp+0x46>
 8015972:	3468      	adds	r4, #104	; 0x68
 8015974:	e7f4      	b.n	8015960 <__sfp+0x18>
 8015976:	2104      	movs	r1, #4
 8015978:	4638      	mov	r0, r7
 801597a:	f7ff ff9f 	bl	80158bc <__sfmoreglue>
 801597e:	6030      	str	r0, [r6, #0]
 8015980:	2800      	cmp	r0, #0
 8015982:	d1f1      	bne.n	8015968 <__sfp+0x20>
 8015984:	230c      	movs	r3, #12
 8015986:	603b      	str	r3, [r7, #0]
 8015988:	4604      	mov	r4, r0
 801598a:	4620      	mov	r0, r4
 801598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801598e:	4b0b      	ldr	r3, [pc, #44]	; (80159bc <__sfp+0x74>)
 8015990:	6665      	str	r5, [r4, #100]	; 0x64
 8015992:	e9c4 5500 	strd	r5, r5, [r4]
 8015996:	60a5      	str	r5, [r4, #8]
 8015998:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801599c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80159a0:	2208      	movs	r2, #8
 80159a2:	4629      	mov	r1, r5
 80159a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80159a8:	f7fd f911 	bl	8012bce <memset>
 80159ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80159b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80159b4:	e7e9      	b.n	801598a <__sfp+0x42>
 80159b6:	bf00      	nop
 80159b8:	080181c8 	.word	0x080181c8
 80159bc:	ffff0001 	.word	0xffff0001

080159c0 <_fwalk_reent>:
 80159c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c4:	4680      	mov	r8, r0
 80159c6:	4689      	mov	r9, r1
 80159c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80159cc:	2600      	movs	r6, #0
 80159ce:	b914      	cbnz	r4, 80159d6 <_fwalk_reent+0x16>
 80159d0:	4630      	mov	r0, r6
 80159d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80159da:	3f01      	subs	r7, #1
 80159dc:	d501      	bpl.n	80159e2 <_fwalk_reent+0x22>
 80159de:	6824      	ldr	r4, [r4, #0]
 80159e0:	e7f5      	b.n	80159ce <_fwalk_reent+0xe>
 80159e2:	89ab      	ldrh	r3, [r5, #12]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	d907      	bls.n	80159f8 <_fwalk_reent+0x38>
 80159e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159ec:	3301      	adds	r3, #1
 80159ee:	d003      	beq.n	80159f8 <_fwalk_reent+0x38>
 80159f0:	4629      	mov	r1, r5
 80159f2:	4640      	mov	r0, r8
 80159f4:	47c8      	blx	r9
 80159f6:	4306      	orrs	r6, r0
 80159f8:	3568      	adds	r5, #104	; 0x68
 80159fa:	e7ee      	b.n	80159da <_fwalk_reent+0x1a>

080159fc <rshift>:
 80159fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159fe:	6906      	ldr	r6, [r0, #16]
 8015a00:	114b      	asrs	r3, r1, #5
 8015a02:	429e      	cmp	r6, r3
 8015a04:	f100 0414 	add.w	r4, r0, #20
 8015a08:	dd30      	ble.n	8015a6c <rshift+0x70>
 8015a0a:	f011 011f 	ands.w	r1, r1, #31
 8015a0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015a12:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015a16:	d108      	bne.n	8015a2a <rshift+0x2e>
 8015a18:	4621      	mov	r1, r4
 8015a1a:	42b2      	cmp	r2, r6
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	d211      	bcs.n	8015a44 <rshift+0x48>
 8015a20:	f852 3b04 	ldr.w	r3, [r2], #4
 8015a24:	f841 3b04 	str.w	r3, [r1], #4
 8015a28:	e7f7      	b.n	8015a1a <rshift+0x1e>
 8015a2a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015a2e:	f1c1 0c20 	rsb	ip, r1, #32
 8015a32:	40cd      	lsrs	r5, r1
 8015a34:	3204      	adds	r2, #4
 8015a36:	4623      	mov	r3, r4
 8015a38:	42b2      	cmp	r2, r6
 8015a3a:	4617      	mov	r7, r2
 8015a3c:	d30c      	bcc.n	8015a58 <rshift+0x5c>
 8015a3e:	601d      	str	r5, [r3, #0]
 8015a40:	b105      	cbz	r5, 8015a44 <rshift+0x48>
 8015a42:	3304      	adds	r3, #4
 8015a44:	1b1a      	subs	r2, r3, r4
 8015a46:	42a3      	cmp	r3, r4
 8015a48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a4c:	bf08      	it	eq
 8015a4e:	2300      	moveq	r3, #0
 8015a50:	6102      	str	r2, [r0, #16]
 8015a52:	bf08      	it	eq
 8015a54:	6143      	streq	r3, [r0, #20]
 8015a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a58:	683f      	ldr	r7, [r7, #0]
 8015a5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8015a5e:	433d      	orrs	r5, r7
 8015a60:	f843 5b04 	str.w	r5, [r3], #4
 8015a64:	f852 5b04 	ldr.w	r5, [r2], #4
 8015a68:	40cd      	lsrs	r5, r1
 8015a6a:	e7e5      	b.n	8015a38 <rshift+0x3c>
 8015a6c:	4623      	mov	r3, r4
 8015a6e:	e7e9      	b.n	8015a44 <rshift+0x48>

08015a70 <__hexdig_fun>:
 8015a70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a74:	2b09      	cmp	r3, #9
 8015a76:	d802      	bhi.n	8015a7e <__hexdig_fun+0xe>
 8015a78:	3820      	subs	r0, #32
 8015a7a:	b2c0      	uxtb	r0, r0
 8015a7c:	4770      	bx	lr
 8015a7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a82:	2b05      	cmp	r3, #5
 8015a84:	d801      	bhi.n	8015a8a <__hexdig_fun+0x1a>
 8015a86:	3847      	subs	r0, #71	; 0x47
 8015a88:	e7f7      	b.n	8015a7a <__hexdig_fun+0xa>
 8015a8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a8e:	2b05      	cmp	r3, #5
 8015a90:	d801      	bhi.n	8015a96 <__hexdig_fun+0x26>
 8015a92:	3827      	subs	r0, #39	; 0x27
 8015a94:	e7f1      	b.n	8015a7a <__hexdig_fun+0xa>
 8015a96:	2000      	movs	r0, #0
 8015a98:	4770      	bx	lr

08015a9a <__gethex>:
 8015a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9e:	b08b      	sub	sp, #44	; 0x2c
 8015aa0:	468a      	mov	sl, r1
 8015aa2:	9002      	str	r0, [sp, #8]
 8015aa4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015aa6:	9306      	str	r3, [sp, #24]
 8015aa8:	4690      	mov	r8, r2
 8015aaa:	f000 fadf 	bl	801606c <__localeconv_l>
 8015aae:	6803      	ldr	r3, [r0, #0]
 8015ab0:	9303      	str	r3, [sp, #12]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7ea fba4 	bl	8000200 <strlen>
 8015ab8:	9b03      	ldr	r3, [sp, #12]
 8015aba:	9001      	str	r0, [sp, #4]
 8015abc:	4403      	add	r3, r0
 8015abe:	f04f 0b00 	mov.w	fp, #0
 8015ac2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015ac6:	9307      	str	r3, [sp, #28]
 8015ac8:	f8da 3000 	ldr.w	r3, [sl]
 8015acc:	3302      	adds	r3, #2
 8015ace:	461f      	mov	r7, r3
 8015ad0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015ad4:	2830      	cmp	r0, #48	; 0x30
 8015ad6:	d06c      	beq.n	8015bb2 <__gethex+0x118>
 8015ad8:	f7ff ffca 	bl	8015a70 <__hexdig_fun>
 8015adc:	4604      	mov	r4, r0
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	d16a      	bne.n	8015bb8 <__gethex+0x11e>
 8015ae2:	9a01      	ldr	r2, [sp, #4]
 8015ae4:	9903      	ldr	r1, [sp, #12]
 8015ae6:	4638      	mov	r0, r7
 8015ae8:	f001 fe34 	bl	8017754 <strncmp>
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d166      	bne.n	8015bbe <__gethex+0x124>
 8015af0:	9b01      	ldr	r3, [sp, #4]
 8015af2:	5cf8      	ldrb	r0, [r7, r3]
 8015af4:	18fe      	adds	r6, r7, r3
 8015af6:	f7ff ffbb 	bl	8015a70 <__hexdig_fun>
 8015afa:	2800      	cmp	r0, #0
 8015afc:	d062      	beq.n	8015bc4 <__gethex+0x12a>
 8015afe:	4633      	mov	r3, r6
 8015b00:	7818      	ldrb	r0, [r3, #0]
 8015b02:	2830      	cmp	r0, #48	; 0x30
 8015b04:	461f      	mov	r7, r3
 8015b06:	f103 0301 	add.w	r3, r3, #1
 8015b0a:	d0f9      	beq.n	8015b00 <__gethex+0x66>
 8015b0c:	f7ff ffb0 	bl	8015a70 <__hexdig_fun>
 8015b10:	fab0 f580 	clz	r5, r0
 8015b14:	096d      	lsrs	r5, r5, #5
 8015b16:	4634      	mov	r4, r6
 8015b18:	f04f 0b01 	mov.w	fp, #1
 8015b1c:	463a      	mov	r2, r7
 8015b1e:	4616      	mov	r6, r2
 8015b20:	3201      	adds	r2, #1
 8015b22:	7830      	ldrb	r0, [r6, #0]
 8015b24:	f7ff ffa4 	bl	8015a70 <__hexdig_fun>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	d1f8      	bne.n	8015b1e <__gethex+0x84>
 8015b2c:	9a01      	ldr	r2, [sp, #4]
 8015b2e:	9903      	ldr	r1, [sp, #12]
 8015b30:	4630      	mov	r0, r6
 8015b32:	f001 fe0f 	bl	8017754 <strncmp>
 8015b36:	b950      	cbnz	r0, 8015b4e <__gethex+0xb4>
 8015b38:	b954      	cbnz	r4, 8015b50 <__gethex+0xb6>
 8015b3a:	9b01      	ldr	r3, [sp, #4]
 8015b3c:	18f4      	adds	r4, r6, r3
 8015b3e:	4622      	mov	r2, r4
 8015b40:	4616      	mov	r6, r2
 8015b42:	3201      	adds	r2, #1
 8015b44:	7830      	ldrb	r0, [r6, #0]
 8015b46:	f7ff ff93 	bl	8015a70 <__hexdig_fun>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	d1f8      	bne.n	8015b40 <__gethex+0xa6>
 8015b4e:	b10c      	cbz	r4, 8015b54 <__gethex+0xba>
 8015b50:	1ba4      	subs	r4, r4, r6
 8015b52:	00a4      	lsls	r4, r4, #2
 8015b54:	7833      	ldrb	r3, [r6, #0]
 8015b56:	2b50      	cmp	r3, #80	; 0x50
 8015b58:	d001      	beq.n	8015b5e <__gethex+0xc4>
 8015b5a:	2b70      	cmp	r3, #112	; 0x70
 8015b5c:	d140      	bne.n	8015be0 <__gethex+0x146>
 8015b5e:	7873      	ldrb	r3, [r6, #1]
 8015b60:	2b2b      	cmp	r3, #43	; 0x2b
 8015b62:	d031      	beq.n	8015bc8 <__gethex+0x12e>
 8015b64:	2b2d      	cmp	r3, #45	; 0x2d
 8015b66:	d033      	beq.n	8015bd0 <__gethex+0x136>
 8015b68:	1c71      	adds	r1, r6, #1
 8015b6a:	f04f 0900 	mov.w	r9, #0
 8015b6e:	7808      	ldrb	r0, [r1, #0]
 8015b70:	f7ff ff7e 	bl	8015a70 <__hexdig_fun>
 8015b74:	1e43      	subs	r3, r0, #1
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	2b18      	cmp	r3, #24
 8015b7a:	d831      	bhi.n	8015be0 <__gethex+0x146>
 8015b7c:	f1a0 0210 	sub.w	r2, r0, #16
 8015b80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b84:	f7ff ff74 	bl	8015a70 <__hexdig_fun>
 8015b88:	1e43      	subs	r3, r0, #1
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	2b18      	cmp	r3, #24
 8015b8e:	d922      	bls.n	8015bd6 <__gethex+0x13c>
 8015b90:	f1b9 0f00 	cmp.w	r9, #0
 8015b94:	d000      	beq.n	8015b98 <__gethex+0xfe>
 8015b96:	4252      	negs	r2, r2
 8015b98:	4414      	add	r4, r2
 8015b9a:	f8ca 1000 	str.w	r1, [sl]
 8015b9e:	b30d      	cbz	r5, 8015be4 <__gethex+0x14a>
 8015ba0:	f1bb 0f00 	cmp.w	fp, #0
 8015ba4:	bf0c      	ite	eq
 8015ba6:	2706      	moveq	r7, #6
 8015ba8:	2700      	movne	r7, #0
 8015baa:	4638      	mov	r0, r7
 8015bac:	b00b      	add	sp, #44	; 0x2c
 8015bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb2:	f10b 0b01 	add.w	fp, fp, #1
 8015bb6:	e78a      	b.n	8015ace <__gethex+0x34>
 8015bb8:	2500      	movs	r5, #0
 8015bba:	462c      	mov	r4, r5
 8015bbc:	e7ae      	b.n	8015b1c <__gethex+0x82>
 8015bbe:	463e      	mov	r6, r7
 8015bc0:	2501      	movs	r5, #1
 8015bc2:	e7c7      	b.n	8015b54 <__gethex+0xba>
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	e7fb      	b.n	8015bc0 <__gethex+0x126>
 8015bc8:	f04f 0900 	mov.w	r9, #0
 8015bcc:	1cb1      	adds	r1, r6, #2
 8015bce:	e7ce      	b.n	8015b6e <__gethex+0xd4>
 8015bd0:	f04f 0901 	mov.w	r9, #1
 8015bd4:	e7fa      	b.n	8015bcc <__gethex+0x132>
 8015bd6:	230a      	movs	r3, #10
 8015bd8:	fb03 0202 	mla	r2, r3, r2, r0
 8015bdc:	3a10      	subs	r2, #16
 8015bde:	e7cf      	b.n	8015b80 <__gethex+0xe6>
 8015be0:	4631      	mov	r1, r6
 8015be2:	e7da      	b.n	8015b9a <__gethex+0x100>
 8015be4:	1bf3      	subs	r3, r6, r7
 8015be6:	3b01      	subs	r3, #1
 8015be8:	4629      	mov	r1, r5
 8015bea:	2b07      	cmp	r3, #7
 8015bec:	dc49      	bgt.n	8015c82 <__gethex+0x1e8>
 8015bee:	9802      	ldr	r0, [sp, #8]
 8015bf0:	f000 fadc 	bl	80161ac <_Balloc>
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	f100 0914 	add.w	r9, r0, #20
 8015bfa:	f04f 0b00 	mov.w	fp, #0
 8015bfe:	f1c3 0301 	rsb	r3, r3, #1
 8015c02:	4605      	mov	r5, r0
 8015c04:	f8cd 9010 	str.w	r9, [sp, #16]
 8015c08:	46da      	mov	sl, fp
 8015c0a:	9308      	str	r3, [sp, #32]
 8015c0c:	42b7      	cmp	r7, r6
 8015c0e:	d33b      	bcc.n	8015c88 <__gethex+0x1ee>
 8015c10:	9804      	ldr	r0, [sp, #16]
 8015c12:	f840 ab04 	str.w	sl, [r0], #4
 8015c16:	eba0 0009 	sub.w	r0, r0, r9
 8015c1a:	1080      	asrs	r0, r0, #2
 8015c1c:	6128      	str	r0, [r5, #16]
 8015c1e:	0147      	lsls	r7, r0, #5
 8015c20:	4650      	mov	r0, sl
 8015c22:	f000 fb87 	bl	8016334 <__hi0bits>
 8015c26:	f8d8 6000 	ldr.w	r6, [r8]
 8015c2a:	1a3f      	subs	r7, r7, r0
 8015c2c:	42b7      	cmp	r7, r6
 8015c2e:	dd64      	ble.n	8015cfa <__gethex+0x260>
 8015c30:	1bbf      	subs	r7, r7, r6
 8015c32:	4639      	mov	r1, r7
 8015c34:	4628      	mov	r0, r5
 8015c36:	f000 fe97 	bl	8016968 <__any_on>
 8015c3a:	4682      	mov	sl, r0
 8015c3c:	b178      	cbz	r0, 8015c5e <__gethex+0x1c4>
 8015c3e:	1e7b      	subs	r3, r7, #1
 8015c40:	1159      	asrs	r1, r3, #5
 8015c42:	f003 021f 	and.w	r2, r3, #31
 8015c46:	f04f 0a01 	mov.w	sl, #1
 8015c4a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c4e:	fa0a f202 	lsl.w	r2, sl, r2
 8015c52:	420a      	tst	r2, r1
 8015c54:	d003      	beq.n	8015c5e <__gethex+0x1c4>
 8015c56:	4553      	cmp	r3, sl
 8015c58:	dc46      	bgt.n	8015ce8 <__gethex+0x24e>
 8015c5a:	f04f 0a02 	mov.w	sl, #2
 8015c5e:	4639      	mov	r1, r7
 8015c60:	4628      	mov	r0, r5
 8015c62:	f7ff fecb 	bl	80159fc <rshift>
 8015c66:	443c      	add	r4, r7
 8015c68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c6c:	42a3      	cmp	r3, r4
 8015c6e:	da52      	bge.n	8015d16 <__gethex+0x27c>
 8015c70:	4629      	mov	r1, r5
 8015c72:	9802      	ldr	r0, [sp, #8]
 8015c74:	f000 face 	bl	8016214 <_Bfree>
 8015c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	6013      	str	r3, [r2, #0]
 8015c7e:	27a3      	movs	r7, #163	; 0xa3
 8015c80:	e793      	b.n	8015baa <__gethex+0x110>
 8015c82:	3101      	adds	r1, #1
 8015c84:	105b      	asrs	r3, r3, #1
 8015c86:	e7b0      	b.n	8015bea <__gethex+0x150>
 8015c88:	1e73      	subs	r3, r6, #1
 8015c8a:	9305      	str	r3, [sp, #20]
 8015c8c:	9a07      	ldr	r2, [sp, #28]
 8015c8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c92:	4293      	cmp	r3, r2
 8015c94:	d018      	beq.n	8015cc8 <__gethex+0x22e>
 8015c96:	f1bb 0f20 	cmp.w	fp, #32
 8015c9a:	d107      	bne.n	8015cac <__gethex+0x212>
 8015c9c:	9b04      	ldr	r3, [sp, #16]
 8015c9e:	f8c3 a000 	str.w	sl, [r3]
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	f04f 0a00 	mov.w	sl, #0
 8015ca8:	9304      	str	r3, [sp, #16]
 8015caa:	46d3      	mov	fp, sl
 8015cac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015cb0:	f7ff fede 	bl	8015a70 <__hexdig_fun>
 8015cb4:	f000 000f 	and.w	r0, r0, #15
 8015cb8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015cbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8015cc0:	f10b 0b04 	add.w	fp, fp, #4
 8015cc4:	9b05      	ldr	r3, [sp, #20]
 8015cc6:	e00d      	b.n	8015ce4 <__gethex+0x24a>
 8015cc8:	9b05      	ldr	r3, [sp, #20]
 8015cca:	9a08      	ldr	r2, [sp, #32]
 8015ccc:	4413      	add	r3, r2
 8015cce:	42bb      	cmp	r3, r7
 8015cd0:	d3e1      	bcc.n	8015c96 <__gethex+0x1fc>
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	9a01      	ldr	r2, [sp, #4]
 8015cd6:	9903      	ldr	r1, [sp, #12]
 8015cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8015cda:	f001 fd3b 	bl	8017754 <strncmp>
 8015cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	d1d8      	bne.n	8015c96 <__gethex+0x1fc>
 8015ce4:	461e      	mov	r6, r3
 8015ce6:	e791      	b.n	8015c0c <__gethex+0x172>
 8015ce8:	1eb9      	subs	r1, r7, #2
 8015cea:	4628      	mov	r0, r5
 8015cec:	f000 fe3c 	bl	8016968 <__any_on>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	d0b2      	beq.n	8015c5a <__gethex+0x1c0>
 8015cf4:	f04f 0a03 	mov.w	sl, #3
 8015cf8:	e7b1      	b.n	8015c5e <__gethex+0x1c4>
 8015cfa:	da09      	bge.n	8015d10 <__gethex+0x276>
 8015cfc:	1bf7      	subs	r7, r6, r7
 8015cfe:	4629      	mov	r1, r5
 8015d00:	463a      	mov	r2, r7
 8015d02:	9802      	ldr	r0, [sp, #8]
 8015d04:	f000 fc52 	bl	80165ac <__lshift>
 8015d08:	1be4      	subs	r4, r4, r7
 8015d0a:	4605      	mov	r5, r0
 8015d0c:	f100 0914 	add.w	r9, r0, #20
 8015d10:	f04f 0a00 	mov.w	sl, #0
 8015d14:	e7a8      	b.n	8015c68 <__gethex+0x1ce>
 8015d16:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d1a:	42a0      	cmp	r0, r4
 8015d1c:	dd6a      	ble.n	8015df4 <__gethex+0x35a>
 8015d1e:	1b04      	subs	r4, r0, r4
 8015d20:	42a6      	cmp	r6, r4
 8015d22:	dc2e      	bgt.n	8015d82 <__gethex+0x2e8>
 8015d24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d28:	2b02      	cmp	r3, #2
 8015d2a:	d022      	beq.n	8015d72 <__gethex+0x2d8>
 8015d2c:	2b03      	cmp	r3, #3
 8015d2e:	d024      	beq.n	8015d7a <__gethex+0x2e0>
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d115      	bne.n	8015d60 <__gethex+0x2c6>
 8015d34:	42a6      	cmp	r6, r4
 8015d36:	d113      	bne.n	8015d60 <__gethex+0x2c6>
 8015d38:	2e01      	cmp	r6, #1
 8015d3a:	dc0b      	bgt.n	8015d54 <__gethex+0x2ba>
 8015d3c:	9a06      	ldr	r2, [sp, #24]
 8015d3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d42:	6013      	str	r3, [r2, #0]
 8015d44:	2301      	movs	r3, #1
 8015d46:	612b      	str	r3, [r5, #16]
 8015d48:	f8c9 3000 	str.w	r3, [r9]
 8015d4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d4e:	2762      	movs	r7, #98	; 0x62
 8015d50:	601d      	str	r5, [r3, #0]
 8015d52:	e72a      	b.n	8015baa <__gethex+0x110>
 8015d54:	1e71      	subs	r1, r6, #1
 8015d56:	4628      	mov	r0, r5
 8015d58:	f000 fe06 	bl	8016968 <__any_on>
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d1ed      	bne.n	8015d3c <__gethex+0x2a2>
 8015d60:	4629      	mov	r1, r5
 8015d62:	9802      	ldr	r0, [sp, #8]
 8015d64:	f000 fa56 	bl	8016214 <_Bfree>
 8015d68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	6013      	str	r3, [r2, #0]
 8015d6e:	2750      	movs	r7, #80	; 0x50
 8015d70:	e71b      	b.n	8015baa <__gethex+0x110>
 8015d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d0e1      	beq.n	8015d3c <__gethex+0x2a2>
 8015d78:	e7f2      	b.n	8015d60 <__gethex+0x2c6>
 8015d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1dd      	bne.n	8015d3c <__gethex+0x2a2>
 8015d80:	e7ee      	b.n	8015d60 <__gethex+0x2c6>
 8015d82:	1e67      	subs	r7, r4, #1
 8015d84:	f1ba 0f00 	cmp.w	sl, #0
 8015d88:	d131      	bne.n	8015dee <__gethex+0x354>
 8015d8a:	b127      	cbz	r7, 8015d96 <__gethex+0x2fc>
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	4628      	mov	r0, r5
 8015d90:	f000 fdea 	bl	8016968 <__any_on>
 8015d94:	4682      	mov	sl, r0
 8015d96:	117a      	asrs	r2, r7, #5
 8015d98:	2301      	movs	r3, #1
 8015d9a:	f007 071f 	and.w	r7, r7, #31
 8015d9e:	fa03 f707 	lsl.w	r7, r3, r7
 8015da2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015da6:	4621      	mov	r1, r4
 8015da8:	421f      	tst	r7, r3
 8015daa:	4628      	mov	r0, r5
 8015dac:	bf18      	it	ne
 8015dae:	f04a 0a02 	orrne.w	sl, sl, #2
 8015db2:	1b36      	subs	r6, r6, r4
 8015db4:	f7ff fe22 	bl	80159fc <rshift>
 8015db8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015dbc:	2702      	movs	r7, #2
 8015dbe:	f1ba 0f00 	cmp.w	sl, #0
 8015dc2:	d048      	beq.n	8015e56 <__gethex+0x3bc>
 8015dc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d015      	beq.n	8015df8 <__gethex+0x35e>
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	d017      	beq.n	8015e00 <__gethex+0x366>
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d109      	bne.n	8015de8 <__gethex+0x34e>
 8015dd4:	f01a 0f02 	tst.w	sl, #2
 8015dd8:	d006      	beq.n	8015de8 <__gethex+0x34e>
 8015dda:	f8d9 3000 	ldr.w	r3, [r9]
 8015dde:	ea4a 0a03 	orr.w	sl, sl, r3
 8015de2:	f01a 0f01 	tst.w	sl, #1
 8015de6:	d10e      	bne.n	8015e06 <__gethex+0x36c>
 8015de8:	f047 0710 	orr.w	r7, r7, #16
 8015dec:	e033      	b.n	8015e56 <__gethex+0x3bc>
 8015dee:	f04f 0a01 	mov.w	sl, #1
 8015df2:	e7d0      	b.n	8015d96 <__gethex+0x2fc>
 8015df4:	2701      	movs	r7, #1
 8015df6:	e7e2      	b.n	8015dbe <__gethex+0x324>
 8015df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dfa:	f1c3 0301 	rsb	r3, r3, #1
 8015dfe:	9315      	str	r3, [sp, #84]	; 0x54
 8015e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d0f0      	beq.n	8015de8 <__gethex+0x34e>
 8015e06:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015e0a:	f105 0314 	add.w	r3, r5, #20
 8015e0e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015e12:	eb03 010a 	add.w	r1, r3, sl
 8015e16:	f04f 0c00 	mov.w	ip, #0
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e20:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e24:	d01c      	beq.n	8015e60 <__gethex+0x3c6>
 8015e26:	3201      	adds	r2, #1
 8015e28:	6002      	str	r2, [r0, #0]
 8015e2a:	2f02      	cmp	r7, #2
 8015e2c:	f105 0314 	add.w	r3, r5, #20
 8015e30:	d138      	bne.n	8015ea4 <__gethex+0x40a>
 8015e32:	f8d8 2000 	ldr.w	r2, [r8]
 8015e36:	3a01      	subs	r2, #1
 8015e38:	42b2      	cmp	r2, r6
 8015e3a:	d10a      	bne.n	8015e52 <__gethex+0x3b8>
 8015e3c:	1171      	asrs	r1, r6, #5
 8015e3e:	2201      	movs	r2, #1
 8015e40:	f006 061f 	and.w	r6, r6, #31
 8015e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e48:	fa02 f606 	lsl.w	r6, r2, r6
 8015e4c:	421e      	tst	r6, r3
 8015e4e:	bf18      	it	ne
 8015e50:	4617      	movne	r7, r2
 8015e52:	f047 0720 	orr.w	r7, r7, #32
 8015e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e58:	601d      	str	r5, [r3, #0]
 8015e5a:	9b06      	ldr	r3, [sp, #24]
 8015e5c:	601c      	str	r4, [r3, #0]
 8015e5e:	e6a4      	b.n	8015baa <__gethex+0x110>
 8015e60:	4299      	cmp	r1, r3
 8015e62:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e66:	d8d8      	bhi.n	8015e1a <__gethex+0x380>
 8015e68:	68ab      	ldr	r3, [r5, #8]
 8015e6a:	4599      	cmp	r9, r3
 8015e6c:	db12      	blt.n	8015e94 <__gethex+0x3fa>
 8015e6e:	6869      	ldr	r1, [r5, #4]
 8015e70:	9802      	ldr	r0, [sp, #8]
 8015e72:	3101      	adds	r1, #1
 8015e74:	f000 f99a 	bl	80161ac <_Balloc>
 8015e78:	692a      	ldr	r2, [r5, #16]
 8015e7a:	3202      	adds	r2, #2
 8015e7c:	f105 010c 	add.w	r1, r5, #12
 8015e80:	4683      	mov	fp, r0
 8015e82:	0092      	lsls	r2, r2, #2
 8015e84:	300c      	adds	r0, #12
 8015e86:	f7fc fe97 	bl	8012bb8 <memcpy>
 8015e8a:	4629      	mov	r1, r5
 8015e8c:	9802      	ldr	r0, [sp, #8]
 8015e8e:	f000 f9c1 	bl	8016214 <_Bfree>
 8015e92:	465d      	mov	r5, fp
 8015e94:	692b      	ldr	r3, [r5, #16]
 8015e96:	1c5a      	adds	r2, r3, #1
 8015e98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015e9c:	612a      	str	r2, [r5, #16]
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	615a      	str	r2, [r3, #20]
 8015ea2:	e7c2      	b.n	8015e2a <__gethex+0x390>
 8015ea4:	692a      	ldr	r2, [r5, #16]
 8015ea6:	454a      	cmp	r2, r9
 8015ea8:	dd0b      	ble.n	8015ec2 <__gethex+0x428>
 8015eaa:	2101      	movs	r1, #1
 8015eac:	4628      	mov	r0, r5
 8015eae:	f7ff fda5 	bl	80159fc <rshift>
 8015eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015eb6:	3401      	adds	r4, #1
 8015eb8:	42a3      	cmp	r3, r4
 8015eba:	f6ff aed9 	blt.w	8015c70 <__gethex+0x1d6>
 8015ebe:	2701      	movs	r7, #1
 8015ec0:	e7c7      	b.n	8015e52 <__gethex+0x3b8>
 8015ec2:	f016 061f 	ands.w	r6, r6, #31
 8015ec6:	d0fa      	beq.n	8015ebe <__gethex+0x424>
 8015ec8:	449a      	add	sl, r3
 8015eca:	f1c6 0620 	rsb	r6, r6, #32
 8015ece:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015ed2:	f000 fa2f 	bl	8016334 <__hi0bits>
 8015ed6:	42b0      	cmp	r0, r6
 8015ed8:	dbe7      	blt.n	8015eaa <__gethex+0x410>
 8015eda:	e7f0      	b.n	8015ebe <__gethex+0x424>

08015edc <L_shift>:
 8015edc:	f1c2 0208 	rsb	r2, r2, #8
 8015ee0:	0092      	lsls	r2, r2, #2
 8015ee2:	b570      	push	{r4, r5, r6, lr}
 8015ee4:	f1c2 0620 	rsb	r6, r2, #32
 8015ee8:	6843      	ldr	r3, [r0, #4]
 8015eea:	6804      	ldr	r4, [r0, #0]
 8015eec:	fa03 f506 	lsl.w	r5, r3, r6
 8015ef0:	432c      	orrs	r4, r5
 8015ef2:	40d3      	lsrs	r3, r2
 8015ef4:	6004      	str	r4, [r0, #0]
 8015ef6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015efa:	4288      	cmp	r0, r1
 8015efc:	d3f4      	bcc.n	8015ee8 <L_shift+0xc>
 8015efe:	bd70      	pop	{r4, r5, r6, pc}

08015f00 <__match>:
 8015f00:	b530      	push	{r4, r5, lr}
 8015f02:	6803      	ldr	r3, [r0, #0]
 8015f04:	3301      	adds	r3, #1
 8015f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f0a:	b914      	cbnz	r4, 8015f12 <__match+0x12>
 8015f0c:	6003      	str	r3, [r0, #0]
 8015f0e:	2001      	movs	r0, #1
 8015f10:	bd30      	pop	{r4, r5, pc}
 8015f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f1a:	2d19      	cmp	r5, #25
 8015f1c:	bf98      	it	ls
 8015f1e:	3220      	addls	r2, #32
 8015f20:	42a2      	cmp	r2, r4
 8015f22:	d0f0      	beq.n	8015f06 <__match+0x6>
 8015f24:	2000      	movs	r0, #0
 8015f26:	e7f3      	b.n	8015f10 <__match+0x10>

08015f28 <__hexnan>:
 8015f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f2c:	680b      	ldr	r3, [r1, #0]
 8015f2e:	6801      	ldr	r1, [r0, #0]
 8015f30:	115f      	asrs	r7, r3, #5
 8015f32:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015f36:	f013 031f 	ands.w	r3, r3, #31
 8015f3a:	b087      	sub	sp, #28
 8015f3c:	bf18      	it	ne
 8015f3e:	3704      	addne	r7, #4
 8015f40:	2500      	movs	r5, #0
 8015f42:	1f3e      	subs	r6, r7, #4
 8015f44:	4682      	mov	sl, r0
 8015f46:	4690      	mov	r8, r2
 8015f48:	9301      	str	r3, [sp, #4]
 8015f4a:	f847 5c04 	str.w	r5, [r7, #-4]
 8015f4e:	46b1      	mov	r9, r6
 8015f50:	4634      	mov	r4, r6
 8015f52:	9502      	str	r5, [sp, #8]
 8015f54:	46ab      	mov	fp, r5
 8015f56:	784a      	ldrb	r2, [r1, #1]
 8015f58:	1c4b      	adds	r3, r1, #1
 8015f5a:	9303      	str	r3, [sp, #12]
 8015f5c:	b342      	cbz	r2, 8015fb0 <__hexnan+0x88>
 8015f5e:	4610      	mov	r0, r2
 8015f60:	9105      	str	r1, [sp, #20]
 8015f62:	9204      	str	r2, [sp, #16]
 8015f64:	f7ff fd84 	bl	8015a70 <__hexdig_fun>
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	d143      	bne.n	8015ff4 <__hexnan+0xcc>
 8015f6c:	9a04      	ldr	r2, [sp, #16]
 8015f6e:	9905      	ldr	r1, [sp, #20]
 8015f70:	2a20      	cmp	r2, #32
 8015f72:	d818      	bhi.n	8015fa6 <__hexnan+0x7e>
 8015f74:	9b02      	ldr	r3, [sp, #8]
 8015f76:	459b      	cmp	fp, r3
 8015f78:	dd13      	ble.n	8015fa2 <__hexnan+0x7a>
 8015f7a:	454c      	cmp	r4, r9
 8015f7c:	d206      	bcs.n	8015f8c <__hexnan+0x64>
 8015f7e:	2d07      	cmp	r5, #7
 8015f80:	dc04      	bgt.n	8015f8c <__hexnan+0x64>
 8015f82:	462a      	mov	r2, r5
 8015f84:	4649      	mov	r1, r9
 8015f86:	4620      	mov	r0, r4
 8015f88:	f7ff ffa8 	bl	8015edc <L_shift>
 8015f8c:	4544      	cmp	r4, r8
 8015f8e:	d944      	bls.n	801601a <__hexnan+0xf2>
 8015f90:	2300      	movs	r3, #0
 8015f92:	f1a4 0904 	sub.w	r9, r4, #4
 8015f96:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f9a:	f8cd b008 	str.w	fp, [sp, #8]
 8015f9e:	464c      	mov	r4, r9
 8015fa0:	461d      	mov	r5, r3
 8015fa2:	9903      	ldr	r1, [sp, #12]
 8015fa4:	e7d7      	b.n	8015f56 <__hexnan+0x2e>
 8015fa6:	2a29      	cmp	r2, #41	; 0x29
 8015fa8:	d14a      	bne.n	8016040 <__hexnan+0x118>
 8015faa:	3102      	adds	r1, #2
 8015fac:	f8ca 1000 	str.w	r1, [sl]
 8015fb0:	f1bb 0f00 	cmp.w	fp, #0
 8015fb4:	d044      	beq.n	8016040 <__hexnan+0x118>
 8015fb6:	454c      	cmp	r4, r9
 8015fb8:	d206      	bcs.n	8015fc8 <__hexnan+0xa0>
 8015fba:	2d07      	cmp	r5, #7
 8015fbc:	dc04      	bgt.n	8015fc8 <__hexnan+0xa0>
 8015fbe:	462a      	mov	r2, r5
 8015fc0:	4649      	mov	r1, r9
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	f7ff ff8a 	bl	8015edc <L_shift>
 8015fc8:	4544      	cmp	r4, r8
 8015fca:	d928      	bls.n	801601e <__hexnan+0xf6>
 8015fcc:	4643      	mov	r3, r8
 8015fce:	f854 2b04 	ldr.w	r2, [r4], #4
 8015fd2:	f843 2b04 	str.w	r2, [r3], #4
 8015fd6:	42a6      	cmp	r6, r4
 8015fd8:	d2f9      	bcs.n	8015fce <__hexnan+0xa6>
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f843 2b04 	str.w	r2, [r3], #4
 8015fe0:	429e      	cmp	r6, r3
 8015fe2:	d2fb      	bcs.n	8015fdc <__hexnan+0xb4>
 8015fe4:	6833      	ldr	r3, [r6, #0]
 8015fe6:	b91b      	cbnz	r3, 8015ff0 <__hexnan+0xc8>
 8015fe8:	4546      	cmp	r6, r8
 8015fea:	d127      	bne.n	801603c <__hexnan+0x114>
 8015fec:	2301      	movs	r3, #1
 8015fee:	6033      	str	r3, [r6, #0]
 8015ff0:	2005      	movs	r0, #5
 8015ff2:	e026      	b.n	8016042 <__hexnan+0x11a>
 8015ff4:	3501      	adds	r5, #1
 8015ff6:	2d08      	cmp	r5, #8
 8015ff8:	f10b 0b01 	add.w	fp, fp, #1
 8015ffc:	dd06      	ble.n	801600c <__hexnan+0xe4>
 8015ffe:	4544      	cmp	r4, r8
 8016000:	d9cf      	bls.n	8015fa2 <__hexnan+0x7a>
 8016002:	2300      	movs	r3, #0
 8016004:	f844 3c04 	str.w	r3, [r4, #-4]
 8016008:	2501      	movs	r5, #1
 801600a:	3c04      	subs	r4, #4
 801600c:	6822      	ldr	r2, [r4, #0]
 801600e:	f000 000f 	and.w	r0, r0, #15
 8016012:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016016:	6020      	str	r0, [r4, #0]
 8016018:	e7c3      	b.n	8015fa2 <__hexnan+0x7a>
 801601a:	2508      	movs	r5, #8
 801601c:	e7c1      	b.n	8015fa2 <__hexnan+0x7a>
 801601e:	9b01      	ldr	r3, [sp, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d0df      	beq.n	8015fe4 <__hexnan+0xbc>
 8016024:	f04f 32ff 	mov.w	r2, #4294967295
 8016028:	f1c3 0320 	rsb	r3, r3, #32
 801602c:	fa22 f303 	lsr.w	r3, r2, r3
 8016030:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016034:	401a      	ands	r2, r3
 8016036:	f847 2c04 	str.w	r2, [r7, #-4]
 801603a:	e7d3      	b.n	8015fe4 <__hexnan+0xbc>
 801603c:	3e04      	subs	r6, #4
 801603e:	e7d1      	b.n	8015fe4 <__hexnan+0xbc>
 8016040:	2004      	movs	r0, #4
 8016042:	b007      	add	sp, #28
 8016044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016048 <__locale_ctype_ptr_l>:
 8016048:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801604c:	4770      	bx	lr
	...

08016050 <__locale_ctype_ptr>:
 8016050:	4b04      	ldr	r3, [pc, #16]	; (8016064 <__locale_ctype_ptr+0x14>)
 8016052:	4a05      	ldr	r2, [pc, #20]	; (8016068 <__locale_ctype_ptr+0x18>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	6a1b      	ldr	r3, [r3, #32]
 8016058:	2b00      	cmp	r3, #0
 801605a:	bf08      	it	eq
 801605c:	4613      	moveq	r3, r2
 801605e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016062:	4770      	bx	lr
 8016064:	2000000c 	.word	0x2000000c
 8016068:	20000070 	.word	0x20000070

0801606c <__localeconv_l>:
 801606c:	30f0      	adds	r0, #240	; 0xf0
 801606e:	4770      	bx	lr

08016070 <_localeconv_r>:
 8016070:	4b04      	ldr	r3, [pc, #16]	; (8016084 <_localeconv_r+0x14>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	6a18      	ldr	r0, [r3, #32]
 8016076:	4b04      	ldr	r3, [pc, #16]	; (8016088 <_localeconv_r+0x18>)
 8016078:	2800      	cmp	r0, #0
 801607a:	bf08      	it	eq
 801607c:	4618      	moveq	r0, r3
 801607e:	30f0      	adds	r0, #240	; 0xf0
 8016080:	4770      	bx	lr
 8016082:	bf00      	nop
 8016084:	2000000c 	.word	0x2000000c
 8016088:	20000070 	.word	0x20000070

0801608c <_lseek_r>:
 801608c:	b538      	push	{r3, r4, r5, lr}
 801608e:	4c07      	ldr	r4, [pc, #28]	; (80160ac <_lseek_r+0x20>)
 8016090:	4605      	mov	r5, r0
 8016092:	4608      	mov	r0, r1
 8016094:	4611      	mov	r1, r2
 8016096:	2200      	movs	r2, #0
 8016098:	6022      	str	r2, [r4, #0]
 801609a:	461a      	mov	r2, r3
 801609c:	f7ef fc00 	bl	80058a0 <_lseek>
 80160a0:	1c43      	adds	r3, r0, #1
 80160a2:	d102      	bne.n	80160aa <_lseek_r+0x1e>
 80160a4:	6823      	ldr	r3, [r4, #0]
 80160a6:	b103      	cbz	r3, 80160aa <_lseek_r+0x1e>
 80160a8:	602b      	str	r3, [r5, #0]
 80160aa:	bd38      	pop	{r3, r4, r5, pc}
 80160ac:	2003be0c 	.word	0x2003be0c

080160b0 <__swhatbuf_r>:
 80160b0:	b570      	push	{r4, r5, r6, lr}
 80160b2:	460e      	mov	r6, r1
 80160b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160b8:	2900      	cmp	r1, #0
 80160ba:	b096      	sub	sp, #88	; 0x58
 80160bc:	4614      	mov	r4, r2
 80160be:	461d      	mov	r5, r3
 80160c0:	da07      	bge.n	80160d2 <__swhatbuf_r+0x22>
 80160c2:	2300      	movs	r3, #0
 80160c4:	602b      	str	r3, [r5, #0]
 80160c6:	89b3      	ldrh	r3, [r6, #12]
 80160c8:	061a      	lsls	r2, r3, #24
 80160ca:	d410      	bmi.n	80160ee <__swhatbuf_r+0x3e>
 80160cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80160d0:	e00e      	b.n	80160f0 <__swhatbuf_r+0x40>
 80160d2:	466a      	mov	r2, sp
 80160d4:	f001 fc24 	bl	8017920 <_fstat_r>
 80160d8:	2800      	cmp	r0, #0
 80160da:	dbf2      	blt.n	80160c2 <__swhatbuf_r+0x12>
 80160dc:	9a01      	ldr	r2, [sp, #4]
 80160de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80160e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80160e6:	425a      	negs	r2, r3
 80160e8:	415a      	adcs	r2, r3
 80160ea:	602a      	str	r2, [r5, #0]
 80160ec:	e7ee      	b.n	80160cc <__swhatbuf_r+0x1c>
 80160ee:	2340      	movs	r3, #64	; 0x40
 80160f0:	2000      	movs	r0, #0
 80160f2:	6023      	str	r3, [r4, #0]
 80160f4:	b016      	add	sp, #88	; 0x58
 80160f6:	bd70      	pop	{r4, r5, r6, pc}

080160f8 <__smakebuf_r>:
 80160f8:	898b      	ldrh	r3, [r1, #12]
 80160fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160fc:	079d      	lsls	r5, r3, #30
 80160fe:	4606      	mov	r6, r0
 8016100:	460c      	mov	r4, r1
 8016102:	d507      	bpl.n	8016114 <__smakebuf_r+0x1c>
 8016104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016108:	6023      	str	r3, [r4, #0]
 801610a:	6123      	str	r3, [r4, #16]
 801610c:	2301      	movs	r3, #1
 801610e:	6163      	str	r3, [r4, #20]
 8016110:	b002      	add	sp, #8
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	ab01      	add	r3, sp, #4
 8016116:	466a      	mov	r2, sp
 8016118:	f7ff ffca 	bl	80160b0 <__swhatbuf_r>
 801611c:	9900      	ldr	r1, [sp, #0]
 801611e:	4605      	mov	r5, r0
 8016120:	4630      	mov	r0, r6
 8016122:	f000 fc9f 	bl	8016a64 <_malloc_r>
 8016126:	b948      	cbnz	r0, 801613c <__smakebuf_r+0x44>
 8016128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801612c:	059a      	lsls	r2, r3, #22
 801612e:	d4ef      	bmi.n	8016110 <__smakebuf_r+0x18>
 8016130:	f023 0303 	bic.w	r3, r3, #3
 8016134:	f043 0302 	orr.w	r3, r3, #2
 8016138:	81a3      	strh	r3, [r4, #12]
 801613a:	e7e3      	b.n	8016104 <__smakebuf_r+0xc>
 801613c:	4b0d      	ldr	r3, [pc, #52]	; (8016174 <__smakebuf_r+0x7c>)
 801613e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016140:	89a3      	ldrh	r3, [r4, #12]
 8016142:	6020      	str	r0, [r4, #0]
 8016144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016148:	81a3      	strh	r3, [r4, #12]
 801614a:	9b00      	ldr	r3, [sp, #0]
 801614c:	6163      	str	r3, [r4, #20]
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	6120      	str	r0, [r4, #16]
 8016152:	b15b      	cbz	r3, 801616c <__smakebuf_r+0x74>
 8016154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016158:	4630      	mov	r0, r6
 801615a:	f001 fbf3 	bl	8017944 <_isatty_r>
 801615e:	b128      	cbz	r0, 801616c <__smakebuf_r+0x74>
 8016160:	89a3      	ldrh	r3, [r4, #12]
 8016162:	f023 0303 	bic.w	r3, r3, #3
 8016166:	f043 0301 	orr.w	r3, r3, #1
 801616a:	81a3      	strh	r3, [r4, #12]
 801616c:	89a3      	ldrh	r3, [r4, #12]
 801616e:	431d      	orrs	r5, r3
 8016170:	81a5      	strh	r5, [r4, #12]
 8016172:	e7cd      	b.n	8016110 <__smakebuf_r+0x18>
 8016174:	080158b1 	.word	0x080158b1

08016178 <malloc>:
 8016178:	4b02      	ldr	r3, [pc, #8]	; (8016184 <malloc+0xc>)
 801617a:	4601      	mov	r1, r0
 801617c:	6818      	ldr	r0, [r3, #0]
 801617e:	f000 bc71 	b.w	8016a64 <_malloc_r>
 8016182:	bf00      	nop
 8016184:	2000000c 	.word	0x2000000c

08016188 <__ascii_mbtowc>:
 8016188:	b082      	sub	sp, #8
 801618a:	b901      	cbnz	r1, 801618e <__ascii_mbtowc+0x6>
 801618c:	a901      	add	r1, sp, #4
 801618e:	b142      	cbz	r2, 80161a2 <__ascii_mbtowc+0x1a>
 8016190:	b14b      	cbz	r3, 80161a6 <__ascii_mbtowc+0x1e>
 8016192:	7813      	ldrb	r3, [r2, #0]
 8016194:	600b      	str	r3, [r1, #0]
 8016196:	7812      	ldrb	r2, [r2, #0]
 8016198:	1c10      	adds	r0, r2, #0
 801619a:	bf18      	it	ne
 801619c:	2001      	movne	r0, #1
 801619e:	b002      	add	sp, #8
 80161a0:	4770      	bx	lr
 80161a2:	4610      	mov	r0, r2
 80161a4:	e7fb      	b.n	801619e <__ascii_mbtowc+0x16>
 80161a6:	f06f 0001 	mvn.w	r0, #1
 80161aa:	e7f8      	b.n	801619e <__ascii_mbtowc+0x16>

080161ac <_Balloc>:
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80161b0:	4604      	mov	r4, r0
 80161b2:	460e      	mov	r6, r1
 80161b4:	b93d      	cbnz	r5, 80161c6 <_Balloc+0x1a>
 80161b6:	2010      	movs	r0, #16
 80161b8:	f7ff ffde 	bl	8016178 <malloc>
 80161bc:	6260      	str	r0, [r4, #36]	; 0x24
 80161be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80161c2:	6005      	str	r5, [r0, #0]
 80161c4:	60c5      	str	r5, [r0, #12]
 80161c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80161c8:	68eb      	ldr	r3, [r5, #12]
 80161ca:	b183      	cbz	r3, 80161ee <_Balloc+0x42>
 80161cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161ce:	68db      	ldr	r3, [r3, #12]
 80161d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80161d4:	b9b8      	cbnz	r0, 8016206 <_Balloc+0x5a>
 80161d6:	2101      	movs	r1, #1
 80161d8:	fa01 f506 	lsl.w	r5, r1, r6
 80161dc:	1d6a      	adds	r2, r5, #5
 80161de:	0092      	lsls	r2, r2, #2
 80161e0:	4620      	mov	r0, r4
 80161e2:	f000 fbe2 	bl	80169aa <_calloc_r>
 80161e6:	b160      	cbz	r0, 8016202 <_Balloc+0x56>
 80161e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80161ec:	e00e      	b.n	801620c <_Balloc+0x60>
 80161ee:	2221      	movs	r2, #33	; 0x21
 80161f0:	2104      	movs	r1, #4
 80161f2:	4620      	mov	r0, r4
 80161f4:	f000 fbd9 	bl	80169aa <_calloc_r>
 80161f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161fa:	60e8      	str	r0, [r5, #12]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d1e4      	bne.n	80161cc <_Balloc+0x20>
 8016202:	2000      	movs	r0, #0
 8016204:	bd70      	pop	{r4, r5, r6, pc}
 8016206:	6802      	ldr	r2, [r0, #0]
 8016208:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801620c:	2300      	movs	r3, #0
 801620e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016212:	e7f7      	b.n	8016204 <_Balloc+0x58>

08016214 <_Bfree>:
 8016214:	b570      	push	{r4, r5, r6, lr}
 8016216:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016218:	4606      	mov	r6, r0
 801621a:	460d      	mov	r5, r1
 801621c:	b93c      	cbnz	r4, 801622e <_Bfree+0x1a>
 801621e:	2010      	movs	r0, #16
 8016220:	f7ff ffaa 	bl	8016178 <malloc>
 8016224:	6270      	str	r0, [r6, #36]	; 0x24
 8016226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801622a:	6004      	str	r4, [r0, #0]
 801622c:	60c4      	str	r4, [r0, #12]
 801622e:	b13d      	cbz	r5, 8016240 <_Bfree+0x2c>
 8016230:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016232:	686a      	ldr	r2, [r5, #4]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801623a:	6029      	str	r1, [r5, #0]
 801623c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016240:	bd70      	pop	{r4, r5, r6, pc}

08016242 <__multadd>:
 8016242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016246:	690d      	ldr	r5, [r1, #16]
 8016248:	461f      	mov	r7, r3
 801624a:	4606      	mov	r6, r0
 801624c:	460c      	mov	r4, r1
 801624e:	f101 0c14 	add.w	ip, r1, #20
 8016252:	2300      	movs	r3, #0
 8016254:	f8dc 0000 	ldr.w	r0, [ip]
 8016258:	b281      	uxth	r1, r0
 801625a:	fb02 7101 	mla	r1, r2, r1, r7
 801625e:	0c0f      	lsrs	r7, r1, #16
 8016260:	0c00      	lsrs	r0, r0, #16
 8016262:	fb02 7000 	mla	r0, r2, r0, r7
 8016266:	b289      	uxth	r1, r1
 8016268:	3301      	adds	r3, #1
 801626a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801626e:	429d      	cmp	r5, r3
 8016270:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016274:	f84c 1b04 	str.w	r1, [ip], #4
 8016278:	dcec      	bgt.n	8016254 <__multadd+0x12>
 801627a:	b1d7      	cbz	r7, 80162b2 <__multadd+0x70>
 801627c:	68a3      	ldr	r3, [r4, #8]
 801627e:	42ab      	cmp	r3, r5
 8016280:	dc12      	bgt.n	80162a8 <__multadd+0x66>
 8016282:	6861      	ldr	r1, [r4, #4]
 8016284:	4630      	mov	r0, r6
 8016286:	3101      	adds	r1, #1
 8016288:	f7ff ff90 	bl	80161ac <_Balloc>
 801628c:	6922      	ldr	r2, [r4, #16]
 801628e:	3202      	adds	r2, #2
 8016290:	f104 010c 	add.w	r1, r4, #12
 8016294:	4680      	mov	r8, r0
 8016296:	0092      	lsls	r2, r2, #2
 8016298:	300c      	adds	r0, #12
 801629a:	f7fc fc8d 	bl	8012bb8 <memcpy>
 801629e:	4621      	mov	r1, r4
 80162a0:	4630      	mov	r0, r6
 80162a2:	f7ff ffb7 	bl	8016214 <_Bfree>
 80162a6:	4644      	mov	r4, r8
 80162a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80162ac:	3501      	adds	r5, #1
 80162ae:	615f      	str	r7, [r3, #20]
 80162b0:	6125      	str	r5, [r4, #16]
 80162b2:	4620      	mov	r0, r4
 80162b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162b8 <__s2b>:
 80162b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162bc:	460c      	mov	r4, r1
 80162be:	4615      	mov	r5, r2
 80162c0:	461f      	mov	r7, r3
 80162c2:	2209      	movs	r2, #9
 80162c4:	3308      	adds	r3, #8
 80162c6:	4606      	mov	r6, r0
 80162c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80162cc:	2100      	movs	r1, #0
 80162ce:	2201      	movs	r2, #1
 80162d0:	429a      	cmp	r2, r3
 80162d2:	db20      	blt.n	8016316 <__s2b+0x5e>
 80162d4:	4630      	mov	r0, r6
 80162d6:	f7ff ff69 	bl	80161ac <_Balloc>
 80162da:	9b08      	ldr	r3, [sp, #32]
 80162dc:	6143      	str	r3, [r0, #20]
 80162de:	2d09      	cmp	r5, #9
 80162e0:	f04f 0301 	mov.w	r3, #1
 80162e4:	6103      	str	r3, [r0, #16]
 80162e6:	dd19      	ble.n	801631c <__s2b+0x64>
 80162e8:	f104 0809 	add.w	r8, r4, #9
 80162ec:	46c1      	mov	r9, r8
 80162ee:	442c      	add	r4, r5
 80162f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80162f4:	4601      	mov	r1, r0
 80162f6:	3b30      	subs	r3, #48	; 0x30
 80162f8:	220a      	movs	r2, #10
 80162fa:	4630      	mov	r0, r6
 80162fc:	f7ff ffa1 	bl	8016242 <__multadd>
 8016300:	45a1      	cmp	r9, r4
 8016302:	d1f5      	bne.n	80162f0 <__s2b+0x38>
 8016304:	eb08 0405 	add.w	r4, r8, r5
 8016308:	3c08      	subs	r4, #8
 801630a:	1b2d      	subs	r5, r5, r4
 801630c:	1963      	adds	r3, r4, r5
 801630e:	42bb      	cmp	r3, r7
 8016310:	db07      	blt.n	8016322 <__s2b+0x6a>
 8016312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016316:	0052      	lsls	r2, r2, #1
 8016318:	3101      	adds	r1, #1
 801631a:	e7d9      	b.n	80162d0 <__s2b+0x18>
 801631c:	340a      	adds	r4, #10
 801631e:	2509      	movs	r5, #9
 8016320:	e7f3      	b.n	801630a <__s2b+0x52>
 8016322:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016326:	4601      	mov	r1, r0
 8016328:	3b30      	subs	r3, #48	; 0x30
 801632a:	220a      	movs	r2, #10
 801632c:	4630      	mov	r0, r6
 801632e:	f7ff ff88 	bl	8016242 <__multadd>
 8016332:	e7eb      	b.n	801630c <__s2b+0x54>

08016334 <__hi0bits>:
 8016334:	0c02      	lsrs	r2, r0, #16
 8016336:	0412      	lsls	r2, r2, #16
 8016338:	4603      	mov	r3, r0
 801633a:	b9b2      	cbnz	r2, 801636a <__hi0bits+0x36>
 801633c:	0403      	lsls	r3, r0, #16
 801633e:	2010      	movs	r0, #16
 8016340:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016344:	bf04      	itt	eq
 8016346:	021b      	lsleq	r3, r3, #8
 8016348:	3008      	addeq	r0, #8
 801634a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801634e:	bf04      	itt	eq
 8016350:	011b      	lsleq	r3, r3, #4
 8016352:	3004      	addeq	r0, #4
 8016354:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016358:	bf04      	itt	eq
 801635a:	009b      	lsleq	r3, r3, #2
 801635c:	3002      	addeq	r0, #2
 801635e:	2b00      	cmp	r3, #0
 8016360:	db06      	blt.n	8016370 <__hi0bits+0x3c>
 8016362:	005b      	lsls	r3, r3, #1
 8016364:	d503      	bpl.n	801636e <__hi0bits+0x3a>
 8016366:	3001      	adds	r0, #1
 8016368:	4770      	bx	lr
 801636a:	2000      	movs	r0, #0
 801636c:	e7e8      	b.n	8016340 <__hi0bits+0xc>
 801636e:	2020      	movs	r0, #32
 8016370:	4770      	bx	lr

08016372 <__lo0bits>:
 8016372:	6803      	ldr	r3, [r0, #0]
 8016374:	f013 0207 	ands.w	r2, r3, #7
 8016378:	4601      	mov	r1, r0
 801637a:	d00b      	beq.n	8016394 <__lo0bits+0x22>
 801637c:	07da      	lsls	r2, r3, #31
 801637e:	d423      	bmi.n	80163c8 <__lo0bits+0x56>
 8016380:	0798      	lsls	r0, r3, #30
 8016382:	bf49      	itett	mi
 8016384:	085b      	lsrmi	r3, r3, #1
 8016386:	089b      	lsrpl	r3, r3, #2
 8016388:	2001      	movmi	r0, #1
 801638a:	600b      	strmi	r3, [r1, #0]
 801638c:	bf5c      	itt	pl
 801638e:	600b      	strpl	r3, [r1, #0]
 8016390:	2002      	movpl	r0, #2
 8016392:	4770      	bx	lr
 8016394:	b298      	uxth	r0, r3
 8016396:	b9a8      	cbnz	r0, 80163c4 <__lo0bits+0x52>
 8016398:	0c1b      	lsrs	r3, r3, #16
 801639a:	2010      	movs	r0, #16
 801639c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80163a0:	bf04      	itt	eq
 80163a2:	0a1b      	lsreq	r3, r3, #8
 80163a4:	3008      	addeq	r0, #8
 80163a6:	071a      	lsls	r2, r3, #28
 80163a8:	bf04      	itt	eq
 80163aa:	091b      	lsreq	r3, r3, #4
 80163ac:	3004      	addeq	r0, #4
 80163ae:	079a      	lsls	r2, r3, #30
 80163b0:	bf04      	itt	eq
 80163b2:	089b      	lsreq	r3, r3, #2
 80163b4:	3002      	addeq	r0, #2
 80163b6:	07da      	lsls	r2, r3, #31
 80163b8:	d402      	bmi.n	80163c0 <__lo0bits+0x4e>
 80163ba:	085b      	lsrs	r3, r3, #1
 80163bc:	d006      	beq.n	80163cc <__lo0bits+0x5a>
 80163be:	3001      	adds	r0, #1
 80163c0:	600b      	str	r3, [r1, #0]
 80163c2:	4770      	bx	lr
 80163c4:	4610      	mov	r0, r2
 80163c6:	e7e9      	b.n	801639c <__lo0bits+0x2a>
 80163c8:	2000      	movs	r0, #0
 80163ca:	4770      	bx	lr
 80163cc:	2020      	movs	r0, #32
 80163ce:	4770      	bx	lr

080163d0 <__i2b>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	460c      	mov	r4, r1
 80163d4:	2101      	movs	r1, #1
 80163d6:	f7ff fee9 	bl	80161ac <_Balloc>
 80163da:	2201      	movs	r2, #1
 80163dc:	6144      	str	r4, [r0, #20]
 80163de:	6102      	str	r2, [r0, #16]
 80163e0:	bd10      	pop	{r4, pc}

080163e2 <__multiply>:
 80163e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163e6:	4614      	mov	r4, r2
 80163e8:	690a      	ldr	r2, [r1, #16]
 80163ea:	6923      	ldr	r3, [r4, #16]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	bfb8      	it	lt
 80163f0:	460b      	movlt	r3, r1
 80163f2:	4688      	mov	r8, r1
 80163f4:	bfbc      	itt	lt
 80163f6:	46a0      	movlt	r8, r4
 80163f8:	461c      	movlt	r4, r3
 80163fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80163fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016406:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801640a:	eb07 0609 	add.w	r6, r7, r9
 801640e:	42b3      	cmp	r3, r6
 8016410:	bfb8      	it	lt
 8016412:	3101      	addlt	r1, #1
 8016414:	f7ff feca 	bl	80161ac <_Balloc>
 8016418:	f100 0514 	add.w	r5, r0, #20
 801641c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016420:	462b      	mov	r3, r5
 8016422:	2200      	movs	r2, #0
 8016424:	4573      	cmp	r3, lr
 8016426:	d316      	bcc.n	8016456 <__multiply+0x74>
 8016428:	f104 0214 	add.w	r2, r4, #20
 801642c:	f108 0114 	add.w	r1, r8, #20
 8016430:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016434:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	9b00      	ldr	r3, [sp, #0]
 801643c:	9201      	str	r2, [sp, #4]
 801643e:	4293      	cmp	r3, r2
 8016440:	d80c      	bhi.n	801645c <__multiply+0x7a>
 8016442:	2e00      	cmp	r6, #0
 8016444:	dd03      	ble.n	801644e <__multiply+0x6c>
 8016446:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801644a:	2b00      	cmp	r3, #0
 801644c:	d05d      	beq.n	801650a <__multiply+0x128>
 801644e:	6106      	str	r6, [r0, #16]
 8016450:	b003      	add	sp, #12
 8016452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016456:	f843 2b04 	str.w	r2, [r3], #4
 801645a:	e7e3      	b.n	8016424 <__multiply+0x42>
 801645c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016460:	f1bb 0f00 	cmp.w	fp, #0
 8016464:	d023      	beq.n	80164ae <__multiply+0xcc>
 8016466:	4689      	mov	r9, r1
 8016468:	46ac      	mov	ip, r5
 801646a:	f04f 0800 	mov.w	r8, #0
 801646e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016472:	f8dc a000 	ldr.w	sl, [ip]
 8016476:	b2a3      	uxth	r3, r4
 8016478:	fa1f fa8a 	uxth.w	sl, sl
 801647c:	fb0b a303 	mla	r3, fp, r3, sl
 8016480:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016484:	f8dc 4000 	ldr.w	r4, [ip]
 8016488:	4443      	add	r3, r8
 801648a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801648e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016492:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016496:	46e2      	mov	sl, ip
 8016498:	b29b      	uxth	r3, r3
 801649a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801649e:	454f      	cmp	r7, r9
 80164a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164a4:	f84a 3b04 	str.w	r3, [sl], #4
 80164a8:	d82b      	bhi.n	8016502 <__multiply+0x120>
 80164aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80164ae:	9b01      	ldr	r3, [sp, #4]
 80164b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80164b4:	3204      	adds	r2, #4
 80164b6:	f1ba 0f00 	cmp.w	sl, #0
 80164ba:	d020      	beq.n	80164fe <__multiply+0x11c>
 80164bc:	682b      	ldr	r3, [r5, #0]
 80164be:	4689      	mov	r9, r1
 80164c0:	46a8      	mov	r8, r5
 80164c2:	f04f 0b00 	mov.w	fp, #0
 80164c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80164ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80164ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80164d2:	445c      	add	r4, fp
 80164d4:	46c4      	mov	ip, r8
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80164dc:	f84c 3b04 	str.w	r3, [ip], #4
 80164e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80164e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80164e8:	0c1b      	lsrs	r3, r3, #16
 80164ea:	fb0a b303 	mla	r3, sl, r3, fp
 80164ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80164f2:	454f      	cmp	r7, r9
 80164f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80164f8:	d805      	bhi.n	8016506 <__multiply+0x124>
 80164fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80164fe:	3504      	adds	r5, #4
 8016500:	e79b      	b.n	801643a <__multiply+0x58>
 8016502:	46d4      	mov	ip, sl
 8016504:	e7b3      	b.n	801646e <__multiply+0x8c>
 8016506:	46e0      	mov	r8, ip
 8016508:	e7dd      	b.n	80164c6 <__multiply+0xe4>
 801650a:	3e01      	subs	r6, #1
 801650c:	e799      	b.n	8016442 <__multiply+0x60>
	...

08016510 <__pow5mult>:
 8016510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016514:	4615      	mov	r5, r2
 8016516:	f012 0203 	ands.w	r2, r2, #3
 801651a:	4606      	mov	r6, r0
 801651c:	460f      	mov	r7, r1
 801651e:	d007      	beq.n	8016530 <__pow5mult+0x20>
 8016520:	3a01      	subs	r2, #1
 8016522:	4c21      	ldr	r4, [pc, #132]	; (80165a8 <__pow5mult+0x98>)
 8016524:	2300      	movs	r3, #0
 8016526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801652a:	f7ff fe8a 	bl	8016242 <__multadd>
 801652e:	4607      	mov	r7, r0
 8016530:	10ad      	asrs	r5, r5, #2
 8016532:	d035      	beq.n	80165a0 <__pow5mult+0x90>
 8016534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016536:	b93c      	cbnz	r4, 8016548 <__pow5mult+0x38>
 8016538:	2010      	movs	r0, #16
 801653a:	f7ff fe1d 	bl	8016178 <malloc>
 801653e:	6270      	str	r0, [r6, #36]	; 0x24
 8016540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016544:	6004      	str	r4, [r0, #0]
 8016546:	60c4      	str	r4, [r0, #12]
 8016548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801654c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016550:	b94c      	cbnz	r4, 8016566 <__pow5mult+0x56>
 8016552:	f240 2171 	movw	r1, #625	; 0x271
 8016556:	4630      	mov	r0, r6
 8016558:	f7ff ff3a 	bl	80163d0 <__i2b>
 801655c:	2300      	movs	r3, #0
 801655e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016562:	4604      	mov	r4, r0
 8016564:	6003      	str	r3, [r0, #0]
 8016566:	f04f 0800 	mov.w	r8, #0
 801656a:	07eb      	lsls	r3, r5, #31
 801656c:	d50a      	bpl.n	8016584 <__pow5mult+0x74>
 801656e:	4639      	mov	r1, r7
 8016570:	4622      	mov	r2, r4
 8016572:	4630      	mov	r0, r6
 8016574:	f7ff ff35 	bl	80163e2 <__multiply>
 8016578:	4639      	mov	r1, r7
 801657a:	4681      	mov	r9, r0
 801657c:	4630      	mov	r0, r6
 801657e:	f7ff fe49 	bl	8016214 <_Bfree>
 8016582:	464f      	mov	r7, r9
 8016584:	106d      	asrs	r5, r5, #1
 8016586:	d00b      	beq.n	80165a0 <__pow5mult+0x90>
 8016588:	6820      	ldr	r0, [r4, #0]
 801658a:	b938      	cbnz	r0, 801659c <__pow5mult+0x8c>
 801658c:	4622      	mov	r2, r4
 801658e:	4621      	mov	r1, r4
 8016590:	4630      	mov	r0, r6
 8016592:	f7ff ff26 	bl	80163e2 <__multiply>
 8016596:	6020      	str	r0, [r4, #0]
 8016598:	f8c0 8000 	str.w	r8, [r0]
 801659c:	4604      	mov	r4, r0
 801659e:	e7e4      	b.n	801656a <__pow5mult+0x5a>
 80165a0:	4638      	mov	r0, r7
 80165a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a6:	bf00      	nop
 80165a8:	080183c8 	.word	0x080183c8

080165ac <__lshift>:
 80165ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b0:	460c      	mov	r4, r1
 80165b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80165b6:	6923      	ldr	r3, [r4, #16]
 80165b8:	6849      	ldr	r1, [r1, #4]
 80165ba:	eb0a 0903 	add.w	r9, sl, r3
 80165be:	68a3      	ldr	r3, [r4, #8]
 80165c0:	4607      	mov	r7, r0
 80165c2:	4616      	mov	r6, r2
 80165c4:	f109 0501 	add.w	r5, r9, #1
 80165c8:	42ab      	cmp	r3, r5
 80165ca:	db32      	blt.n	8016632 <__lshift+0x86>
 80165cc:	4638      	mov	r0, r7
 80165ce:	f7ff fded 	bl	80161ac <_Balloc>
 80165d2:	2300      	movs	r3, #0
 80165d4:	4680      	mov	r8, r0
 80165d6:	f100 0114 	add.w	r1, r0, #20
 80165da:	461a      	mov	r2, r3
 80165dc:	4553      	cmp	r3, sl
 80165de:	db2b      	blt.n	8016638 <__lshift+0x8c>
 80165e0:	6920      	ldr	r0, [r4, #16]
 80165e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80165e6:	f104 0314 	add.w	r3, r4, #20
 80165ea:	f016 021f 	ands.w	r2, r6, #31
 80165ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80165f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80165f6:	d025      	beq.n	8016644 <__lshift+0x98>
 80165f8:	f1c2 0e20 	rsb	lr, r2, #32
 80165fc:	2000      	movs	r0, #0
 80165fe:	681e      	ldr	r6, [r3, #0]
 8016600:	468a      	mov	sl, r1
 8016602:	4096      	lsls	r6, r2
 8016604:	4330      	orrs	r0, r6
 8016606:	f84a 0b04 	str.w	r0, [sl], #4
 801660a:	f853 0b04 	ldr.w	r0, [r3], #4
 801660e:	459c      	cmp	ip, r3
 8016610:	fa20 f00e 	lsr.w	r0, r0, lr
 8016614:	d814      	bhi.n	8016640 <__lshift+0x94>
 8016616:	6048      	str	r0, [r1, #4]
 8016618:	b108      	cbz	r0, 801661e <__lshift+0x72>
 801661a:	f109 0502 	add.w	r5, r9, #2
 801661e:	3d01      	subs	r5, #1
 8016620:	4638      	mov	r0, r7
 8016622:	f8c8 5010 	str.w	r5, [r8, #16]
 8016626:	4621      	mov	r1, r4
 8016628:	f7ff fdf4 	bl	8016214 <_Bfree>
 801662c:	4640      	mov	r0, r8
 801662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016632:	3101      	adds	r1, #1
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	e7c7      	b.n	80165c8 <__lshift+0x1c>
 8016638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801663c:	3301      	adds	r3, #1
 801663e:	e7cd      	b.n	80165dc <__lshift+0x30>
 8016640:	4651      	mov	r1, sl
 8016642:	e7dc      	b.n	80165fe <__lshift+0x52>
 8016644:	3904      	subs	r1, #4
 8016646:	f853 2b04 	ldr.w	r2, [r3], #4
 801664a:	f841 2f04 	str.w	r2, [r1, #4]!
 801664e:	459c      	cmp	ip, r3
 8016650:	d8f9      	bhi.n	8016646 <__lshift+0x9a>
 8016652:	e7e4      	b.n	801661e <__lshift+0x72>

08016654 <__mcmp>:
 8016654:	6903      	ldr	r3, [r0, #16]
 8016656:	690a      	ldr	r2, [r1, #16]
 8016658:	1a9b      	subs	r3, r3, r2
 801665a:	b530      	push	{r4, r5, lr}
 801665c:	d10c      	bne.n	8016678 <__mcmp+0x24>
 801665e:	0092      	lsls	r2, r2, #2
 8016660:	3014      	adds	r0, #20
 8016662:	3114      	adds	r1, #20
 8016664:	1884      	adds	r4, r0, r2
 8016666:	4411      	add	r1, r2
 8016668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801666c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016670:	4295      	cmp	r5, r2
 8016672:	d003      	beq.n	801667c <__mcmp+0x28>
 8016674:	d305      	bcc.n	8016682 <__mcmp+0x2e>
 8016676:	2301      	movs	r3, #1
 8016678:	4618      	mov	r0, r3
 801667a:	bd30      	pop	{r4, r5, pc}
 801667c:	42a0      	cmp	r0, r4
 801667e:	d3f3      	bcc.n	8016668 <__mcmp+0x14>
 8016680:	e7fa      	b.n	8016678 <__mcmp+0x24>
 8016682:	f04f 33ff 	mov.w	r3, #4294967295
 8016686:	e7f7      	b.n	8016678 <__mcmp+0x24>

08016688 <__mdiff>:
 8016688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668c:	460d      	mov	r5, r1
 801668e:	4607      	mov	r7, r0
 8016690:	4611      	mov	r1, r2
 8016692:	4628      	mov	r0, r5
 8016694:	4614      	mov	r4, r2
 8016696:	f7ff ffdd 	bl	8016654 <__mcmp>
 801669a:	1e06      	subs	r6, r0, #0
 801669c:	d108      	bne.n	80166b0 <__mdiff+0x28>
 801669e:	4631      	mov	r1, r6
 80166a0:	4638      	mov	r0, r7
 80166a2:	f7ff fd83 	bl	80161ac <_Balloc>
 80166a6:	2301      	movs	r3, #1
 80166a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80166ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166b0:	bfa4      	itt	ge
 80166b2:	4623      	movge	r3, r4
 80166b4:	462c      	movge	r4, r5
 80166b6:	4638      	mov	r0, r7
 80166b8:	6861      	ldr	r1, [r4, #4]
 80166ba:	bfa6      	itte	ge
 80166bc:	461d      	movge	r5, r3
 80166be:	2600      	movge	r6, #0
 80166c0:	2601      	movlt	r6, #1
 80166c2:	f7ff fd73 	bl	80161ac <_Balloc>
 80166c6:	692b      	ldr	r3, [r5, #16]
 80166c8:	60c6      	str	r6, [r0, #12]
 80166ca:	6926      	ldr	r6, [r4, #16]
 80166cc:	f105 0914 	add.w	r9, r5, #20
 80166d0:	f104 0214 	add.w	r2, r4, #20
 80166d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80166d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80166dc:	f100 0514 	add.w	r5, r0, #20
 80166e0:	f04f 0e00 	mov.w	lr, #0
 80166e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80166e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80166ec:	fa1e f18a 	uxtah	r1, lr, sl
 80166f0:	b2a3      	uxth	r3, r4
 80166f2:	1ac9      	subs	r1, r1, r3
 80166f4:	0c23      	lsrs	r3, r4, #16
 80166f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80166fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80166fe:	b289      	uxth	r1, r1
 8016700:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016704:	45c8      	cmp	r8, r9
 8016706:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801670a:	4694      	mov	ip, r2
 801670c:	f845 3b04 	str.w	r3, [r5], #4
 8016710:	d8e8      	bhi.n	80166e4 <__mdiff+0x5c>
 8016712:	45bc      	cmp	ip, r7
 8016714:	d304      	bcc.n	8016720 <__mdiff+0x98>
 8016716:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801671a:	b183      	cbz	r3, 801673e <__mdiff+0xb6>
 801671c:	6106      	str	r6, [r0, #16]
 801671e:	e7c5      	b.n	80166ac <__mdiff+0x24>
 8016720:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016724:	fa1e f381 	uxtah	r3, lr, r1
 8016728:	141a      	asrs	r2, r3, #16
 801672a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801672e:	b29b      	uxth	r3, r3
 8016730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016734:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016738:	f845 3b04 	str.w	r3, [r5], #4
 801673c:	e7e9      	b.n	8016712 <__mdiff+0x8a>
 801673e:	3e01      	subs	r6, #1
 8016740:	e7e9      	b.n	8016716 <__mdiff+0x8e>
	...

08016744 <__ulp>:
 8016744:	4b12      	ldr	r3, [pc, #72]	; (8016790 <__ulp+0x4c>)
 8016746:	ee10 2a90 	vmov	r2, s1
 801674a:	401a      	ands	r2, r3
 801674c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016750:	2b00      	cmp	r3, #0
 8016752:	dd04      	ble.n	801675e <__ulp+0x1a>
 8016754:	2000      	movs	r0, #0
 8016756:	4619      	mov	r1, r3
 8016758:	ec41 0b10 	vmov	d0, r0, r1
 801675c:	4770      	bx	lr
 801675e:	425b      	negs	r3, r3
 8016760:	151b      	asrs	r3, r3, #20
 8016762:	2b13      	cmp	r3, #19
 8016764:	f04f 0000 	mov.w	r0, #0
 8016768:	f04f 0100 	mov.w	r1, #0
 801676c:	dc04      	bgt.n	8016778 <__ulp+0x34>
 801676e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016772:	fa42 f103 	asr.w	r1, r2, r3
 8016776:	e7ef      	b.n	8016758 <__ulp+0x14>
 8016778:	3b14      	subs	r3, #20
 801677a:	2b1e      	cmp	r3, #30
 801677c:	f04f 0201 	mov.w	r2, #1
 8016780:	bfda      	itte	le
 8016782:	f1c3 031f 	rsble	r3, r3, #31
 8016786:	fa02 f303 	lslle.w	r3, r2, r3
 801678a:	4613      	movgt	r3, r2
 801678c:	4618      	mov	r0, r3
 801678e:	e7e3      	b.n	8016758 <__ulp+0x14>
 8016790:	7ff00000 	.word	0x7ff00000

08016794 <__b2d>:
 8016794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016796:	6905      	ldr	r5, [r0, #16]
 8016798:	f100 0714 	add.w	r7, r0, #20
 801679c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80167a0:	1f2e      	subs	r6, r5, #4
 80167a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80167a6:	4620      	mov	r0, r4
 80167a8:	f7ff fdc4 	bl	8016334 <__hi0bits>
 80167ac:	f1c0 0320 	rsb	r3, r0, #32
 80167b0:	280a      	cmp	r0, #10
 80167b2:	600b      	str	r3, [r1, #0]
 80167b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801682c <__b2d+0x98>
 80167b8:	dc14      	bgt.n	80167e4 <__b2d+0x50>
 80167ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80167be:	fa24 f10e 	lsr.w	r1, r4, lr
 80167c2:	42b7      	cmp	r7, r6
 80167c4:	ea41 030c 	orr.w	r3, r1, ip
 80167c8:	bf34      	ite	cc
 80167ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167ce:	2100      	movcs	r1, #0
 80167d0:	3015      	adds	r0, #21
 80167d2:	fa04 f000 	lsl.w	r0, r4, r0
 80167d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80167da:	ea40 0201 	orr.w	r2, r0, r1
 80167de:	ec43 2b10 	vmov	d0, r2, r3
 80167e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167e4:	42b7      	cmp	r7, r6
 80167e6:	bf3a      	itte	cc
 80167e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80167ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167f0:	2100      	movcs	r1, #0
 80167f2:	380b      	subs	r0, #11
 80167f4:	d015      	beq.n	8016822 <__b2d+0x8e>
 80167f6:	4084      	lsls	r4, r0
 80167f8:	f1c0 0520 	rsb	r5, r0, #32
 80167fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016800:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016804:	42be      	cmp	r6, r7
 8016806:	fa21 fc05 	lsr.w	ip, r1, r5
 801680a:	ea44 030c 	orr.w	r3, r4, ip
 801680e:	bf8c      	ite	hi
 8016810:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016814:	2400      	movls	r4, #0
 8016816:	fa01 f000 	lsl.w	r0, r1, r0
 801681a:	40ec      	lsrs	r4, r5
 801681c:	ea40 0204 	orr.w	r2, r0, r4
 8016820:	e7dd      	b.n	80167de <__b2d+0x4a>
 8016822:	ea44 030c 	orr.w	r3, r4, ip
 8016826:	460a      	mov	r2, r1
 8016828:	e7d9      	b.n	80167de <__b2d+0x4a>
 801682a:	bf00      	nop
 801682c:	3ff00000 	.word	0x3ff00000

08016830 <__d2b>:
 8016830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016834:	460e      	mov	r6, r1
 8016836:	2101      	movs	r1, #1
 8016838:	ec59 8b10 	vmov	r8, r9, d0
 801683c:	4615      	mov	r5, r2
 801683e:	f7ff fcb5 	bl	80161ac <_Balloc>
 8016842:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016846:	4607      	mov	r7, r0
 8016848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801684c:	bb34      	cbnz	r4, 801689c <__d2b+0x6c>
 801684e:	9301      	str	r3, [sp, #4]
 8016850:	f1b8 0300 	subs.w	r3, r8, #0
 8016854:	d027      	beq.n	80168a6 <__d2b+0x76>
 8016856:	a802      	add	r0, sp, #8
 8016858:	f840 3d08 	str.w	r3, [r0, #-8]!
 801685c:	f7ff fd89 	bl	8016372 <__lo0bits>
 8016860:	9900      	ldr	r1, [sp, #0]
 8016862:	b1f0      	cbz	r0, 80168a2 <__d2b+0x72>
 8016864:	9a01      	ldr	r2, [sp, #4]
 8016866:	f1c0 0320 	rsb	r3, r0, #32
 801686a:	fa02 f303 	lsl.w	r3, r2, r3
 801686e:	430b      	orrs	r3, r1
 8016870:	40c2      	lsrs	r2, r0
 8016872:	617b      	str	r3, [r7, #20]
 8016874:	9201      	str	r2, [sp, #4]
 8016876:	9b01      	ldr	r3, [sp, #4]
 8016878:	61bb      	str	r3, [r7, #24]
 801687a:	2b00      	cmp	r3, #0
 801687c:	bf14      	ite	ne
 801687e:	2102      	movne	r1, #2
 8016880:	2101      	moveq	r1, #1
 8016882:	6139      	str	r1, [r7, #16]
 8016884:	b1c4      	cbz	r4, 80168b8 <__d2b+0x88>
 8016886:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801688a:	4404      	add	r4, r0
 801688c:	6034      	str	r4, [r6, #0]
 801688e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016892:	6028      	str	r0, [r5, #0]
 8016894:	4638      	mov	r0, r7
 8016896:	b003      	add	sp, #12
 8016898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801689c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168a0:	e7d5      	b.n	801684e <__d2b+0x1e>
 80168a2:	6179      	str	r1, [r7, #20]
 80168a4:	e7e7      	b.n	8016876 <__d2b+0x46>
 80168a6:	a801      	add	r0, sp, #4
 80168a8:	f7ff fd63 	bl	8016372 <__lo0bits>
 80168ac:	9b01      	ldr	r3, [sp, #4]
 80168ae:	617b      	str	r3, [r7, #20]
 80168b0:	2101      	movs	r1, #1
 80168b2:	6139      	str	r1, [r7, #16]
 80168b4:	3020      	adds	r0, #32
 80168b6:	e7e5      	b.n	8016884 <__d2b+0x54>
 80168b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80168bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80168c0:	6030      	str	r0, [r6, #0]
 80168c2:	6918      	ldr	r0, [r3, #16]
 80168c4:	f7ff fd36 	bl	8016334 <__hi0bits>
 80168c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80168cc:	e7e1      	b.n	8016892 <__d2b+0x62>

080168ce <__ratio>:
 80168ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d2:	4688      	mov	r8, r1
 80168d4:	4669      	mov	r1, sp
 80168d6:	4681      	mov	r9, r0
 80168d8:	f7ff ff5c 	bl	8016794 <__b2d>
 80168dc:	a901      	add	r1, sp, #4
 80168de:	4640      	mov	r0, r8
 80168e0:	ec57 6b10 	vmov	r6, r7, d0
 80168e4:	f7ff ff56 	bl	8016794 <__b2d>
 80168e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80168f0:	eba3 0c02 	sub.w	ip, r3, r2
 80168f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168f8:	1a9b      	subs	r3, r3, r2
 80168fa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80168fe:	ec5b ab10 	vmov	sl, fp, d0
 8016902:	2b00      	cmp	r3, #0
 8016904:	bfce      	itee	gt
 8016906:	463a      	movgt	r2, r7
 8016908:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801690c:	465a      	movle	r2, fp
 801690e:	4659      	mov	r1, fp
 8016910:	463d      	mov	r5, r7
 8016912:	bfd4      	ite	le
 8016914:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016918:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801691c:	4630      	mov	r0, r6
 801691e:	ee10 2a10 	vmov	r2, s0
 8016922:	460b      	mov	r3, r1
 8016924:	4629      	mov	r1, r5
 8016926:	f7e9 ffa9 	bl	800087c <__aeabi_ddiv>
 801692a:	ec41 0b10 	vmov	d0, r0, r1
 801692e:	b003      	add	sp, #12
 8016930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016934 <__copybits>:
 8016934:	3901      	subs	r1, #1
 8016936:	b510      	push	{r4, lr}
 8016938:	1149      	asrs	r1, r1, #5
 801693a:	6914      	ldr	r4, [r2, #16]
 801693c:	3101      	adds	r1, #1
 801693e:	f102 0314 	add.w	r3, r2, #20
 8016942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801694a:	42a3      	cmp	r3, r4
 801694c:	4602      	mov	r2, r0
 801694e:	d303      	bcc.n	8016958 <__copybits+0x24>
 8016950:	2300      	movs	r3, #0
 8016952:	428a      	cmp	r2, r1
 8016954:	d305      	bcc.n	8016962 <__copybits+0x2e>
 8016956:	bd10      	pop	{r4, pc}
 8016958:	f853 2b04 	ldr.w	r2, [r3], #4
 801695c:	f840 2b04 	str.w	r2, [r0], #4
 8016960:	e7f3      	b.n	801694a <__copybits+0x16>
 8016962:	f842 3b04 	str.w	r3, [r2], #4
 8016966:	e7f4      	b.n	8016952 <__copybits+0x1e>

08016968 <__any_on>:
 8016968:	f100 0214 	add.w	r2, r0, #20
 801696c:	6900      	ldr	r0, [r0, #16]
 801696e:	114b      	asrs	r3, r1, #5
 8016970:	4298      	cmp	r0, r3
 8016972:	b510      	push	{r4, lr}
 8016974:	db11      	blt.n	801699a <__any_on+0x32>
 8016976:	dd0a      	ble.n	801698e <__any_on+0x26>
 8016978:	f011 011f 	ands.w	r1, r1, #31
 801697c:	d007      	beq.n	801698e <__any_on+0x26>
 801697e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016982:	fa24 f001 	lsr.w	r0, r4, r1
 8016986:	fa00 f101 	lsl.w	r1, r0, r1
 801698a:	428c      	cmp	r4, r1
 801698c:	d10b      	bne.n	80169a6 <__any_on+0x3e>
 801698e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016992:	4293      	cmp	r3, r2
 8016994:	d803      	bhi.n	801699e <__any_on+0x36>
 8016996:	2000      	movs	r0, #0
 8016998:	bd10      	pop	{r4, pc}
 801699a:	4603      	mov	r3, r0
 801699c:	e7f7      	b.n	801698e <__any_on+0x26>
 801699e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169a2:	2900      	cmp	r1, #0
 80169a4:	d0f5      	beq.n	8016992 <__any_on+0x2a>
 80169a6:	2001      	movs	r0, #1
 80169a8:	e7f6      	b.n	8016998 <__any_on+0x30>

080169aa <_calloc_r>:
 80169aa:	b538      	push	{r3, r4, r5, lr}
 80169ac:	fb02 f401 	mul.w	r4, r2, r1
 80169b0:	4621      	mov	r1, r4
 80169b2:	f000 f857 	bl	8016a64 <_malloc_r>
 80169b6:	4605      	mov	r5, r0
 80169b8:	b118      	cbz	r0, 80169c2 <_calloc_r+0x18>
 80169ba:	4622      	mov	r2, r4
 80169bc:	2100      	movs	r1, #0
 80169be:	f7fc f906 	bl	8012bce <memset>
 80169c2:	4628      	mov	r0, r5
 80169c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080169c8 <_free_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	4605      	mov	r5, r0
 80169cc:	2900      	cmp	r1, #0
 80169ce:	d045      	beq.n	8016a5c <_free_r+0x94>
 80169d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169d4:	1f0c      	subs	r4, r1, #4
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	bfb8      	it	lt
 80169da:	18e4      	addlt	r4, r4, r3
 80169dc:	f000 ffdb 	bl	8017996 <__malloc_lock>
 80169e0:	4a1f      	ldr	r2, [pc, #124]	; (8016a60 <_free_r+0x98>)
 80169e2:	6813      	ldr	r3, [r2, #0]
 80169e4:	4610      	mov	r0, r2
 80169e6:	b933      	cbnz	r3, 80169f6 <_free_r+0x2e>
 80169e8:	6063      	str	r3, [r4, #4]
 80169ea:	6014      	str	r4, [r2, #0]
 80169ec:	4628      	mov	r0, r5
 80169ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169f2:	f000 bfd1 	b.w	8017998 <__malloc_unlock>
 80169f6:	42a3      	cmp	r3, r4
 80169f8:	d90c      	bls.n	8016a14 <_free_r+0x4c>
 80169fa:	6821      	ldr	r1, [r4, #0]
 80169fc:	1862      	adds	r2, r4, r1
 80169fe:	4293      	cmp	r3, r2
 8016a00:	bf04      	itt	eq
 8016a02:	681a      	ldreq	r2, [r3, #0]
 8016a04:	685b      	ldreq	r3, [r3, #4]
 8016a06:	6063      	str	r3, [r4, #4]
 8016a08:	bf04      	itt	eq
 8016a0a:	1852      	addeq	r2, r2, r1
 8016a0c:	6022      	streq	r2, [r4, #0]
 8016a0e:	6004      	str	r4, [r0, #0]
 8016a10:	e7ec      	b.n	80169ec <_free_r+0x24>
 8016a12:	4613      	mov	r3, r2
 8016a14:	685a      	ldr	r2, [r3, #4]
 8016a16:	b10a      	cbz	r2, 8016a1c <_free_r+0x54>
 8016a18:	42a2      	cmp	r2, r4
 8016a1a:	d9fa      	bls.n	8016a12 <_free_r+0x4a>
 8016a1c:	6819      	ldr	r1, [r3, #0]
 8016a1e:	1858      	adds	r0, r3, r1
 8016a20:	42a0      	cmp	r0, r4
 8016a22:	d10b      	bne.n	8016a3c <_free_r+0x74>
 8016a24:	6820      	ldr	r0, [r4, #0]
 8016a26:	4401      	add	r1, r0
 8016a28:	1858      	adds	r0, r3, r1
 8016a2a:	4282      	cmp	r2, r0
 8016a2c:	6019      	str	r1, [r3, #0]
 8016a2e:	d1dd      	bne.n	80169ec <_free_r+0x24>
 8016a30:	6810      	ldr	r0, [r2, #0]
 8016a32:	6852      	ldr	r2, [r2, #4]
 8016a34:	605a      	str	r2, [r3, #4]
 8016a36:	4401      	add	r1, r0
 8016a38:	6019      	str	r1, [r3, #0]
 8016a3a:	e7d7      	b.n	80169ec <_free_r+0x24>
 8016a3c:	d902      	bls.n	8016a44 <_free_r+0x7c>
 8016a3e:	230c      	movs	r3, #12
 8016a40:	602b      	str	r3, [r5, #0]
 8016a42:	e7d3      	b.n	80169ec <_free_r+0x24>
 8016a44:	6820      	ldr	r0, [r4, #0]
 8016a46:	1821      	adds	r1, r4, r0
 8016a48:	428a      	cmp	r2, r1
 8016a4a:	bf04      	itt	eq
 8016a4c:	6811      	ldreq	r1, [r2, #0]
 8016a4e:	6852      	ldreq	r2, [r2, #4]
 8016a50:	6062      	str	r2, [r4, #4]
 8016a52:	bf04      	itt	eq
 8016a54:	1809      	addeq	r1, r1, r0
 8016a56:	6021      	streq	r1, [r4, #0]
 8016a58:	605c      	str	r4, [r3, #4]
 8016a5a:	e7c7      	b.n	80169ec <_free_r+0x24>
 8016a5c:	bd38      	pop	{r3, r4, r5, pc}
 8016a5e:	bf00      	nop
 8016a60:	2003746c 	.word	0x2003746c

08016a64 <_malloc_r>:
 8016a64:	b570      	push	{r4, r5, r6, lr}
 8016a66:	1ccd      	adds	r5, r1, #3
 8016a68:	f025 0503 	bic.w	r5, r5, #3
 8016a6c:	3508      	adds	r5, #8
 8016a6e:	2d0c      	cmp	r5, #12
 8016a70:	bf38      	it	cc
 8016a72:	250c      	movcc	r5, #12
 8016a74:	2d00      	cmp	r5, #0
 8016a76:	4606      	mov	r6, r0
 8016a78:	db01      	blt.n	8016a7e <_malloc_r+0x1a>
 8016a7a:	42a9      	cmp	r1, r5
 8016a7c:	d903      	bls.n	8016a86 <_malloc_r+0x22>
 8016a7e:	230c      	movs	r3, #12
 8016a80:	6033      	str	r3, [r6, #0]
 8016a82:	2000      	movs	r0, #0
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	f000 ff86 	bl	8017996 <__malloc_lock>
 8016a8a:	4a21      	ldr	r2, [pc, #132]	; (8016b10 <_malloc_r+0xac>)
 8016a8c:	6814      	ldr	r4, [r2, #0]
 8016a8e:	4621      	mov	r1, r4
 8016a90:	b991      	cbnz	r1, 8016ab8 <_malloc_r+0x54>
 8016a92:	4c20      	ldr	r4, [pc, #128]	; (8016b14 <_malloc_r+0xb0>)
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	b91b      	cbnz	r3, 8016aa0 <_malloc_r+0x3c>
 8016a98:	4630      	mov	r0, r6
 8016a9a:	f000 fe19 	bl	80176d0 <_sbrk_r>
 8016a9e:	6020      	str	r0, [r4, #0]
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	f000 fe14 	bl	80176d0 <_sbrk_r>
 8016aa8:	1c43      	adds	r3, r0, #1
 8016aaa:	d124      	bne.n	8016af6 <_malloc_r+0x92>
 8016aac:	230c      	movs	r3, #12
 8016aae:	6033      	str	r3, [r6, #0]
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f000 ff71 	bl	8017998 <__malloc_unlock>
 8016ab6:	e7e4      	b.n	8016a82 <_malloc_r+0x1e>
 8016ab8:	680b      	ldr	r3, [r1, #0]
 8016aba:	1b5b      	subs	r3, r3, r5
 8016abc:	d418      	bmi.n	8016af0 <_malloc_r+0x8c>
 8016abe:	2b0b      	cmp	r3, #11
 8016ac0:	d90f      	bls.n	8016ae2 <_malloc_r+0x7e>
 8016ac2:	600b      	str	r3, [r1, #0]
 8016ac4:	50cd      	str	r5, [r1, r3]
 8016ac6:	18cc      	adds	r4, r1, r3
 8016ac8:	4630      	mov	r0, r6
 8016aca:	f000 ff65 	bl	8017998 <__malloc_unlock>
 8016ace:	f104 000b 	add.w	r0, r4, #11
 8016ad2:	1d23      	adds	r3, r4, #4
 8016ad4:	f020 0007 	bic.w	r0, r0, #7
 8016ad8:	1ac3      	subs	r3, r0, r3
 8016ada:	d0d3      	beq.n	8016a84 <_malloc_r+0x20>
 8016adc:	425a      	negs	r2, r3
 8016ade:	50e2      	str	r2, [r4, r3]
 8016ae0:	e7d0      	b.n	8016a84 <_malloc_r+0x20>
 8016ae2:	428c      	cmp	r4, r1
 8016ae4:	684b      	ldr	r3, [r1, #4]
 8016ae6:	bf16      	itet	ne
 8016ae8:	6063      	strne	r3, [r4, #4]
 8016aea:	6013      	streq	r3, [r2, #0]
 8016aec:	460c      	movne	r4, r1
 8016aee:	e7eb      	b.n	8016ac8 <_malloc_r+0x64>
 8016af0:	460c      	mov	r4, r1
 8016af2:	6849      	ldr	r1, [r1, #4]
 8016af4:	e7cc      	b.n	8016a90 <_malloc_r+0x2c>
 8016af6:	1cc4      	adds	r4, r0, #3
 8016af8:	f024 0403 	bic.w	r4, r4, #3
 8016afc:	42a0      	cmp	r0, r4
 8016afe:	d005      	beq.n	8016b0c <_malloc_r+0xa8>
 8016b00:	1a21      	subs	r1, r4, r0
 8016b02:	4630      	mov	r0, r6
 8016b04:	f000 fde4 	bl	80176d0 <_sbrk_r>
 8016b08:	3001      	adds	r0, #1
 8016b0a:	d0cf      	beq.n	8016aac <_malloc_r+0x48>
 8016b0c:	6025      	str	r5, [r4, #0]
 8016b0e:	e7db      	b.n	8016ac8 <_malloc_r+0x64>
 8016b10:	2003746c 	.word	0x2003746c
 8016b14:	20037470 	.word	0x20037470

08016b18 <__ssputs_r>:
 8016b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b1c:	688e      	ldr	r6, [r1, #8]
 8016b1e:	429e      	cmp	r6, r3
 8016b20:	4682      	mov	sl, r0
 8016b22:	460c      	mov	r4, r1
 8016b24:	4690      	mov	r8, r2
 8016b26:	4699      	mov	r9, r3
 8016b28:	d837      	bhi.n	8016b9a <__ssputs_r+0x82>
 8016b2a:	898a      	ldrh	r2, [r1, #12]
 8016b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b30:	d031      	beq.n	8016b96 <__ssputs_r+0x7e>
 8016b32:	6825      	ldr	r5, [r4, #0]
 8016b34:	6909      	ldr	r1, [r1, #16]
 8016b36:	1a6f      	subs	r7, r5, r1
 8016b38:	6965      	ldr	r5, [r4, #20]
 8016b3a:	2302      	movs	r3, #2
 8016b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b40:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b44:	f109 0301 	add.w	r3, r9, #1
 8016b48:	443b      	add	r3, r7
 8016b4a:	429d      	cmp	r5, r3
 8016b4c:	bf38      	it	cc
 8016b4e:	461d      	movcc	r5, r3
 8016b50:	0553      	lsls	r3, r2, #21
 8016b52:	d530      	bpl.n	8016bb6 <__ssputs_r+0x9e>
 8016b54:	4629      	mov	r1, r5
 8016b56:	f7ff ff85 	bl	8016a64 <_malloc_r>
 8016b5a:	4606      	mov	r6, r0
 8016b5c:	b950      	cbnz	r0, 8016b74 <__ssputs_r+0x5c>
 8016b5e:	230c      	movs	r3, #12
 8016b60:	f8ca 3000 	str.w	r3, [sl]
 8016b64:	89a3      	ldrh	r3, [r4, #12]
 8016b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b6a:	81a3      	strh	r3, [r4, #12]
 8016b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b74:	463a      	mov	r2, r7
 8016b76:	6921      	ldr	r1, [r4, #16]
 8016b78:	f7fc f81e 	bl	8012bb8 <memcpy>
 8016b7c:	89a3      	ldrh	r3, [r4, #12]
 8016b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b86:	81a3      	strh	r3, [r4, #12]
 8016b88:	6126      	str	r6, [r4, #16]
 8016b8a:	6165      	str	r5, [r4, #20]
 8016b8c:	443e      	add	r6, r7
 8016b8e:	1bed      	subs	r5, r5, r7
 8016b90:	6026      	str	r6, [r4, #0]
 8016b92:	60a5      	str	r5, [r4, #8]
 8016b94:	464e      	mov	r6, r9
 8016b96:	454e      	cmp	r6, r9
 8016b98:	d900      	bls.n	8016b9c <__ssputs_r+0x84>
 8016b9a:	464e      	mov	r6, r9
 8016b9c:	4632      	mov	r2, r6
 8016b9e:	4641      	mov	r1, r8
 8016ba0:	6820      	ldr	r0, [r4, #0]
 8016ba2:	f000 fedf 	bl	8017964 <memmove>
 8016ba6:	68a3      	ldr	r3, [r4, #8]
 8016ba8:	1b9b      	subs	r3, r3, r6
 8016baa:	60a3      	str	r3, [r4, #8]
 8016bac:	6823      	ldr	r3, [r4, #0]
 8016bae:	441e      	add	r6, r3
 8016bb0:	6026      	str	r6, [r4, #0]
 8016bb2:	2000      	movs	r0, #0
 8016bb4:	e7dc      	b.n	8016b70 <__ssputs_r+0x58>
 8016bb6:	462a      	mov	r2, r5
 8016bb8:	f000 feef 	bl	801799a <_realloc_r>
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	d1e2      	bne.n	8016b88 <__ssputs_r+0x70>
 8016bc2:	6921      	ldr	r1, [r4, #16]
 8016bc4:	4650      	mov	r0, sl
 8016bc6:	f7ff feff 	bl	80169c8 <_free_r>
 8016bca:	e7c8      	b.n	8016b5e <__ssputs_r+0x46>

08016bcc <_svfiprintf_r>:
 8016bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bd0:	461d      	mov	r5, r3
 8016bd2:	898b      	ldrh	r3, [r1, #12]
 8016bd4:	061f      	lsls	r7, r3, #24
 8016bd6:	b09d      	sub	sp, #116	; 0x74
 8016bd8:	4680      	mov	r8, r0
 8016bda:	460c      	mov	r4, r1
 8016bdc:	4616      	mov	r6, r2
 8016bde:	d50f      	bpl.n	8016c00 <_svfiprintf_r+0x34>
 8016be0:	690b      	ldr	r3, [r1, #16]
 8016be2:	b96b      	cbnz	r3, 8016c00 <_svfiprintf_r+0x34>
 8016be4:	2140      	movs	r1, #64	; 0x40
 8016be6:	f7ff ff3d 	bl	8016a64 <_malloc_r>
 8016bea:	6020      	str	r0, [r4, #0]
 8016bec:	6120      	str	r0, [r4, #16]
 8016bee:	b928      	cbnz	r0, 8016bfc <_svfiprintf_r+0x30>
 8016bf0:	230c      	movs	r3, #12
 8016bf2:	f8c8 3000 	str.w	r3, [r8]
 8016bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bfa:	e0c8      	b.n	8016d8e <_svfiprintf_r+0x1c2>
 8016bfc:	2340      	movs	r3, #64	; 0x40
 8016bfe:	6163      	str	r3, [r4, #20]
 8016c00:	2300      	movs	r3, #0
 8016c02:	9309      	str	r3, [sp, #36]	; 0x24
 8016c04:	2320      	movs	r3, #32
 8016c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c0a:	2330      	movs	r3, #48	; 0x30
 8016c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c10:	9503      	str	r5, [sp, #12]
 8016c12:	f04f 0b01 	mov.w	fp, #1
 8016c16:	4637      	mov	r7, r6
 8016c18:	463d      	mov	r5, r7
 8016c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c1e:	b10b      	cbz	r3, 8016c24 <_svfiprintf_r+0x58>
 8016c20:	2b25      	cmp	r3, #37	; 0x25
 8016c22:	d13e      	bne.n	8016ca2 <_svfiprintf_r+0xd6>
 8016c24:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c28:	d00b      	beq.n	8016c42 <_svfiprintf_r+0x76>
 8016c2a:	4653      	mov	r3, sl
 8016c2c:	4632      	mov	r2, r6
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4640      	mov	r0, r8
 8016c32:	f7ff ff71 	bl	8016b18 <__ssputs_r>
 8016c36:	3001      	adds	r0, #1
 8016c38:	f000 80a4 	beq.w	8016d84 <_svfiprintf_r+0x1b8>
 8016c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c3e:	4453      	add	r3, sl
 8016c40:	9309      	str	r3, [sp, #36]	; 0x24
 8016c42:	783b      	ldrb	r3, [r7, #0]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	f000 809d 	beq.w	8016d84 <_svfiprintf_r+0x1b8>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c54:	9304      	str	r3, [sp, #16]
 8016c56:	9307      	str	r3, [sp, #28]
 8016c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8016c5e:	462f      	mov	r7, r5
 8016c60:	2205      	movs	r2, #5
 8016c62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016c66:	4850      	ldr	r0, [pc, #320]	; (8016da8 <_svfiprintf_r+0x1dc>)
 8016c68:	f7e9 fad2 	bl	8000210 <memchr>
 8016c6c:	9b04      	ldr	r3, [sp, #16]
 8016c6e:	b9d0      	cbnz	r0, 8016ca6 <_svfiprintf_r+0xda>
 8016c70:	06d9      	lsls	r1, r3, #27
 8016c72:	bf44      	itt	mi
 8016c74:	2220      	movmi	r2, #32
 8016c76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c7a:	071a      	lsls	r2, r3, #28
 8016c7c:	bf44      	itt	mi
 8016c7e:	222b      	movmi	r2, #43	; 0x2b
 8016c80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c84:	782a      	ldrb	r2, [r5, #0]
 8016c86:	2a2a      	cmp	r2, #42	; 0x2a
 8016c88:	d015      	beq.n	8016cb6 <_svfiprintf_r+0xea>
 8016c8a:	9a07      	ldr	r2, [sp, #28]
 8016c8c:	462f      	mov	r7, r5
 8016c8e:	2000      	movs	r0, #0
 8016c90:	250a      	movs	r5, #10
 8016c92:	4639      	mov	r1, r7
 8016c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c98:	3b30      	subs	r3, #48	; 0x30
 8016c9a:	2b09      	cmp	r3, #9
 8016c9c:	d94d      	bls.n	8016d3a <_svfiprintf_r+0x16e>
 8016c9e:	b1b8      	cbz	r0, 8016cd0 <_svfiprintf_r+0x104>
 8016ca0:	e00f      	b.n	8016cc2 <_svfiprintf_r+0xf6>
 8016ca2:	462f      	mov	r7, r5
 8016ca4:	e7b8      	b.n	8016c18 <_svfiprintf_r+0x4c>
 8016ca6:	4a40      	ldr	r2, [pc, #256]	; (8016da8 <_svfiprintf_r+0x1dc>)
 8016ca8:	1a80      	subs	r0, r0, r2
 8016caa:	fa0b f000 	lsl.w	r0, fp, r0
 8016cae:	4318      	orrs	r0, r3
 8016cb0:	9004      	str	r0, [sp, #16]
 8016cb2:	463d      	mov	r5, r7
 8016cb4:	e7d3      	b.n	8016c5e <_svfiprintf_r+0x92>
 8016cb6:	9a03      	ldr	r2, [sp, #12]
 8016cb8:	1d11      	adds	r1, r2, #4
 8016cba:	6812      	ldr	r2, [r2, #0]
 8016cbc:	9103      	str	r1, [sp, #12]
 8016cbe:	2a00      	cmp	r2, #0
 8016cc0:	db01      	blt.n	8016cc6 <_svfiprintf_r+0xfa>
 8016cc2:	9207      	str	r2, [sp, #28]
 8016cc4:	e004      	b.n	8016cd0 <_svfiprintf_r+0x104>
 8016cc6:	4252      	negs	r2, r2
 8016cc8:	f043 0302 	orr.w	r3, r3, #2
 8016ccc:	9207      	str	r2, [sp, #28]
 8016cce:	9304      	str	r3, [sp, #16]
 8016cd0:	783b      	ldrb	r3, [r7, #0]
 8016cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8016cd4:	d10c      	bne.n	8016cf0 <_svfiprintf_r+0x124>
 8016cd6:	787b      	ldrb	r3, [r7, #1]
 8016cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8016cda:	d133      	bne.n	8016d44 <_svfiprintf_r+0x178>
 8016cdc:	9b03      	ldr	r3, [sp, #12]
 8016cde:	1d1a      	adds	r2, r3, #4
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	9203      	str	r2, [sp, #12]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	bfb8      	it	lt
 8016ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016cec:	3702      	adds	r7, #2
 8016cee:	9305      	str	r3, [sp, #20]
 8016cf0:	4d2e      	ldr	r5, [pc, #184]	; (8016dac <_svfiprintf_r+0x1e0>)
 8016cf2:	7839      	ldrb	r1, [r7, #0]
 8016cf4:	2203      	movs	r2, #3
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	f7e9 fa8a 	bl	8000210 <memchr>
 8016cfc:	b138      	cbz	r0, 8016d0e <_svfiprintf_r+0x142>
 8016cfe:	2340      	movs	r3, #64	; 0x40
 8016d00:	1b40      	subs	r0, r0, r5
 8016d02:	fa03 f000 	lsl.w	r0, r3, r0
 8016d06:	9b04      	ldr	r3, [sp, #16]
 8016d08:	4303      	orrs	r3, r0
 8016d0a:	3701      	adds	r7, #1
 8016d0c:	9304      	str	r3, [sp, #16]
 8016d0e:	7839      	ldrb	r1, [r7, #0]
 8016d10:	4827      	ldr	r0, [pc, #156]	; (8016db0 <_svfiprintf_r+0x1e4>)
 8016d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d16:	2206      	movs	r2, #6
 8016d18:	1c7e      	adds	r6, r7, #1
 8016d1a:	f7e9 fa79 	bl	8000210 <memchr>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	d038      	beq.n	8016d94 <_svfiprintf_r+0x1c8>
 8016d22:	4b24      	ldr	r3, [pc, #144]	; (8016db4 <_svfiprintf_r+0x1e8>)
 8016d24:	bb13      	cbnz	r3, 8016d6c <_svfiprintf_r+0x1a0>
 8016d26:	9b03      	ldr	r3, [sp, #12]
 8016d28:	3307      	adds	r3, #7
 8016d2a:	f023 0307 	bic.w	r3, r3, #7
 8016d2e:	3308      	adds	r3, #8
 8016d30:	9303      	str	r3, [sp, #12]
 8016d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d34:	444b      	add	r3, r9
 8016d36:	9309      	str	r3, [sp, #36]	; 0x24
 8016d38:	e76d      	b.n	8016c16 <_svfiprintf_r+0x4a>
 8016d3a:	fb05 3202 	mla	r2, r5, r2, r3
 8016d3e:	2001      	movs	r0, #1
 8016d40:	460f      	mov	r7, r1
 8016d42:	e7a6      	b.n	8016c92 <_svfiprintf_r+0xc6>
 8016d44:	2300      	movs	r3, #0
 8016d46:	3701      	adds	r7, #1
 8016d48:	9305      	str	r3, [sp, #20]
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	250a      	movs	r5, #10
 8016d4e:	4638      	mov	r0, r7
 8016d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d54:	3a30      	subs	r2, #48	; 0x30
 8016d56:	2a09      	cmp	r2, #9
 8016d58:	d903      	bls.n	8016d62 <_svfiprintf_r+0x196>
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d0c8      	beq.n	8016cf0 <_svfiprintf_r+0x124>
 8016d5e:	9105      	str	r1, [sp, #20]
 8016d60:	e7c6      	b.n	8016cf0 <_svfiprintf_r+0x124>
 8016d62:	fb05 2101 	mla	r1, r5, r1, r2
 8016d66:	2301      	movs	r3, #1
 8016d68:	4607      	mov	r7, r0
 8016d6a:	e7f0      	b.n	8016d4e <_svfiprintf_r+0x182>
 8016d6c:	ab03      	add	r3, sp, #12
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	4622      	mov	r2, r4
 8016d72:	4b11      	ldr	r3, [pc, #68]	; (8016db8 <_svfiprintf_r+0x1ec>)
 8016d74:	a904      	add	r1, sp, #16
 8016d76:	4640      	mov	r0, r8
 8016d78:	f7fb ffc6 	bl	8012d08 <_printf_float>
 8016d7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d80:	4681      	mov	r9, r0
 8016d82:	d1d6      	bne.n	8016d32 <_svfiprintf_r+0x166>
 8016d84:	89a3      	ldrh	r3, [r4, #12]
 8016d86:	065b      	lsls	r3, r3, #25
 8016d88:	f53f af35 	bmi.w	8016bf6 <_svfiprintf_r+0x2a>
 8016d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d8e:	b01d      	add	sp, #116	; 0x74
 8016d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d94:	ab03      	add	r3, sp, #12
 8016d96:	9300      	str	r3, [sp, #0]
 8016d98:	4622      	mov	r2, r4
 8016d9a:	4b07      	ldr	r3, [pc, #28]	; (8016db8 <_svfiprintf_r+0x1ec>)
 8016d9c:	a904      	add	r1, sp, #16
 8016d9e:	4640      	mov	r0, r8
 8016da0:	f7fc fa68 	bl	8013274 <_printf_i>
 8016da4:	e7ea      	b.n	8016d7c <_svfiprintf_r+0x1b0>
 8016da6:	bf00      	nop
 8016da8:	080183d4 	.word	0x080183d4
 8016dac:	080183da 	.word	0x080183da
 8016db0:	080183de 	.word	0x080183de
 8016db4:	08012d09 	.word	0x08012d09
 8016db8:	08016b19 	.word	0x08016b19

08016dbc <_sungetc_r>:
 8016dbc:	b538      	push	{r3, r4, r5, lr}
 8016dbe:	1c4b      	adds	r3, r1, #1
 8016dc0:	4614      	mov	r4, r2
 8016dc2:	d103      	bne.n	8016dcc <_sungetc_r+0x10>
 8016dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8016dc8:	4628      	mov	r0, r5
 8016dca:	bd38      	pop	{r3, r4, r5, pc}
 8016dcc:	8993      	ldrh	r3, [r2, #12]
 8016dce:	f023 0320 	bic.w	r3, r3, #32
 8016dd2:	8193      	strh	r3, [r2, #12]
 8016dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016dd6:	6852      	ldr	r2, [r2, #4]
 8016dd8:	b2cd      	uxtb	r5, r1
 8016dda:	b18b      	cbz	r3, 8016e00 <_sungetc_r+0x44>
 8016ddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016dde:	4293      	cmp	r3, r2
 8016de0:	dd08      	ble.n	8016df4 <_sungetc_r+0x38>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	1e5a      	subs	r2, r3, #1
 8016de6:	6022      	str	r2, [r4, #0]
 8016de8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016dec:	6863      	ldr	r3, [r4, #4]
 8016dee:	3301      	adds	r3, #1
 8016df0:	6063      	str	r3, [r4, #4]
 8016df2:	e7e9      	b.n	8016dc8 <_sungetc_r+0xc>
 8016df4:	4621      	mov	r1, r4
 8016df6:	f000 fd4b 	bl	8017890 <__submore>
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d0f1      	beq.n	8016de2 <_sungetc_r+0x26>
 8016dfe:	e7e1      	b.n	8016dc4 <_sungetc_r+0x8>
 8016e00:	6921      	ldr	r1, [r4, #16]
 8016e02:	6823      	ldr	r3, [r4, #0]
 8016e04:	b151      	cbz	r1, 8016e1c <_sungetc_r+0x60>
 8016e06:	4299      	cmp	r1, r3
 8016e08:	d208      	bcs.n	8016e1c <_sungetc_r+0x60>
 8016e0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016e0e:	42a9      	cmp	r1, r5
 8016e10:	d104      	bne.n	8016e1c <_sungetc_r+0x60>
 8016e12:	3b01      	subs	r3, #1
 8016e14:	3201      	adds	r2, #1
 8016e16:	6023      	str	r3, [r4, #0]
 8016e18:	6062      	str	r2, [r4, #4]
 8016e1a:	e7d5      	b.n	8016dc8 <_sungetc_r+0xc>
 8016e1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e24:	6363      	str	r3, [r4, #52]	; 0x34
 8016e26:	2303      	movs	r3, #3
 8016e28:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e2a:	4623      	mov	r3, r4
 8016e2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	2301      	movs	r3, #1
 8016e34:	e7dc      	b.n	8016df0 <_sungetc_r+0x34>

08016e36 <__ssrefill_r>:
 8016e36:	b510      	push	{r4, lr}
 8016e38:	460c      	mov	r4, r1
 8016e3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016e3c:	b169      	cbz	r1, 8016e5a <__ssrefill_r+0x24>
 8016e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e42:	4299      	cmp	r1, r3
 8016e44:	d001      	beq.n	8016e4a <__ssrefill_r+0x14>
 8016e46:	f7ff fdbf 	bl	80169c8 <_free_r>
 8016e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e4c:	6063      	str	r3, [r4, #4]
 8016e4e:	2000      	movs	r0, #0
 8016e50:	6360      	str	r0, [r4, #52]	; 0x34
 8016e52:	b113      	cbz	r3, 8016e5a <__ssrefill_r+0x24>
 8016e54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e56:	6023      	str	r3, [r4, #0]
 8016e58:	bd10      	pop	{r4, pc}
 8016e5a:	6923      	ldr	r3, [r4, #16]
 8016e5c:	6023      	str	r3, [r4, #0]
 8016e5e:	2300      	movs	r3, #0
 8016e60:	6063      	str	r3, [r4, #4]
 8016e62:	89a3      	ldrh	r3, [r4, #12]
 8016e64:	f043 0320 	orr.w	r3, r3, #32
 8016e68:	81a3      	strh	r3, [r4, #12]
 8016e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e6e:	e7f3      	b.n	8016e58 <__ssrefill_r+0x22>

08016e70 <__ssvfiscanf_r>:
 8016e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e74:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016e78:	460c      	mov	r4, r1
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	9144      	str	r1, [sp, #272]	; 0x110
 8016e7e:	9145      	str	r1, [sp, #276]	; 0x114
 8016e80:	499f      	ldr	r1, [pc, #636]	; (8017100 <__ssvfiscanf_r+0x290>)
 8016e82:	91a0      	str	r1, [sp, #640]	; 0x280
 8016e84:	f10d 0804 	add.w	r8, sp, #4
 8016e88:	499e      	ldr	r1, [pc, #632]	; (8017104 <__ssvfiscanf_r+0x294>)
 8016e8a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017108 <__ssvfiscanf_r+0x298>
 8016e8e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016e92:	4606      	mov	r6, r0
 8016e94:	4692      	mov	sl, r2
 8016e96:	91a1      	str	r1, [sp, #644]	; 0x284
 8016e98:	9300      	str	r3, [sp, #0]
 8016e9a:	270a      	movs	r7, #10
 8016e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	f000 812a 	beq.w	80170fa <__ssvfiscanf_r+0x28a>
 8016ea6:	4655      	mov	r5, sl
 8016ea8:	f7ff f8d2 	bl	8016050 <__locale_ctype_ptr>
 8016eac:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016eb0:	4458      	add	r0, fp
 8016eb2:	7843      	ldrb	r3, [r0, #1]
 8016eb4:	f013 0308 	ands.w	r3, r3, #8
 8016eb8:	d01c      	beq.n	8016ef4 <__ssvfiscanf_r+0x84>
 8016eba:	6863      	ldr	r3, [r4, #4]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	dd12      	ble.n	8016ee6 <__ssvfiscanf_r+0x76>
 8016ec0:	f7ff f8c6 	bl	8016050 <__locale_ctype_ptr>
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	781a      	ldrb	r2, [r3, #0]
 8016ec8:	4410      	add	r0, r2
 8016eca:	7842      	ldrb	r2, [r0, #1]
 8016ecc:	0712      	lsls	r2, r2, #28
 8016ece:	d401      	bmi.n	8016ed4 <__ssvfiscanf_r+0x64>
 8016ed0:	46aa      	mov	sl, r5
 8016ed2:	e7e3      	b.n	8016e9c <__ssvfiscanf_r+0x2c>
 8016ed4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016ed6:	3201      	adds	r2, #1
 8016ed8:	9245      	str	r2, [sp, #276]	; 0x114
 8016eda:	6862      	ldr	r2, [r4, #4]
 8016edc:	3301      	adds	r3, #1
 8016ede:	3a01      	subs	r2, #1
 8016ee0:	6062      	str	r2, [r4, #4]
 8016ee2:	6023      	str	r3, [r4, #0]
 8016ee4:	e7e9      	b.n	8016eba <__ssvfiscanf_r+0x4a>
 8016ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ee8:	4621      	mov	r1, r4
 8016eea:	4630      	mov	r0, r6
 8016eec:	4798      	blx	r3
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d0e6      	beq.n	8016ec0 <__ssvfiscanf_r+0x50>
 8016ef2:	e7ed      	b.n	8016ed0 <__ssvfiscanf_r+0x60>
 8016ef4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016ef8:	f040 8082 	bne.w	8017000 <__ssvfiscanf_r+0x190>
 8016efc:	9343      	str	r3, [sp, #268]	; 0x10c
 8016efe:	9341      	str	r3, [sp, #260]	; 0x104
 8016f00:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016f04:	2b2a      	cmp	r3, #42	; 0x2a
 8016f06:	d103      	bne.n	8016f10 <__ssvfiscanf_r+0xa0>
 8016f08:	2310      	movs	r3, #16
 8016f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8016f0c:	f10a 0502 	add.w	r5, sl, #2
 8016f10:	46aa      	mov	sl, r5
 8016f12:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016f16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016f1a:	2a09      	cmp	r2, #9
 8016f1c:	d922      	bls.n	8016f64 <__ssvfiscanf_r+0xf4>
 8016f1e:	2203      	movs	r2, #3
 8016f20:	4879      	ldr	r0, [pc, #484]	; (8017108 <__ssvfiscanf_r+0x298>)
 8016f22:	f7e9 f975 	bl	8000210 <memchr>
 8016f26:	b138      	cbz	r0, 8016f38 <__ssvfiscanf_r+0xc8>
 8016f28:	eba0 0309 	sub.w	r3, r0, r9
 8016f2c:	2001      	movs	r0, #1
 8016f2e:	4098      	lsls	r0, r3
 8016f30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f32:	4318      	orrs	r0, r3
 8016f34:	9041      	str	r0, [sp, #260]	; 0x104
 8016f36:	46aa      	mov	sl, r5
 8016f38:	f89a 3000 	ldrb.w	r3, [sl]
 8016f3c:	2b67      	cmp	r3, #103	; 0x67
 8016f3e:	f10a 0501 	add.w	r5, sl, #1
 8016f42:	d82b      	bhi.n	8016f9c <__ssvfiscanf_r+0x12c>
 8016f44:	2b65      	cmp	r3, #101	; 0x65
 8016f46:	f080 809f 	bcs.w	8017088 <__ssvfiscanf_r+0x218>
 8016f4a:	2b47      	cmp	r3, #71	; 0x47
 8016f4c:	d810      	bhi.n	8016f70 <__ssvfiscanf_r+0x100>
 8016f4e:	2b45      	cmp	r3, #69	; 0x45
 8016f50:	f080 809a 	bcs.w	8017088 <__ssvfiscanf_r+0x218>
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d06c      	beq.n	8017032 <__ssvfiscanf_r+0x1c2>
 8016f58:	2b25      	cmp	r3, #37	; 0x25
 8016f5a:	d051      	beq.n	8017000 <__ssvfiscanf_r+0x190>
 8016f5c:	2303      	movs	r3, #3
 8016f5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016f60:	9742      	str	r7, [sp, #264]	; 0x108
 8016f62:	e027      	b.n	8016fb4 <__ssvfiscanf_r+0x144>
 8016f64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016f66:	fb07 1303 	mla	r3, r7, r3, r1
 8016f6a:	3b30      	subs	r3, #48	; 0x30
 8016f6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f6e:	e7cf      	b.n	8016f10 <__ssvfiscanf_r+0xa0>
 8016f70:	2b5b      	cmp	r3, #91	; 0x5b
 8016f72:	d06a      	beq.n	801704a <__ssvfiscanf_r+0x1da>
 8016f74:	d80c      	bhi.n	8016f90 <__ssvfiscanf_r+0x120>
 8016f76:	2b58      	cmp	r3, #88	; 0x58
 8016f78:	d1f0      	bne.n	8016f5c <__ssvfiscanf_r+0xec>
 8016f7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f80:	9241      	str	r2, [sp, #260]	; 0x104
 8016f82:	2210      	movs	r2, #16
 8016f84:	9242      	str	r2, [sp, #264]	; 0x108
 8016f86:	2b6e      	cmp	r3, #110	; 0x6e
 8016f88:	bf8c      	ite	hi
 8016f8a:	2304      	movhi	r3, #4
 8016f8c:	2303      	movls	r3, #3
 8016f8e:	e010      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 8016f90:	2b63      	cmp	r3, #99	; 0x63
 8016f92:	d065      	beq.n	8017060 <__ssvfiscanf_r+0x1f0>
 8016f94:	2b64      	cmp	r3, #100	; 0x64
 8016f96:	d1e1      	bne.n	8016f5c <__ssvfiscanf_r+0xec>
 8016f98:	9742      	str	r7, [sp, #264]	; 0x108
 8016f9a:	e7f4      	b.n	8016f86 <__ssvfiscanf_r+0x116>
 8016f9c:	2b70      	cmp	r3, #112	; 0x70
 8016f9e:	d04b      	beq.n	8017038 <__ssvfiscanf_r+0x1c8>
 8016fa0:	d826      	bhi.n	8016ff0 <__ssvfiscanf_r+0x180>
 8016fa2:	2b6e      	cmp	r3, #110	; 0x6e
 8016fa4:	d062      	beq.n	801706c <__ssvfiscanf_r+0x1fc>
 8016fa6:	d84c      	bhi.n	8017042 <__ssvfiscanf_r+0x1d2>
 8016fa8:	2b69      	cmp	r3, #105	; 0x69
 8016faa:	d1d7      	bne.n	8016f5c <__ssvfiscanf_r+0xec>
 8016fac:	2300      	movs	r3, #0
 8016fae:	9342      	str	r3, [sp, #264]	; 0x108
 8016fb0:	2303      	movs	r3, #3
 8016fb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8016fb4:	6863      	ldr	r3, [r4, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	dd68      	ble.n	801708c <__ssvfiscanf_r+0x21c>
 8016fba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016fbc:	0659      	lsls	r1, r3, #25
 8016fbe:	d407      	bmi.n	8016fd0 <__ssvfiscanf_r+0x160>
 8016fc0:	f7ff f846 	bl	8016050 <__locale_ctype_ptr>
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	781a      	ldrb	r2, [r3, #0]
 8016fc8:	4410      	add	r0, r2
 8016fca:	7842      	ldrb	r2, [r0, #1]
 8016fcc:	0712      	lsls	r2, r2, #28
 8016fce:	d464      	bmi.n	801709a <__ssvfiscanf_r+0x22a>
 8016fd0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016fd2:	2b02      	cmp	r3, #2
 8016fd4:	dc73      	bgt.n	80170be <__ssvfiscanf_r+0x24e>
 8016fd6:	466b      	mov	r3, sp
 8016fd8:	4622      	mov	r2, r4
 8016fda:	a941      	add	r1, sp, #260	; 0x104
 8016fdc:	4630      	mov	r0, r6
 8016fde:	f000 f9d7 	bl	8017390 <_scanf_chars>
 8016fe2:	2801      	cmp	r0, #1
 8016fe4:	f000 8089 	beq.w	80170fa <__ssvfiscanf_r+0x28a>
 8016fe8:	2802      	cmp	r0, #2
 8016fea:	f47f af71 	bne.w	8016ed0 <__ssvfiscanf_r+0x60>
 8016fee:	e01d      	b.n	801702c <__ssvfiscanf_r+0x1bc>
 8016ff0:	2b75      	cmp	r3, #117	; 0x75
 8016ff2:	d0d1      	beq.n	8016f98 <__ssvfiscanf_r+0x128>
 8016ff4:	2b78      	cmp	r3, #120	; 0x78
 8016ff6:	d0c0      	beq.n	8016f7a <__ssvfiscanf_r+0x10a>
 8016ff8:	2b73      	cmp	r3, #115	; 0x73
 8016ffa:	d1af      	bne.n	8016f5c <__ssvfiscanf_r+0xec>
 8016ffc:	2302      	movs	r3, #2
 8016ffe:	e7d8      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 8017000:	6863      	ldr	r3, [r4, #4]
 8017002:	2b00      	cmp	r3, #0
 8017004:	dd0c      	ble.n	8017020 <__ssvfiscanf_r+0x1b0>
 8017006:	6823      	ldr	r3, [r4, #0]
 8017008:	781a      	ldrb	r2, [r3, #0]
 801700a:	455a      	cmp	r2, fp
 801700c:	d175      	bne.n	80170fa <__ssvfiscanf_r+0x28a>
 801700e:	3301      	adds	r3, #1
 8017010:	6862      	ldr	r2, [r4, #4]
 8017012:	6023      	str	r3, [r4, #0]
 8017014:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017016:	3a01      	subs	r2, #1
 8017018:	3301      	adds	r3, #1
 801701a:	6062      	str	r2, [r4, #4]
 801701c:	9345      	str	r3, [sp, #276]	; 0x114
 801701e:	e757      	b.n	8016ed0 <__ssvfiscanf_r+0x60>
 8017020:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017022:	4621      	mov	r1, r4
 8017024:	4630      	mov	r0, r6
 8017026:	4798      	blx	r3
 8017028:	2800      	cmp	r0, #0
 801702a:	d0ec      	beq.n	8017006 <__ssvfiscanf_r+0x196>
 801702c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801702e:	2800      	cmp	r0, #0
 8017030:	d159      	bne.n	80170e6 <__ssvfiscanf_r+0x276>
 8017032:	f04f 30ff 	mov.w	r0, #4294967295
 8017036:	e05c      	b.n	80170f2 <__ssvfiscanf_r+0x282>
 8017038:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801703a:	f042 0220 	orr.w	r2, r2, #32
 801703e:	9241      	str	r2, [sp, #260]	; 0x104
 8017040:	e79b      	b.n	8016f7a <__ssvfiscanf_r+0x10a>
 8017042:	2308      	movs	r3, #8
 8017044:	9342      	str	r3, [sp, #264]	; 0x108
 8017046:	2304      	movs	r3, #4
 8017048:	e7b3      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 801704a:	4629      	mov	r1, r5
 801704c:	4640      	mov	r0, r8
 801704e:	f000 fb4f 	bl	80176f0 <__sccl>
 8017052:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017058:	9341      	str	r3, [sp, #260]	; 0x104
 801705a:	4605      	mov	r5, r0
 801705c:	2301      	movs	r3, #1
 801705e:	e7a8      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 8017060:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017066:	9341      	str	r3, [sp, #260]	; 0x104
 8017068:	2300      	movs	r3, #0
 801706a:	e7a2      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 801706c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801706e:	06c3      	lsls	r3, r0, #27
 8017070:	f53f af2e 	bmi.w	8016ed0 <__ssvfiscanf_r+0x60>
 8017074:	9b00      	ldr	r3, [sp, #0]
 8017076:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017078:	1d19      	adds	r1, r3, #4
 801707a:	9100      	str	r1, [sp, #0]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	07c0      	lsls	r0, r0, #31
 8017080:	bf4c      	ite	mi
 8017082:	801a      	strhmi	r2, [r3, #0]
 8017084:	601a      	strpl	r2, [r3, #0]
 8017086:	e723      	b.n	8016ed0 <__ssvfiscanf_r+0x60>
 8017088:	2305      	movs	r3, #5
 801708a:	e792      	b.n	8016fb2 <__ssvfiscanf_r+0x142>
 801708c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801708e:	4621      	mov	r1, r4
 8017090:	4630      	mov	r0, r6
 8017092:	4798      	blx	r3
 8017094:	2800      	cmp	r0, #0
 8017096:	d090      	beq.n	8016fba <__ssvfiscanf_r+0x14a>
 8017098:	e7c8      	b.n	801702c <__ssvfiscanf_r+0x1bc>
 801709a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801709c:	3201      	adds	r2, #1
 801709e:	9245      	str	r2, [sp, #276]	; 0x114
 80170a0:	6862      	ldr	r2, [r4, #4]
 80170a2:	3a01      	subs	r2, #1
 80170a4:	2a00      	cmp	r2, #0
 80170a6:	6062      	str	r2, [r4, #4]
 80170a8:	dd02      	ble.n	80170b0 <__ssvfiscanf_r+0x240>
 80170aa:	3301      	adds	r3, #1
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	e787      	b.n	8016fc0 <__ssvfiscanf_r+0x150>
 80170b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170b2:	4621      	mov	r1, r4
 80170b4:	4630      	mov	r0, r6
 80170b6:	4798      	blx	r3
 80170b8:	2800      	cmp	r0, #0
 80170ba:	d081      	beq.n	8016fc0 <__ssvfiscanf_r+0x150>
 80170bc:	e7b6      	b.n	801702c <__ssvfiscanf_r+0x1bc>
 80170be:	2b04      	cmp	r3, #4
 80170c0:	dc06      	bgt.n	80170d0 <__ssvfiscanf_r+0x260>
 80170c2:	466b      	mov	r3, sp
 80170c4:	4622      	mov	r2, r4
 80170c6:	a941      	add	r1, sp, #260	; 0x104
 80170c8:	4630      	mov	r0, r6
 80170ca:	f000 f9c5 	bl	8017458 <_scanf_i>
 80170ce:	e788      	b.n	8016fe2 <__ssvfiscanf_r+0x172>
 80170d0:	4b0e      	ldr	r3, [pc, #56]	; (801710c <__ssvfiscanf_r+0x29c>)
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	f43f aefc 	beq.w	8016ed0 <__ssvfiscanf_r+0x60>
 80170d8:	466b      	mov	r3, sp
 80170da:	4622      	mov	r2, r4
 80170dc:	a941      	add	r1, sp, #260	; 0x104
 80170de:	4630      	mov	r0, r6
 80170e0:	f7fc f9da 	bl	8013498 <_scanf_float>
 80170e4:	e77d      	b.n	8016fe2 <__ssvfiscanf_r+0x172>
 80170e6:	89a3      	ldrh	r3, [r4, #12]
 80170e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80170ec:	bf18      	it	ne
 80170ee:	f04f 30ff 	movne.w	r0, #4294967295
 80170f2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80170f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80170fc:	e7f9      	b.n	80170f2 <__ssvfiscanf_r+0x282>
 80170fe:	bf00      	nop
 8017100:	08016dbd 	.word	0x08016dbd
 8017104:	08016e37 	.word	0x08016e37
 8017108:	080183da 	.word	0x080183da
 801710c:	08013499 	.word	0x08013499

08017110 <__sfputc_r>:
 8017110:	6893      	ldr	r3, [r2, #8]
 8017112:	3b01      	subs	r3, #1
 8017114:	2b00      	cmp	r3, #0
 8017116:	b410      	push	{r4}
 8017118:	6093      	str	r3, [r2, #8]
 801711a:	da08      	bge.n	801712e <__sfputc_r+0x1e>
 801711c:	6994      	ldr	r4, [r2, #24]
 801711e:	42a3      	cmp	r3, r4
 8017120:	db01      	blt.n	8017126 <__sfputc_r+0x16>
 8017122:	290a      	cmp	r1, #10
 8017124:	d103      	bne.n	801712e <__sfputc_r+0x1e>
 8017126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801712a:	f7fd bbc7 	b.w	80148bc <__swbuf_r>
 801712e:	6813      	ldr	r3, [r2, #0]
 8017130:	1c58      	adds	r0, r3, #1
 8017132:	6010      	str	r0, [r2, #0]
 8017134:	7019      	strb	r1, [r3, #0]
 8017136:	4608      	mov	r0, r1
 8017138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801713c:	4770      	bx	lr

0801713e <__sfputs_r>:
 801713e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017140:	4606      	mov	r6, r0
 8017142:	460f      	mov	r7, r1
 8017144:	4614      	mov	r4, r2
 8017146:	18d5      	adds	r5, r2, r3
 8017148:	42ac      	cmp	r4, r5
 801714a:	d101      	bne.n	8017150 <__sfputs_r+0x12>
 801714c:	2000      	movs	r0, #0
 801714e:	e007      	b.n	8017160 <__sfputs_r+0x22>
 8017150:	463a      	mov	r2, r7
 8017152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017156:	4630      	mov	r0, r6
 8017158:	f7ff ffda 	bl	8017110 <__sfputc_r>
 801715c:	1c43      	adds	r3, r0, #1
 801715e:	d1f3      	bne.n	8017148 <__sfputs_r+0xa>
 8017160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017164 <_vfiprintf_r>:
 8017164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017168:	460c      	mov	r4, r1
 801716a:	b09d      	sub	sp, #116	; 0x74
 801716c:	4617      	mov	r7, r2
 801716e:	461d      	mov	r5, r3
 8017170:	4606      	mov	r6, r0
 8017172:	b118      	cbz	r0, 801717c <_vfiprintf_r+0x18>
 8017174:	6983      	ldr	r3, [r0, #24]
 8017176:	b90b      	cbnz	r3, 801717c <_vfiprintf_r+0x18>
 8017178:	f7fe fbb6 	bl	80158e8 <__sinit>
 801717c:	4b7c      	ldr	r3, [pc, #496]	; (8017370 <_vfiprintf_r+0x20c>)
 801717e:	429c      	cmp	r4, r3
 8017180:	d158      	bne.n	8017234 <_vfiprintf_r+0xd0>
 8017182:	6874      	ldr	r4, [r6, #4]
 8017184:	89a3      	ldrh	r3, [r4, #12]
 8017186:	0718      	lsls	r0, r3, #28
 8017188:	d55e      	bpl.n	8017248 <_vfiprintf_r+0xe4>
 801718a:	6923      	ldr	r3, [r4, #16]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d05b      	beq.n	8017248 <_vfiprintf_r+0xe4>
 8017190:	2300      	movs	r3, #0
 8017192:	9309      	str	r3, [sp, #36]	; 0x24
 8017194:	2320      	movs	r3, #32
 8017196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801719a:	2330      	movs	r3, #48	; 0x30
 801719c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171a0:	9503      	str	r5, [sp, #12]
 80171a2:	f04f 0b01 	mov.w	fp, #1
 80171a6:	46b8      	mov	r8, r7
 80171a8:	4645      	mov	r5, r8
 80171aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80171ae:	b10b      	cbz	r3, 80171b4 <_vfiprintf_r+0x50>
 80171b0:	2b25      	cmp	r3, #37	; 0x25
 80171b2:	d154      	bne.n	801725e <_vfiprintf_r+0xfa>
 80171b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80171b8:	d00b      	beq.n	80171d2 <_vfiprintf_r+0x6e>
 80171ba:	4653      	mov	r3, sl
 80171bc:	463a      	mov	r2, r7
 80171be:	4621      	mov	r1, r4
 80171c0:	4630      	mov	r0, r6
 80171c2:	f7ff ffbc 	bl	801713e <__sfputs_r>
 80171c6:	3001      	adds	r0, #1
 80171c8:	f000 80c2 	beq.w	8017350 <_vfiprintf_r+0x1ec>
 80171cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ce:	4453      	add	r3, sl
 80171d0:	9309      	str	r3, [sp, #36]	; 0x24
 80171d2:	f898 3000 	ldrb.w	r3, [r8]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	f000 80ba 	beq.w	8017350 <_vfiprintf_r+0x1ec>
 80171dc:	2300      	movs	r3, #0
 80171de:	f04f 32ff 	mov.w	r2, #4294967295
 80171e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171e6:	9304      	str	r3, [sp, #16]
 80171e8:	9307      	str	r3, [sp, #28]
 80171ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171ee:	931a      	str	r3, [sp, #104]	; 0x68
 80171f0:	46a8      	mov	r8, r5
 80171f2:	2205      	movs	r2, #5
 80171f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80171f8:	485e      	ldr	r0, [pc, #376]	; (8017374 <_vfiprintf_r+0x210>)
 80171fa:	f7e9 f809 	bl	8000210 <memchr>
 80171fe:	9b04      	ldr	r3, [sp, #16]
 8017200:	bb78      	cbnz	r0, 8017262 <_vfiprintf_r+0xfe>
 8017202:	06d9      	lsls	r1, r3, #27
 8017204:	bf44      	itt	mi
 8017206:	2220      	movmi	r2, #32
 8017208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801720c:	071a      	lsls	r2, r3, #28
 801720e:	bf44      	itt	mi
 8017210:	222b      	movmi	r2, #43	; 0x2b
 8017212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017216:	782a      	ldrb	r2, [r5, #0]
 8017218:	2a2a      	cmp	r2, #42	; 0x2a
 801721a:	d02a      	beq.n	8017272 <_vfiprintf_r+0x10e>
 801721c:	9a07      	ldr	r2, [sp, #28]
 801721e:	46a8      	mov	r8, r5
 8017220:	2000      	movs	r0, #0
 8017222:	250a      	movs	r5, #10
 8017224:	4641      	mov	r1, r8
 8017226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801722a:	3b30      	subs	r3, #48	; 0x30
 801722c:	2b09      	cmp	r3, #9
 801722e:	d969      	bls.n	8017304 <_vfiprintf_r+0x1a0>
 8017230:	b360      	cbz	r0, 801728c <_vfiprintf_r+0x128>
 8017232:	e024      	b.n	801727e <_vfiprintf_r+0x11a>
 8017234:	4b50      	ldr	r3, [pc, #320]	; (8017378 <_vfiprintf_r+0x214>)
 8017236:	429c      	cmp	r4, r3
 8017238:	d101      	bne.n	801723e <_vfiprintf_r+0xda>
 801723a:	68b4      	ldr	r4, [r6, #8]
 801723c:	e7a2      	b.n	8017184 <_vfiprintf_r+0x20>
 801723e:	4b4f      	ldr	r3, [pc, #316]	; (801737c <_vfiprintf_r+0x218>)
 8017240:	429c      	cmp	r4, r3
 8017242:	bf08      	it	eq
 8017244:	68f4      	ldreq	r4, [r6, #12]
 8017246:	e79d      	b.n	8017184 <_vfiprintf_r+0x20>
 8017248:	4621      	mov	r1, r4
 801724a:	4630      	mov	r0, r6
 801724c:	f7fd fb9a 	bl	8014984 <__swsetup_r>
 8017250:	2800      	cmp	r0, #0
 8017252:	d09d      	beq.n	8017190 <_vfiprintf_r+0x2c>
 8017254:	f04f 30ff 	mov.w	r0, #4294967295
 8017258:	b01d      	add	sp, #116	; 0x74
 801725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801725e:	46a8      	mov	r8, r5
 8017260:	e7a2      	b.n	80171a8 <_vfiprintf_r+0x44>
 8017262:	4a44      	ldr	r2, [pc, #272]	; (8017374 <_vfiprintf_r+0x210>)
 8017264:	1a80      	subs	r0, r0, r2
 8017266:	fa0b f000 	lsl.w	r0, fp, r0
 801726a:	4318      	orrs	r0, r3
 801726c:	9004      	str	r0, [sp, #16]
 801726e:	4645      	mov	r5, r8
 8017270:	e7be      	b.n	80171f0 <_vfiprintf_r+0x8c>
 8017272:	9a03      	ldr	r2, [sp, #12]
 8017274:	1d11      	adds	r1, r2, #4
 8017276:	6812      	ldr	r2, [r2, #0]
 8017278:	9103      	str	r1, [sp, #12]
 801727a:	2a00      	cmp	r2, #0
 801727c:	db01      	blt.n	8017282 <_vfiprintf_r+0x11e>
 801727e:	9207      	str	r2, [sp, #28]
 8017280:	e004      	b.n	801728c <_vfiprintf_r+0x128>
 8017282:	4252      	negs	r2, r2
 8017284:	f043 0302 	orr.w	r3, r3, #2
 8017288:	9207      	str	r2, [sp, #28]
 801728a:	9304      	str	r3, [sp, #16]
 801728c:	f898 3000 	ldrb.w	r3, [r8]
 8017290:	2b2e      	cmp	r3, #46	; 0x2e
 8017292:	d10e      	bne.n	80172b2 <_vfiprintf_r+0x14e>
 8017294:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017298:	2b2a      	cmp	r3, #42	; 0x2a
 801729a:	d138      	bne.n	801730e <_vfiprintf_r+0x1aa>
 801729c:	9b03      	ldr	r3, [sp, #12]
 801729e:	1d1a      	adds	r2, r3, #4
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	9203      	str	r2, [sp, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	bfb8      	it	lt
 80172a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80172ac:	f108 0802 	add.w	r8, r8, #2
 80172b0:	9305      	str	r3, [sp, #20]
 80172b2:	4d33      	ldr	r5, [pc, #204]	; (8017380 <_vfiprintf_r+0x21c>)
 80172b4:	f898 1000 	ldrb.w	r1, [r8]
 80172b8:	2203      	movs	r2, #3
 80172ba:	4628      	mov	r0, r5
 80172bc:	f7e8 ffa8 	bl	8000210 <memchr>
 80172c0:	b140      	cbz	r0, 80172d4 <_vfiprintf_r+0x170>
 80172c2:	2340      	movs	r3, #64	; 0x40
 80172c4:	1b40      	subs	r0, r0, r5
 80172c6:	fa03 f000 	lsl.w	r0, r3, r0
 80172ca:	9b04      	ldr	r3, [sp, #16]
 80172cc:	4303      	orrs	r3, r0
 80172ce:	f108 0801 	add.w	r8, r8, #1
 80172d2:	9304      	str	r3, [sp, #16]
 80172d4:	f898 1000 	ldrb.w	r1, [r8]
 80172d8:	482a      	ldr	r0, [pc, #168]	; (8017384 <_vfiprintf_r+0x220>)
 80172da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172de:	2206      	movs	r2, #6
 80172e0:	f108 0701 	add.w	r7, r8, #1
 80172e4:	f7e8 ff94 	bl	8000210 <memchr>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d037      	beq.n	801735c <_vfiprintf_r+0x1f8>
 80172ec:	4b26      	ldr	r3, [pc, #152]	; (8017388 <_vfiprintf_r+0x224>)
 80172ee:	bb1b      	cbnz	r3, 8017338 <_vfiprintf_r+0x1d4>
 80172f0:	9b03      	ldr	r3, [sp, #12]
 80172f2:	3307      	adds	r3, #7
 80172f4:	f023 0307 	bic.w	r3, r3, #7
 80172f8:	3308      	adds	r3, #8
 80172fa:	9303      	str	r3, [sp, #12]
 80172fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172fe:	444b      	add	r3, r9
 8017300:	9309      	str	r3, [sp, #36]	; 0x24
 8017302:	e750      	b.n	80171a6 <_vfiprintf_r+0x42>
 8017304:	fb05 3202 	mla	r2, r5, r2, r3
 8017308:	2001      	movs	r0, #1
 801730a:	4688      	mov	r8, r1
 801730c:	e78a      	b.n	8017224 <_vfiprintf_r+0xc0>
 801730e:	2300      	movs	r3, #0
 8017310:	f108 0801 	add.w	r8, r8, #1
 8017314:	9305      	str	r3, [sp, #20]
 8017316:	4619      	mov	r1, r3
 8017318:	250a      	movs	r5, #10
 801731a:	4640      	mov	r0, r8
 801731c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017320:	3a30      	subs	r2, #48	; 0x30
 8017322:	2a09      	cmp	r2, #9
 8017324:	d903      	bls.n	801732e <_vfiprintf_r+0x1ca>
 8017326:	2b00      	cmp	r3, #0
 8017328:	d0c3      	beq.n	80172b2 <_vfiprintf_r+0x14e>
 801732a:	9105      	str	r1, [sp, #20]
 801732c:	e7c1      	b.n	80172b2 <_vfiprintf_r+0x14e>
 801732e:	fb05 2101 	mla	r1, r5, r1, r2
 8017332:	2301      	movs	r3, #1
 8017334:	4680      	mov	r8, r0
 8017336:	e7f0      	b.n	801731a <_vfiprintf_r+0x1b6>
 8017338:	ab03      	add	r3, sp, #12
 801733a:	9300      	str	r3, [sp, #0]
 801733c:	4622      	mov	r2, r4
 801733e:	4b13      	ldr	r3, [pc, #76]	; (801738c <_vfiprintf_r+0x228>)
 8017340:	a904      	add	r1, sp, #16
 8017342:	4630      	mov	r0, r6
 8017344:	f7fb fce0 	bl	8012d08 <_printf_float>
 8017348:	f1b0 3fff 	cmp.w	r0, #4294967295
 801734c:	4681      	mov	r9, r0
 801734e:	d1d5      	bne.n	80172fc <_vfiprintf_r+0x198>
 8017350:	89a3      	ldrh	r3, [r4, #12]
 8017352:	065b      	lsls	r3, r3, #25
 8017354:	f53f af7e 	bmi.w	8017254 <_vfiprintf_r+0xf0>
 8017358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801735a:	e77d      	b.n	8017258 <_vfiprintf_r+0xf4>
 801735c:	ab03      	add	r3, sp, #12
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	4622      	mov	r2, r4
 8017362:	4b0a      	ldr	r3, [pc, #40]	; (801738c <_vfiprintf_r+0x228>)
 8017364:	a904      	add	r1, sp, #16
 8017366:	4630      	mov	r0, r6
 8017368:	f7fb ff84 	bl	8013274 <_printf_i>
 801736c:	e7ec      	b.n	8017348 <_vfiprintf_r+0x1e4>
 801736e:	bf00      	nop
 8017370:	08018288 	.word	0x08018288
 8017374:	080183d4 	.word	0x080183d4
 8017378:	080182a8 	.word	0x080182a8
 801737c:	08018268 	.word	0x08018268
 8017380:	080183da 	.word	0x080183da
 8017384:	080183de 	.word	0x080183de
 8017388:	08012d09 	.word	0x08012d09
 801738c:	0801713f 	.word	0x0801713f

08017390 <_scanf_chars>:
 8017390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017394:	4615      	mov	r5, r2
 8017396:	688a      	ldr	r2, [r1, #8]
 8017398:	4680      	mov	r8, r0
 801739a:	460c      	mov	r4, r1
 801739c:	b932      	cbnz	r2, 80173ac <_scanf_chars+0x1c>
 801739e:	698a      	ldr	r2, [r1, #24]
 80173a0:	2a00      	cmp	r2, #0
 80173a2:	bf14      	ite	ne
 80173a4:	f04f 32ff 	movne.w	r2, #4294967295
 80173a8:	2201      	moveq	r2, #1
 80173aa:	608a      	str	r2, [r1, #8]
 80173ac:	6822      	ldr	r2, [r4, #0]
 80173ae:	06d1      	lsls	r1, r2, #27
 80173b0:	bf5f      	itttt	pl
 80173b2:	681a      	ldrpl	r2, [r3, #0]
 80173b4:	1d11      	addpl	r1, r2, #4
 80173b6:	6019      	strpl	r1, [r3, #0]
 80173b8:	6817      	ldrpl	r7, [r2, #0]
 80173ba:	2600      	movs	r6, #0
 80173bc:	69a3      	ldr	r3, [r4, #24]
 80173be:	b1db      	cbz	r3, 80173f8 <_scanf_chars+0x68>
 80173c0:	2b01      	cmp	r3, #1
 80173c2:	d107      	bne.n	80173d4 <_scanf_chars+0x44>
 80173c4:	682b      	ldr	r3, [r5, #0]
 80173c6:	6962      	ldr	r2, [r4, #20]
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	5cd3      	ldrb	r3, [r2, r3]
 80173cc:	b9a3      	cbnz	r3, 80173f8 <_scanf_chars+0x68>
 80173ce:	2e00      	cmp	r6, #0
 80173d0:	d132      	bne.n	8017438 <_scanf_chars+0xa8>
 80173d2:	e006      	b.n	80173e2 <_scanf_chars+0x52>
 80173d4:	2b02      	cmp	r3, #2
 80173d6:	d007      	beq.n	80173e8 <_scanf_chars+0x58>
 80173d8:	2e00      	cmp	r6, #0
 80173da:	d12d      	bne.n	8017438 <_scanf_chars+0xa8>
 80173dc:	69a3      	ldr	r3, [r4, #24]
 80173de:	2b01      	cmp	r3, #1
 80173e0:	d12a      	bne.n	8017438 <_scanf_chars+0xa8>
 80173e2:	2001      	movs	r0, #1
 80173e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e8:	f7fe fe32 	bl	8016050 <__locale_ctype_ptr>
 80173ec:	682b      	ldr	r3, [r5, #0]
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	4418      	add	r0, r3
 80173f2:	7843      	ldrb	r3, [r0, #1]
 80173f4:	071b      	lsls	r3, r3, #28
 80173f6:	d4ef      	bmi.n	80173d8 <_scanf_chars+0x48>
 80173f8:	6823      	ldr	r3, [r4, #0]
 80173fa:	06da      	lsls	r2, r3, #27
 80173fc:	bf5e      	ittt	pl
 80173fe:	682b      	ldrpl	r3, [r5, #0]
 8017400:	781b      	ldrbpl	r3, [r3, #0]
 8017402:	703b      	strbpl	r3, [r7, #0]
 8017404:	682a      	ldr	r2, [r5, #0]
 8017406:	686b      	ldr	r3, [r5, #4]
 8017408:	f102 0201 	add.w	r2, r2, #1
 801740c:	602a      	str	r2, [r5, #0]
 801740e:	68a2      	ldr	r2, [r4, #8]
 8017410:	f103 33ff 	add.w	r3, r3, #4294967295
 8017414:	f102 32ff 	add.w	r2, r2, #4294967295
 8017418:	606b      	str	r3, [r5, #4]
 801741a:	f106 0601 	add.w	r6, r6, #1
 801741e:	bf58      	it	pl
 8017420:	3701      	addpl	r7, #1
 8017422:	60a2      	str	r2, [r4, #8]
 8017424:	b142      	cbz	r2, 8017438 <_scanf_chars+0xa8>
 8017426:	2b00      	cmp	r3, #0
 8017428:	dcc8      	bgt.n	80173bc <_scanf_chars+0x2c>
 801742a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801742e:	4629      	mov	r1, r5
 8017430:	4640      	mov	r0, r8
 8017432:	4798      	blx	r3
 8017434:	2800      	cmp	r0, #0
 8017436:	d0c1      	beq.n	80173bc <_scanf_chars+0x2c>
 8017438:	6823      	ldr	r3, [r4, #0]
 801743a:	f013 0310 	ands.w	r3, r3, #16
 801743e:	d105      	bne.n	801744c <_scanf_chars+0xbc>
 8017440:	68e2      	ldr	r2, [r4, #12]
 8017442:	3201      	adds	r2, #1
 8017444:	60e2      	str	r2, [r4, #12]
 8017446:	69a2      	ldr	r2, [r4, #24]
 8017448:	b102      	cbz	r2, 801744c <_scanf_chars+0xbc>
 801744a:	703b      	strb	r3, [r7, #0]
 801744c:	6923      	ldr	r3, [r4, #16]
 801744e:	441e      	add	r6, r3
 8017450:	6126      	str	r6, [r4, #16]
 8017452:	2000      	movs	r0, #0
 8017454:	e7c6      	b.n	80173e4 <_scanf_chars+0x54>
	...

08017458 <_scanf_i>:
 8017458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801745c:	469a      	mov	sl, r3
 801745e:	4b74      	ldr	r3, [pc, #464]	; (8017630 <_scanf_i+0x1d8>)
 8017460:	460c      	mov	r4, r1
 8017462:	4683      	mov	fp, r0
 8017464:	4616      	mov	r6, r2
 8017466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801746a:	b087      	sub	sp, #28
 801746c:	ab03      	add	r3, sp, #12
 801746e:	68a7      	ldr	r7, [r4, #8]
 8017470:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017474:	4b6f      	ldr	r3, [pc, #444]	; (8017634 <_scanf_i+0x1dc>)
 8017476:	69a1      	ldr	r1, [r4, #24]
 8017478:	4a6f      	ldr	r2, [pc, #444]	; (8017638 <_scanf_i+0x1e0>)
 801747a:	2903      	cmp	r1, #3
 801747c:	bf08      	it	eq
 801747e:	461a      	moveq	r2, r3
 8017480:	1e7b      	subs	r3, r7, #1
 8017482:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017486:	bf84      	itt	hi
 8017488:	f240 135d 	movwhi	r3, #349	; 0x15d
 801748c:	60a3      	strhi	r3, [r4, #8]
 801748e:	6823      	ldr	r3, [r4, #0]
 8017490:	9200      	str	r2, [sp, #0]
 8017492:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017496:	bf88      	it	hi
 8017498:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801749c:	f104 091c 	add.w	r9, r4, #28
 80174a0:	6023      	str	r3, [r4, #0]
 80174a2:	bf8c      	ite	hi
 80174a4:	197f      	addhi	r7, r7, r5
 80174a6:	2700      	movls	r7, #0
 80174a8:	464b      	mov	r3, r9
 80174aa:	f04f 0800 	mov.w	r8, #0
 80174ae:	9301      	str	r3, [sp, #4]
 80174b0:	6831      	ldr	r1, [r6, #0]
 80174b2:	ab03      	add	r3, sp, #12
 80174b4:	2202      	movs	r2, #2
 80174b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80174ba:	7809      	ldrb	r1, [r1, #0]
 80174bc:	f7e8 fea8 	bl	8000210 <memchr>
 80174c0:	9b01      	ldr	r3, [sp, #4]
 80174c2:	b330      	cbz	r0, 8017512 <_scanf_i+0xba>
 80174c4:	f1b8 0f01 	cmp.w	r8, #1
 80174c8:	d15a      	bne.n	8017580 <_scanf_i+0x128>
 80174ca:	6862      	ldr	r2, [r4, #4]
 80174cc:	b92a      	cbnz	r2, 80174da <_scanf_i+0x82>
 80174ce:	6822      	ldr	r2, [r4, #0]
 80174d0:	2108      	movs	r1, #8
 80174d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174d6:	6061      	str	r1, [r4, #4]
 80174d8:	6022      	str	r2, [r4, #0]
 80174da:	6822      	ldr	r2, [r4, #0]
 80174dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80174e0:	6022      	str	r2, [r4, #0]
 80174e2:	68a2      	ldr	r2, [r4, #8]
 80174e4:	1e51      	subs	r1, r2, #1
 80174e6:	60a1      	str	r1, [r4, #8]
 80174e8:	b19a      	cbz	r2, 8017512 <_scanf_i+0xba>
 80174ea:	6832      	ldr	r2, [r6, #0]
 80174ec:	1c51      	adds	r1, r2, #1
 80174ee:	6031      	str	r1, [r6, #0]
 80174f0:	7812      	ldrb	r2, [r2, #0]
 80174f2:	701a      	strb	r2, [r3, #0]
 80174f4:	1c5d      	adds	r5, r3, #1
 80174f6:	6873      	ldr	r3, [r6, #4]
 80174f8:	3b01      	subs	r3, #1
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	6073      	str	r3, [r6, #4]
 80174fe:	dc07      	bgt.n	8017510 <_scanf_i+0xb8>
 8017500:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017504:	4631      	mov	r1, r6
 8017506:	4658      	mov	r0, fp
 8017508:	4798      	blx	r3
 801750a:	2800      	cmp	r0, #0
 801750c:	f040 8086 	bne.w	801761c <_scanf_i+0x1c4>
 8017510:	462b      	mov	r3, r5
 8017512:	f108 0801 	add.w	r8, r8, #1
 8017516:	f1b8 0f03 	cmp.w	r8, #3
 801751a:	d1c8      	bne.n	80174ae <_scanf_i+0x56>
 801751c:	6862      	ldr	r2, [r4, #4]
 801751e:	b90a      	cbnz	r2, 8017524 <_scanf_i+0xcc>
 8017520:	220a      	movs	r2, #10
 8017522:	6062      	str	r2, [r4, #4]
 8017524:	6862      	ldr	r2, [r4, #4]
 8017526:	4945      	ldr	r1, [pc, #276]	; (801763c <_scanf_i+0x1e4>)
 8017528:	6960      	ldr	r0, [r4, #20]
 801752a:	9301      	str	r3, [sp, #4]
 801752c:	1a89      	subs	r1, r1, r2
 801752e:	f000 f8df 	bl	80176f0 <__sccl>
 8017532:	9b01      	ldr	r3, [sp, #4]
 8017534:	f04f 0800 	mov.w	r8, #0
 8017538:	461d      	mov	r5, r3
 801753a:	68a3      	ldr	r3, [r4, #8]
 801753c:	6822      	ldr	r2, [r4, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d03a      	beq.n	80175b8 <_scanf_i+0x160>
 8017542:	6831      	ldr	r1, [r6, #0]
 8017544:	6960      	ldr	r0, [r4, #20]
 8017546:	f891 c000 	ldrb.w	ip, [r1]
 801754a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801754e:	2800      	cmp	r0, #0
 8017550:	d032      	beq.n	80175b8 <_scanf_i+0x160>
 8017552:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017556:	d121      	bne.n	801759c <_scanf_i+0x144>
 8017558:	0510      	lsls	r0, r2, #20
 801755a:	d51f      	bpl.n	801759c <_scanf_i+0x144>
 801755c:	f108 0801 	add.w	r8, r8, #1
 8017560:	b117      	cbz	r7, 8017568 <_scanf_i+0x110>
 8017562:	3301      	adds	r3, #1
 8017564:	3f01      	subs	r7, #1
 8017566:	60a3      	str	r3, [r4, #8]
 8017568:	6873      	ldr	r3, [r6, #4]
 801756a:	3b01      	subs	r3, #1
 801756c:	2b00      	cmp	r3, #0
 801756e:	6073      	str	r3, [r6, #4]
 8017570:	dd1b      	ble.n	80175aa <_scanf_i+0x152>
 8017572:	6833      	ldr	r3, [r6, #0]
 8017574:	3301      	adds	r3, #1
 8017576:	6033      	str	r3, [r6, #0]
 8017578:	68a3      	ldr	r3, [r4, #8]
 801757a:	3b01      	subs	r3, #1
 801757c:	60a3      	str	r3, [r4, #8]
 801757e:	e7dc      	b.n	801753a <_scanf_i+0xe2>
 8017580:	f1b8 0f02 	cmp.w	r8, #2
 8017584:	d1ad      	bne.n	80174e2 <_scanf_i+0x8a>
 8017586:	6822      	ldr	r2, [r4, #0]
 8017588:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801758c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017590:	d1bf      	bne.n	8017512 <_scanf_i+0xba>
 8017592:	2110      	movs	r1, #16
 8017594:	6061      	str	r1, [r4, #4]
 8017596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801759a:	e7a1      	b.n	80174e0 <_scanf_i+0x88>
 801759c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80175a0:	6022      	str	r2, [r4, #0]
 80175a2:	780b      	ldrb	r3, [r1, #0]
 80175a4:	702b      	strb	r3, [r5, #0]
 80175a6:	3501      	adds	r5, #1
 80175a8:	e7de      	b.n	8017568 <_scanf_i+0x110>
 80175aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80175ae:	4631      	mov	r1, r6
 80175b0:	4658      	mov	r0, fp
 80175b2:	4798      	blx	r3
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d0df      	beq.n	8017578 <_scanf_i+0x120>
 80175b8:	6823      	ldr	r3, [r4, #0]
 80175ba:	05d9      	lsls	r1, r3, #23
 80175bc:	d50c      	bpl.n	80175d8 <_scanf_i+0x180>
 80175be:	454d      	cmp	r5, r9
 80175c0:	d908      	bls.n	80175d4 <_scanf_i+0x17c>
 80175c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80175c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175ca:	4632      	mov	r2, r6
 80175cc:	4658      	mov	r0, fp
 80175ce:	4798      	blx	r3
 80175d0:	1e6f      	subs	r7, r5, #1
 80175d2:	463d      	mov	r5, r7
 80175d4:	454d      	cmp	r5, r9
 80175d6:	d029      	beq.n	801762c <_scanf_i+0x1d4>
 80175d8:	6822      	ldr	r2, [r4, #0]
 80175da:	f012 0210 	ands.w	r2, r2, #16
 80175de:	d113      	bne.n	8017608 <_scanf_i+0x1b0>
 80175e0:	702a      	strb	r2, [r5, #0]
 80175e2:	6863      	ldr	r3, [r4, #4]
 80175e4:	9e00      	ldr	r6, [sp, #0]
 80175e6:	4649      	mov	r1, r9
 80175e8:	4658      	mov	r0, fp
 80175ea:	47b0      	blx	r6
 80175ec:	f8da 3000 	ldr.w	r3, [sl]
 80175f0:	6821      	ldr	r1, [r4, #0]
 80175f2:	1d1a      	adds	r2, r3, #4
 80175f4:	f8ca 2000 	str.w	r2, [sl]
 80175f8:	f011 0f20 	tst.w	r1, #32
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	d010      	beq.n	8017622 <_scanf_i+0x1ca>
 8017600:	6018      	str	r0, [r3, #0]
 8017602:	68e3      	ldr	r3, [r4, #12]
 8017604:	3301      	adds	r3, #1
 8017606:	60e3      	str	r3, [r4, #12]
 8017608:	eba5 0509 	sub.w	r5, r5, r9
 801760c:	44a8      	add	r8, r5
 801760e:	6925      	ldr	r5, [r4, #16]
 8017610:	4445      	add	r5, r8
 8017612:	6125      	str	r5, [r4, #16]
 8017614:	2000      	movs	r0, #0
 8017616:	b007      	add	sp, #28
 8017618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801761c:	f04f 0800 	mov.w	r8, #0
 8017620:	e7ca      	b.n	80175b8 <_scanf_i+0x160>
 8017622:	07ca      	lsls	r2, r1, #31
 8017624:	bf4c      	ite	mi
 8017626:	8018      	strhmi	r0, [r3, #0]
 8017628:	6018      	strpl	r0, [r3, #0]
 801762a:	e7ea      	b.n	8017602 <_scanf_i+0x1aa>
 801762c:	2001      	movs	r0, #1
 801762e:	e7f2      	b.n	8017616 <_scanf_i+0x1be>
 8017630:	08017f2c 	.word	0x08017f2c
 8017634:	08014859 	.word	0x08014859
 8017638:	0801786d 	.word	0x0801786d
 801763c:	080183f5 	.word	0x080183f5

08017640 <_putc_r>:
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	460d      	mov	r5, r1
 8017644:	4614      	mov	r4, r2
 8017646:	4606      	mov	r6, r0
 8017648:	b118      	cbz	r0, 8017652 <_putc_r+0x12>
 801764a:	6983      	ldr	r3, [r0, #24]
 801764c:	b90b      	cbnz	r3, 8017652 <_putc_r+0x12>
 801764e:	f7fe f94b 	bl	80158e8 <__sinit>
 8017652:	4b13      	ldr	r3, [pc, #76]	; (80176a0 <_putc_r+0x60>)
 8017654:	429c      	cmp	r4, r3
 8017656:	d112      	bne.n	801767e <_putc_r+0x3e>
 8017658:	6874      	ldr	r4, [r6, #4]
 801765a:	68a3      	ldr	r3, [r4, #8]
 801765c:	3b01      	subs	r3, #1
 801765e:	2b00      	cmp	r3, #0
 8017660:	60a3      	str	r3, [r4, #8]
 8017662:	da16      	bge.n	8017692 <_putc_r+0x52>
 8017664:	69a2      	ldr	r2, [r4, #24]
 8017666:	4293      	cmp	r3, r2
 8017668:	db02      	blt.n	8017670 <_putc_r+0x30>
 801766a:	b2eb      	uxtb	r3, r5
 801766c:	2b0a      	cmp	r3, #10
 801766e:	d110      	bne.n	8017692 <_putc_r+0x52>
 8017670:	4622      	mov	r2, r4
 8017672:	4629      	mov	r1, r5
 8017674:	4630      	mov	r0, r6
 8017676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801767a:	f7fd b91f 	b.w	80148bc <__swbuf_r>
 801767e:	4b09      	ldr	r3, [pc, #36]	; (80176a4 <_putc_r+0x64>)
 8017680:	429c      	cmp	r4, r3
 8017682:	d101      	bne.n	8017688 <_putc_r+0x48>
 8017684:	68b4      	ldr	r4, [r6, #8]
 8017686:	e7e8      	b.n	801765a <_putc_r+0x1a>
 8017688:	4b07      	ldr	r3, [pc, #28]	; (80176a8 <_putc_r+0x68>)
 801768a:	429c      	cmp	r4, r3
 801768c:	bf08      	it	eq
 801768e:	68f4      	ldreq	r4, [r6, #12]
 8017690:	e7e3      	b.n	801765a <_putc_r+0x1a>
 8017692:	6823      	ldr	r3, [r4, #0]
 8017694:	1c5a      	adds	r2, r3, #1
 8017696:	6022      	str	r2, [r4, #0]
 8017698:	701d      	strb	r5, [r3, #0]
 801769a:	b2e8      	uxtb	r0, r5
 801769c:	bd70      	pop	{r4, r5, r6, pc}
 801769e:	bf00      	nop
 80176a0:	08018288 	.word	0x08018288
 80176a4:	080182a8 	.word	0x080182a8
 80176a8:	08018268 	.word	0x08018268

080176ac <_read_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4c07      	ldr	r4, [pc, #28]	; (80176cc <_read_r+0x20>)
 80176b0:	4605      	mov	r5, r0
 80176b2:	4608      	mov	r0, r1
 80176b4:	4611      	mov	r1, r2
 80176b6:	2200      	movs	r2, #0
 80176b8:	6022      	str	r2, [r4, #0]
 80176ba:	461a      	mov	r2, r3
 80176bc:	f7ee f8ac 	bl	8005818 <_read>
 80176c0:	1c43      	adds	r3, r0, #1
 80176c2:	d102      	bne.n	80176ca <_read_r+0x1e>
 80176c4:	6823      	ldr	r3, [r4, #0]
 80176c6:	b103      	cbz	r3, 80176ca <_read_r+0x1e>
 80176c8:	602b      	str	r3, [r5, #0]
 80176ca:	bd38      	pop	{r3, r4, r5, pc}
 80176cc:	2003be0c 	.word	0x2003be0c

080176d0 <_sbrk_r>:
 80176d0:	b538      	push	{r3, r4, r5, lr}
 80176d2:	4c06      	ldr	r4, [pc, #24]	; (80176ec <_sbrk_r+0x1c>)
 80176d4:	2300      	movs	r3, #0
 80176d6:	4605      	mov	r5, r0
 80176d8:	4608      	mov	r0, r1
 80176da:	6023      	str	r3, [r4, #0]
 80176dc:	f7ee f8ee 	bl	80058bc <_sbrk>
 80176e0:	1c43      	adds	r3, r0, #1
 80176e2:	d102      	bne.n	80176ea <_sbrk_r+0x1a>
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	b103      	cbz	r3, 80176ea <_sbrk_r+0x1a>
 80176e8:	602b      	str	r3, [r5, #0]
 80176ea:	bd38      	pop	{r3, r4, r5, pc}
 80176ec:	2003be0c 	.word	0x2003be0c

080176f0 <__sccl>:
 80176f0:	b570      	push	{r4, r5, r6, lr}
 80176f2:	780b      	ldrb	r3, [r1, #0]
 80176f4:	2b5e      	cmp	r3, #94	; 0x5e
 80176f6:	bf13      	iteet	ne
 80176f8:	1c4a      	addne	r2, r1, #1
 80176fa:	1c8a      	addeq	r2, r1, #2
 80176fc:	784b      	ldrbeq	r3, [r1, #1]
 80176fe:	2100      	movne	r1, #0
 8017700:	bf08      	it	eq
 8017702:	2101      	moveq	r1, #1
 8017704:	1e44      	subs	r4, r0, #1
 8017706:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801770a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801770e:	42ac      	cmp	r4, r5
 8017710:	d1fb      	bne.n	801770a <__sccl+0x1a>
 8017712:	b913      	cbnz	r3, 801771a <__sccl+0x2a>
 8017714:	3a01      	subs	r2, #1
 8017716:	4610      	mov	r0, r2
 8017718:	bd70      	pop	{r4, r5, r6, pc}
 801771a:	f081 0401 	eor.w	r4, r1, #1
 801771e:	54c4      	strb	r4, [r0, r3]
 8017720:	1c51      	adds	r1, r2, #1
 8017722:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017726:	2d2d      	cmp	r5, #45	; 0x2d
 8017728:	f101 36ff 	add.w	r6, r1, #4294967295
 801772c:	460a      	mov	r2, r1
 801772e:	d006      	beq.n	801773e <__sccl+0x4e>
 8017730:	2d5d      	cmp	r5, #93	; 0x5d
 8017732:	d0f0      	beq.n	8017716 <__sccl+0x26>
 8017734:	b90d      	cbnz	r5, 801773a <__sccl+0x4a>
 8017736:	4632      	mov	r2, r6
 8017738:	e7ed      	b.n	8017716 <__sccl+0x26>
 801773a:	462b      	mov	r3, r5
 801773c:	e7ef      	b.n	801771e <__sccl+0x2e>
 801773e:	780e      	ldrb	r6, [r1, #0]
 8017740:	2e5d      	cmp	r6, #93	; 0x5d
 8017742:	d0fa      	beq.n	801773a <__sccl+0x4a>
 8017744:	42b3      	cmp	r3, r6
 8017746:	dcf8      	bgt.n	801773a <__sccl+0x4a>
 8017748:	3301      	adds	r3, #1
 801774a:	429e      	cmp	r6, r3
 801774c:	54c4      	strb	r4, [r0, r3]
 801774e:	dcfb      	bgt.n	8017748 <__sccl+0x58>
 8017750:	3102      	adds	r1, #2
 8017752:	e7e6      	b.n	8017722 <__sccl+0x32>

08017754 <strncmp>:
 8017754:	b510      	push	{r4, lr}
 8017756:	b16a      	cbz	r2, 8017774 <strncmp+0x20>
 8017758:	3901      	subs	r1, #1
 801775a:	1884      	adds	r4, r0, r2
 801775c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017760:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017764:	4293      	cmp	r3, r2
 8017766:	d103      	bne.n	8017770 <strncmp+0x1c>
 8017768:	42a0      	cmp	r0, r4
 801776a:	d001      	beq.n	8017770 <strncmp+0x1c>
 801776c:	2b00      	cmp	r3, #0
 801776e:	d1f5      	bne.n	801775c <strncmp+0x8>
 8017770:	1a98      	subs	r0, r3, r2
 8017772:	bd10      	pop	{r4, pc}
 8017774:	4610      	mov	r0, r2
 8017776:	e7fc      	b.n	8017772 <strncmp+0x1e>

08017778 <_strtoul_l.isra.0>:
 8017778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801777c:	4680      	mov	r8, r0
 801777e:	4689      	mov	r9, r1
 8017780:	4692      	mov	sl, r2
 8017782:	461e      	mov	r6, r3
 8017784:	460f      	mov	r7, r1
 8017786:	463d      	mov	r5, r7
 8017788:	9808      	ldr	r0, [sp, #32]
 801778a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801778e:	f7fe fc5b 	bl	8016048 <__locale_ctype_ptr_l>
 8017792:	4420      	add	r0, r4
 8017794:	7843      	ldrb	r3, [r0, #1]
 8017796:	f013 0308 	ands.w	r3, r3, #8
 801779a:	d130      	bne.n	80177fe <_strtoul_l.isra.0+0x86>
 801779c:	2c2d      	cmp	r4, #45	; 0x2d
 801779e:	d130      	bne.n	8017802 <_strtoul_l.isra.0+0x8a>
 80177a0:	787c      	ldrb	r4, [r7, #1]
 80177a2:	1cbd      	adds	r5, r7, #2
 80177a4:	2101      	movs	r1, #1
 80177a6:	2e00      	cmp	r6, #0
 80177a8:	d05c      	beq.n	8017864 <_strtoul_l.isra.0+0xec>
 80177aa:	2e10      	cmp	r6, #16
 80177ac:	d109      	bne.n	80177c2 <_strtoul_l.isra.0+0x4a>
 80177ae:	2c30      	cmp	r4, #48	; 0x30
 80177b0:	d107      	bne.n	80177c2 <_strtoul_l.isra.0+0x4a>
 80177b2:	782b      	ldrb	r3, [r5, #0]
 80177b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80177b8:	2b58      	cmp	r3, #88	; 0x58
 80177ba:	d14e      	bne.n	801785a <_strtoul_l.isra.0+0xe2>
 80177bc:	786c      	ldrb	r4, [r5, #1]
 80177be:	2610      	movs	r6, #16
 80177c0:	3502      	adds	r5, #2
 80177c2:	f04f 32ff 	mov.w	r2, #4294967295
 80177c6:	2300      	movs	r3, #0
 80177c8:	fbb2 f2f6 	udiv	r2, r2, r6
 80177cc:	fb06 fc02 	mul.w	ip, r6, r2
 80177d0:	ea6f 0c0c 	mvn.w	ip, ip
 80177d4:	4618      	mov	r0, r3
 80177d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80177da:	2f09      	cmp	r7, #9
 80177dc:	d817      	bhi.n	801780e <_strtoul_l.isra.0+0x96>
 80177de:	463c      	mov	r4, r7
 80177e0:	42a6      	cmp	r6, r4
 80177e2:	dd23      	ble.n	801782c <_strtoul_l.isra.0+0xb4>
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	db1e      	blt.n	8017826 <_strtoul_l.isra.0+0xae>
 80177e8:	4282      	cmp	r2, r0
 80177ea:	d31c      	bcc.n	8017826 <_strtoul_l.isra.0+0xae>
 80177ec:	d101      	bne.n	80177f2 <_strtoul_l.isra.0+0x7a>
 80177ee:	45a4      	cmp	ip, r4
 80177f0:	db19      	blt.n	8017826 <_strtoul_l.isra.0+0xae>
 80177f2:	fb00 4006 	mla	r0, r0, r6, r4
 80177f6:	2301      	movs	r3, #1
 80177f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177fc:	e7eb      	b.n	80177d6 <_strtoul_l.isra.0+0x5e>
 80177fe:	462f      	mov	r7, r5
 8017800:	e7c1      	b.n	8017786 <_strtoul_l.isra.0+0xe>
 8017802:	2c2b      	cmp	r4, #43	; 0x2b
 8017804:	bf04      	itt	eq
 8017806:	1cbd      	addeq	r5, r7, #2
 8017808:	787c      	ldrbeq	r4, [r7, #1]
 801780a:	4619      	mov	r1, r3
 801780c:	e7cb      	b.n	80177a6 <_strtoul_l.isra.0+0x2e>
 801780e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017812:	2f19      	cmp	r7, #25
 8017814:	d801      	bhi.n	801781a <_strtoul_l.isra.0+0xa2>
 8017816:	3c37      	subs	r4, #55	; 0x37
 8017818:	e7e2      	b.n	80177e0 <_strtoul_l.isra.0+0x68>
 801781a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801781e:	2f19      	cmp	r7, #25
 8017820:	d804      	bhi.n	801782c <_strtoul_l.isra.0+0xb4>
 8017822:	3c57      	subs	r4, #87	; 0x57
 8017824:	e7dc      	b.n	80177e0 <_strtoul_l.isra.0+0x68>
 8017826:	f04f 33ff 	mov.w	r3, #4294967295
 801782a:	e7e5      	b.n	80177f8 <_strtoul_l.isra.0+0x80>
 801782c:	2b00      	cmp	r3, #0
 801782e:	da09      	bge.n	8017844 <_strtoul_l.isra.0+0xcc>
 8017830:	2322      	movs	r3, #34	; 0x22
 8017832:	f8c8 3000 	str.w	r3, [r8]
 8017836:	f04f 30ff 	mov.w	r0, #4294967295
 801783a:	f1ba 0f00 	cmp.w	sl, #0
 801783e:	d107      	bne.n	8017850 <_strtoul_l.isra.0+0xd8>
 8017840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017844:	b101      	cbz	r1, 8017848 <_strtoul_l.isra.0+0xd0>
 8017846:	4240      	negs	r0, r0
 8017848:	f1ba 0f00 	cmp.w	sl, #0
 801784c:	d0f8      	beq.n	8017840 <_strtoul_l.isra.0+0xc8>
 801784e:	b10b      	cbz	r3, 8017854 <_strtoul_l.isra.0+0xdc>
 8017850:	f105 39ff 	add.w	r9, r5, #4294967295
 8017854:	f8ca 9000 	str.w	r9, [sl]
 8017858:	e7f2      	b.n	8017840 <_strtoul_l.isra.0+0xc8>
 801785a:	2430      	movs	r4, #48	; 0x30
 801785c:	2e00      	cmp	r6, #0
 801785e:	d1b0      	bne.n	80177c2 <_strtoul_l.isra.0+0x4a>
 8017860:	2608      	movs	r6, #8
 8017862:	e7ae      	b.n	80177c2 <_strtoul_l.isra.0+0x4a>
 8017864:	2c30      	cmp	r4, #48	; 0x30
 8017866:	d0a4      	beq.n	80177b2 <_strtoul_l.isra.0+0x3a>
 8017868:	260a      	movs	r6, #10
 801786a:	e7aa      	b.n	80177c2 <_strtoul_l.isra.0+0x4a>

0801786c <_strtoul_r>:
 801786c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801786e:	4c06      	ldr	r4, [pc, #24]	; (8017888 <_strtoul_r+0x1c>)
 8017870:	4d06      	ldr	r5, [pc, #24]	; (801788c <_strtoul_r+0x20>)
 8017872:	6824      	ldr	r4, [r4, #0]
 8017874:	6a24      	ldr	r4, [r4, #32]
 8017876:	2c00      	cmp	r4, #0
 8017878:	bf08      	it	eq
 801787a:	462c      	moveq	r4, r5
 801787c:	9400      	str	r4, [sp, #0]
 801787e:	f7ff ff7b 	bl	8017778 <_strtoul_l.isra.0>
 8017882:	b003      	add	sp, #12
 8017884:	bd30      	pop	{r4, r5, pc}
 8017886:	bf00      	nop
 8017888:	2000000c 	.word	0x2000000c
 801788c:	20000070 	.word	0x20000070

08017890 <__submore>:
 8017890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017894:	460c      	mov	r4, r1
 8017896:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801789c:	4299      	cmp	r1, r3
 801789e:	d11d      	bne.n	80178dc <__submore+0x4c>
 80178a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80178a4:	f7ff f8de 	bl	8016a64 <_malloc_r>
 80178a8:	b918      	cbnz	r0, 80178b2 <__submore+0x22>
 80178aa:	f04f 30ff 	mov.w	r0, #4294967295
 80178ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80178b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80178bc:	6360      	str	r0, [r4, #52]	; 0x34
 80178be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80178c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80178c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80178ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80178ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80178d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80178d6:	6020      	str	r0, [r4, #0]
 80178d8:	2000      	movs	r0, #0
 80178da:	e7e8      	b.n	80178ae <__submore+0x1e>
 80178dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80178de:	0077      	lsls	r7, r6, #1
 80178e0:	463a      	mov	r2, r7
 80178e2:	f000 f85a 	bl	801799a <_realloc_r>
 80178e6:	4605      	mov	r5, r0
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d0de      	beq.n	80178aa <__submore+0x1a>
 80178ec:	eb00 0806 	add.w	r8, r0, r6
 80178f0:	4601      	mov	r1, r0
 80178f2:	4632      	mov	r2, r6
 80178f4:	4640      	mov	r0, r8
 80178f6:	f7fb f95f 	bl	8012bb8 <memcpy>
 80178fa:	f8c4 8000 	str.w	r8, [r4]
 80178fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017902:	e7e9      	b.n	80178d8 <__submore+0x48>

08017904 <__ascii_wctomb>:
 8017904:	b149      	cbz	r1, 801791a <__ascii_wctomb+0x16>
 8017906:	2aff      	cmp	r2, #255	; 0xff
 8017908:	bf85      	ittet	hi
 801790a:	238a      	movhi	r3, #138	; 0x8a
 801790c:	6003      	strhi	r3, [r0, #0]
 801790e:	700a      	strbls	r2, [r1, #0]
 8017910:	f04f 30ff 	movhi.w	r0, #4294967295
 8017914:	bf98      	it	ls
 8017916:	2001      	movls	r0, #1
 8017918:	4770      	bx	lr
 801791a:	4608      	mov	r0, r1
 801791c:	4770      	bx	lr
	...

08017920 <_fstat_r>:
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	4c07      	ldr	r4, [pc, #28]	; (8017940 <_fstat_r+0x20>)
 8017924:	2300      	movs	r3, #0
 8017926:	4605      	mov	r5, r0
 8017928:	4608      	mov	r0, r1
 801792a:	4611      	mov	r1, r2
 801792c:	6023      	str	r3, [r4, #0]
 801792e:	f7ed ff9c 	bl	800586a <_fstat>
 8017932:	1c43      	adds	r3, r0, #1
 8017934:	d102      	bne.n	801793c <_fstat_r+0x1c>
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	b103      	cbz	r3, 801793c <_fstat_r+0x1c>
 801793a:	602b      	str	r3, [r5, #0]
 801793c:	bd38      	pop	{r3, r4, r5, pc}
 801793e:	bf00      	nop
 8017940:	2003be0c 	.word	0x2003be0c

08017944 <_isatty_r>:
 8017944:	b538      	push	{r3, r4, r5, lr}
 8017946:	4c06      	ldr	r4, [pc, #24]	; (8017960 <_isatty_r+0x1c>)
 8017948:	2300      	movs	r3, #0
 801794a:	4605      	mov	r5, r0
 801794c:	4608      	mov	r0, r1
 801794e:	6023      	str	r3, [r4, #0]
 8017950:	f7ed ff9b 	bl	800588a <_isatty>
 8017954:	1c43      	adds	r3, r0, #1
 8017956:	d102      	bne.n	801795e <_isatty_r+0x1a>
 8017958:	6823      	ldr	r3, [r4, #0]
 801795a:	b103      	cbz	r3, 801795e <_isatty_r+0x1a>
 801795c:	602b      	str	r3, [r5, #0]
 801795e:	bd38      	pop	{r3, r4, r5, pc}
 8017960:	2003be0c 	.word	0x2003be0c

08017964 <memmove>:
 8017964:	4288      	cmp	r0, r1
 8017966:	b510      	push	{r4, lr}
 8017968:	eb01 0302 	add.w	r3, r1, r2
 801796c:	d807      	bhi.n	801797e <memmove+0x1a>
 801796e:	1e42      	subs	r2, r0, #1
 8017970:	4299      	cmp	r1, r3
 8017972:	d00a      	beq.n	801798a <memmove+0x26>
 8017974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017978:	f802 4f01 	strb.w	r4, [r2, #1]!
 801797c:	e7f8      	b.n	8017970 <memmove+0xc>
 801797e:	4283      	cmp	r3, r0
 8017980:	d9f5      	bls.n	801796e <memmove+0xa>
 8017982:	1881      	adds	r1, r0, r2
 8017984:	1ad2      	subs	r2, r2, r3
 8017986:	42d3      	cmn	r3, r2
 8017988:	d100      	bne.n	801798c <memmove+0x28>
 801798a:	bd10      	pop	{r4, pc}
 801798c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017990:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017994:	e7f7      	b.n	8017986 <memmove+0x22>

08017996 <__malloc_lock>:
 8017996:	4770      	bx	lr

08017998 <__malloc_unlock>:
 8017998:	4770      	bx	lr

0801799a <_realloc_r>:
 801799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801799c:	4607      	mov	r7, r0
 801799e:	4614      	mov	r4, r2
 80179a0:	460e      	mov	r6, r1
 80179a2:	b921      	cbnz	r1, 80179ae <_realloc_r+0x14>
 80179a4:	4611      	mov	r1, r2
 80179a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80179aa:	f7ff b85b 	b.w	8016a64 <_malloc_r>
 80179ae:	b922      	cbnz	r2, 80179ba <_realloc_r+0x20>
 80179b0:	f7ff f80a 	bl	80169c8 <_free_r>
 80179b4:	4625      	mov	r5, r4
 80179b6:	4628      	mov	r0, r5
 80179b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ba:	f000 f814 	bl	80179e6 <_malloc_usable_size_r>
 80179be:	42a0      	cmp	r0, r4
 80179c0:	d20f      	bcs.n	80179e2 <_realloc_r+0x48>
 80179c2:	4621      	mov	r1, r4
 80179c4:	4638      	mov	r0, r7
 80179c6:	f7ff f84d 	bl	8016a64 <_malloc_r>
 80179ca:	4605      	mov	r5, r0
 80179cc:	2800      	cmp	r0, #0
 80179ce:	d0f2      	beq.n	80179b6 <_realloc_r+0x1c>
 80179d0:	4631      	mov	r1, r6
 80179d2:	4622      	mov	r2, r4
 80179d4:	f7fb f8f0 	bl	8012bb8 <memcpy>
 80179d8:	4631      	mov	r1, r6
 80179da:	4638      	mov	r0, r7
 80179dc:	f7fe fff4 	bl	80169c8 <_free_r>
 80179e0:	e7e9      	b.n	80179b6 <_realloc_r+0x1c>
 80179e2:	4635      	mov	r5, r6
 80179e4:	e7e7      	b.n	80179b6 <_realloc_r+0x1c>

080179e6 <_malloc_usable_size_r>:
 80179e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179ea:	1f18      	subs	r0, r3, #4
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	bfbc      	itt	lt
 80179f0:	580b      	ldrlt	r3, [r1, r0]
 80179f2:	18c0      	addlt	r0, r0, r3
 80179f4:	4770      	bx	lr
	...

080179f8 <_init>:
 80179f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fa:	bf00      	nop
 80179fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179fe:	bc08      	pop	{r3}
 8017a00:	469e      	mov	lr, r3
 8017a02:	4770      	bx	lr

08017a04 <_fini>:
 8017a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a06:	bf00      	nop
 8017a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a0a:	bc08      	pop	{r3}
 8017a0c:	469e      	mov	lr, r3
 8017a0e:	4770      	bx	lr
