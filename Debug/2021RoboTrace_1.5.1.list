
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d4c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08015f10  08015f10  00025f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a4c  08016a4c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08016a4c  08016a4c  00026a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a54  08016a54  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016a54  08016a54  00026a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a5c  08016a5c  00026a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08016a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4a8  200001dc  08016c3c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c684  08016c3c  0003c684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031308  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c4c  00000000  00000000  00061514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fd0  00000000  00000000  00068160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d40  00000000  00000000  0006a130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035dc0  00000000  00000000  0006be70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022b78  00000000  00000000  000a1c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010dc90  00000000  00000000  000c47a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d2438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c08  00000000  00000000  001d24b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015ef4 	.word	0x08015ef4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08015ef4 	.word	0x08015ef4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f005 fc9c 	bl	8006914 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000a210 	.word	0x2000a210

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f005 fc84 	bl	8006914 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000a210 	.word	0x2000a210

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f005 fb0d 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 f874 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 f86e 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 f868 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 f862 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 f85c 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 f856 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 f850 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 f84a 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 f844 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 f83e 	bl	8005114 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 f832 	bl	8005114 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 f82c 	bl	8005114 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f011 fe31 	bl	8012d90 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:
#define REDUCTION_RATIO 0.35 //Gear reduction ratio
#define DISTANCE_PER_CNT (2 * PI * WHEEL_RADIUS * REDUCTION_RATIO / ENCODER_RESOLUTION) //[m per cnt]

float monitor_distance;

Encoder::Encoder() : cnt_l_(CNT_OFFSET), cnt_r_(CNT_OFFSET), distance_(0), total_cnt_l_(0), total_cnt_r_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116a:	805a      	strh	r2, [r3, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001198:	213c      	movs	r1, #60	; 0x3c
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <_ZN7Encoder4initEv+0x30>)
 800119c:	f008 ff08 	bl	8009fb0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011a0:	213c      	movs	r1, #60	; 0x3c
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <_ZN7Encoder4initEv+0x34>)
 80011a4:	f008 ff04 	bl	8009fb0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_ZN7Encoder4initEv+0x38>)
 80011aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_ZN7Encoder4initEv+0x3c>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000a464 	.word	0x2000a464
 80011c4:	2000a148 	.word	0x2000a148
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40010400 	.word	0x40010400

080011d0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	cnt_l_ = CNT_OFFSET - (TIM1 -> CNT);
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_ZN7Encoder9updateCntEv+0x58>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <_ZN7Encoder9updateCntEv+0x5c>)
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	801a      	strh	r2, [r3, #0]
	cnt_r_ = (TIM8 -> CNT) - CNT_OFFSET;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_ZN7Encoder9updateCntEv+0x60>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	805a      	strh	r2, [r3, #2]

	total_cnt_l_ += cnt_l_;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001206:	441a      	add	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
	total_cnt_r_ += cnt_r_;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001216:	441a      	add	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60da      	str	r2, [r3, #12]

}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40010000 	.word	0x40010000
 800122c:	ffff8000 	.word	0xffff8000
 8001230:	40010400 	.word	0x40010400
 8001234:	00000000 	.word	0x00000000

08001238 <_ZN7Encoder11getDistanceEv>:
	cnt_l = cnt_l_;
	cnt_r = cnt_r_;
}

float Encoder::getDistance()
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f997 	bl	8000578 <__aeabi_f2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f978 	bl	8000554 <__aeabi_i2d>
 8001264:	a317      	add	r3, pc, #92	; (adr r3, 80012c4 <_ZN7Encoder11getDistanceEv+0x8c>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9dd 	bl	8000628 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127e:	f7ff fafd 	bl	800087c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff f817 	bl	80002bc <__adddf3>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fcbf 	bl	8000c18 <__aeabi_d2f>
 800129a:	4602      	mov	r2, r0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
	monitor_distance = distance_;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <_ZN7Encoder11getDistanceEv+0x88>)
 80012a6:	6013      	str	r3, [r2, #0]
	return distance_;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	ee07 3a90 	vmov	s15, r3

}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	200001f8 	.word	0x200001f8
 80012c4:	1ab1d998 	.word	0x1ab1d998
 80012c8:	3f7830b5 	.word	0x3f7830b5

080012cc <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
	cnt_r_ = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	805a      	strh	r2, [r3, #2]
	TIM1 -> CNT = CNT_OFFSET;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <_ZN7Encoder8clearCntEv+0x30>)
 80012e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <_ZN7Encoder8clearCntEv+0x34>)
 80012ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40010000 	.word	0x40010000
 8001300:	40010400 	.word	0x40010400

08001304 <_ZN7Encoder11getTotalCntEv>:

long Encoder::getTotalCnt()
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	return long((total_cnt_l_ + total_cnt_r_) / 2);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4413      	add	r3, r2
 8001316:	0fda      	lsrs	r2, r3, #31
 8001318:	4413      	add	r3, r2
 800131a:	105b      	asrs	r3, r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZN7Encoder13clearTotalCntEv>:

void Encoder::clearTotalCnt()
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
	total_cnt_r_ = 0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af02      	add	r7, sp, #8
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f918 	bl	8001594 <create_path>

	if(state == OVER_WRITE){
 8001364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d108      	bne.n	800137e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800136c:	4822      	ldr	r0, [pc, #136]	; (80013f8 <sd_write_array_float+0xb0>)
 800136e:	f00e f87a 	bl	800f466 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001372:	4822      	ldr	r0, [pc, #136]	; (80013fc <sd_write_array_float+0xb4>)
 8001374:	f00e fae5 	bl	800f942 <f_unlink>
		f_chdir("..");
 8001378:	4821      	ldr	r0, [pc, #132]	; (8001400 <sd_write_array_float+0xb8>)
 800137a:	f00e f874 	bl	800f466 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800137e:	f000 f91f 	bl	80015c0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001382:	2300      	movs	r3, #0
 8001384:	82fb      	strh	r3, [r7, #22]
 8001386:	e028      	b.n	80013da <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8ef 	bl	8000578 <__aeabi_f2d>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	e9cd 3400 	strd	r3, r4, [sp]
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <sd_write_array_float+0xbc>)
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4818      	ldr	r0, [pc, #96]	; (8001408 <sd_write_array_float+0xc0>)
 80013a8:	f010 fd62 	bl	8011e70 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <sd_write_array_float+0xc4>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <sd_write_array_float+0xc4>)
 80013b4:	f00e f8a1 	bl	800f4fa <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <sd_write_array_float+0xc0>)
 80013ba:	f7fe ff21 	bl	8000200 <strlen>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <sd_write_array_float+0xc8>)
 80013c2:	4911      	ldr	r1, [pc, #68]	; (8001408 <sd_write_array_float+0xc0>)
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <sd_write_array_float+0xc4>)
 80013c6:	f00d fe12 	bl	800efee <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80013ca:	f000 f913 	bl	80015f4 <bufclear>
	for(short i = 0 ; i < size; i++){
 80013ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	82fb      	strh	r3, [r7, #22]
 80013da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbd0      	blt.n	8001388 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <sd_write_array_float+0xc4>)
 80013e8:	f00e f813 	bl	800f412 <f_close>

	return ret;
 80013ec:	7d7b      	ldrb	r3, [r7, #21]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20008ec4 	.word	0x20008ec4
 80013fc:	20007d80 	.word	0x20007d80
 8001400:	08015f18 	.word	0x08015f18
 8001404:	08015f10 	.word	0x08015f10
 8001408:	20008fc4 	.word	0x20008fc4
 800140c:	20009054 	.word	0x20009054
 8001410:	20009044 	.word	0x20009044

08001414 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f8b2 	bl	8001594 <create_path>

	if(state == OVER_WRITE){
 8001430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <sd_write_array_int+0xa0>)
 800143a:	f00e f814 	bl	800f466 <f_chdir>
		f_unlink(filepath);	//一回消す
 800143e:	481e      	ldr	r0, [pc, #120]	; (80014b8 <sd_write_array_int+0xa4>)
 8001440:	f00e fa7f 	bl	800f942 <f_unlink>
		f_chdir("..");
 8001444:	481d      	ldr	r0, [pc, #116]	; (80014bc <sd_write_array_int+0xa8>)
 8001446:	f00e f80e 	bl	800f466 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 800144a:	f000 f8b9 	bl	80015c0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
 8001452:	e021      	b.n	8001498 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001454:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <sd_write_array_int+0xac>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4817      	ldr	r0, [pc, #92]	; (80014c4 <sd_write_array_int+0xb0>)
 8001466:	f010 fd03 	bl	8011e70 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <sd_write_array_int+0xb4>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4619      	mov	r1, r3
 8001470:	4815      	ldr	r0, [pc, #84]	; (80014c8 <sd_write_array_int+0xb4>)
 8001472:	f00e f842 	bl	800f4fa <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <sd_write_array_int+0xb0>)
 8001478:	f7fe fec2 	bl	8000200 <strlen>
 800147c:	4602      	mov	r2, r0
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <sd_write_array_int+0xb8>)
 8001480:	4910      	ldr	r1, [pc, #64]	; (80014c4 <sd_write_array_int+0xb0>)
 8001482:	4811      	ldr	r0, [pc, #68]	; (80014c8 <sd_write_array_int+0xb4>)
 8001484:	f00d fdb3 	bl	800efee <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001488:	f000 f8b4 	bl	80015f4 <bufclear>
	for(short i = 0 ; i < size; i++){
 800148c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	82fb      	strh	r3, [r7, #22]
 8001498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800149c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbd7      	blt.n	8001454 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <sd_write_array_int+0xb4>)
 80014a6:	f00d ffb4 	bl	800f412 <f_close>

	return ret;
 80014aa:	7d7b      	ldrb	r3, [r7, #21]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20008ec4 	.word	0x20008ec4
 80014b8:	20007d80 	.word	0x20007d80
 80014bc:	08015f18 	.word	0x08015f18
 80014c0:	08015f1c 	.word	0x08015f1c
 80014c4:	20008fc4 	.word	0x20008fc4
 80014c8:	20009054 	.word	0x20009054
 80014cc:	20009044 	.word	0x20009044

080014d0 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f852 	bl	8001594 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80014f0:	f000 f866 	bl	80015c0 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80014f4:	e019      	b.n	800152a <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80014f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4913      	ldr	r1, [pc, #76]	; (8001550 <sd_read_array_int+0x80>)
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <sd_read_array_int+0x84>)
 8001506:	f010 fd07 	bl	8011f18 <siscanf>
		i++;
 800150a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001516:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	429a      	cmp	r2, r3
 8001520:	db03      	blt.n	800152a <sd_read_array_int+0x5a>
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	3b01      	subs	r3, #1
 8001526:	b29b      	uxth	r3, r3
 8001528:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <sd_read_array_int+0x88>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <sd_read_array_int+0x84>)
 8001530:	f00e fbe2 	bl	800fcf8 <f_gets>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1dd      	bne.n	80014f6 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800153a:	f000 f85b 	bl	80015f4 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <sd_read_array_int+0x88>)
 8001540:	f00d ff67 	bl	800f412 <f_close>

	return ret;
 8001544:	7d7b      	ldrb	r3, [r7, #21]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	08015f20 	.word	0x08015f20
 8001554:	20008fc4 	.word	0x20008fc4
 8001558:	20009054 	.word	0x20009054

0800155c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001566:	2201      	movs	r2, #1
 8001568:	4908      	ldr	r1, [pc, #32]	; (800158c <sd_mount+0x30>)
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <sd_mount+0x34>)
 800156c:	f00d f9ce 	bl	800e90c <f_mount>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <sd_mount+0x20>
 8001576:	2301      	movs	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	e001      	b.n	8001580 <sd_mount+0x24>
	else ret = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08015f24 	.word	0x08015f24
 8001590:	20007e80 	.word	0x20007e80

08001594 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <create_path+0x24>)
 80015a2:	f010 fd28 	bl	8011ff6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <create_path+0x28>)
 80015aa:	f010 fd24 	bl	8011ff6 <strcpy>

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20008ec4 	.word	0x20008ec4
 80015bc:	20007d80 	.word	0x20007d80

080015c0 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <fopen_folder_and_file+0x24>)
 80015c6:	f00e fa7d 	bl	800fac4 <f_mkdir>

	f_chdir(dirpath);
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <fopen_folder_and_file+0x24>)
 80015cc:	f00d ff4b 	bl	800f466 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80015d0:	2213      	movs	r2, #19
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <fopen_folder_and_file+0x28>)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <fopen_folder_and_file+0x2c>)
 80015d6:	f00d f9df 	bl	800e998 <f_open>

	f_chdir("..");
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <fopen_folder_and_file+0x30>)
 80015dc:	f00d ff43 	bl	800f466 <f_chdir>


}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20008ec4 	.word	0x20008ec4
 80015e8:	20007d80 	.word	0x20007d80
 80015ec:	20009054 	.word	0x20009054
 80015f0:	08015f18 	.word	0x08015f18

080015f4 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e007      	b.n	8001610 <bufclear+0x1c>
		buffer[i] = '\0';
 8001600:	4a08      	ldr	r2, [pc, #32]	; (8001624 <bufclear+0x30>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b7f      	cmp	r3, #127	; 0x7f
 8001614:	ddf4      	ble.n	8001600 <bufclear+0xc>
	}
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20008fc4 	.word	0x20008fc4

08001628 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <read_byte+0x54>)
 8001644:	f004 fffc 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001648:	f107 010f 	add.w	r1, r7, #15
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	2201      	movs	r2, #1
 8001650:	480b      	ldr	r0, [pc, #44]	; (8001680 <read_byte+0x58>)
 8001652:	f007 fe73 	bl	800933c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	2364      	movs	r3, #100	; 0x64
 800165c:	2201      	movs	r2, #1
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <read_byte+0x58>)
 8001660:	f007 ffa0 	bl	80095a4 <HAL_SPI_Receive>
	CS_SET;
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <read_byte+0x54>)
 800166c:	f004 ffe8 	bl	8006640 <HAL_GPIO_WritePin>

	return val;
 8001670:	7bbb      	ldrb	r3, [r7, #14]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020400 	.word	0x40020400
 8001680:	2000a0f0 	.word	0x2000a0f0

08001684 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169a:	b2db      	uxtb	r3, r3
 800169c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <write_byte+0x54>)
 80016a6:	f004 ffcb 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80016aa:	f107 010f 	add.w	r1, r7, #15
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <write_byte+0x58>)
 80016b4:	f007 fe42 	bl	800933c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80016b8:	1db9      	adds	r1, r7, #6
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	2201      	movs	r2, #1
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <write_byte+0x58>)
 80016c0:	f007 fe3c 	bl	800933c <HAL_SPI_Transmit>
	CS_SET;
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4803      	ldr	r0, [pc, #12]	; (80016d8 <write_byte+0x54>)
 80016cc:	f004 ffb8 	bl	8006640 <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020400 	.word	0x40020400
 80016dc:	2000a0f0 	.word	0x2000a0f0

080016e0 <IMU_init>:

uint16_t IMU_init() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ff9c 	bl	8001628 <read_byte>
 80016f0:	4603      	mov	r3, r0
 80016f2:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	2be0      	cmp	r3, #224	; 0xe0
 80016f8:	d119      	bne.n	800172e <IMU_init+0x4e>
		ret = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80016fe:	2101      	movs	r1, #1
 8001700:	2006      	movs	r0, #6
 8001702:	f7ff ffbf 	bl	8001684 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001706:	2110      	movs	r1, #16
 8001708:	2003      	movs	r0, #3
 800170a:	f7ff ffbb 	bl	8001684 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800170e:	2120      	movs	r1, #32
 8001710:	207f      	movs	r0, #127	; 0x7f
 8001712:	f7ff ffb7 	bl	8001684 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001716:	2106      	movs	r1, #6
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff ffb3 	bl	8001684 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800171e:	2106      	movs	r1, #6
 8001720:	2014      	movs	r0, #20
 8001722:	f7ff ffaf 	bl	8001684 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001726:	2100      	movs	r1, #0
 8001728:	207f      	movs	r0, #127	; 0x7f
 800172a:	f7ff ffab 	bl	8001684 <write_byte>
	}
	return ret;
 800172e:	88fb      	ldrh	r3, [r7, #6]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <read_gyro_data>:

void read_gyro_data() {
 8001738:	b598      	push	{r3, r4, r7, lr}
 800173a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800173c:	2033      	movs	r0, #51	; 0x33
 800173e:	f7ff ff73 	bl	8001628 <read_byte>
 8001742:	4603      	mov	r3, r0
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21c      	sxth	r4, r3
 8001748:	2034      	movs	r0, #52	; 0x34
 800174a:	f7ff ff6d 	bl	8001628 <read_byte>
 800174e:	4603      	mov	r3, r0
 8001750:	b21b      	sxth	r3, r3
 8001752:	4323      	orrs	r3, r4
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <read_gyro_data+0x64>)
 8001758:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800175a:	2035      	movs	r0, #53	; 0x35
 800175c:	f7ff ff64 	bl	8001628 <read_byte>
 8001760:	4603      	mov	r3, r0
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21c      	sxth	r4, r3
 8001766:	2036      	movs	r0, #54	; 0x36
 8001768:	f7ff ff5e 	bl	8001628 <read_byte>
 800176c:	4603      	mov	r3, r0
 800176e:	b21b      	sxth	r3, r3
 8001770:	4323      	orrs	r3, r4
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <read_gyro_data+0x68>)
 8001776:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001778:	2037      	movs	r0, #55	; 0x37
 800177a:	f7ff ff55 	bl	8001628 <read_byte>
 800177e:	4603      	mov	r3, r0
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21c      	sxth	r4, r3
 8001784:	2038      	movs	r0, #56	; 0x38
 8001786:	f7ff ff4f 	bl	8001628 <read_byte>
 800178a:	4603      	mov	r3, r0
 800178c:	b21b      	sxth	r3, r3
 800178e:	4323      	orrs	r3, r4
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <read_gyro_data+0x6c>)
 8001794:	801a      	strh	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	bd98      	pop	{r3, r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	2000a08c 	.word	0x2000a08c
 80017a0:	2000a08a 	.word	0x2000a08a
 80017a4:	2000a084 	.word	0x2000a084

080017a8 <read_accel_data>:

void read_accel_data() {
 80017a8:	b598      	push	{r3, r4, r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 80017ac:	202d      	movs	r0, #45	; 0x2d
 80017ae:	f7ff ff3b 	bl	8001628 <read_byte>
 80017b2:	4603      	mov	r3, r0
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b21c      	sxth	r4, r3
 80017b8:	202e      	movs	r0, #46	; 0x2e
 80017ba:	f7ff ff35 	bl	8001628 <read_byte>
 80017be:	4603      	mov	r3, r0
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4323      	orrs	r3, r4
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <read_accel_data+0x64>)
 80017c8:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 80017ca:	202f      	movs	r0, #47	; 0x2f
 80017cc:	f7ff ff2c 	bl	8001628 <read_byte>
 80017d0:	4603      	mov	r3, r0
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21c      	sxth	r4, r3
 80017d6:	2030      	movs	r0, #48	; 0x30
 80017d8:	f7ff ff26 	bl	8001628 <read_byte>
 80017dc:	4603      	mov	r3, r0
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4323      	orrs	r3, r4
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <read_accel_data+0x68>)
 80017e6:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80017e8:	2031      	movs	r0, #49	; 0x31
 80017ea:	f7ff ff1d 	bl	8001628 <read_byte>
 80017ee:	4603      	mov	r3, r0
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21c      	sxth	r4, r3
 80017f4:	2032      	movs	r0, #50	; 0x32
 80017f6:	f7ff ff17 	bl	8001628 <read_byte>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4323      	orrs	r3, r4
 8001800:	b21a      	sxth	r2, r3
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <read_accel_data+0x6c>)
 8001804:	801a      	strh	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	bd98      	pop	{r3, r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	2000a088 	.word	0x2000a088
 8001810:	2000a08e 	.word	0x2000a08e
 8001814:	2000a086 	.word	0x2000a086

08001818 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
{

}
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001870:	f7ff ff36 	bl	80016e0 <IMU_init>
 8001874:	4603      	mov	r3, r0
 8001876:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	4619      	mov	r1, r3
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <_ZN3IMU4initEv+0x24>)
 800187e:	f010 fa61 	bl	8011d44 <iprintf>

}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08015f28 	.word	0x08015f28

08001890 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001898:	f7ff ff4e 	bl	8001738 <read_gyro_data>
	read_accel_data();
 800189c:	f7ff ff84 	bl	80017a8 <read_accel_data>

	xa_ = xa;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <_ZN3IMU12updateValuesEv+0x90>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	edc3 7a00 	vstr	s15, [r3]
	ya_ = ya;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <_ZN3IMU12updateValuesEv+0x94>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edc3 7a01 	vstr	s15, [r3, #4]
	za_ = za;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <_ZN3IMU12updateValuesEv+0x98>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edc3 7a02 	vstr	s15, [r3, #8]
	xg_ = xg;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_ZN3IMU12updateValuesEv+0x9c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edc3 7a03 	vstr	s15, [r3, #12]
	yg_ = yg;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <_ZN3IMU12updateValuesEv+0xa0>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edc3 7a04 	vstr	s15, [r3, #16]
	zg_ = zg;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <_ZN3IMU12updateValuesEv+0xa4>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b21b      	sxth	r3, r3
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000a088 	.word	0x2000a088
 8001924:	2000a08e 	.word	0x2000a08e
 8001928:	2000a086 	.word	0x2000a086
 800192c:	2000a08c 	.word	0x2000a08c
 8001930:	2000a08a 	.word	0x2000a08a
 8001934:	2000a084 	.word	0x2000a084

08001938 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
{

}
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 800195c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001962:	f004 fe55 	bl	8006610 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <_ZN8JoyStick8getValueEv+0x2e>
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800197e:	2101      	movs	r1, #1
 8001980:	4823      	ldr	r0, [pc, #140]	; (8001a10 <_ZN8JoyStick8getValueEv+0xc0>)
 8001982:	f004 fe45 	bl	8006610 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <_ZN8JoyStick8getValueEv+0x4e>
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800199e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 80019a4:	f004 fe34 	bl	8006610 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <_ZN8JoyStick8getValueEv+0x70>
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80019c0:	2104      	movs	r1, #4
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <_ZN8JoyStick8getValueEv+0xc4>)
 80019c4:	f004 fe24 	bl	8006610 <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN8JoyStick8getValueEv+0x90>
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 80019e4:	f004 fe14 	bl	8006610 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <_ZN8JoyStick8getValueEv+0xb0>
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001a00:	89fb      	ldrh	r3, [r7, #14]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40020400 	.word	0x40020400

08001a18 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	2b52      	cmp	r3, #82	; 0x52
 8001a28:	d112      	bne.n	8001a50 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4856      	ldr	r0, [pc, #344]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a32:	f004 fe05 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3c:	4853      	ldr	r0, [pc, #332]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a3e:	f004 fdff 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a48:	4850      	ldr	r0, [pc, #320]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a4a:	f004 fdf9 	bl	8006640 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001a4e:	e098      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2b47      	cmp	r3, #71	; 0x47
 8001a54:	d112      	bne.n	8001a7c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5c:	484b      	ldr	r0, [pc, #300]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a5e:	f004 fdef 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a68:	4848      	ldr	r0, [pc, #288]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a6a:	f004 fde9 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a74:	4845      	ldr	r0, [pc, #276]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a76:	f004 fde3 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001a7a:	e082      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b42      	cmp	r3, #66	; 0x42
 8001a80:	d112      	bne.n	8001aa8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a88:	4840      	ldr	r0, [pc, #256]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a8a:	f004 fdd9 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a94:	483d      	ldr	r0, [pc, #244]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a96:	f004 fdd3 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa0:	483a      	ldr	r0, [pc, #232]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001aa2:	f004 fdcd 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001aa6:	e06c      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	2b43      	cmp	r3, #67	; 0x43
 8001aac:	d112      	bne.n	8001ad4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab4:	4835      	ldr	r0, [pc, #212]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ab6:	f004 fdc3 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac0:	4832      	ldr	r0, [pc, #200]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ac2:	f004 fdbd 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001acc:	482f      	ldr	r0, [pc, #188]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ace:	f004 fdb7 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001ad2:	e056      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b4d      	cmp	r3, #77	; 0x4d
 8001ad8:	d112      	bne.n	8001b00 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	482a      	ldr	r0, [pc, #168]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ae2:	f004 fdad 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001aee:	f004 fda7 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af8:	4824      	ldr	r0, [pc, #144]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001afa:	f004 fda1 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001afe:	e040      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b59      	cmp	r3, #89	; 0x59
 8001b04:	d112      	bne.n	8001b2c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b0e:	f004 fd97 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b18:	481c      	ldr	r0, [pc, #112]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b1a:	f004 fd91 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b24:	4819      	ldr	r0, [pc, #100]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b26:	f004 fd8b 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001b2a:	e02a      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	2b57      	cmp	r3, #87	; 0x57
 8001b30:	d112      	bne.n	8001b58 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4814      	ldr	r0, [pc, #80]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b3a:	f004 fd81 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b46:	f004 fd7b 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b52:	f004 fd75 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001b56:	e014      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b7e      	cmp	r3, #126	; 0x7e
 8001b5c:	d111      	bne.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b66:	f004 fd6b 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b72:	f004 fd65 	bl	8006640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b7e:	f004 fd5f 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40020000 	.word	0x40020000

08001b90 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bb0:	f004 fd46 	bl	8006640 <HAL_GPIO_WritePin>
 8001bb4:	e009      	b.n	8001bca <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bc6:	f004 fd3b 	bl	8006640 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d106      	bne.n	8001be0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bda:	f004 fd31 	bl	8006640 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001bde:	e009      	b.n	8001bf4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bf0:	f004 fd26 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020000 	.word	0x40020000

08001c00 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b092      	sub	sp, #72	; 0x48
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe92 	bl	8001938 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1e:	331c      	adds	r3, #28
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
 8001c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d008      	beq.n	8001c3c <_ZN10LineSensorC1Ev+0x3c>
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c36:	3302      	adds	r3, #2
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3a:	e7f2      	b.n	8001c22 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d009      	beq.n	8001c6a <_ZN10LineSensorC1Ev+0x6a>
 8001c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c58:	623b      	str	r3, [r7, #32]
		s = 0;
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	3304      	adds	r3, #4
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
 8001c68:	e7f1      	b.n	8001c4e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3338      	adds	r3, #56	; 0x38
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d009      	beq.n	8001c98 <_ZN10LineSensorC1Ev+0x98>
 8001c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c86:	617b      	str	r3, [r7, #20]
		m = 0;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	3304      	adds	r3, #4
 8001c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c96:	e7f1      	b.n	8001c7c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3338      	adds	r3, #56	; 0x38
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d009      	beq.n	8001cc6 <_ZN10LineSensorC1Ev+0xc6>
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cbc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	e7f1      	b.n	8001caa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3748      	adds	r7, #72	; 0x48
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	220e      	movs	r2, #14
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4803      	ldr	r0, [pc, #12]	; (8001cec <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001ce0:	f003 fa7e 	bl	80051e0 <HAL_ADC_Start_DMA>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000a1c8 	.word	0x2000a1c8

08001cf0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b0d      	cmp	r3, #13
 8001d00:	dc2f      	bgt.n	8001d62 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3392      	adds	r3, #146	; 0x92
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	33a0      	adds	r3, #160	; 0xa0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a5b      	subs	r3, r3, r1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3306      	adds	r3, #6
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e7cc      	b.n	8001cfc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d902      	bls.n	8001d7c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]


}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	200001fc 	.word	0x200001fc

08001d8c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d9e:	2b0d      	cmp	r3, #13
 8001da0:	f200 8087 	bhi.w	8001eb2 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001daa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	d81c      	bhi.n	8001dec <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8001db2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001db6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8001dba:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4423      	add	r3, r4
 8001dca:	3306      	adds	r3, #6
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4403      	add	r3, r0
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	008b      	lsls	r3, r1, #2
 8001dd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001dda:	440b      	add	r3, r1
 8001ddc:	3b30      	subs	r3, #48	; 0x30
 8001dde:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001de0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001de4:	3301      	adds	r3, #1
 8001de6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001dea:	e7de      	b.n	8001daa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d84d      	bhi.n	8001e96 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8001dfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001e04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d83e      	bhi.n	8001e8a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8001e0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e16:	4413      	add	r3, r2
 8001e18:	3b30      	subs	r3, #48	; 0x30
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b30      	subs	r3, #48	; 0x30
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d521      	bpl.n	8001e7e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8001e3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e44:	4413      	add	r3, r2
 8001e46:	3b30      	subs	r3, #48	; 0x30
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8001e4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001e50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e5a:	440a      	add	r2, r1
 8001e5c:	3a30      	subs	r2, #48	; 0x30
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e66:	440b      	add	r3, r1
 8001e68:	3b30      	subs	r3, #48	; 0x30
 8001e6a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8001e6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e76:	4413      	add	r3, r2
 8001e78:	3b30      	subs	r3, #48	; 0x30
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8001e7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001e88:	e7bc      	b.n	8001e04 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8001e8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001e94:	e7ad      	b.n	8001df2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8001e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	33b0      	adds	r3, #176	; 0xb0
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eb0:	e773      	b.n	8001d9a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc90      	pop	{r4, r7}
 8001eba:	4770      	bx	lr

08001ebc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b0a9      	sub	sp, #164	; 0xa4
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	f003 f925 	bl	8005114 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001ed0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ed4:	2b0d      	cmp	r3, #13
 8001ed6:	d823      	bhi.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8001ed8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001edc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	32b0      	adds	r2, #176	; 0xb0
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	440a      	add	r2, r1
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3b60      	subs	r3, #96	; 0x60
 8001ef4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8001ef6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001efa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	32b0      	adds	r2, #176	; 0xb0
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	440a      	add	r2, r1
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f0e:	440b      	add	r3, r1
 8001f10:	3b98      	subs	r3, #152	; 0x98
 8001f12:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001f14:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001f1e:	e7d7      	b.n	8001ed0 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd12 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d079      	beq.n	8002030 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f46:	2b0d      	cmp	r3, #13
 8001f48:	d850      	bhi.n	8001fec <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 8001f4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001f54:	4413      	add	r3, r2
 8001f56:	3b60      	subs	r3, #96	; 0x60
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	33b0      	adds	r3, #176	; 0xb0
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d50f      	bpl.n	8001f96 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8001f76:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001f7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	32b0      	adds	r2, #176	; 0xb0
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	440a      	add	r2, r1
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f8e:	440b      	add	r3, r1
 8001f90:	3b60      	subs	r3, #96	; 0x60
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e024      	b.n	8001fe0 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8001f96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b98      	subs	r3, #152	; 0x98
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	33b0      	adds	r3, #176	; 0xb0
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd0e      	ble.n	8001fe0 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 8001fc2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001fc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	32b0      	adds	r2, #176	; 0xb0
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	440a      	add	r2, r1
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001fda:	440b      	add	r3, r1
 8001fdc:	3b98      	subs	r3, #152	; 0x98
 8001fde:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001fe0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001fea:	e7aa      	b.n	8001f42 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fd6a 	bl	8002acc <_ZN12RotarySwitch8getValueEv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800200e:	2201      	movs	r2, #1
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fdbb 	bl	8001b90 <_ZN3LED2LREaa>
 800201a:	e781      	b.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002022:	2200      	movs	r2, #0
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdb1 	bl	8001b90 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800202e:	e777      	b.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800203c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002044:	3338      	adds	r3, #56	; 0x38
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800204a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800204e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002052:	429a      	cmp	r2, r3
 8002054:	d016      	beq.n	8002084 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa87 	bl	8000578 <__aeabi_f2d>
 800206a:	4603      	mov	r3, r0
 800206c:	460c      	mov	r4, r1
 800206e:	461a      	mov	r2, r3
 8002070:	4623      	mov	r3, r4
 8002072:	4842      	ldr	r0, [pc, #264]	; (800217c <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002074:	f00f fe66 	bl	8011d44 <iprintf>
	for(const auto &m : max_values){
 8002078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800207c:	3304      	adds	r3, #4
 800207e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002082:	e7e2      	b.n	800204a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002084:	200a      	movs	r0, #10
 8002086:	f00f fe75 	bl	8011d74 <putchar>
	for(const auto &m : min_values){
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800209a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d014      	beq.n	80020d6 <_ZN10LineSensor11calibrationEv+0x21a>
 80020ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020b0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80020b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa5e 	bl	8000578 <__aeabi_f2d>
 80020bc:	4603      	mov	r3, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	482d      	ldr	r0, [pc, #180]	; (800217c <_ZN10LineSensor11calibrationEv+0x2c0>)
 80020c6:	f00f fe3d 	bl	8011d44 <iprintf>
	for(const auto &m : min_values){
 80020ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ce:	3304      	adds	r3, #4
 80020d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020d4:	e7e5      	b.n	80020a2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80020d6:	200a      	movs	r0, #10
 80020d8:	f00f fe4c 	bl	8011d74 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80020dc:	2300      	movs	r3, #0
 80020de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80020e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80020e6:	2b0d      	cmp	r3, #13
 80020e8:	d826      	bhi.n	8002138 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80020ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80020f4:	4413      	add	r3, r2
 80020f6:	3b60      	subs	r3, #96	; 0x60
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002106:	4413      	add	r3, r2
 8002108:	3b98      	subs	r3, #152	; 0x98
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002112:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002116:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002180 <_ZN10LineSensor11calibrationEv+0x2c4>
 800211a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	3392      	adds	r3, #146	; 0x92
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800212c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002130:	3301      	adds	r3, #1
 8002132:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002136:	e7d4      	b.n	80020e2 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002138:	2300      	movs	r3, #0
 800213a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800213e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002142:	2b0d      	cmp	r3, #13
 8002144:	d815      	bhi.n	8002172 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002146:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800214a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002154:	440a      	add	r2, r1
 8002156:	3a98      	subs	r2, #152	; 0x98
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	33a0      	adds	r3, #160	; 0xa0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002166:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800216a:	3301      	adds	r3, #1
 800216c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002170:	e7e5      	b.n	800213e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8002172:	bf00      	nop
 8002174:	37a4      	adds	r7, #164	; 0xa4
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	08015f48 	.word	0x08015f48
 8002180:	447a0000 	.word	0x447a0000

08002184 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d012      	beq.n	80021d0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021f0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	db02      	blt.n	80021c8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	3301      	adds	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	3304      	adds	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e7e8      	b.n	80021a2 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	d902      	bls.n	80021dc <_ZN10LineSensor13emergencyStopEv+0x58>
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
 80021da:	e001      	b.n	80021e0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]

	return flag;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	44160000 	.word	0x44160000

080021f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	609a      	str	r2, [r3, #8]
}
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800226c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800229c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80022b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80022bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80022c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80022d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80022e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80022ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	ee07 3a90 	vmov	s15, r3

}
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	0000      	movs	r0, r0
	...

08002310 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff95 	bl	8002248 <_ZN9LineTrace9calcErrorEv>
 800231e:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	edd3 7a04 	vldr	s15, [r3, #16]
 8002328:	ed97 7a07 	vldr	s14, [r7, #28]
 800232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002330:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ed93 7a05 	vldr	s14, [r3, #20]
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <_ZN9LineTrace3pidEv+0x130>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	edd7 6a07 	vldr	s13, [r7, #28]
 8002344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234c:	ee17 0a90 	vmov	r0, s15
 8002350:	f7fe f912 	bl	8000578 <__aeabi_f2d>
 8002354:	a338      	add	r3, pc, #224	; (adr r3, 8002438 <_ZN9LineTrace3pidEv+0x128>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe fa8f 	bl	800087c <__aeabi_ddiv>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	4618      	mov	r0, r3
 8002364:	4621      	mov	r1, r4
 8002366:	f7fe fc57 	bl	8000c18 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
 800236c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800236e:	4b35      	ldr	r3, [pc, #212]	; (8002444 <_ZN9LineTrace3pidEv+0x134>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f900 	bl	8000578 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002382:	edd7 7a07 	vldr	s15, [r7, #28]
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	ee17 0a90 	vmov	r0, s15
 800238e:	f7fe f8f3 	bl	8000578 <__aeabi_f2d>
 8002392:	a329      	add	r3, pc, #164	; (adr r3, 8002438 <_ZN9LineTrace3pidEv+0x128>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f946 	bl	8000628 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff8a 	bl	80002bc <__adddf3>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	f7fe fc32 	bl	8000c18 <__aeabi_d2f>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <_ZN9LineTrace3pidEv+0x134>)
 80023b8:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80023c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80023c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <_ZN9LineTrace3pidEv+0x134>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80023e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80023e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <_ZN9LineTrace3pidEv+0x134>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fe:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	6938      	ldr	r0, [r7, #16]
 8002408:	f7fe f8b6 	bl	8000578 <__aeabi_f2d>
 800240c:	4605      	mov	r5, r0
 800240e:	460e      	mov	r6, r1
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7fe f8b1 	bl	8000578 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ec43 2b11 	vmov	d1, r2, r3
 800241e:	ec46 5b10 	vmov	d0, r5, r6
 8002422:	4620      	mov	r0, r4
 8002424:	f000 f9e6 	bl	80027f4 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_ZN9LineTrace3pidEv+0x130>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	6013      	str	r3, [r2, #0]

}
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002436:	bf00      	nop
 8002438:	d2f1a9fc 	.word	0xd2f1a9fc
 800243c:	3f50624d 	.word	0x3f50624d
 8002440:	20000200 	.word	0x20000200
 8002444:	20000204 	.word	0x20000204

08002448 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	ed87 0a02 	vstr	s0, [r7, #8]
 8002454:	edc7 0a01 	vstr	s1, [r7, #4]
 8002458:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	621a      	str	r2, [r3, #32]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7f1b      	ldrb	r3, [r3, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <_ZN9LineTrace4flipEv+0x16>
		pid();
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff21 	bl	8002310 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fe56 	bl	8002184 <_ZN10LineSensor13emergencyStopEv>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d011      	beq.n	8002502 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002520 <_ZN9LineTrace4flipEv+0x68>
 80024e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002520 <_ZN9LineTrace4flipEv+0x68>
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f982 	bl	80027f4 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	330c      	adds	r3, #12
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	2101      	movs	r1, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fb48 	bl	8001b90 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002500:	e007      	b.n	8002512 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	330c      	adds	r3, #12
 8002506:	f04f 32ff 	mov.w	r2, #4294967295
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fb3f 	bl	8001b90 <_ZN3LED2LREaa>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w
	...

08002528 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	771a      	strb	r2, [r3, #28]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	0000      	movs	r0, r0
 8002544:	0000      	movs	r0, r0
	...

08002548 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002570 <_ZN9LineTrace4stopEv+0x28>
 800255e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002570 <_ZN9LineTrace4stopEv+0x28>
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f946 	bl	80027f4 <_ZN5Motor8setRatioEdd>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
	...

08002578 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_(0){}
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002586:	3330      	adds	r3, #48	; 0x30
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002592:	3332      	adds	r3, #50	; 0x32
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <_ZN6Logger10sdCardInitEv>:

void Logger::sdCardInit()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
	if(sd_mount() == 1){
 80025b0:	f7fe ffd4 	bl	800155c <sd_mount>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <_ZN6Logger10sdCardInitEv+0x24>
	  printf("mount success\r\n");
 80025c4:	4815      	ldr	r0, [pc, #84]	; (800261c <_ZN6Logger10sdCardInitEv+0x74>)
 80025c6:	f00f fc45 	bl	8011e54 <puts>
 80025ca:	e002      	b.n	80025d2 <_ZN6Logger10sdCardInitEv+0x2a>
	}
	else{
	  printf("error\r\n");
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <_ZN6Logger10sdCardInitEv+0x78>)
 80025ce:	f00f fc41 	bl	8011e54 <puts>
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 80025d2:	2364      	movs	r3, #100	; 0x64
 80025d4:	60fb      	str	r3, [r7, #12]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80025d6:	f107 020c 	add.w	r2, r7, #12
 80025da:	2301      	movs	r3, #1
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	2201      	movs	r2, #1
 80025e2:	4910      	ldr	r1, [pc, #64]	; (8002624 <_ZN6Logger10sdCardInitEv+0x7c>)
 80025e4:	4810      	ldr	r0, [pc, #64]	; (8002628 <_ZN6Logger10sdCardInitEv+0x80>)
 80025e6:	f7fe ff15 	bl	8001414 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	2201      	movs	r2, #1
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <_ZN6Logger10sdCardInitEv+0x7c>)
 80025f2:	480d      	ldr	r0, [pc, #52]	; (8002628 <_ZN6Logger10sdCardInitEv+0x80>)
 80025f4:	f7fe ff6c 	bl	80014d0 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80025f8:	f107 0208 	add.w	r2, r7, #8
 80025fc:	2301      	movs	r3, #1
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	2201      	movs	r2, #1
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <_ZN6Logger10sdCardInitEv+0x84>)
 8002606:	4808      	ldr	r0, [pc, #32]	; (8002628 <_ZN6Logger10sdCardInitEv+0x80>)
 8002608:	f7fe ff04 	bl	8001414 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 800260c:	4808      	ldr	r0, [pc, #32]	; (8002630 <_ZN6Logger10sdCardInitEv+0x88>)
 800260e:	f00f fc21 	bl	8011e54 <puts>
	//sd_unmount();
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	08015f88 	.word	0x08015f88
 8002620:	08015f98 	.word	0x08015f98
 8002624:	08015fa0 	.word	0x08015fa0
 8002628:	08015fac 	.word	0x08015fac
 800262c:	08015fb4 	.word	0x08015fb4
 8002630:	08015fc0 	.word	0x08015fc0

08002634 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	ed87 0a00 	vstr	s0, [r7]

	if(recording_flag_ == true){
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002646:	3330      	adds	r3, #48	; 0x30
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d024      	beq.n	8002698 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_] = data;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]

		log_index_++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002676:	3332      	adds	r3, #50	; 0x32
 8002678:	801a      	strh	r2, [r3, #0]

		if(log_index_ >= LOG_DATA_SIZE) log_index_ = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002680:	3332      	adds	r3, #50	; 0x32
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	f241 3287 	movw	r2, #4999	; 0x1387
 8002688:	4293      	cmp	r3, r2
 800268a:	d905      	bls.n	8002698 <_ZN6Logger8storeLogEf+0x64>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	2200      	movs	r2, #0
 8002696:	801a      	strh	r2, [r3, #0]
	}
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_ZN6Logger8saveLogsEPKcS1_>:
{

}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]

	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE, store_data_float_, OVER_WRITE); //write
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68b8      	ldr	r0, [r7, #8]
 80026c0:	f7fe fe42 	bl	8001348 <sd_write_array_float>

}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZN6Logger5startEv>:

	log_index_ = 0;
}

void Logger::start()
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80026da:	3330      	adds	r3, #48	; 0x30
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80026fa:	3330      	adds	r3, #48	; 0x30
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	805a      	strh	r2, [r3, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002738:	2108      	movs	r1, #8
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <_ZN5Motor4initEv+0x20>)
 800273c:	f007 fb68 	bl	8009e10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002740:	210c      	movs	r1, #12
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <_ZN5Motor4initEv+0x20>)
 8002744:	f007 fb64 	bl	8009e10 <HAL_TIM_PWM_Start>

}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000a188 	.word	0x2000a188

08002754 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	da0d      	bge.n	8002782 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800276c:	481f      	ldr	r0, [pc, #124]	; (80027ec <_ZN5Motor9motorCtrlEv+0x98>)
 800276e:	f003 ff67 	bl	8006640 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	b29b      	uxth	r3, r3
 800277a:	425b      	negs	r3, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	81fb      	strh	r3, [r7, #14]
 8002780:	e00a      	b.n	8002798 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002788:	4818      	ldr	r0, [pc, #96]	; (80027ec <_ZN5Motor9motorCtrlEv+0x98>)
 800278a:	f003 ff59 	bl	8006640 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002794:	b29b      	uxth	r3, r3
 8002796:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da0d      	bge.n	80027be <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a8:	4810      	ldr	r0, [pc, #64]	; (80027ec <_ZN5Motor9motorCtrlEv+0x98>)
 80027aa:	f003 ff49 	bl	8006640 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	425b      	negs	r3, r3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	81bb      	strh	r3, [r7, #12]
 80027bc:	e00a      	b.n	80027d4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <_ZN5Motor9motorCtrlEv+0x98>)
 80027c6:	f003 ff3b 	bl	8006640 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80027d4:	89fa      	ldrh	r2, [r7, #14]
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80027dc:	89ba      	ldrh	r2, [r7, #12]
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	2000a188 	.word	0x2000a188

080027f4 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6178      	str	r0, [r7, #20]
 80027fc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002800:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <_ZN5Motor8setRatioEdd+0xd8>)
 800280a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800280e:	f7fe f99b 	bl	8000b48 <__aeabi_dcmpgt>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <_ZN5Motor8setRatioEdd+0x30>
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	4c2b      	ldr	r4, [pc, #172]	; (80028cc <_ZN5Motor8setRatioEdd+0xd8>)
 800281e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002822:	e00e      	b.n	8002842 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800282a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800282e:	f7fe f96d 	bl	8000b0c <__aeabi_dcmplt>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <_ZN5Motor8setRatioEdd+0x4e>
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	4c24      	ldr	r4, [pc, #144]	; (80028d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800283e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <_ZN5Motor8setRatioEdd+0xd8>)
 8002848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800284c:	f7fe f97c 	bl	8000b48 <__aeabi_dcmpgt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <_ZN5Motor8setRatioEdd+0x6e>
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	4c1c      	ldr	r4, [pc, #112]	; (80028cc <_ZN5Motor8setRatioEdd+0xd8>)
 800285c:	e9c7 3400 	strd	r3, r4, [r7]
 8002860:	e00e      	b.n	8002880 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <_ZN5Motor8setRatioEdd+0xdc>)
 8002868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800286c:	f7fe f94e 	bl	8000b0c <__aeabi_dcmplt>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <_ZN5Motor8setRatioEdd+0x8c>
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	4c15      	ldr	r4, [pc, #84]	; (80028d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800287c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_ZN5Motor8setRatioEdd+0xe0>)
 8002886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800288a:	f7fd fecd 	bl	8000628 <__aeabi_dmul>
 800288e:	4603      	mov	r3, r0
 8002890:	460c      	mov	r4, r1
 8002892:	4618      	mov	r0, r3
 8002894:	4621      	mov	r1, r4
 8002896:	f7fe f977 	bl	8000b88 <__aeabi_d2iz>
 800289a:	4603      	mov	r3, r0
 800289c:	b21a      	sxth	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <_ZN5Motor8setRatioEdd+0xe0>)
 80028a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028ac:	f7fd febc 	bl	8000628 <__aeabi_dmul>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	4618      	mov	r0, r3
 80028b6:	4621      	mov	r1, r4
 80028b8:	f7fe f966 	bl	8000b88 <__aeabi_d2iz>
 80028bc:	4603      	mov	r3, r0
 80028be:	b21a      	sxth	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	805a      	strh	r2, [r3, #2]

}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	3ff00000 	.word	0x3ff00000
 80028d0:	bff00000 	.word	0xbff00000
 80028d4:	409c2000 	.word	0x409c2000

080028d8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
{
	encoder_ = encoder;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa3a 	bl	8002da8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002934:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_omega = velocity_ctrl_->getCurrentOmega();
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fa42 	bl	8002dc6 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 8002942:	ed87 0a04 	vstr	s0, [r7, #16]

	float delta_theta = current_omega * DELTA_T;
 8002946:	6938      	ldr	r0, [r7, #16]
 8002948:	f7fd fe16 	bl	8000578 <__aeabi_f2d>
 800294c:	a357      	add	r3, pc, #348	; (adr r3, 8002aac <_ZN8Odometry12calcPotitionEv+0x18c>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd fe69 	bl	8000628 <__aeabi_dmul>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	4618      	mov	r0, r3
 800295c:	4621      	mov	r1, r4
 800295e:	f7fe f95b 	bl	8000c18 <__aeabi_d2f>
 8002962:	4603      	mov	r3, r0
 8002964:	60fb      	str	r3, [r7, #12]

	x_ = x_ + current_velocity * DELTA_T * cos(theta_ + delta_theta / 2);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fe04 	bl	8000578 <__aeabi_f2d>
 8002970:	4604      	mov	r4, r0
 8002972:	460d      	mov	r5, r1
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f7fd fdff 	bl	8000578 <__aeabi_f2d>
 800297a:	a34c      	add	r3, pc, #304	; (adr r3, 8002aac <_ZN8Odometry12calcPotitionEv+0x18c>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fe52 	bl	8000628 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4690      	mov	r8, r2
 800298a:	4699      	mov	r9, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002992:	edd7 6a03 	vldr	s13, [r7, #12]
 8002996:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800299a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	ee17 0a90 	vmov	r0, s15
 80029a6:	f7fd fde7 	bl	8000578 <__aeabi_f2d>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	ec43 2b10 	vmov	d0, r2, r3
 80029b2:	f00d fb01 	bl	800ffb8 <cos>
 80029b6:	ec53 2b10 	vmov	r2, r3, d0
 80029ba:	4640      	mov	r0, r8
 80029bc:	4649      	mov	r1, r9
 80029be:	f7fd fe33 	bl	8000628 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4620      	mov	r0, r4
 80029c8:	4629      	mov	r1, r5
 80029ca:	f7fd fc77 	bl	80002bc <__adddf3>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	4618      	mov	r0, r3
 80029d4:	4621      	mov	r1, r4
 80029d6:	f7fe f91f 	bl	8000c18 <__aeabi_d2f>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
	y_ = y_ + current_velocity * DELTA_T * sin(theta_ + delta_theta / 2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdc7 	bl	8000578 <__aeabi_f2d>
 80029ea:	4604      	mov	r4, r0
 80029ec:	460d      	mov	r5, r1
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7fd fdc2 	bl	8000578 <__aeabi_f2d>
 80029f4:	a32d      	add	r3, pc, #180	; (adr r3, 8002aac <_ZN8Odometry12calcPotitionEv+0x18c>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd fe15 	bl	8000628 <__aeabi_dmul>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4690      	mov	r8, r2
 8002a04:	4699      	mov	r9, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a0c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a10:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	ee17 0a90 	vmov	r0, s15
 8002a20:	f7fd fdaa 	bl	8000578 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	ec43 2b10 	vmov	d0, r2, r3
 8002a2c:	f00d fb08 	bl	8010040 <sin>
 8002a30:	ec53 2b10 	vmov	r2, r3, d0
 8002a34:	4640      	mov	r0, r8
 8002a36:	4649      	mov	r1, r9
 8002a38:	f7fd fdf6 	bl	8000628 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd fc3a 	bl	80002bc <__adddf3>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f7fe f8e2 	bl	8000c18 <__aeabi_d2f>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
	theta_ = theta_ + delta_theta;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	edc3 7a05 	vstr	s15, [r3, #20]


	monitor_x = x_;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <_ZN8Odometry12calcPotitionEv+0x180>)
 8002a74:	6013      	str	r3, [r2, #0]
	monitor_y = y_;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <_ZN8Odometry12calcPotitionEv+0x184>)
 8002a7c:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002a84:	6013      	str	r3, [r2, #0]

	encoder_->getDistance();
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fbd4 	bl	8001238 <_ZN7Encoder11getDistanceEv>

}
 8002a90:	bf00      	nop
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	20000208 	.word	0x20000208
 8002aa4:	2000020c 	.word	0x2000020c
 8002aa8:	20000210 	.word	0x20000210
 8002aac:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ab0:	3f50624d 	.word	0x3f50624d

08002ab4 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff2f 	bl	8002920 <_ZN8Odometry12calcPotitionEv>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4822      	ldr	r0, [pc, #136]	; (8002b64 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002adc:	f003 fd98 	bl	8006610 <HAL_GPIO_ReadPin>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8002af8:	2108      	movs	r1, #8
 8002afa:	481a      	ldr	r0, [pc, #104]	; (8002b64 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002afc:	f003 fd88 	bl	8006610 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <_ZN12RotarySwitch8getValueEv+0x4c>
 8002b10:	89fb      	ldrh	r3, [r7, #14]
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8002b18:	2110      	movs	r1, #16
 8002b1a:	4812      	ldr	r0, [pc, #72]	; (8002b64 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002b1c:	f003 fd78 	bl	8006610 <HAL_GPIO_ReadPin>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <_ZN12RotarySwitch8getValueEv+0x6c>
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	480a      	ldr	r0, [pc, #40]	; (8002b64 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002b3c:	f003 fd68 	bl	8006610 <HAL_GPIO_ReadPin>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <_ZN12RotarySwitch8getValueEv+0x8c>
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8002b58:	89fb      	ldrh	r3, [r7, #14]

}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40020c00 	.word	0x40020c00

08002b68 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
{

}
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d111      	bne.n	8002bb6 <_ZN10SideSensor12updateStatusEt+0x36>
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e010      	b.n	8002bd8 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d10d      	bne.n	8002bd8 <_ZN10SideSensor12updateStatusEt+0x58>
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d111      	bne.n	8002c04 <_ZN10SideSensor12updateStatusEt+0x84>
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8002c02:	e011      	b.n	8002c28 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0a:	d10d      	bne.n	8002c28 <_ZN10SideSensor12updateStatusEt+0xa8>
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f083 0302 	eor.w	r3, r3, #2
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	20000214 	.word	0x20000214
 8002c38:	20000215 	.word	0x20000215

08002c3c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cce:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cf6:	edc7 0a01 	vstr	s1, [r7, #4]
 8002cfa:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	619a      	str	r2, [r3, #24]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d28:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d2c:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	61da      	str	r2, [r3, #28]
	o_kd_ = kd;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]
	o_ki_ = ki;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_ZN12VelocityCtrl5startEv>:


}

void VelocityCtrl::start()
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	0000      	movs	r0, r0
 8002d6c:	0000      	movs	r0, r0
	...

08002d70 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002da0 <_ZN12VelocityCtrl4stopEv+0x30>
 8002d88:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002da0 <_ZN12VelocityCtrl4stopEv+0x30>
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fd31 	bl	80027f4 <_ZN5Motor8setRatioEdd>

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w
	...

08002da8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	ee07 3a90 	vmov	s15, r3
}
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_ZN12VelocityCtrl15getCurrentOmegaEv>:

float VelocityCtrl::getCurrentOmega()
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	return current_omega_;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	ee07 3a90 	vmov	s15, r3
}
 8002dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002df0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002e04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002e0c:	e000      	b.n	8002e10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002e0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002e10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f9      	beq.n	8002e0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002e1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002e24:	687b      	ldr	r3, [r7, #4]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e009      	b.n	8002e58 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ffc9 	bl	8002de4 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf1      	blt.n	8002e44 <_write+0x12>
  }
  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fe46 	bl	8004b08 <cppExit>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8002e96:	f001 fdf7 	bl	8004a88 <cppFlip1ms>

		tim6_timer++;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ea2:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d902      	bls.n	8002eb4 <HAL_TIM_PeriodElapsedCallback+0x30>
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8002ebe:	f001 fe09 	bl	8004ad4 <cppFlip100ns>

		tim7_timer++;
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002eca:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d902      	bls.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x58>
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8002ee6:	f001 fdff 	bl	8004ae8 <cppFlip10ms>

		tim13_timer++;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ef2:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d902      	bls.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x80>
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
	}

}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40001000 	.word	0x40001000
 8002f10:	2000a2f8 	.word	0x2000a2f8
 8002f14:	0001869f 	.word	0x0001869f
 8002f18:	40001400 	.word	0x40001400
 8002f1c:	2000a33c 	.word	0x2000a33c
 8002f20:	40001c00 	.word	0x40001c00
 8002f24:	2000a340 	.word	0x2000a340

08002f28 <init>:

void init()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f32:	4808      	ldr	r0, [pc, #32]	; (8002f54 <init+0x2c>)
 8002f34:	f003 fb84 	bl	8006640 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <init+0x30>)
 8002f3a:	f006 ff1a 	bl	8009d72 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002f3e:	4807      	ldr	r0, [pc, #28]	; (8002f5c <init+0x34>)
 8002f40:	f006 ff17 	bl	8009d72 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002f44:	4806      	ldr	r0, [pc, #24]	; (8002f60 <init+0x38>)
 8002f46:	f006 ff14 	bl	8009d72 <HAL_TIM_Base_Start_IT>

	cppInit();
 8002f4a:	f001 fd51 	bl	80049f0 <cppInit>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	2000a424 	.word	0x2000a424
 8002f5c:	2000a5c8 	.word	0x2000a5c8
 8002f60:	2000a344 	.word	0x2000a344

08002f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f68:	f002 f862 	bl	8005030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f6c:	f000 f82a 	bl	8002fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f70:	f000 fdbc 	bl	8003aec <MX_GPIO_Init>
  MX_DMA_Init();
 8002f74:	f000 fd8a 	bl	8003a8c <MX_DMA_Init>
  MX_I2C2_Init();
 8002f78:	f000 f9e8 	bl	800334c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002f7c:	f000 fa14 	bl	80033a8 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002f80:	f000 fa32 	bl	80033e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002f84:	f000 fa66 	bl	8003454 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002f88:	f000 fb70 	bl	800366c <MX_TIM4_Init>
  MX_TIM8_Init();
 8002f8c:	f000 fc3c 	bl	8003808 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002f90:	f000 fd52 	bl	8003a38 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002f94:	f008 fec0 	bl	800bd18 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002f98:	f000 fbcc 	bl	8003734 <MX_TIM6_Init>
  MX_I2C1_Init();
 8002f9c:	f000 f9a8 	bl	80032f0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002fa0:	f000 fb00 	bl	80035a4 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002fa4:	f000 fc88 	bl	80038b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002fa8:	f000 fcd4 	bl	8003954 <MX_TIM11_Init>
  MX_ADC2_Init();
 8002fac:	f000 f898 	bl	80030e0 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002fb0:	f000 fbf6 	bl	80037a0 <MX_TIM7_Init>
  MX_TIM13_Init();
 8002fb4:	f000 fd1c 	bl	80039f0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002fb8:	f7ff ffb6 	bl	8002f28 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8002fbc:	f001 fdb4 	bl	8004b28 <cppLoop>
 8002fc0:	e7fc      	b.n	8002fbc <main+0x58>
	...

08002fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b0a4      	sub	sp, #144	; 0x90
 8002fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fce:	2234      	movs	r2, #52	; 0x34
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00e f870 	bl	80110b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	223c      	movs	r2, #60	; 0x3c
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f00e f861 	bl	80110b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <SystemClock_Config+0x114>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <SystemClock_Config+0x114>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <SystemClock_Config+0x114>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <SystemClock_Config+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a30      	ldr	r2, [pc, #192]	; (80030dc <SystemClock_Config+0x118>)
 800301c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <SystemClock_Config+0x118>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800302e:	2301      	movs	r3, #1
 8003030:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003038:	2302      	movs	r3, #2
 800303a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800303c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003040:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003042:	2308      	movs	r3, #8
 8003044:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003046:	23b4      	movs	r3, #180	; 0xb4
 8003048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003052:	2308      	movs	r3, #8
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003058:	2302      	movs	r3, #2
 800305a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800305e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003062:	4618      	mov	r0, r3
 8003064:	f004 fbdc 	bl	8007820 <HAL_RCC_OscConfig>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800306e:	f000 fe93 	bl	8003d98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003072:	f003 ff57 	bl	8006f24 <HAL_PWREx_EnableOverDrive>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800307c:	f000 fe8c 	bl	8003d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003080:	230f      	movs	r3, #15
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003084:	2302      	movs	r3, #2
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003088:	2300      	movs	r3, #0
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800308c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003090:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003096:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800309c:	2105      	movs	r1, #5
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 ff90 	bl	8006fc4 <HAL_RCC_ClockConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <SystemClock_Config+0xea>
  {
    Error_Handler();
 80030aa:	f000 fe75 	bl	8003d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80030ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80030b4:	2300      	movs	r3, #0
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80030b8:	2300      	movs	r3, #0
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 f96f 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80030cc:	f000 fe64 	bl	8003d98 <Error_Handler>
  }
}
 80030d0:	bf00      	nop
 80030d2:	3790      	adds	r7, #144	; 0x90
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000

080030e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030e6:	463b      	mov	r3, r7
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80030f2:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <MX_ADC2_Init+0x204>)
 80030f4:	4a7c      	ldr	r2, [pc, #496]	; (80032e8 <MX_ADC2_Init+0x208>)
 80030f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80030f8:	4b7a      	ldr	r3, [pc, #488]	; (80032e4 <MX_ADC2_Init+0x204>)
 80030fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003108:	2201      	movs	r2, #1
 800310a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <MX_ADC2_Init+0x204>)
 800310e:	2201      	movs	r2, #1
 8003110:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003112:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <MX_ADC2_Init+0x204>)
 800311c:	2200      	movs	r2, #0
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003120:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003122:	4a72      	ldr	r2, [pc, #456]	; (80032ec <MX_ADC2_Init+0x20c>)
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003126:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003128:	2200      	movs	r2, #0
 800312a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <MX_ADC2_Init+0x204>)
 800312e:	220e      	movs	r2, #14
 8003130:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <MX_ADC2_Init+0x204>)
 800313c:	2201      	movs	r2, #1
 800313e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003140:	4868      	ldr	r0, [pc, #416]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003142:	f002 f809 	bl	8005158 <HAL_ADC_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800314c:	f000 fe24 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003150:	230a      	movs	r3, #10
 8003152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003154:	2301      	movs	r3, #1
 8003156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003158:	2306      	movs	r3, #6
 800315a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800315c:	463b      	mov	r3, r7
 800315e:	4619      	mov	r1, r3
 8003160:	4860      	ldr	r0, [pc, #384]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003162:	f002 f94d 	bl	8005400 <HAL_ADC_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800316c:	f000 fe14 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003170:	230b      	movs	r3, #11
 8003172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003174:	2302      	movs	r3, #2
 8003176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003178:	463b      	mov	r3, r7
 800317a:	4619      	mov	r1, r3
 800317c:	4859      	ldr	r0, [pc, #356]	; (80032e4 <MX_ADC2_Init+0x204>)
 800317e:	f002 f93f 	bl	8005400 <HAL_ADC_ConfigChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003188:	f000 fe06 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800318c:	230c      	movs	r3, #12
 800318e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003190:	2303      	movs	r3, #3
 8003192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	4619      	mov	r1, r3
 8003198:	4852      	ldr	r0, [pc, #328]	; (80032e4 <MX_ADC2_Init+0x204>)
 800319a:	f002 f931 	bl	8005400 <HAL_ADC_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80031a4:	f000 fdf8 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80031a8:	230d      	movs	r3, #13
 80031aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80031ac:	2304      	movs	r3, #4
 80031ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031b0:	463b      	mov	r3, r7
 80031b2:	4619      	mov	r1, r3
 80031b4:	484b      	ldr	r0, [pc, #300]	; (80032e4 <MX_ADC2_Init+0x204>)
 80031b6:	f002 f923 	bl	8005400 <HAL_ADC_ConfigChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80031c0:	f000 fdea 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80031c8:	2305      	movs	r3, #5
 80031ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031cc:	463b      	mov	r3, r7
 80031ce:	4619      	mov	r1, r3
 80031d0:	4844      	ldr	r0, [pc, #272]	; (80032e4 <MX_ADC2_Init+0x204>)
 80031d2:	f002 f915 	bl	8005400 <HAL_ADC_ConfigChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80031dc:	f000 fddc 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80031e0:	2301      	movs	r3, #1
 80031e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80031e4:	2306      	movs	r3, #6
 80031e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031e8:	463b      	mov	r3, r7
 80031ea:	4619      	mov	r1, r3
 80031ec:	483d      	ldr	r0, [pc, #244]	; (80032e4 <MX_ADC2_Init+0x204>)
 80031ee:	f002 f907 	bl	8005400 <HAL_ADC_ConfigChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80031f8:	f000 fdce 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80031fc:	2302      	movs	r3, #2
 80031fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003200:	2307      	movs	r3, #7
 8003202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003204:	463b      	mov	r3, r7
 8003206:	4619      	mov	r1, r3
 8003208:	4836      	ldr	r0, [pc, #216]	; (80032e4 <MX_ADC2_Init+0x204>)
 800320a:	f002 f8f9 	bl	8005400 <HAL_ADC_ConfigChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003214:	f000 fdc0 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003218:	2303      	movs	r3, #3
 800321a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800321c:	2308      	movs	r3, #8
 800321e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003220:	463b      	mov	r3, r7
 8003222:	4619      	mov	r1, r3
 8003224:	482f      	ldr	r0, [pc, #188]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003226:	f002 f8eb 	bl	8005400 <HAL_ADC_ConfigChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003230:	f000 fdb2 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003234:	2304      	movs	r3, #4
 8003236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003238:	2309      	movs	r3, #9
 800323a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800323c:	463b      	mov	r3, r7
 800323e:	4619      	mov	r1, r3
 8003240:	4828      	ldr	r0, [pc, #160]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003242:	f002 f8dd 	bl	8005400 <HAL_ADC_ConfigChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 800324c:	f000 fda4 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003250:	2305      	movs	r3, #5
 8003252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003254:	230a      	movs	r3, #10
 8003256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003258:	463b      	mov	r3, r7
 800325a:	4619      	mov	r1, r3
 800325c:	4821      	ldr	r0, [pc, #132]	; (80032e4 <MX_ADC2_Init+0x204>)
 800325e:	f002 f8cf 	bl	8005400 <HAL_ADC_ConfigChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003268:	f000 fd96 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800326c:	2306      	movs	r3, #6
 800326e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003270:	230b      	movs	r3, #11
 8003272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003274:	463b      	mov	r3, r7
 8003276:	4619      	mov	r1, r3
 8003278:	481a      	ldr	r0, [pc, #104]	; (80032e4 <MX_ADC2_Init+0x204>)
 800327a:	f002 f8c1 	bl	8005400 <HAL_ADC_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003284:	f000 fd88 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003288:	2307      	movs	r3, #7
 800328a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800328c:	230c      	movs	r3, #12
 800328e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003290:	463b      	mov	r3, r7
 8003292:	4619      	mov	r1, r3
 8003294:	4813      	ldr	r0, [pc, #76]	; (80032e4 <MX_ADC2_Init+0x204>)
 8003296:	f002 f8b3 	bl	8005400 <HAL_ADC_ConfigChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80032a0:	f000 fd7a 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80032a4:	2308      	movs	r3, #8
 80032a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80032a8:	230d      	movs	r3, #13
 80032aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032ac:	463b      	mov	r3, r7
 80032ae:	4619      	mov	r1, r3
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <MX_ADC2_Init+0x204>)
 80032b2:	f002 f8a5 	bl	8005400 <HAL_ADC_ConfigChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80032bc:	f000 fd6c 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80032c0:	2309      	movs	r3, #9
 80032c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80032c4:	230e      	movs	r3, #14
 80032c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032c8:	463b      	mov	r3, r7
 80032ca:	4619      	mov	r1, r3
 80032cc:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_ADC2_Init+0x204>)
 80032ce:	f002 f897 	bl	8005400 <HAL_ADC_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80032d8:	f000 fd5e 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	2000a1c8 	.word	0x2000a1c8
 80032e8:	40012100 	.word	0x40012100
 80032ec:	0f000001 	.word	0x0f000001

080032f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <MX_I2C1_Init+0x50>)
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <MX_I2C1_Init+0x54>)
 80032f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_I2C1_Init+0x50>)
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <MX_I2C1_Init+0x58>)
 80032fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_I2C1_Init+0x50>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_I2C1_Init+0x50>)
 8003308:	2200      	movs	r2, #0
 800330a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <MX_I2C1_Init+0x50>)
 800330e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_I2C1_Init+0x50>)
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <MX_I2C1_Init+0x50>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <MX_I2C1_Init+0x50>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <MX_I2C1_Init+0x50>)
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800332c:	4804      	ldr	r0, [pc, #16]	; (8003340 <MX_I2C1_Init+0x50>)
 800332e:	f003 f9b9 	bl	80066a4 <HAL_I2C_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003338:	f000 fd2e 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	2000a210 	.word	0x2000a210
 8003344:	40005400 	.word	0x40005400
 8003348:	000186a0 	.word	0x000186a0

0800334c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <MX_I2C2_Init+0x50>)
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <MX_I2C2_Init+0x54>)
 8003354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_I2C2_Init+0x50>)
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_I2C2_Init+0x58>)
 800335a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_I2C2_Init+0x50>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_I2C2_Init+0x50>)
 8003364:	2200      	movs	r2, #0
 8003366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_I2C2_Init+0x50>)
 800336a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800336e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_I2C2_Init+0x50>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_I2C2_Init+0x50>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <MX_I2C2_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_I2C2_Init+0x50>)
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <MX_I2C2_Init+0x50>)
 800338a:	f003 f98b 	bl	80066a4 <HAL_I2C_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003394:	f000 fd00 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000a2a4 	.word	0x2000a2a4
 80033a0:	40005800 	.word	0x40005800
 80033a4:	000186a0 	.word	0x000186a0

080033a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033ae:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <MX_SDIO_SD_Init+0x3c>)
 80033b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <MX_SDIO_SD_Init+0x38>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	2000a4a4 	.word	0x2000a4a4
 80033e4:	40012c00 	.word	0x40012c00

080033e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <MX_SPI2_Init+0x64>)
 80033ee:	4a18      	ldr	r2, [pc, #96]	; (8003450 <MX_SPI2_Init+0x68>)
 80033f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <MX_SPI2_Init+0x64>)
 80033f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <MX_SPI2_Init+0x64>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <MX_SPI2_Init+0x64>)
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <MX_SPI2_Init+0x64>)
 8003408:	2202      	movs	r2, #2
 800340a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <MX_SPI2_Init+0x64>)
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <MX_SPI2_Init+0x64>)
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <MX_SPI2_Init+0x64>)
 800341c:	2228      	movs	r2, #40	; 0x28
 800341e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <MX_SPI2_Init+0x64>)
 8003422:	2200      	movs	r2, #0
 8003424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <MX_SPI2_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <MX_SPI2_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <MX_SPI2_Init+0x64>)
 8003434:	220a      	movs	r2, #10
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_SPI2_Init+0x64>)
 800343a:	f005 ff1b 	bl	8009274 <HAL_SPI_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003444:	f000 fca8 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000a0f0 	.word	0x2000a0f0
 8003450:	40003800 	.word	0x40003800

08003454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b09a      	sub	sp, #104	; 0x68
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800345a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f00d fe28 	bl	80110b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003472:	f107 0320 	add.w	r3, r7, #32
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	60da      	str	r2, [r3, #12]
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	615a      	str	r2, [r3, #20]
 8003484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003486:	463b      	mov	r3, r7
 8003488:	2220      	movs	r2, #32
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f00d fe13 	bl	80110b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003492:	4b42      	ldr	r3, [pc, #264]	; (800359c <MX_TIM1_Init+0x148>)
 8003494:	4a42      	ldr	r2, [pc, #264]	; (80035a0 <MX_TIM1_Init+0x14c>)
 8003496:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <MX_TIM1_Init+0x148>)
 800349a:	2200      	movs	r2, #0
 800349c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <MX_TIM1_Init+0x148>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80034a4:	4b3d      	ldr	r3, [pc, #244]	; (800359c <MX_TIM1_Init+0x148>)
 80034a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <MX_TIM1_Init+0x148>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <MX_TIM1_Init+0x148>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <MX_TIM1_Init+0x148>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034be:	4837      	ldr	r0, [pc, #220]	; (800359c <MX_TIM1_Init+0x148>)
 80034c0:	f006 fc7b 	bl	8009dba <HAL_TIM_PWM_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80034ca:	f000 fc65 	bl	8003d98 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034ce:	2303      	movs	r3, #3
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034d2:	2300      	movs	r3, #0
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034d6:	2301      	movs	r3, #1
 80034d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034da:	2300      	movs	r3, #0
 80034dc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034e2:	2300      	movs	r3, #0
 80034e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034e6:	2301      	movs	r3, #1
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034ea:	2300      	movs	r3, #0
 80034ec:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80034f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034f6:	4619      	mov	r1, r3
 80034f8:	4828      	ldr	r0, [pc, #160]	; (800359c <MX_TIM1_Init+0x148>)
 80034fa:	f006 fcc7 	bl	8009e8c <HAL_TIM_Encoder_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003504:	f000 fc48 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003514:	4619      	mov	r1, r3
 8003516:	4821      	ldr	r0, [pc, #132]	; (800359c <MX_TIM1_Init+0x148>)
 8003518:	f007 f9ee 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003522:	f000 fc39 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003526:	2360      	movs	r3, #96	; 0x60
 8003528:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003542:	f107 0320 	add.w	r3, r7, #32
 8003546:	2208      	movs	r2, #8
 8003548:	4619      	mov	r1, r3
 800354a:	4814      	ldr	r0, [pc, #80]	; (800359c <MX_TIM1_Init+0x148>)
 800354c:	f006 fe70 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003556:	f000 fc1f 	bl	8003d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800356e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003578:	463b      	mov	r3, r7
 800357a:	4619      	mov	r1, r3
 800357c:	4807      	ldr	r0, [pc, #28]	; (800359c <MX_TIM1_Init+0x148>)
 800357e:	f007 fa37 	bl	800a9f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003588:	f000 fc06 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800358c:	4803      	ldr	r0, [pc, #12]	; (800359c <MX_TIM1_Init+0x148>)
 800358e:	f000 ffeb 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003592:	bf00      	nop
 8003594:	3768      	adds	r7, #104	; 0x68
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000a464 	.word	0x2000a464
 80035a0:	40010000 	.word	0x40010000

080035a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035aa:	f107 0320 	add.w	r3, r7, #32
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <MX_TIM3_Init+0xc4>)
 80035ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035ec:	481d      	ldr	r0, [pc, #116]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035ee:	f006 fbe4 	bl	8009dba <HAL_TIM_PWM_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80035f8:	f000 fbce 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003604:	f107 0320 	add.w	r3, r7, #32
 8003608:	4619      	mov	r1, r3
 800360a:	4816      	ldr	r0, [pc, #88]	; (8003664 <MX_TIM3_Init+0xc0>)
 800360c:	f007 f974 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003616:	f000 fbbf 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800361a:	2360      	movs	r3, #96	; 0x60
 800361c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2200      	movs	r2, #0
 800362e:	4619      	mov	r1, r3
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <MX_TIM3_Init+0xc0>)
 8003632:	f006 fdfd 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800363c:	f000 fbac 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2204      	movs	r2, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4807      	ldr	r0, [pc, #28]	; (8003664 <MX_TIM3_Init+0xc0>)
 8003648:	f006 fdf2 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003652:	f000 fba1 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003656:	4803      	ldr	r0, [pc, #12]	; (8003664 <MX_TIM3_Init+0xc0>)
 8003658:	f000 ff86 	bl	8004568 <HAL_TIM_MspPostInit>

}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000a2fc 	.word	0x2000a2fc
 8003668:	40000400 	.word	0x40000400

0800366c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <MX_TIM4_Init+0xc0>)
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <MX_TIM4_Init+0xc4>)
 8003692:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003694:	4b25      	ldr	r3, [pc, #148]	; (800372c <MX_TIM4_Init+0xc0>)
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <MX_TIM4_Init+0xc0>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80036a0:	4b22      	ldr	r3, [pc, #136]	; (800372c <MX_TIM4_Init+0xc0>)
 80036a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80036a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <MX_TIM4_Init+0xc0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <MX_TIM4_Init+0xc0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036b4:	481d      	ldr	r0, [pc, #116]	; (800372c <MX_TIM4_Init+0xc0>)
 80036b6:	f006 fb80 	bl	8009dba <HAL_TIM_PWM_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80036c0:	f000 fb6a 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036cc:	f107 0320 	add.w	r3, r7, #32
 80036d0:	4619      	mov	r1, r3
 80036d2:	4816      	ldr	r0, [pc, #88]	; (800372c <MX_TIM4_Init+0xc0>)
 80036d4:	f007 f910 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80036de:	f000 fb5b 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036e2:	2360      	movs	r3, #96	; 0x60
 80036e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	2208      	movs	r2, #8
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM4_Init+0xc0>)
 80036fa:	f006 fd99 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003704:	f000 fb48 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	220c      	movs	r2, #12
 800370c:	4619      	mov	r1, r3
 800370e:	4807      	ldr	r0, [pc, #28]	; (800372c <MX_TIM4_Init+0xc0>)
 8003710:	f006 fd8e 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800371a:	f000 fb3d 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800371e:	4803      	ldr	r0, [pc, #12]	; (800372c <MX_TIM4_Init+0xc0>)
 8003720:	f000 ff22 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	2000a188 	.word	0x2000a188
 8003730:	40000800 	.word	0x40000800

08003734 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373a:	463b      	mov	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <MX_TIM6_Init+0x64>)
 8003744:	4a15      	ldr	r2, [pc, #84]	; (800379c <MX_TIM6_Init+0x68>)
 8003746:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <MX_TIM6_Init+0x64>)
 800374a:	2259      	movs	r2, #89	; 0x59
 800374c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <MX_TIM6_Init+0x64>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <MX_TIM6_Init+0x64>)
 8003756:	f240 32e7 	movw	r2, #999	; 0x3e7
 800375a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <MX_TIM6_Init+0x64>)
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003762:	480d      	ldr	r0, [pc, #52]	; (8003798 <MX_TIM6_Init+0x64>)
 8003764:	f006 fada 	bl	8009d1c <HAL_TIM_Base_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800376e:	f000 fb13 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800377a:	463b      	mov	r3, r7
 800377c:	4619      	mov	r1, r3
 800377e:	4806      	ldr	r0, [pc, #24]	; (8003798 <MX_TIM6_Init+0x64>)
 8003780:	f007 f8ba 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800378a:	f000 fb05 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000a424 	.word	0x2000a424
 800379c:	40001000 	.word	0x40001000

080037a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a6:	463b      	mov	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <MX_TIM7_Init+0x60>)
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <MX_TIM7_Init+0x64>)
 80037b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <MX_TIM7_Init+0x60>)
 80037b6:	22b3      	movs	r2, #179	; 0xb3
 80037b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <MX_TIM7_Init+0x60>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <MX_TIM7_Init+0x60>)
 80037c2:	2231      	movs	r2, #49	; 0x31
 80037c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <MX_TIM7_Init+0x60>)
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <MX_TIM7_Init+0x60>)
 80037ce:	f006 faa5 	bl	8009d1c <HAL_TIM_Base_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80037d8:	f000 fade 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037e4:	463b      	mov	r3, r7
 80037e6:	4619      	mov	r1, r3
 80037e8:	4805      	ldr	r0, [pc, #20]	; (8003800 <MX_TIM7_Init+0x60>)
 80037ea:	f007 f885 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80037f4:	f000 fad0 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000a5c8 	.word	0x2000a5c8
 8003804:	40001400 	.word	0x40001400

08003808 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f00d fc4e 	bl	80110b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003824:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003826:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <MX_TIM8_Init+0xac>)
 8003828:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800382a:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <MX_TIM8_Init+0xa8>)
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003832:	2210      	movs	r2, #16
 8003834:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800383c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <MX_TIM8_Init+0xa8>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003850:	2303      	movs	r3, #3
 8003852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4619      	mov	r1, r3
 800387a:	480d      	ldr	r0, [pc, #52]	; (80038b0 <MX_TIM8_Init+0xa8>)
 800387c:	f006 fb06 	bl	8009e8c <HAL_TIM_Encoder_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003886:	f000 fa87 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <MX_TIM8_Init+0xa8>)
 8003898:	f007 f82e 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80038a2:	f000 fa79 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000a148 	.word	0x2000a148
 80038b4:	40010400 	.word	0x40010400

080038b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
 80038cc:	615a      	str	r2, [r3, #20]
 80038ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <MX_TIM10_Init+0x94>)
 80038d2:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <MX_TIM10_Init+0x98>)
 80038d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <MX_TIM10_Init+0x94>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <MX_TIM10_Init+0x94>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <MX_TIM10_Init+0x94>)
 80038e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ea:	4b18      	ldr	r3, [pc, #96]	; (800394c <MX_TIM10_Init+0x94>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <MX_TIM10_Init+0x94>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038f6:	4815      	ldr	r0, [pc, #84]	; (800394c <MX_TIM10_Init+0x94>)
 80038f8:	f006 fa10 	bl	8009d1c <HAL_TIM_Base_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003902:	f000 fa49 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003906:	4811      	ldr	r0, [pc, #68]	; (800394c <MX_TIM10_Init+0x94>)
 8003908:	f006 fa57 	bl	8009dba <HAL_TIM_PWM_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003912:	f000 fa41 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003916:	2360      	movs	r3, #96	; 0x60
 8003918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2200      	movs	r2, #0
 800392a:	4619      	mov	r1, r3
 800392c:	4807      	ldr	r0, [pc, #28]	; (800394c <MX_TIM10_Init+0x94>)
 800392e:	f006 fc7f 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003938:	f000 fa2e 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <MX_TIM10_Init+0x94>)
 800393e:	f000 fe13 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000a264 	.word	0x2000a264
 8003950:	40014400 	.word	0x40014400

08003954 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
 8003968:	615a      	str	r2, [r3, #20]
 800396a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <MX_TIM11_Init+0x94>)
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <MX_TIM11_Init+0x98>)
 8003970:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <MX_TIM11_Init+0x94>)
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <MX_TIM11_Init+0x94>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <MX_TIM11_Init+0x94>)
 8003980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003984:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <MX_TIM11_Init+0x94>)
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <MX_TIM11_Init+0x94>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003992:	4815      	ldr	r0, [pc, #84]	; (80039e8 <MX_TIM11_Init+0x94>)
 8003994:	f006 f9c2 	bl	8009d1c <HAL_TIM_Base_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800399e:	f000 f9fb 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <MX_TIM11_Init+0x94>)
 80039a4:	f006 fa09 	bl	8009dba <HAL_TIM_PWM_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80039ae:	f000 f9f3 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b2:	2360      	movs	r3, #96	; 0x60
 80039b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4807      	ldr	r0, [pc, #28]	; (80039e8 <MX_TIM11_Init+0x94>)
 80039ca:	f006 fc31 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80039d4:	f000 f9e0 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <MX_TIM11_Init+0x94>)
 80039da:	f000 fdc5 	bl	8004568 <HAL_TIM_MspPostInit>

}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000a384 	.word	0x2000a384
 80039ec:	40014800 	.word	0x40014800

080039f0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_TIM13_Init+0x40>)
 80039f6:	4a0f      	ldr	r2, [pc, #60]	; (8003a34 <MX_TIM13_Init+0x44>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <MX_TIM13_Init+0x40>)
 80039fc:	2259      	movs	r2, #89	; 0x59
 80039fe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <MX_TIM13_Init+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <MX_TIM13_Init+0x40>)
 8003a08:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a0c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <MX_TIM13_Init+0x40>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_TIM13_Init+0x40>)
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_TIM13_Init+0x40>)
 8003a1c:	f006 f97e 	bl	8009d1c <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003a26:	f000 f9b7 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	2000a344 	.word	0x2000a344
 8003a34:	40001c00 	.word	0x40001c00

08003a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <MX_USART2_UART_Init+0x50>)
 8003a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a5e:	220c      	movs	r2, #12
 8003a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a6e:	4805      	ldr	r0, [pc, #20]	; (8003a84 <MX_USART2_UART_Init+0x4c>)
 8003a70:	f007 f824 	bl	800aabc <HAL_UART_Init>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a7a:	f000 f98d 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	2000a528 	.word	0x2000a528
 8003a88:	40004400 	.word	0x40004400

08003a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <MX_DMA_Init+0x5c>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <MX_DMA_Init+0x5c>)
 8003a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <MX_DMA_Init+0x5c>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	203a      	movs	r0, #58	; 0x3a
 8003ab4:	f002 f82f 	bl	8005b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003ab8:	203a      	movs	r0, #58	; 0x3a
 8003aba:	f002 f848 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	203b      	movs	r0, #59	; 0x3b
 8003ac4:	f002 f827 	bl	8005b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003ac8:	203b      	movs	r0, #59	; 0x3b
 8003aca:	f002 f840 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2045      	movs	r0, #69	; 0x45
 8003ad4:	f002 f81f 	bl	8005b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003ad8:	2045      	movs	r0, #69	; 0x45
 8003ada:	f002 f838 	bl	8005b4e <HAL_NVIC_EnableIRQ>

}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800

08003aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a9b      	ldr	r2, [pc, #620]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b0c:	f043 0310 	orr.w	r3, r3, #16
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	4b95      	ldr	r3, [pc, #596]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b92      	ldr	r3, [pc, #584]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a8d      	ldr	r2, [pc, #564]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a86      	ldr	r2, [pc, #536]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b84      	ldr	r3, [pc, #528]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a7f      	ldr	r2, [pc, #508]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	4b79      	ldr	r3, [pc, #484]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <MX_GPIO_Init+0x28c>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bb0:	4872      	ldr	r0, [pc, #456]	; (8003d7c <MX_GPIO_Init+0x290>)
 8003bb2:	f002 fd45 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bbc:	4870      	ldr	r0, [pc, #448]	; (8003d80 <MX_GPIO_Init+0x294>)
 8003bbe:	f002 fd3f 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bc8:	486e      	ldr	r0, [pc, #440]	; (8003d84 <MX_GPIO_Init+0x298>)
 8003bca:	f002 fd39 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8003bd4:	486c      	ldr	r0, [pc, #432]	; (8003d88 <MX_GPIO_Init+0x29c>)
 8003bd6:	f002 fd33 	bl	8006640 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003bde:	4b6b      	ldr	r3, [pc, #428]	; (8003d8c <MX_GPIO_Init+0x2a0>)
 8003be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003be6:	f107 031c 	add.w	r3, r7, #28
 8003bea:	4619      	mov	r1, r3
 8003bec:	4863      	ldr	r0, [pc, #396]	; (8003d7c <MX_GPIO_Init+0x290>)
 8003bee:	f002 fb65 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003bf2:	230f      	movs	r3, #15
 8003bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4619      	mov	r1, r3
 8003c04:	4862      	ldr	r0, [pc, #392]	; (8003d90 <MX_GPIO_Init+0x2a4>)
 8003c06:	f002 fb59 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c0a:	23e1      	movs	r3, #225	; 0xe1
 8003c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	485a      	ldr	r0, [pc, #360]	; (8003d88 <MX_GPIO_Init+0x29c>)
 8003c1e:	f002 fb4d 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c22:	2303      	movs	r3, #3
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c26:	2303      	movs	r3, #3
 8003c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	4852      	ldr	r0, [pc, #328]	; (8003d80 <MX_GPIO_Init+0x294>)
 8003c36:	f002 fb41 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	f107 031c 	add.w	r3, r7, #28
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	484c      	ldr	r0, [pc, #304]	; (8003d80 <MX_GPIO_Init+0x294>)
 8003c4e:	f002 fb35 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003c52:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8003c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	4845      	ldr	r0, [pc, #276]	; (8003d7c <MX_GPIO_Init+0x290>)
 8003c68:	f002 fb28 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	483d      	ldr	r0, [pc, #244]	; (8003d7c <MX_GPIO_Init+0x290>)
 8003c86:	f002 fb19 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9c:	f107 031c 	add.w	r3, r7, #28
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4837      	ldr	r0, [pc, #220]	; (8003d80 <MX_GPIO_Init+0x294>)
 8003ca4:	f002 fb0a 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cae:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <MX_GPIO_Init+0x2a8>)
 8003cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4831      	ldr	r0, [pc, #196]	; (8003d84 <MX_GPIO_Init+0x298>)
 8003cbe:	f002 fafd 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	4619      	mov	r1, r3
 8003cda:	482a      	ldr	r0, [pc, #168]	; (8003d84 <MX_GPIO_Init+0x298>)
 8003cdc:	f002 faee 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf2:	f107 031c 	add.w	r3, r7, #28
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4822      	ldr	r0, [pc, #136]	; (8003d84 <MX_GPIO_Init+0x298>)
 8003cfa:	f002 fadf 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003cfe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003d02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d04:	2301      	movs	r3, #1
 8003d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	481c      	ldr	r0, [pc, #112]	; (8003d88 <MX_GPIO_Init+0x29c>)
 8003d18:	f002 fad0 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4815      	ldr	r0, [pc, #84]	; (8003d88 <MX_GPIO_Init+0x29c>)
 8003d32:	f002 fac3 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003d36:	239b      	movs	r3, #155	; 0x9b
 8003d38:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	4619      	mov	r1, r3
 8003d48:	480e      	ldr	r0, [pc, #56]	; (8003d84 <MX_GPIO_Init+0x298>)
 8003d4a:	f002 fab7 	bl	80062bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	2008      	movs	r0, #8
 8003d54:	f001 fedf 	bl	8005b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003d58:	2008      	movs	r0, #8
 8003d5a:	f001 fef8 	bl	8005b4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	2017      	movs	r0, #23
 8003d64:	f001 fed7 	bl	8005b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d68:	2017      	movs	r0, #23
 8003d6a:	f001 fef0 	bl	8005b4e <HAL_NVIC_EnableIRQ>

}
 8003d6e:	bf00      	nop
 8003d70:	3730      	adds	r7, #48	; 0x30
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020c00 	.word	0x40020c00
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	10310000 	.word	0x10310000
 8003d90:	40020800 	.word	0x40020800
 8003d94:	10110000 	.word	0x10110000

08003d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <Error_Handler+0x6>

08003da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_MspInit+0x4c>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <HAL_MspInit+0x4c>)
 8003db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db4:	6453      	str	r3, [r2, #68]	; 0x44
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_MspInit+0x4c>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_MspInit+0x4c>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_MspInit+0x4c>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_MspInit+0x4c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	; 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	; (8003f38 <HAL_ADC_MspInit+0x148>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	f040 808e 	bne.w	8003f30 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	4b48      	ldr	r3, [pc, #288]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	4a47      	ldr	r2, [pc, #284]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e22:	6453      	str	r3, [r2, #68]	; 0x44
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e40:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e72:	f043 0302 	orr.w	r3, r3, #2
 8003e76:	6313      	str	r3, [r2, #48]	; 0x30
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_ADC_MspInit+0x14c>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003e84:	230f      	movs	r3, #15
 8003e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	4619      	mov	r1, r3
 8003e96:	482a      	ldr	r0, [pc, #168]	; (8003f40 <HAL_ADC_MspInit+0x150>)
 8003e98:	f002 fa10 	bl	80062bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003e9c:	23ff      	movs	r3, #255	; 0xff
 8003e9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea8:	f107 031c 	add.w	r3, r7, #28
 8003eac:	4619      	mov	r1, r3
 8003eae:	4825      	ldr	r0, [pc, #148]	; (8003f44 <HAL_ADC_MspInit+0x154>)
 8003eb0:	f002 fa04 	bl	80062bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4820      	ldr	r0, [pc, #128]	; (8003f48 <HAL_ADC_MspInit+0x158>)
 8003ec8:	f002 f9f8 	bl	80062bc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ece:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_ADC_MspInit+0x160>)
 8003ed0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003efc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f04:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f0c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f16:	f001 fe35 	bl	8005b84 <HAL_DMA_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003f20:	f7ff ff3a 	bl	8003d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <HAL_ADC_MspInit+0x15c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003f30:	bf00      	nop
 8003f32:	3730      	adds	r7, #48	; 0x30
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012100 	.word	0x40012100
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	2000a568 	.word	0x2000a568
 8003f50:	40026440 	.word	0x40026440

08003f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	; 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a32      	ldr	r2, [pc, #200]	; (800403c <HAL_I2C_MspInit+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12c      	bne.n	8003fd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f92:	23c0      	movs	r3, #192	; 0xc0
 8003f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f96:	2312      	movs	r3, #18
 8003f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 031c 	add.w	r3, r7, #28
 8003faa:	4619      	mov	r1, r3
 8003fac:	4825      	ldr	r0, [pc, #148]	; (8004044 <HAL_I2C_MspInit+0xf0>)
 8003fae:	f002 f985 	bl	80062bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003fce:	e031      	b.n	8004034 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_I2C_MspInit+0xf4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d12c      	bne.n	8004034 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffc:	2312      	movs	r3, #18
 8003ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004000:	2301      	movs	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004008:	2304      	movs	r3, #4
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400c:	f107 031c 	add.w	r3, r7, #28
 8004010:	4619      	mov	r1, r3
 8004012:	480c      	ldr	r0, [pc, #48]	; (8004044 <HAL_I2C_MspInit+0xf0>)
 8004014:	f002 f952 	bl	80062bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_I2C_MspInit+0xec>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_I2C_MspInit+0xec>)
 8004022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004026:	6413      	str	r3, [r2, #64]	; 0x40
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_I2C_MspInit+0xec>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	bf00      	nop
 8004036:	3730      	adds	r7, #48	; 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40005400 	.word	0x40005400
 8004040:	40023800 	.word	0x40023800
 8004044:	40020400 	.word	0x40020400
 8004048:	40005800 	.word	0x40005800

0800404c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a69      	ldr	r2, [pc, #420]	; (8004210 <HAL_SD_MspInit+0x1c4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	f040 80cb 	bne.w	8004206 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	4a66      	ldr	r2, [pc, #408]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 800407a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800407e:	6453      	str	r3, [r2, #68]	; 0x44
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b60      	ldr	r3, [pc, #384]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
 800409c:	4b5d      	ldr	r3, [pc, #372]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 80040b2:	f043 0308 	orr.w	r3, r3, #8
 80040b6:	6313      	str	r3, [r2, #48]	; 0x30
 80040b8:	4b56      	ldr	r3, [pc, #344]	; (8004214 <HAL_SD_MspInit+0x1c8>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80040c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80040c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040d6:	230c      	movs	r3, #12
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	4619      	mov	r1, r3
 80040e0:	484d      	ldr	r0, [pc, #308]	; (8004218 <HAL_SD_MspInit+0x1cc>)
 80040e2:	f002 f8eb 	bl	80062bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040e6:	2304      	movs	r3, #4
 80040e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040f6:	230c      	movs	r3, #12
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4619      	mov	r1, r3
 8004100:	4846      	ldr	r0, [pc, #280]	; (800421c <HAL_SD_MspInit+0x1d0>)
 8004102:	f002 f8db 	bl	80062bc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004108:	4a46      	ldr	r2, [pc, #280]	; (8004224 <HAL_SD_MspInit+0x1d8>)
 800410a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800410c:	4b44      	ldr	r3, [pc, #272]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800410e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004112:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004114:	4b42      	ldr	r3, [pc, #264]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800411c:	2200      	movs	r2, #0
 800411e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004128:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800412a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800412e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004136:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800413a:	2220      	movs	r2, #32
 800413c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800413e:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004144:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004148:	2204      	movs	r2, #4
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800414c:	4b34      	ldr	r3, [pc, #208]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800414e:	2203      	movs	r2, #3
 8004150:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004154:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800415a:	4b31      	ldr	r3, [pc, #196]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800415c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004162:	482f      	ldr	r0, [pc, #188]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004164:	f001 fd0e 	bl	8005b84 <HAL_DMA_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800416e:	f7ff fe13 	bl	8003d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <HAL_SD_MspInit+0x1d4>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 8004180:	4a2a      	ldr	r2, [pc, #168]	; (800422c <HAL_SD_MspInit+0x1e0>)
 8004182:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 8004186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800418c:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 8004194:	2200      	movs	r2, #0
 8004196:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004198:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 800419a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800419e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041a6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041ae:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041b2:	2220      	movs	r2, #32
 80041b4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041bc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041c0:	2204      	movs	r2, #4
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041c6:	2203      	movs	r2, #3
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80041da:	4813      	ldr	r0, [pc, #76]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041dc:	f001 fcd2 	bl	8005b84 <HAL_DMA_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80041e6:	f7ff fdd7 	bl	8003d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <HAL_SD_MspInit+0x1dc>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	2031      	movs	r0, #49	; 0x31
 80041fc:	f001 fc8b 	bl	8005b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004200:	2031      	movs	r0, #49	; 0x31
 8004202:	f001 fca4 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004206:	bf00      	nop
 8004208:	3728      	adds	r7, #40	; 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40023800 	.word	0x40023800
 8004218:	40020800 	.word	0x40020800
 800421c:	40020c00 	.word	0x40020c00
 8004220:	2000a090 	.word	0x2000a090
 8004224:	40026458 	.word	0x40026458
 8004228:	2000a3c4 	.word	0x2000a3c4
 800422c:	400264a0 	.word	0x400264a0

08004230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_SPI_MspInit+0x84>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d12c      	bne.n	80042ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_SPI_MspInit+0x88>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800428a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004298:	2303      	movs	r3, #3
 800429a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800429c:	2305      	movs	r3, #5
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <HAL_SPI_MspInit+0x8c>)
 80042a8:	f002 f808 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042ac:	bf00      	nop
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40003800 	.word	0x40003800
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020400 	.word	0x40020400

080042c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 031c 	add.w	r3, r7, #28
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_TIM_PWM_MspInit+0xd4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d12d      	bne.n	800433e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800431a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800431e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800432c:	2301      	movs	r3, #1
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	4619      	mov	r1, r3
 8004336:	4819      	ldr	r0, [pc, #100]	; (800439c <HAL_TIM_PWM_MspInit+0xdc>)
 8004338:	f001 ffc0 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800433c:	e026      	b.n	800438c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_TIM_PWM_MspInit+0xe0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	6413      	str	r3, [r2, #64]	; 0x40
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]
}
 8004364:	e012      	b.n	800438c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_TIM_PWM_MspInit+0xe4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10d      	bne.n	800438c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6413      	str	r3, [r2, #64]	; 0x40
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_TIM_PWM_MspInit+0xd8>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	bf00      	nop
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40010000 	.word	0x40010000
 8004398:	40023800 	.word	0x40023800
 800439c:	40021000 	.word	0x40021000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800

080043a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a3e      	ldr	r2, [pc, #248]	; (80044b0 <HAL_TIM_Base_MspInit+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d116      	bne.n	80043e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a3c      	ldr	r2, [pc, #240]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 80043c4:	f043 0310 	orr.w	r3, r3, #16
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2101      	movs	r1, #1
 80043da:	2036      	movs	r0, #54	; 0x36
 80043dc:	f001 fb9b 	bl	8005b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043e0:	2036      	movs	r0, #54	; 0x36
 80043e2:	f001 fbb4 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80043e6:	e05e      	b.n	80044a6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a32      	ldr	r2, [pc, #200]	; (80044b8 <HAL_TIM_Base_MspInit+0x110>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d116      	bne.n	8004420 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 80043fc:	f043 0320 	orr.w	r3, r3, #32
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	2037      	movs	r0, #55	; 0x37
 8004414:	f001 fb7f 	bl	8005b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004418:	2037      	movs	r0, #55	; 0x37
 800441a:	f001 fb98 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 800441e:	e042      	b.n	80044a6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a25      	ldr	r2, [pc, #148]	; (80044bc <HAL_TIM_Base_MspInit+0x114>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10e      	bne.n	8004448 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]
}
 8004446:	e02e      	b.n	80044a6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_TIM_Base_MspInit+0x118>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 800445c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004460:	6453      	str	r3, [r2, #68]	; 0x44
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
}
 800446e:	e01a      	b.n	80044a6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <HAL_TIM_Base_MspInit+0x11c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d115      	bne.n	80044a6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a0c      	ldr	r2, [pc, #48]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_TIM_Base_MspInit+0x10c>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	202c      	movs	r0, #44	; 0x2c
 800449c:	f001 fb3b 	bl	8005b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80044a0:	202c      	movs	r0, #44	; 0x2c
 80044a2:	f001 fb54 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40001000 	.word	0x40001000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40001400 	.word	0x40001400
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800
 80044c4:	40001c00 	.word	0x40001c00

080044c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_TIM_Encoder_MspInit+0x94>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d133      	bne.n	8004552 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6453      	str	r3, [r2, #68]	; 0x44
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_TIM_Encoder_MspInit+0x98>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004522:	23c0      	movs	r3, #192	; 0xc0
 8004524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004532:	2303      	movs	r3, #3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4619      	mov	r1, r3
 800453c:	4809      	ldr	r0, [pc, #36]	; (8004564 <HAL_TIM_Encoder_MspInit+0x9c>)
 800453e:	f001 febd 	bl	80062bc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004542:	2200      	movs	r2, #0
 8004544:	2100      	movs	r1, #0
 8004546:	202c      	movs	r0, #44	; 0x2c
 8004548:	f001 fae5 	bl	8005b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800454c:	202c      	movs	r0, #44	; 0x2c
 800454e:	f001 fafe 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004552:	bf00      	nop
 8004554:	3728      	adds	r7, #40	; 0x28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40010400 	.word	0x40010400
 8004560:	40023800 	.word	0x40023800
 8004564:	40020800 	.word	0x40020800

08004568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	; 0x30
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	f107 031c 	add.w	r3, r7, #28
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5c      	ldr	r2, [pc, #368]	; (80046f8 <HAL_TIM_MspPostInit+0x190>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d11f      	bne.n	80045ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004594:	f043 0310 	orr.w	r3, r3, #16
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80045a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045b8:	2301      	movs	r3, #1
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045bc:	f107 031c 	add.w	r3, r7, #28
 80045c0:	4619      	mov	r1, r3
 80045c2:	484f      	ldr	r0, [pc, #316]	; (8004700 <HAL_TIM_MspPostInit+0x198>)
 80045c4:	f001 fe7a 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80045c8:	e091      	b.n	80046ee <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4d      	ldr	r2, [pc, #308]	; (8004704 <HAL_TIM_MspPostInit+0x19c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d11e      	bne.n	8004612 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	4b48      	ldr	r3, [pc, #288]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a47      	ldr	r2, [pc, #284]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b45      	ldr	r3, [pc, #276]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045f0:	2330      	movs	r3, #48	; 0x30
 80045f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004600:	2302      	movs	r3, #2
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	4619      	mov	r1, r3
 800460a:	483f      	ldr	r0, [pc, #252]	; (8004708 <HAL_TIM_MspPostInit+0x1a0>)
 800460c:	f001 fe56 	bl	80062bc <HAL_GPIO_Init>
}
 8004610:	e06d      	b.n	80046ee <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <HAL_TIM_MspPostInit+0x1a4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d11f      	bne.n	800465c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	4a35      	ldr	r2, [pc, #212]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004626:	f043 0308 	orr.w	r3, r3, #8
 800462a:	6313      	str	r3, [r2, #48]	; 0x30
 800462c:	4b33      	ldr	r3, [pc, #204]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004638:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800463c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2300      	movs	r3, #0
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800464a:	2302      	movs	r3, #2
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800464e:	f107 031c 	add.w	r3, r7, #28
 8004652:	4619      	mov	r1, r3
 8004654:	482e      	ldr	r0, [pc, #184]	; (8004710 <HAL_TIM_MspPostInit+0x1a8>)
 8004656:	f001 fe31 	bl	80062bc <HAL_GPIO_Init>
}
 800465a:	e048      	b.n	80046ee <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <HAL_TIM_MspPostInit+0x1ac>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d11f      	bne.n	80046a6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	4a23      	ldr	r2, [pc, #140]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004670:	f043 0302 	orr.w	r3, r3, #2
 8004674:	6313      	str	r3, [r2, #48]	; 0x30
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004688:	2302      	movs	r3, #2
 800468a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004690:	2300      	movs	r3, #0
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004694:	2303      	movs	r3, #3
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	f107 031c 	add.w	r3, r7, #28
 800469c:	4619      	mov	r1, r3
 800469e:	481a      	ldr	r0, [pc, #104]	; (8004708 <HAL_TIM_MspPostInit+0x1a0>)
 80046a0:	f001 fe0c 	bl	80062bc <HAL_GPIO_Init>
}
 80046a4:	e023      	b.n	80046ee <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_TIM_MspPostInit+0x1b0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d11e      	bne.n	80046ee <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80046ba:	f043 0302 	orr.w	r3, r3, #2
 80046be:	6313      	str	r3, [r2, #48]	; 0x30
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <HAL_TIM_MspPostInit+0x194>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	2300      	movs	r3, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80046de:	2303      	movs	r3, #3
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e2:	f107 031c 	add.w	r3, r7, #28
 80046e6:	4619      	mov	r1, r3
 80046e8:	4807      	ldr	r0, [pc, #28]	; (8004708 <HAL_TIM_MspPostInit+0x1a0>)
 80046ea:	f001 fde7 	bl	80062bc <HAL_GPIO_Init>
}
 80046ee:	bf00      	nop
 80046f0:	3730      	adds	r7, #48	; 0x30
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40023800 	.word	0x40023800
 8004700:	40021000 	.word	0x40021000
 8004704:	40000400 	.word	0x40000400
 8004708:	40020400 	.word	0x40020400
 800470c:	40000800 	.word	0x40000800
 8004710:	40020c00 	.word	0x40020c00
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_UART_MspInit+0x84>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d12b      	bne.n	8004796 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_UART_MspInit+0x88>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_UART_MspInit+0x88>)
 8004748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_UART_MspInit+0x88>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_UART_MspInit+0x88>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	4a10      	ldr	r2, [pc, #64]	; (80047a4 <HAL_UART_MspInit+0x88>)
 8004764:	f043 0308 	orr.w	r3, r3, #8
 8004768:	6313      	str	r3, [r2, #48]	; 0x30
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_UART_MspInit+0x88>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004776:	2360      	movs	r3, #96	; 0x60
 8004778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2302      	movs	r3, #2
 800477c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004782:	2303      	movs	r3, #3
 8004784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004786:	2307      	movs	r3, #7
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	4619      	mov	r1, r3
 8004790:	4805      	ldr	r0, [pc, #20]	; (80047a8 <HAL_UART_MspInit+0x8c>)
 8004792:	f001 fd93 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004796:	bf00      	nop
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40004400 	.word	0x40004400
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020c00 	.word	0x40020c00

080047ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <NMI_Handler+0x4>

080047b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b6:	e7fe      	b.n	80047b6 <HardFault_Handler+0x4>

080047b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047bc:	e7fe      	b.n	80047bc <MemManage_Handler+0x4>

080047be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047c2:	e7fe      	b.n	80047c2 <BusFault_Handler+0x4>

080047c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047c8:	e7fe      	b.n	80047c8 <UsageFault_Handler+0x4>

080047ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047f8:	f000 fc6c 	bl	80050d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047fc:	bf00      	nop
 80047fe:	bd80      	pop	{r7, pc}

08004800 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004804:	2004      	movs	r0, #4
 8004806:	f001 ff35 	bl	8006674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}

0800480e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004812:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004816:	f001 ff2d 	bl	8006674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004824:	4803      	ldr	r0, [pc, #12]	; (8004834 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004826:	f005 fbfa 	bl	800a01e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800482a:	4803      	ldr	r0, [pc, #12]	; (8004838 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800482c:	f005 fbf7 	bl	800a01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2000a148 	.word	0x2000a148
 8004838:	2000a344 	.word	0x2000a344

0800483c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <SDIO_IRQHandler+0x10>)
 8004842:	f003 fc93 	bl	800816c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000a4a4 	.word	0x2000a4a4

08004850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <TIM6_DAC_IRQHandler+0x10>)
 8004856:	f005 fbe2 	bl	800a01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2000a424 	.word	0x2000a424

08004864 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <TIM7_IRQHandler+0x10>)
 800486a:	f005 fbd8 	bl	800a01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	2000a5c8 	.word	0x2000a5c8

08004878 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <DMA2_Stream2_IRQHandler+0x10>)
 800487e:	f001 faa9 	bl	8005dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2000a568 	.word	0x2000a568

0800488c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <DMA2_Stream3_IRQHandler+0x10>)
 8004892:	f001 fa9f 	bl	8005dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000a090 	.word	0x2000a090

080048a0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <DMA2_Stream6_IRQHandler+0x10>)
 80048a6:	f001 fa95 	bl	8005dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000a3c4 	.word	0x2000a3c4

080048b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e00a      	b.n	80048dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048c6:	f3af 8000 	nop.w
 80048ca:	4601      	mov	r1, r0
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	60ba      	str	r2, [r7, #8]
 80048d2:	b2ca      	uxtb	r2, r1
 80048d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3301      	adds	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	dbf0      	blt.n	80048c6 <_read+0x12>
	}

return len;
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return -1;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004916:	605a      	str	r2, [r3, #4]
	return 0;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <_isatty>:

int _isatty(int file)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	return 1;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
	return 0;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004960:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <_sbrk+0x5c>)
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <_sbrk+0x60>)
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <_sbrk+0x64>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <_sbrk+0x64>)
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <_sbrk+0x68>)
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <_sbrk+0x64>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d207      	bcs.n	8004998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004988:	f00c fb6c 	bl	8011064 <__errno>
 800498c:	4602      	mov	r2, r0
 800498e:	230c      	movs	r3, #12
 8004990:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	e009      	b.n	80049ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <_sbrk+0x64>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <_sbrk+0x64>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	4a05      	ldr	r2, [pc, #20]	; (80049bc <_sbrk+0x64>)
 80049a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20050000 	.word	0x20050000
 80049b8:	00000400 	.word	0x00000400
 80049bc:	20000218 	.word	0x20000218
 80049c0:	2000c688 	.word	0x2000c688

080049c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <SystemInit+0x28>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <SystemInit+0x28>)
 80049d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <SystemInit+0x28>)
 80049da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049de:	609a      	str	r2, [r3, #8]
#endif
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <cppInit>:
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
Odometry odometry(&encoder, &imu, &velocity_ctrl);

void cppInit(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 80049f4:	481a      	ldr	r0, [pc, #104]	; (8004a60 <cppInit+0x70>)
 80049f6:	f7fd f96b 	bl	8001cd0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80049fa:	481a      	ldr	r0, [pc, #104]	; (8004a64 <cppInit+0x74>)
 80049fc:	f7fd fe98 	bl	8002730 <_ZN5Motor4initEv>
	encoder.init();
 8004a00:	4819      	ldr	r0, [pc, #100]	; (8004a68 <cppInit+0x78>)
 8004a02:	f7fc fbc5 	bl	8001190 <_ZN7Encoder4initEv>
	//power_sensor.init();
	lcd_init();
 8004a06:	f7fc fb07 	bl	8001018 <lcd_init>
	imu.init();
 8004a0a:	4818      	ldr	r0, [pc, #96]	; (8004a6c <cppInit+0x7c>)
 8004a0c:	f7fc ff2c 	bl	8001868 <_ZN3IMU4initEv>

	line_sensor.calibration();
 8004a10:	4813      	ldr	r0, [pc, #76]	; (8004a60 <cppInit+0x70>)
 8004a12:	f7fd fa53 	bl	8001ebc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8004a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a1a:	f000 fb7b 	bl	8005114 <HAL_Delay>
	//imu.calibration();
	//printf("imu offset %f", imu.getOffsetVal());

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000001, 0);
 8004a1e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8004a70 <cppInit+0x80>
 8004a22:	eddf 0a14 	vldr	s1, [pc, #80]	; 8004a74 <cppInit+0x84>
 8004a26:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004a78 <cppInit+0x88>
 8004a2a:	4814      	ldr	r0, [pc, #80]	; (8004a7c <cppInit+0x8c>)
 8004a2c:	f7fd fd0c 	bl	8002448 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8004a30:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8004a70 <cppInit+0x80>
 8004a34:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004a70 <cppInit+0x80>
 8004a38:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004a70 <cppInit+0x80>
 8004a3c:	4810      	ldr	r0, [pc, #64]	; (8004a80 <cppInit+0x90>)
 8004a3e:	f7fe f954 	bl	8002cea <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 8004a42:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004a70 <cppInit+0x80>
 8004a46:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8004a70 <cppInit+0x80>
 8004a4a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004a70 <cppInit+0x80>
 8004a4e:	480c      	ldr	r0, [pc, #48]	; (8004a80 <cppInit+0x90>)
 8004a50:	f7fe f964 	bl	8002d1c <_ZN12VelocityCtrl12setOmegaGainEfff>

	logger.sdCardInit();
 8004a54:	480b      	ldr	r0, [pc, #44]	; (8004a84 <cppInit+0x94>)
 8004a56:	f7fd fda7 	bl	80025a8 <_ZN6Logger10sdCardInitEv>
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	2000021c 	.word	0x2000021c
 8004a64:	20000520 	.word	0x20000520
 8004a68:	20007a7c 	.word	0x20007a7c
 8004a6c:	20000528 	.word	0x20000528
 8004a70:	00000000 	.word	0x00000000
 8004a74:	358637bd 	.word	0x358637bd
 8004a78:	3a03126f 	.word	0x3a03126f
 8004a7c:	20007ac4 	.word	0x20007ac4
 8004a80:	20007a8c 	.word	0x20007a8c
 8004a84:	20000548 	.word	0x20000548

08004a88 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <cppFlip1ms+0x34>)
 8004a8e:	f7fd f97d 	bl	8001d8c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8004a92:	480b      	ldr	r0, [pc, #44]	; (8004ac0 <cppFlip1ms+0x38>)
 8004a94:	f7fc fefc 	bl	8001890 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8004a98:	480a      	ldr	r0, [pc, #40]	; (8004ac4 <cppFlip1ms+0x3c>)
 8004a9a:	f7fc fb99 	bl	80011d0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8004a9e:	480a      	ldr	r0, [pc, #40]	; (8004ac8 <cppFlip1ms+0x40>)
 8004aa0:	f7fd fd0a 	bl	80024b8 <_ZN9LineTrace4flipEv>
	//velocity_ctrl.flip();
	odometry.flip();
 8004aa4:	4809      	ldr	r0, [pc, #36]	; (8004acc <cppFlip1ms+0x44>)
 8004aa6:	f7fe f805 	bl	8002ab4 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8004aaa:	4809      	ldr	r0, [pc, #36]	; (8004ad0 <cppFlip1ms+0x48>)
 8004aac:	f7fd fe52 	bl	8002754 <_ZN5Motor9motorCtrlEv>

	encoder.clearCnt();
 8004ab0:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <cppFlip1ms+0x3c>)
 8004ab2:	f7fc fc0b 	bl	80012cc <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	2000021c 	.word	0x2000021c
 8004ac0:	20000528 	.word	0x20000528
 8004ac4:	20007a7c 	.word	0x20007a7c
 8004ac8:	20007ac4 	.word	0x20007ac4
 8004acc:	20007b20 	.word	0x20007b20
 8004ad0:	20000520 	.word	0x20000520

08004ad4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8004ad8:	4802      	ldr	r0, [pc, #8]	; (8004ae4 <cppFlip100ns+0x10>)
 8004ada:	f7fd f909 	bl	8001cf0 <_ZN10LineSensor17storeSensorValuesEv>
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000021c 	.word	0x2000021c

08004ae8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <cppFlip10ms+0x18>)
 8004aee:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8004af2:	eeb0 0a67 	vmov.f32	s0, s15
 8004af6:	4803      	ldr	r0, [pc, #12]	; (8004b04 <cppFlip10ms+0x1c>)
 8004af8:	f7fd fd9c 	bl	8002634 <_ZN6Logger8storeLogEf>
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000021c 	.word	0x2000021c
 8004b04:	20000548 	.word	0x20000548

08004b08 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	4619      	mov	r1, r3
 8004b16:	4803      	ldr	r0, [pc, #12]	; (8004b24 <cppExit+0x1c>)
 8004b18:	f7fe f832 	bl	8002b80 <_ZN10SideSensor12updateStatusEt>
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000514 	.word	0x20000514

08004b28 <cppLoop>:

void cppLoop(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 8004b2e:	48a8      	ldr	r0, [pc, #672]	; (8004dd0 <cppLoop+0x2a8>)
 8004b30:	f7fd ffcc 	bl	8002acc <_ZN12RotarySwitch8getValueEv>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	f200 81d8 	bhi.w	8004eec <cppLoop+0x3c4>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <cppLoop+0x1c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004ba7 	.word	0x08004ba7
 8004b4c:	08004c2f 	.word	0x08004c2f
 8004b50:	08004c8b 	.word	0x08004c8b
 8004b54:	08004d43 	.word	0x08004d43
 8004b58:	08004e21 	.word	0x08004e21
 8004b5c:	08004eed 	.word	0x08004eed
 8004b60:	08004eed 	.word	0x08004eed
 8004b64:	08004eed 	.word	0x08004eed
 8004b68:	08004eed 	.word	0x08004eed
 8004b6c:	08004eed 	.word	0x08004eed
 8004b70:	08004eed 	.word	0x08004eed
 8004b74:	08004eed 	.word	0x08004eed
 8004b78:	08004eed 	.word	0x08004eed
 8004b7c:	08004eed 	.word	0x08004eed
 8004b80:	08004eed 	.word	0x08004eed

	case 0:
		lcd_clear();
 8004b84:	f7fc fa8c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004b88:	2100      	movs	r1, #0
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f7fc fa98 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8004b90:	4890      	ldr	r0, [pc, #576]	; (8004dd4 <cppLoop+0x2ac>)
 8004b92:	f7fc fabf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004b96:	2101      	movs	r1, #1
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fc fa91 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8004b9e:	488e      	ldr	r0, [pc, #568]	; (8004dd8 <cppLoop+0x2b0>)
 8004ba0:	f7fc fab8 	bl	8001114 <lcd_printf>
		break;
 8004ba4:	e1ad      	b.n	8004f02 <cppLoop+0x3da>

	case 1:
		lcd_clear();
 8004ba6:	f7fc fa7b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004baa:	2100      	movs	r1, #0
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7fc fa87 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8004bb2:	488a      	ldr	r0, [pc, #552]	; (8004ddc <cppLoop+0x2b4>)
 8004bb4:	f7fc faae 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004bb8:	2101      	movs	r1, #1
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7fc fa80 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8004bc0:	4887      	ldr	r0, [pc, #540]	; (8004de0 <cppLoop+0x2b8>)
 8004bc2:	f7fc faa7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004bc6:	4887      	ldr	r0, [pc, #540]	; (8004de4 <cppLoop+0x2bc>)
 8004bc8:	f7fc fec2 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8189 	beq.w	8004ef0 <cppLoop+0x3c8>
			HAL_Delay(500);
 8004bde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004be2:	f000 fa97 	bl	8005114 <HAL_Delay>

			logger.start();
 8004be6:	4880      	ldr	r0, [pc, #512]	; (8004de8 <cppLoop+0x2c0>)
 8004be8:	f7fd fd70 	bl	80026cc <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8004bec:	487f      	ldr	r0, [pc, #508]	; (8004dec <cppLoop+0x2c4>)
 8004bee:	f7fe f8ae 	bl	8002d4e <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8004bf2:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8004df0 <cppLoop+0x2c8>
 8004bf6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8004df0 <cppLoop+0x2c8>
 8004bfa:	487c      	ldr	r0, [pc, #496]	; (8004dec <cppLoop+0x2c4>)
 8004bfc:	f7fe f861 	bl	8002cc2 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	2101      	movs	r1, #1
 8004c06:	487b      	ldr	r0, [pc, #492]	; (8004df4 <cppLoop+0x2cc>)
 8004c08:	f7fc ffc2 	bl	8001b90 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8004c0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c10:	f000 fa80 	bl	8005114 <HAL_Delay>

			velocity_ctrl.stop();
 8004c14:	4875      	ldr	r0, [pc, #468]	; (8004dec <cppLoop+0x2c4>)
 8004c16:	f7fe f8ab 	bl	8002d70 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4874      	ldr	r0, [pc, #464]	; (8004df4 <cppLoop+0x2cc>)
 8004c22:	f7fc ffb5 	bl	8001b90 <_ZN3LED2LREaa>

			logger.stop();
 8004c26:	4870      	ldr	r0, [pc, #448]	; (8004de8 <cppLoop+0x2c0>)
 8004c28:	f7fd fd60 	bl	80026ec <_ZN6Logger4stopEv>
		}

		break;
 8004c2c:	e160      	b.n	8004ef0 <cppLoop+0x3c8>

	case 2:
		lcd_clear();
 8004c2e:	f7fc fa37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004c32:	2100      	movs	r1, #0
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7fc fa43 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8004c3a:	486f      	ldr	r0, [pc, #444]	; (8004df8 <cppLoop+0x2d0>)
 8004c3c:	f7fc fa6a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004c40:	2101      	movs	r1, #1
 8004c42:	2000      	movs	r0, #0
 8004c44:	f7fc fa3c 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8004c48:	486c      	ldr	r0, [pc, #432]	; (8004dfc <cppLoop+0x2d4>)
 8004c4a:	f7fc fa63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004c4e:	4865      	ldr	r0, [pc, #404]	; (8004de4 <cppLoop+0x2bc>)
 8004c50:	f7fc fe7e 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8147 	beq.w	8004ef4 <cppLoop+0x3cc>
			led.LR(1, -1);
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4861      	ldr	r0, [pc, #388]	; (8004df4 <cppLoop+0x2cc>)
 8004c6e:	f7fc ff8f 	bl	8001b90 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 8004c72:	4a63      	ldr	r2, [pc, #396]	; (8004e00 <cppLoop+0x2d8>)
 8004c74:	4963      	ldr	r1, [pc, #396]	; (8004e04 <cppLoop+0x2dc>)
 8004c76:	485c      	ldr	r0, [pc, #368]	; (8004de8 <cppLoop+0x2c0>)
 8004c78:	f7fd fd14 	bl	80026a4 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	2100      	movs	r1, #0
 8004c82:	485c      	ldr	r0, [pc, #368]	; (8004df4 <cppLoop+0x2cc>)
 8004c84:	f7fc ff84 	bl	8001b90 <_ZN3LED2LREaa>
		}
		break;
 8004c88:	e134      	b.n	8004ef4 <cppLoop+0x3cc>

	case 3:
		led.fullColor('C');
 8004c8a:	2143      	movs	r1, #67	; 0x43
 8004c8c:	4859      	ldr	r0, [pc, #356]	; (8004df4 <cppLoop+0x2cc>)
 8004c8e:	f7fc fec3 	bl	8001a18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8004c92:	f7fc fa05 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fc fa11 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8004c9e:	485a      	ldr	r0, [pc, #360]	; (8004e08 <cppLoop+0x2e0>)
 8004ca0:	f7fc fa38 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fc fa0a 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8004cac:	4857      	ldr	r0, [pc, #348]	; (8004e0c <cppLoop+0x2e4>)
 8004cae:	f7fc fa31 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004cb2:	484c      	ldr	r0, [pc, #304]	; (8004de4 <cppLoop+0x2bc>)
 8004cb4:	f7fc fe4c 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8117 	beq.w	8004ef8 <cppLoop+0x3d0>
			led.LR(-1, 1);
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	4848      	ldr	r0, [pc, #288]	; (8004df4 <cppLoop+0x2cc>)
 8004cd2:	f7fc ff5d 	bl	8001b90 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8004cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cda:	f000 fa1b 	bl	8005114 <HAL_Delay>

			logger.start();
 8004cde:	4842      	ldr	r0, [pc, #264]	; (8004de8 <cppLoop+0x2c0>)
 8004ce0:	f7fd fcf4 	bl	80026cc <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8004ce4:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8004e10 <cppLoop+0x2e8>
 8004ce8:	484a      	ldr	r0, [pc, #296]	; (8004e14 <cppLoop+0x2ec>)
 8004cea:	f7fd fbc6 	bl	800247a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8004cee:	4849      	ldr	r0, [pc, #292]	; (8004e14 <cppLoop+0x2ec>)
 8004cf0:	f7fd fc1a 	bl	8002528 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8004cf4:	f241 3088 	movw	r0, #5000	; 0x1388
 8004cf8:	f000 fa0c 	bl	8005114 <HAL_Delay>

			logger.stop();
 8004cfc:	483a      	ldr	r0, [pc, #232]	; (8004de8 <cppLoop+0x2c0>)
 8004cfe:	f7fd fcf5 	bl	80026ec <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8004d02:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004e10 <cppLoop+0x2e8>
 8004d06:	4843      	ldr	r0, [pc, #268]	; (8004e14 <cppLoop+0x2ec>)
 8004d08:	f7fd fbb7 	bl	800247a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8004d0c:	4841      	ldr	r0, [pc, #260]	; (8004e14 <cppLoop+0x2ec>)
 8004d0e:	f7fd fc1b 	bl	8002548 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	2101      	movs	r1, #1
 8004d18:	4836      	ldr	r0, [pc, #216]	; (8004df4 <cppLoop+0x2cc>)
 8004d1a:	f7fc ff39 	bl	8001b90 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8004d1e:	4a3e      	ldr	r2, [pc, #248]	; (8004e18 <cppLoop+0x2f0>)
 8004d20:	4938      	ldr	r1, [pc, #224]	; (8004e04 <cppLoop+0x2dc>)
 8004d22:	4831      	ldr	r0, [pc, #196]	; (8004de8 <cppLoop+0x2c0>)
 8004d24:	f7fd fcbe 	bl	80026a4 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8004d28:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4831      	ldr	r0, [pc, #196]	; (8004df4 <cppLoop+0x2cc>)
 8004d30:	f7fc ff2e 	bl	8001b90 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8004d34:	2200      	movs	r2, #0
 8004d36:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3a:	482e      	ldr	r0, [pc, #184]	; (8004df4 <cppLoop+0x2cc>)
 8004d3c:	f7fc ff28 	bl	8001b90 <_ZN3LED2LREaa>
		}

		break;
 8004d40:	e0da      	b.n	8004ef8 <cppLoop+0x3d0>

	case 4:
		led.fullColor('M');
 8004d42:	214d      	movs	r1, #77	; 0x4d
 8004d44:	482b      	ldr	r0, [pc, #172]	; (8004df4 <cppLoop+0x2cc>)
 8004d46:	f7fc fe67 	bl	8001a18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8004d4a:	f7fc f9a9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7fc f9b5 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8004d56:	4831      	ldr	r0, [pc, #196]	; (8004e1c <cppLoop+0x2f4>)
 8004d58:	f7fc f9dc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7fc f9ae 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8004d64:	4829      	ldr	r0, [pc, #164]	; (8004e0c <cppLoop+0x2e4>)
 8004d66:	f7fc f9d5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004d6a:	481e      	ldr	r0, [pc, #120]	; (8004de4 <cppLoop+0x2bc>)
 8004d6c:	f7fc fdf0 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80bd 	beq.w	8004efc <cppLoop+0x3d4>
			led.LR(-1, 1);
 8004d82:	2201      	movs	r2, #1
 8004d84:	f04f 31ff 	mov.w	r1, #4294967295
 8004d88:	481a      	ldr	r0, [pc, #104]	; (8004df4 <cppLoop+0x2cc>)
 8004d8a:	f7fc ff01 	bl	8001b90 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8004d8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d92:	f000 f9bf 	bl	8005114 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8004d96:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004e10 <cppLoop+0x2e8>
 8004d9a:	481e      	ldr	r0, [pc, #120]	; (8004e14 <cppLoop+0x2ec>)
 8004d9c:	f7fd fb7c 	bl	8002498 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8004da0:	4812      	ldr	r0, [pc, #72]	; (8004dec <cppLoop+0x2c4>)
 8004da2:	f7fd ffd4 	bl	8002d4e <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8004da6:	481b      	ldr	r0, [pc, #108]	; (8004e14 <cppLoop+0x2ec>)
 8004da8:	f7fd fbbe 	bl	8002528 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8004dac:	f242 7010 	movw	r0, #10000	; 0x2710
 8004db0:	f000 f9b0 	bl	8005114 <HAL_Delay>

			line_trace.stop();
 8004db4:	4817      	ldr	r0, [pc, #92]	; (8004e14 <cppLoop+0x2ec>)
 8004db6:	f7fd fbc7 	bl	8002548 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8004dba:	480c      	ldr	r0, [pc, #48]	; (8004dec <cppLoop+0x2c4>)
 8004dbc:	f7fd ffd8 	bl	8002d70 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc6:	480b      	ldr	r0, [pc, #44]	; (8004df4 <cppLoop+0x2cc>)
 8004dc8:	f7fc fee2 	bl	8001b90 <_ZN3LED2LREaa>
		}
		break;
 8004dcc:	e096      	b.n	8004efc <cppLoop+0x3d4>
 8004dce:	bf00      	nop
 8004dd0:	2000051c 	.word	0x2000051c
 8004dd4:	08015fe0 	.word	0x08015fe0
 8004dd8:	08015fe4 	.word	0x08015fe4
 8004ddc:	08015fec 	.word	0x08015fec
 8004de0:	08015ff8 	.word	0x08015ff8
 8004de4:	20000518 	.word	0x20000518
 8004de8:	20000548 	.word	0x20000548
 8004dec:	20007a8c 	.word	0x20007a8c
 8004df0:	00000000 	.word	0x00000000
 8004df4:	20000524 	.word	0x20000524
 8004df8:	08016000 	.word	0x08016000
 8004dfc:	08016004 	.word	0x08016004
 8004e00:	0801600c 	.word	0x0801600c
 8004e04:	08016018 	.word	0x08016018
 8004e08:	08016028 	.word	0x08016028
 8004e0c:	08016030 	.word	0x08016030
 8004e10:	3dcccccd 	.word	0x3dcccccd
 8004e14:	20007ac4 	.word	0x20007ac4
 8004e18:	08016038 	.word	0x08016038
 8004e1c:	08016044 	.word	0x08016044

	case 5:
		led.fullColor('Y');
 8004e20:	2159      	movs	r1, #89	; 0x59
 8004e22:	483b      	ldr	r0, [pc, #236]	; (8004f10 <cppLoop+0x3e8>)
 8004e24:	f7fc fdf8 	bl	8001a18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8004e28:	f7fc f93a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fc f946 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8004e34:	4837      	ldr	r0, [pc, #220]	; (8004f14 <cppLoop+0x3ec>)
 8004e36:	f7fc f96d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7fc f93f 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8004e42:	4835      	ldr	r0, [pc, #212]	; (8004f18 <cppLoop+0x3f0>)
 8004e44:	f7fc f966 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004e48:	4834      	ldr	r0, [pc, #208]	; (8004f1c <cppLoop+0x3f4>)
 8004e4a:	f7fc fd81 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d050      	beq.n	8004f00 <cppLoop+0x3d8>
			led.LR(-1, 1);
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f04f 31ff 	mov.w	r1, #4294967295
 8004e64:	482a      	ldr	r0, [pc, #168]	; (8004f10 <cppLoop+0x3e8>)
 8004e66:	f7fc fe93 	bl	8001b90 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8004e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e6e:	f000 f951 	bl	8005114 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8004e72:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8004f20 <cppLoop+0x3f8>
 8004e76:	482b      	ldr	r0, [pc, #172]	; (8004f24 <cppLoop+0x3fc>)
 8004e78:	f7fd faff 	bl	800247a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8004e7c:	4829      	ldr	r0, [pc, #164]	; (8004f24 <cppLoop+0x3fc>)
 8004e7e:	f7fd fb53 	bl	8002528 <_ZN9LineTrace5startEv>
			encoder.clearTotalCnt();
 8004e82:	4829      	ldr	r0, [pc, #164]	; (8004f28 <cppLoop+0x400>)
 8004e84:	f7fc fa50 	bl	8001328 <_ZN7Encoder13clearTotalCntEv>

			HAL_Delay(1000);
 8004e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e8c:	f000 f942 	bl	8005114 <HAL_Delay>

			line_trace.stop();
 8004e90:	4824      	ldr	r0, [pc, #144]	; (8004f24 <cppLoop+0x3fc>)
 8004e92:	f7fd fb59 	bl	8002548 <_ZN9LineTrace4stopEv>
			long total = encoder.getTotalCnt();
 8004e96:	4824      	ldr	r0, [pc, #144]	; (8004f28 <cppLoop+0x400>)
 8004e98:	f7fc fa34 	bl	8001304 <_ZN7Encoder11getTotalCntEv>
 8004e9c:	6078      	str	r0, [r7, #4]
			while(joy_stick.getValue() != JOY_C){
 8004e9e:	481f      	ldr	r0, [pc, #124]	; (8004f1c <cppLoop+0x3f4>)
 8004ea0:	f7fc fd56 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d014      	beq.n	8004ede <cppLoop+0x3b6>
				lcd_clear();
 8004eb4:	f7fc f8f4 	bl	80010a0 <lcd_clear>
				lcd_locate(0,0);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f7fc f900 	bl	80010c0 <lcd_locate>
				lcd_printf("cnt");
 8004ec0:	481a      	ldr	r0, [pc, #104]	; (8004f2c <cppLoop+0x404>)
 8004ec2:	f7fc f927 	bl	8001114 <lcd_printf>
				lcd_locate(0,1);
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7fc f8f9 	bl	80010c0 <lcd_locate>
				lcd_printf("%ld", total);
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4817      	ldr	r0, [pc, #92]	; (8004f30 <cppLoop+0x408>)
 8004ed2:	f7fc f91f 	bl	8001114 <lcd_printf>
				HAL_Delay(10);
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	f000 f91c 	bl	8005114 <HAL_Delay>
			while(joy_stick.getValue() != JOY_C){
 8004edc:	e7df      	b.n	8004e9e <cppLoop+0x376>
			}

			led.LR(-1, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	480a      	ldr	r0, [pc, #40]	; (8004f10 <cppLoop+0x3e8>)
 8004ee6:	f7fc fe53 	bl	8001b90 <_ZN3LED2LREaa>
		}
		break;
 8004eea:	e009      	b.n	8004f00 <cppLoop+0x3d8>
	case 15:

		break;

	default:
		break;
 8004eec:	bf00      	nop
 8004eee:	e008      	b.n	8004f02 <cppLoop+0x3da>
		break;
 8004ef0:	bf00      	nop
 8004ef2:	e006      	b.n	8004f02 <cppLoop+0x3da>
		break;
 8004ef4:	bf00      	nop
 8004ef6:	e004      	b.n	8004f02 <cppLoop+0x3da>
		break;
 8004ef8:	bf00      	nop
 8004efa:	e002      	b.n	8004f02 <cppLoop+0x3da>
		break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <cppLoop+0x3da>
		break;
 8004f00:	bf00      	nop

	}

	HAL_Delay(10);
 8004f02:	200a      	movs	r0, #10
 8004f04:	f000 f906 	bl	8005114 <HAL_Delay>

}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000524 	.word	0x20000524
 8004f14:	08016050 	.word	0x08016050
 8004f18:	08016058 	.word	0x08016058
 8004f1c:	20000518 	.word	0x20000518
 8004f20:	00000000 	.word	0x00000000
 8004f24:	20007ac4 	.word	0x20007ac4
 8004f28:	20007a7c 	.word	0x20007a7c
 8004f2c:	08016064 	.word	0x08016064
 8004f30:	08016068 	.word	0x08016068

08004f34 <_Z41__static_initialization_and_destruction_0ii>:
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d12b      	bne.n	8004f9c <_Z41__static_initialization_and_destruction_0ii+0x68>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d126      	bne.n	8004f9c <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 8004f4e:	4815      	ldr	r0, [pc, #84]	; (8004fa4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f50:	f7fc fe56 	bl	8001c00 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8004f54:	4814      	ldr	r0, [pc, #80]	; (8004fa8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f56:	f7fd fe07 	bl	8002b68 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8004f5a:	4814      	ldr	r0, [pc, #80]	; (8004fac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f5c:	f7fc fcec 	bl	8001938 <_ZN8JoyStickC1Ev>
Motor motor;
 8004f60:	4813      	ldr	r0, [pc, #76]	; (8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004f62:	f7fd fbd3 	bl	800270c <_ZN5MotorC1Ev>
IMU imu;
 8004f66:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004f68:	f7fc fc56 	bl	8001818 <_ZN3IMUC1Ev>
Logger logger;
 8004f6c:	4812      	ldr	r0, [pc, #72]	; (8004fb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004f6e:	f7fd fb03 	bl	8002578 <_ZN6LoggerC1Ev>
Encoder encoder;
 8004f72:	4812      	ldr	r0, [pc, #72]	; (8004fbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004f74:	f7fc f8ee 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004f7e:	4810      	ldr	r0, [pc, #64]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004f80:	f7fd fe5c 	bl	8002c3c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004f86:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f88:	4909      	ldr	r1, [pc, #36]	; (8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004f8a:	480e      	ldr	r0, [pc, #56]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004f8c:	f7fd f932 	bl	80021f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004f94:	4909      	ldr	r1, [pc, #36]	; (8004fbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004f96:	480c      	ldr	r0, [pc, #48]	; (8004fc8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004f98:	f7fd fc9e 	bl	80028d8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2000021c 	.word	0x2000021c
 8004fa8:	20000514 	.word	0x20000514
 8004fac:	20000518 	.word	0x20000518
 8004fb0:	20000520 	.word	0x20000520
 8004fb4:	20000528 	.word	0x20000528
 8004fb8:	20000548 	.word	0x20000548
 8004fbc:	20007a7c 	.word	0x20007a7c
 8004fc0:	20007a8c 	.word	0x20007a8c
 8004fc4:	20007ac4 	.word	0x20007ac4
 8004fc8:	20007b20 	.word	0x20007b20

08004fcc <_GLOBAL__sub_I_line_sensor>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	f7ff ffad 	bl	8004f34 <_Z41__static_initialization_and_destruction_0ii>
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fe2:	e003      	b.n	8004fec <LoopCopyDataInit>

08004fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fea:	3104      	adds	r1, #4

08004fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fec:	480b      	ldr	r0, [pc, #44]	; (800501c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ff4:	d3f6      	bcc.n	8004fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8004ff6:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ff8:	e002      	b.n	8005000 <LoopFillZerobss>

08004ffa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ffc:	f842 3b04 	str.w	r3, [r2], #4

08005000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005004:	d3f9      	bcc.n	8004ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005006:	f7ff fcdd 	bl	80049c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800500a:	f00c f831 	bl	8011070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800500e:	f7fd ffa9 	bl	8002f64 <main>
  bx  lr    
 8005012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005014:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005018:	08016a60 	.word	0x08016a60
  ldr  r0, =_sdata
 800501c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005020:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005024:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005028:	2000c684 	.word	0x2000c684

0800502c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800502c:	e7fe      	b.n	800502c <ADC_IRQHandler>
	...

08005030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_Init+0x40>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <HAL_Init+0x40>)
 800503a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_Init+0x40>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <HAL_Init+0x40>)
 8005046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800504a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_Init+0x40>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a07      	ldr	r2, [pc, #28]	; (8005070 <HAL_Init+0x40>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005058:	2003      	movs	r0, #3
 800505a:	f000 fd51 	bl	8005b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800505e:	2000      	movs	r0, #0
 8005060:	f000 f808 	bl	8005074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005064:	f7fe fe9c 	bl	8003da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023c00 	.word	0x40023c00

08005074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_InitTick+0x54>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_InitTick+0x58>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800508a:	fbb3 f3f1 	udiv	r3, r3, r1
 800508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fd69 	bl	8005b6a <HAL_SYSTICK_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e00e      	b.n	80050c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b0f      	cmp	r3, #15
 80050a6:	d80a      	bhi.n	80050be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050a8:	2200      	movs	r2, #0
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	f000 fd31 	bl	8005b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050b4:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <HAL_InitTick+0x5c>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000008 	.word	0x20000008
 80050d0:	20000004 	.word	0x20000004

080050d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_IncTick+0x20>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_IncTick+0x24>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4413      	add	r3, r2
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_IncTick+0x24>)
 80050e6:	6013      	str	r3, [r2, #0]
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000008 	.word	0x20000008
 80050f8:	2000a608 	.word	0x2000a608

080050fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_GetTick+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	2000a608 	.word	0x2000a608

08005114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800511c:	f7ff ffee 	bl	80050fc <HAL_GetTick>
 8005120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d005      	beq.n	800513a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_Delay+0x40>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800513a:	bf00      	nop
 800513c:	f7ff ffde 	bl	80050fc <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d8f7      	bhi.n	800513c <HAL_Delay+0x28>
  {
  }
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000008 	.word	0x20000008

08005158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e033      	b.n	80051d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe fe3a 	bl	8003df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d118      	bne.n	80051c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800519e:	f023 0302 	bic.w	r3, r3, #2
 80051a2:	f043 0202 	orr.w	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa5a 	bl	8005664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	f043 0201 	orr.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
 80051c6:	e001      	b.n	80051cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_ADC_Start_DMA+0x1e>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e0cc      	b.n	8005398 <HAL_ADC_Start_DMA+0x1b8>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d018      	beq.n	8005246 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005224:	4b5e      	ldr	r3, [pc, #376]	; (80053a0 <HAL_ADC_Start_DMA+0x1c0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_ADC_Start_DMA+0x1c4>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0c9a      	lsrs	r2, r3, #18
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005238:	e002      	b.n	8005240 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f9      	bne.n	800523a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 80a0 	bne.w	8005396 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005294:	d106      	bne.n	80052a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f023 0206 	bic.w	r2, r3, #6
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
 80052a2:	e002      	b.n	80052aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052b2:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <HAL_ADC_Start_DMA+0x1c8>)
 80052b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	4a3c      	ldr	r2, [pc, #240]	; (80053ac <HAL_ADC_Start_DMA+0x1cc>)
 80052bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	4a3b      	ldr	r2, [pc, #236]	; (80053b0 <HAL_ADC_Start_DMA+0x1d0>)
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <HAL_ADC_Start_DMA+0x1d4>)
 80052cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80052d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	334c      	adds	r3, #76	; 0x4c
 8005302:	4619      	mov	r1, r3
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f000 fcea 	bl	8005ce0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2b00      	cmp	r3, #0
 8005316:	d12a      	bne.n	800536e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a26      	ldr	r2, [pc, #152]	; (80053b8 <HAL_ADC_Start_DMA+0x1d8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d015      	beq.n	800534e <HAL_ADC_Start_DMA+0x16e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a25      	ldr	r2, [pc, #148]	; (80053bc <HAL_ADC_Start_DMA+0x1dc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d105      	bne.n	8005338 <HAL_ADC_Start_DMA+0x158>
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <HAL_ADC_Start_DMA+0x1c8>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <HAL_ADC_Start_DMA+0x1e0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d129      	bne.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
 8005342:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_ADC_Start_DMA+0x1c8>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d823      	bhi.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d11c      	bne.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	e013      	b.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <HAL_ADC_Start_DMA+0x1d8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10e      	bne.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005394:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000000 	.word	0x20000000
 80053a4:	431bde83 	.word	0x431bde83
 80053a8:	40012300 	.word	0x40012300
 80053ac:	0800585d 	.word	0x0800585d
 80053b0:	08005917 	.word	0x08005917
 80053b4:	08005933 	.word	0x08005933
 80053b8:	40012000 	.word	0x40012000
 80053bc:	40012100 	.word	0x40012100
 80053c0:	40012200 	.word	0x40012200

080053c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x1c>
 8005418:	2302      	movs	r3, #2
 800541a:	e113      	b.n	8005644 <HAL_ADC_ConfigChannel+0x244>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b09      	cmp	r3, #9
 800542a:	d925      	bls.n	8005478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	3b1e      	subs	r3, #30
 8005442:	2207      	movs	r2, #7
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43da      	mvns	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	400a      	ands	r2, r1
 8005450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68d9      	ldr	r1, [r3, #12]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	4618      	mov	r0, r3
 8005464:	4603      	mov	r3, r0
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4403      	add	r3, r0
 800546a:	3b1e      	subs	r3, #30
 800546c:	409a      	lsls	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e022      	b.n	80054be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	2207      	movs	r2, #7
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	400a      	ands	r2, r1
 800549a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6919      	ldr	r1, [r3, #16]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4618      	mov	r0, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4403      	add	r3, r0
 80054b4:	409a      	lsls	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d824      	bhi.n	8005510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	3b05      	subs	r3, #5
 80054d8:	221f      	movs	r2, #31
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	400a      	ands	r2, r1
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4618      	mov	r0, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	3b05      	subs	r3, #5
 8005502:	fa00 f203 	lsl.w	r2, r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	635a      	str	r2, [r3, #52]	; 0x34
 800550e:	e04c      	b.n	80055aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d824      	bhi.n	8005562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	3b23      	subs	r3, #35	; 0x23
 800552a:	221f      	movs	r2, #31
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43da      	mvns	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	400a      	ands	r2, r1
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	4618      	mov	r0, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	3b23      	subs	r3, #35	; 0x23
 8005554:	fa00 f203 	lsl.w	r2, r0, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
 8005560:	e023      	b.n	80055aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	3b41      	subs	r3, #65	; 0x41
 8005574:	221f      	movs	r2, #31
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43da      	mvns	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	400a      	ands	r2, r1
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	4618      	mov	r0, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	3b41      	subs	r3, #65	; 0x41
 800559e:	fa00 f203 	lsl.w	r2, r0, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055aa:	4b29      	ldr	r3, [pc, #164]	; (8005650 <HAL_ADC_ConfigChannel+0x250>)
 80055ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a28      	ldr	r2, [pc, #160]	; (8005654 <HAL_ADC_ConfigChannel+0x254>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d10f      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x1d8>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b12      	cmp	r3, #18
 80055be:	d10b      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <HAL_ADC_ConfigChannel+0x254>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d12b      	bne.n	800563a <HAL_ADC_ConfigChannel+0x23a>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <HAL_ADC_ConfigChannel+0x258>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <HAL_ADC_ConfigChannel+0x1f4>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b11      	cmp	r3, #17
 80055f2:	d122      	bne.n	800563a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <HAL_ADC_ConfigChannel+0x258>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d111      	bne.n	800563a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_ADC_ConfigChannel+0x25c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <HAL_ADC_ConfigChannel+0x260>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	0c9a      	lsrs	r2, r3, #18
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800562c:	e002      	b.n	8005634 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	3b01      	subs	r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f9      	bne.n	800562e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012300 	.word	0x40012300
 8005654:	40012000 	.word	0x40012000
 8005658:	10000012 	.word	0x10000012
 800565c:	20000000 	.word	0x20000000
 8005660:	431bde83 	.word	0x431bde83

08005664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800566c:	4b79      	ldr	r3, [pc, #484]	; (8005854 <ADC_Init+0x1f0>)
 800566e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	021a      	lsls	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	4a58      	ldr	r2, [pc, #352]	; (8005858 <ADC_Init+0x1f4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800570a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800572c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e00f      	b.n	8005762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0202 	bic.w	r2, r2, #2
 8005770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6899      	ldr	r1, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7e1b      	ldrb	r3, [r3, #24]
 800577c:	005a      	lsls	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	3b01      	subs	r3, #1
 80057bc:	035a      	lsls	r2, r3, #13
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e007      	b.n	80057d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	051a      	lsls	r2, r3, #20
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800580c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6899      	ldr	r1, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800581a:	025a      	lsls	r2, r3, #9
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6899      	ldr	r1, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	029a      	lsls	r2, r3, #10
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012300 	.word	0x40012300
 8005858:	0f000001 	.word	0x0f000001

0800585c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005872:	2b00      	cmp	r3, #0
 8005874:	d13c      	bne.n	80058f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d12b      	bne.n	80058e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005894:	2b00      	cmp	r3, #0
 8005896:	d127      	bne.n	80058e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d119      	bne.n	80058e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0220 	bic.w	r2, r2, #32
 80058c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fd6b 	bl	80053c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058ee:	e00e      	b.n	800590e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fd75 	bl	80053ec <HAL_ADC_ErrorCallback>
}
 8005902:	e004      	b.n	800590e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fd57 	bl	80053d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fd4a 	bl	80053ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <__NVIC_SetPriorityGrouping>:
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800597c:	4013      	ands	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800598c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	60d3      	str	r3, [r2, #12]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <__NVIC_GetPriorityGrouping>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <__NVIC_GetPriorityGrouping+0x18>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	f003 0307 	and.w	r3, r3, #7
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	e000ed00 	.word	0xe000ed00

080059c4 <__NVIC_EnableIRQ>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	db0b      	blt.n	80059ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	f003 021f 	and.w	r2, r3, #31
 80059dc:	4907      	ldr	r1, [pc, #28]	; (80059fc <__NVIC_EnableIRQ+0x38>)
 80059de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2001      	movs	r0, #1
 80059e6:	fa00 f202 	lsl.w	r2, r0, r2
 80059ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	e000e100 	.word	0xe000e100

08005a00 <__NVIC_SetPriority>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	6039      	str	r1, [r7, #0]
 8005a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	db0a      	blt.n	8005a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	490c      	ldr	r1, [pc, #48]	; (8005a4c <__NVIC_SetPriority+0x4c>)
 8005a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1e:	0112      	lsls	r2, r2, #4
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	440b      	add	r3, r1
 8005a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a28:	e00a      	b.n	8005a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	4908      	ldr	r1, [pc, #32]	; (8005a50 <__NVIC_SetPriority+0x50>)
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	3b04      	subs	r3, #4
 8005a38:	0112      	lsls	r2, r2, #4
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	761a      	strb	r2, [r3, #24]
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	e000e100 	.word	0xe000e100
 8005a50:	e000ed00 	.word	0xe000ed00

08005a54 <NVIC_EncodePriority>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f1c3 0307 	rsb	r3, r3, #7
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	bf28      	it	cs
 8005a72:	2304      	movcs	r3, #4
 8005a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d902      	bls.n	8005a84 <NVIC_EncodePriority+0x30>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3b03      	subs	r3, #3
 8005a82:	e000      	b.n	8005a86 <NVIC_EncodePriority+0x32>
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43da      	mvns	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	401a      	ands	r2, r3
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	43d9      	mvns	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aac:	4313      	orrs	r3, r2
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <SysTick_Config>:
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005acc:	d301      	bcc.n	8005ad2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e00f      	b.n	8005af2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ad2:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <SysTick_Config+0x40>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ada:	210f      	movs	r1, #15
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	f7ff ff8e 	bl	8005a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <SysTick_Config+0x40>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aea:	4b04      	ldr	r3, [pc, #16]	; (8005afc <SysTick_Config+0x40>)
 8005aec:	2207      	movs	r2, #7
 8005aee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	e000e010 	.word	0xe000e010

08005b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff ff29 	bl	8005960 <__NVIC_SetPriorityGrouping>
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b28:	f7ff ff3e 	bl	80059a8 <__NVIC_GetPriorityGrouping>
 8005b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff ff8e 	bl	8005a54 <NVIC_EncodePriority>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff5d 	bl	8005a00 <__NVIC_SetPriority>
}
 8005b46:	bf00      	nop
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ff31 	bl	80059c4 <__NVIC_EnableIRQ>
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffa2 	bl	8005abc <SysTick_Config>
 8005b78:	4603      	mov	r3, r0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b90:	f7ff fab4 	bl	80050fc <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e099      	b.n	8005cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc0:	e00f      	b.n	8005be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc2:	f7ff fa9b 	bl	80050fc <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d908      	bls.n	8005be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e078      	b.n	8005cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e8      	bne.n	8005bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <HAL_DMA_Init+0x158>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d107      	bne.n	8005c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4313      	orrs	r3, r2
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d117      	bne.n	8005ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fa9d 	bl	80061c8 <DMA_CheckFifoParam>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2240      	movs	r2, #64	; 0x40
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e016      	b.n	8005cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa54 	bl	800615c <DMA_CalcBaseAndBitshift>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	223f      	movs	r2, #63	; 0x3f
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	f010803f 	.word	0xf010803f

08005ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_DMA_Start_IT+0x26>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e040      	b.n	8005d88 <HAL_DMA_Start_IT+0xa8>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d12f      	bne.n	8005d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f9e6 	bl	8006100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	223f      	movs	r2, #63	; 0x3f
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0216 	orr.w	r2, r2, #22
 8005d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e005      	b.n	8005d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
 8005d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d004      	beq.n	8005dae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e00c      	b.n	8005dc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2205      	movs	r2, #5
 8005db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005de0:	4b92      	ldr	r3, [pc, #584]	; (800602c <HAL_DMA_IRQHandler+0x258>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a92      	ldr	r2, [pc, #584]	; (8006030 <HAL_DMA_IRQHandler+0x25c>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0a9b      	lsrs	r3, r3, #10
 8005dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfe:	2208      	movs	r2, #8
 8005e00:	409a      	lsls	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01a      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f043 0201 	orr.w	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	2201      	movs	r2, #1
 8005e64:	409a      	lsls	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f043 0202 	orr.w	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d012      	beq.n	8005eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	2204      	movs	r2, #4
 8005e9a:	409a      	lsls	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	f043 0204 	orr.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	409a      	lsls	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d043      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d03c      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	2210      	movs	r2, #16
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d018      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d024      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
 8005f02:	e01f      	b.n	8005f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
 8005f14:	e016      	b.n	8005f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d107      	bne.n	8005f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0208 	bic.w	r2, r2, #8
 8005f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	2220      	movs	r2, #32
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 808e 	beq.w	8006072 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8086 	beq.w	8006072 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d136      	bne.n	8005fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0216 	bic.w	r2, r2, #22
 8005f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_DMA_IRQHandler+0x1da>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0208 	bic.w	r2, r2, #8
 8005fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	223f      	movs	r2, #63	; 0x3f
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d07d      	beq.n	80060de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
        }
        return;
 8005fea:	e078      	b.n	80060de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01c      	beq.n	8006034 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d108      	bne.n	800601a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600c:	2b00      	cmp	r3, #0
 800600e:	d030      	beq.n	8006072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
 8006018:	e02b      	b.n	8006072 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d027      	beq.n	8006072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
 800602a:	e022      	b.n	8006072 <HAL_DMA_IRQHandler+0x29e>
 800602c:	20000000 	.word	0x20000000
 8006030:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0210 	bic.w	r2, r2, #16
 8006050:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	2b00      	cmp	r3, #0
 8006078:	d032      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d022      	beq.n	80060cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2205      	movs	r2, #5
 800608a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d307      	bcc.n	80060ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f2      	bne.n	800609e <HAL_DMA_IRQHandler+0x2ca>
 80060b8:	e000      	b.n	80060bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80060ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	e000      	b.n	80060e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80060de:	bf00      	nop
    }
  }
}
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop

080060e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800611c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d108      	bne.n	8006140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800613e:	e007      	b.n	8006150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	3b10      	subs	r3, #16
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <DMA_CalcBaseAndBitshift+0x64>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d909      	bls.n	800619e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	659a      	str	r2, [r3, #88]	; 0x58
 800619c:	e007      	b.n	80061ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	aaaaaaab 	.word	0xaaaaaaab
 80061c4:	080160d8 	.word	0x080160d8

080061c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11f      	bne.n	8006222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d855      	bhi.n	8006294 <DMA_CheckFifoParam+0xcc>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <DMA_CheckFifoParam+0x28>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006213 	.word	0x08006213
 80061f8:	08006201 	.word	0x08006201
 80061fc:	08006295 	.word	0x08006295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d045      	beq.n	8006298 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006210:	e042      	b.n	8006298 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800621a:	d13f      	bne.n	800629c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006220:	e03c      	b.n	800629c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622a:	d121      	bne.n	8006270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d836      	bhi.n	80062a0 <DMA_CheckFifoParam+0xd8>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <DMA_CheckFifoParam+0x70>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	08006249 	.word	0x08006249
 800623c:	0800624f 	.word	0x0800624f
 8006240:	08006249 	.word	0x08006249
 8006244:	08006261 	.word	0x08006261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
      break;
 800624c:	e02f      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d024      	beq.n	80062a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800625e:	e021      	b.n	80062a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006268:	d11e      	bne.n	80062a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800626e:	e01b      	b.n	80062a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d902      	bls.n	800627c <DMA_CheckFifoParam+0xb4>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d003      	beq.n	8006282 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800627a:	e018      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      break;
 8006280:	e015      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
      break;
 8006292:	e00b      	b.n	80062ac <DMA_CheckFifoParam+0xe4>
      break;
 8006294:	bf00      	nop
 8006296:	e00a      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;
 8006298:	bf00      	nop
 800629a:	e008      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;
 800629c:	bf00      	nop
 800629e:	e006      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;
 80062a0:	bf00      	nop
 80062a2:	e004      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;
 80062a4:	bf00      	nop
 80062a6:	e002      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;   
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <DMA_CheckFifoParam+0xe6>
      break;
 80062ac:	bf00      	nop
    }
  } 
  
  return status; 
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	e177      	b.n	80065c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062d8:	2201      	movs	r2, #1
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4013      	ands	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	f040 8166 	bne.w	80065c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d00b      	beq.n	8006316 <HAL_GPIO_Init+0x5a>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d007      	beq.n	8006316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800630a:	2b11      	cmp	r3, #17
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b12      	cmp	r3, #18
 8006314:	d130      	bne.n	8006378 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	2203      	movs	r2, #3
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800634c:	2201      	movs	r2, #1
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 0201 	and.w	r2, r3, #1
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4313      	orrs	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	2203      	movs	r2, #3
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4013      	ands	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d003      	beq.n	80063b8 <HAL_GPIO_Init+0xfc>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b12      	cmp	r3, #18
 80063b6:	d123      	bne.n	8006400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	08da      	lsrs	r2, r3, #3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3208      	adds	r2, #8
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	220f      	movs	r2, #15
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	08da      	lsrs	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3208      	adds	r2, #8
 80063fa:	69b9      	ldr	r1, [r7, #24]
 80063fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	2203      	movs	r2, #3
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4013      	ands	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 0203 	and.w	r2, r3, #3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4313      	orrs	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80c0 	beq.w	80065c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_GPIO_Init+0x320>)
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	4a64      	ldr	r2, [pc, #400]	; (80065dc <HAL_GPIO_Init+0x320>)
 800644c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006450:	6453      	str	r3, [r2, #68]	; 0x44
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_GPIO_Init+0x320>)
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800645e:	4a60      	ldr	r2, [pc, #384]	; (80065e0 <HAL_GPIO_Init+0x324>)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	3302      	adds	r3, #2
 8006466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	220f      	movs	r2, #15
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a57      	ldr	r2, [pc, #348]	; (80065e4 <HAL_GPIO_Init+0x328>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d037      	beq.n	80064fa <HAL_GPIO_Init+0x23e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a56      	ldr	r2, [pc, #344]	; (80065e8 <HAL_GPIO_Init+0x32c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d031      	beq.n	80064f6 <HAL_GPIO_Init+0x23a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a55      	ldr	r2, [pc, #340]	; (80065ec <HAL_GPIO_Init+0x330>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02b      	beq.n	80064f2 <HAL_GPIO_Init+0x236>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a54      	ldr	r2, [pc, #336]	; (80065f0 <HAL_GPIO_Init+0x334>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d025      	beq.n	80064ee <HAL_GPIO_Init+0x232>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a53      	ldr	r2, [pc, #332]	; (80065f4 <HAL_GPIO_Init+0x338>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01f      	beq.n	80064ea <HAL_GPIO_Init+0x22e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a52      	ldr	r2, [pc, #328]	; (80065f8 <HAL_GPIO_Init+0x33c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d019      	beq.n	80064e6 <HAL_GPIO_Init+0x22a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a51      	ldr	r2, [pc, #324]	; (80065fc <HAL_GPIO_Init+0x340>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_GPIO_Init+0x226>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a50      	ldr	r2, [pc, #320]	; (8006600 <HAL_GPIO_Init+0x344>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00d      	beq.n	80064de <HAL_GPIO_Init+0x222>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a4f      	ldr	r2, [pc, #316]	; (8006604 <HAL_GPIO_Init+0x348>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <HAL_GPIO_Init+0x21e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a4e      	ldr	r2, [pc, #312]	; (8006608 <HAL_GPIO_Init+0x34c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_GPIO_Init+0x21a>
 80064d2:	2309      	movs	r3, #9
 80064d4:	e012      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064d6:	230a      	movs	r3, #10
 80064d8:	e010      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064da:	2308      	movs	r3, #8
 80064dc:	e00e      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064de:	2307      	movs	r3, #7
 80064e0:	e00c      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064e2:	2306      	movs	r3, #6
 80064e4:	e00a      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064e6:	2305      	movs	r3, #5
 80064e8:	e008      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064ea:	2304      	movs	r3, #4
 80064ec:	e006      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064ee:	2303      	movs	r3, #3
 80064f0:	e004      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e002      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_GPIO_Init+0x240>
 80064fa:	2300      	movs	r3, #0
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	f002 0203 	and.w	r2, r2, #3
 8006502:	0092      	lsls	r2, r2, #2
 8006504:	4093      	lsls	r3, r2
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800650c:	4934      	ldr	r1, [pc, #208]	; (80065e0 <HAL_GPIO_Init+0x324>)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	089b      	lsrs	r3, r3, #2
 8006512:	3302      	adds	r3, #2
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800651a:	4b3c      	ldr	r3, [pc, #240]	; (800660c <HAL_GPIO_Init+0x350>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800653e:	4a33      	ldr	r2, [pc, #204]	; (800660c <HAL_GPIO_Init+0x350>)
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006544:	4b31      	ldr	r3, [pc, #196]	; (800660c <HAL_GPIO_Init+0x350>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <HAL_GPIO_Init+0x350>)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800656e:	4b27      	ldr	r3, [pc, #156]	; (800660c <HAL_GPIO_Init+0x350>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	43db      	mvns	r3, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4013      	ands	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <HAL_GPIO_Init+0x350>)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006598:	4b1c      	ldr	r3, [pc, #112]	; (800660c <HAL_GPIO_Init+0x350>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <HAL_GPIO_Init+0x350>)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3301      	adds	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	f67f ae84 	bls.w	80062d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065d0:	bf00      	nop
 80065d2:	3724      	adds	r7, #36	; 0x24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40013800 	.word	0x40013800
 80065e4:	40020000 	.word	0x40020000
 80065e8:	40020400 	.word	0x40020400
 80065ec:	40020800 	.word	0x40020800
 80065f0:	40020c00 	.word	0x40020c00
 80065f4:	40021000 	.word	0x40021000
 80065f8:	40021400 	.word	0x40021400
 80065fc:	40021800 	.word	0x40021800
 8006600:	40021c00 	.word	0x40021c00
 8006604:	40022000 	.word	0x40022000
 8006608:	40022400 	.word	0x40022400
 800660c:	40013c00 	.word	0x40013c00

08006610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	4013      	ands	r3, r2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	e001      	b.n	8006632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	807b      	strh	r3, [r7, #2]
 800664c:	4613      	mov	r3, r2
 800664e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006650:	787b      	ldrb	r3, [r7, #1]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006656:	887a      	ldrh	r2, [r7, #2]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800665c:	e003      	b.n	8006666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	041a      	lsls	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	619a      	str	r2, [r3, #24]
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d006      	beq.n	8006698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800668a:	4a05      	ldr	r2, [pc, #20]	; (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fc fbe9 	bl	8002e6a <HAL_GPIO_EXTI_Callback>
  }
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40013c00 	.word	0x40013c00

080066a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e11f      	b.n	80068f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fd fc42 	bl	8003f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	; 0x24
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006708:	f000 fe24 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4a7b      	ldr	r2, [pc, #492]	; (8006900 <HAL_I2C_Init+0x25c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d807      	bhi.n	8006728 <HAL_I2C_Init+0x84>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a7a      	ldr	r2, [pc, #488]	; (8006904 <HAL_I2C_Init+0x260>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e006      	b.n	8006736 <HAL_I2C_Init+0x92>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a77      	ldr	r2, [pc, #476]	; (8006908 <HAL_I2C_Init+0x264>)
 800672c:	4293      	cmp	r3, r2
 800672e:	bf94      	ite	ls
 8006730:	2301      	movls	r3, #1
 8006732:	2300      	movhi	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0db      	b.n	80068f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a72      	ldr	r2, [pc, #456]	; (800690c <HAL_I2C_Init+0x268>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0c9b      	lsrs	r3, r3, #18
 8006748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a64      	ldr	r2, [pc, #400]	; (8006900 <HAL_I2C_Init+0x25c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d802      	bhi.n	8006778 <HAL_I2C_Init+0xd4>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	e009      	b.n	800678c <HAL_I2C_Init+0xe8>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	4a63      	ldr	r2, [pc, #396]	; (8006910 <HAL_I2C_Init+0x26c>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	3301      	adds	r3, #1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	430b      	orrs	r3, r1
 8006792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800679e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4956      	ldr	r1, [pc, #344]	; (8006900 <HAL_I2C_Init+0x25c>)
 80067a8:	428b      	cmp	r3, r1
 80067aa:	d80d      	bhi.n	80067c8 <HAL_I2C_Init+0x124>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e59      	subs	r1, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ba:	3301      	adds	r3, #1
 80067bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	bf38      	it	cc
 80067c4:	2304      	movcc	r3, #4
 80067c6:	e04f      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d111      	bne.n	80067f4 <HAL_I2C_Init+0x150>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1e58      	subs	r0, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	440b      	add	r3, r1
 80067de:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e2:	3301      	adds	r3, #1
 80067e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e012      	b.n	800681a <HAL_I2C_Init+0x176>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e58      	subs	r0, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	0099      	lsls	r1, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	fbb0 f3f3 	udiv	r3, r0, r3
 800680a:	3301      	adds	r3, #1
 800680c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Init+0x17e>
 800681e:	2301      	movs	r3, #1
 8006820:	e022      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10e      	bne.n	8006848 <HAL_I2C_Init+0x1a4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1e58      	subs	r0, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	440b      	add	r3, r1
 8006838:	fbb0 f3f3 	udiv	r3, r0, r3
 800683c:	3301      	adds	r3, #1
 800683e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006846:	e00f      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1e58      	subs	r0, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6859      	ldr	r1, [r3, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	0099      	lsls	r1, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	fbb0 f3f3 	udiv	r3, r0, r3
 800685e:	3301      	adds	r3, #1
 8006860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	6809      	ldr	r1, [r1, #0]
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69da      	ldr	r2, [r3, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6911      	ldr	r1, [r2, #16]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	4311      	orrs	r1, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	000186a0 	.word	0x000186a0
 8006904:	001e847f 	.word	0x001e847f
 8006908:	003d08ff 	.word	0x003d08ff
 800690c:	431bde83 	.word	0x431bde83
 8006910:	10624dd3 	.word	0x10624dd3

08006914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	461a      	mov	r2, r3
 8006920:	460b      	mov	r3, r1
 8006922:	817b      	strh	r3, [r7, #10]
 8006924:	4613      	mov	r3, r2
 8006926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006928:	f7fe fbe8 	bl	80050fc <HAL_GetTick>
 800692c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b20      	cmp	r3, #32
 8006938:	f040 80e0 	bne.w	8006afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2319      	movs	r3, #25
 8006942:	2201      	movs	r2, #1
 8006944:	4970      	ldr	r1, [pc, #448]	; (8006b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f964 	bl	8006c14 <I2C_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006952:	2302      	movs	r3, #2
 8006954:	e0d3      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_I2C_Master_Transmit+0x50>
 8006960:	2302      	movs	r3, #2
 8006962:	e0cc      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d007      	beq.n	800698a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2221      	movs	r2, #33	; 0x21
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2210      	movs	r2, #16
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	893a      	ldrh	r2, [r7, #8]
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a50      	ldr	r2, [pc, #320]	; (8006b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069cc:	8979      	ldrh	r1, [r7, #10]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a3a      	ldr	r2, [r7, #32]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f89c 	bl	8006b10 <I2C_MasterRequestWrite>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e08d      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80069f8:	e066      	b.n	8006ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	6a39      	ldr	r1, [r7, #32]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f9de 	bl	8006dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d107      	bne.n	8006a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e06b      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d11b      	bne.n	8006a9c <HAL_I2C_Master_Transmit+0x188>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	6a39      	ldr	r1, [r7, #32]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f9ce 	bl	8006e42 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00d      	beq.n	8006ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d107      	bne.n	8006ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e01a      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d194      	bne.n	80069fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	00100002 	.word	0x00100002
 8006b0c:	ffff0000 	.word	0xffff0000

08006b10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d006      	beq.n	8006b3a <I2C_MasterRequestWrite+0x2a>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d003      	beq.n	8006b3a <I2C_MasterRequestWrite+0x2a>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b38:	d108      	bne.n	8006b4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e00b      	b.n	8006b64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	2b12      	cmp	r3, #18
 8006b52:	d107      	bne.n	8006b64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f84f 	bl	8006c14 <I2C_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d103      	bne.n	8006b94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e035      	b.n	8006c04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba0:	d108      	bne.n	8006bb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bb0:	611a      	str	r2, [r3, #16]
 8006bb2:	e01b      	b.n	8006bec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bb4:	897b      	ldrh	r3, [r7, #10]
 8006bb6:	11db      	asrs	r3, r3, #7
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 0306 	and.w	r3, r3, #6
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f063 030f 	orn	r3, r3, #15
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	490e      	ldr	r1, [pc, #56]	; (8006c0c <I2C_MasterRequestWrite+0xfc>)
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f875 	bl	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e010      	b.n	8006c04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006be2:	897b      	ldrh	r3, [r7, #10]
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4907      	ldr	r1, [pc, #28]	; (8006c10 <I2C_MasterRequestWrite+0x100>)
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f865 	bl	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	00010008 	.word	0x00010008
 8006c10:	00010002 	.word	0x00010002

08006c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c24:	e025      	b.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d021      	beq.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2e:	f7fe fa65 	bl	80050fc <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d116      	bne.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f043 0220 	orr.w	r2, r3, #32
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e023      	b.n	8006cba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d10d      	bne.n	8006c98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	43da      	mvns	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	e00c      	b.n	8006cb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf0c      	ite	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	2300      	movne	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d0b6      	beq.n	8006c26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cd0:	e051      	b.n	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d123      	bne.n	8006d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e046      	b.n	8006db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d021      	beq.n	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fe f9e3 	bl	80050fc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d116      	bne.n	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e020      	b.n	8006db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10c      	bne.n	8006d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	43da      	mvns	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf14      	ite	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	2300      	moveq	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e00b      	b.n	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	43da      	mvns	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4013      	ands	r3, r2
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d18d      	bne.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dcc:	e02d      	b.n	8006e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f878 	bl	8006ec4 <I2C_IsAcknowledgeFailed>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e02d      	b.n	8006e3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d021      	beq.n	8006e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de6:	f7fe f989 	bl	80050fc <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d116      	bne.n	8006e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e007      	b.n	8006e3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e34:	2b80      	cmp	r3, #128	; 0x80
 8006e36:	d1ca      	bne.n	8006dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e4e:	e02d      	b.n	8006eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f837 	bl	8006ec4 <I2C_IsAcknowledgeFailed>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e02d      	b.n	8006ebc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d021      	beq.n	8006eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e68:	f7fe f948 	bl	80050fc <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e007      	b.n	8006ebc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d1ca      	bne.n	8006e50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eda:	d11b      	bne.n	8006f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	f043 0204 	orr.w	r2, r3, #4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f2e:	2300      	movs	r3, #0
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f3e:	4b1d      	ldr	r3, [pc, #116]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f50:	f7fe f8d4 	bl	80050fc <HAL_GetTick>
 8006f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f56:	e009      	b.n	8006f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f58:	f7fe f8d0 	bl	80050fc <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f66:	d901      	bls.n	8006f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01f      	b.n	8006fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f6c:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f78:	d1ee      	bne.n	8006f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f7a:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f80:	f7fe f8bc 	bl	80050fc <HAL_GetTick>
 8006f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f86:	e009      	b.n	8006f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f88:	f7fe f8b8 	bl	80050fc <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f96:	d901      	bls.n	8006f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e007      	b.n	8006fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa8:	d1ee      	bne.n	8006f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	420e0040 	.word	0x420e0040
 8006fbc:	40007000 	.word	0x40007000
 8006fc0:	420e0044 	.word	0x420e0044

08006fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0cc      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b68      	ldr	r3, [pc, #416]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d90c      	bls.n	8007000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b65      	ldr	r3, [pc, #404]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b63      	ldr	r3, [pc, #396]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0b8      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007018:	4b59      	ldr	r3, [pc, #356]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a58      	ldr	r2, [pc, #352]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a52      	ldr	r2, [pc, #328]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800703a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703c:	4b50      	ldr	r3, [pc, #320]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	494d      	ldr	r1, [pc, #308]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d044      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007062:	4b47      	ldr	r3, [pc, #284]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d119      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d003      	beq.n	8007082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707e:	2b03      	cmp	r3, #3
 8007080:	d107      	bne.n	8007092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007082:	4b3f      	ldr	r3, [pc, #252]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e06f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007092:	4b3b      	ldr	r3, [pc, #236]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e067      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070a2:	4b37      	ldr	r3, [pc, #220]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f023 0203 	bic.w	r2, r3, #3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	4934      	ldr	r1, [pc, #208]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b4:	f7fe f822 	bl	80050fc <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ba:	e00a      	b.n	80070d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070bc:	f7fe f81e 	bl	80050fc <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e04f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d2:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 020c 	and.w	r2, r3, #12
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d1eb      	bne.n	80070bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070e4:	4b25      	ldr	r3, [pc, #148]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d20c      	bcs.n	800710c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	4b22      	ldr	r3, [pc, #136]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e032      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4916      	ldr	r1, [pc, #88]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	4313      	orrs	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007136:	4b12      	ldr	r3, [pc, #72]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	490e      	ldr	r1, [pc, #56]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800714a:	f000 f821 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800714e:	4601      	mov	r1, r0
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <HAL_RCC_ClockConfig+0x1c0>)
 800715c:	5cd3      	ldrb	r3, [r2, r3]
 800715e:	fa21 f303 	lsr.w	r3, r1, r3
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1c4>)
 8007164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_RCC_ClockConfig+0x1c8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd ff82 	bl	8005074 <HAL_InitTick>

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40023c00 	.word	0x40023c00
 8007180:	40023800 	.word	0x40023800
 8007184:	080160c0 	.word	0x080160c0
 8007188:	20000000 	.word	0x20000000
 800718c:	20000004 	.word	0x20000004

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	607b      	str	r3, [r7, #4]
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	2300      	movs	r3, #0
 80071a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a6:	4b63      	ldr	r3, [pc, #396]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d007      	beq.n	80071c2 <HAL_RCC_GetSysClockFreq+0x32>
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d008      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x38>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 80b4 	bne.w	8007324 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071bc:	4b5e      	ldr	r3, [pc, #376]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071be:	60bb      	str	r3, [r7, #8]
       break;
 80071c0:	e0b3      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071c2:	4b5d      	ldr	r3, [pc, #372]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071c4:	60bb      	str	r3, [r7, #8]
      break;
 80071c6:	e0b0      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071c8:	4b5a      	ldr	r3, [pc, #360]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071d2:	4b58      	ldr	r3, [pc, #352]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d04a      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071de:	4b55      	ldr	r3, [pc, #340]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	099b      	lsrs	r3, r3, #6
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	ea03 0501 	and.w	r5, r3, r1
 80071f4:	ea04 0602 	and.w	r6, r4, r2
 80071f8:	4629      	mov	r1, r5
 80071fa:	4632      	mov	r2, r6
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	f04f 0400 	mov.w	r4, #0
 8007204:	0154      	lsls	r4, r2, #5
 8007206:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800720a:	014b      	lsls	r3, r1, #5
 800720c:	4619      	mov	r1, r3
 800720e:	4622      	mov	r2, r4
 8007210:	1b49      	subs	r1, r1, r5
 8007212:	eb62 0206 	sbc.w	r2, r2, r6
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	f04f 0400 	mov.w	r4, #0
 800721e:	0194      	lsls	r4, r2, #6
 8007220:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007224:	018b      	lsls	r3, r1, #6
 8007226:	1a5b      	subs	r3, r3, r1
 8007228:	eb64 0402 	sbc.w	r4, r4, r2
 800722c:	f04f 0100 	mov.w	r1, #0
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	00e2      	lsls	r2, r4, #3
 8007236:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800723a:	00d9      	lsls	r1, r3, #3
 800723c:	460b      	mov	r3, r1
 800723e:	4614      	mov	r4, r2
 8007240:	195b      	adds	r3, r3, r5
 8007242:	eb44 0406 	adc.w	r4, r4, r6
 8007246:	f04f 0100 	mov.w	r1, #0
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	02a2      	lsls	r2, r4, #10
 8007250:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007254:	0299      	lsls	r1, r3, #10
 8007256:	460b      	mov	r3, r1
 8007258:	4614      	mov	r4, r2
 800725a:	4618      	mov	r0, r3
 800725c:	4621      	mov	r1, r4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f04f 0400 	mov.w	r4, #0
 8007264:	461a      	mov	r2, r3
 8007266:	4623      	mov	r3, r4
 8007268:	f7f9 fd26 	bl	8000cb8 <__aeabi_uldivmod>
 800726c:	4603      	mov	r3, r0
 800726e:	460c      	mov	r4, r1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e049      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007274:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	099b      	lsrs	r3, r3, #6
 800727a:	f04f 0400 	mov.w	r4, #0
 800727e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	ea03 0501 	and.w	r5, r3, r1
 800728a:	ea04 0602 	and.w	r6, r4, r2
 800728e:	4629      	mov	r1, r5
 8007290:	4632      	mov	r2, r6
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	f04f 0400 	mov.w	r4, #0
 800729a:	0154      	lsls	r4, r2, #5
 800729c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072a0:	014b      	lsls	r3, r1, #5
 80072a2:	4619      	mov	r1, r3
 80072a4:	4622      	mov	r2, r4
 80072a6:	1b49      	subs	r1, r1, r5
 80072a8:	eb62 0206 	sbc.w	r2, r2, r6
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	0194      	lsls	r4, r2, #6
 80072b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072ba:	018b      	lsls	r3, r1, #6
 80072bc:	1a5b      	subs	r3, r3, r1
 80072be:	eb64 0402 	sbc.w	r4, r4, r2
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	00e2      	lsls	r2, r4, #3
 80072cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072d0:	00d9      	lsls	r1, r3, #3
 80072d2:	460b      	mov	r3, r1
 80072d4:	4614      	mov	r4, r2
 80072d6:	195b      	adds	r3, r3, r5
 80072d8:	eb44 0406 	adc.w	r4, r4, r6
 80072dc:	f04f 0100 	mov.w	r1, #0
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	02a2      	lsls	r2, r4, #10
 80072e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80072ea:	0299      	lsls	r1, r3, #10
 80072ec:	460b      	mov	r3, r1
 80072ee:	4614      	mov	r4, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	4621      	mov	r1, r4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f04f 0400 	mov.w	r4, #0
 80072fa:	461a      	mov	r2, r3
 80072fc:	4623      	mov	r3, r4
 80072fe:	f7f9 fcdb 	bl	8000cb8 <__aeabi_uldivmod>
 8007302:	4603      	mov	r3, r0
 8007304:	460c      	mov	r4, r1
 8007306:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	0c1b      	lsrs	r3, r3, #16
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	3301      	adds	r3, #1
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	60bb      	str	r3, [r7, #8]
      break;
 8007322:	e002      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007326:	60bb      	str	r3, [r7, #8]
      break;
 8007328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800732a:	68bb      	ldr	r3, [r7, #8]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007334:	40023800 	.word	0x40023800
 8007338:	00f42400 	.word	0x00f42400

0800733c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_RCC_GetHCLKFreq+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000000 	.word	0x20000000

08007354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007358:	f7ff fff0 	bl	800733c <HAL_RCC_GetHCLKFreq>
 800735c:	4601      	mov	r1, r0
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	0a9b      	lsrs	r3, r3, #10
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	4a03      	ldr	r2, [pc, #12]	; (8007378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800736a:	5cd3      	ldrb	r3, [r2, r3]
 800736c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40023800 	.word	0x40023800
 8007378:	080160d0 	.word	0x080160d0

0800737c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007380:	f7ff ffdc 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8007384:	4601      	mov	r1, r0
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	0b5b      	lsrs	r3, r3, #13
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	4a03      	ldr	r2, [pc, #12]	; (80073a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40023800 	.word	0x40023800
 80073a0:	080160d0 	.word	0x080160d0

080073a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80073cc:	4b66      	ldr	r3, [pc, #408]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	4963      	ldr	r1, [pc, #396]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80073ee:	4b5e      	ldr	r3, [pc, #376]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	495a      	ldr	r1, [pc, #360]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007424:	2b00      	cmp	r3, #0
 8007426:	d075      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007428:	4b50      	ldr	r3, [pc, #320]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800742e:	f7fd fe65 	bl	80050fc <HAL_GetTick>
 8007432:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007436:	f7fd fe61 	bl	80050fc <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e1dc      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007448:	4b47      	ldr	r3, [pc, #284]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f0      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	019a      	lsls	r2, r3, #6
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	071b      	lsls	r3, r3, #28
 800746c:	493e      	ldr	r1, [pc, #248]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007480:	4b39      	ldr	r3, [pc, #228]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	019a      	lsls	r2, r3, #6
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	431a      	orrs	r2, r3
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	071b      	lsls	r3, r3, #28
 80074a0:	4931      	ldr	r1, [pc, #196]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074a8:	4b2f      	ldr	r3, [pc, #188]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ae:	f023 021f 	bic.w	r2, r3, #31
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	492b      	ldr	r1, [pc, #172]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00d      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	019a      	lsls	r2, r3, #6
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	061b      	lsls	r3, r3, #24
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	071b      	lsls	r3, r3, #28
 80074e0:	4921      	ldr	r1, [pc, #132]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074e8:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ee:	f7fd fe05 	bl	80050fc <HAL_GetTick>
 80074f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f4:	e008      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074f6:	f7fd fe01 	bl	80050fc <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e17c      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007508:	4b17      	ldr	r3, [pc, #92]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d112      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10c      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80ce 	beq.w	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800753e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007542:	f040 80c8 	bne.w	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800754c:	f7fd fdd6 	bl	80050fc <HAL_GetTick>
 8007550:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007552:	e00f      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007554:	f7fd fdd2 	bl	80050fc <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d908      	bls.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e14d      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007566:	bf00      	nop
 8007568:	40023800 	.word	0x40023800
 800756c:	42470068 	.word	0x42470068
 8007570:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007574:	4ba5      	ldr	r3, [pc, #660]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007580:	d0e8      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d02e      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800758e:	4b9f      	ldr	r3, [pc, #636]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	3301      	adds	r3, #1
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075a0:	4b9a      	ldr	r3, [pc, #616]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a6:	0f1b      	lsrs	r3, r3, #28
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	019a      	lsls	r2, r3, #6
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	3b01      	subs	r3, #1
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	071b      	lsls	r3, r3, #28
 80075ca:	4990      	ldr	r1, [pc, #576]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075d2:	4b8e      	ldr	r3, [pc, #568]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	3b01      	subs	r3, #1
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4989      	ldr	r1, [pc, #548]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02c      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80075f8:	4b84      	ldr	r3, [pc, #528]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	3301      	adds	r3, #1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800760a:	4b80      	ldr	r3, [pc, #512]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	0e1b      	lsrs	r3, r3, #24
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	019a      	lsls	r2, r3, #6
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	3b01      	subs	r3, #1
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	431a      	orrs	r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	061b      	lsls	r3, r3, #24
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	071b      	lsls	r3, r3, #28
 8007634:	4975      	ldr	r1, [pc, #468]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800763c:	4b73      	ldr	r3, [pc, #460]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800763e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	4970      	ldr	r1, [pc, #448]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b00      	cmp	r3, #0
 800765c:	d024      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007666:	d11f      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007668:	4b68      	ldr	r3, [pc, #416]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766e:	0e1b      	lsrs	r3, r3, #24
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007676:	4b65      	ldr	r3, [pc, #404]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	0f1b      	lsrs	r3, r3, #28
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	019a      	lsls	r2, r3, #6
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	3b01      	subs	r3, #1
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	431a      	orrs	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	061b      	lsls	r3, r3, #24
 800769a:	431a      	orrs	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	071b      	lsls	r3, r3, #28
 80076a0:	495a      	ldr	r1, [pc, #360]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ae:	f7fd fd25 	bl	80050fc <HAL_GetTick>
 80076b2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80076b6:	f7fd fd21 	bl	80050fc <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e09c      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076c8:	4b50      	ldr	r3, [pc, #320]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d4:	d1ef      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8083 	beq.w	80077ea <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076e4:	2300      	movs	r3, #0
 80076e6:	60bb      	str	r3, [r7, #8]
 80076e8:	4b48      	ldr	r3, [pc, #288]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	4a47      	ldr	r2, [pc, #284]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	6413      	str	r3, [r2, #64]	; 0x40
 80076f4:	4b45      	ldr	r3, [pc, #276]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007700:	4b44      	ldr	r3, [pc, #272]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a43      	ldr	r2, [pc, #268]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800770a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800770c:	f7fd fcf6 	bl	80050fc <HAL_GetTick>
 8007710:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007714:	f7fd fcf2 	bl	80050fc <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e06d      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007726:	4b3b      	ldr	r3, [pc, #236]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007732:	4b36      	ldr	r3, [pc, #216]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02f      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	429a      	cmp	r2, r3
 800774e:	d028      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007750:	4b2e      	ldr	r3, [pc, #184]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007758:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800775a:	4b2f      	ldr	r3, [pc, #188]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007760:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007766:	4a29      	ldr	r2, [pc, #164]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800776c:	4b27      	ldr	r3, [pc, #156]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d114      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007778:	f7fd fcc0 	bl	80050fc <HAL_GetTick>
 800777c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777e:	e00a      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007780:	f7fd fcbc 	bl	80050fc <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	f241 3288 	movw	r2, #5000	; 0x1388
 800778e:	4293      	cmp	r3, r2
 8007790:	d901      	bls.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e035      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0ee      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ae:	d10d      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80077b0:	4b16      	ldr	r3, [pc, #88]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c4:	4911      	ldr	r1, [pc, #68]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	608b      	str	r3, [r1, #8]
 80077ca:	e005      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4a0e      	ldr	r2, [pc, #56]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077d6:	6093      	str	r3, [r2, #8]
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e4:	4909      	ldr	r1, [pc, #36]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80077fe:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800
 8007810:	42470070 	.word	0x42470070
 8007814:	40007000 	.word	0x40007000
 8007818:	42470e40 	.word	0x42470e40
 800781c:	424711e0 	.word	0x424711e0

08007820 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d075      	beq.n	8007924 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007838:	4ba2      	ldr	r3, [pc, #648]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b04      	cmp	r3, #4
 8007842:	d00c      	beq.n	800785e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007844:	4b9f      	ldr	r3, [pc, #636]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800784c:	2b08      	cmp	r3, #8
 800784e:	d112      	bne.n	8007876 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007850:	4b9c      	ldr	r3, [pc, #624]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800785c:	d10b      	bne.n	8007876 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785e:	4b99      	ldr	r3, [pc, #612]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d05b      	beq.n	8007922 <HAL_RCC_OscConfig+0x102>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d157      	bne.n	8007922 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e20b      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787e:	d106      	bne.n	800788e <HAL_RCC_OscConfig+0x6e>
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a8f      	ldr	r2, [pc, #572]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e01d      	b.n	80078ca <HAL_RCC_OscConfig+0xaa>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007896:	d10c      	bne.n	80078b2 <HAL_RCC_OscConfig+0x92>
 8007898:	4b8a      	ldr	r3, [pc, #552]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a89      	ldr	r2, [pc, #548]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800789e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b87      	ldr	r3, [pc, #540]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a86      	ldr	r2, [pc, #536]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	e00b      	b.n	80078ca <HAL_RCC_OscConfig+0xaa>
 80078b2:	4b84      	ldr	r3, [pc, #528]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a83      	ldr	r2, [pc, #524]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	4b81      	ldr	r3, [pc, #516]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a80      	ldr	r2, [pc, #512]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d013      	beq.n	80078fa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d2:	f7fd fc13 	bl	80050fc <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078da:	f7fd fc0f 	bl	80050fc <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b64      	cmp	r3, #100	; 0x64
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e1d0      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ec:	4b75      	ldr	r3, [pc, #468]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0xba>
 80078f8:	e014      	b.n	8007924 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fa:	f7fd fbff 	bl	80050fc <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007902:	f7fd fbfb 	bl	80050fc <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b64      	cmp	r3, #100	; 0x64
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e1bc      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007914:	4b6b      	ldr	r3, [pc, #428]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f0      	bne.n	8007902 <HAL_RCC_OscConfig+0xe2>
 8007920:	e000      	b.n	8007924 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007922:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d063      	beq.n	80079f8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007930:	4b64      	ldr	r3, [pc, #400]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 030c 	and.w	r3, r3, #12
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800793c:	4b61      	ldr	r3, [pc, #388]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007944:	2b08      	cmp	r3, #8
 8007946:	d11c      	bne.n	8007982 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007948:	4b5e      	ldr	r3, [pc, #376]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d116      	bne.n	8007982 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007954:	4b5b      	ldr	r3, [pc, #364]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_RCC_OscConfig+0x14c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d001      	beq.n	800796c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e190      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796c:	4b55      	ldr	r3, [pc, #340]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4952      	ldr	r1, [pc, #328]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 800797c:	4313      	orrs	r3, r2
 800797e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007980:	e03a      	b.n	80079f8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800798a:	4b4f      	ldr	r3, [pc, #316]	; (8007ac8 <HAL_RCC_OscConfig+0x2a8>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd fbb4 	bl	80050fc <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007998:	f7fd fbb0 	bl	80050fc <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e171      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079aa:	4b46      	ldr	r3, [pc, #280]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079b6:	4b43      	ldr	r3, [pc, #268]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	493f      	ldr	r1, [pc, #252]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]
 80079ca:	e015      	b.n	80079f8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079cc:	4b3e      	ldr	r3, [pc, #248]	; (8007ac8 <HAL_RCC_OscConfig+0x2a8>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d2:	f7fd fb93 	bl	80050fc <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079da:	f7fd fb8f 	bl	80050fc <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e150      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079ec:	4b35      	ldr	r3, [pc, #212]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d030      	beq.n	8007a66 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d016      	beq.n	8007a3a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a0c:	4b2f      	ldr	r3, [pc, #188]	; (8007acc <HAL_RCC_OscConfig+0x2ac>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a12:	f7fd fb73 	bl	80050fc <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a1a:	f7fd fb6f 	bl	80050fc <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e130      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a2c:	4b25      	ldr	r3, [pc, #148]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x1fa>
 8007a38:	e015      	b.n	8007a66 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a40:	f7fd fb5c 	bl	80050fc <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a48:	f7fd fb58 	bl	80050fc <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e119      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f0      	bne.n	8007a48 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 809f 	beq.w	8007bb2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10f      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	4a0d      	ldr	r2, [pc, #52]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a92:	6413      	str	r3, [r2, #64]	; 0x40
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <HAL_RCC_OscConfig+0x2a4>)
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <HAL_RCC_OscConfig+0x2b0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d120      	bne.n	8007af2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <HAL_RCC_OscConfig+0x2b0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <HAL_RCC_OscConfig+0x2b0>)
 8007ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007abc:	f7fd fb1e 	bl	80050fc <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ac2:	e010      	b.n	8007ae6 <HAL_RCC_OscConfig+0x2c6>
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	42470000 	.word	0x42470000
 8007acc:	42470e80 	.word	0x42470e80
 8007ad0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad4:	f7fd fb12 	bl	80050fc <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e0d3      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae6:	4b6c      	ldr	r3, [pc, #432]	; (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f0      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d106      	bne.n	8007b08 <HAL_RCC_OscConfig+0x2e8>
 8007afa:	4b68      	ldr	r3, [pc, #416]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a67      	ldr	r2, [pc, #412]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70
 8007b06:	e01c      	b.n	8007b42 <HAL_RCC_OscConfig+0x322>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d10c      	bne.n	8007b2a <HAL_RCC_OscConfig+0x30a>
 8007b10:	4b62      	ldr	r3, [pc, #392]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a61      	ldr	r2, [pc, #388]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b16:	f043 0304 	orr.w	r3, r3, #4
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1c:	4b5f      	ldr	r3, [pc, #380]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	4a5e      	ldr	r2, [pc, #376]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	6713      	str	r3, [r2, #112]	; 0x70
 8007b28:	e00b      	b.n	8007b42 <HAL_RCC_OscConfig+0x322>
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	4a5b      	ldr	r2, [pc, #364]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	6713      	str	r3, [r2, #112]	; 0x70
 8007b36:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a58      	ldr	r2, [pc, #352]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b3c:	f023 0304 	bic.w	r3, r3, #4
 8007b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d015      	beq.n	8007b76 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4a:	f7fd fad7 	bl	80050fc <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b50:	e00a      	b.n	8007b68 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b52:	f7fd fad3 	bl	80050fc <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e092      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b68:	4b4c      	ldr	r3, [pc, #304]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ee      	beq.n	8007b52 <HAL_RCC_OscConfig+0x332>
 8007b74:	e014      	b.n	8007ba0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b76:	f7fd fac1 	bl	80050fc <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fd fabd 	bl	80050fc <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e07c      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b94:	4b41      	ldr	r3, [pc, #260]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1ee      	bne.n	8007b7e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d105      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba6:	4b3d      	ldr	r3, [pc, #244]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	4a3c      	ldr	r2, [pc, #240]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d068      	beq.n	8007c8c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bba:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d060      	beq.n	8007c88 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d145      	bne.n	8007c5a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bce:	4b34      	ldr	r3, [pc, #208]	; (8007ca0 <HAL_RCC_OscConfig+0x480>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fd fa92 	bl	80050fc <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bdc:	f7fd fa8e 	bl	80050fc <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e04f      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bee:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69da      	ldr	r2, [r3, #28]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	019b      	lsls	r3, r3, #6
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	085b      	lsrs	r3, r3, #1
 8007c12:	3b01      	subs	r3, #1
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	431a      	orrs	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	061b      	lsls	r3, r3, #24
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	071b      	lsls	r3, r3, #28
 8007c26:	491d      	ldr	r1, [pc, #116]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <HAL_RCC_OscConfig+0x480>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c32:	f7fd fa63 	bl	80050fc <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c3a:	f7fd fa5f 	bl	80050fc <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e020      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4c:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x41a>
 8007c58:	e018      	b.n	8007c8c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <HAL_RCC_OscConfig+0x480>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fd fa4c 	bl	80050fc <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c68:	f7fd fa48 	bl	80050fc <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e009      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <HAL_RCC_OscConfig+0x47c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f0      	bne.n	8007c68 <HAL_RCC_OscConfig+0x448>
 8007c86:	e001      	b.n	8007c8c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e000      	b.n	8007c8e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40007000 	.word	0x40007000
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	42470060 	.word	0x42470060

08007ca4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e022      	b.n	8007cfc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fc f9bf 	bl	800404c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f814 	bl	8007d04 <HAL_SD_InitCard>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e00a      	b.n	8007cfc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d04:	b5b0      	push	{r4, r5, r7, lr}
 8007d06:	b08e      	sub	sp, #56	; 0x38
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d20:	2376      	movs	r3, #118	; 0x76
 8007d22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681d      	ldr	r5, [r3, #0]
 8007d28:	466c      	mov	r4, sp
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f003 fa87 	bl	800b250 <SDIO_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e031      	b.n	8007db8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <HAL_SD_InitCard+0xbc>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f003 fabf 	bl	800b2e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d64:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_SD_InitCard+0xbc>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 ffc6 	bl	8008cfc <SD_PowerON>
 8007d70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e013      	b.n	8007db8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fee5 	bl	8008b60 <SD_InitCard>
 8007d96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	; 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc0:	422580a0 	.word	0x422580a0

08007dc4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	; 0x30
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0c7      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f040 80c0 	bne.w	8007f7a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	441a      	add	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d907      	bls.n	8007e1e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0ae      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2203      	movs	r2, #3
 8007e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e3c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	4a50      	ldr	r2, [pc, #320]	; (8007f84 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	4a4f      	ldr	r2, [pc, #316]	; (8007f88 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007e4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	2200      	movs	r2, #0
 8007e54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3380      	adds	r3, #128	; 0x80
 8007e60:	4619      	mov	r1, r3
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	025b      	lsls	r3, r3, #9
 8007e68:	089b      	lsrs	r3, r3, #2
 8007e6a:	f7fd ff39 	bl	8005ce0 <HAL_DMA_Start_IT>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007e82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a40      	ldr	r2, [pc, #256]	; (8007f8c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e06b      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007ea4:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d002      	beq.n	8007eb8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	025b      	lsls	r3, r3, #9
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f003 faa1 	bl	800b408 <SDMMC_CmdBlockLength>
 8007ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a2e      	ldr	r2, [pc, #184]	; (8007f8c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e046      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	025b      	lsls	r3, r3, #9
 8007ef8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007efa:	2390      	movs	r3, #144	; 0x90
 8007efc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007efe:	2302      	movs	r3, #2
 8007f00:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f107 0210 	add.w	r2, r7, #16
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fa4b 	bl	800b3b0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d90a      	bls.n	8007f36 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2282      	movs	r2, #130	; 0x82
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f003 faaf 	bl	800b490 <SDMMC_CmdReadMultiBlock>
 8007f32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f34:	e009      	b.n	8007f4a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2281      	movs	r2, #129	; 0x81
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f42:	4618      	mov	r0, r3
 8007f44:	f003 fa82 	bl	800b44c <SDMMC_CmdReadSingleBlock>
 8007f48:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d012      	beq.n	8007f76 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a0d      	ldr	r2, [pc, #52]	; (8007f8c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e002      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e000      	b.n	8007f7c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f7a:	2302      	movs	r3, #2
  }
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3730      	adds	r7, #48	; 0x30
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	0800896f 	.word	0x0800896f
 8007f88:	080089e1 	.word	0x080089e1
 8007f8c:	004005ff 	.word	0x004005ff
 8007f90:	4225858c 	.word	0x4225858c

08007f94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08c      	sub	sp, #48	; 0x30
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0ca      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 80c3 	bne.w	8008150 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d907      	bls.n	8007fee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e0b1      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 021a 	orr.w	r2, r2, #26
 800800c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008012:	4a52      	ldr	r2, [pc, #328]	; (800815c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	4a51      	ldr	r2, [pc, #324]	; (8008160 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800801c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	2200      	movs	r2, #0
 8008024:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	2b01      	cmp	r3, #1
 800802c:	d002      	beq.n	8008034 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	025b      	lsls	r3, r3, #9
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800803c:	4618      	mov	r0, r3
 800803e:	f003 f9e3 	bl	800b408 <SDMMC_CmdBlockLength>
 8008042:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a45      	ldr	r2, [pc, #276]	; (8008164 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e073      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d90a      	bls.n	8008086 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	22a0      	movs	r2, #160	; 0xa0
 8008074:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800807c:	4618      	mov	r0, r3
 800807e:	f003 fa4b 	bl	800b518 <SDMMC_CmdWriteMultiBlock>
 8008082:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008084:	e009      	b.n	800809a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2290      	movs	r2, #144	; 0x90
 800808a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008092:	4618      	mov	r0, r3
 8008094:	f003 fa1e 	bl	800b4d4 <SDMMC_CmdWriteSingleBlock>
 8008098:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d012      	beq.n	80080c6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2f      	ldr	r2, [pc, #188]	; (8008164 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	431a      	orrs	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e045      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80080c6:	4b28      	ldr	r3, [pc, #160]	; (8008168 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3380      	adds	r3, #128	; 0x80
 80080d8:	461a      	mov	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	025b      	lsls	r3, r3, #9
 80080de:	089b      	lsrs	r3, r3, #2
 80080e0:	f7fd fdfe 	bl	8005ce0 <HAL_DMA_Start_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01a      	beq.n	8008120 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 021a 	bic.w	r2, r2, #26
 80080f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a19      	ldr	r2, [pc, #100]	; (8008164 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e018      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	025b      	lsls	r3, r3, #9
 800812a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800812c:	2390      	movs	r3, #144	; 0x90
 800812e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008134:	2300      	movs	r3, #0
 8008136:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008138:	2301      	movs	r3, #1
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f107 0210 	add.w	r2, r7, #16
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f003 f932 	bl	800b3b0 <SDIO_ConfigData>

      return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3730      	adds	r7, #48	; 0x30
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	08008945 	.word	0x08008945
 8008160:	080089e1 	.word	0x080089e1
 8008164:	004005ff 	.word	0x004005ff
 8008168:	4225858c 	.word	0x4225858c

0800816c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_SD_IRQHandler+0x2e>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 ffc8 	bl	8009128 <SD_Read_IT>
 8008198:	e155      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 808f 	beq.w	80082c8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80081c2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80081c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d039      	beq.n	8008256 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <HAL_SD_IRQHandler+0x8a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d011      	beq.n	800821a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f003 f9ae 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008200:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f91f 	bl	8008458 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008222:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <HAL_SD_IRQHandler+0xda>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f003 fe0c 	bl	800be64 <HAL_SD_RxCpltCallback>
 800824c:	e0fb      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f003 fdfe 	bl	800be50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008254:	e0f7      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80f2 	beq.w	8008446 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d011      	beq.n	8008290 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f003 f973 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008276:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d008      	beq.n	8008290 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8e4 	bl	8008458 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 80d5 	bne.w	8008446 <HAL_SD_IRQHandler+0x2da>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f040 80cf 	bne.w	8008446 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0208 	bic.w	r2, r2, #8
 80082b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 fdc5 	bl	800be50 <HAL_SD_TxCpltCallback>
}
 80082c6:	e0be      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <HAL_SD_IRQHandler+0x17c>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 ff72 	bl	80091ca <SD_Write_IT>
 80082e6:	e0ae      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 80a7 	beq.w	8008446 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	f043 0202 	orr.w	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	f043 0208 	orr.w	r2, r3, #8
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	f043 0210 	orr.w	r2, r3, #16
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f240 523a 	movw	r2, #1338	; 0x53a
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008378:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f003 f8ec 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008384:	4602      	mov	r2, r0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f855 	bl	8008458 <HAL_SD_ErrorCallback>
}
 80083ae:	e04a      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d045      	beq.n	8008446 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <HAL_SD_IRQHandler+0x262>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d011      	beq.n	80083f2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d2:	4a1f      	ldr	r2, [pc, #124]	; (8008450 <HAL_SD_IRQHandler+0x2e4>)
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd fcd8 	bl	8005d90 <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d02f      	beq.n	8008446 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb4a 	bl	8008a84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80083f0:	e029      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_SD_IRQHandler+0x29a>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d011      	beq.n	800842a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <HAL_SD_IRQHandler+0x2e8>)
 800840c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	4618      	mov	r0, r3
 8008414:	f7fd fcbc 	bl	8005d90 <HAL_DMA_Abort_IT>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d013      	beq.n	8008446 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fb65 	bl	8008af2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008428:	e00d      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f003 fcfc 	bl	800be3c <HAL_SD_AbortCallback>
}
 8008444:	e7ff      	b.n	8008446 <HAL_SD_IRQHandler+0x2da>
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	08008a85 	.word	0x08008a85
 8008454:	08008af3 	.word	0x08008af3

08008458 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847a:	0f9b      	lsrs	r3, r3, #30
 800847c:	b2da      	uxtb	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008486:	0e9b      	lsrs	r3, r3, #26
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084cc:	0d1b      	lsrs	r3, r3, #20
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ea:	0bdb      	lsrs	r3, r3, #15
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fc:	0b9b      	lsrs	r3, r3, #14
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850e:	0b5b      	lsrs	r3, r3, #13
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008520:	0b1b      	lsrs	r3, r3, #12
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008538:	2b00      	cmp	r3, #0
 800853a:	d163      	bne.n	8008604 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008540:	009a      	lsls	r2, r3, #2
 8008542:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008546:	4013      	ands	r3, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800854c:	0f92      	lsrs	r2, r2, #30
 800854e:	431a      	orrs	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008558:	0edb      	lsrs	r3, r3, #27
 800855a:	b2db      	uxtb	r3, r3
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	b2da      	uxtb	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856a:	0e1b      	lsrs	r3, r3, #24
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800857c:	0d5b      	lsrs	r3, r3, #21
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	b2da      	uxtb	r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858e:	0c9b      	lsrs	r3, r3, #18
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	b2da      	uxtb	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a0:	0bdb      	lsrs	r3, r3, #15
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	7e1b      	ldrb	r3, [r3, #24]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	3302      	adds	r3, #2
 80085c4:	2201      	movs	r2, #1
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80085ce:	fb02 f203 	mul.w	r2, r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	7a1b      	ldrb	r3, [r3, #8]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	2201      	movs	r2, #1
 80085e2:	409a      	lsls	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80085f0:	0a52      	lsrs	r2, r2, #9
 80085f2:	fb02 f203 	mul.w	r2, r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008600:	661a      	str	r2, [r3, #96]	; 0x60
 8008602:	e031      	b.n	8008668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008608:	2b01      	cmp	r3, #1
 800860a:	d11d      	bne.n	8008648 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	431a      	orrs	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	3301      	adds	r3, #1
 8008628:	029a      	lsls	r2, r3, #10
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800863c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	661a      	str	r2, [r3, #96]	; 0x60
 8008646:	e00f      	b.n	8008668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_SD_GetCardCSD+0x344>)
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e09d      	b.n	80087a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800866c:	0b9b      	lsrs	r3, r3, #14
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867e:	09db      	lsrs	r3, r3, #7
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008686:	b2da      	uxtb	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008696:	b2da      	uxtb	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a0:	0fdb      	lsrs	r3, r3, #31
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	0f5b      	lsrs	r3, r3, #29
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086be:	0e9b      	lsrs	r3, r3, #26
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d0:	0d9b      	lsrs	r3, r3, #22
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	0d5b      	lsrs	r3, r3, #21
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	0bdb      	lsrs	r3, r3, #15
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008726:	0b9b      	lsrs	r3, r3, #14
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	0b5b      	lsrs	r3, r3, #13
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874e:	0b1b      	lsrs	r3, r3, #12
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	0a9b      	lsrs	r3, r3, #10
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	b2da      	uxtb	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008792:	b2da      	uxtb	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	004005ff 	.word	0x004005ff

080087b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800880c:	b5b0      	push	{r4, r5, r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af04      	add	r7, sp, #16
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2203      	movs	r2, #3
 800881a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	2b03      	cmp	r3, #3
 8008824:	d02e      	beq.n	8008884 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882c:	d106      	bne.n	800883c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	639a      	str	r2, [r3, #56]	; 0x38
 800883a:	e029      	b.n	8008890 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008842:	d10a      	bne.n	800885a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fb0f 	bl	8008e68 <SD_WideBus_Enable>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	639a      	str	r2, [r3, #56]	; 0x38
 8008858:	e01a      	b.n	8008890 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb4c 	bl	8008efe <SD_WideBus_Disable>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
 8008874:	e00c      	b.n	8008890 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	639a      	str	r2, [r3, #56]	; 0x38
 8008882:	e005      	b.n	8008890 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a18      	ldr	r2, [pc, #96]	; (8008900 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e024      	b.n	80088f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681d      	ldr	r5, [r3, #0]
 80088d2:	466c      	mov	r4, sp
 80088d4:	f107 0318 	add.w	r3, r7, #24
 80088d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088e6:	4628      	mov	r0, r5
 80088e8:	f002 fcb2 	bl	800b250 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3728      	adds	r7, #40	; 0x28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bdb0      	pop	{r4, r5, r7, pc}
 80088fe:	bf00      	nop
 8008900:	004005ff 	.word	0x004005ff

08008904 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008910:	f107 030c 	add.w	r3, r7, #12
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa7e 	bl	8008e18 <SD_SendStatus>
 800891c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0a5b      	lsrs	r3, r3, #9
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800893a:	693b      	ldr	r3, [r7, #16]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008960:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b82      	cmp	r3, #130	; 0x82
 8008982:	d111      	bne.n	80089a8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f002 fde7 	bl	800b55c <SDMMC_CmdStopTransfer>
 800898e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d008      	beq.n	80089a8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	431a      	orrs	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff fd58 	bl	8008458 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0208 	bic.w	r2, r2, #8
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f003 fa47 	bl	800be64 <HAL_SD_RxCpltCallback>
#endif
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7fd fb7a 	bl	80060e8 <HAL_DMA_GetError>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d03e      	beq.n	8008a78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d002      	beq.n	8008a16 <SD_DMAError+0x36>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d12d      	bne.n	8008a72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <SD_DMAError+0xa0>)
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008a3a:	6978      	ldr	r0, [r7, #20]
 8008a3c:	f7ff ff62 	bl	8008904 <HAL_SD_GetCardState>
 8008a40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b06      	cmp	r3, #6
 8008a46:	d002      	beq.n	8008a4e <SD_DMAError+0x6e>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d10a      	bne.n	8008a64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f002 fd82 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f7ff fcf0 	bl	8008458 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a78:	bf00      	nop
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	004005ff 	.word	0x004005ff

08008a84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff ff31 	bl	8008904 <HAL_SD_GetCardState>
 8008aa2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d002      	beq.n	8008abe <SD_DMATxAbort+0x3a>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d10a      	bne.n	8008ad4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f002 fd4a 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f003 f9ad 	bl	800be3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008ae2:	e002      	b.n	8008aea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fcb7 	bl	8008458 <HAL_SD_ErrorCallback>
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fefa 	bl	8008904 <HAL_SD_GetCardState>
 8008b10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d002      	beq.n	8008b2c <SD_DMARxAbort+0x3a>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d10a      	bne.n	8008b42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 fd13 	bl	800b55c <SDMMC_CmdStopTransfer>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f003 f976 	bl	800be3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008b50:	e002      	b.n	8008b58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fc80 	bl	8008458 <HAL_SD_ErrorCallback>
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b60:	b5b0      	push	{r4, r5, r7, lr}
 8008b62:	b094      	sub	sp, #80	; 0x50
 8008b64:	af04      	add	r7, sp, #16
 8008b66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fbc5 	bl	800b300 <SDIO_GetPowerState>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b80:	e0b7      	b.n	8008cf2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d02f      	beq.n	8008bea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f002 fdee 	bl	800b770 <SDMMC_CmdSendCID>
 8008b94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	e0a8      	b.n	8008cf2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f002 fbef 	bl	800b38a <SDIO_GetResponse>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f002 fbe6 	bl	800b38a <SDIO_GetResponse>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2108      	movs	r1, #8
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 fbdd 	bl	800b38a <SDIO_GetResponse>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	210c      	movs	r1, #12
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 fbd4 	bl	800b38a <SDIO_GetResponse>
 8008be2:	4602      	mov	r2, r0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d00d      	beq.n	8008c0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f107 020e 	add.w	r2, r7, #14
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f002 fdf4 	bl	800b7ea <SDMMC_CmdSetRelAdd>
 8008c02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <SD_InitCard+0xae>
    {
      return errorstate;
 8008c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0c:	e071      	b.n	8008cf2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d036      	beq.n	8008c84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008c16:	89fb      	ldrh	r3, [r7, #14]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f002 fdbe 	bl	800b7ac <SDMMC_CmdSendCSD>
 8008c30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3a:	e05a      	b.n	8008cf2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2100      	movs	r1, #0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 fba1 	bl	800b38a <SDIO_GetResponse>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2104      	movs	r1, #4
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fb98 	bl	800b38a <SDIO_GetResponse>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2108      	movs	r1, #8
 8008c66:	4618      	mov	r0, r3
 8008c68:	f002 fb8f 	bl	800b38a <SDIO_GetResponse>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	210c      	movs	r1, #12
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f002 fb86 	bl	800b38a <SDIO_GetResponse>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2104      	movs	r1, #4
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fb7d 	bl	800b38a <SDIO_GetResponse>
 8008c90:	4603      	mov	r3, r0
 8008c92:	0d1a      	lsrs	r2, r3, #20
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c98:	f107 0310 	add.w	r3, r7, #16
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fbe4 	bl	800846c <HAL_SD_GetCardCSD>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cae:	e020      	b.n	8008cf2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	f04f 0400 	mov.w	r4, #0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	f002 fc6c 	bl	800b5a0 <SDMMC_CmdSelDesel>
 8008cc8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <SD_InitCard+0x174>
  {
    return errorstate;
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	e00e      	b.n	8008cf2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681d      	ldr	r5, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	466c      	mov	r4, sp
 8008cdc:	f103 0210 	add.w	r2, r3, #16
 8008ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cea:	4628      	mov	r0, r5
 8008cec:	f002 fab0 	bl	800b250 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3740      	adds	r7, #64	; 0x40
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008cfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fc66 	bl	800b5e6 <SDMMC_CmdGoIdleState>
 8008d1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e072      	b.n	8008e0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fc79 	bl	800b622 <SDMMC_CmdOperCond>
 8008d30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00d      	beq.n	8008d54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fc4f 	bl	800b5e6 <SDMMC_CmdGoIdleState>
 8008d48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	e05b      	b.n	8008e0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d137      	bne.n	8008dd2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2100      	movs	r1, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 fc79 	bl	800b660 <SDMMC_CmdAppCommand>
 8008d6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d02d      	beq.n	8008dd2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d7a:	e047      	b.n	8008e0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f002 fc6c 	bl	800b660 <SDMMC_CmdAppCommand>
 8008d88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <SD_PowerON+0x98>
    {
      return errorstate;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	e03b      	b.n	8008e0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	491e      	ldr	r1, [pc, #120]	; (8008e14 <SD_PowerON+0x118>)
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f002 fc82 	bl	800b6a4 <SDMMC_CmdAppOperCommand>
 8008da0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dac:	e02e      	b.n	8008e0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f002 fae8 	bl	800b38a <SDIO_GetResponse>
 8008dba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	0fdb      	lsrs	r3, r3, #31
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <SD_PowerON+0xcc>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <SD_PowerON+0xce>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	613b      	str	r3, [r7, #16]

    count++;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d802      	bhi.n	8008de2 <SD_PowerON+0xe6>
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0cc      	beq.n	8008d7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d902      	bls.n	8008df2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008df0:	e00c      	b.n	8008e0c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	645a      	str	r2, [r3, #68]	; 0x44
 8008e02:	e002      	b.n	8008e0a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	c1100000 	.word	0xc1100000

08008e18 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e2c:	e018      	b.n	8008e60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e36:	041b      	lsls	r3, r3, #16
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f002 fcf6 	bl	800b82c <SDMMC_CmdSendStatus>
 8008e40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	e009      	b.n	8008e60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 fa99 	bl	800b38a <SDIO_GetResponse>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	2300      	movs	r3, #0
 8008e76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 fa83 	bl	800b38a <SDIO_GetResponse>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e8e:	d102      	bne.n	8008e96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e94:	e02f      	b.n	8008ef6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f879 	bl	8008f94 <SD_FindSCR>
 8008ea2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	e023      	b.n	8008ef6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01c      	beq.n	8008ef2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f002 fbcb 	bl	800b660 <SDMMC_CmdAppCommand>
 8008eca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	e00f      	b.n	8008ef6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 fc04 	bl	800b6ea <SDMMC_CmdBusWidth>
 8008ee2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	e003      	b.n	8008ef6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e001      	b.n	8008ef6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ef2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b086      	sub	sp, #24
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 fa38 	bl	800b38a <SDIO_GetResponse>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f24:	d102      	bne.n	8008f2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f2a:	e02f      	b.n	8008f8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f2c:	f107 030c 	add.w	r3, r7, #12
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f82e 	bl	8008f94 <SD_FindSCR>
 8008f38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	e023      	b.n	8008f8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01c      	beq.n	8008f88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	041b      	lsls	r3, r3, #16
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f002 fb80 	bl	800b660 <SDMMC_CmdAppCommand>
 8008f60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	e00f      	b.n	8008f8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2100      	movs	r1, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f002 fbb9 	bl	800b6ea <SDMMC_CmdBusWidth>
 8008f78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	e003      	b.n	8008f8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e001      	b.n	8008f8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b08f      	sub	sp, #60	; 0x3c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f9e:	f7fc f8ad 	bl	80050fc <HAL_GetTick>
 8008fa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2108      	movs	r1, #8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f002 fa24 	bl	800b408 <SDMMC_CmdBlockLength>
 8008fc0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <SD_FindSCR+0x38>
  {
    return errorstate;
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	e0a9      	b.n	8009120 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4610      	mov	r0, r2
 8008fda:	f002 fb41 	bl	800b660 <SDMMC_CmdAppCommand>
 8008fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <SD_FindSCR+0x56>
  {
    return errorstate;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	e09a      	b.n	8009120 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295
 8008fee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008ff4:	2330      	movs	r3, #48	; 0x30
 8008ff6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009000:	2301      	movs	r3, #1
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f107 0210 	add.w	r2, r7, #16
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f002 f9ce 	bl	800b3b0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f002 fb88 	bl	800b72e <SDMMC_CmdSendSCR>
 800901e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d022      	beq.n	800906c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	e07a      	b.n	8009120 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00e      	beq.n	8009056 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6819      	ldr	r1, [r3, #0]
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	f107 0208 	add.w	r2, r7, #8
 8009044:	18d4      	adds	r4, r2, r3
 8009046:	4608      	mov	r0, r1
 8009048:	f002 f92d 	bl	800b2a6 <SDIO_ReadFIFO>
 800904c:	4603      	mov	r3, r0
 800904e:	6023      	str	r3, [r4, #0]
      index++;
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	3301      	adds	r3, #1
 8009054:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009056:	f7fc f851 	bl	80050fc <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d102      	bne.n	800906c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009066:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800906a:	e059      	b.n	8009120 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009072:	f240 432a 	movw	r3, #1066	; 0x42a
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0d6      	beq.n	800902a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2208      	movs	r2, #8
 8009090:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009092:	2308      	movs	r3, #8
 8009094:	e044      	b.n	8009120 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2202      	movs	r2, #2
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80090ac:	2302      	movs	r3, #2
 80090ae:	e037      	b.n	8009120 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2220      	movs	r2, #32
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80090c6:	2320      	movs	r3, #32
 80090c8:	e02a      	b.n	8009120 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	061a      	lsls	r2, r3, #24
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	0a1b      	lsrs	r3, r3, #8
 80090e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	0e1b      	lsrs	r3, r3, #24
 80090f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	601a      	str	r2, [r3, #0]
    scr++;
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	3304      	adds	r3, #4
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	061a      	lsls	r2, r3, #24
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009108:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009112:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	0e1b      	lsrs	r3, r3, #24
 8009118:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	373c      	adds	r7, #60	; 0x3c
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}

08009128 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03f      	beq.n	80091c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e033      	b.n	80091b0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	f002 f8aa 	bl	800b2a6 <SDIO_ReadFIFO>
 8009152:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	3b01      	subs	r3, #1
 8009166:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	b2da      	uxtb	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3b01      	subs	r3, #1
 800917c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b2da      	uxtb	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	3b01      	subs	r3, #1
 8009192:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	0e1b      	lsrs	r3, r3, #24
 8009198:	b2da      	uxtb	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	3301      	adds	r3, #1
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	d9c8      	bls.n	8009148 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80091c2:	bf00      	nop
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d043      	beq.n	800926c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	e037      	b.n	800925a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	021a      	lsls	r2, r3, #8
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	4313      	orrs	r3, r2
 8009206:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	3b01      	subs	r3, #1
 8009212:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	041a      	lsls	r2, r3, #16
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4313      	orrs	r3, r2
 800921e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3301      	adds	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3b01      	subs	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	061a      	lsls	r2, r3, #24
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4313      	orrs	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3301      	adds	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3b01      	subs	r3, #1
 8009242:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f107 0208 	add.w	r2, r7, #8
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f002 f836 	bl	800b2c0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	3301      	adds	r3, #1
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b07      	cmp	r3, #7
 800925e:	d9c4      	bls.n	80091ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800926c:	bf00      	nop
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e056      	b.n	8009334 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fa ffc5 	bl	8004230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	ea42 0103 	orr.w	r1, r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	f003 0104 	and.w	r1, r3, #4
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69da      	ldr	r2, [r3, #28]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009322:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_SPI_Transmit+0x22>
 800935a:	2302      	movs	r3, #2
 800935c:	e11e      	b.n	800959c <HAL_SPI_Transmit+0x260>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009366:	f7fb fec9 	bl	80050fc <HAL_GetTick>
 800936a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	d002      	beq.n	8009382 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800937c:	2302      	movs	r3, #2
 800937e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009380:	e103      	b.n	800958a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <HAL_SPI_Transmit+0x52>
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009392:	e0fa      	b.n	800958a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2203      	movs	r2, #3
 8009398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093da:	d107      	bne.n	80093ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d007      	beq.n	800940a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009412:	d14b      	bne.n	80094ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Transmit+0xe6>
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d13e      	bne.n	80094a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	1c9a      	adds	r2, r3, #2
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009446:	e02b      	b.n	80094a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b02      	cmp	r3, #2
 8009454:	d112      	bne.n	800947c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	881a      	ldrh	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	1c9a      	adds	r2, r3, #2
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	86da      	strh	r2, [r3, #54]	; 0x36
 800947a:	e011      	b.n	80094a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800947c:	f7fb fe3e 	bl	80050fc <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d803      	bhi.n	8009494 <HAL_SPI_Transmit+0x158>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d102      	bne.n	800949a <HAL_SPI_Transmit+0x15e>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800949e:	e074      	b.n	800958a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1ce      	bne.n	8009448 <HAL_SPI_Transmit+0x10c>
 80094aa:	e04c      	b.n	8009546 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_SPI_Transmit+0x17e>
 80094b4:	8afb      	ldrh	r3, [r7, #22]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d140      	bne.n	800953c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	7812      	ldrb	r2, [r2, #0]
 80094c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80094e0:	e02c      	b.n	800953c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d113      	bne.n	8009518 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	330c      	adds	r3, #12
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	86da      	strh	r2, [r3, #54]	; 0x36
 8009516:	e011      	b.n	800953c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009518:	f7fb fdf0 	bl	80050fc <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d803      	bhi.n	8009530 <HAL_SPI_Transmit+0x1f4>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d102      	bne.n	8009536 <HAL_SPI_Transmit+0x1fa>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800953a:	e026      	b.n	800958a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1cd      	bne.n	80094e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fba4 	bl	8009c98 <SPI_EndRxTxTransaction>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	77fb      	strb	r3, [r7, #31]
 8009586:	e000      	b.n	800958a <HAL_SPI_Transmit+0x24e>
  }

error:
 8009588:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800959a:	7ffb      	ldrb	r3, [r7, #31]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c0:	d112      	bne.n	80095e8 <HAL_SPI_Receive+0x44>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10e      	bne.n	80095e8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2204      	movs	r2, #4
 80095ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095d2:	88fa      	ldrh	r2, [r7, #6]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f8e9 	bl	80097b6 <HAL_SPI_TransmitReceive>
 80095e4:	4603      	mov	r3, r0
 80095e6:	e0e2      	b.n	80097ae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <HAL_SPI_Receive+0x52>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e0db      	b.n	80097ae <HAL_SPI_Receive+0x20a>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095fe:	f7fb fd7d 	bl	80050fc <HAL_GetTick>
 8009602:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b01      	cmp	r3, #1
 800960e:	d002      	beq.n	8009616 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009610:	2302      	movs	r3, #2
 8009612:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009614:	e0c2      	b.n	800979c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_SPI_Receive+0x7e>
 800961c:	88fb      	ldrh	r3, [r7, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009626:	e0b9      	b.n	800979c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2204      	movs	r2, #4
 800962c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966e:	d107      	bne.n	8009680 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800967e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d007      	beq.n	800969e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800969c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d162      	bne.n	800976c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80096a6:	e02e      	b.n	8009706 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d115      	bne.n	80096e2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f103 020c 	add.w	r2, r3, #12
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	b2d2      	uxtb	r2, r2
 80096c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096e0:	e011      	b.n	8009706 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096e2:	f7fb fd0b 	bl	80050fc <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d803      	bhi.n	80096fa <HAL_SPI_Receive+0x156>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d102      	bne.n	8009700 <HAL_SPI_Receive+0x15c>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009704:	e04a      	b.n	800979c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800970a:	b29b      	uxth	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1cb      	bne.n	80096a8 <HAL_SPI_Receive+0x104>
 8009710:	e031      	b.n	8009776 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b01      	cmp	r3, #1
 800971e:	d113      	bne.n	8009748 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	b292      	uxth	r2, r2
 800972c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009746:	e011      	b.n	800976c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009748:	f7fb fcd8 	bl	80050fc <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d803      	bhi.n	8009760 <HAL_SPI_Receive+0x1bc>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975e:	d102      	bne.n	8009766 <HAL_SPI_Receive+0x1c2>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	75fb      	strb	r3, [r7, #23]
          goto error;
 800976a:	e017      	b.n	800979c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1cd      	bne.n	8009712 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fa27 	bl	8009bce <SPI_EndRxTransaction>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	e000      	b.n	800979c <HAL_SPI_Receive+0x1f8>
  }

error :
 800979a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b08c      	sub	sp, #48	; 0x30
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	60f8      	str	r0, [r7, #12]
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097c4:	2301      	movs	r3, #1
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d101      	bne.n	80097dc <HAL_SPI_TransmitReceive+0x26>
 80097d8:	2302      	movs	r3, #2
 80097da:	e18a      	b.n	8009af2 <HAL_SPI_TransmitReceive+0x33c>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097e4:	f7fb fc8a 	bl	80050fc <HAL_GetTick>
 80097e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80097fa:	887b      	ldrh	r3, [r7, #2]
 80097fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009802:	2b01      	cmp	r3, #1
 8009804:	d00f      	beq.n	8009826 <HAL_SPI_TransmitReceive+0x70>
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800980c:	d107      	bne.n	800981e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <HAL_SPI_TransmitReceive+0x68>
 8009816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800981a:	2b04      	cmp	r3, #4
 800981c:	d003      	beq.n	8009826 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800981e:	2302      	movs	r3, #2
 8009820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009824:	e15b      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <HAL_SPI_TransmitReceive+0x82>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <HAL_SPI_TransmitReceive+0x82>
 8009832:	887b      	ldrh	r3, [r7, #2]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800983e:	e14e      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b04      	cmp	r3, #4
 800984a:	d003      	beq.n	8009854 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2205      	movs	r2, #5
 8009850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	887a      	ldrh	r2, [r7, #2]
 8009864:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	887a      	ldrh	r2, [r7, #2]
 800986a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	887a      	ldrh	r2, [r7, #2]
 8009876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	887a      	ldrh	r2, [r7, #2]
 800987c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009894:	2b40      	cmp	r3, #64	; 0x40
 8009896:	d007      	beq.n	80098a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098b0:	d178      	bne.n	80099a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_SPI_TransmitReceive+0x10a>
 80098ba:	8b7b      	ldrh	r3, [r7, #26]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d166      	bne.n	800998e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	1c9a      	adds	r2, r3, #2
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b01      	subs	r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098e4:	e053      	b.n	800998e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d11b      	bne.n	800992c <HAL_SPI_TransmitReceive+0x176>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d016      	beq.n	800992c <HAL_SPI_TransmitReceive+0x176>
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	2b01      	cmp	r3, #1
 8009902:	d113      	bne.n	800992c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	881a      	ldrh	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009914:	1c9a      	adds	r2, r3, #2
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b01      	cmp	r3, #1
 8009938:	d119      	bne.n	800996e <HAL_SPI_TransmitReceive+0x1b8>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d014      	beq.n	800996e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	b292      	uxth	r2, r2
 8009950:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	1c9a      	adds	r2, r3, #2
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800996a:	2301      	movs	r3, #1
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800996e:	f7fb fbc5 	bl	80050fc <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800997a:	429a      	cmp	r2, r3
 800997c:	d807      	bhi.n	800998e <HAL_SPI_TransmitReceive+0x1d8>
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d003      	beq.n	800998e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800998c:	e0a7      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009992:	b29b      	uxth	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1a6      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x130>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1a1      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x130>
 80099a2:	e07c      	b.n	8009a9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <HAL_SPI_TransmitReceive+0x1fc>
 80099ac:	8b7b      	ldrh	r3, [r7, #26]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d16b      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099d8:	e057      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d11c      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x26c>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d017      	beq.n	8009a22 <HAL_SPI_TransmitReceive+0x26c>
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d114      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	330c      	adds	r3, #12
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d119      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x2ae>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d014      	beq.n	8009a64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68da      	ldr	r2, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a60:	2301      	movs	r3, #1
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a64:	f7fb fb4a 	bl	80050fc <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d803      	bhi.n	8009a7c <HAL_SPI_TransmitReceive+0x2c6>
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7a:	d102      	bne.n	8009a82 <HAL_SPI_TransmitReceive+0x2cc>
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a88:	e029      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1a2      	bne.n	80099da <HAL_SPI_TransmitReceive+0x224>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d19d      	bne.n	80099da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f8f8 	bl	8009c98 <SPI_EndRxTxTransaction>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d006      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009aba:	e010      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	e000      	b.n	8009ade <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009adc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3730      	adds	r7, #48	; 0x30
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b0a:	e04c      	b.n	8009ba6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b12:	d048      	beq.n	8009ba6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009b14:	f7fb faf2 	bl	80050fc <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d902      	bls.n	8009b2a <SPI_WaitFlagStateUntilTimeout+0x30>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d13d      	bne.n	8009ba6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b42:	d111      	bne.n	8009b68 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4c:	d004      	beq.n	8009b58 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b56:	d107      	bne.n	8009b68 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b70:	d10f      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e00f      	b.n	8009bc6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	bf0c      	ite	eq
 8009bb6:	2301      	moveq	r3, #1
 8009bb8:	2300      	movne	r3, #0
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d1a3      	bne.n	8009b0c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af02      	add	r7, sp, #8
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009be2:	d111      	bne.n	8009c08 <SPI_EndRxTransaction+0x3a>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bec:	d004      	beq.n	8009bf8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d107      	bne.n	8009c08 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c06:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c10:	d12a      	bne.n	8009c68 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c1a:	d012      	beq.n	8009c42 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2200      	movs	r2, #0
 8009c24:	2180      	movs	r1, #128	; 0x80
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff ff67 	bl	8009afa <SPI_WaitFlagStateUntilTimeout>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d02d      	beq.n	8009c8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f043 0220 	orr.w	r2, r3, #32
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e026      	b.n	8009c90 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7ff ff54 	bl	8009afa <SPI_WaitFlagStateUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01a      	beq.n	8009c8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5c:	f043 0220 	orr.w	r2, r3, #32
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e013      	b.n	8009c90 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2101      	movs	r1, #1
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7ff ff41 	bl	8009afa <SPI_WaitFlagStateUntilTimeout>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c82:	f043 0220 	orr.w	r2, r3, #32
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e000      	b.n	8009c90 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <SPI_EndRxTxTransaction+0x7c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	; (8009d18 <SPI_EndRxTxTransaction+0x80>)
 8009caa:	fba2 2303 	umull	r2, r3, r2, r3
 8009cae:	0d5b      	lsrs	r3, r3, #21
 8009cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cb4:	fb02 f303 	mul.w	r3, r2, r3
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cc2:	d112      	bne.n	8009cea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2180      	movs	r1, #128	; 0x80
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff ff13 	bl	8009afa <SPI_WaitFlagStateUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d016      	beq.n	8009d08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f043 0220 	orr.w	r2, r3, #32
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e00f      	b.n	8009d0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d00:	2b80      	cmp	r3, #128	; 0x80
 8009d02:	d0f2      	beq.n	8009cea <SPI_EndRxTxTransaction+0x52>
 8009d04:	e000      	b.n	8009d08 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d06:	bf00      	nop
  }

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000000 	.word	0x20000000
 8009d18:	165e9f81 	.word	0x165e9f81

08009d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e01d      	b.n	8009d6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fa fb30 	bl	80043a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3304      	adds	r3, #4
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f000 fb56 	bl	800a40c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f042 0201 	orr.w	r2, r2, #1
 8009d88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b06      	cmp	r3, #6
 8009d9a:	d007      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0201 	orr.w	r2, r2, #1
 8009daa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e01d      	b.n	8009e08 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7fa fa6d 	bl	80042c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f000 fb07 	bl	800a40c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd42 	bl	800a8ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a15      	ldr	r2, [pc, #84]	; (8009e84 <HAL_TIM_PWM_Start+0x74>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d004      	beq.n	8009e3c <HAL_TIM_PWM_Start+0x2c>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a14      	ldr	r2, [pc, #80]	; (8009e88 <HAL_TIM_PWM_Start+0x78>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d101      	bne.n	8009e40 <HAL_TIM_PWM_Start+0x30>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <HAL_TIM_PWM_Start+0x32>
 8009e40:	2300      	movs	r3, #0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	d007      	beq.n	8009e78 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40010000 	.word	0x40010000
 8009e88:	40010400 	.word	0x40010400

08009e8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e083      	b.n	8009fa8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fa fb07 	bl	80044c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ed0:	f023 0307 	bic.w	r3, r3, #7
 8009ed4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f000 fa93 	bl	800a40c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f2c:	f023 030c 	bic.w	r3, r3, #12
 8009f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	011a      	lsls	r2, r3, #4
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	031b      	lsls	r3, r3, #12
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <HAL_TIM_Encoder_Start+0x16>
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d008      	beq.n	8009fd6 <HAL_TIM_Encoder_Start+0x26>
 8009fc4:	e00f      	b.n	8009fe6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fc6c 	bl	800a8ac <TIM_CCxChannelCmd>
      break;
 8009fd4:	e016      	b.n	800a004 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	2104      	movs	r1, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fc64 	bl	800a8ac <TIM_CCxChannelCmd>
      break;
 8009fe4:	e00e      	b.n	800a004 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2201      	movs	r2, #1
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fc5c 	bl	800a8ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 fc55 	bl	800a8ac <TIM_CCxChannelCmd>
      break;
 800a002:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f042 0201 	orr.w	r2, r2, #1
 800a012:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b02      	cmp	r3, #2
 800a032:	d122      	bne.n	800a07a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d11b      	bne.n	800a07a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f06f 0202 	mvn.w	r2, #2
 800a04a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f003 0303 	and.w	r3, r3, #3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f9b5 	bl	800a3d0 <HAL_TIM_IC_CaptureCallback>
 800a066:	e005      	b.n	800a074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f9a7 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f9b8 	bl	800a3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b04      	cmp	r3, #4
 800a086:	d122      	bne.n	800a0ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d11b      	bne.n	800a0ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f06f 0204 	mvn.w	r2, #4
 800a09e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f98b 	bl	800a3d0 <HAL_TIM_IC_CaptureCallback>
 800a0ba:	e005      	b.n	800a0c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f97d 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f98e 	bl	800a3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d122      	bne.n	800a122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d11b      	bne.n	800a122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f06f 0208 	mvn.w	r2, #8
 800a0f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f961 	bl	800a3d0 <HAL_TIM_IC_CaptureCallback>
 800a10e:	e005      	b.n	800a11c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f953 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f964 	bl	800a3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	2b10      	cmp	r3, #16
 800a12e:	d122      	bne.n	800a176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f003 0310 	and.w	r3, r3, #16
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	d11b      	bne.n	800a176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f06f 0210 	mvn.w	r2, #16
 800a146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2208      	movs	r2, #8
 800a14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f937 	bl	800a3d0 <HAL_TIM_IC_CaptureCallback>
 800a162:	e005      	b.n	800a170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f929 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f93a 	bl	800a3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b01      	cmp	r3, #1
 800a182:	d10e      	bne.n	800a1a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d107      	bne.n	800a1a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f06f 0201 	mvn.w	r2, #1
 800a19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7f8 fe71 	bl	8002e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ac:	2b80      	cmp	r3, #128	; 0x80
 800a1ae:	d10e      	bne.n	800a1ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ba:	2b80      	cmp	r3, #128	; 0x80
 800a1bc:	d107      	bne.n	800a1ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fc6d 	bl	800aaa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	d10e      	bne.n	800a1fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e6:	2b40      	cmp	r3, #64	; 0x40
 800a1e8:	d107      	bne.n	800a1fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f8ff 	bl	800a3f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b20      	cmp	r3, #32
 800a206:	d10e      	bne.n	800a226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b20      	cmp	r3, #32
 800a214:	d107      	bne.n	800a226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f06f 0220 	mvn.w	r2, #32
 800a21e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fc37 	bl	800aa94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a246:	2302      	movs	r3, #2
 800a248:	e0b4      	b.n	800a3b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	f200 809f 	bhi.w	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a29d 	.word	0x0800a29d
 800a26c:	0800a3a1 	.word	0x0800a3a1
 800a270:	0800a3a1 	.word	0x0800a3a1
 800a274:	0800a3a1 	.word	0x0800a3a1
 800a278:	0800a2dd 	.word	0x0800a2dd
 800a27c:	0800a3a1 	.word	0x0800a3a1
 800a280:	0800a3a1 	.word	0x0800a3a1
 800a284:	0800a3a1 	.word	0x0800a3a1
 800a288:	0800a31f 	.word	0x0800a31f
 800a28c:	0800a3a1 	.word	0x0800a3a1
 800a290:	0800a3a1 	.word	0x0800a3a1
 800a294:	0800a3a1 	.word	0x0800a3a1
 800a298:	0800a35f 	.word	0x0800a35f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f952 	bl	800a54c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0208 	orr.w	r2, r2, #8
 800a2b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0204 	bic.w	r2, r2, #4
 800a2c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6999      	ldr	r1, [r3, #24]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	619a      	str	r2, [r3, #24]
      break;
 800a2da:	e062      	b.n	800a3a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 f9a2 	bl	800a62c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699a      	ldr	r2, [r3, #24]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6999      	ldr	r1, [r3, #24]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	619a      	str	r2, [r3, #24]
      break;
 800a31c:	e041      	b.n	800a3a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f9f7 	bl	800a718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0208 	orr.w	r2, r2, #8
 800a338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69da      	ldr	r2, [r3, #28]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0204 	bic.w	r2, r2, #4
 800a348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69d9      	ldr	r1, [r3, #28]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691a      	ldr	r2, [r3, #16]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	61da      	str	r2, [r3, #28]
      break;
 800a35c:	e021      	b.n	800a3a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fa4b 	bl	800a800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69da      	ldr	r2, [r3, #28]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69d9      	ldr	r1, [r3, #28]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	021a      	lsls	r2, r3, #8
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	61da      	str	r2, [r3, #28]
      break;
 800a39e:	e000      	b.n	800a3a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a3a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a40      	ldr	r2, [pc, #256]	; (800a520 <TIM_Base_SetConfig+0x114>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d013      	beq.n	800a44c <TIM_Base_SetConfig+0x40>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42a:	d00f      	beq.n	800a44c <TIM_Base_SetConfig+0x40>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a3d      	ldr	r2, [pc, #244]	; (800a524 <TIM_Base_SetConfig+0x118>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00b      	beq.n	800a44c <TIM_Base_SetConfig+0x40>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a3c      	ldr	r2, [pc, #240]	; (800a528 <TIM_Base_SetConfig+0x11c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d007      	beq.n	800a44c <TIM_Base_SetConfig+0x40>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a3b      	ldr	r2, [pc, #236]	; (800a52c <TIM_Base_SetConfig+0x120>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d003      	beq.n	800a44c <TIM_Base_SetConfig+0x40>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a3a      	ldr	r2, [pc, #232]	; (800a530 <TIM_Base_SetConfig+0x124>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d108      	bne.n	800a45e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a2f      	ldr	r2, [pc, #188]	; (800a520 <TIM_Base_SetConfig+0x114>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d02b      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46c:	d027      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a2c      	ldr	r2, [pc, #176]	; (800a524 <TIM_Base_SetConfig+0x118>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d023      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a2b      	ldr	r2, [pc, #172]	; (800a528 <TIM_Base_SetConfig+0x11c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d01f      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <TIM_Base_SetConfig+0x120>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d01b      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a29      	ldr	r2, [pc, #164]	; (800a530 <TIM_Base_SetConfig+0x124>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d017      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a28      	ldr	r2, [pc, #160]	; (800a534 <TIM_Base_SetConfig+0x128>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d013      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a27      	ldr	r2, [pc, #156]	; (800a538 <TIM_Base_SetConfig+0x12c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00f      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a26      	ldr	r2, [pc, #152]	; (800a53c <TIM_Base_SetConfig+0x130>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00b      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a25      	ldr	r2, [pc, #148]	; (800a540 <TIM_Base_SetConfig+0x134>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d007      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a24      	ldr	r2, [pc, #144]	; (800a544 <TIM_Base_SetConfig+0x138>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d003      	beq.n	800a4be <TIM_Base_SetConfig+0xb2>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a23      	ldr	r2, [pc, #140]	; (800a548 <TIM_Base_SetConfig+0x13c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d108      	bne.n	800a4d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a0a      	ldr	r2, [pc, #40]	; (800a520 <TIM_Base_SetConfig+0x114>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d003      	beq.n	800a504 <TIM_Base_SetConfig+0xf8>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a0c      	ldr	r2, [pc, #48]	; (800a530 <TIM_Base_SetConfig+0x124>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d103      	bne.n	800a50c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	615a      	str	r2, [r3, #20]
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	40010000 	.word	0x40010000
 800a524:	40000400 	.word	0x40000400
 800a528:	40000800 	.word	0x40000800
 800a52c:	40000c00 	.word	0x40000c00
 800a530:	40010400 	.word	0x40010400
 800a534:	40014000 	.word	0x40014000
 800a538:	40014400 	.word	0x40014400
 800a53c:	40014800 	.word	0x40014800
 800a540:	40001800 	.word	0x40001800
 800a544:	40001c00 	.word	0x40001c00
 800a548:	40002000 	.word	0x40002000

0800a54c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	f023 0201 	bic.w	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f023 0302 	bic.w	r3, r3, #2
 800a594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a20      	ldr	r2, [pc, #128]	; (800a624 <TIM_OC1_SetConfig+0xd8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <TIM_OC1_SetConfig+0x64>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a1f      	ldr	r2, [pc, #124]	; (800a628 <TIM_OC1_SetConfig+0xdc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10c      	bne.n	800a5ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f023 0308 	bic.w	r3, r3, #8
 800a5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f023 0304 	bic.w	r3, r3, #4
 800a5c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a15      	ldr	r2, [pc, #84]	; (800a624 <TIM_OC1_SetConfig+0xd8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_OC1_SetConfig+0x8e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a14      	ldr	r2, [pc, #80]	; (800a628 <TIM_OC1_SetConfig+0xdc>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d111      	bne.n	800a5fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	621a      	str	r2, [r3, #32]
}
 800a618:	bf00      	nop
 800a61a:	371c      	adds	r7, #28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	40010000 	.word	0x40010000
 800a628:	40010400 	.word	0x40010400

0800a62c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f023 0210 	bic.w	r2, r3, #16
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0320 	bic.w	r3, r3, #32
 800a676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a22      	ldr	r2, [pc, #136]	; (800a710 <TIM_OC2_SetConfig+0xe4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d003      	beq.n	800a694 <TIM_OC2_SetConfig+0x68>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a21      	ldr	r2, [pc, #132]	; (800a714 <TIM_OC2_SetConfig+0xe8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d10d      	bne.n	800a6b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a69a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a17      	ldr	r2, [pc, #92]	; (800a710 <TIM_OC2_SetConfig+0xe4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d003      	beq.n	800a6c0 <TIM_OC2_SetConfig+0x94>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a16      	ldr	r2, [pc, #88]	; (800a714 <TIM_OC2_SetConfig+0xe8>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d113      	bne.n	800a6e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	621a      	str	r2, [r3, #32]
}
 800a702:	bf00      	nop
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400

0800a718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a21      	ldr	r2, [pc, #132]	; (800a7f8 <TIM_OC3_SetConfig+0xe0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d003      	beq.n	800a77e <TIM_OC3_SetConfig+0x66>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a20      	ldr	r2, [pc, #128]	; (800a7fc <TIM_OC3_SetConfig+0xe4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d10d      	bne.n	800a79a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a16      	ldr	r2, [pc, #88]	; (800a7f8 <TIM_OC3_SetConfig+0xe0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d003      	beq.n	800a7aa <TIM_OC3_SetConfig+0x92>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a15      	ldr	r2, [pc, #84]	; (800a7fc <TIM_OC3_SetConfig+0xe4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d113      	bne.n	800a7d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	011b      	lsls	r3, r3, #4
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	621a      	str	r2, [r3, #32]
}
 800a7ec:	bf00      	nop
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	40010000 	.word	0x40010000
 800a7fc:	40010400 	.word	0x40010400

0800a800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a84a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	031b      	lsls	r3, r3, #12
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	4313      	orrs	r3, r2
 800a856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a12      	ldr	r2, [pc, #72]	; (800a8a4 <TIM_OC4_SetConfig+0xa4>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d003      	beq.n	800a868 <TIM_OC4_SetConfig+0x68>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a11      	ldr	r2, [pc, #68]	; (800a8a8 <TIM_OC4_SetConfig+0xa8>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d109      	bne.n	800a87c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a86e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	019b      	lsls	r3, r3, #6
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	4313      	orrs	r3, r2
 800a87a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	621a      	str	r2, [r3, #32]
}
 800a896:	bf00      	nop
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	40010000 	.word	0x40010000
 800a8a8:	40010400 	.word	0x40010400

0800a8ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2201      	movs	r2, #1
 800a8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a1a      	ldr	r2, [r3, #32]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	43db      	mvns	r3, r3
 800a8ce:	401a      	ands	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a1a      	ldr	r2, [r3, #32]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f003 031f 	and.w	r3, r3, #31
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e05a      	b.n	800a9c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a21      	ldr	r2, [pc, #132]	; (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d022      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95c:	d01d      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1d      	ldr	r2, [pc, #116]	; (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d018      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1b      	ldr	r2, [pc, #108]	; (800a9dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d013      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a1a      	ldr	r2, [pc, #104]	; (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00e      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a18      	ldr	r2, [pc, #96]	; (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d009      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d004      	beq.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a15      	ldr	r2, [pc, #84]	; (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d10c      	bne.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	40010000 	.word	0x40010000
 800a9d8:	40000400 	.word	0x40000400
 800a9dc:	40000800 	.word	0x40000800
 800a9e0:	40000c00 	.word	0x40000c00
 800a9e4:	40010400 	.word	0x40010400
 800a9e8:	40014000 	.word	0x40014000
 800a9ec:	40001800 	.word	0x40001800

0800a9f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e03d      	b.n	800aa88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e03f      	b.n	800ab4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7f9 fe1a 	bl	800471c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2224      	movs	r2, #36	; 0x24
 800aaec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aafe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f829 	bl	800ab58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	691a      	ldr	r2, [r3, #16]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695a      	ldr	r2, [r3, #20]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68da      	ldr	r2, [r3, #12]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab9a:	f023 030c 	bic.w	r3, r3, #12
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	430b      	orrs	r3, r1
 800aba6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	430a      	orrs	r2, r1
 800abbc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc6:	f040 818b 	bne.w	800aee0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4ac1      	ldr	r2, [pc, #772]	; (800aed4 <UART_SetConfig+0x37c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d005      	beq.n	800abe0 <UART_SetConfig+0x88>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4abf      	ldr	r2, [pc, #764]	; (800aed8 <UART_SetConfig+0x380>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	f040 80bd 	bne.w	800ad5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800abe0:	f7fc fbcc 	bl	800737c <HAL_RCC_GetPCLK2Freq>
 800abe4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	461d      	mov	r5, r3
 800abea:	f04f 0600 	mov.w	r6, #0
 800abee:	46a8      	mov	r8, r5
 800abf0:	46b1      	mov	r9, r6
 800abf2:	eb18 0308 	adds.w	r3, r8, r8
 800abf6:	eb49 0409 	adc.w	r4, r9, r9
 800abfa:	4698      	mov	r8, r3
 800abfc:	46a1      	mov	r9, r4
 800abfe:	eb18 0805 	adds.w	r8, r8, r5
 800ac02:	eb49 0906 	adc.w	r9, r9, r6
 800ac06:	f04f 0100 	mov.w	r1, #0
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac1a:	4688      	mov	r8, r1
 800ac1c:	4691      	mov	r9, r2
 800ac1e:	eb18 0005 	adds.w	r0, r8, r5
 800ac22:	eb49 0106 	adc.w	r1, r9, r6
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	f04f 0600 	mov.w	r6, #0
 800ac30:	196b      	adds	r3, r5, r5
 800ac32:	eb46 0406 	adc.w	r4, r6, r6
 800ac36:	461a      	mov	r2, r3
 800ac38:	4623      	mov	r3, r4
 800ac3a:	f7f6 f83d 	bl	8000cb8 <__aeabi_uldivmod>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	460c      	mov	r4, r1
 800ac42:	461a      	mov	r2, r3
 800ac44:	4ba5      	ldr	r3, [pc, #660]	; (800aedc <UART_SetConfig+0x384>)
 800ac46:	fba3 2302 	umull	r2, r3, r3, r2
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	461d      	mov	r5, r3
 800ac54:	f04f 0600 	mov.w	r6, #0
 800ac58:	46a9      	mov	r9, r5
 800ac5a:	46b2      	mov	sl, r6
 800ac5c:	eb19 0309 	adds.w	r3, r9, r9
 800ac60:	eb4a 040a 	adc.w	r4, sl, sl
 800ac64:	4699      	mov	r9, r3
 800ac66:	46a2      	mov	sl, r4
 800ac68:	eb19 0905 	adds.w	r9, r9, r5
 800ac6c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ac70:	f04f 0100 	mov.w	r1, #0
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac84:	4689      	mov	r9, r1
 800ac86:	4692      	mov	sl, r2
 800ac88:	eb19 0005 	adds.w	r0, r9, r5
 800ac8c:	eb4a 0106 	adc.w	r1, sl, r6
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	461d      	mov	r5, r3
 800ac96:	f04f 0600 	mov.w	r6, #0
 800ac9a:	196b      	adds	r3, r5, r5
 800ac9c:	eb46 0406 	adc.w	r4, r6, r6
 800aca0:	461a      	mov	r2, r3
 800aca2:	4623      	mov	r3, r4
 800aca4:	f7f6 f808 	bl	8000cb8 <__aeabi_uldivmod>
 800aca8:	4603      	mov	r3, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	461a      	mov	r2, r3
 800acae:	4b8b      	ldr	r3, [pc, #556]	; (800aedc <UART_SetConfig+0x384>)
 800acb0:	fba3 1302 	umull	r1, r3, r3, r2
 800acb4:	095b      	lsrs	r3, r3, #5
 800acb6:	2164      	movs	r1, #100	; 0x64
 800acb8:	fb01 f303 	mul.w	r3, r1, r3
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	3332      	adds	r3, #50	; 0x32
 800acc2:	4a86      	ldr	r2, [pc, #536]	; (800aedc <UART_SetConfig+0x384>)
 800acc4:	fba2 2303 	umull	r2, r3, r2, r3
 800acc8:	095b      	lsrs	r3, r3, #5
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acd0:	4498      	add	r8, r3
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	461d      	mov	r5, r3
 800acd6:	f04f 0600 	mov.w	r6, #0
 800acda:	46a9      	mov	r9, r5
 800acdc:	46b2      	mov	sl, r6
 800acde:	eb19 0309 	adds.w	r3, r9, r9
 800ace2:	eb4a 040a 	adc.w	r4, sl, sl
 800ace6:	4699      	mov	r9, r3
 800ace8:	46a2      	mov	sl, r4
 800acea:	eb19 0905 	adds.w	r9, r9, r5
 800acee:	eb4a 0a06 	adc.w	sl, sl, r6
 800acf2:	f04f 0100 	mov.w	r1, #0
 800acf6:	f04f 0200 	mov.w	r2, #0
 800acfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad06:	4689      	mov	r9, r1
 800ad08:	4692      	mov	sl, r2
 800ad0a:	eb19 0005 	adds.w	r0, r9, r5
 800ad0e:	eb4a 0106 	adc.w	r1, sl, r6
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	461d      	mov	r5, r3
 800ad18:	f04f 0600 	mov.w	r6, #0
 800ad1c:	196b      	adds	r3, r5, r5
 800ad1e:	eb46 0406 	adc.w	r4, r6, r6
 800ad22:	461a      	mov	r2, r3
 800ad24:	4623      	mov	r3, r4
 800ad26:	f7f5 ffc7 	bl	8000cb8 <__aeabi_uldivmod>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4b6a      	ldr	r3, [pc, #424]	; (800aedc <UART_SetConfig+0x384>)
 800ad32:	fba3 1302 	umull	r1, r3, r3, r2
 800ad36:	095b      	lsrs	r3, r3, #5
 800ad38:	2164      	movs	r1, #100	; 0x64
 800ad3a:	fb01 f303 	mul.w	r3, r1, r3
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	3332      	adds	r3, #50	; 0x32
 800ad44:	4a65      	ldr	r2, [pc, #404]	; (800aedc <UART_SetConfig+0x384>)
 800ad46:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4a:	095b      	lsrs	r3, r3, #5
 800ad4c:	f003 0207 	and.w	r2, r3, #7
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4442      	add	r2, r8
 800ad56:	609a      	str	r2, [r3, #8]
 800ad58:	e26f      	b.n	800b23a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad5a:	f7fc fafb 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 800ad5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	461d      	mov	r5, r3
 800ad64:	f04f 0600 	mov.w	r6, #0
 800ad68:	46a8      	mov	r8, r5
 800ad6a:	46b1      	mov	r9, r6
 800ad6c:	eb18 0308 	adds.w	r3, r8, r8
 800ad70:	eb49 0409 	adc.w	r4, r9, r9
 800ad74:	4698      	mov	r8, r3
 800ad76:	46a1      	mov	r9, r4
 800ad78:	eb18 0805 	adds.w	r8, r8, r5
 800ad7c:	eb49 0906 	adc.w	r9, r9, r6
 800ad80:	f04f 0100 	mov.w	r1, #0
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ad94:	4688      	mov	r8, r1
 800ad96:	4691      	mov	r9, r2
 800ad98:	eb18 0005 	adds.w	r0, r8, r5
 800ad9c:	eb49 0106 	adc.w	r1, r9, r6
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	461d      	mov	r5, r3
 800ada6:	f04f 0600 	mov.w	r6, #0
 800adaa:	196b      	adds	r3, r5, r5
 800adac:	eb46 0406 	adc.w	r4, r6, r6
 800adb0:	461a      	mov	r2, r3
 800adb2:	4623      	mov	r3, r4
 800adb4:	f7f5 ff80 	bl	8000cb8 <__aeabi_uldivmod>
 800adb8:	4603      	mov	r3, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b47      	ldr	r3, [pc, #284]	; (800aedc <UART_SetConfig+0x384>)
 800adc0:	fba3 2302 	umull	r2, r3, r3, r2
 800adc4:	095b      	lsrs	r3, r3, #5
 800adc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	461d      	mov	r5, r3
 800adce:	f04f 0600 	mov.w	r6, #0
 800add2:	46a9      	mov	r9, r5
 800add4:	46b2      	mov	sl, r6
 800add6:	eb19 0309 	adds.w	r3, r9, r9
 800adda:	eb4a 040a 	adc.w	r4, sl, sl
 800adde:	4699      	mov	r9, r3
 800ade0:	46a2      	mov	sl, r4
 800ade2:	eb19 0905 	adds.w	r9, r9, r5
 800ade6:	eb4a 0a06 	adc.w	sl, sl, r6
 800adea:	f04f 0100 	mov.w	r1, #0
 800adee:	f04f 0200 	mov.w	r2, #0
 800adf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adfe:	4689      	mov	r9, r1
 800ae00:	4692      	mov	sl, r2
 800ae02:	eb19 0005 	adds.w	r0, r9, r5
 800ae06:	eb4a 0106 	adc.w	r1, sl, r6
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f04f 0600 	mov.w	r6, #0
 800ae14:	196b      	adds	r3, r5, r5
 800ae16:	eb46 0406 	adc.w	r4, r6, r6
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	f7f5 ff4b 	bl	8000cb8 <__aeabi_uldivmod>
 800ae22:	4603      	mov	r3, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b2c      	ldr	r3, [pc, #176]	; (800aedc <UART_SetConfig+0x384>)
 800ae2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	2164      	movs	r1, #100	; 0x64
 800ae32:	fb01 f303 	mul.w	r3, r1, r3
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	3332      	adds	r3, #50	; 0x32
 800ae3c:	4a27      	ldr	r2, [pc, #156]	; (800aedc <UART_SetConfig+0x384>)
 800ae3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae42:	095b      	lsrs	r3, r3, #5
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae4a:	4498      	add	r8, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	461d      	mov	r5, r3
 800ae50:	f04f 0600 	mov.w	r6, #0
 800ae54:	46a9      	mov	r9, r5
 800ae56:	46b2      	mov	sl, r6
 800ae58:	eb19 0309 	adds.w	r3, r9, r9
 800ae5c:	eb4a 040a 	adc.w	r4, sl, sl
 800ae60:	4699      	mov	r9, r3
 800ae62:	46a2      	mov	sl, r4
 800ae64:	eb19 0905 	adds.w	r9, r9, r5
 800ae68:	eb4a 0a06 	adc.w	sl, sl, r6
 800ae6c:	f04f 0100 	mov.w	r1, #0
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae80:	4689      	mov	r9, r1
 800ae82:	4692      	mov	sl, r2
 800ae84:	eb19 0005 	adds.w	r0, r9, r5
 800ae88:	eb4a 0106 	adc.w	r1, sl, r6
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	461d      	mov	r5, r3
 800ae92:	f04f 0600 	mov.w	r6, #0
 800ae96:	196b      	adds	r3, r5, r5
 800ae98:	eb46 0406 	adc.w	r4, r6, r6
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	4623      	mov	r3, r4
 800aea0:	f7f5 ff0a 	bl	8000cb8 <__aeabi_uldivmod>
 800aea4:	4603      	mov	r3, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <UART_SetConfig+0x384>)
 800aeac:	fba3 1302 	umull	r1, r3, r3, r2
 800aeb0:	095b      	lsrs	r3, r3, #5
 800aeb2:	2164      	movs	r1, #100	; 0x64
 800aeb4:	fb01 f303 	mul.w	r3, r1, r3
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	3332      	adds	r3, #50	; 0x32
 800aebe:	4a07      	ldr	r2, [pc, #28]	; (800aedc <UART_SetConfig+0x384>)
 800aec0:	fba2 2303 	umull	r2, r3, r2, r3
 800aec4:	095b      	lsrs	r3, r3, #5
 800aec6:	f003 0207 	and.w	r2, r3, #7
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4442      	add	r2, r8
 800aed0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aed2:	e1b2      	b.n	800b23a <UART_SetConfig+0x6e2>
 800aed4:	40011000 	.word	0x40011000
 800aed8:	40011400 	.word	0x40011400
 800aedc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4ad7      	ldr	r2, [pc, #860]	; (800b244 <UART_SetConfig+0x6ec>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d005      	beq.n	800aef6 <UART_SetConfig+0x39e>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4ad6      	ldr	r2, [pc, #856]	; (800b248 <UART_SetConfig+0x6f0>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	f040 80d1 	bne.w	800b098 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aef6:	f7fc fa41 	bl	800737c <HAL_RCC_GetPCLK2Freq>
 800aefa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	469a      	mov	sl, r3
 800af00:	f04f 0b00 	mov.w	fp, #0
 800af04:	46d0      	mov	r8, sl
 800af06:	46d9      	mov	r9, fp
 800af08:	eb18 0308 	adds.w	r3, r8, r8
 800af0c:	eb49 0409 	adc.w	r4, r9, r9
 800af10:	4698      	mov	r8, r3
 800af12:	46a1      	mov	r9, r4
 800af14:	eb18 080a 	adds.w	r8, r8, sl
 800af18:	eb49 090b 	adc.w	r9, r9, fp
 800af1c:	f04f 0100 	mov.w	r1, #0
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800af28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800af2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800af30:	4688      	mov	r8, r1
 800af32:	4691      	mov	r9, r2
 800af34:	eb1a 0508 	adds.w	r5, sl, r8
 800af38:	eb4b 0609 	adc.w	r6, fp, r9
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	f04f 0400 	mov.w	r4, #0
 800af4e:	0094      	lsls	r4, r2, #2
 800af50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800af54:	008b      	lsls	r3, r1, #2
 800af56:	461a      	mov	r2, r3
 800af58:	4623      	mov	r3, r4
 800af5a:	4628      	mov	r0, r5
 800af5c:	4631      	mov	r1, r6
 800af5e:	f7f5 feab 	bl	8000cb8 <__aeabi_uldivmod>
 800af62:	4603      	mov	r3, r0
 800af64:	460c      	mov	r4, r1
 800af66:	461a      	mov	r2, r3
 800af68:	4bb8      	ldr	r3, [pc, #736]	; (800b24c <UART_SetConfig+0x6f4>)
 800af6a:	fba3 2302 	umull	r2, r3, r3, r2
 800af6e:	095b      	lsrs	r3, r3, #5
 800af70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	469b      	mov	fp, r3
 800af78:	f04f 0c00 	mov.w	ip, #0
 800af7c:	46d9      	mov	r9, fp
 800af7e:	46e2      	mov	sl, ip
 800af80:	eb19 0309 	adds.w	r3, r9, r9
 800af84:	eb4a 040a 	adc.w	r4, sl, sl
 800af88:	4699      	mov	r9, r3
 800af8a:	46a2      	mov	sl, r4
 800af8c:	eb19 090b 	adds.w	r9, r9, fp
 800af90:	eb4a 0a0c 	adc.w	sl, sl, ip
 800af94:	f04f 0100 	mov.w	r1, #0
 800af98:	f04f 0200 	mov.w	r2, #0
 800af9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800afa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800afa8:	4689      	mov	r9, r1
 800afaa:	4692      	mov	sl, r2
 800afac:	eb1b 0509 	adds.w	r5, fp, r9
 800afb0:	eb4c 060a 	adc.w	r6, ip, sl
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	4619      	mov	r1, r3
 800afba:	f04f 0200 	mov.w	r2, #0
 800afbe:	f04f 0300 	mov.w	r3, #0
 800afc2:	f04f 0400 	mov.w	r4, #0
 800afc6:	0094      	lsls	r4, r2, #2
 800afc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800afcc:	008b      	lsls	r3, r1, #2
 800afce:	461a      	mov	r2, r3
 800afd0:	4623      	mov	r3, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	4631      	mov	r1, r6
 800afd6:	f7f5 fe6f 	bl	8000cb8 <__aeabi_uldivmod>
 800afda:	4603      	mov	r3, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	461a      	mov	r2, r3
 800afe0:	4b9a      	ldr	r3, [pc, #616]	; (800b24c <UART_SetConfig+0x6f4>)
 800afe2:	fba3 1302 	umull	r1, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	2164      	movs	r1, #100	; 0x64
 800afea:	fb01 f303 	mul.w	r3, r1, r3
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	011b      	lsls	r3, r3, #4
 800aff2:	3332      	adds	r3, #50	; 0x32
 800aff4:	4a95      	ldr	r2, [pc, #596]	; (800b24c <UART_SetConfig+0x6f4>)
 800aff6:	fba2 2303 	umull	r2, r3, r2, r3
 800affa:	095b      	lsrs	r3, r3, #5
 800affc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b000:	4498      	add	r8, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	469b      	mov	fp, r3
 800b006:	f04f 0c00 	mov.w	ip, #0
 800b00a:	46d9      	mov	r9, fp
 800b00c:	46e2      	mov	sl, ip
 800b00e:	eb19 0309 	adds.w	r3, r9, r9
 800b012:	eb4a 040a 	adc.w	r4, sl, sl
 800b016:	4699      	mov	r9, r3
 800b018:	46a2      	mov	sl, r4
 800b01a:	eb19 090b 	adds.w	r9, r9, fp
 800b01e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b022:	f04f 0100 	mov.w	r1, #0
 800b026:	f04f 0200 	mov.w	r2, #0
 800b02a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b02e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b036:	4689      	mov	r9, r1
 800b038:	4692      	mov	sl, r2
 800b03a:	eb1b 0509 	adds.w	r5, fp, r9
 800b03e:	eb4c 060a 	adc.w	r6, ip, sl
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4619      	mov	r1, r3
 800b048:	f04f 0200 	mov.w	r2, #0
 800b04c:	f04f 0300 	mov.w	r3, #0
 800b050:	f04f 0400 	mov.w	r4, #0
 800b054:	0094      	lsls	r4, r2, #2
 800b056:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b05a:	008b      	lsls	r3, r1, #2
 800b05c:	461a      	mov	r2, r3
 800b05e:	4623      	mov	r3, r4
 800b060:	4628      	mov	r0, r5
 800b062:	4631      	mov	r1, r6
 800b064:	f7f5 fe28 	bl	8000cb8 <__aeabi_uldivmod>
 800b068:	4603      	mov	r3, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	461a      	mov	r2, r3
 800b06e:	4b77      	ldr	r3, [pc, #476]	; (800b24c <UART_SetConfig+0x6f4>)
 800b070:	fba3 1302 	umull	r1, r3, r3, r2
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	2164      	movs	r1, #100	; 0x64
 800b078:	fb01 f303 	mul.w	r3, r1, r3
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	011b      	lsls	r3, r3, #4
 800b080:	3332      	adds	r3, #50	; 0x32
 800b082:	4a72      	ldr	r2, [pc, #456]	; (800b24c <UART_SetConfig+0x6f4>)
 800b084:	fba2 2303 	umull	r2, r3, r2, r3
 800b088:	095b      	lsrs	r3, r3, #5
 800b08a:	f003 020f 	and.w	r2, r3, #15
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4442      	add	r2, r8
 800b094:	609a      	str	r2, [r3, #8]
 800b096:	e0d0      	b.n	800b23a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b098:	f7fc f95c 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 800b09c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	469a      	mov	sl, r3
 800b0a2:	f04f 0b00 	mov.w	fp, #0
 800b0a6:	46d0      	mov	r8, sl
 800b0a8:	46d9      	mov	r9, fp
 800b0aa:	eb18 0308 	adds.w	r3, r8, r8
 800b0ae:	eb49 0409 	adc.w	r4, r9, r9
 800b0b2:	4698      	mov	r8, r3
 800b0b4:	46a1      	mov	r9, r4
 800b0b6:	eb18 080a 	adds.w	r8, r8, sl
 800b0ba:	eb49 090b 	adc.w	r9, r9, fp
 800b0be:	f04f 0100 	mov.w	r1, #0
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b0ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b0ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b0d2:	4688      	mov	r8, r1
 800b0d4:	4691      	mov	r9, r2
 800b0d6:	eb1a 0508 	adds.w	r5, sl, r8
 800b0da:	eb4b 0609 	adc.w	r6, fp, r9
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	f04f 0200 	mov.w	r2, #0
 800b0e8:	f04f 0300 	mov.w	r3, #0
 800b0ec:	f04f 0400 	mov.w	r4, #0
 800b0f0:	0094      	lsls	r4, r2, #2
 800b0f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b0f6:	008b      	lsls	r3, r1, #2
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	4631      	mov	r1, r6
 800b100:	f7f5 fdda 	bl	8000cb8 <__aeabi_uldivmod>
 800b104:	4603      	mov	r3, r0
 800b106:	460c      	mov	r4, r1
 800b108:	461a      	mov	r2, r3
 800b10a:	4b50      	ldr	r3, [pc, #320]	; (800b24c <UART_SetConfig+0x6f4>)
 800b10c:	fba3 2302 	umull	r2, r3, r3, r2
 800b110:	095b      	lsrs	r3, r3, #5
 800b112:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	469b      	mov	fp, r3
 800b11a:	f04f 0c00 	mov.w	ip, #0
 800b11e:	46d9      	mov	r9, fp
 800b120:	46e2      	mov	sl, ip
 800b122:	eb19 0309 	adds.w	r3, r9, r9
 800b126:	eb4a 040a 	adc.w	r4, sl, sl
 800b12a:	4699      	mov	r9, r3
 800b12c:	46a2      	mov	sl, r4
 800b12e:	eb19 090b 	adds.w	r9, r9, fp
 800b132:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b136:	f04f 0100 	mov.w	r1, #0
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b142:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b146:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b14a:	4689      	mov	r9, r1
 800b14c:	4692      	mov	sl, r2
 800b14e:	eb1b 0509 	adds.w	r5, fp, r9
 800b152:	eb4c 060a 	adc.w	r6, ip, sl
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4619      	mov	r1, r3
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	f04f 0400 	mov.w	r4, #0
 800b168:	0094      	lsls	r4, r2, #2
 800b16a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b16e:	008b      	lsls	r3, r1, #2
 800b170:	461a      	mov	r2, r3
 800b172:	4623      	mov	r3, r4
 800b174:	4628      	mov	r0, r5
 800b176:	4631      	mov	r1, r6
 800b178:	f7f5 fd9e 	bl	8000cb8 <__aeabi_uldivmod>
 800b17c:	4603      	mov	r3, r0
 800b17e:	460c      	mov	r4, r1
 800b180:	461a      	mov	r2, r3
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <UART_SetConfig+0x6f4>)
 800b184:	fba3 1302 	umull	r1, r3, r3, r2
 800b188:	095b      	lsrs	r3, r3, #5
 800b18a:	2164      	movs	r1, #100	; 0x64
 800b18c:	fb01 f303 	mul.w	r3, r1, r3
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	3332      	adds	r3, #50	; 0x32
 800b196:	4a2d      	ldr	r2, [pc, #180]	; (800b24c <UART_SetConfig+0x6f4>)
 800b198:	fba2 2303 	umull	r2, r3, r2, r3
 800b19c:	095b      	lsrs	r3, r3, #5
 800b19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1a2:	4498      	add	r8, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	469b      	mov	fp, r3
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	46d9      	mov	r9, fp
 800b1ae:	46e2      	mov	sl, ip
 800b1b0:	eb19 0309 	adds.w	r3, r9, r9
 800b1b4:	eb4a 040a 	adc.w	r4, sl, sl
 800b1b8:	4699      	mov	r9, r3
 800b1ba:	46a2      	mov	sl, r4
 800b1bc:	eb19 090b 	adds.w	r9, r9, fp
 800b1c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b1c4:	f04f 0100 	mov.w	r1, #0
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1d8:	4689      	mov	r9, r1
 800b1da:	4692      	mov	sl, r2
 800b1dc:	eb1b 0509 	adds.w	r5, fp, r9
 800b1e0:	eb4c 060a 	adc.w	r6, ip, sl
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f04f 0200 	mov.w	r2, #0
 800b1ee:	f04f 0300 	mov.w	r3, #0
 800b1f2:	f04f 0400 	mov.w	r4, #0
 800b1f6:	0094      	lsls	r4, r2, #2
 800b1f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b1fc:	008b      	lsls	r3, r1, #2
 800b1fe:	461a      	mov	r2, r3
 800b200:	4623      	mov	r3, r4
 800b202:	4628      	mov	r0, r5
 800b204:	4631      	mov	r1, r6
 800b206:	f7f5 fd57 	bl	8000cb8 <__aeabi_uldivmod>
 800b20a:	4603      	mov	r3, r0
 800b20c:	460c      	mov	r4, r1
 800b20e:	461a      	mov	r2, r3
 800b210:	4b0e      	ldr	r3, [pc, #56]	; (800b24c <UART_SetConfig+0x6f4>)
 800b212:	fba3 1302 	umull	r1, r3, r3, r2
 800b216:	095b      	lsrs	r3, r3, #5
 800b218:	2164      	movs	r1, #100	; 0x64
 800b21a:	fb01 f303 	mul.w	r3, r1, r3
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	011b      	lsls	r3, r3, #4
 800b222:	3332      	adds	r3, #50	; 0x32
 800b224:	4a09      	ldr	r2, [pc, #36]	; (800b24c <UART_SetConfig+0x6f4>)
 800b226:	fba2 2303 	umull	r2, r3, r2, r3
 800b22a:	095b      	lsrs	r3, r3, #5
 800b22c:	f003 020f 	and.w	r2, r3, #15
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4442      	add	r2, r8
 800b236:	609a      	str	r2, [r3, #8]
}
 800b238:	e7ff      	b.n	800b23a <UART_SetConfig+0x6e2>
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b244:	40011000 	.word	0x40011000
 800b248:	40011400 	.word	0x40011400
 800b24c:	51eb851f 	.word	0x51eb851f

0800b250 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b250:	b084      	sub	sp, #16
 800b252:	b480      	push	{r7}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	f107 001c 	add.w	r0, r7, #28
 800b25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b266:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b268:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b26a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b26e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b272:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b276:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b27a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b28a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	431a      	orrs	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	b004      	add	sp, #16
 800b2a4:	4770      	bx	lr

0800b2a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b2f0:	2002      	movs	r0, #2
 800b2f2:	f7f9 ff0f 	bl	8005114 <HAL_Delay>
  
  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0303 	and.w	r3, r3, #3
}
 800b310:	4618      	mov	r0, r3
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b33a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b340:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b346:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b356:	f023 030f 	bic.w	r3, r3, #15
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	431a      	orrs	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	b2db      	uxtb	r3, r3
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3314      	adds	r3, #20
 800b398:	461a      	mov	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	4413      	add	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
}  
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b3d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b3dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b3e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0

}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b416:	2310      	movs	r3, #16
 800b418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff ff74 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b434:	f241 3288 	movw	r2, #5000	; 0x1388
 800b438:	2110      	movs	r1, #16
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa40 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b442:	69fb      	ldr	r3, [r7, #28]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b45a:	2311      	movs	r3, #17
 800b45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b46a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b46c:	f107 0308 	add.w	r3, r7, #8
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ff52 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	2111      	movs	r1, #17
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa1e 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b49e:	2312      	movs	r3, #18
 800b4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4a2:	2340      	movs	r3, #64	; 0x40
 800b4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff ff30 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c0:	2112      	movs	r1, #18
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9fc 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3720      	adds	r7, #32
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b4e2:	2318      	movs	r3, #24
 800b4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f4:	f107 0308 	add.w	r3, r7, #8
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff ff0e 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b500:	f241 3288 	movw	r2, #5000	; 0x1388
 800b504:	2118      	movs	r1, #24
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f9da 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50e:	69fb      	ldr	r3, [r7, #28]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b526:	2319      	movs	r3, #25
 800b528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b52a:	2340      	movs	r3, #64	; 0x40
 800b52c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff feec 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b544:	f241 3288 	movw	r2, #5000	; 0x1388
 800b548:	2119      	movs	r1, #25
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f9b8 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b552:	69fb      	ldr	r3, [r7, #28]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b564:	2300      	movs	r3, #0
 800b566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b568:	230c      	movs	r3, #12
 800b56a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff fecb 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b586:	4a05      	ldr	r2, [pc, #20]	; (800b59c <SDMMC_CmdStopTransfer+0x40>)
 800b588:	210c      	movs	r1, #12
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f998 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b592:	69fb      	ldr	r3, [r7, #28]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	05f5e100 	.word	0x05f5e100

0800b5a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	; 0x28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b5b0:	2307      	movs	r3, #7
 800b5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5c2:	f107 0310 	add.w	r3, r7, #16
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff fea7 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b5ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d2:	2107      	movs	r1, #7
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f973 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b5da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3728      	adds	r7, #40	; 0x28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b088      	sub	sp, #32
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fe86 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f92d 	bl	800b870 <SDMMC_GetCmdError>
 800b616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b618:	69fb      	ldr	r3, [r7, #28]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3720      	adds	r7, #32
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b088      	sub	sp, #32
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b62a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b62e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b630:	2308      	movs	r3, #8
 800b632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b634:	2340      	movs	r3, #64	; 0x40
 800b636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b638:	2300      	movs	r3, #0
 800b63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b642:	f107 0308 	add.w	r3, r7, #8
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fe67 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fb16 	bl	800bc80 <SDMMC_GetCmdResp7>
 800b654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b656:	69fb      	ldr	r3, [r7, #28]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b66e:	2337      	movs	r3, #55	; 0x37
 800b670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b672:	2340      	movs	r3, #64	; 0x40
 800b674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b676:	2300      	movs	r3, #0
 800b678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b67e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b680:	f107 0308 	add.w	r3, r7, #8
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fe48 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	2137      	movs	r1, #55	; 0x37
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f914 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69a:	69fb      	ldr	r3, [r7, #28]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b6b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b6ba:	2329      	movs	r3, #41	; 0x29
 800b6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6be:	2340      	movs	r3, #64	; 0x40
 800b6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6cc:	f107 0308 	add.w	r3, r7, #8
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fe22 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fa23 	bl	800bb24 <SDMMC_GetCmdResp3>
 800b6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b088      	sub	sp, #32
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6f8:	2306      	movs	r3, #6
 800b6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6fc:	2340      	movs	r3, #64	; 0x40
 800b6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b70a:	f107 0308 	add.w	r3, r7, #8
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7ff fe03 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b716:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71a:	2106      	movs	r1, #6
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8cf 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b724:	69fb      	ldr	r3, [r7, #28]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3720      	adds	r7, #32
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b088      	sub	sp, #32
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b73a:	2333      	movs	r3, #51	; 0x33
 800b73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b73e:	2340      	movs	r3, #64	; 0x40
 800b740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b74a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b74c:	f107 0308 	add.w	r3, r7, #8
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff fde2 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b758:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75c:	2133      	movs	r1, #51	; 0x33
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f8ae 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b77c:	2302      	movs	r3, #2
 800b77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b780:	23c0      	movs	r3, #192	; 0xc0
 800b782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b78c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fdc1 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f97c 	bl	800ba98 <SDMMC_GetCmdResp2>
 800b7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b7ba:	2309      	movs	r3, #9
 800b7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b7be:	23c0      	movs	r3, #192	; 0xc0
 800b7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fda2 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f95d 	bl	800ba98 <SDMMC_GetCmdResp2>
 800b7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b088      	sub	sp, #32
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff fd83 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	2103      	movs	r1, #3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9bc 	bl	800bb98 <SDMMC_GetCmdResp6>
 800b820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b822:	69fb      	ldr	r3, [r7, #28]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3720      	adds	r7, #32
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b83a:	230d      	movs	r3, #13
 800b83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b83e:	2340      	movs	r3, #64	; 0x40
 800b840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff fd62 	bl	800b31c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b858:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85c:	210d      	movs	r1, #13
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f82e 	bl	800b8c0 <SDMMC_GetCmdResp1>
 800b864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b866:	69fb      	ldr	r3, [r7, #28]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b870:	b490      	push	{r4, r7}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b878:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <SDMMC_GetCmdError+0x48>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a0f      	ldr	r2, [pc, #60]	; (800b8bc <SDMMC_GetCmdError+0x4c>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	0a5b      	lsrs	r3, r3, #9
 800b884:	f241 3288 	movw	r2, #5000	; 0x1388
 800b888:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b88c:	4623      	mov	r3, r4
 800b88e:	1e5c      	subs	r4, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b898:	e009      	b.n	800b8ae <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0f2      	beq.n	800b88c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	22c5      	movs	r2, #197	; 0xc5
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc90      	pop	{r4, r7}
 800b8b6:	4770      	bx	lr
 800b8b8:	20000000 	.word	0x20000000
 800b8bc:	10624dd3 	.word	0x10624dd3

0800b8c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b8ce:	4b6f      	ldr	r3, [pc, #444]	; (800ba8c <SDMMC_GetCmdResp1+0x1cc>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a6f      	ldr	r2, [pc, #444]	; (800ba90 <SDMMC_GetCmdResp1+0x1d0>)
 800b8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d8:	0a5b      	lsrs	r3, r3, #9
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	1e5c      	subs	r4, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8ec:	e0c9      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0f0      	beq.n	800b8e0 <SDMMC_GetCmdResp1+0x20>
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1eb      	bne.n	800b8e0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2204      	movs	r2, #4
 800b918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b91a:	2304      	movs	r3, #4
 800b91c:	e0b1      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b930:	2301      	movs	r3, #1
 800b932:	e0a6      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	22c5      	movs	r2, #197	; 0xc5
 800b938:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f7ff fd18 	bl	800b370 <SDIO_GetCommandResponse>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	7afb      	ldrb	r3, [r7, #11]
 800b946:	4293      	cmp	r3, r2
 800b948:	d001      	beq.n	800b94e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e099      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b94e:	2100      	movs	r1, #0
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7ff fd1a 	bl	800b38a <SDIO_GetResponse>
 800b956:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4b4e      	ldr	r3, [pc, #312]	; (800ba94 <SDMMC_GetCmdResp1+0x1d4>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b962:	2300      	movs	r3, #0
 800b964:	e08d      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	da02      	bge.n	800b972 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b96c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b970:	e087      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b97c:	2340      	movs	r3, #64	; 0x40
 800b97e:	e080      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b98a:	2380      	movs	r3, #128	; 0x80
 800b98c:	e079      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b99c:	e071      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ac:	e069      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9bc:	e061      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b9c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9cc:	e059      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9dc:	e051      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9ec:	e049      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9fc:	e041      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0c:	e039      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ba1c:	e031      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba2c:	e029      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba3c:	e021      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba4c:	e019      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba5c:	e011      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba6c:	e009      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f003 0308 	and.w	r3, r3, #8
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba7c:	e001      	b.n	800ba82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd90      	pop	{r4, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000000 	.word	0x20000000
 800ba90:	10624dd3 	.word	0x10624dd3
 800ba94:	fdffe008 	.word	0xfdffe008

0800ba98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ba98:	b490      	push	{r4, r7}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800baa0:	4b1e      	ldr	r3, [pc, #120]	; (800bb1c <SDMMC_GetCmdResp2+0x84>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1e      	ldr	r2, [pc, #120]	; (800bb20 <SDMMC_GetCmdResp2+0x88>)
 800baa6:	fba2 2303 	umull	r2, r3, r2, r3
 800baaa:	0a5b      	lsrs	r3, r3, #9
 800baac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bab4:	4623      	mov	r3, r4
 800bab6:	1e5c      	subs	r4, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d102      	bne.n	800bac2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800babc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bac0:	e026      	b.n	800bb10 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0f0      	beq.n	800bab4 <SDMMC_GetCmdResp2+0x1c>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1eb      	bne.n	800bab4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d004      	beq.n	800baf2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2204      	movs	r2, #4
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baee:	2304      	movs	r3, #4
 800baf0:	e00e      	b.n	800bb10 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d004      	beq.n	800bb08 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e003      	b.n	800bb10 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	22c5      	movs	r2, #197	; 0xc5
 800bb0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bc90      	pop	{r4, r7}
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20000000 	.word	0x20000000
 800bb20:	10624dd3 	.word	0x10624dd3

0800bb24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bb24:	b490      	push	{r4, r7}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb2c:	4b18      	ldr	r3, [pc, #96]	; (800bb90 <SDMMC_GetCmdResp3+0x6c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a18      	ldr	r2, [pc, #96]	; (800bb94 <SDMMC_GetCmdResp3+0x70>)
 800bb32:	fba2 2303 	umull	r2, r3, r2, r3
 800bb36:	0a5b      	lsrs	r3, r3, #9
 800bb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb40:	4623      	mov	r3, r4
 800bb42:	1e5c      	subs	r4, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb4c:	e01b      	b.n	800bb86 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0f0      	beq.n	800bb40 <SDMMC_GetCmdResp3+0x1c>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1eb      	bne.n	800bb40 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6c:	f003 0304 	and.w	r3, r3, #4
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2204      	movs	r2, #4
 800bb78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb7a:	2304      	movs	r3, #4
 800bb7c:	e003      	b.n	800bb86 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	22c5      	movs	r2, #197	; 0xc5
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bc90      	pop	{r4, r7}
 800bb8e:	4770      	bx	lr
 800bb90:	20000000 	.word	0x20000000
 800bb94:	10624dd3 	.word	0x10624dd3

0800bb98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	460b      	mov	r3, r1
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bba6:	4b34      	ldr	r3, [pc, #208]	; (800bc78 <SDMMC_GetCmdResp6+0xe0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a34      	ldr	r2, [pc, #208]	; (800bc7c <SDMMC_GetCmdResp6+0xe4>)
 800bbac:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb0:	0a5b      	lsrs	r3, r3, #9
 800bbb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bbba:	4623      	mov	r3, r4
 800bbbc:	1e5c      	subs	r4, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbc6:	e052      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbcc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0f0      	beq.n	800bbba <SDMMC_GetCmdResp6+0x22>
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1eb      	bne.n	800bbba <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d004      	beq.n	800bbf8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2204      	movs	r2, #4
 800bbf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	e03a      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e02f      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff fbae 	bl	800b370 <SDIO_GetCommandResponse>
 800bc14:	4603      	mov	r3, r0
 800bc16:	461a      	mov	r2, r3
 800bc18:	7afb      	ldrb	r3, [r7, #11]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d001      	beq.n	800bc22 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e025      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	22c5      	movs	r2, #197	; 0xc5
 800bc26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bc28:	2100      	movs	r1, #0
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7ff fbad 	bl	800b38a <SDIO_GetResponse>
 800bc30:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	0c1b      	lsrs	r3, r3, #16
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e011      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc58:	e009      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc68:	e001      	b.n	800bc6e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	371c      	adds	r7, #28
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd90      	pop	{r4, r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000000 	.word	0x20000000
 800bc7c:	10624dd3 	.word	0x10624dd3

0800bc80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bc80:	b490      	push	{r4, r7}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc88:	4b21      	ldr	r3, [pc, #132]	; (800bd10 <SDMMC_GetCmdResp7+0x90>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a21      	ldr	r2, [pc, #132]	; (800bd14 <SDMMC_GetCmdResp7+0x94>)
 800bc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc92:	0a5b      	lsrs	r3, r3, #9
 800bc94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc9c:	4623      	mov	r3, r4
 800bc9e:	1e5c      	subs	r4, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bca8:	e02c      	b.n	800bd04 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0f0      	beq.n	800bc9c <SDMMC_GetCmdResp7+0x1c>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1eb      	bne.n	800bc9c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcd6:	2304      	movs	r3, #4
 800bcd8:	e014      	b.n	800bd04 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d004      	beq.n	800bcf0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e009      	b.n	800bd04 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2240      	movs	r2, #64	; 0x40
 800bd00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd02:	2300      	movs	r3, #0
  
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc90      	pop	{r4, r7}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20000000 	.word	0x20000000
 800bd14:	10624dd3 	.word	0x10624dd3

0800bd18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd1c:	4904      	ldr	r1, [pc, #16]	; (800bd30 <MX_FATFS_Init+0x18>)
 800bd1e:	4805      	ldr	r0, [pc, #20]	; (800bd34 <MX_FATFS_Init+0x1c>)
 800bd20:	f004 f874 	bl	800fe0c <FATFS_LinkDriver>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <MX_FATFS_Init+0x20>)
 800bd2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd2c:	bf00      	nop
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	2000a610 	.word	0x2000a610
 800bd34:	080160e0 	.word	0x080160e0
 800bd38:	2000a60c 	.word	0x2000a60c

0800bd3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd56:	f000 f896 	bl	800be86 <BSP_SD_IsDetected>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d001      	beq.n	800bd64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e012      	b.n	800bd8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bd64:	480b      	ldr	r0, [pc, #44]	; (800bd94 <BSP_SD_Init+0x48>)
 800bd66:	f7fb ff9d 	bl	8007ca4 <HAL_SD_Init>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bd74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd78:	4806      	ldr	r0, [pc, #24]	; (800bd94 <BSP_SD_Init+0x48>)
 800bd7a:	f7fc fd47 	bl	800880c <HAL_SD_ConfigWideBusOperation>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bd88:	79fb      	ldrb	r3, [r7, #7]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	2000a4a4 	.word	0x2000a4a4

0800bd98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	68f9      	ldr	r1, [r7, #12]
 800bdae:	4806      	ldr	r0, [pc, #24]	; (800bdc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bdb0:	f7fc f808 	bl	8007dc4 <HAL_SD_ReadBlocks_DMA>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	2000a4a4 	.word	0x2000a4a4

0800bdcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	68f9      	ldr	r1, [r7, #12]
 800bde2:	4806      	ldr	r0, [pc, #24]	; (800bdfc <BSP_SD_WriteBlocks_DMA+0x30>)
 800bde4:	f7fc f8d6 	bl	8007f94 <HAL_SD_WriteBlocks_DMA>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	2000a4a4 	.word	0x2000a4a4

0800be00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be04:	4805      	ldr	r0, [pc, #20]	; (800be1c <BSP_SD_GetCardState+0x1c>)
 800be06:	f7fc fd7d 	bl	8008904 <HAL_SD_GetCardState>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	bf14      	ite	ne
 800be10:	2301      	movne	r3, #1
 800be12:	2300      	moveq	r3, #0
 800be14:	b2db      	uxtb	r3, r3
}
 800be16:	4618      	mov	r0, r3
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	2000a4a4 	.word	0x2000a4a4

0800be20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	4803      	ldr	r0, [pc, #12]	; (800be38 <BSP_SD_GetCardInfo+0x18>)
 800be2c:	f7fc fcc2 	bl	80087b4 <HAL_SD_GetCardInfo>
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	2000a4a4 	.word	0x2000a4a4

0800be3c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800be44:	f000 f818 	bl	800be78 <BSP_SD_AbortCallback>
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800be58:	f000 f9a8 	bl	800c1ac <BSP_SD_WriteCpltCallback>
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800be6c:	f000 f9aa 	bl	800c1c4 <BSP_SD_ReadCpltCallback>
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0

}
 800be7c:	bf00      	nop
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be8c:	2301      	movs	r3, #1
 800be8e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be90:	f000 f80c 	bl	800beac <BSP_PlatformIsDetected>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be9a:	2300      	movs	r3, #0
 800be9c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	b2db      	uxtb	r3, r3
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
	...

0800beac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800beb2:	2301      	movs	r3, #1
 800beb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800beb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800beba:	4806      	ldr	r0, [pc, #24]	; (800bed4 <BSP_PlatformIsDetected+0x28>)
 800bebc:	f7fa fba8 	bl	8006610 <HAL_GPIO_ReadPin>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bec6:	2300      	movs	r3, #0
 800bec8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800beca:	79fb      	ldrb	r3, [r7, #7]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	40020000 	.word	0x40020000

0800bed8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bee0:	f7f9 f90c 	bl	80050fc <HAL_GetTick>
 800bee4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bee6:	e006      	b.n	800bef6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bee8:	f7ff ff8a 	bl	800be00 <BSP_SD_GetCardState>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e009      	b.n	800bf0a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bef6:	f7f9 f901 	bl	80050fc <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d8f0      	bhi.n	800bee8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <SD_CheckStatus+0x38>)
 800bf20:	2201      	movs	r2, #1
 800bf22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf24:	f7ff ff6c 	bl	800be00 <BSP_SD_GetCardState>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d107      	bne.n	800bf3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf2e:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <SD_CheckStatus+0x38>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <SD_CheckStatus+0x38>)
 800bf3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf3e:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <SD_CheckStatus+0x38>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	b2db      	uxtb	r3, r3
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20000009 	.word	0x20000009

0800bf50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf5a:	f7ff fef7 	bl	800bd4c <BSP_SD_Init>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d107      	bne.n	800bf74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff ffd4 	bl	800bf14 <SD_CheckStatus>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461a      	mov	r2, r3
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <SD_initialize+0x34>)
 800bf72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf74:	4b03      	ldr	r3, [pc, #12]	; (800bf84 <SD_initialize+0x34>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	b2db      	uxtb	r3, r3
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20000009 	.word	0x20000009

0800bf88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff ffbd 	bl	800bf14 <SD_CheckStatus>
 800bf9a:	4603      	mov	r3, r0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	607a      	str	r2, [r7, #4]
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfb8:	f247 5030 	movw	r0, #30000	; 0x7530
 800bfbc:	f7ff ff8c 	bl	800bed8 <SD_CheckStatusWithTimeout>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da01      	bge.n	800bfca <SD_read+0x26>
  {
    return res;
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	e03b      	b.n	800c042 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	68b8      	ldr	r0, [r7, #8]
 800bfd0:	f7ff fee2 	bl	800bd98 <BSP_SD_ReadBlocks_DMA>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d132      	bne.n	800c040 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bfda:	4b1c      	ldr	r3, [pc, #112]	; (800c04c <SD_read+0xa8>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bfe0:	f7f9 f88c 	bl	80050fc <HAL_GetTick>
 800bfe4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bfe6:	bf00      	nop
 800bfe8:	4b18      	ldr	r3, [pc, #96]	; (800c04c <SD_read+0xa8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d108      	bne.n	800c002 <SD_read+0x5e>
 800bff0:	f7f9 f884 	bl	80050fc <HAL_GetTick>
 800bff4:	4602      	mov	r2, r0
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	f247 522f 	movw	r2, #29999	; 0x752f
 800bffe:	4293      	cmp	r3, r2
 800c000:	d9f2      	bls.n	800bfe8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c002:	4b12      	ldr	r3, [pc, #72]	; (800c04c <SD_read+0xa8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	75fb      	strb	r3, [r7, #23]
 800c00e:	e017      	b.n	800c040 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c010:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <SD_read+0xa8>)
 800c012:	2200      	movs	r2, #0
 800c014:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c016:	f7f9 f871 	bl	80050fc <HAL_GetTick>
 800c01a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c01c:	e007      	b.n	800c02e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c01e:	f7ff feef 	bl	800be00 <BSP_SD_GetCardState>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <SD_read+0x8a>
          {
            res = RES_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c02c:	e008      	b.n	800c040 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c02e:	f7f9 f865 	bl	80050fc <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	f247 522f 	movw	r2, #29999	; 0x752f
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d9ee      	bls.n	800c01e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c040:	7dfb      	ldrb	r3, [r7, #23]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20007b3c 	.word	0x20007b3c

0800c050 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60b9      	str	r1, [r7, #8]
 800c058:	607a      	str	r2, [r7, #4]
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c064:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <SD_write+0xa8>)
 800c066:	2200      	movs	r2, #0
 800c068:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c06a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c06e:	f7ff ff33 	bl	800bed8 <SD_CheckStatusWithTimeout>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	da01      	bge.n	800c07c <SD_write+0x2c>
  {
    return res;
 800c078:	7dfb      	ldrb	r3, [r7, #23]
 800c07a:	e038      	b.n	800c0ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f7ff fea3 	bl	800bdcc <BSP_SD_WriteBlocks_DMA>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d12f      	bne.n	800c0ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c08c:	f7f9 f836 	bl	80050fc <HAL_GetTick>
 800c090:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c092:	bf00      	nop
 800c094:	4b18      	ldr	r3, [pc, #96]	; (800c0f8 <SD_write+0xa8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d108      	bne.n	800c0ae <SD_write+0x5e>
 800c09c:	f7f9 f82e 	bl	80050fc <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d9f2      	bls.n	800c094 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <SD_write+0xa8>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	75fb      	strb	r3, [r7, #23]
 800c0ba:	e017      	b.n	800c0ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c0bc:	4b0e      	ldr	r3, [pc, #56]	; (800c0f8 <SD_write+0xa8>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c0c2:	f7f9 f81b 	bl	80050fc <HAL_GetTick>
 800c0c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0c8:	e007      	b.n	800c0da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0ca:	f7ff fe99 	bl	800be00 <BSP_SD_GetCardState>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d102      	bne.n	800c0da <SD_write+0x8a>
          {
            res = RES_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	75fb      	strb	r3, [r7, #23]
            break;
 800c0d8:	e008      	b.n	800c0ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0da:	f7f9 f80f 	bl	80050fc <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d9ee      	bls.n	800c0ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20007b38 	.word	0x20007b38

0800c0fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08c      	sub	sp, #48	; 0x30
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	603a      	str	r2, [r7, #0]
 800c106:	71fb      	strb	r3, [r7, #7]
 800c108:	460b      	mov	r3, r1
 800c10a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c112:	4b25      	ldr	r3, [pc, #148]	; (800c1a8 <SD_ioctl+0xac>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <SD_ioctl+0x28>
 800c120:	2303      	movs	r3, #3
 800c122:	e03c      	b.n	800c19e <SD_ioctl+0xa2>

  switch (cmd)
 800c124:	79bb      	ldrb	r3, [r7, #6]
 800c126:	2b03      	cmp	r3, #3
 800c128:	d834      	bhi.n	800c194 <SD_ioctl+0x98>
 800c12a:	a201      	add	r2, pc, #4	; (adr r2, 800c130 <SD_ioctl+0x34>)
 800c12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c130:	0800c141 	.word	0x0800c141
 800c134:	0800c149 	.word	0x0800c149
 800c138:	0800c161 	.word	0x0800c161
 800c13c:	0800c17b 	.word	0x0800c17b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c146:	e028      	b.n	800c19a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff fe67 	bl	800be20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c15e:	e01c      	b.n	800c19a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c160:	f107 030c 	add.w	r3, r7, #12
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff fe5b 	bl	800be20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c178:	e00f      	b.n	800c19a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c17a:	f107 030c 	add.w	r3, r7, #12
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fe4e 	bl	800be20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	0a5a      	lsrs	r2, r3, #9
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c192:	e002      	b.n	800c19a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c194:	2304      	movs	r3, #4
 800c196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3730      	adds	r7, #48	; 0x30
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20000009 	.word	0x20000009

0800c1ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c1b0:	4b03      	ldr	r3, [pc, #12]	; (800c1c0 <BSP_SD_WriteCpltCallback+0x14>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	20007b38 	.word	0x20007b38

0800c1c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c1c8:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <BSP_SD_ReadCpltCallback+0x14>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
}
 800c1ce:	bf00      	nop
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	20007b3c 	.word	0x20007b3c

0800c1dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	4a08      	ldr	r2, [pc, #32]	; (800c20c <disk_status+0x30>)
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	4905      	ldr	r1, [pc, #20]	; (800c20c <disk_status+0x30>)
 800c1f6:	440a      	add	r2, r1
 800c1f8:	7a12      	ldrb	r2, [r2, #8]
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	4798      	blx	r3
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c202:	7bfb      	ldrb	r3, [r7, #15]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	20007d68 	.word	0x20007d68

0800c210 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <disk_initialize+0x48>)
 800c222:	5cd3      	ldrb	r3, [r2, r3]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d111      	bne.n	800c24c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c228:	79fb      	ldrb	r3, [r7, #7]
 800c22a:	4a0b      	ldr	r2, [pc, #44]	; (800c258 <disk_initialize+0x48>)
 800c22c:	2101      	movs	r1, #1
 800c22e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	4a09      	ldr	r2, [pc, #36]	; (800c258 <disk_initialize+0x48>)
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	79fa      	ldrb	r2, [r7, #7]
 800c23e:	4906      	ldr	r1, [pc, #24]	; (800c258 <disk_initialize+0x48>)
 800c240:	440a      	add	r2, r1
 800c242:	7a12      	ldrb	r2, [r2, #8]
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
 800c248:	4603      	mov	r3, r0
 800c24a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20007d68 	.word	0x20007d68

0800c25c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
 800c266:	603b      	str	r3, [r7, #0]
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	4a0a      	ldr	r2, [pc, #40]	; (800c298 <disk_read+0x3c>)
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	689c      	ldr	r4, [r3, #8]
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <disk_read+0x3c>)
 800c27c:	4413      	add	r3, r2
 800c27e:	7a18      	ldrb	r0, [r3, #8]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	47a0      	blx	r4
 800c288:	4603      	mov	r3, r0
 800c28a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	371c      	adds	r7, #28
 800c292:	46bd      	mov	sp, r7
 800c294:	bd90      	pop	{r4, r7, pc}
 800c296:	bf00      	nop
 800c298:	20007d68 	.word	0x20007d68

0800c29c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c29c:	b590      	push	{r4, r7, lr}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <disk_write+0x3c>)
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	68dc      	ldr	r4, [r3, #12]
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	4a07      	ldr	r2, [pc, #28]	; (800c2d8 <disk_write+0x3c>)
 800c2bc:	4413      	add	r3, r2
 800c2be:	7a18      	ldrb	r0, [r3, #8]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	47a0      	blx	r4
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd90      	pop	{r4, r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20007d68 	.word	0x20007d68

0800c2dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	603a      	str	r2, [r7, #0]
 800c2e6:	71fb      	strb	r3, [r7, #7]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c2ec:	79fb      	ldrb	r3, [r7, #7]
 800c2ee:	4a09      	ldr	r2, [pc, #36]	; (800c314 <disk_ioctl+0x38>)
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	79fa      	ldrb	r2, [r7, #7]
 800c2fa:	4906      	ldr	r1, [pc, #24]	; (800c314 <disk_ioctl+0x38>)
 800c2fc:	440a      	add	r2, r1
 800c2fe:	7a10      	ldrb	r0, [r2, #8]
 800c300:	79b9      	ldrb	r1, [r7, #6]
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	4798      	blx	r3
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]
  return res;
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20007d68 	.word	0x20007d68

0800c318 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3301      	adds	r3, #1
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c328:	89fb      	ldrh	r3, [r7, #14]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	b21a      	sxth	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	b21b      	sxth	r3, r3
 800c334:	4313      	orrs	r3, r2
 800c336:	b21b      	sxth	r3, r3
 800c338:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c33a:	89fb      	ldrh	r3, [r7, #14]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3303      	adds	r3, #3
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	3202      	adds	r2, #2
 800c360:	7812      	ldrb	r2, [r2, #0]
 800c362:	4313      	orrs	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	021b      	lsls	r3, r3, #8
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	3201      	adds	r2, #1
 800c36e:	7812      	ldrb	r2, [r2, #0]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	021b      	lsls	r3, r3, #8
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7812      	ldrb	r2, [r2, #0]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c380:	68fb      	ldr	r3, [r7, #12]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	460b      	mov	r3, r1
 800c398:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	887a      	ldrh	r2, [r7, #2]
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	887b      	ldrh	r3, [r7, #2]
 800c3a8:	0a1b      	lsrs	r3, r3, #8
 800c3aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	607a      	str	r2, [r7, #4]
 800c3b2:	887a      	ldrh	r2, [r7, #2]
 800c3b4:	b2d2      	uxtb	r2, r2
 800c3b6:	701a      	strb	r2, [r3, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	1c5a      	adds	r2, r3, #1
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	0a1b      	lsrs	r3, r3, #8
 800c3de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	607a      	str	r2, [r7, #4]
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	b2d2      	uxtb	r2, r2
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	0a1b      	lsrs	r3, r3, #8
 800c3f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	0a1b      	lsrs	r3, r3, #8
 800c402:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	607a      	str	r2, [r7, #4]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	b2d2      	uxtb	r2, r2
 800c40e:	701a      	strb	r2, [r3, #0]
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	1c53      	adds	r3, r2, #1
 800c43a:	613b      	str	r3, [r7, #16]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	1c59      	adds	r1, r3, #1
 800c440:	6179      	str	r1, [r7, #20]
 800c442:	7812      	ldrb	r2, [r2, #0]
 800c444:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3b01      	subs	r3, #1
 800c44a:	607b      	str	r3, [r7, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1f1      	bne.n	800c436 <mem_cpy+0x1a>
	}
}
 800c452:	bf00      	nop
 800c454:	371c      	adds	r7, #28
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c45e:	b480      	push	{r7}
 800c460:	b087      	sub	sp, #28
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	1c5a      	adds	r2, r3, #1
 800c472:	617a      	str	r2, [r7, #20]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f3      	bne.n	800c46e <mem_set+0x10>
}
 800c486:	bf00      	nop
 800c488:	371c      	adds	r7, #28
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c492:	b480      	push	{r7}
 800c494:	b089      	sub	sp, #36	; 0x24
 800c496:	af00      	add	r7, sp, #0
 800c498:	60f8      	str	r0, [r7, #12]
 800c49a:	60b9      	str	r1, [r7, #8]
 800c49c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	61fa      	str	r2, [r7, #28]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	61ba      	str	r2, [r7, #24]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	1acb      	subs	r3, r1, r3
 800c4be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	607b      	str	r3, [r7, #4]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <mem_cmp+0x40>
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0eb      	beq.n	800c4aa <mem_cmp+0x18>

	return r;
 800c4d2:	697b      	ldr	r3, [r7, #20]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3724      	adds	r7, #36	; 0x24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4ea:	e002      	b.n	800c4f2 <chk_chr+0x12>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	607b      	str	r3, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <chk_chr+0x26>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	4293      	cmp	r3, r2
 800c504:	d1f2      	bne.n	800c4ec <chk_chr+0xc>
	return *str;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	781b      	ldrb	r3, [r3, #0]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c522:	2300      	movs	r3, #0
 800c524:	60bb      	str	r3, [r7, #8]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	60fb      	str	r3, [r7, #12]
 800c52a:	e029      	b.n	800c580 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c52c:	4a27      	ldr	r2, [pc, #156]	; (800c5cc <chk_lock+0xb4>)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	011b      	lsls	r3, r3, #4
 800c532:	4413      	add	r3, r2
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d01d      	beq.n	800c576 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c53a:	4a24      	ldr	r2, [pc, #144]	; (800c5cc <chk_lock+0xb4>)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	011b      	lsls	r3, r3, #4
 800c540:	4413      	add	r3, r2
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d116      	bne.n	800c57a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c54c:	4a1f      	ldr	r2, [pc, #124]	; (800c5cc <chk_lock+0xb4>)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	4413      	add	r3, r2
 800c554:	3304      	adds	r3, #4
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d10c      	bne.n	800c57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c560:	4a1a      	ldr	r2, [pc, #104]	; (800c5cc <chk_lock+0xb4>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	4413      	add	r3, r2
 800c568:	3308      	adds	r3, #8
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c570:	429a      	cmp	r2, r3
 800c572:	d102      	bne.n	800c57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c574:	e007      	b.n	800c586 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c576:	2301      	movs	r3, #1
 800c578:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d9d2      	bls.n	800c52c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d109      	bne.n	800c5a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <chk_lock+0x80>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d101      	bne.n	800c59c <chk_lock+0x84>
 800c598:	2300      	movs	r3, #0
 800c59a:	e010      	b.n	800c5be <chk_lock+0xa6>
 800c59c:	2312      	movs	r3, #18
 800c59e:	e00e      	b.n	800c5be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d108      	bne.n	800c5b8 <chk_lock+0xa0>
 800c5a6:	4a09      	ldr	r2, [pc, #36]	; (800c5cc <chk_lock+0xb4>)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	011b      	lsls	r3, r3, #4
 800c5ac:	4413      	add	r3, r2
 800c5ae:	330c      	adds	r3, #12
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b6:	d101      	bne.n	800c5bc <chk_lock+0xa4>
 800c5b8:	2310      	movs	r3, #16
 800c5ba:	e000      	b.n	800c5be <chk_lock+0xa6>
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	20007b48 	.word	0x20007b48

0800c5d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	607b      	str	r3, [r7, #4]
 800c5da:	e002      	b.n	800c5e2 <enq_lock+0x12>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	607b      	str	r3, [r7, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d806      	bhi.n	800c5f6 <enq_lock+0x26>
 800c5e8:	4a09      	ldr	r2, [pc, #36]	; (800c610 <enq_lock+0x40>)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	011b      	lsls	r3, r3, #4
 800c5ee:	4413      	add	r3, r2
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1f2      	bne.n	800c5dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	bf14      	ite	ne
 800c5fc:	2301      	movne	r3, #1
 800c5fe:	2300      	moveq	r3, #0
 800c600:	b2db      	uxtb	r3, r3
}
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20007b48 	.word	0x20007b48

0800c614 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c61e:	2300      	movs	r3, #0
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e01f      	b.n	800c664 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c624:	4a41      	ldr	r2, [pc, #260]	; (800c72c <inc_lock+0x118>)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	011b      	lsls	r3, r3, #4
 800c62a:	4413      	add	r3, r2
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	429a      	cmp	r2, r3
 800c634:	d113      	bne.n	800c65e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c636:	4a3d      	ldr	r2, [pc, #244]	; (800c72c <inc_lock+0x118>)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	011b      	lsls	r3, r3, #4
 800c63c:	4413      	add	r3, r2
 800c63e:	3304      	adds	r3, #4
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c646:	429a      	cmp	r2, r3
 800c648:	d109      	bne.n	800c65e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c64a:	4a38      	ldr	r2, [pc, #224]	; (800c72c <inc_lock+0x118>)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	4413      	add	r3, r2
 800c652:	3308      	adds	r3, #8
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d006      	beq.n	800c66c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3301      	adds	r3, #1
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d9dc      	bls.n	800c624 <inc_lock+0x10>
 800c66a:	e000      	b.n	800c66e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c66c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b02      	cmp	r3, #2
 800c672:	d132      	bne.n	800c6da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
 800c678:	e002      	b.n	800c680 <inc_lock+0x6c>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3301      	adds	r3, #1
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d806      	bhi.n	800c694 <inc_lock+0x80>
 800c686:	4a29      	ldr	r2, [pc, #164]	; (800c72c <inc_lock+0x118>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	4413      	add	r3, r2
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f2      	bne.n	800c67a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d101      	bne.n	800c69e <inc_lock+0x8a>
 800c69a:	2300      	movs	r3, #0
 800c69c:	e040      	b.n	800c720 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	4922      	ldr	r1, [pc, #136]	; (800c72c <inc_lock+0x118>)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	440b      	add	r3, r1
 800c6aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	491e      	ldr	r1, [pc, #120]	; (800c72c <inc_lock+0x118>)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	011b      	lsls	r3, r3, #4
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3304      	adds	r3, #4
 800c6ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	695a      	ldr	r2, [r3, #20]
 800c6c0:	491a      	ldr	r1, [pc, #104]	; (800c72c <inc_lock+0x118>)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	011b      	lsls	r3, r3, #4
 800c6c6:	440b      	add	r3, r1
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6cc:	4a17      	ldr	r2, [pc, #92]	; (800c72c <inc_lock+0x118>)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	011b      	lsls	r3, r3, #4
 800c6d2:	4413      	add	r3, r2
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <inc_lock+0xe0>
 800c6e0:	4a12      	ldr	r2, [pc, #72]	; (800c72c <inc_lock+0x118>)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	011b      	lsls	r3, r3, #4
 800c6e6:	4413      	add	r3, r2
 800c6e8:	330c      	adds	r3, #12
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <inc_lock+0xe0>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	e015      	b.n	800c720 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d108      	bne.n	800c70c <inc_lock+0xf8>
 800c6fa:	4a0c      	ldr	r2, [pc, #48]	; (800c72c <inc_lock+0x118>)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	011b      	lsls	r3, r3, #4
 800c700:	4413      	add	r3, r2
 800c702:	330c      	adds	r3, #12
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	3301      	adds	r3, #1
 800c708:	b29a      	uxth	r2, r3
 800c70a:	e001      	b.n	800c710 <inc_lock+0xfc>
 800c70c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c710:	4906      	ldr	r1, [pc, #24]	; (800c72c <inc_lock+0x118>)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	011b      	lsls	r3, r3, #4
 800c716:	440b      	add	r3, r1
 800c718:	330c      	adds	r3, #12
 800c71a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3301      	adds	r3, #1
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20007b48 	.word	0x20007b48

0800c730 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d825      	bhi.n	800c790 <dec_lock+0x60>
		n = Files[i].ctr;
 800c744:	4a17      	ldr	r2, [pc, #92]	; (800c7a4 <dec_lock+0x74>)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	4413      	add	r3, r2
 800c74c:	330c      	adds	r3, #12
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c752:	89fb      	ldrh	r3, [r7, #14]
 800c754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c758:	d101      	bne.n	800c75e <dec_lock+0x2e>
 800c75a:	2300      	movs	r3, #0
 800c75c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c75e:	89fb      	ldrh	r3, [r7, #14]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <dec_lock+0x3a>
 800c764:	89fb      	ldrh	r3, [r7, #14]
 800c766:	3b01      	subs	r3, #1
 800c768:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c76a:	4a0e      	ldr	r2, [pc, #56]	; (800c7a4 <dec_lock+0x74>)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	4413      	add	r3, r2
 800c772:	330c      	adds	r3, #12
 800c774:	89fa      	ldrh	r2, [r7, #14]
 800c776:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d105      	bne.n	800c78a <dec_lock+0x5a>
 800c77e:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <dec_lock+0x74>)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	011b      	lsls	r3, r3, #4
 800c784:	4413      	add	r3, r2
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	737b      	strb	r3, [r7, #13]
 800c78e:	e001      	b.n	800c794 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c790:	2302      	movs	r3, #2
 800c792:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c794:	7b7b      	ldrb	r3, [r7, #13]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20007b48 	.word	0x20007b48

0800c7a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	e010      	b.n	800c7d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7b6:	4a0d      	ldr	r2, [pc, #52]	; (800c7ec <clear_lock+0x44>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	4413      	add	r3, r2
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d105      	bne.n	800c7d2 <clear_lock+0x2a>
 800c7c6:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <clear_lock+0x44>)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	4413      	add	r3, r2
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d9eb      	bls.n	800c7b6 <clear_lock+0xe>
	}
}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20007b48 	.word	0x20007b48

0800c7f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	78db      	ldrb	r3, [r3, #3]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d034      	beq.n	800c86e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c808:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7858      	ldrb	r0, [r3, #1]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c814:	2301      	movs	r3, #1
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	f7ff fd40 	bl	800c29c <disk_write>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d002      	beq.n	800c828 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c822:	2301      	movs	r3, #1
 800c824:	73fb      	strb	r3, [r7, #15]
 800c826:	e022      	b.n	800c86e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	1ad2      	subs	r2, r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d217      	bcs.n	800c86e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	789b      	ldrb	r3, [r3, #2]
 800c842:	613b      	str	r3, [r7, #16]
 800c844:	e010      	b.n	800c868 <sync_window+0x78>
					wsect += fs->fsize;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7858      	ldrb	r0, [r3, #1]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c85a:	2301      	movs	r3, #1
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	f7ff fd1d 	bl	800c29c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	3b01      	subs	r3, #1
 800c866:	613b      	str	r3, [r7, #16]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d8eb      	bhi.n	800c846 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	683a      	ldr	r2, [r7, #0]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d01b      	beq.n	800c8c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff ffad 	bl	800c7f0 <sync_window>
 800c896:	4603      	mov	r3, r0
 800c898:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c89a:	7bfb      	ldrb	r3, [r7, #15]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d113      	bne.n	800c8c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7858      	ldrb	r0, [r3, #1]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	f7ff fcd5 	bl	800c25c <disk_read>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d004      	beq.n	800c8c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff ff87 	bl	800c7f0 <sync_window>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d159      	bne.n	800c9a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d149      	bne.n	800c988 <sync_fs+0xb4>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	791b      	ldrb	r3, [r3, #4]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d145      	bne.n	800c988 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	899b      	ldrh	r3, [r3, #12]
 800c906:	461a      	mov	r2, r3
 800c908:	2100      	movs	r1, #0
 800c90a:	f7ff fda8 	bl	800c45e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	333c      	adds	r3, #60	; 0x3c
 800c912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c916:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fd37 	bl	800c38e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	333c      	adds	r3, #60	; 0x3c
 800c924:	4921      	ldr	r1, [pc, #132]	; (800c9ac <sync_fs+0xd8>)
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff fd4c 	bl	800c3c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	333c      	adds	r3, #60	; 0x3c
 800c930:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c934:	491e      	ldr	r1, [pc, #120]	; (800c9b0 <sync_fs+0xdc>)
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fd44 	bl	800c3c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	333c      	adds	r3, #60	; 0x3c
 800c940:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	4619      	mov	r1, r3
 800c94a:	4610      	mov	r0, r2
 800c94c:	f7ff fd3a 	bl	800c3c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	333c      	adds	r3, #60	; 0x3c
 800c954:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7ff fd30 	bl	800c3c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7858      	ldrb	r0, [r3, #1]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c97c:	2301      	movs	r3, #1
 800c97e:	f7ff fc8d 	bl	800c29c <disk_write>
			fs->fsi_flag = 0;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	785b      	ldrb	r3, [r3, #1]
 800c98c:	2200      	movs	r2, #0
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fca3 	bl	800c2dc <disk_ioctl>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <sync_fs+0xcc>
 800c99c:	2301      	movs	r3, #1
 800c99e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	41615252 	.word	0x41615252
 800c9b0:	61417272 	.word	0x61417272

0800c9b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	3b02      	subs	r3, #2
 800c9c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	3b02      	subs	r3, #2
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d301      	bcc.n	800c9d4 <clust2sect+0x20>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e008      	b.n	800c9e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	895b      	ldrh	r3, [r3, #10]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	fb03 f202 	mul.w	r2, r3, r2
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e4:	4413      	add	r3, r2
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b086      	sub	sp, #24
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d904      	bls.n	800ca12 <get_fat+0x20>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	6a1b      	ldr	r3, [r3, #32]
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d302      	bcc.n	800ca18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca12:	2301      	movs	r3, #1
 800ca14:	617b      	str	r3, [r7, #20]
 800ca16:	e0b7      	b.n	800cb88 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca18:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d05a      	beq.n	800cadc <get_fat+0xea>
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d07d      	beq.n	800cb26 <get_fat+0x134>
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	f040 80a2 	bne.w	800cb74 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	085b      	lsrs	r3, r3, #1
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	899b      	ldrh	r3, [r3, #12]
 800ca46:	4619      	mov	r1, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca4e:	4413      	add	r3, r2
 800ca50:	4619      	mov	r1, r3
 800ca52:	6938      	ldr	r0, [r7, #16]
 800ca54:	f7ff ff10 	bl	800c878 <move_window>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f040 808d 	bne.w	800cb7a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	60fa      	str	r2, [r7, #12]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	8992      	ldrh	r2, [r2, #12]
 800ca6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca6e:	fb02 f201 	mul.w	r2, r2, r1
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	4413      	add	r3, r2
 800ca78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	899b      	ldrh	r3, [r3, #12]
 800ca86:	4619      	mov	r1, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca8e:	4413      	add	r3, r2
 800ca90:	4619      	mov	r1, r3
 800ca92:	6938      	ldr	r0, [r7, #16]
 800ca94:	f7ff fef0 	bl	800c878 <move_window>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d16f      	bne.n	800cb7e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	899b      	ldrh	r3, [r3, #12]
 800caa2:	461a      	mov	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800caaa:	fb02 f201 	mul.w	r2, r2, r1
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	461a      	mov	r2, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <get_fat+0xe0>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	091b      	lsrs	r3, r3, #4
 800cad0:	e002      	b.n	800cad8 <get_fat+0xe6>
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cad8:	617b      	str	r3, [r7, #20]
			break;
 800cada:	e055      	b.n	800cb88 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	899b      	ldrh	r3, [r3, #12]
 800cae4:	085b      	lsrs	r3, r3, #1
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	4619      	mov	r1, r3
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	fbb3 f3f1 	udiv	r3, r3, r1
 800caf0:	4413      	add	r3, r2
 800caf2:	4619      	mov	r1, r3
 800caf4:	6938      	ldr	r0, [r7, #16]
 800caf6:	f7ff febf 	bl	800c878 <move_window>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d140      	bne.n	800cb82 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	8992      	ldrh	r2, [r2, #12]
 800cb0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb12:	fb02 f200 	mul.w	r2, r2, r0
 800cb16:	1a9b      	subs	r3, r3, r2
 800cb18:	440b      	add	r3, r1
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fbfc 	bl	800c318 <ld_word>
 800cb20:	4603      	mov	r3, r0
 800cb22:	617b      	str	r3, [r7, #20]
			break;
 800cb24:	e030      	b.n	800cb88 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	899b      	ldrh	r3, [r3, #12]
 800cb2e:	089b      	lsrs	r3, r3, #2
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	4619      	mov	r1, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6938      	ldr	r0, [r7, #16]
 800cb40:	f7ff fe9a 	bl	800c878 <move_window>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d11d      	bne.n	800cb86 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	8992      	ldrh	r2, [r2, #12]
 800cb58:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb5c:	fb02 f200 	mul.w	r2, r2, r0
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	440b      	add	r3, r1
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7ff fbef 	bl	800c348 <ld_dword>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb70:	617b      	str	r3, [r7, #20]
			break;
 800cb72:	e009      	b.n	800cb88 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb74:	2301      	movs	r3, #1
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	e006      	b.n	800cb88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb7a:	bf00      	nop
 800cb7c:	e004      	b.n	800cb88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb7e:	bf00      	nop
 800cb80:	e002      	b.n	800cb88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb82:	bf00      	nop
 800cb84:	e000      	b.n	800cb88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb86:	bf00      	nop
		}
	}

	return val;
 800cb88:	697b      	ldr	r3, [r7, #20]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb92:	b590      	push	{r4, r7, lr}
 800cb94:	b089      	sub	sp, #36	; 0x24
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb9e:	2302      	movs	r3, #2
 800cba0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	f240 8106 	bls.w	800cdb6 <put_fat+0x224>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	f080 8100 	bcs.w	800cdb6 <put_fat+0x224>
		switch (fs->fs_type) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	f000 8088 	beq.w	800ccd0 <put_fat+0x13e>
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	f000 80b0 	beq.w	800cd26 <put_fat+0x194>
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	f040 80f5 	bne.w	800cdb6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	61bb      	str	r3, [r7, #24]
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	899b      	ldrh	r3, [r3, #12]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbea:	4413      	add	r3, r2
 800cbec:	4619      	mov	r1, r3
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f7ff fe42 	bl	800c878 <move_window>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbf8:	7ffb      	ldrb	r3, [r7, #31]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f040 80d4 	bne.w	800cda8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	61ba      	str	r2, [r7, #24]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	8992      	ldrh	r2, [r2, #12]
 800cc10:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc14:	fb02 f200 	mul.w	r2, r2, r0
 800cc18:	1a9b      	subs	r3, r3, r2
 800cc1a:	440b      	add	r3, r1
 800cc1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f003 0301 	and.w	r3, r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00d      	beq.n	800cc44 <put_fat+0xb2>
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	f003 030f 	and.w	r3, r3, #15
 800cc32:	b25a      	sxtb	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	011b      	lsls	r3, r3, #4
 800cc3a:	b25b      	sxtb	r3, r3
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	b25b      	sxtb	r3, r3
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	e001      	b.n	800cc48 <put_fat+0xb6>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	899b      	ldrh	r3, [r3, #12]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc62:	4413      	add	r3, r2
 800cc64:	4619      	mov	r1, r3
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff fe06 	bl	800c878 <move_window>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f040 809a 	bne.w	800cdac <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	899b      	ldrh	r3, [r3, #12]
 800cc82:	461a      	mov	r2, r3
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc8a:	fb02 f200 	mul.w	r2, r2, r0
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	440b      	add	r3, r1
 800cc92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <put_fat+0x114>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	091b      	lsrs	r3, r3, #4
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	e00e      	b.n	800ccc4 <put_fat+0x132>
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	f023 030f 	bic.w	r3, r3, #15
 800ccb0:	b25a      	sxtb	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	0a1b      	lsrs	r3, r3, #8
 800ccb6:	b25b      	sxtb	r3, r3
 800ccb8:	f003 030f 	and.w	r3, r3, #15
 800ccbc:	b25b      	sxtb	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2201      	movs	r2, #1
 800cccc:	70da      	strb	r2, [r3, #3]
			break;
 800ccce:	e072      	b.n	800cdb6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	899b      	ldrh	r3, [r3, #12]
 800ccd8:	085b      	lsrs	r3, r3, #1
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4619      	mov	r1, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cce4:	4413      	add	r3, r2
 800cce6:	4619      	mov	r1, r3
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7ff fdc5 	bl	800c878 <move_window>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccf2:	7ffb      	ldrb	r3, [r7, #31]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d15b      	bne.n	800cdb0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	8992      	ldrh	r2, [r2, #12]
 800cd06:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd0a:	fb02 f200 	mul.w	r2, r2, r0
 800cd0e:	1a9b      	subs	r3, r3, r2
 800cd10:	440b      	add	r3, r1
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	b292      	uxth	r2, r2
 800cd16:	4611      	mov	r1, r2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fb38 	bl	800c38e <st_word>
			fs->wflag = 1;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	70da      	strb	r2, [r3, #3]
			break;
 800cd24:	e047      	b.n	800cdb6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	089b      	lsrs	r3, r3, #2
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	4619      	mov	r1, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fd9a 	bl	800c878 <move_window>
 800cd44:	4603      	mov	r3, r0
 800cd46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd48:	7ffb      	ldrb	r3, [r7, #31]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d132      	bne.n	800cdb4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	8992      	ldrh	r2, [r2, #12]
 800cd62:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd66:	fb02 f200 	mul.w	r2, r2, r0
 800cd6a:	1a9b      	subs	r3, r3, r2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff faea 	bl	800c348 <ld_dword>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd7a:	4323      	orrs	r3, r4
 800cd7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	8992      	ldrh	r2, [r2, #12]
 800cd8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd90:	fb02 f200 	mul.w	r2, r2, r0
 800cd94:	1a9b      	subs	r3, r3, r2
 800cd96:	440b      	add	r3, r1
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff fb12 	bl	800c3c4 <st_dword>
			fs->wflag = 1;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2201      	movs	r2, #1
 800cda4:	70da      	strb	r2, [r3, #3]
			break;
 800cda6:	e006      	b.n	800cdb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800cda8:	bf00      	nop
 800cdaa:	e004      	b.n	800cdb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800cdac:	bf00      	nop
 800cdae:	e002      	b.n	800cdb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800cdb0:	bf00      	nop
 800cdb2:	e000      	b.n	800cdb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800cdb4:	bf00      	nop
		}
	}
	return res;
 800cdb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3724      	adds	r7, #36	; 0x24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd90      	pop	{r4, r7, pc}

0800cdc0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d904      	bls.n	800cde6 <remove_chain+0x26>
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	6a1b      	ldr	r3, [r3, #32]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d301      	bcc.n	800cdea <remove_chain+0x2a>
 800cde6:	2302      	movs	r3, #2
 800cde8:	e04b      	b.n	800ce82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00c      	beq.n	800ce0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	69b8      	ldr	r0, [r7, #24]
 800cdf8:	f7ff fecb 	bl	800cb92 <put_fat>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ce00:	7ffb      	ldrb	r3, [r7, #31]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <remove_chain+0x4a>
 800ce06:	7ffb      	ldrb	r3, [r7, #31]
 800ce08:	e03b      	b.n	800ce82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fdf0 	bl	800c9f2 <get_fat>
 800ce12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d031      	beq.n	800ce7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d101      	bne.n	800ce24 <remove_chain+0x64>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e02e      	b.n	800ce82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d101      	bne.n	800ce30 <remove_chain+0x70>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e028      	b.n	800ce82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ce30:	2200      	movs	r2, #0
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	69b8      	ldr	r0, [r7, #24]
 800ce36:	f7ff feac 	bl	800cb92 <put_fat>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ce3e:	7ffb      	ldrb	r3, [r7, #31]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <remove_chain+0x88>
 800ce44:	7ffb      	ldrb	r3, [r7, #31]
 800ce46:	e01c      	b.n	800ce82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	3b02      	subs	r3, #2
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d20b      	bcs.n	800ce6e <remove_chain+0xae>
			fs->free_clst++;
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	791b      	ldrb	r3, [r3, #4]
 800ce64:	f043 0301 	orr.w	r3, r3, #1
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3c6      	bcc.n	800ce0a <remove_chain+0x4a>
 800ce7c:	e000      	b.n	800ce80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3720      	adds	r7, #32
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b088      	sub	sp, #32
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10d      	bne.n	800cebc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <create_chain+0x2c>
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	69ba      	ldr	r2, [r7, #24]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d31b      	bcc.n	800ceee <create_chain+0x64>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	61bb      	str	r3, [r7, #24]
 800ceba:	e018      	b.n	800ceee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff fd97 	bl	800c9f2 <get_fat>
 800cec4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d801      	bhi.n	800ced0 <create_chain+0x46>
 800cecc:	2301      	movs	r3, #1
 800cece:	e070      	b.n	800cfb2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced6:	d101      	bne.n	800cedc <create_chain+0x52>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	e06a      	b.n	800cfb2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6a1b      	ldr	r3, [r3, #32]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d201      	bcs.n	800ceea <create_chain+0x60>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	e063      	b.n	800cfb2 <create_chain+0x128>
		scl = clst;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	3301      	adds	r3, #1
 800cef6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d307      	bcc.n	800cf12 <create_chain+0x88>
				ncl = 2;
 800cf02:	2302      	movs	r3, #2
 800cf04:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d901      	bls.n	800cf12 <create_chain+0x88>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e04f      	b.n	800cfb2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cf12:	69f9      	ldr	r1, [r7, #28]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff fd6c 	bl	800c9f2 <get_fat>
 800cf1a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00e      	beq.n	800cf40 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d003      	beq.n	800cf30 <create_chain+0xa6>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2e:	d101      	bne.n	800cf34 <create_chain+0xaa>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	e03e      	b.n	800cfb2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cf34:	69fa      	ldr	r2, [r7, #28]
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d1da      	bne.n	800cef2 <create_chain+0x68>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e038      	b.n	800cfb2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cf40:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	69f9      	ldr	r1, [r7, #28]
 800cf48:	6938      	ldr	r0, [r7, #16]
 800cf4a:	f7ff fe22 	bl	800cb92 <put_fat>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <create_chain+0xe2>
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d006      	beq.n	800cf6c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cf5e:	69fa      	ldr	r2, [r7, #28]
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6938      	ldr	r0, [r7, #16]
 800cf64:	f7ff fe15 	bl	800cb92 <put_fat>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d116      	bne.n	800cfa0 <create_chain+0x116>
		fs->last_clst = ncl;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	69fa      	ldr	r2, [r7, #28]
 800cf76:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	699a      	ldr	r2, [r3, #24]
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	3b02      	subs	r3, #2
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d804      	bhi.n	800cf90 <create_chain+0x106>
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	1e5a      	subs	r2, r3, #1
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	791b      	ldrb	r3, [r3, #4]
 800cf94:	f043 0301 	orr.w	r3, r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	711a      	strb	r2, [r3, #4]
 800cf9e:	e007      	b.n	800cfb0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cfa0:	7dfb      	ldrb	r3, [r7, #23]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d102      	bne.n	800cfac <create_chain+0x122>
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfaa:	e000      	b.n	800cfae <create_chain+0x124>
 800cfac:	2301      	movs	r3, #1
 800cfae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cfb0:	69fb      	ldr	r3, [r7, #28]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3720      	adds	r7, #32
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b087      	sub	sp, #28
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfce:	3304      	adds	r3, #4
 800cfd0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	899b      	ldrh	r3, [r3, #12]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	8952      	ldrh	r2, [r2, #10]
 800cfe2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfe6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	1d1a      	adds	r2, r3, #4
 800cfec:	613a      	str	r2, [r7, #16]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d101      	bne.n	800cffc <clmt_clust+0x42>
 800cff8:	2300      	movs	r3, #0
 800cffa:	e010      	b.n	800d01e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	429a      	cmp	r2, r3
 800d002:	d307      	bcc.n	800d014 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	617b      	str	r3, [r7, #20]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	3304      	adds	r3, #4
 800d010:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d012:	e7e9      	b.n	800cfe8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d014:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	4413      	add	r3, r2
}
 800d01e:	4618      	mov	r0, r3
 800d020:	371c      	adds	r7, #28
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b086      	sub	sp, #24
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d040:	d204      	bcs.n	800d04c <dir_sdi+0x22>
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	f003 031f 	and.w	r3, r3, #31
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d04c:	2302      	movs	r3, #2
 800d04e:	e071      	b.n	800d134 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <dir_sdi+0x46>
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d902      	bls.n	800d070 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10c      	bne.n	800d090 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	095b      	lsrs	r3, r3, #5
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	8912      	ldrh	r2, [r2, #8]
 800d07e:	4293      	cmp	r3, r2
 800d080:	d301      	bcc.n	800d086 <dir_sdi+0x5c>
 800d082:	2302      	movs	r3, #2
 800d084:	e056      	b.n	800d134 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	61da      	str	r2, [r3, #28]
 800d08e:	e02d      	b.n	800d0ec <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	895b      	ldrh	r3, [r3, #10]
 800d094:	461a      	mov	r2, r3
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	899b      	ldrh	r3, [r3, #12]
 800d09a:	fb03 f302 	mul.w	r3, r3, r2
 800d09e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d0a0:	e019      	b.n	800d0d6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6979      	ldr	r1, [r7, #20]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fca3 	bl	800c9f2 <get_fat>
 800d0ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d101      	bne.n	800d0ba <dir_sdi+0x90>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e03c      	b.n	800d134 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d904      	bls.n	800d0ca <dir_sdi+0xa0>
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	6a1b      	ldr	r3, [r3, #32]
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d301      	bcc.n	800d0ce <dir_sdi+0xa4>
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	e032      	b.n	800d134 <dir_sdi+0x10a>
			ofs -= csz;
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d2e1      	bcs.n	800d0a2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d0de:	6979      	ldr	r1, [r7, #20]
 800d0e0:	6938      	ldr	r0, [r7, #16]
 800d0e2:	f7ff fc67 	bl	800c9b4 <clust2sect>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <dir_sdi+0xd4>
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	e01a      	b.n	800d134 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	69da      	ldr	r2, [r3, #28]
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	899b      	ldrh	r3, [r3, #12]
 800d106:	4619      	mov	r1, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d10e:	441a      	add	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	899b      	ldrh	r3, [r3, #12]
 800d11e:	461a      	mov	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	fbb3 f0f2 	udiv	r0, r3, r2
 800d126:	fb02 f200 	mul.w	r2, r2, r0
 800d12a:	1a9b      	subs	r3, r3, r2
 800d12c:	18ca      	adds	r2, r1, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	3320      	adds	r3, #32
 800d152:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	69db      	ldr	r3, [r3, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <dir_next+0x28>
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d162:	d301      	bcc.n	800d168 <dir_next+0x2c>
 800d164:	2304      	movs	r3, #4
 800d166:	e0bb      	b.n	800d2e0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	899b      	ldrh	r3, [r3, #12]
 800d16c:	461a      	mov	r2, r3
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	fbb3 f1f2 	udiv	r1, r3, r2
 800d174:	fb02 f201 	mul.w	r2, r2, r1
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f040 809d 	bne.w	800d2ba <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	69db      	ldr	r3, [r3, #28]
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10b      	bne.n	800d1aa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	095b      	lsrs	r3, r3, #5
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	8912      	ldrh	r2, [r2, #8]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	f0c0 808d 	bcc.w	800d2ba <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	61da      	str	r2, [r3, #28]
 800d1a6:	2304      	movs	r3, #4
 800d1a8:	e09a      	b.n	800d2e0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	899b      	ldrh	r3, [r3, #12]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	8952      	ldrh	r2, [r2, #10]
 800d1ba:	3a01      	subs	r2, #1
 800d1bc:	4013      	ands	r3, r2
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d17b      	bne.n	800d2ba <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	f7ff fc11 	bl	800c9f2 <get_fat>
 800d1d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d801      	bhi.n	800d1dc <dir_next+0xa0>
 800d1d8:	2302      	movs	r3, #2
 800d1da:	e081      	b.n	800d2e0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e2:	d101      	bne.n	800d1e8 <dir_next+0xac>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e07b      	b.n	800d2e0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6a1b      	ldr	r3, [r3, #32]
 800d1ec:	697a      	ldr	r2, [r7, #20]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d359      	bcc.n	800d2a6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d104      	bne.n	800d202 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	61da      	str	r2, [r3, #28]
 800d1fe:	2304      	movs	r3, #4
 800d200:	e06e      	b.n	800d2e0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7ff fe3d 	bl	800ce8a <create_chain>
 800d210:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d101      	bne.n	800d21c <dir_next+0xe0>
 800d218:	2307      	movs	r3, #7
 800d21a:	e061      	b.n	800d2e0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d101      	bne.n	800d226 <dir_next+0xea>
 800d222:	2302      	movs	r3, #2
 800d224:	e05c      	b.n	800d2e0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22c:	d101      	bne.n	800d232 <dir_next+0xf6>
 800d22e:	2301      	movs	r3, #1
 800d230:	e056      	b.n	800d2e0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7ff fadc 	bl	800c7f0 <sync_window>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <dir_next+0x106>
 800d23e:	2301      	movs	r3, #1
 800d240:	e04e      	b.n	800d2e0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	899b      	ldrh	r3, [r3, #12]
 800d24c:	461a      	mov	r2, r3
 800d24e:	2100      	movs	r1, #0
 800d250:	f7ff f905 	bl	800c45e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d254:	2300      	movs	r3, #0
 800d256:	613b      	str	r3, [r7, #16]
 800d258:	6979      	ldr	r1, [r7, #20]
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	f7ff fbaa 	bl	800c9b4 <clust2sect>
 800d260:	4602      	mov	r2, r0
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
 800d266:	e012      	b.n	800d28e <dir_next+0x152>
						fs->wflag = 1;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2201      	movs	r2, #1
 800d26c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff fabe 	bl	800c7f0 <sync_window>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <dir_next+0x142>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e030      	b.n	800d2e0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3301      	adds	r3, #1
 800d282:	613b      	str	r3, [r7, #16]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d288:	1c5a      	adds	r2, r3, #1
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	895b      	ldrh	r3, [r3, #10]
 800d292:	461a      	mov	r2, r3
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	4293      	cmp	r3, r2
 800d298:	d3e6      	bcc.n	800d268 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	1ad2      	subs	r2, r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	697a      	ldr	r2, [r7, #20]
 800d2aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d2ac:	6979      	ldr	r1, [r7, #20]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fb80 	bl	800c9b4 <clust2sect>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	899b      	ldrh	r3, [r3, #12]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2d2:	fb02 f200 	mul.w	r2, r2, r0
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	18ca      	adds	r2, r1, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fe95 	bl	800d02a <dir_sdi>
 800d300:	4603      	mov	r3, r0
 800d302:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d304:	7dfb      	ldrb	r3, [r7, #23]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d12b      	bne.n	800d362 <dir_alloc+0x7a>
		n = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	4619      	mov	r1, r3
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f7ff faaf 	bl	800c878 <move_window>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d11d      	bne.n	800d360 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a1b      	ldr	r3, [r3, #32]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2be5      	cmp	r3, #229	; 0xe5
 800d32c:	d004      	beq.n	800d338 <dir_alloc+0x50>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d107      	bne.n	800d348 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	3301      	adds	r3, #1
 800d33c:	613b      	str	r3, [r7, #16]
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d102      	bne.n	800d34c <dir_alloc+0x64>
 800d346:	e00c      	b.n	800d362 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d348:	2300      	movs	r3, #0
 800d34a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d34c:	2101      	movs	r1, #1
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff fef4 	bl	800d13c <dir_next>
 800d354:	4603      	mov	r3, r0
 800d356:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d0d7      	beq.n	800d30e <dir_alloc+0x26>
 800d35e:	e000      	b.n	800d362 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d360:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d101      	bne.n	800d36c <dir_alloc+0x84>
 800d368:	2307      	movs	r3, #7
 800d36a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	331a      	adds	r3, #26
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe ffc7 	bl	800c318 <ld_word>
 800d38a:	4603      	mov	r3, r0
 800d38c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b03      	cmp	r3, #3
 800d394:	d109      	bne.n	800d3aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	3314      	adds	r3, #20
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe ffbc 	bl	800c318 <ld_word>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	041b      	lsls	r3, r3, #16
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	331a      	adds	r3, #26
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe ffdf 	bl	800c38e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b03      	cmp	r3, #3
 800d3d6:	d109      	bne.n	800d3ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f103 0214 	add.w	r2, r3, #20
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	0c1b      	lsrs	r3, r3, #16
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7fe ffd1 	bl	800c38e <st_word>
	}
}
 800d3ec:	bf00      	nop
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d3f4:	b590      	push	{r4, r7, lr}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	331a      	adds	r3, #26
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe ff88 	bl	800c318 <ld_word>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <cmp_lfn+0x1e>
 800d40e:	2300      	movs	r3, #0
 800d410:	e059      	b.n	800d4c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d41a:	1e5a      	subs	r2, r3, #1
 800d41c:	4613      	mov	r3, r2
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4413      	add	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d428:	2301      	movs	r3, #1
 800d42a:	81fb      	strh	r3, [r7, #14]
 800d42c:	2300      	movs	r3, #0
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	e033      	b.n	800d49a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d432:	4a27      	ldr	r2, [pc, #156]	; (800d4d0 <cmp_lfn+0xdc>)
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	4413      	add	r3, r2
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	4413      	add	r3, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe ff69 	bl	800c318 <ld_word>
 800d446:	4603      	mov	r3, r0
 800d448:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d44a:	89fb      	ldrh	r3, [r7, #14]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01a      	beq.n	800d486 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	2bfe      	cmp	r3, #254	; 0xfe
 800d454:	d812      	bhi.n	800d47c <cmp_lfn+0x88>
 800d456:	89bb      	ldrh	r3, [r7, #12]
 800d458:	4618      	mov	r0, r3
 800d45a:	f002 fd23 	bl	800fea4 <ff_wtoupper>
 800d45e:	4603      	mov	r3, r0
 800d460:	461c      	mov	r4, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	617a      	str	r2, [r7, #20]
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f002 fd17 	bl	800fea4 <ff_wtoupper>
 800d476:	4603      	mov	r3, r0
 800d478:	429c      	cmp	r4, r3
 800d47a:	d001      	beq.n	800d480 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d47c:	2300      	movs	r3, #0
 800d47e:	e022      	b.n	800d4c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d480:	89bb      	ldrh	r3, [r7, #12]
 800d482:	81fb      	strh	r3, [r7, #14]
 800d484:	e006      	b.n	800d494 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d486:	89bb      	ldrh	r3, [r7, #12]
 800d488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d001      	beq.n	800d494 <cmp_lfn+0xa0>
 800d490:	2300      	movs	r3, #0
 800d492:	e018      	b.n	800d4c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	3301      	adds	r3, #1
 800d498:	613b      	str	r3, [r7, #16]
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2b0c      	cmp	r3, #12
 800d49e:	d9c8      	bls.n	800d432 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00b      	beq.n	800d4c4 <cmp_lfn+0xd0>
 800d4ac:	89fb      	ldrh	r3, [r7, #14]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d008      	beq.n	800d4c4 <cmp_lfn+0xd0>
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <cmp_lfn+0xd0>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e000      	b.n	800d4c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d4c4:	2301      	movs	r3, #1
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	371c      	adds	r7, #28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd90      	pop	{r4, r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08016174 	.word	0x08016174

0800d4d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	331a      	adds	r3, #26
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe ff18 	bl	800c318 <ld_word>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <pick_lfn+0x1e>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e04d      	b.n	800d58e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4fa:	1e5a      	subs	r2, r3, #1
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	4413      	add	r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4413      	add	r3, r2
 800d506:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d508:	2301      	movs	r3, #1
 800d50a:	81fb      	strh	r3, [r7, #14]
 800d50c:	2300      	movs	r3, #0
 800d50e:	613b      	str	r3, [r7, #16]
 800d510:	e028      	b.n	800d564 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d512:	4a21      	ldr	r2, [pc, #132]	; (800d598 <pick_lfn+0xc4>)
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	4413      	add	r3, r2
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	4413      	add	r3, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fef9 	bl	800c318 <ld_word>
 800d526:	4603      	mov	r3, r0
 800d528:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d52a:	89fb      	ldrh	r3, [r7, #14]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00f      	beq.n	800d550 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2bfe      	cmp	r3, #254	; 0xfe
 800d534:	d901      	bls.n	800d53a <pick_lfn+0x66>
 800d536:	2300      	movs	r3, #0
 800d538:	e029      	b.n	800d58e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d53a:	89bb      	ldrh	r3, [r7, #12]
 800d53c:	81fb      	strh	r3, [r7, #14]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	617a      	str	r2, [r7, #20]
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	4413      	add	r3, r2
 800d54a:	89fa      	ldrh	r2, [r7, #14]
 800d54c:	801a      	strh	r2, [r3, #0]
 800d54e:	e006      	b.n	800d55e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d550:	89bb      	ldrh	r3, [r7, #12]
 800d552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d556:	4293      	cmp	r3, r2
 800d558:	d001      	beq.n	800d55e <pick_lfn+0x8a>
 800d55a:	2300      	movs	r3, #0
 800d55c:	e017      	b.n	800d58e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	3301      	adds	r3, #1
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	2b0c      	cmp	r3, #12
 800d568:	d9d3      	bls.n	800d512 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	2bfe      	cmp	r3, #254	; 0xfe
 800d57a:	d901      	bls.n	800d580 <pick_lfn+0xac>
 800d57c:	2300      	movs	r3, #0
 800d57e:	e006      	b.n	800d58e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	2200      	movs	r2, #0
 800d58a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d58c:	2301      	movs	r3, #1
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	08016174 	.word	0x08016174

0800d59c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	71fb      	strb	r3, [r7, #7]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	330d      	adds	r3, #13
 800d5b6:	79ba      	ldrb	r2, [r7, #6]
 800d5b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	330b      	adds	r3, #11
 800d5be:	220f      	movs	r2, #15
 800d5c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	331a      	adds	r3, #26
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fedc 	bl	800c38e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	1e5a      	subs	r2, r3, #1
 800d5da:	4613      	mov	r3, r2
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	4413      	add	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	82fb      	strh	r3, [r7, #22]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d5ee:	8afb      	ldrh	r3, [r7, #22]
 800d5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d007      	beq.n	800d608 <put_lfn+0x6c>
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	61fa      	str	r2, [r7, #28]
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d608:	4a17      	ldr	r2, [pc, #92]	; (800d668 <put_lfn+0xcc>)
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	4413      	add	r3, r2
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	4413      	add	r3, r2
 800d616:	8afa      	ldrh	r2, [r7, #22]
 800d618:	4611      	mov	r1, r2
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe feb7 	bl	800c38e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d620:	8afb      	ldrh	r3, [r7, #22]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d102      	bne.n	800d62c <put_lfn+0x90>
 800d626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d62a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	3301      	adds	r3, #1
 800d630:	61bb      	str	r3, [r7, #24]
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b0c      	cmp	r3, #12
 800d636:	d9da      	bls.n	800d5ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d638:	8afb      	ldrh	r3, [r7, #22]
 800d63a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d63e:	4293      	cmp	r3, r2
 800d640:	d006      	beq.n	800d650 <put_lfn+0xb4>
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	4413      	add	r3, r2
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d103      	bne.n	800d658 <put_lfn+0xbc>
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d656:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	79fa      	ldrb	r2, [r7, #7]
 800d65c:	701a      	strb	r2, [r3, #0]
}
 800d65e:	bf00      	nop
 800d660:	3720      	adds	r7, #32
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	08016174 	.word	0x08016174

0800d66c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08c      	sub	sp, #48	; 0x30
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d67a:	220b      	movs	r2, #11
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7fe fecc 	bl	800c41c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b05      	cmp	r3, #5
 800d688:	d92b      	bls.n	800d6e2 <gen_numname+0x76>
		sr = seq;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d68e:	e022      	b.n	800d6d6 <gen_numname+0x6a>
			wc = *lfn++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	1c9a      	adds	r2, r3, #2
 800d694:	607a      	str	r2, [r7, #4]
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d69a:	2300      	movs	r3, #0
 800d69c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d69e:	e017      	b.n	800d6d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	005a      	lsls	r2, r3, #1
 800d6a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d6ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6b0:	085b      	lsrs	r3, r3, #1
 800d6b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <gen_numname+0x5e>
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d6c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d6c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b0f      	cmp	r3, #15
 800d6d4:	d9e4      	bls.n	800d6a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1d8      	bne.n	800d690 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d6e2:	2307      	movs	r3, #7
 800d6e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	f003 030f 	and.w	r3, r3, #15
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	3330      	adds	r3, #48	; 0x30
 800d6f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6fa:	2b39      	cmp	r3, #57	; 0x39
 800d6fc:	d904      	bls.n	800d708 <gen_numname+0x9c>
 800d6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d702:	3307      	adds	r3, #7
 800d704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	1e5a      	subs	r2, r3, #1
 800d70c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d70e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d712:	4413      	add	r3, r2
 800d714:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d718:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	091b      	lsrs	r3, r3, #4
 800d720:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1de      	bne.n	800d6e6 <gen_numname+0x7a>
	ns[i] = '~';
 800d728:	f107 0214 	add.w	r2, r7, #20
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	4413      	add	r3, r2
 800d730:	227e      	movs	r2, #126	; 0x7e
 800d732:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d734:	2300      	movs	r3, #0
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
 800d738:	e002      	b.n	800d740 <gen_numname+0xd4>
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	3301      	adds	r3, #1
 800d73e:	627b      	str	r3, [r7, #36]	; 0x24
 800d740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	429a      	cmp	r2, r3
 800d746:	d205      	bcs.n	800d754 <gen_numname+0xe8>
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	4413      	add	r3, r2
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b20      	cmp	r3, #32
 800d752:	d1f2      	bne.n	800d73a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d756:	2b07      	cmp	r3, #7
 800d758:	d808      	bhi.n	800d76c <gen_numname+0x100>
 800d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	62ba      	str	r2, [r7, #40]	; 0x28
 800d760:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d764:	4413      	add	r3, r2
 800d766:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d76a:	e000      	b.n	800d76e <gen_numname+0x102>
 800d76c:	2120      	movs	r1, #32
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	627a      	str	r2, [r7, #36]	; 0x24
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4413      	add	r3, r2
 800d778:	460a      	mov	r2, r1
 800d77a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	2b07      	cmp	r3, #7
 800d780:	d9e8      	bls.n	800d754 <gen_numname+0xe8>
}
 800d782:	bf00      	nop
 800d784:	3730      	adds	r7, #48	; 0x30
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b085      	sub	sp, #20
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d796:	230b      	movs	r3, #11
 800d798:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	0852      	lsrs	r2, r2, #1
 800d7a0:	01db      	lsls	r3, r3, #7
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	1c59      	adds	r1, r3, #1
 800d7aa:	6079      	str	r1, [r7, #4]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	60bb      	str	r3, [r7, #8]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1ed      	bne.n	800d79a <sum_sfn+0x10>
	return sum;
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d7d6:	2304      	movs	r3, #4
 800d7d8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d7e0:	23ff      	movs	r3, #255	; 0xff
 800d7e2:	757b      	strb	r3, [r7, #21]
 800d7e4:	23ff      	movs	r3, #255	; 0xff
 800d7e6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d7e8:	e081      	b.n	800d8ee <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6938      	ldr	r0, [r7, #16]
 800d7f2:	f7ff f841 	bl	800c878 <move_window>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d7fa:	7dfb      	ldrb	r3, [r7, #23]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d17c      	bne.n	800d8fa <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d808:	7dbb      	ldrb	r3, [r7, #22]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d102      	bne.n	800d814 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d80e:	2304      	movs	r3, #4
 800d810:	75fb      	strb	r3, [r7, #23]
 800d812:	e077      	b.n	800d904 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a1b      	ldr	r3, [r3, #32]
 800d818:	330b      	adds	r3, #11
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d820:	73fb      	strb	r3, [r7, #15]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7bfa      	ldrb	r2, [r7, #15]
 800d826:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d828:	7dbb      	ldrb	r3, [r7, #22]
 800d82a:	2be5      	cmp	r3, #229	; 0xe5
 800d82c:	d00e      	beq.n	800d84c <dir_read+0x80>
 800d82e:	7dbb      	ldrb	r3, [r7, #22]
 800d830:	2b2e      	cmp	r3, #46	; 0x2e
 800d832:	d00b      	beq.n	800d84c <dir_read+0x80>
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	f023 0320 	bic.w	r3, r3, #32
 800d83a:	2b08      	cmp	r3, #8
 800d83c:	bf0c      	ite	eq
 800d83e:	2301      	moveq	r3, #1
 800d840:	2300      	movne	r3, #0
 800d842:	b2db      	uxtb	r3, r3
 800d844:	461a      	mov	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	4293      	cmp	r3, r2
 800d84a:	d002      	beq.n	800d852 <dir_read+0x86>
				ord = 0xFF;
 800d84c:	23ff      	movs	r3, #255	; 0xff
 800d84e:	757b      	strb	r3, [r7, #21]
 800d850:	e044      	b.n	800d8dc <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	2b0f      	cmp	r3, #15
 800d856:	d12f      	bne.n	800d8b8 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d858:	7dbb      	ldrb	r3, [r7, #22]
 800d85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00d      	beq.n	800d87e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	7b5b      	ldrb	r3, [r3, #13]
 800d868:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d86a:	7dbb      	ldrb	r3, [r7, #22]
 800d86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d870:	75bb      	strb	r3, [r7, #22]
 800d872:	7dbb      	ldrb	r3, [r7, #22]
 800d874:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	695a      	ldr	r2, [r3, #20]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d87e:	7dba      	ldrb	r2, [r7, #22]
 800d880:	7d7b      	ldrb	r3, [r7, #21]
 800d882:	429a      	cmp	r2, r3
 800d884:	d115      	bne.n	800d8b2 <dir_read+0xe6>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	330d      	adds	r3, #13
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	7d3a      	ldrb	r2, [r7, #20]
 800d890:	429a      	cmp	r2, r3
 800d892:	d10e      	bne.n	800d8b2 <dir_read+0xe6>
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	691a      	ldr	r2, [r3, #16]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7ff fe18 	bl	800d4d4 <pick_lfn>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <dir_read+0xe6>
 800d8aa:	7d7b      	ldrb	r3, [r7, #21]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	e000      	b.n	800d8b4 <dir_read+0xe8>
 800d8b2:	23ff      	movs	r3, #255	; 0xff
 800d8b4:	757b      	strb	r3, [r7, #21]
 800d8b6:	e011      	b.n	800d8dc <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d8b8:	7d7b      	ldrb	r3, [r7, #21]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d109      	bne.n	800d8d2 <dir_read+0x106>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff ff61 	bl	800d78a <sum_sfn>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	7d3b      	ldrb	r3, [r7, #20]
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d015      	beq.n	800d8fe <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d8da:	e010      	b.n	800d8fe <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d8dc:	2100      	movs	r1, #0
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff fc2c 	bl	800d13c <dir_next>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d109      	bne.n	800d902 <dir_read+0x136>
	while (dp->sect) {
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f47f af79 	bne.w	800d7ea <dir_read+0x1e>
 800d8f8:	e004      	b.n	800d904 <dir_read+0x138>
		if (res != FR_OK) break;
 800d8fa:	bf00      	nop
 800d8fc:	e002      	b.n	800d904 <dir_read+0x138>
					break;
 800d8fe:	bf00      	nop
 800d900:	e000      	b.n	800d904 <dir_read+0x138>
		if (res != FR_OK) break;
 800d902:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d904:	7dfb      	ldrb	r3, [r7, #23]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <dir_read+0x144>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	61da      	str	r2, [r3, #28]
	return res;
 800d910:	7dfb      	ldrb	r3, [r7, #23]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b086      	sub	sp, #24
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d928:	2100      	movs	r1, #0
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff fb7d 	bl	800d02a <dir_sdi>
 800d930:	4603      	mov	r3, r0
 800d932:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <dir_find+0x24>
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
 800d93c:	e0a9      	b.n	800da92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d93e:	23ff      	movs	r3, #255	; 0xff
 800d940:	753b      	strb	r3, [r7, #20]
 800d942:	7d3b      	ldrb	r3, [r7, #20]
 800d944:	757b      	strb	r3, [r7, #21]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f04f 32ff 	mov.w	r2, #4294967295
 800d94c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	69db      	ldr	r3, [r3, #28]
 800d952:	4619      	mov	r1, r3
 800d954:	6938      	ldr	r0, [r7, #16]
 800d956:	f7fe ff8f 	bl	800c878 <move_window>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	2b00      	cmp	r3, #0
 800d962:	f040 8090 	bne.w	800da86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d96e:	7dbb      	ldrb	r3, [r7, #22]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <dir_find+0x60>
 800d974:	2304      	movs	r3, #4
 800d976:	75fb      	strb	r3, [r7, #23]
 800d978:	e08a      	b.n	800da90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	330b      	adds	r3, #11
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d986:	73fb      	strb	r3, [r7, #15]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	7bfa      	ldrb	r2, [r7, #15]
 800d98c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d98e:	7dbb      	ldrb	r3, [r7, #22]
 800d990:	2be5      	cmp	r3, #229	; 0xe5
 800d992:	d007      	beq.n	800d9a4 <dir_find+0x8a>
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	f003 0308 	and.w	r3, r3, #8
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d009      	beq.n	800d9b2 <dir_find+0x98>
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	2b0f      	cmp	r3, #15
 800d9a2:	d006      	beq.n	800d9b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9a4:	23ff      	movs	r3, #255	; 0xff
 800d9a6:	757b      	strb	r3, [r7, #21]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	631a      	str	r2, [r3, #48]	; 0x30
 800d9b0:	e05e      	b.n	800da70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	2b0f      	cmp	r3, #15
 800d9b6:	d136      	bne.n	800da26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d154      	bne.n	800da70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d9c6:	7dbb      	ldrb	r3, [r7, #22]
 800d9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00d      	beq.n	800d9ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a1b      	ldr	r3, [r3, #32]
 800d9d4:	7b5b      	ldrb	r3, [r3, #13]
 800d9d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d9d8:	7dbb      	ldrb	r3, [r7, #22]
 800d9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9de:	75bb      	strb	r3, [r7, #22]
 800d9e0:	7dbb      	ldrb	r3, [r7, #22]
 800d9e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	695a      	ldr	r2, [r3, #20]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d9ec:	7dba      	ldrb	r2, [r7, #22]
 800d9ee:	7d7b      	ldrb	r3, [r7, #21]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d115      	bne.n	800da20 <dir_find+0x106>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	330d      	adds	r3, #13
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	7d3a      	ldrb	r2, [r7, #20]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d10e      	bne.n	800da20 <dir_find+0x106>
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	691a      	ldr	r2, [r3, #16]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f7ff fcf1 	bl	800d3f4 <cmp_lfn>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d003      	beq.n	800da20 <dir_find+0x106>
 800da18:	7d7b      	ldrb	r3, [r7, #21]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	e000      	b.n	800da22 <dir_find+0x108>
 800da20:	23ff      	movs	r3, #255	; 0xff
 800da22:	757b      	strb	r3, [r7, #21]
 800da24:	e024      	b.n	800da70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da26:	7d7b      	ldrb	r3, [r7, #21]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d109      	bne.n	800da40 <dir_find+0x126>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff feaa 	bl	800d78a <sum_sfn>
 800da36:	4603      	mov	r3, r0
 800da38:	461a      	mov	r2, r3
 800da3a:	7d3b      	ldrb	r3, [r7, #20]
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d024      	beq.n	800da8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <dir_find+0x14a>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a18      	ldr	r0, [r3, #32]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	3324      	adds	r3, #36	; 0x24
 800da56:	220b      	movs	r2, #11
 800da58:	4619      	mov	r1, r3
 800da5a:	f7fe fd1a 	bl	800c492 <mem_cmp>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d014      	beq.n	800da8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da64:	23ff      	movs	r3, #255	; 0xff
 800da66:	757b      	strb	r3, [r7, #21]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f04f 32ff 	mov.w	r2, #4294967295
 800da6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800da70:	2100      	movs	r1, #0
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fb62 	bl	800d13c <dir_next>
 800da78:	4603      	mov	r3, r0
 800da7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f43f af65 	beq.w	800d94e <dir_find+0x34>
 800da84:	e004      	b.n	800da90 <dir_find+0x176>
		if (res != FR_OK) break;
 800da86:	bf00      	nop
 800da88:	e002      	b.n	800da90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da8a:	bf00      	nop
 800da8c:	e000      	b.n	800da90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da8e:	bf00      	nop

	return res;
 800da90:	7dfb      	ldrb	r3, [r7, #23]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08c      	sub	sp, #48	; 0x30
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dab0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <dir_register+0x20>
 800dab8:	2306      	movs	r3, #6
 800daba:	e0e0      	b.n	800dc7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dabc:	2300      	movs	r3, #0
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
 800dac0:	e002      	b.n	800dac8 <dir_register+0x2c>
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	3301      	adds	r3, #1
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	4413      	add	r3, r2
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1f4      	bne.n	800dac2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dade:	f107 030c 	add.w	r3, r7, #12
 800dae2:	220c      	movs	r2, #12
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fc99 	bl	800c41c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d032      	beq.n	800db5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2240      	movs	r2, #64	; 0x40
 800daf8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dafc:	2301      	movs	r3, #1
 800dafe:	62bb      	str	r3, [r7, #40]	; 0x28
 800db00:	e016      	b.n	800db30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	691a      	ldr	r2, [r3, #16]
 800db0c:	f107 010c 	add.w	r1, r7, #12
 800db10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db12:	f7ff fdab 	bl	800d66c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7ff feff 	bl	800d91a <dir_find>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800db22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2c:	3301      	adds	r3, #1
 800db2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	2b63      	cmp	r3, #99	; 0x63
 800db34:	d9e5      	bls.n	800db02 <dir_register+0x66>
 800db36:	e000      	b.n	800db3a <dir_register+0x9e>
			if (res != FR_OK) break;
 800db38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	2b64      	cmp	r3, #100	; 0x64
 800db3e:	d101      	bne.n	800db44 <dir_register+0xa8>
 800db40:	2307      	movs	r3, #7
 800db42:	e09c      	b.n	800dc7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800db44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db48:	2b04      	cmp	r3, #4
 800db4a:	d002      	beq.n	800db52 <dir_register+0xb6>
 800db4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db50:	e095      	b.n	800dc7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800db52:	7dfa      	ldrb	r2, [r7, #23]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
 800db5c:	f003 0302 	and.w	r3, r3, #2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d007      	beq.n	800db74 <dir_register+0xd8>
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	330c      	adds	r3, #12
 800db68:	4a47      	ldr	r2, [pc, #284]	; (800dc88 <dir_register+0x1ec>)
 800db6a:	fba2 2303 	umull	r2, r3, r2, r3
 800db6e:	089b      	lsrs	r3, r3, #2
 800db70:	3301      	adds	r3, #1
 800db72:	e000      	b.n	800db76 <dir_register+0xda>
 800db74:	2301      	movs	r3, #1
 800db76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800db78:	6a39      	ldr	r1, [r7, #32]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff fbb4 	bl	800d2e8 <dir_alloc>
 800db80:	4603      	mov	r3, r0
 800db82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800db86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d148      	bne.n	800dc20 <dir_register+0x184>
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	3b01      	subs	r3, #1
 800db92:	623b      	str	r3, [r7, #32]
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d042      	beq.n	800dc20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	695a      	ldr	r2, [r3, #20]
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	015b      	lsls	r3, r3, #5
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff fa3f 	bl	800d02a <dir_sdi>
 800dbac:	4603      	mov	r3, r0
 800dbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dbb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d132      	bne.n	800dc20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	3324      	adds	r3, #36	; 0x24
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fde3 	bl	800d78a <sum_sfn>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	69db      	ldr	r3, [r3, #28]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	69f8      	ldr	r0, [r7, #28]
 800dbd0:	f7fe fe52 	bl	800c878 <move_window>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dbda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d11d      	bne.n	800dc1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	6918      	ldr	r0, [r3, #16]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a19      	ldr	r1, [r3, #32]
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	7efb      	ldrb	r3, [r7, #27]
 800dbf0:	f7ff fcd4 	bl	800d59c <put_lfn>
				fs->wflag = 1;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fa9d 	bl	800d13c <dir_next>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dc08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d107      	bne.n	800dc20 <dir_register+0x184>
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	623b      	str	r3, [r7, #32]
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1d5      	bne.n	800dbc8 <dir_register+0x12c>
 800dc1c:	e000      	b.n	800dc20 <dir_register+0x184>
				if (res != FR_OK) break;
 800dc1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d128      	bne.n	800dc7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	69db      	ldr	r3, [r3, #28]
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	69f8      	ldr	r0, [r7, #28]
 800dc30:	f7fe fe22 	bl	800c878 <move_window>
 800dc34:	4603      	mov	r3, r0
 800dc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dc3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d11b      	bne.n	800dc7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a1b      	ldr	r3, [r3, #32]
 800dc46:	2220      	movs	r2, #32
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fe fc07 	bl	800c45e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a18      	ldr	r0, [r3, #32]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3324      	adds	r3, #36	; 0x24
 800dc58:	220b      	movs	r2, #11
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	f7fe fbde 	bl	800c41c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	f002 0218 	and.w	r2, r2, #24
 800dc70:	b2d2      	uxtb	r2, r2
 800dc72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2201      	movs	r2, #1
 800dc78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3730      	adds	r7, #48	; 0x30
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	4ec4ec4f 	.word	0x4ec4ec4f

0800dc8c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d007      	beq.n	800dcba <dir_remove+0x2e>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff f9ba 	bl	800d02a <dir_sdi>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	e000      	b.n	800dcbc <dir_remove+0x30>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d128      	bne.n	800dd16 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	6938      	ldr	r0, [r7, #16]
 800dccc:	f7fe fdd4 	bl	800c878 <move_window>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d115      	bne.n	800dd06 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	22e5      	movs	r2, #229	; 0xe5
 800dce0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2201      	movs	r2, #1
 800dce6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	695b      	ldr	r3, [r3, #20]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d90b      	bls.n	800dd0a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff fa21 	bl	800d13c <dir_next>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d0df      	beq.n	800dcc4 <dir_remove+0x38>
 800dd04:	e002      	b.n	800dd0c <dir_remove+0x80>
			if (res != FR_OK) break;
 800dd06:	bf00      	nop
 800dd08:	e000      	b.n	800dd0c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dd0a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d101      	bne.n	800dd16 <dir_remove+0x8a>
 800dd12:	2302      	movs	r3, #2
 800dd14:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800dd16:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08a      	sub	sp, #40	; 0x28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	613b      	str	r3, [r7, #16]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	617b      	str	r3, [r7, #20]
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	61ba      	str	r2, [r7, #24]
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	4413      	add	r3, r2
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dd4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd50:	2b1f      	cmp	r3, #31
 800dd52:	d940      	bls.n	800ddd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dd54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd56:	2b2f      	cmp	r3, #47	; 0x2f
 800dd58:	d006      	beq.n	800dd68 <create_name+0x48>
 800dd5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd5c:	2b5c      	cmp	r3, #92	; 0x5c
 800dd5e:	d110      	bne.n	800dd82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd60:	e002      	b.n	800dd68 <create_name+0x48>
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	3301      	adds	r3, #1
 800dd66:	61bb      	str	r3, [r7, #24]
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b2f      	cmp	r3, #47	; 0x2f
 800dd72:	d0f6      	beq.n	800dd62 <create_name+0x42>
 800dd74:	693a      	ldr	r2, [r7, #16]
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	4413      	add	r3, r2
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b5c      	cmp	r3, #92	; 0x5c
 800dd7e:	d0f0      	beq.n	800dd62 <create_name+0x42>
			break;
 800dd80:	e02a      	b.n	800ddd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2bfe      	cmp	r3, #254	; 0xfe
 800dd86:	d901      	bls.n	800dd8c <create_name+0x6c>
 800dd88:	2306      	movs	r3, #6
 800dd8a:	e1c9      	b.n	800e120 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dd8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dd92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd94:	2101      	movs	r1, #1
 800dd96:	4618      	mov	r0, r3
 800dd98:	f002 f848 	bl	800fe2c <ff_convert>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <create_name+0x8a>
 800dda6:	2306      	movs	r3, #6
 800dda8:	e1ba      	b.n	800e120 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ddaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddac:	2b7f      	cmp	r3, #127	; 0x7f
 800ddae:	d809      	bhi.n	800ddc4 <create_name+0xa4>
 800ddb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	48a5      	ldr	r0, [pc, #660]	; (800e04c <create_name+0x32c>)
 800ddb6:	f7fe fb93 	bl	800c4e0 <chk_chr>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <create_name+0xa4>
 800ddc0:	2306      	movs	r3, #6
 800ddc2:	e1ad      	b.n	800e120 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	617a      	str	r2, [r7, #20]
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ddd4:	e7b4      	b.n	800dd40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ddd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	441a      	add	r2, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dde2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dde4:	2b1f      	cmp	r3, #31
 800dde6:	d801      	bhi.n	800ddec <create_name+0xcc>
 800dde8:	2304      	movs	r3, #4
 800ddea:	e000      	b.n	800ddee <create_name+0xce>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d109      	bne.n	800de0c <create_name+0xec>
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ddfe:	3b01      	subs	r3, #1
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	2b2e      	cmp	r3, #46	; 0x2e
 800de0a:	d016      	beq.n	800de3a <create_name+0x11a>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d14e      	bne.n	800deb0 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de18:	3b01      	subs	r3, #1
 800de1a:	005b      	lsls	r3, r3, #1
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	2b2e      	cmp	r3, #46	; 0x2e
 800de24:	d144      	bne.n	800deb0 <create_name+0x190>
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de2c:	3b02      	subs	r3, #2
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4413      	add	r3, r2
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	2b2e      	cmp	r3, #46	; 0x2e
 800de38:	d13a      	bne.n	800deb0 <create_name+0x190>
		lfn[di] = 0;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	4413      	add	r3, r2
 800de42:	2200      	movs	r2, #0
 800de44:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800de46:	2300      	movs	r3, #0
 800de48:	623b      	str	r3, [r7, #32]
 800de4a:	e00f      	b.n	800de6c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800de4c:	6a3a      	ldr	r2, [r7, #32]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	429a      	cmp	r2, r3
 800de52:	d201      	bcs.n	800de58 <create_name+0x138>
 800de54:	212e      	movs	r1, #46	; 0x2e
 800de56:	e000      	b.n	800de5a <create_name+0x13a>
 800de58:	2120      	movs	r1, #32
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	4413      	add	r3, r2
 800de60:	3324      	adds	r3, #36	; 0x24
 800de62:	460a      	mov	r2, r1
 800de64:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	3301      	adds	r3, #1
 800de6a:	623b      	str	r3, [r7, #32]
 800de6c:	6a3b      	ldr	r3, [r7, #32]
 800de6e:	2b0a      	cmp	r3, #10
 800de70:	d9ec      	bls.n	800de4c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800de72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de76:	f043 0320 	orr.w	r3, r3, #32
 800de7a:	b2d9      	uxtb	r1, r3
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	4413      	add	r3, r2
 800de82:	3324      	adds	r3, #36	; 0x24
 800de84:	460a      	mov	r2, r1
 800de86:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	e149      	b.n	800e120 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de92:	3b01      	subs	r3, #1
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	4413      	add	r3, r2
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800de9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea0:	2b20      	cmp	r3, #32
 800dea2:	d002      	beq.n	800deaa <create_name+0x18a>
 800dea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea6:	2b2e      	cmp	r3, #46	; 0x2e
 800dea8:	d106      	bne.n	800deb8 <create_name+0x198>
		di--;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	3b01      	subs	r3, #1
 800deae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1ea      	bne.n	800de8c <create_name+0x16c>
 800deb6:	e000      	b.n	800deba <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800deb8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	4413      	add	r3, r2
 800dec2:	2200      	movs	r2, #0
 800dec4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d101      	bne.n	800ded0 <create_name+0x1b0>
 800decc:	2306      	movs	r3, #6
 800dece:	e127      	b.n	800e120 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3324      	adds	r3, #36	; 0x24
 800ded4:	220b      	movs	r2, #11
 800ded6:	2120      	movs	r1, #32
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fe fac0 	bl	800c45e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dede:	2300      	movs	r3, #0
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	e002      	b.n	800deea <create_name+0x1ca>
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	3301      	adds	r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	4413      	add	r3, r2
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	2b20      	cmp	r3, #32
 800def6:	d0f5      	beq.n	800dee4 <create_name+0x1c4>
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4413      	add	r3, r2
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	2b2e      	cmp	r3, #46	; 0x2e
 800df04:	d0ee      	beq.n	800dee4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d009      	beq.n	800df20 <create_name+0x200>
 800df0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df10:	f043 0303 	orr.w	r3, r3, #3
 800df14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800df18:	e002      	b.n	800df20 <create_name+0x200>
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <create_name+0x21a>
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df2c:	3b01      	subs	r3, #1
 800df2e:	005b      	lsls	r3, r3, #1
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	4413      	add	r3, r2
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	2b2e      	cmp	r3, #46	; 0x2e
 800df38:	d1ef      	bne.n	800df1a <create_name+0x1fa>

	i = b = 0; ni = 8;
 800df3a:	2300      	movs	r3, #0
 800df3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df40:	2300      	movs	r3, #0
 800df42:	623b      	str	r3, [r7, #32]
 800df44:	2308      	movs	r3, #8
 800df46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	61ba      	str	r2, [r7, #24]
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4413      	add	r3, r2
 800df54:	881b      	ldrh	r3, [r3, #0]
 800df56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800df58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 8096 	beq.w	800e08c <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800df60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df62:	2b20      	cmp	r3, #32
 800df64:	d006      	beq.n	800df74 <create_name+0x254>
 800df66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df68:	2b2e      	cmp	r3, #46	; 0x2e
 800df6a:	d10a      	bne.n	800df82 <create_name+0x262>
 800df6c:	69ba      	ldr	r2, [r7, #24]
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	429a      	cmp	r2, r3
 800df72:	d006      	beq.n	800df82 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800df74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df78:	f043 0303 	orr.w	r3, r3, #3
 800df7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df80:	e083      	b.n	800e08a <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800df82:	6a3a      	ldr	r2, [r7, #32]
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	429a      	cmp	r2, r3
 800df88:	d203      	bcs.n	800df92 <create_name+0x272>
 800df8a:	69ba      	ldr	r2, [r7, #24]
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d123      	bne.n	800dfda <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	2b0b      	cmp	r3, #11
 800df96:	d106      	bne.n	800dfa6 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800df98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df9c:	f043 0303 	orr.w	r3, r3, #3
 800dfa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfa4:	e075      	b.n	800e092 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dfa6:	69ba      	ldr	r2, [r7, #24]
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d005      	beq.n	800dfba <create_name+0x29a>
 800dfae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb2:	f043 0303 	orr.w	r3, r3, #3
 800dfb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dfba:	69ba      	ldr	r2, [r7, #24]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d866      	bhi.n	800e090 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	61bb      	str	r3, [r7, #24]
 800dfc6:	2308      	movs	r3, #8
 800dfc8:	623b      	str	r3, [r7, #32]
 800dfca:	230b      	movs	r3, #11
 800dfcc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dfce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfd8:	e057      	b.n	800e08a <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dfda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfdc:	2b7f      	cmp	r3, #127	; 0x7f
 800dfde:	d914      	bls.n	800e00a <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dfe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f001 ff21 	bl	800fe2c <ff_convert>
 800dfea:	4603      	mov	r3, r0
 800dfec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dfee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d004      	beq.n	800dffe <create_name+0x2de>
 800dff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff6:	3b80      	subs	r3, #128	; 0x80
 800dff8:	4a15      	ldr	r2, [pc, #84]	; (800e050 <create_name+0x330>)
 800dffa:	5cd3      	ldrb	r3, [r2, r3]
 800dffc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e002:	f043 0302 	orr.w	r3, r3, #2
 800e006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d007      	beq.n	800e020 <create_name+0x300>
 800e010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e012:	4619      	mov	r1, r3
 800e014:	480f      	ldr	r0, [pc, #60]	; (800e054 <create_name+0x334>)
 800e016:	f7fe fa63 	bl	800c4e0 <chk_chr>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d008      	beq.n	800e032 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e020:	235f      	movs	r3, #95	; 0x5f
 800e022:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e028:	f043 0303 	orr.w	r3, r3, #3
 800e02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e030:	e021      	b.n	800e076 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e034:	2b40      	cmp	r3, #64	; 0x40
 800e036:	d90f      	bls.n	800e058 <create_name+0x338>
 800e038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e03a:	2b5a      	cmp	r3, #90	; 0x5a
 800e03c:	d80c      	bhi.n	800e058 <create_name+0x338>
					b |= 2;
 800e03e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e042:	f043 0302 	orr.w	r3, r3, #2
 800e046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e04a:	e014      	b.n	800e076 <create_name+0x356>
 800e04c:	0801606c 	.word	0x0801606c
 800e050:	080160f4 	.word	0x080160f4
 800e054:	08016078 	.word	0x08016078
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e05a:	2b60      	cmp	r3, #96	; 0x60
 800e05c:	d90b      	bls.n	800e076 <create_name+0x356>
 800e05e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e060:	2b7a      	cmp	r3, #122	; 0x7a
 800e062:	d808      	bhi.n	800e076 <create_name+0x356>
						b |= 1; w -= 0x20;
 800e064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e068:	f043 0301 	orr.w	r3, r3, #1
 800e06c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e072:	3b20      	subs	r3, #32
 800e074:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	623a      	str	r2, [r7, #32]
 800e07c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e07e:	b2d1      	uxtb	r1, r2
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	4413      	add	r3, r2
 800e084:	460a      	mov	r2, r1
 800e086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e08a:	e75d      	b.n	800df48 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800e08c:	bf00      	nop
 800e08e:	e000      	b.n	800e092 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800e090:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e098:	2be5      	cmp	r3, #229	; 0xe5
 800e09a:	d103      	bne.n	800e0a4 <create_name+0x384>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2205      	movs	r2, #5
 800e0a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	2b08      	cmp	r3, #8
 800e0a8:	d104      	bne.n	800e0b4 <create_name+0x394>
 800e0aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e0b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0b8:	f003 030c 	and.w	r3, r3, #12
 800e0bc:	2b0c      	cmp	r3, #12
 800e0be:	d005      	beq.n	800e0cc <create_name+0x3ac>
 800e0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0c4:	f003 0303 	and.w	r3, r3, #3
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d105      	bne.n	800e0d8 <create_name+0x3b8>
 800e0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0dc:	f003 0302 	and.w	r3, r3, #2
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d117      	bne.n	800e114 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e0e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0e8:	f003 0303 	and.w	r3, r3, #3
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d105      	bne.n	800e0fc <create_name+0x3dc>
 800e0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f4:	f043 0310 	orr.w	r3, r3, #16
 800e0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e0fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e100:	f003 030c 	and.w	r3, r3, #12
 800e104:	2b04      	cmp	r3, #4
 800e106:	d105      	bne.n	800e114 <create_name+0x3f4>
 800e108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e10c:	f043 0308 	orr.w	r3, r3, #8
 800e110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e11a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e11e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e120:	4618      	mov	r0, r3
 800e122:	3728      	adds	r7, #40	; 0x28
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b2f      	cmp	r3, #47	; 0x2f
 800e142:	d00b      	beq.n	800e15c <follow_path+0x34>
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b5c      	cmp	r3, #92	; 0x5c
 800e14a:	d007      	beq.n	800e15c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	69da      	ldr	r2, [r3, #28]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	609a      	str	r2, [r3, #8]
 800e154:	e00d      	b.n	800e172 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	603b      	str	r3, [r7, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	2b2f      	cmp	r3, #47	; 0x2f
 800e162:	d0f8      	beq.n	800e156 <follow_path+0x2e>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	2b5c      	cmp	r3, #92	; 0x5c
 800e16a:	d0f4      	beq.n	800e156 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	2200      	movs	r2, #0
 800e170:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	2b1f      	cmp	r3, #31
 800e178:	d80a      	bhi.n	800e190 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2280      	movs	r2, #128	; 0x80
 800e17e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e182:	2100      	movs	r1, #0
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fe ff50 	bl	800d02a <dir_sdi>
 800e18a:	4603      	mov	r3, r0
 800e18c:	75fb      	strb	r3, [r7, #23]
 800e18e:	e05b      	b.n	800e248 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e190:	463b      	mov	r3, r7
 800e192:	4619      	mov	r1, r3
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff fdc3 	bl	800dd20 <create_name>
 800e19a:	4603      	mov	r3, r0
 800e19c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d14c      	bne.n	800e23e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7ff fbb8 	bl	800d91a <dir_find>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01b      	beq.n	800e1f4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d13f      	bne.n	800e242 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800e1cc:	7afb      	ldrb	r3, [r7, #11]
 800e1ce:	f003 0304 	and.w	r3, r3, #4
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d031      	beq.n	800e23a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2280      	movs	r2, #128	; 0x80
 800e1da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800e1e2:	e02e      	b.n	800e242 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
 800e1e6:	f003 0304 	and.w	r3, r3, #4
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d129      	bne.n	800e242 <follow_path+0x11a>
 800e1ee:	2305      	movs	r3, #5
 800e1f0:	75fb      	strb	r3, [r7, #23]
				break;
 800e1f2:	e026      	b.n	800e242 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1f4:	7afb      	ldrb	r3, [r7, #11]
 800e1f6:	f003 0304 	and.w	r3, r3, #4
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d123      	bne.n	800e246 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	799b      	ldrb	r3, [r3, #6]
 800e202:	f003 0310 	and.w	r3, r3, #16
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800e20a:	2305      	movs	r3, #5
 800e20c:	75fb      	strb	r3, [r7, #23]
 800e20e:	e01b      	b.n	800e248 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	695b      	ldr	r3, [r3, #20]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	8992      	ldrh	r2, [r2, #12]
 800e21e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e222:	fb02 f200 	mul.w	r2, r2, r0
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	440b      	add	r3, r1
 800e22a:	4619      	mov	r1, r3
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7ff f8a2 	bl	800d376 <ld_clust>
 800e232:	4602      	mov	r2, r0
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	609a      	str	r2, [r3, #8]
 800e238:	e7aa      	b.n	800e190 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800e23a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e23c:	e7a8      	b.n	800e190 <follow_path+0x68>
			if (res != FR_OK) break;
 800e23e:	bf00      	nop
 800e240:	e002      	b.n	800e248 <follow_path+0x120>
				break;
 800e242:	bf00      	nop
 800e244:	e000      	b.n	800e248 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e246:	bf00      	nop
			}
		}
	}

	return res;
 800e248:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e252:	b480      	push	{r7}
 800e254:	b087      	sub	sp, #28
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e25a:	f04f 33ff 	mov.w	r3, #4294967295
 800e25e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d031      	beq.n	800e2cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	617b      	str	r3, [r7, #20]
 800e26e:	e002      	b.n	800e276 <get_ldnumber+0x24>
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	3301      	adds	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b1f      	cmp	r3, #31
 800e27c:	d903      	bls.n	800e286 <get_ldnumber+0x34>
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b3a      	cmp	r3, #58	; 0x3a
 800e284:	d1f4      	bne.n	800e270 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b3a      	cmp	r3, #58	; 0x3a
 800e28c:	d11c      	bne.n	800e2c8 <get_ldnumber+0x76>
			tp = *path;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	60fa      	str	r2, [r7, #12]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	3b30      	subs	r3, #48	; 0x30
 800e29e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d80e      	bhi.n	800e2c4 <get_ldnumber+0x72>
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d10a      	bne.n	800e2c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d107      	bne.n	800e2c4 <get_ldnumber+0x72>
					vol = (int)i;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	697a      	ldr	r2, [r7, #20]
 800e2c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	e002      	b.n	800e2ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e2cc:	693b      	ldr	r3, [r7, #16]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	371c      	adds	r7, #28
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
	...

0800e2dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	70da      	strb	r2, [r3, #3]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fe fabe 	bl	800c878 <move_window>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <check_fs+0x2a>
 800e302:	2304      	movs	r3, #4
 800e304:	e038      	b.n	800e378 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	333c      	adds	r3, #60	; 0x3c
 800e30a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe f802 	bl	800c318 <ld_word>
 800e314:	4603      	mov	r3, r0
 800e316:	461a      	mov	r2, r3
 800e318:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d001      	beq.n	800e324 <check_fs+0x48>
 800e320:	2303      	movs	r3, #3
 800e322:	e029      	b.n	800e378 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e32a:	2be9      	cmp	r3, #233	; 0xe9
 800e32c:	d009      	beq.n	800e342 <check_fs+0x66>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e334:	2beb      	cmp	r3, #235	; 0xeb
 800e336:	d11e      	bne.n	800e376 <check_fs+0x9a>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e33e:	2b90      	cmp	r3, #144	; 0x90
 800e340:	d119      	bne.n	800e376 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	333c      	adds	r3, #60	; 0x3c
 800e346:	3336      	adds	r3, #54	; 0x36
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fd fffd 	bl	800c348 <ld_dword>
 800e34e:	4603      	mov	r3, r0
 800e350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e354:	4a0a      	ldr	r2, [pc, #40]	; (800e380 <check_fs+0xa4>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d101      	bne.n	800e35e <check_fs+0x82>
 800e35a:	2300      	movs	r3, #0
 800e35c:	e00c      	b.n	800e378 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	333c      	adds	r3, #60	; 0x3c
 800e362:	3352      	adds	r3, #82	; 0x52
 800e364:	4618      	mov	r0, r3
 800e366:	f7fd ffef 	bl	800c348 <ld_dword>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4b05      	ldr	r3, [pc, #20]	; (800e384 <check_fs+0xa8>)
 800e36e:	429a      	cmp	r2, r3
 800e370:	d101      	bne.n	800e376 <check_fs+0x9a>
 800e372:	2300      	movs	r3, #0
 800e374:	e000      	b.n	800e378 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e376:	2302      	movs	r3, #2
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	00544146 	.word	0x00544146
 800e384:	33544146 	.word	0x33544146

0800e388 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b096      	sub	sp, #88	; 0x58
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	4613      	mov	r3, r2
 800e394:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	2200      	movs	r2, #0
 800e39a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7ff ff58 	bl	800e252 <get_ldnumber>
 800e3a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da01      	bge.n	800e3ae <find_volume+0x26>
 800e3aa:	230b      	movs	r3, #11
 800e3ac:	e26b      	b.n	800e886 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e3ae:	4ab0      	ldr	r2, [pc, #704]	; (800e670 <find_volume+0x2e8>)
 800e3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d101      	bne.n	800e3c2 <find_volume+0x3a>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	e261      	b.n	800e886 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	f023 0301 	bic.w	r3, r3, #1
 800e3ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d01a      	beq.n	800e40e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	785b      	ldrb	r3, [r3, #1]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fd fefd 	bl	800c1dc <disk_status>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10c      	bne.n	800e40e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <find_volume+0x82>
 800e3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3fe:	f003 0304 	and.w	r3, r3, #4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e406:	230a      	movs	r3, #10
 800e408:	e23d      	b.n	800e886 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800e40a:	2300      	movs	r3, #0
 800e40c:	e23b      	b.n	800e886 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e410:	2200      	movs	r2, #0
 800e412:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e416:	b2da      	uxtb	r2, r3
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	785b      	ldrb	r3, [r3, #1]
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fef5 	bl	800c210 <disk_initialize>
 800e426:	4603      	mov	r3, r0
 800e428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e42c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e438:	2303      	movs	r3, #3
 800e43a:	e224      	b.n	800e886 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d007      	beq.n	800e452 <find_volume+0xca>
 800e442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e446:	f003 0304 	and.w	r3, r3, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e44e:	230a      	movs	r3, #10
 800e450:	e219      	b.n	800e886 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	7858      	ldrb	r0, [r3, #1]
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	330c      	adds	r3, #12
 800e45a:	461a      	mov	r2, r3
 800e45c:	2102      	movs	r1, #2
 800e45e:	f7fd ff3d 	bl	800c2dc <disk_ioctl>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <find_volume+0xe4>
 800e468:	2301      	movs	r3, #1
 800e46a:	e20c      	b.n	800e886 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	899b      	ldrh	r3, [r3, #12]
 800e470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e474:	d80d      	bhi.n	800e492 <find_volume+0x10a>
 800e476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e478:	899b      	ldrh	r3, [r3, #12]
 800e47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e47e:	d308      	bcc.n	800e492 <find_volume+0x10a>
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	899b      	ldrh	r3, [r3, #12]
 800e484:	461a      	mov	r2, r3
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	899b      	ldrh	r3, [r3, #12]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	4013      	ands	r3, r2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <find_volume+0x10e>
 800e492:	2301      	movs	r3, #1
 800e494:	e1f7      	b.n	800e886 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e49a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e49c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e49e:	f7ff ff1d 	bl	800e2dc <check_fs>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d14b      	bne.n	800e548 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e4b4:	e01f      	b.n	800e4f6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4be:	011b      	lsls	r3, r3, #4
 800e4c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e4c4:	4413      	add	r3, r2
 800e4c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d006      	beq.n	800e4e0 <find_volume+0x158>
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fd ff36 	bl	800c348 <ld_dword>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	e000      	b.n	800e4e2 <find_volume+0x15a>
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e4ea:	440b      	add	r3, r1
 800e4ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d9dc      	bls.n	800e4b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <find_volume+0x184>
 800e506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e508:	3b01      	subs	r3, #1
 800e50a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e514:	4413      	add	r3, r2
 800e516:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e51a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d005      	beq.n	800e52e <find_volume+0x1a6>
 800e522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e526:	f7ff fed9 	bl	800e2dc <check_fs>
 800e52a:	4603      	mov	r3, r0
 800e52c:	e000      	b.n	800e530 <find_volume+0x1a8>
 800e52e:	2303      	movs	r3, #3
 800e530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d905      	bls.n	800e548 <find_volume+0x1c0>
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	3301      	adds	r3, #1
 800e540:	643b      	str	r3, [r7, #64]	; 0x40
 800e542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e544:	2b03      	cmp	r3, #3
 800e546:	d9e1      	bls.n	800e50c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e54c:	2b04      	cmp	r3, #4
 800e54e:	d101      	bne.n	800e554 <find_volume+0x1cc>
 800e550:	2301      	movs	r3, #1
 800e552:	e198      	b.n	800e886 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d901      	bls.n	800e560 <find_volume+0x1d8>
 800e55c:	230d      	movs	r3, #13
 800e55e:	e192      	b.n	800e886 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e562:	333c      	adds	r3, #60	; 0x3c
 800e564:	330b      	adds	r3, #11
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd fed6 	bl	800c318 <ld_word>
 800e56c:	4603      	mov	r3, r0
 800e56e:	461a      	mov	r2, r3
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	899b      	ldrh	r3, [r3, #12]
 800e574:	429a      	cmp	r2, r3
 800e576:	d001      	beq.n	800e57c <find_volume+0x1f4>
 800e578:	230d      	movs	r3, #13
 800e57a:	e184      	b.n	800e886 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	333c      	adds	r3, #60	; 0x3c
 800e580:	3316      	adds	r3, #22
 800e582:	4618      	mov	r0, r3
 800e584:	f7fd fec8 	bl	800c318 <ld_word>
 800e588:	4603      	mov	r3, r0
 800e58a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d106      	bne.n	800e5a0 <find_volume+0x218>
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	333c      	adds	r3, #60	; 0x3c
 800e596:	3324      	adds	r3, #36	; 0x24
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fd fed5 	bl	800c348 <ld_dword>
 800e59e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5a4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b2:	789b      	ldrb	r3, [r3, #2]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d005      	beq.n	800e5c4 <find_volume+0x23c>
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	789b      	ldrb	r3, [r3, #2]
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	d001      	beq.n	800e5c4 <find_volume+0x23c>
 800e5c0:	230d      	movs	r3, #13
 800e5c2:	e160      	b.n	800e886 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	789b      	ldrb	r3, [r3, #2]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5cc:	fb02 f303 	mul.w	r3, r2, r3
 800e5d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	895b      	ldrh	r3, [r3, #10]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d008      	beq.n	800e5f8 <find_volume+0x270>
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	895b      	ldrh	r3, [r3, #10]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	895b      	ldrh	r3, [r3, #10]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <find_volume+0x274>
 800e5f8:	230d      	movs	r3, #13
 800e5fa:	e144      	b.n	800e886 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	333c      	adds	r3, #60	; 0x3c
 800e600:	3311      	adds	r3, #17
 800e602:	4618      	mov	r0, r3
 800e604:	f7fd fe88 	bl	800c318 <ld_word>
 800e608:	4603      	mov	r3, r0
 800e60a:	461a      	mov	r2, r3
 800e60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	891b      	ldrh	r3, [r3, #8]
 800e614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e616:	8992      	ldrh	r2, [r2, #12]
 800e618:	0952      	lsrs	r2, r2, #5
 800e61a:	b292      	uxth	r2, r2
 800e61c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e620:	fb02 f201 	mul.w	r2, r2, r1
 800e624:	1a9b      	subs	r3, r3, r2
 800e626:	b29b      	uxth	r3, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d001      	beq.n	800e630 <find_volume+0x2a8>
 800e62c:	230d      	movs	r3, #13
 800e62e:	e12a      	b.n	800e886 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	333c      	adds	r3, #60	; 0x3c
 800e634:	3313      	adds	r3, #19
 800e636:	4618      	mov	r0, r3
 800e638:	f7fd fe6e 	bl	800c318 <ld_word>
 800e63c:	4603      	mov	r3, r0
 800e63e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <find_volume+0x2cc>
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	333c      	adds	r3, #60	; 0x3c
 800e64a:	3320      	adds	r3, #32
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fd fe7b 	bl	800c348 <ld_dword>
 800e652:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	333c      	adds	r3, #60	; 0x3c
 800e658:	330e      	adds	r3, #14
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fd fe5c 	bl	800c318 <ld_word>
 800e660:	4603      	mov	r3, r0
 800e662:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e666:	2b00      	cmp	r3, #0
 800e668:	d104      	bne.n	800e674 <find_volume+0x2ec>
 800e66a:	230d      	movs	r3, #13
 800e66c:	e10b      	b.n	800e886 <find_volume+0x4fe>
 800e66e:	bf00      	nop
 800e670:	20007b40 	.word	0x20007b40

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e674:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e678:	4413      	add	r3, r2
 800e67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67c:	8911      	ldrh	r1, [r2, #8]
 800e67e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e680:	8992      	ldrh	r2, [r2, #12]
 800e682:	0952      	lsrs	r2, r2, #5
 800e684:	b292      	uxth	r2, r2
 800e686:	fbb1 f2f2 	udiv	r2, r1, r2
 800e68a:	b292      	uxth	r2, r2
 800e68c:	4413      	add	r3, r2
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	429a      	cmp	r2, r3
 800e696:	d201      	bcs.n	800e69c <find_volume+0x314>
 800e698:	230d      	movs	r3, #13
 800e69a:	e0f4      	b.n	800e886 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e69c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6a4:	8952      	ldrh	r2, [r2, #10]
 800e6a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <find_volume+0x32e>
 800e6b2:	230d      	movs	r3, #13
 800e6b4:	e0e7      	b.n	800e886 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800e6b6:	2303      	movs	r3, #3
 800e6b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d802      	bhi.n	800e6cc <find_volume+0x344>
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d802      	bhi.n	800e6dc <find_volume+0x354>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	1c9a      	adds	r2, r3, #2
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e6ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ee:	441a      	add	r2, r3
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e6f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	441a      	add	r2, r3
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800e6fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e702:	2b03      	cmp	r3, #3
 800e704:	d11e      	bne.n	800e744 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	333c      	adds	r3, #60	; 0x3c
 800e70a:	332a      	adds	r3, #42	; 0x2a
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fd fe03 	bl	800c318 <ld_word>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <find_volume+0x394>
 800e718:	230d      	movs	r3, #13
 800e71a:	e0b4      	b.n	800e886 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	891b      	ldrh	r3, [r3, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <find_volume+0x3a0>
 800e724:	230d      	movs	r3, #13
 800e726:	e0ae      	b.n	800e886 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	333c      	adds	r3, #60	; 0x3c
 800e72c:	332c      	adds	r3, #44	; 0x2c
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fd fe0a 	bl	800c348 <ld_dword>
 800e734:	4602      	mov	r2, r0
 800e736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e738:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	647b      	str	r3, [r7, #68]	; 0x44
 800e742:	e01f      	b.n	800e784 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	891b      	ldrh	r3, [r3, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d101      	bne.n	800e750 <find_volume+0x3c8>
 800e74c:	230d      	movs	r3, #13
 800e74e:	e09a      	b.n	800e886 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e756:	441a      	add	r2, r3
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e760:	2b02      	cmp	r3, #2
 800e762:	d103      	bne.n	800e76c <find_volume+0x3e4>
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	6a1b      	ldr	r3, [r3, #32]
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	e00a      	b.n	800e782 <find_volume+0x3fa>
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	6a1a      	ldr	r2, [r3, #32]
 800e770:	4613      	mov	r3, r2
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	4413      	add	r3, r2
 800e776:	085a      	lsrs	r2, r3, #1
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	6a1b      	ldr	r3, [r3, #32]
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e782:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	899b      	ldrh	r3, [r3, #12]
 800e78c:	4619      	mov	r1, r3
 800e78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e790:	440b      	add	r3, r1
 800e792:	3b01      	subs	r3, #1
 800e794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e796:	8989      	ldrh	r1, [r1, #12]
 800e798:	fbb3 f3f1 	udiv	r3, r3, r1
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d201      	bcs.n	800e7a4 <find_volume+0x41c>
 800e7a0:	230d      	movs	r3, #13
 800e7a2:	e070      	b.n	800e886 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7aa:	619a      	str	r2, [r3, #24]
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ae:	699a      	ldr	r2, [r3, #24]
 800e7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	2280      	movs	r2, #128	; 0x80
 800e7b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d149      	bne.n	800e856 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	333c      	adds	r3, #60	; 0x3c
 800e7c6:	3330      	adds	r3, #48	; 0x30
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fd fda5 	bl	800c318 <ld_word>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d140      	bne.n	800e856 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7dc:	f7fe f84c 	bl	800c878 <move_window>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d137      	bne.n	800e856 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	333c      	adds	r3, #60	; 0x3c
 800e7f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fd fd8f 	bl	800c318 <ld_word>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e802:	429a      	cmp	r2, r3
 800e804:	d127      	bne.n	800e856 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	333c      	adds	r3, #60	; 0x3c
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fd fd9c 	bl	800c348 <ld_dword>
 800e810:	4602      	mov	r2, r0
 800e812:	4b1f      	ldr	r3, [pc, #124]	; (800e890 <find_volume+0x508>)
 800e814:	429a      	cmp	r2, r3
 800e816:	d11e      	bne.n	800e856 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	333c      	adds	r3, #60	; 0x3c
 800e81c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e820:	4618      	mov	r0, r3
 800e822:	f7fd fd91 	bl	800c348 <ld_dword>
 800e826:	4602      	mov	r2, r0
 800e828:	4b1a      	ldr	r3, [pc, #104]	; (800e894 <find_volume+0x50c>)
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d113      	bne.n	800e856 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	333c      	adds	r3, #60	; 0x3c
 800e832:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e836:	4618      	mov	r0, r3
 800e838:	f7fd fd86 	bl	800c348 <ld_dword>
 800e83c:	4602      	mov	r2, r0
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	333c      	adds	r3, #60	; 0x3c
 800e846:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fd fd7c 	bl	800c348 <ld_dword>
 800e850:	4602      	mov	r2, r0
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e85c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e85e:	4b0e      	ldr	r3, [pc, #56]	; (800e898 <find_volume+0x510>)
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	b29a      	uxth	r2, r3
 800e866:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <find_volume+0x510>)
 800e868:	801a      	strh	r2, [r3, #0]
 800e86a:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <find_volume+0x510>)
 800e86c:	881a      	ldrh	r2, [r3, #0]
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e874:	4a09      	ldr	r2, [pc, #36]	; (800e89c <find_volume+0x514>)
 800e876:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	2200      	movs	r2, #0
 800e87c:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e87e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e880:	f7fd ff92 	bl	800c7a8 <clear_lock>
#endif
	return FR_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3758      	adds	r7, #88	; 0x58
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	41615252 	.word	0x41615252
 800e894:	61417272 	.word	0x61417272
 800e898:	20007b44 	.word	0x20007b44
 800e89c:	20007b68 	.word	0x20007b68

0800e8a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e8aa:	2309      	movs	r3, #9
 800e8ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d01c      	beq.n	800e8ee <validate+0x4e>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d018      	beq.n	800e8ee <validate+0x4e>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d013      	beq.n	800e8ee <validate+0x4e>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	889a      	ldrh	r2, [r3, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	88db      	ldrh	r3, [r3, #6]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d10c      	bne.n	800e8ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	785b      	ldrb	r3, [r3, #1]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fd fc7e 	bl	800c1dc <disk_status>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <validate+0x4e>
			res = FR_OK;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e8ee:	7bfb      	ldrb	r3, [r7, #15]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d102      	bne.n	800e8fa <validate+0x5a>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	e000      	b.n	800e8fc <validate+0x5c>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	6013      	str	r3, [r2, #0]
	return res;
 800e900:	7bfb      	ldrb	r3, [r7, #15]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	4613      	mov	r3, r2
 800e918:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e91e:	f107 0310 	add.w	r3, r7, #16
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff fc95 	bl	800e252 <get_ldnumber>
 800e928:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	da01      	bge.n	800e934 <f_mount+0x28>
 800e930:	230b      	movs	r3, #11
 800e932:	e02b      	b.n	800e98c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e934:	4a17      	ldr	r2, [pc, #92]	; (800e994 <f_mount+0x88>)
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e93c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d005      	beq.n	800e950 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e944:	69b8      	ldr	r0, [r7, #24]
 800e946:	f7fd ff2f 	bl	800c7a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2200      	movs	r2, #0
 800e94e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	490d      	ldr	r1, [pc, #52]	; (800e994 <f_mount+0x88>)
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <f_mount+0x66>
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d001      	beq.n	800e976 <f_mount+0x6a>
 800e972:	2300      	movs	r3, #0
 800e974:	e00a      	b.n	800e98c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e976:	f107 010c 	add.w	r1, r7, #12
 800e97a:	f107 0308 	add.w	r3, r7, #8
 800e97e:	2200      	movs	r2, #0
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff fd01 	bl	800e388 <find_volume>
 800e986:	4603      	mov	r3, r0
 800e988:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3720      	adds	r7, #32
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20007b40 	.word	0x20007b40

0800e998 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b09a      	sub	sp, #104	; 0x68
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <f_open+0x18>
 800e9ac:	2309      	movs	r3, #9
 800e9ae:	e1bb      	b.n	800ed28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e9b0:	79fb      	ldrb	r3, [r7, #7]
 800e9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e9b8:	79fa      	ldrb	r2, [r7, #7]
 800e9ba:	f107 0114 	add.w	r1, r7, #20
 800e9be:	f107 0308 	add.w	r3, r7, #8
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7ff fce0 	bl	800e388 <find_volume>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e9ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f040 819f 	bne.w	800ed16 <f_open+0x37e>
		dj.obj.fs = fs;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	f107 0318 	add.w	r3, r7, #24
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff fb9f 	bl	800e128 <follow_path>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e9f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d11a      	bne.n	800ea2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e9f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9fc:	b25b      	sxtb	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	da03      	bge.n	800ea0a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ea02:	2306      	movs	r3, #6
 800ea04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea08:	e011      	b.n	800ea2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	f023 0301 	bic.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	bf14      	ite	ne
 800ea14:	2301      	movne	r3, #1
 800ea16:	2300      	moveq	r3, #0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	f107 0318 	add.w	r3, r7, #24
 800ea20:	4611      	mov	r1, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fd fd78 	bl	800c518 <chk_lock>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	f003 031c 	and.w	r3, r3, #28
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d07f      	beq.n	800eb38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ea38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d017      	beq.n	800ea70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ea40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d10e      	bne.n	800ea66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ea48:	f7fd fdc2 	bl	800c5d0 <enq_lock>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d006      	beq.n	800ea60 <f_open+0xc8>
 800ea52:	f107 0318 	add.w	r3, r7, #24
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff f820 	bl	800da9c <dir_register>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	e000      	b.n	800ea62 <f_open+0xca>
 800ea60:	2312      	movs	r3, #18
 800ea62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	f043 0308 	orr.w	r3, r3, #8
 800ea6c:	71fb      	strb	r3, [r7, #7]
 800ea6e:	e010      	b.n	800ea92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ea70:	7fbb      	ldrb	r3, [r7, #30]
 800ea72:	f003 0311 	and.w	r3, r3, #17
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d003      	beq.n	800ea82 <f_open+0xea>
					res = FR_DENIED;
 800ea7a:	2307      	movs	r3, #7
 800ea7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea80:	e007      	b.n	800ea92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ea82:	79fb      	ldrb	r3, [r7, #7]
 800ea84:	f003 0304 	and.w	r3, r3, #4
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <f_open+0xfa>
 800ea8c:	2308      	movs	r3, #8
 800ea8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ea92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d168      	bne.n	800eb6c <f_open+0x1d4>
 800ea9a:	79fb      	ldrb	r3, [r7, #7]
 800ea9c:	f003 0308 	and.w	r3, r3, #8
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d063      	beq.n	800eb6c <f_open+0x1d4>
				dw = GET_FATTIME();
 800eaa4:	f7fd f94a 	bl	800bd3c <get_fattime>
 800eaa8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	330e      	adds	r3, #14
 800eaae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fc87 	bl	800c3c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	3316      	adds	r3, #22
 800eaba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd fc81 	bl	800c3c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac4:	330b      	adds	r3, #11
 800eac6:	2220      	movs	r2, #32
 800eac8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eace:	4611      	mov	r1, r2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fe fc50 	bl	800d376 <ld_clust>
 800ead6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eadc:	2200      	movs	r2, #0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fc68 	bl	800d3b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae6:	331c      	adds	r3, #28
 800eae8:	2100      	movs	r1, #0
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fd fc6a 	bl	800c3c4 <st_dword>
					fs->wflag = 1;
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eaf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d037      	beq.n	800eb6c <f_open+0x1d4>
						dw = fs->winsect;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb00:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800eb02:	f107 0318 	add.w	r3, r7, #24
 800eb06:	2200      	movs	r2, #0
 800eb08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe f958 	bl	800cdc0 <remove_chain>
 800eb10:	4603      	mov	r3, r0
 800eb12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800eb16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d126      	bne.n	800eb6c <f_open+0x1d4>
							res = move_window(fs, dw);
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fd fea8 	bl	800c878 <move_window>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb32:	3a01      	subs	r2, #1
 800eb34:	615a      	str	r2, [r3, #20]
 800eb36:	e019      	b.n	800eb6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eb38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d115      	bne.n	800eb6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eb40:	7fbb      	ldrb	r3, [r7, #30]
 800eb42:	f003 0310 	and.w	r3, r3, #16
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <f_open+0x1ba>
					res = FR_NO_FILE;
 800eb4a:	2304      	movs	r3, #4
 800eb4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb50:	e00c      	b.n	800eb6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eb52:	79fb      	ldrb	r3, [r7, #7]
 800eb54:	f003 0302 	and.w	r3, r3, #2
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d007      	beq.n	800eb6c <f_open+0x1d4>
 800eb5c:	7fbb      	ldrb	r3, [r7, #30]
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <f_open+0x1d4>
						res = FR_DENIED;
 800eb66:	2307      	movs	r3, #7
 800eb68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800eb6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d128      	bne.n	800ebc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	f003 0308 	and.w	r3, r3, #8
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800eb7e:	79fb      	ldrb	r3, [r7, #7]
 800eb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800eb8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	f023 0301 	bic.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	bf14      	ite	ne
 800eb9e:	2301      	movne	r3, #1
 800eba0:	2300      	moveq	r3, #0
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	461a      	mov	r2, r3
 800eba6:	f107 0318 	add.w	r3, r7, #24
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fd fd31 	bl	800c614 <inc_lock>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d102      	bne.n	800ebc6 <f_open+0x22e>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ebc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f040 80a3 	bne.w	800ed16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe fbcd 	bl	800d376 <ld_clust>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	331c      	adds	r3, #28
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fd fbae 	bl	800c348 <ld_dword>
 800ebec:	4602      	mov	r2, r0
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	88da      	ldrh	r2, [r3, #6]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	79fa      	ldrb	r2, [r7, #7]
 800ec0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3330      	adds	r3, #48	; 0x30
 800ec22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec26:	2100      	movs	r1, #0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fd fc18 	bl	800c45e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	f003 0320 	and.w	r3, r3, #32
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d06e      	beq.n	800ed16 <f_open+0x37e>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d06a      	beq.n	800ed16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	68da      	ldr	r2, [r3, #12]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	895b      	ldrh	r3, [r3, #10]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	899b      	ldrh	r3, [r3, #12]
 800ec52:	fb03 f302 	mul.w	r3, r3, r2
 800ec56:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec64:	e016      	b.n	800ec94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fd fec1 	bl	800c9f2 <get_fat>
 800ec70:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ec72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d802      	bhi.n	800ec7e <f_open+0x2e6>
 800ec78:	2302      	movs	r3, #2
 800ec7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec84:	d102      	bne.n	800ec8c <f_open+0x2f4>
 800ec86:	2301      	movs	r3, #1
 800ec88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d103      	bne.n	800eca4 <f_open+0x30c>
 800ec9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d8e0      	bhi.n	800ec66 <f_open+0x2ce>
				}
				fp->clust = clst;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eca8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ecaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d131      	bne.n	800ed16 <f_open+0x37e>
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	899b      	ldrh	r3, [r3, #12]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecba:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecbe:	fb02 f201 	mul.w	r2, r2, r1
 800ecc2:	1a9b      	subs	r3, r3, r2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d026      	beq.n	800ed16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fd fe71 	bl	800c9b4 <clust2sect>
 800ecd2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ecd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d103      	bne.n	800ece2 <f_open+0x34a>
						res = FR_INT_ERR;
 800ecda:	2302      	movs	r3, #2
 800ecdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ece0:	e019      	b.n	800ed16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	899b      	ldrh	r3, [r3, #12]
 800ece6:	461a      	mov	r2, r3
 800ece8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecea:	fbb3 f2f2 	udiv	r2, r3, r2
 800ecee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecf0:	441a      	add	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	7858      	ldrb	r0, [r3, #1]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6a1a      	ldr	r2, [r3, #32]
 800ed04:	2301      	movs	r3, #1
 800ed06:	f7fd faa9 	bl	800c25c <disk_read>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d002      	beq.n	800ed16 <f_open+0x37e>
 800ed10:	2301      	movs	r3, #1
 800ed12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ed16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <f_open+0x38c>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2200      	movs	r2, #0
 800ed22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3768      	adds	r7, #104	; 0x68
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08e      	sub	sp, #56	; 0x38
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f107 0214 	add.w	r2, r7, #20
 800ed4e:	4611      	mov	r1, r2
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff fda5 	bl	800e8a0 <validate>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d107      	bne.n	800ed74 <f_read+0x44>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	7d5b      	ldrb	r3, [r3, #21]
 800ed68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <f_read+0x4a>
 800ed74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed78:	e135      	b.n	800efe6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	7d1b      	ldrb	r3, [r3, #20]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <f_read+0x5a>
 800ed86:	2307      	movs	r3, #7
 800ed88:	e12d      	b.n	800efe6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	68da      	ldr	r2, [r3, #12]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	f240 811e 	bls.w	800efdc <f_read+0x2ac>
 800eda0:	6a3b      	ldr	r3, [r7, #32]
 800eda2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eda4:	e11a      	b.n	800efdc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	8992      	ldrh	r2, [r2, #12]
 800edae:	fbb3 f1f2 	udiv	r1, r3, r2
 800edb2:	fb02 f201 	mul.w	r2, r2, r1
 800edb6:	1a9b      	subs	r3, r3, r2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f040 80d5 	bne.w	800ef68 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	8992      	ldrh	r2, [r2, #12]
 800edc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	8952      	ldrh	r2, [r2, #10]
 800edce:	3a01      	subs	r2, #1
 800edd0:	4013      	ands	r3, r2
 800edd2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d12f      	bne.n	800ee3a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	699b      	ldr	r3, [r3, #24]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	633b      	str	r3, [r7, #48]	; 0x30
 800ede8:	e013      	b.n	800ee12 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d007      	beq.n	800ee02 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	699b      	ldr	r3, [r3, #24]
 800edf6:	4619      	mov	r1, r3
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f7fe f8de 	bl	800cfba <clmt_clust>
 800edfe:	6338      	str	r0, [r7, #48]	; 0x30
 800ee00:	e007      	b.n	800ee12 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	f7fd fdf1 	bl	800c9f2 <get_fat>
 800ee10:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d804      	bhi.n	800ee22 <f_read+0xf2>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	755a      	strb	r2, [r3, #21]
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e0e1      	b.n	800efe6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee28:	d104      	bne.n	800ee34 <f_read+0x104>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	755a      	strb	r2, [r3, #21]
 800ee30:	2301      	movs	r3, #1
 800ee32:	e0d8      	b.n	800efe6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee38:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	69db      	ldr	r3, [r3, #28]
 800ee40:	4619      	mov	r1, r3
 800ee42:	4610      	mov	r0, r2
 800ee44:	f7fd fdb6 	bl	800c9b4 <clust2sect>
 800ee48:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d104      	bne.n	800ee5a <f_read+0x12a>
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2202      	movs	r2, #2
 800ee54:	755a      	strb	r2, [r3, #21]
 800ee56:	2302      	movs	r3, #2
 800ee58:	e0c5      	b.n	800efe6 <f_read+0x2b6>
			sect += csect;
 800ee5a:	69ba      	ldr	r2, [r7, #24]
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	4413      	add	r3, r2
 800ee60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	899b      	ldrh	r3, [r3, #12]
 800ee66:	461a      	mov	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d041      	beq.n	800eefa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee76:	69fa      	ldr	r2, [r7, #28]
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	4413      	add	r3, r2
 800ee7c:	697a      	ldr	r2, [r7, #20]
 800ee7e:	8952      	ldrh	r2, [r2, #10]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d905      	bls.n	800ee90 <f_read+0x160>
					cc = fs->csize - csect;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	895b      	ldrh	r3, [r3, #10]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	7858      	ldrb	r0, [r3, #1]
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee9a:	f7fd f9df 	bl	800c25c <disk_read>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d004      	beq.n	800eeae <f_read+0x17e>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2201      	movs	r2, #1
 800eea8:	755a      	strb	r2, [r3, #21]
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e09b      	b.n	800efe6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7d1b      	ldrb	r3, [r3, #20]
 800eeb2:	b25b      	sxtb	r3, r3
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	da18      	bge.n	800eeea <f_read+0x1ba>
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6a1a      	ldr	r2, [r3, #32]
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d911      	bls.n	800eeea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6a1a      	ldr	r2, [r3, #32]
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	8992      	ldrh	r2, [r2, #12]
 800eed2:	fb02 f303 	mul.w	r3, r2, r3
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	18d0      	adds	r0, r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	899b      	ldrh	r3, [r3, #12]
 800eee4:	461a      	mov	r2, r3
 800eee6:	f7fd fa99 	bl	800c41c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	899b      	ldrh	r3, [r3, #12]
 800eeee:	461a      	mov	r2, r3
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	fb02 f303 	mul.w	r3, r2, r3
 800eef6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eef8:	e05c      	b.n	800efb4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a1b      	ldr	r3, [r3, #32]
 800eefe:	69ba      	ldr	r2, [r7, #24]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d02e      	beq.n	800ef62 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	7d1b      	ldrb	r3, [r3, #20]
 800ef08:	b25b      	sxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	da18      	bge.n	800ef40 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	7858      	ldrb	r0, [r3, #1]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6a1a      	ldr	r2, [r3, #32]
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	f7fd f9bd 	bl	800c29c <disk_write>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <f_read+0x202>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	755a      	strb	r2, [r3, #21]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e059      	b.n	800efe6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	7858      	ldrb	r0, [r3, #1]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	69ba      	ldr	r2, [r7, #24]
 800ef4e:	f7fd f985 	bl	800c25c <disk_read>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d004      	beq.n	800ef62 <f_read+0x232>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	755a      	strb	r2, [r3, #21]
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e041      	b.n	800efe6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	899b      	ldrh	r3, [r3, #12]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	697a      	ldr	r2, [r7, #20]
 800ef74:	8992      	ldrh	r2, [r2, #12]
 800ef76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef7a:	fb02 f201 	mul.w	r2, r2, r1
 800ef7e:	1a9b      	subs	r3, r3, r2
 800ef80:	1ac3      	subs	r3, r0, r3
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ef84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d901      	bls.n	800ef90 <f_read+0x260>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	699b      	ldr	r3, [r3, #24]
 800ef9a:	697a      	ldr	r2, [r7, #20]
 800ef9c:	8992      	ldrh	r2, [r2, #12]
 800ef9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800efa2:	fb02 f200 	mul.w	r2, r2, r0
 800efa6:	1a9b      	subs	r3, r3, r2
 800efa8:	440b      	add	r3, r1
 800efaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efac:	4619      	mov	r1, r3
 800efae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efb0:	f7fd fa34 	bl	800c41c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800efb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	4413      	add	r3, r2
 800efba:	627b      	str	r3, [r7, #36]	; 0x24
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	699a      	ldr	r2, [r3, #24]
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	441a      	add	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	619a      	str	r2, [r3, #24]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efce:	441a      	add	r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f47f aee1 	bne.w	800eda6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3738      	adds	r7, #56	; 0x38
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b08c      	sub	sp, #48	; 0x30
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	60f8      	str	r0, [r7, #12]
 800eff6:	60b9      	str	r1, [r7, #8]
 800eff8:	607a      	str	r2, [r7, #4]
 800effa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2200      	movs	r2, #0
 800f004:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f107 0210 	add.w	r2, r7, #16
 800f00c:	4611      	mov	r1, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff fc46 	bl	800e8a0 <validate>
 800f014:	4603      	mov	r3, r0
 800f016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d107      	bne.n	800f032 <f_write+0x44>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	7d5b      	ldrb	r3, [r3, #21]
 800f026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d002      	beq.n	800f038 <f_write+0x4a>
 800f032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f036:	e16a      	b.n	800f30e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	7d1b      	ldrb	r3, [r3, #20]
 800f03c:	f003 0302 	and.w	r3, r3, #2
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <f_write+0x5a>
 800f044:	2307      	movs	r3, #7
 800f046:	e162      	b.n	800f30e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	699a      	ldr	r2, [r3, #24]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	441a      	add	r2, r3
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	429a      	cmp	r2, r3
 800f056:	f080 814c 	bcs.w	800f2f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	43db      	mvns	r3, r3
 800f060:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f062:	e146      	b.n	800f2f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	699b      	ldr	r3, [r3, #24]
 800f068:	693a      	ldr	r2, [r7, #16]
 800f06a:	8992      	ldrh	r2, [r2, #12]
 800f06c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f070:	fb02 f201 	mul.w	r2, r2, r1
 800f074:	1a9b      	subs	r3, r3, r2
 800f076:	2b00      	cmp	r3, #0
 800f078:	f040 80f1 	bne.w	800f25e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	693a      	ldr	r2, [r7, #16]
 800f082:	8992      	ldrh	r2, [r2, #12]
 800f084:	fbb3 f3f2 	udiv	r3, r3, r2
 800f088:	693a      	ldr	r2, [r7, #16]
 800f08a:	8952      	ldrh	r2, [r2, #10]
 800f08c:	3a01      	subs	r2, #1
 800f08e:	4013      	ands	r3, r2
 800f090:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d143      	bne.n	800f120 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	699b      	ldr	r3, [r3, #24]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10c      	bne.n	800f0ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d11a      	bne.n	800f0e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fd feea 	bl	800ce8a <create_chain>
 800f0b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f0b8:	e013      	b.n	800f0e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f7fd ff76 	bl	800cfba <clmt_clust>
 800f0ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800f0d0:	e007      	b.n	800f0e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	69db      	ldr	r3, [r3, #28]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4610      	mov	r0, r2
 800f0dc:	f7fd fed5 	bl	800ce8a <create_chain>
 800f0e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f000 8109 	beq.w	800f2fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d104      	bne.n	800f0fa <f_write+0x10c>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	755a      	strb	r2, [r3, #21]
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	e109      	b.n	800f30e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f100:	d104      	bne.n	800f10c <f_write+0x11e>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2201      	movs	r2, #1
 800f106:	755a      	strb	r2, [r3, #21]
 800f108:	2301      	movs	r3, #1
 800f10a:	e100      	b.n	800f30e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f110:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d102      	bne.n	800f120 <f_write+0x132>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f11e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
 800f124:	b25b      	sxtb	r3, r3
 800f126:	2b00      	cmp	r3, #0
 800f128:	da18      	bge.n	800f15c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	7858      	ldrb	r0, [r3, #1]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a1a      	ldr	r2, [r3, #32]
 800f138:	2301      	movs	r3, #1
 800f13a:	f7fd f8af 	bl	800c29c <disk_write>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d004      	beq.n	800f14e <f_write+0x160>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2201      	movs	r2, #1
 800f148:	755a      	strb	r2, [r3, #21]
 800f14a:	2301      	movs	r3, #1
 800f14c:	e0df      	b.n	800f30e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	7d1b      	ldrb	r3, [r3, #20]
 800f152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f156:	b2da      	uxtb	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f15c:	693a      	ldr	r2, [r7, #16]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	69db      	ldr	r3, [r3, #28]
 800f162:	4619      	mov	r1, r3
 800f164:	4610      	mov	r0, r2
 800f166:	f7fd fc25 	bl	800c9b4 <clust2sect>
 800f16a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d104      	bne.n	800f17c <f_write+0x18e>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2202      	movs	r2, #2
 800f176:	755a      	strb	r2, [r3, #21]
 800f178:	2302      	movs	r3, #2
 800f17a:	e0c8      	b.n	800f30e <f_write+0x320>
			sect += csect;
 800f17c:	697a      	ldr	r2, [r7, #20]
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	4413      	add	r3, r2
 800f182:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	899b      	ldrh	r3, [r3, #12]
 800f188:	461a      	mov	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f190:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d043      	beq.n	800f220 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f198:	69ba      	ldr	r2, [r7, #24]
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	4413      	add	r3, r2
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	8952      	ldrh	r2, [r2, #10]
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d905      	bls.n	800f1b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	895b      	ldrh	r3, [r3, #10]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	7858      	ldrb	r0, [r3, #1]
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	69f9      	ldr	r1, [r7, #28]
 800f1bc:	f7fd f86e 	bl	800c29c <disk_write>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <f_write+0x1e2>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	755a      	strb	r2, [r3, #21]
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e09e      	b.n	800f30e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6a1a      	ldr	r2, [r3, #32]
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	6a3a      	ldr	r2, [r7, #32]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d918      	bls.n	800f210 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6a1a      	ldr	r2, [r3, #32]
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	8992      	ldrh	r2, [r2, #12]
 800f1f0:	fb02 f303 	mul.w	r3, r2, r3
 800f1f4:	69fa      	ldr	r2, [r7, #28]
 800f1f6:	18d1      	adds	r1, r2, r3
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	899b      	ldrh	r3, [r3, #12]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	f7fd f90d 	bl	800c41c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	7d1b      	ldrb	r3, [r3, #20]
 800f206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f20a:	b2da      	uxtb	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	899b      	ldrh	r3, [r3, #12]
 800f214:	461a      	mov	r2, r3
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	fb02 f303 	mul.w	r3, r2, r3
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f21e:	e04b      	b.n	800f2b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6a1b      	ldr	r3, [r3, #32]
 800f224:	697a      	ldr	r2, [r7, #20]
 800f226:	429a      	cmp	r2, r3
 800f228:	d016      	beq.n	800f258 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	699a      	ldr	r2, [r3, #24]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f232:	429a      	cmp	r2, r3
 800f234:	d210      	bcs.n	800f258 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	7858      	ldrb	r0, [r3, #1]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f240:	2301      	movs	r3, #1
 800f242:	697a      	ldr	r2, [r7, #20]
 800f244:	f7fd f80a 	bl	800c25c <disk_read>
 800f248:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d004      	beq.n	800f258 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2201      	movs	r2, #1
 800f252:	755a      	strb	r2, [r3, #21]
 800f254:	2301      	movs	r3, #1
 800f256:	e05a      	b.n	800f30e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	899b      	ldrh	r3, [r3, #12]
 800f262:	4618      	mov	r0, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	8992      	ldrh	r2, [r2, #12]
 800f26c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f270:	fb02 f201 	mul.w	r2, r2, r1
 800f274:	1a9b      	subs	r3, r3, r2
 800f276:	1ac3      	subs	r3, r0, r3
 800f278:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d901      	bls.n	800f286 <f_write+0x298>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	8992      	ldrh	r2, [r2, #12]
 800f294:	fbb3 f0f2 	udiv	r0, r3, r2
 800f298:	fb02 f200 	mul.w	r2, r2, r0
 800f29c:	1a9b      	subs	r3, r3, r2
 800f29e:	440b      	add	r3, r1
 800f2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a2:	69f9      	ldr	r1, [r7, #28]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fd f8b9 	bl	800c41c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	7d1b      	ldrb	r3, [r3, #20]
 800f2ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f2b8:	69fa      	ldr	r2, [r7, #28]
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2bc:	4413      	add	r3, r2
 800f2be:	61fb      	str	r3, [r7, #28]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	699a      	ldr	r2, [r3, #24]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	441a      	add	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	619a      	str	r2, [r3, #24]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	68da      	ldr	r2, [r3, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	bf38      	it	cc
 800f2d8:	461a      	movcc	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	60da      	str	r2, [r3, #12]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	441a      	add	r2, r3
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f47f aeb5 	bne.w	800f064 <f_write+0x76>
 800f2fa:	e000      	b.n	800f2fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f2fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	7d1b      	ldrb	r3, [r3, #20]
 800f302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f306:	b2da      	uxtb	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3730      	adds	r7, #48	; 0x30
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}

0800f316 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b086      	sub	sp, #24
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f107 0208 	add.w	r2, r7, #8
 800f324:	4611      	mov	r1, r2
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff faba 	bl	800e8a0 <validate>
 800f32c:	4603      	mov	r3, r0
 800f32e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f330:	7dfb      	ldrb	r3, [r7, #23]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d168      	bne.n	800f408 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	7d1b      	ldrb	r3, [r3, #20]
 800f33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d062      	beq.n	800f408 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	7d1b      	ldrb	r3, [r3, #20]
 800f346:	b25b      	sxtb	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da15      	bge.n	800f378 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	7858      	ldrb	r0, [r3, #1]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a1a      	ldr	r2, [r3, #32]
 800f35a:	2301      	movs	r3, #1
 800f35c:	f7fc ff9e 	bl	800c29c <disk_write>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <f_sync+0x54>
 800f366:	2301      	movs	r3, #1
 800f368:	e04f      	b.n	800f40a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	7d1b      	ldrb	r3, [r3, #20]
 800f36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f372:	b2da      	uxtb	r2, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f378:	f7fc fce0 	bl	800bd3c <get_fattime>
 800f37c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f37e:	68ba      	ldr	r2, [r7, #8]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f7fd fa76 	bl	800c878 <move_window>
 800f38c:	4603      	mov	r3, r0
 800f38e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f390:	7dfb      	ldrb	r3, [r7, #23]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d138      	bne.n	800f408 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f39a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	330b      	adds	r3, #11
 800f3a0:	781a      	ldrb	r2, [r3, #0]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	330b      	adds	r3, #11
 800f3a6:	f042 0220 	orr.w	r2, r2, #32
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6818      	ldr	r0, [r3, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	68f9      	ldr	r1, [r7, #12]
 800f3ba:	f7fd fffb 	bl	800d3b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f103 021c 	add.w	r2, r3, #28
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fc fffa 	bl	800c3c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	3316      	adds	r3, #22
 800f3d4:	6939      	ldr	r1, [r7, #16]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fc fff4 	bl	800c3c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	3312      	adds	r3, #18
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fc ffd3 	bl	800c38e <st_word>
					fs->wflag = 1;
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fd fa6f 	bl	800c8d4 <sync_fs>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	7d1b      	ldrb	r3, [r3, #20]
 800f3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f402:	b2da      	uxtb	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f408:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3718      	adds	r7, #24
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b084      	sub	sp, #16
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff ff7b 	bl	800f316 <f_sync>
 800f420:	4603      	mov	r3, r0
 800f422:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d118      	bne.n	800f45c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f107 0208 	add.w	r2, r7, #8
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff fa34 	bl	800e8a0 <validate>
 800f438:	4603      	mov	r3, r0
 800f43a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10c      	bne.n	800f45c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	4618      	mov	r0, r3
 800f448:	f7fd f972 	bl	800c730 <dec_lock>
 800f44c:	4603      	mov	r3, r0
 800f44e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f450:	7bfb      	ldrb	r3, [r7, #15]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d102      	bne.n	800f45c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f466:	b590      	push	{r4, r7, lr}
 800f468:	b093      	sub	sp, #76	; 0x4c
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f46e:	f107 010c 	add.w	r1, r7, #12
 800f472:	1d3b      	adds	r3, r7, #4
 800f474:	2200      	movs	r2, #0
 800f476:	4618      	mov	r0, r3
 800f478:	f7fe ff86 	bl	800e388 <find_volume>
 800f47c:	4603      	mov	r3, r0
 800f47e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800f482:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f486:	2b00      	cmp	r3, #0
 800f488:	d131      	bne.n	800f4ee <f_chdir+0x88>
		dj.obj.fs = fs;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	f107 0310 	add.w	r3, r7, #16
 800f494:	4611      	mov	r1, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe fe46 	bl	800e128 <follow_path>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800f4a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d11a      	bne.n	800f4e0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f4aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f4ae:	b25b      	sxtb	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da03      	bge.n	800f4bc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	69ba      	ldr	r2, [r7, #24]
 800f4b8:	61da      	str	r2, [r3, #28]
 800f4ba:	e011      	b.n	800f4e0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800f4bc:	7dbb      	ldrb	r3, [r7, #22]
 800f4be:	f003 0310 	and.w	r3, r3, #16
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d009      	beq.n	800f4da <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ca:	68fc      	ldr	r4, [r7, #12]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fd ff51 	bl	800d376 <ld_clust>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	61e3      	str	r3, [r4, #28]
 800f4d8:	e002      	b.n	800f4e0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800f4da:	2305      	movs	r3, #5
 800f4dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f4e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f4e4:	2b04      	cmp	r3, #4
 800f4e6:	d102      	bne.n	800f4ee <f_chdir+0x88>
 800f4e8:	2305      	movs	r3, #5
 800f4ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800f4ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	374c      	adds	r7, #76	; 0x4c
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd90      	pop	{r4, r7, pc}

0800f4fa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b090      	sub	sp, #64	; 0x40
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f107 0208 	add.w	r2, r7, #8
 800f50a:	4611      	mov	r1, r2
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff f9c7 	bl	800e8a0 <validate>
 800f512:	4603      	mov	r3, r0
 800f514:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f518:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d103      	bne.n	800f528 <f_lseek+0x2e>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	7d5b      	ldrb	r3, [r3, #21]
 800f524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <f_lseek+0x3c>
 800f530:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f534:	e201      	b.n	800f93a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f000 80d9 	beq.w	800f6f2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d15a      	bne.n	800f5fe <f_lseek+0x104>
			tbl = fp->cltbl;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f54c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	1d1a      	adds	r2, r3, #4
 800f552:	627a      	str	r2, [r7, #36]	; 0x24
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	617b      	str	r3, [r7, #20]
 800f558:	2302      	movs	r3, #2
 800f55a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	2b00      	cmp	r3, #0
 800f566:	d03a      	beq.n	800f5de <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56a:	613b      	str	r3, [r7, #16]
 800f56c:	2300      	movs	r3, #0
 800f56e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	3302      	adds	r3, #2
 800f574:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	3301      	adds	r3, #1
 800f57e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f584:	4618      	mov	r0, r3
 800f586:	f7fd fa34 	bl	800c9f2 <get_fat>
 800f58a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d804      	bhi.n	800f59c <f_lseek+0xa2>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2202      	movs	r2, #2
 800f596:	755a      	strb	r2, [r3, #21]
 800f598:	2302      	movs	r3, #2
 800f59a:	e1ce      	b.n	800f93a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a2:	d104      	bne.n	800f5ae <f_lseek+0xb4>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	755a      	strb	r2, [r3, #21]
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e1c5      	b.n	800f93a <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d0de      	beq.n	800f576 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d809      	bhi.n	800f5d4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	1d1a      	adds	r2, r3, #4
 800f5c4:	627a      	str	r2, [r7, #36]	; 0x24
 800f5c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	1d1a      	adds	r2, r3, #4
 800f5ce:	627a      	str	r2, [r7, #36]	; 0x24
 800f5d0:	693a      	ldr	r2, [r7, #16]
 800f5d2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d3c4      	bcc.n	800f568 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5e4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d803      	bhi.n	800f5f6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	e19f      	b.n	800f936 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f5f6:	2311      	movs	r3, #17
 800f5f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f5fc:	e19b      	b.n	800f936 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	429a      	cmp	r2, r3
 800f606:	d902      	bls.n	800f60e <f_lseek+0x114>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 818d 	beq.w	800f936 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	3b01      	subs	r3, #1
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7fd fcc9 	bl	800cfba <clmt_clust>
 800f628:	4602      	mov	r2, r0
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	4619      	mov	r1, r3
 800f636:	4610      	mov	r0, r2
 800f638:	f7fd f9bc 	bl	800c9b4 <clust2sect>
 800f63c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <f_lseek+0x154>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2202      	movs	r2, #2
 800f648:	755a      	strb	r2, [r3, #21]
 800f64a:	2302      	movs	r3, #2
 800f64c:	e175      	b.n	800f93a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	3b01      	subs	r3, #1
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	8992      	ldrh	r2, [r2, #12]
 800f656:	fbb3 f3f2 	udiv	r3, r3, r2
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	8952      	ldrh	r2, [r2, #10]
 800f65e:	3a01      	subs	r2, #1
 800f660:	4013      	ands	r3, r2
 800f662:	69ba      	ldr	r2, [r7, #24]
 800f664:	4413      	add	r3, r2
 800f666:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	8992      	ldrh	r2, [r2, #12]
 800f670:	fbb3 f1f2 	udiv	r1, r3, r2
 800f674:	fb02 f201 	mul.w	r2, r2, r1
 800f678:	1a9b      	subs	r3, r3, r2
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 815b 	beq.w	800f936 <f_lseek+0x43c>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6a1b      	ldr	r3, [r3, #32]
 800f684:	69ba      	ldr	r2, [r7, #24]
 800f686:	429a      	cmp	r2, r3
 800f688:	f000 8155 	beq.w	800f936 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	7d1b      	ldrb	r3, [r3, #20]
 800f690:	b25b      	sxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	da18      	bge.n	800f6c8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	7858      	ldrb	r0, [r3, #1]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a1a      	ldr	r2, [r3, #32]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	f7fc fdf9 	bl	800c29c <disk_write>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <f_lseek+0x1c0>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	755a      	strb	r2, [r3, #21]
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e13f      	b.n	800f93a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	7d1b      	ldrb	r3, [r3, #20]
 800f6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6c2:	b2da      	uxtb	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	7858      	ldrb	r0, [r3, #1]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	f7fc fdc1 	bl	800c25c <disk_read>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d004      	beq.n	800f6ea <f_lseek+0x1f0>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	755a      	strb	r2, [r3, #21]
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e127      	b.n	800f93a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	69ba      	ldr	r2, [r7, #24]
 800f6ee:	621a      	str	r2, [r3, #32]
 800f6f0:	e121      	b.n	800f936 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	683a      	ldr	r2, [r7, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d908      	bls.n	800f70e <f_lseek+0x214>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	7d1b      	ldrb	r3, [r3, #20]
 800f700:	f003 0302 	and.w	r3, r3, #2
 800f704:	2b00      	cmp	r3, #0
 800f706:	d102      	bne.n	800f70e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	699b      	ldr	r3, [r3, #24]
 800f712:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f714:	2300      	movs	r3, #0
 800f716:	637b      	str	r3, [r7, #52]	; 0x34
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f71c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80b5 	beq.w	800f890 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	895b      	ldrh	r3, [r3, #10]
 800f72a:	461a      	mov	r2, r3
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	899b      	ldrh	r3, [r3, #12]
 800f730:	fb03 f302 	mul.w	r3, r3, r2
 800f734:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f736:	6a3b      	ldr	r3, [r7, #32]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d01b      	beq.n	800f774 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	1e5a      	subs	r2, r3, #1
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	fbb2 f2f3 	udiv	r2, r2, r3
 800f746:	6a3b      	ldr	r3, [r7, #32]
 800f748:	1e59      	subs	r1, r3, #1
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f750:	429a      	cmp	r2, r3
 800f752:	d30f      	bcc.n	800f774 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f754:	6a3b      	ldr	r3, [r7, #32]
 800f756:	1e5a      	subs	r2, r3, #1
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	425b      	negs	r3, r3
 800f75c:	401a      	ands	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	69db      	ldr	r3, [r3, #28]
 800f770:	63bb      	str	r3, [r7, #56]	; 0x38
 800f772:	e022      	b.n	800f7ba <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d119      	bne.n	800f7b4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2100      	movs	r1, #0
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fb80 	bl	800ce8a <create_chain>
 800f78a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d104      	bne.n	800f79c <f_lseek+0x2a2>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2202      	movs	r2, #2
 800f796:	755a      	strb	r2, [r3, #21]
 800f798:	2302      	movs	r3, #2
 800f79a:	e0ce      	b.n	800f93a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a2:	d104      	bne.n	800f7ae <f_lseek+0x2b4>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	755a      	strb	r2, [r3, #21]
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e0c5      	b.n	800f93a <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d067      	beq.n	800f890 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f7c0:	e03a      	b.n	800f838 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	603b      	str	r3, [r7, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	699a      	ldr	r2, [r3, #24]
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	441a      	add	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7d1b      	ldrb	r3, [r3, #20]
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00b      	beq.n	800f7fa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd fb4f 	bl	800ce8a <create_chain>
 800f7ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <f_lseek+0x30c>
							ofs = 0; break;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	603b      	str	r3, [r7, #0]
 800f7f8:	e022      	b.n	800f840 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd f8f7 	bl	800c9f2 <get_fat>
 800f804:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80c:	d104      	bne.n	800f818 <f_lseek+0x31e>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2201      	movs	r2, #1
 800f812:	755a      	strb	r2, [r3, #21]
 800f814:	2301      	movs	r3, #1
 800f816:	e090      	b.n	800f93a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d904      	bls.n	800f828 <f_lseek+0x32e>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f824:	429a      	cmp	r2, r3
 800f826:	d304      	bcc.n	800f832 <f_lseek+0x338>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	755a      	strb	r2, [r3, #21]
 800f82e:	2302      	movs	r3, #2
 800f830:	e083      	b.n	800f93a <f_lseek+0x440>
					fp->clust = clst;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f836:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f838:	683a      	ldr	r2, [r7, #0]
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d8c0      	bhi.n	800f7c2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	699a      	ldr	r2, [r3, #24]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	441a      	add	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	899b      	ldrh	r3, [r3, #12]
 800f850:	461a      	mov	r2, r3
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	fbb3 f1f2 	udiv	r1, r3, r2
 800f858:	fb02 f201 	mul.w	r2, r2, r1
 800f85c:	1a9b      	subs	r3, r3, r2
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d016      	beq.n	800f890 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f866:	4618      	mov	r0, r3
 800f868:	f7fd f8a4 	bl	800c9b4 <clust2sect>
 800f86c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <f_lseek+0x384>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2202      	movs	r2, #2
 800f878:	755a      	strb	r2, [r3, #21]
 800f87a:	2302      	movs	r3, #2
 800f87c:	e05d      	b.n	800f93a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	461a      	mov	r2, r3
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	fbb3 f3f2 	udiv	r3, r3, r2
 800f88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f88c:	4413      	add	r3, r2
 800f88e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	699a      	ldr	r2, [r3, #24]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d90a      	bls.n	800f8b2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	699a      	ldr	r2, [r3, #24]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	7d1b      	ldrb	r3, [r3, #20]
 800f8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	699b      	ldr	r3, [r3, #24]
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	8992      	ldrh	r2, [r2, #12]
 800f8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8be:	fb02 f201 	mul.w	r2, r2, r1
 800f8c2:	1a9b      	subs	r3, r3, r2
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d036      	beq.n	800f936 <f_lseek+0x43c>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6a1b      	ldr	r3, [r3, #32]
 800f8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d031      	beq.n	800f936 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	7d1b      	ldrb	r3, [r3, #20]
 800f8d6:	b25b      	sxtb	r3, r3
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	da18      	bge.n	800f90e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	7858      	ldrb	r0, [r3, #1]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a1a      	ldr	r2, [r3, #32]
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	f7fc fcd6 	bl	800c29c <disk_write>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d004      	beq.n	800f900 <f_lseek+0x406>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	755a      	strb	r2, [r3, #21]
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e01c      	b.n	800f93a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	7d1b      	ldrb	r3, [r3, #20]
 800f904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	7858      	ldrb	r0, [r3, #1]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f918:	2301      	movs	r3, #1
 800f91a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f91c:	f7fc fc9e 	bl	800c25c <disk_read>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d004      	beq.n	800f930 <f_lseek+0x436>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2201      	movs	r2, #1
 800f92a:	755a      	strb	r2, [r3, #21]
 800f92c:	2301      	movs	r3, #1
 800f92e:	e004      	b.n	800f93a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f934:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3740      	adds	r7, #64	; 0x40
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b0a0      	sub	sp, #128	; 0x80
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f94e:	f107 010c 	add.w	r1, r7, #12
 800f952:	1d3b      	adds	r3, r7, #4
 800f954:	2202      	movs	r2, #2
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fd16 	bl	800e388 <find_volume>
 800f95c:	4603      	mov	r3, r0
 800f95e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800f966:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f040 80a4 	bne.w	800fab8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f976:	4611      	mov	r1, r2
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fe fbd5 	bl	800e128 <follow_path>
 800f97e:	4603      	mov	r3, r0
 800f980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800f984:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d108      	bne.n	800f99e <f_unlink+0x5c>
 800f98c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f990:	f003 0320 	and.w	r3, r3, #32
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800f998:	2306      	movs	r3, #6
 800f99a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f99e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d108      	bne.n	800f9b8 <f_unlink+0x76>
 800f9a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f9aa:	2102      	movs	r1, #2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fc fdb3 	bl	800c518 <chk_lock>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f9b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d17b      	bne.n	800fab8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f9c0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f9c4:	b25b      	sxtb	r3, r3
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	da03      	bge.n	800f9d2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f9ca:	2306      	movs	r3, #6
 800f9cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f9d0:	e008      	b.n	800f9e4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f9d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f9de:	2307      	movs	r3, #7
 800f9e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800f9e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d13d      	bne.n	800fa68 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9f0:	4611      	mov	r1, r2
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fd fcbf 	bl	800d376 <ld_clust>
 800f9f8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f9fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f9fe:	f003 0310 	and.w	r3, r3, #16
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d030      	beq.n	800fa68 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d103      	bne.n	800fa18 <f_unlink+0xd6>
						res = FR_DENIED;
 800fa10:	2307      	movs	r3, #7
 800fa12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800fa16:	e027      	b.n	800fa68 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800fa1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa1e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800fa20:	f107 0310 	add.w	r3, r7, #16
 800fa24:	2100      	movs	r1, #0
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fd faff 	bl	800d02a <dir_sdi>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800fa32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d116      	bne.n	800fa68 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800fa3a:	f107 0310 	add.w	r3, r7, #16
 800fa3e:	2100      	movs	r1, #0
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fd fec3 	bl	800d7cc <dir_read>
 800fa46:	4603      	mov	r3, r0
 800fa48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800fa4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d102      	bne.n	800fa5a <f_unlink+0x118>
 800fa54:	2307      	movs	r3, #7
 800fa56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800fa5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa5e:	2b04      	cmp	r3, #4
 800fa60:	d102      	bne.n	800fa68 <f_unlink+0x126>
 800fa62:	2300      	movs	r3, #0
 800fa64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800fa68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d123      	bne.n	800fab8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800fa70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe f909 	bl	800dc8c <dir_remove>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800fa80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10c      	bne.n	800faa2 <f_unlink+0x160>
 800fa88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d009      	beq.n	800faa2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800fa8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fa92:	2200      	movs	r2, #0
 800fa94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fd f992 	bl	800cdc0 <remove_chain>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800faa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d106      	bne.n	800fab8 <f_unlink+0x176>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	4618      	mov	r0, r3
 800faae:	f7fc ff11 	bl	800c8d4 <sync_fs>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fab8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3780      	adds	r7, #128	; 0x80
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b098      	sub	sp, #96	; 0x60
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800facc:	f107 010c 	add.w	r1, r7, #12
 800fad0:	1d3b      	adds	r3, r7, #4
 800fad2:	2202      	movs	r2, #2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fe fc57 	bl	800e388 <find_volume>
 800fada:	4603      	mov	r3, r0
 800fadc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800fae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f040 80ff 	bne.w	800fcec <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	f107 0310 	add.w	r3, r7, #16
 800faf4:	4611      	mov	r1, r2
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fe fb16 	bl	800e128 <follow_path>
 800fafc:	4603      	mov	r3, r0
 800fafe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fb02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d102      	bne.n	800fb10 <f_mkdir+0x4c>
 800fb0a:	2308      	movs	r3, #8
 800fb0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800fb10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d108      	bne.n	800fb2a <f_mkdir+0x66>
 800fb18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb1c:	f003 0320 	and.w	r3, r3, #32
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d002      	beq.n	800fb2a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800fb24:	2306      	movs	r3, #6
 800fb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fb2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	f040 80dc 	bne.w	800fcec <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800fb34:	f107 0310 	add.w	r3, r7, #16
 800fb38:	2100      	movs	r1, #0
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fd f9a5 	bl	800ce8a <create_chain>
 800fb40:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	895b      	ldrh	r3, [r3, #10]
 800fb46:	461a      	mov	r2, r3
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	899b      	ldrh	r3, [r3, #12]
 800fb4c:	fb03 f302 	mul.w	r3, r3, r2
 800fb50:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d102      	bne.n	800fb64 <f_mkdir+0xa0>
 800fb5e:	2307      	movs	r3, #7
 800fb60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800fb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d102      	bne.n	800fb70 <f_mkdir+0xac>
 800fb6a:	2302      	movs	r3, #2
 800fb6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb76:	d102      	bne.n	800fb7e <f_mkdir+0xba>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fb7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d106      	bne.n	800fb94 <f_mkdir+0xd0>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fc fe31 	bl	800c7f0 <sync_window>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800fb94:	f7fc f8d2 	bl	800bd3c <get_fattime>
 800fb98:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fb9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d16c      	bne.n	800fc7c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fc ff04 	bl	800c9b4 <clust2sect>
 800fbac:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	333c      	adds	r3, #60	; 0x3c
 800fbb2:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	899b      	ldrh	r3, [r3, #12]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	2100      	movs	r1, #0
 800fbbc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fbbe:	f7fc fc4e 	bl	800c45e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800fbc2:	220b      	movs	r2, #11
 800fbc4:	2120      	movs	r1, #32
 800fbc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fbc8:	f7fc fc49 	bl	800c45e <mem_set>
					dir[DIR_Name] = '.';
 800fbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbce:	222e      	movs	r2, #46	; 0x2e
 800fbd0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800fbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd4:	330b      	adds	r3, #11
 800fbd6:	2210      	movs	r2, #16
 800fbd8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbdc:	3316      	adds	r3, #22
 800fbde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fc fbef 	bl	800c3c4 <st_dword>
					st_clust(fs, dir, dcl);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fd fbe1 	bl	800d3b4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fbf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf4:	3320      	adds	r3, #32
 800fbf6:	2220      	movs	r2, #32
 800fbf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fc fc0e 	bl	800c41c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc02:	3321      	adds	r3, #33	; 0x21
 800fc04:	222e      	movs	r2, #46	; 0x2e
 800fc06:	701a      	strb	r2, [r3, #0]
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b03      	cmp	r3, #3
 800fc12:	d106      	bne.n	800fc22 <f_mkdir+0x15e>
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d101      	bne.n	800fc22 <f_mkdir+0x15e>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	3320      	adds	r3, #32
 800fc28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	f7fd fbc2 	bl	800d3b4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	895b      	ldrh	r3, [r3, #10]
 800fc34:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc36:	e01c      	b.n	800fc72 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800fc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc3a:	1c5a      	adds	r2, r3, #1
 800fc3c:	657a      	str	r2, [r7, #84]	; 0x54
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2201      	movs	r2, #1
 800fc46:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fc fdd0 	bl	800c7f0 <sync_window>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800fc56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10d      	bne.n	800fc7a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	899b      	ldrh	r3, [r3, #12]
 800fc62:	461a      	mov	r2, r3
 800fc64:	2100      	movs	r1, #0
 800fc66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc68:	f7fc fbf9 	bl	800c45e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fc6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1df      	bne.n	800fc38 <f_mkdir+0x174>
 800fc78:	e000      	b.n	800fc7c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800fc7a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800fc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d107      	bne.n	800fc94 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fc84:	f107 0310 	add.w	r3, r7, #16
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fd ff07 	bl	800da9c <dir_register>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800fc94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d120      	bne.n	800fcde <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fca2:	3316      	adds	r3, #22
 800fca4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fc fb8c 	bl	800c3c4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd fb7e 	bl	800d3b4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fcb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcba:	330b      	adds	r3, #11
 800fcbc:	2210      	movs	r2, #16
 800fcbe:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800fcc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d10e      	bne.n	800fcec <f_mkdir+0x228>
					res = sync_fs(fs);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fc fdff 	bl	800c8d4 <sync_fs>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fcdc:	e006      	b.n	800fcec <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fcde:	f107 0310 	add.w	r3, r7, #16
 800fce2:	2200      	movs	r2, #0
 800fce4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fd f86a 	bl	800cdc0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fcec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3760      	adds	r7, #96	; 0x60
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b088      	sub	sp, #32
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
	int n = 0;
 800fd04:	2300      	movs	r3, #0
 800fd06:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800fd0c:	e01b      	b.n	800fd46 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800fd0e:	f107 0310 	add.w	r3, r7, #16
 800fd12:	f107 0114 	add.w	r1, r7, #20
 800fd16:	2201      	movs	r2, #1
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7ff f809 	bl	800ed30 <f_read>
		if (rc != 1) break;
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d116      	bne.n	800fd52 <f_gets+0x5a>
		c = s[0];
 800fd24:	7d3b      	ldrb	r3, [r7, #20]
 800fd26:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
 800fd2a:	2b0d      	cmp	r3, #13
 800fd2c:	d100      	bne.n	800fd30 <f_gets+0x38>
 800fd2e:	e00a      	b.n	800fd46 <f_gets+0x4e>
		*p++ = c;
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	1c5a      	adds	r2, r3, #1
 800fd34:	61ba      	str	r2, [r7, #24]
 800fd36:	7dfa      	ldrb	r2, [r7, #23]
 800fd38:	701a      	strb	r2, [r3, #0]
		n++;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800fd40:	7dfb      	ldrb	r3, [r7, #23]
 800fd42:	2b0a      	cmp	r3, #10
 800fd44:	d007      	beq.n	800fd56 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	69fa      	ldr	r2, [r7, #28]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	dbde      	blt.n	800fd0e <f_gets+0x16>
 800fd50:	e002      	b.n	800fd58 <f_gets+0x60>
		if (rc != 1) break;
 800fd52:	bf00      	nop
 800fd54:	e000      	b.n	800fd58 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800fd56:	bf00      	nop
	}
	*p = 0;
 800fd58:	69bb      	ldr	r3, [r7, #24]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d001      	beq.n	800fd68 <f_gets+0x70>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	e000      	b.n	800fd6a <f_gets+0x72>
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3720      	adds	r7, #32
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
	...

0800fd74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b087      	sub	sp, #28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	4613      	mov	r3, r2
 800fd80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd82:	2301      	movs	r3, #1
 800fd84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fd8a:	4b1f      	ldr	r3, [pc, #124]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fd8c:	7a5b      	ldrb	r3, [r3, #9]
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d131      	bne.n	800fdf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd94:	4b1c      	ldr	r3, [pc, #112]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fd96:	7a5b      	ldrb	r3, [r3, #9]
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fd9e:	2100      	movs	r1, #0
 800fda0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fda2:	4b19      	ldr	r3, [pc, #100]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fda4:	7a5b      	ldrb	r3, [r3, #9]
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	4a17      	ldr	r2, [pc, #92]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4413      	add	r3, r2
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdb2:	4b15      	ldr	r3, [pc, #84]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fdb4:	7a5b      	ldrb	r3, [r3, #9]
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	461a      	mov	r2, r3
 800fdba:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fdbc:	4413      	add	r3, r2
 800fdbe:	79fa      	ldrb	r2, [r7, #7]
 800fdc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdc2:	4b11      	ldr	r3, [pc, #68]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fdc4:	7a5b      	ldrb	r3, [r3, #9]
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	b2d1      	uxtb	r1, r2
 800fdcc:	4a0e      	ldr	r2, [pc, #56]	; (800fe08 <FATFS_LinkDriverEx+0x94>)
 800fdce:	7251      	strb	r1, [r2, #9]
 800fdd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fdd2:	7dbb      	ldrb	r3, [r7, #22]
 800fdd4:	3330      	adds	r3, #48	; 0x30
 800fdd6:	b2da      	uxtb	r2, r3
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	3301      	adds	r3, #1
 800fde0:	223a      	movs	r2, #58	; 0x3a
 800fde2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	3302      	adds	r3, #2
 800fde8:	222f      	movs	r2, #47	; 0x2f
 800fdea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	3303      	adds	r3, #3
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	371c      	adds	r7, #28
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	20007d68 	.word	0x20007d68

0800fe0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe16:	2200      	movs	r2, #0
 800fe18:	6839      	ldr	r1, [r7, #0]
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff ffaa 	bl	800fd74 <FATFS_LinkDriverEx>
 800fe20:	4603      	mov	r3, r0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b085      	sub	sp, #20
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	6039      	str	r1, [r7, #0]
 800fe36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fe38:	88fb      	ldrh	r3, [r7, #6]
 800fe3a:	2b7f      	cmp	r3, #127	; 0x7f
 800fe3c:	d802      	bhi.n	800fe44 <ff_convert+0x18>
		c = chr;
 800fe3e:	88fb      	ldrh	r3, [r7, #6]
 800fe40:	81fb      	strh	r3, [r7, #14]
 800fe42:	e025      	b.n	800fe90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00b      	beq.n	800fe62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fe4a:	88fb      	ldrh	r3, [r7, #6]
 800fe4c:	2bff      	cmp	r3, #255	; 0xff
 800fe4e:	d805      	bhi.n	800fe5c <ff_convert+0x30>
 800fe50:	88fb      	ldrh	r3, [r7, #6]
 800fe52:	3b80      	subs	r3, #128	; 0x80
 800fe54:	4a12      	ldr	r2, [pc, #72]	; (800fea0 <ff_convert+0x74>)
 800fe56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe5a:	e000      	b.n	800fe5e <ff_convert+0x32>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	81fb      	strh	r3, [r7, #14]
 800fe60:	e016      	b.n	800fe90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fe62:	2300      	movs	r3, #0
 800fe64:	81fb      	strh	r3, [r7, #14]
 800fe66:	e009      	b.n	800fe7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fe68:	89fb      	ldrh	r3, [r7, #14]
 800fe6a:	4a0d      	ldr	r2, [pc, #52]	; (800fea0 <ff_convert+0x74>)
 800fe6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe70:	88fa      	ldrh	r2, [r7, #6]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d006      	beq.n	800fe84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fe76:	89fb      	ldrh	r3, [r7, #14]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	81fb      	strh	r3, [r7, #14]
 800fe7c:	89fb      	ldrh	r3, [r7, #14]
 800fe7e:	2b7f      	cmp	r3, #127	; 0x7f
 800fe80:	d9f2      	bls.n	800fe68 <ff_convert+0x3c>
 800fe82:	e000      	b.n	800fe86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fe84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fe86:	89fb      	ldrh	r3, [r7, #14]
 800fe88:	3380      	adds	r3, #128	; 0x80
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fe90:	89fb      	ldrh	r3, [r7, #14]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	08016184 	.word	0x08016184

0800fea4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b087      	sub	sp, #28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800feae:	88fb      	ldrh	r3, [r7, #6]
 800feb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feb4:	d201      	bcs.n	800feba <ff_wtoupper+0x16>
 800feb6:	4b3e      	ldr	r3, [pc, #248]	; (800ffb0 <ff_wtoupper+0x10c>)
 800feb8:	e000      	b.n	800febc <ff_wtoupper+0x18>
 800feba:	4b3e      	ldr	r3, [pc, #248]	; (800ffb4 <ff_wtoupper+0x110>)
 800febc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	1c9a      	adds	r2, r3, #2
 800fec2:	617a      	str	r2, [r7, #20]
 800fec4:	881b      	ldrh	r3, [r3, #0]
 800fec6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fec8:	8a7b      	ldrh	r3, [r7, #18]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d068      	beq.n	800ffa0 <ff_wtoupper+0xfc>
 800fece:	88fa      	ldrh	r2, [r7, #6]
 800fed0:	8a7b      	ldrh	r3, [r7, #18]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d364      	bcc.n	800ffa0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	1c9a      	adds	r2, r3, #2
 800feda:	617a      	str	r2, [r7, #20]
 800fedc:	881b      	ldrh	r3, [r3, #0]
 800fede:	823b      	strh	r3, [r7, #16]
 800fee0:	8a3b      	ldrh	r3, [r7, #16]
 800fee2:	0a1b      	lsrs	r3, r3, #8
 800fee4:	81fb      	strh	r3, [r7, #14]
 800fee6:	8a3b      	ldrh	r3, [r7, #16]
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800feec:	88fa      	ldrh	r2, [r7, #6]
 800feee:	8a79      	ldrh	r1, [r7, #18]
 800fef0:	8a3b      	ldrh	r3, [r7, #16]
 800fef2:	440b      	add	r3, r1
 800fef4:	429a      	cmp	r2, r3
 800fef6:	da49      	bge.n	800ff8c <ff_wtoupper+0xe8>
			switch (cmd) {
 800fef8:	89fb      	ldrh	r3, [r7, #14]
 800fefa:	2b08      	cmp	r3, #8
 800fefc:	d84f      	bhi.n	800ff9e <ff_wtoupper+0xfa>
 800fefe:	a201      	add	r2, pc, #4	; (adr r2, 800ff04 <ff_wtoupper+0x60>)
 800ff00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff04:	0800ff29 	.word	0x0800ff29
 800ff08:	0800ff3b 	.word	0x0800ff3b
 800ff0c:	0800ff51 	.word	0x0800ff51
 800ff10:	0800ff59 	.word	0x0800ff59
 800ff14:	0800ff61 	.word	0x0800ff61
 800ff18:	0800ff69 	.word	0x0800ff69
 800ff1c:	0800ff71 	.word	0x0800ff71
 800ff20:	0800ff79 	.word	0x0800ff79
 800ff24:	0800ff81 	.word	0x0800ff81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ff28:	88fa      	ldrh	r2, [r7, #6]
 800ff2a:	8a7b      	ldrh	r3, [r7, #18]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	005b      	lsls	r3, r3, #1
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	4413      	add	r3, r2
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	80fb      	strh	r3, [r7, #6]
 800ff38:	e027      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ff3a:	88fa      	ldrh	r2, [r7, #6]
 800ff3c:	8a7b      	ldrh	r3, [r7, #18]
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	88fa      	ldrh	r2, [r7, #6]
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	80fb      	strh	r3, [r7, #6]
 800ff4e:	e01c      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ff50:	88fb      	ldrh	r3, [r7, #6]
 800ff52:	3b10      	subs	r3, #16
 800ff54:	80fb      	strh	r3, [r7, #6]
 800ff56:	e018      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ff58:	88fb      	ldrh	r3, [r7, #6]
 800ff5a:	3b20      	subs	r3, #32
 800ff5c:	80fb      	strh	r3, [r7, #6]
 800ff5e:	e014      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ff60:	88fb      	ldrh	r3, [r7, #6]
 800ff62:	3b30      	subs	r3, #48	; 0x30
 800ff64:	80fb      	strh	r3, [r7, #6]
 800ff66:	e010      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ff68:	88fb      	ldrh	r3, [r7, #6]
 800ff6a:	3b1a      	subs	r3, #26
 800ff6c:	80fb      	strh	r3, [r7, #6]
 800ff6e:	e00c      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ff70:	88fb      	ldrh	r3, [r7, #6]
 800ff72:	3308      	adds	r3, #8
 800ff74:	80fb      	strh	r3, [r7, #6]
 800ff76:	e008      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ff78:	88fb      	ldrh	r3, [r7, #6]
 800ff7a:	3b50      	subs	r3, #80	; 0x50
 800ff7c:	80fb      	strh	r3, [r7, #6]
 800ff7e:	e004      	b.n	800ff8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ff80:	88fb      	ldrh	r3, [r7, #6]
 800ff82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ff86:	80fb      	strh	r3, [r7, #6]
 800ff88:	bf00      	nop
			}
			break;
 800ff8a:	e008      	b.n	800ff9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d195      	bne.n	800febe <ff_wtoupper+0x1a>
 800ff92:	8a3b      	ldrh	r3, [r7, #16]
 800ff94:	005b      	lsls	r3, r3, #1
 800ff96:	697a      	ldr	r2, [r7, #20]
 800ff98:	4413      	add	r3, r2
 800ff9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ff9c:	e78f      	b.n	800febe <ff_wtoupper+0x1a>
			break;
 800ff9e:	bf00      	nop
	}

	return chr;
 800ffa0:	88fb      	ldrh	r3, [r7, #6]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	08016284 	.word	0x08016284
 800ffb4:	08016478 	.word	0x08016478

0800ffb8 <cos>:
 800ffb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffba:	ec51 0b10 	vmov	r0, r1, d0
 800ffbe:	4a1e      	ldr	r2, [pc, #120]	; (8010038 <cos+0x80>)
 800ffc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	dc06      	bgt.n	800ffd6 <cos+0x1e>
 800ffc8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8010030 <cos+0x78>
 800ffcc:	f000 fa74 	bl	80104b8 <__kernel_cos>
 800ffd0:	ec51 0b10 	vmov	r0, r1, d0
 800ffd4:	e007      	b.n	800ffe6 <cos+0x2e>
 800ffd6:	4a19      	ldr	r2, [pc, #100]	; (801003c <cos+0x84>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	dd09      	ble.n	800fff0 <cos+0x38>
 800ffdc:	ee10 2a10 	vmov	r2, s0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	f7f0 f969 	bl	80002b8 <__aeabi_dsub>
 800ffe6:	ec41 0b10 	vmov	d0, r0, r1
 800ffea:	b005      	add	sp, #20
 800ffec:	f85d fb04 	ldr.w	pc, [sp], #4
 800fff0:	4668      	mov	r0, sp
 800fff2:	f000 f86d 	bl	80100d0 <__ieee754_rem_pio2>
 800fff6:	f000 0003 	and.w	r0, r0, #3
 800fffa:	2801      	cmp	r0, #1
 800fffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010000:	ed9d 0b00 	vldr	d0, [sp]
 8010004:	d007      	beq.n	8010016 <cos+0x5e>
 8010006:	2802      	cmp	r0, #2
 8010008:	d00e      	beq.n	8010028 <cos+0x70>
 801000a:	2800      	cmp	r0, #0
 801000c:	d0de      	beq.n	800ffcc <cos+0x14>
 801000e:	2001      	movs	r0, #1
 8010010:	f000 fe5a 	bl	8010cc8 <__kernel_sin>
 8010014:	e7dc      	b.n	800ffd0 <cos+0x18>
 8010016:	f000 fe57 	bl	8010cc8 <__kernel_sin>
 801001a:	ec53 2b10 	vmov	r2, r3, d0
 801001e:	ee10 0a10 	vmov	r0, s0
 8010022:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010026:	e7de      	b.n	800ffe6 <cos+0x2e>
 8010028:	f000 fa46 	bl	80104b8 <__kernel_cos>
 801002c:	e7f5      	b.n	801001a <cos+0x62>
 801002e:	bf00      	nop
	...
 8010038:	3fe921fb 	.word	0x3fe921fb
 801003c:	7fefffff 	.word	0x7fefffff

08010040 <sin>:
 8010040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010042:	ec51 0b10 	vmov	r0, r1, d0
 8010046:	4a20      	ldr	r2, [pc, #128]	; (80100c8 <sin+0x88>)
 8010048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801004c:	4293      	cmp	r3, r2
 801004e:	dc07      	bgt.n	8010060 <sin+0x20>
 8010050:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80100c0 <sin+0x80>
 8010054:	2000      	movs	r0, #0
 8010056:	f000 fe37 	bl	8010cc8 <__kernel_sin>
 801005a:	ec51 0b10 	vmov	r0, r1, d0
 801005e:	e007      	b.n	8010070 <sin+0x30>
 8010060:	4a1a      	ldr	r2, [pc, #104]	; (80100cc <sin+0x8c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	dd09      	ble.n	801007a <sin+0x3a>
 8010066:	ee10 2a10 	vmov	r2, s0
 801006a:	460b      	mov	r3, r1
 801006c:	f7f0 f924 	bl	80002b8 <__aeabi_dsub>
 8010070:	ec41 0b10 	vmov	d0, r0, r1
 8010074:	b005      	add	sp, #20
 8010076:	f85d fb04 	ldr.w	pc, [sp], #4
 801007a:	4668      	mov	r0, sp
 801007c:	f000 f828 	bl	80100d0 <__ieee754_rem_pio2>
 8010080:	f000 0003 	and.w	r0, r0, #3
 8010084:	2801      	cmp	r0, #1
 8010086:	ed9d 1b02 	vldr	d1, [sp, #8]
 801008a:	ed9d 0b00 	vldr	d0, [sp]
 801008e:	d004      	beq.n	801009a <sin+0x5a>
 8010090:	2802      	cmp	r0, #2
 8010092:	d005      	beq.n	80100a0 <sin+0x60>
 8010094:	b970      	cbnz	r0, 80100b4 <sin+0x74>
 8010096:	2001      	movs	r0, #1
 8010098:	e7dd      	b.n	8010056 <sin+0x16>
 801009a:	f000 fa0d 	bl	80104b8 <__kernel_cos>
 801009e:	e7dc      	b.n	801005a <sin+0x1a>
 80100a0:	2001      	movs	r0, #1
 80100a2:	f000 fe11 	bl	8010cc8 <__kernel_sin>
 80100a6:	ec53 2b10 	vmov	r2, r3, d0
 80100aa:	ee10 0a10 	vmov	r0, s0
 80100ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80100b2:	e7dd      	b.n	8010070 <sin+0x30>
 80100b4:	f000 fa00 	bl	80104b8 <__kernel_cos>
 80100b8:	e7f5      	b.n	80100a6 <sin+0x66>
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w
	...
 80100c8:	3fe921fb 	.word	0x3fe921fb
 80100cc:	7fefffff 	.word	0x7fefffff

080100d0 <__ieee754_rem_pio2>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	ec57 6b10 	vmov	r6, r7, d0
 80100d8:	4bc3      	ldr	r3, [pc, #780]	; (80103e8 <__ieee754_rem_pio2+0x318>)
 80100da:	b08d      	sub	sp, #52	; 0x34
 80100dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80100e0:	4598      	cmp	r8, r3
 80100e2:	4604      	mov	r4, r0
 80100e4:	9704      	str	r7, [sp, #16]
 80100e6:	dc07      	bgt.n	80100f8 <__ieee754_rem_pio2+0x28>
 80100e8:	2200      	movs	r2, #0
 80100ea:	2300      	movs	r3, #0
 80100ec:	ed84 0b00 	vstr	d0, [r4]
 80100f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80100f4:	2500      	movs	r5, #0
 80100f6:	e027      	b.n	8010148 <__ieee754_rem_pio2+0x78>
 80100f8:	4bbc      	ldr	r3, [pc, #752]	; (80103ec <__ieee754_rem_pio2+0x31c>)
 80100fa:	4598      	cmp	r8, r3
 80100fc:	dc75      	bgt.n	80101ea <__ieee754_rem_pio2+0x11a>
 80100fe:	9b04      	ldr	r3, [sp, #16]
 8010100:	4dbb      	ldr	r5, [pc, #748]	; (80103f0 <__ieee754_rem_pio2+0x320>)
 8010102:	2b00      	cmp	r3, #0
 8010104:	ee10 0a10 	vmov	r0, s0
 8010108:	a3a9      	add	r3, pc, #676	; (adr r3, 80103b0 <__ieee754_rem_pio2+0x2e0>)
 801010a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010e:	4639      	mov	r1, r7
 8010110:	dd36      	ble.n	8010180 <__ieee754_rem_pio2+0xb0>
 8010112:	f7f0 f8d1 	bl	80002b8 <__aeabi_dsub>
 8010116:	45a8      	cmp	r8, r5
 8010118:	4606      	mov	r6, r0
 801011a:	460f      	mov	r7, r1
 801011c:	d018      	beq.n	8010150 <__ieee754_rem_pio2+0x80>
 801011e:	a3a6      	add	r3, pc, #664	; (adr r3, 80103b8 <__ieee754_rem_pio2+0x2e8>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 f8c8 	bl	80002b8 <__aeabi_dsub>
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	e9c4 2300 	strd	r2, r3, [r4]
 8010130:	4630      	mov	r0, r6
 8010132:	4639      	mov	r1, r7
 8010134:	f7f0 f8c0 	bl	80002b8 <__aeabi_dsub>
 8010138:	a39f      	add	r3, pc, #636	; (adr r3, 80103b8 <__ieee754_rem_pio2+0x2e8>)
 801013a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013e:	f7f0 f8bb 	bl	80002b8 <__aeabi_dsub>
 8010142:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010146:	2501      	movs	r5, #1
 8010148:	4628      	mov	r0, r5
 801014a:	b00d      	add	sp, #52	; 0x34
 801014c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010150:	a39b      	add	r3, pc, #620	; (adr r3, 80103c0 <__ieee754_rem_pio2+0x2f0>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 f8af 	bl	80002b8 <__aeabi_dsub>
 801015a:	a39b      	add	r3, pc, #620	; (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f8>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	4606      	mov	r6, r0
 8010162:	460f      	mov	r7, r1
 8010164:	f7f0 f8a8 	bl	80002b8 <__aeabi_dsub>
 8010168:	4602      	mov	r2, r0
 801016a:	460b      	mov	r3, r1
 801016c:	e9c4 2300 	strd	r2, r3, [r4]
 8010170:	4630      	mov	r0, r6
 8010172:	4639      	mov	r1, r7
 8010174:	f7f0 f8a0 	bl	80002b8 <__aeabi_dsub>
 8010178:	a393      	add	r3, pc, #588	; (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f8>)
 801017a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017e:	e7de      	b.n	801013e <__ieee754_rem_pio2+0x6e>
 8010180:	f7f0 f89c 	bl	80002bc <__adddf3>
 8010184:	45a8      	cmp	r8, r5
 8010186:	4606      	mov	r6, r0
 8010188:	460f      	mov	r7, r1
 801018a:	d016      	beq.n	80101ba <__ieee754_rem_pio2+0xea>
 801018c:	a38a      	add	r3, pc, #552	; (adr r3, 80103b8 <__ieee754_rem_pio2+0x2e8>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	f7f0 f893 	bl	80002bc <__adddf3>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	e9c4 2300 	strd	r2, r3, [r4]
 801019e:	4630      	mov	r0, r6
 80101a0:	4639      	mov	r1, r7
 80101a2:	f7f0 f889 	bl	80002b8 <__aeabi_dsub>
 80101a6:	a384      	add	r3, pc, #528	; (adr r3, 80103b8 <__ieee754_rem_pio2+0x2e8>)
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f7f0 f886 	bl	80002bc <__adddf3>
 80101b0:	f04f 35ff 	mov.w	r5, #4294967295
 80101b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101b8:	e7c6      	b.n	8010148 <__ieee754_rem_pio2+0x78>
 80101ba:	a381      	add	r3, pc, #516	; (adr r3, 80103c0 <__ieee754_rem_pio2+0x2f0>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f7f0 f87c 	bl	80002bc <__adddf3>
 80101c4:	a380      	add	r3, pc, #512	; (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f8>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	4606      	mov	r6, r0
 80101cc:	460f      	mov	r7, r1
 80101ce:	f7f0 f875 	bl	80002bc <__adddf3>
 80101d2:	4602      	mov	r2, r0
 80101d4:	460b      	mov	r3, r1
 80101d6:	e9c4 2300 	strd	r2, r3, [r4]
 80101da:	4630      	mov	r0, r6
 80101dc:	4639      	mov	r1, r7
 80101de:	f7f0 f86b 	bl	80002b8 <__aeabi_dsub>
 80101e2:	a379      	add	r3, pc, #484	; (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f8>)
 80101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e8:	e7e0      	b.n	80101ac <__ieee754_rem_pio2+0xdc>
 80101ea:	4b82      	ldr	r3, [pc, #520]	; (80103f4 <__ieee754_rem_pio2+0x324>)
 80101ec:	4598      	cmp	r8, r3
 80101ee:	f300 80d0 	bgt.w	8010392 <__ieee754_rem_pio2+0x2c2>
 80101f2:	f000 fe23 	bl	8010e3c <fabs>
 80101f6:	ec57 6b10 	vmov	r6, r7, d0
 80101fa:	ee10 0a10 	vmov	r0, s0
 80101fe:	a374      	add	r3, pc, #464	; (adr r3, 80103d0 <__ieee754_rem_pio2+0x300>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	4639      	mov	r1, r7
 8010206:	f7f0 fa0f 	bl	8000628 <__aeabi_dmul>
 801020a:	2200      	movs	r2, #0
 801020c:	4b7a      	ldr	r3, [pc, #488]	; (80103f8 <__ieee754_rem_pio2+0x328>)
 801020e:	f7f0 f855 	bl	80002bc <__adddf3>
 8010212:	f7f0 fcb9 	bl	8000b88 <__aeabi_d2iz>
 8010216:	4605      	mov	r5, r0
 8010218:	f7f0 f99c 	bl	8000554 <__aeabi_i2d>
 801021c:	a364      	add	r3, pc, #400	; (adr r3, 80103b0 <__ieee754_rem_pio2+0x2e0>)
 801021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010226:	f7f0 f9ff 	bl	8000628 <__aeabi_dmul>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4630      	mov	r0, r6
 8010230:	4639      	mov	r1, r7
 8010232:	f7f0 f841 	bl	80002b8 <__aeabi_dsub>
 8010236:	a360      	add	r3, pc, #384	; (adr r3, 80103b8 <__ieee754_rem_pio2+0x2e8>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	4682      	mov	sl, r0
 801023e:	468b      	mov	fp, r1
 8010240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010244:	f7f0 f9f0 	bl	8000628 <__aeabi_dmul>
 8010248:	2d1f      	cmp	r5, #31
 801024a:	4606      	mov	r6, r0
 801024c:	460f      	mov	r7, r1
 801024e:	dc0c      	bgt.n	801026a <__ieee754_rem_pio2+0x19a>
 8010250:	1e6a      	subs	r2, r5, #1
 8010252:	4b6a      	ldr	r3, [pc, #424]	; (80103fc <__ieee754_rem_pio2+0x32c>)
 8010254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010258:	4543      	cmp	r3, r8
 801025a:	d006      	beq.n	801026a <__ieee754_rem_pio2+0x19a>
 801025c:	4632      	mov	r2, r6
 801025e:	463b      	mov	r3, r7
 8010260:	4650      	mov	r0, sl
 8010262:	4659      	mov	r1, fp
 8010264:	f7f0 f828 	bl	80002b8 <__aeabi_dsub>
 8010268:	e00e      	b.n	8010288 <__ieee754_rem_pio2+0x1b8>
 801026a:	4632      	mov	r2, r6
 801026c:	463b      	mov	r3, r7
 801026e:	4650      	mov	r0, sl
 8010270:	4659      	mov	r1, fp
 8010272:	f7f0 f821 	bl	80002b8 <__aeabi_dsub>
 8010276:	ea4f 5328 	mov.w	r3, r8, asr #20
 801027a:	9305      	str	r3, [sp, #20]
 801027c:	9a05      	ldr	r2, [sp, #20]
 801027e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	2b10      	cmp	r3, #16
 8010286:	dc02      	bgt.n	801028e <__ieee754_rem_pio2+0x1be>
 8010288:	e9c4 0100 	strd	r0, r1, [r4]
 801028c:	e039      	b.n	8010302 <__ieee754_rem_pio2+0x232>
 801028e:	a34c      	add	r3, pc, #304	; (adr r3, 80103c0 <__ieee754_rem_pio2+0x2f0>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010298:	f7f0 f9c6 	bl	8000628 <__aeabi_dmul>
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	4602      	mov	r2, r0
 80102a2:	460b      	mov	r3, r1
 80102a4:	4650      	mov	r0, sl
 80102a6:	4659      	mov	r1, fp
 80102a8:	f7f0 f806 	bl	80002b8 <__aeabi_dsub>
 80102ac:	4602      	mov	r2, r0
 80102ae:	460b      	mov	r3, r1
 80102b0:	4680      	mov	r8, r0
 80102b2:	4689      	mov	r9, r1
 80102b4:	4650      	mov	r0, sl
 80102b6:	4659      	mov	r1, fp
 80102b8:	f7ef fffe 	bl	80002b8 <__aeabi_dsub>
 80102bc:	4632      	mov	r2, r6
 80102be:	463b      	mov	r3, r7
 80102c0:	f7ef fffa 	bl	80002b8 <__aeabi_dsub>
 80102c4:	a340      	add	r3, pc, #256	; (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f8>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	4606      	mov	r6, r0
 80102cc:	460f      	mov	r7, r1
 80102ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102d2:	f7f0 f9a9 	bl	8000628 <__aeabi_dmul>
 80102d6:	4632      	mov	r2, r6
 80102d8:	463b      	mov	r3, r7
 80102da:	f7ef ffed 	bl	80002b8 <__aeabi_dsub>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	4640      	mov	r0, r8
 80102e8:	4649      	mov	r1, r9
 80102ea:	f7ef ffe5 	bl	80002b8 <__aeabi_dsub>
 80102ee:	9a05      	ldr	r2, [sp, #20]
 80102f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	2b31      	cmp	r3, #49	; 0x31
 80102f8:	dc20      	bgt.n	801033c <__ieee754_rem_pio2+0x26c>
 80102fa:	e9c4 0100 	strd	r0, r1, [r4]
 80102fe:	46c2      	mov	sl, r8
 8010300:	46cb      	mov	fp, r9
 8010302:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010306:	4650      	mov	r0, sl
 8010308:	4642      	mov	r2, r8
 801030a:	464b      	mov	r3, r9
 801030c:	4659      	mov	r1, fp
 801030e:	f7ef ffd3 	bl	80002b8 <__aeabi_dsub>
 8010312:	463b      	mov	r3, r7
 8010314:	4632      	mov	r2, r6
 8010316:	f7ef ffcf 	bl	80002b8 <__aeabi_dsub>
 801031a:	9b04      	ldr	r3, [sp, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010322:	f6bf af11 	bge.w	8010148 <__ieee754_rem_pio2+0x78>
 8010326:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801032a:	6063      	str	r3, [r4, #4]
 801032c:	f8c4 8000 	str.w	r8, [r4]
 8010330:	60a0      	str	r0, [r4, #8]
 8010332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010336:	60e3      	str	r3, [r4, #12]
 8010338:	426d      	negs	r5, r5
 801033a:	e705      	b.n	8010148 <__ieee754_rem_pio2+0x78>
 801033c:	a326      	add	r3, pc, #152	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010346:	f7f0 f96f 	bl	8000628 <__aeabi_dmul>
 801034a:	4606      	mov	r6, r0
 801034c:	460f      	mov	r7, r1
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	4640      	mov	r0, r8
 8010354:	4649      	mov	r1, r9
 8010356:	f7ef ffaf 	bl	80002b8 <__aeabi_dsub>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4682      	mov	sl, r0
 8010360:	468b      	mov	fp, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7ef ffa7 	bl	80002b8 <__aeabi_dsub>
 801036a:	4632      	mov	r2, r6
 801036c:	463b      	mov	r3, r7
 801036e:	f7ef ffa3 	bl	80002b8 <__aeabi_dsub>
 8010372:	a31b      	add	r3, pc, #108	; (adr r3, 80103e0 <__ieee754_rem_pio2+0x310>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010380:	f7f0 f952 	bl	8000628 <__aeabi_dmul>
 8010384:	4632      	mov	r2, r6
 8010386:	463b      	mov	r3, r7
 8010388:	f7ef ff96 	bl	80002b8 <__aeabi_dsub>
 801038c:	4606      	mov	r6, r0
 801038e:	460f      	mov	r7, r1
 8010390:	e764      	b.n	801025c <__ieee754_rem_pio2+0x18c>
 8010392:	4b1b      	ldr	r3, [pc, #108]	; (8010400 <__ieee754_rem_pio2+0x330>)
 8010394:	4598      	cmp	r8, r3
 8010396:	dd35      	ble.n	8010404 <__ieee754_rem_pio2+0x334>
 8010398:	ee10 2a10 	vmov	r2, s0
 801039c:	463b      	mov	r3, r7
 801039e:	4630      	mov	r0, r6
 80103a0:	4639      	mov	r1, r7
 80103a2:	f7ef ff89 	bl	80002b8 <__aeabi_dsub>
 80103a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80103aa:	e9c4 0100 	strd	r0, r1, [r4]
 80103ae:	e6a1      	b.n	80100f4 <__ieee754_rem_pio2+0x24>
 80103b0:	54400000 	.word	0x54400000
 80103b4:	3ff921fb 	.word	0x3ff921fb
 80103b8:	1a626331 	.word	0x1a626331
 80103bc:	3dd0b461 	.word	0x3dd0b461
 80103c0:	1a600000 	.word	0x1a600000
 80103c4:	3dd0b461 	.word	0x3dd0b461
 80103c8:	2e037073 	.word	0x2e037073
 80103cc:	3ba3198a 	.word	0x3ba3198a
 80103d0:	6dc9c883 	.word	0x6dc9c883
 80103d4:	3fe45f30 	.word	0x3fe45f30
 80103d8:	2e000000 	.word	0x2e000000
 80103dc:	3ba3198a 	.word	0x3ba3198a
 80103e0:	252049c1 	.word	0x252049c1
 80103e4:	397b839a 	.word	0x397b839a
 80103e8:	3fe921fb 	.word	0x3fe921fb
 80103ec:	4002d97b 	.word	0x4002d97b
 80103f0:	3ff921fb 	.word	0x3ff921fb
 80103f4:	413921fb 	.word	0x413921fb
 80103f8:	3fe00000 	.word	0x3fe00000
 80103fc:	08016534 	.word	0x08016534
 8010400:	7fefffff 	.word	0x7fefffff
 8010404:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010408:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801040c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010410:	4630      	mov	r0, r6
 8010412:	460f      	mov	r7, r1
 8010414:	f7f0 fbb8 	bl	8000b88 <__aeabi_d2iz>
 8010418:	f7f0 f89c 	bl	8000554 <__aeabi_i2d>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	4630      	mov	r0, r6
 8010422:	4639      	mov	r1, r7
 8010424:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010428:	f7ef ff46 	bl	80002b8 <__aeabi_dsub>
 801042c:	2200      	movs	r2, #0
 801042e:	4b1f      	ldr	r3, [pc, #124]	; (80104ac <__ieee754_rem_pio2+0x3dc>)
 8010430:	f7f0 f8fa 	bl	8000628 <__aeabi_dmul>
 8010434:	460f      	mov	r7, r1
 8010436:	4606      	mov	r6, r0
 8010438:	f7f0 fba6 	bl	8000b88 <__aeabi_d2iz>
 801043c:	f7f0 f88a 	bl	8000554 <__aeabi_i2d>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4630      	mov	r0, r6
 8010446:	4639      	mov	r1, r7
 8010448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801044c:	f7ef ff34 	bl	80002b8 <__aeabi_dsub>
 8010450:	2200      	movs	r2, #0
 8010452:	4b16      	ldr	r3, [pc, #88]	; (80104ac <__ieee754_rem_pio2+0x3dc>)
 8010454:	f7f0 f8e8 	bl	8000628 <__aeabi_dmul>
 8010458:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801045c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8010460:	f04f 0803 	mov.w	r8, #3
 8010464:	2600      	movs	r6, #0
 8010466:	2700      	movs	r7, #0
 8010468:	4632      	mov	r2, r6
 801046a:	463b      	mov	r3, r7
 801046c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010470:	f108 3aff 	add.w	sl, r8, #4294967295
 8010474:	f7f0 fb40 	bl	8000af8 <__aeabi_dcmpeq>
 8010478:	b9b0      	cbnz	r0, 80104a8 <__ieee754_rem_pio2+0x3d8>
 801047a:	4b0d      	ldr	r3, [pc, #52]	; (80104b0 <__ieee754_rem_pio2+0x3e0>)
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	2302      	movs	r3, #2
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	462a      	mov	r2, r5
 8010484:	4643      	mov	r3, r8
 8010486:	4621      	mov	r1, r4
 8010488:	a806      	add	r0, sp, #24
 801048a:	f000 f8dd 	bl	8010648 <__kernel_rem_pio2>
 801048e:	9b04      	ldr	r3, [sp, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	4605      	mov	r5, r0
 8010494:	f6bf ae58 	bge.w	8010148 <__ieee754_rem_pio2+0x78>
 8010498:	6863      	ldr	r3, [r4, #4]
 801049a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801049e:	6063      	str	r3, [r4, #4]
 80104a0:	68e3      	ldr	r3, [r4, #12]
 80104a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104a6:	e746      	b.n	8010336 <__ieee754_rem_pio2+0x266>
 80104a8:	46d0      	mov	r8, sl
 80104aa:	e7dd      	b.n	8010468 <__ieee754_rem_pio2+0x398>
 80104ac:	41700000 	.word	0x41700000
 80104b0:	080165b4 	.word	0x080165b4
 80104b4:	00000000 	.word	0x00000000

080104b8 <__kernel_cos>:
 80104b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	ec59 8b10 	vmov	r8, r9, d0
 80104c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80104c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80104c8:	ed2d 8b02 	vpush	{d8}
 80104cc:	eeb0 8a41 	vmov.f32	s16, s2
 80104d0:	eef0 8a61 	vmov.f32	s17, s3
 80104d4:	da07      	bge.n	80104e6 <__kernel_cos+0x2e>
 80104d6:	ee10 0a10 	vmov	r0, s0
 80104da:	4649      	mov	r1, r9
 80104dc:	f7f0 fb54 	bl	8000b88 <__aeabi_d2iz>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	f000 8089 	beq.w	80105f8 <__kernel_cos+0x140>
 80104e6:	4642      	mov	r2, r8
 80104e8:	464b      	mov	r3, r9
 80104ea:	4640      	mov	r0, r8
 80104ec:	4649      	mov	r1, r9
 80104ee:	f7f0 f89b 	bl	8000628 <__aeabi_dmul>
 80104f2:	2200      	movs	r2, #0
 80104f4:	4b4e      	ldr	r3, [pc, #312]	; (8010630 <__kernel_cos+0x178>)
 80104f6:	4604      	mov	r4, r0
 80104f8:	460d      	mov	r5, r1
 80104fa:	f7f0 f895 	bl	8000628 <__aeabi_dmul>
 80104fe:	a340      	add	r3, pc, #256	; (adr r3, 8010600 <__kernel_cos+0x148>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	4682      	mov	sl, r0
 8010506:	468b      	mov	fp, r1
 8010508:	4620      	mov	r0, r4
 801050a:	4629      	mov	r1, r5
 801050c:	f7f0 f88c 	bl	8000628 <__aeabi_dmul>
 8010510:	a33d      	add	r3, pc, #244	; (adr r3, 8010608 <__kernel_cos+0x150>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef fed1 	bl	80002bc <__adddf3>
 801051a:	4622      	mov	r2, r4
 801051c:	462b      	mov	r3, r5
 801051e:	f7f0 f883 	bl	8000628 <__aeabi_dmul>
 8010522:	a33b      	add	r3, pc, #236	; (adr r3, 8010610 <__kernel_cos+0x158>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7ef fec6 	bl	80002b8 <__aeabi_dsub>
 801052c:	4622      	mov	r2, r4
 801052e:	462b      	mov	r3, r5
 8010530:	f7f0 f87a 	bl	8000628 <__aeabi_dmul>
 8010534:	a338      	add	r3, pc, #224	; (adr r3, 8010618 <__kernel_cos+0x160>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	f7ef febf 	bl	80002bc <__adddf3>
 801053e:	4622      	mov	r2, r4
 8010540:	462b      	mov	r3, r5
 8010542:	f7f0 f871 	bl	8000628 <__aeabi_dmul>
 8010546:	a336      	add	r3, pc, #216	; (adr r3, 8010620 <__kernel_cos+0x168>)
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	f7ef feb4 	bl	80002b8 <__aeabi_dsub>
 8010550:	4622      	mov	r2, r4
 8010552:	462b      	mov	r3, r5
 8010554:	f7f0 f868 	bl	8000628 <__aeabi_dmul>
 8010558:	a333      	add	r3, pc, #204	; (adr r3, 8010628 <__kernel_cos+0x170>)
 801055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055e:	f7ef fead 	bl	80002bc <__adddf3>
 8010562:	4622      	mov	r2, r4
 8010564:	462b      	mov	r3, r5
 8010566:	f7f0 f85f 	bl	8000628 <__aeabi_dmul>
 801056a:	4622      	mov	r2, r4
 801056c:	462b      	mov	r3, r5
 801056e:	f7f0 f85b 	bl	8000628 <__aeabi_dmul>
 8010572:	ec53 2b18 	vmov	r2, r3, d8
 8010576:	4604      	mov	r4, r0
 8010578:	460d      	mov	r5, r1
 801057a:	4640      	mov	r0, r8
 801057c:	4649      	mov	r1, r9
 801057e:	f7f0 f853 	bl	8000628 <__aeabi_dmul>
 8010582:	460b      	mov	r3, r1
 8010584:	4602      	mov	r2, r0
 8010586:	4629      	mov	r1, r5
 8010588:	4620      	mov	r0, r4
 801058a:	f7ef fe95 	bl	80002b8 <__aeabi_dsub>
 801058e:	4b29      	ldr	r3, [pc, #164]	; (8010634 <__kernel_cos+0x17c>)
 8010590:	429e      	cmp	r6, r3
 8010592:	4680      	mov	r8, r0
 8010594:	4689      	mov	r9, r1
 8010596:	dc11      	bgt.n	80105bc <__kernel_cos+0x104>
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	4650      	mov	r0, sl
 801059e:	4659      	mov	r1, fp
 80105a0:	f7ef fe8a 	bl	80002b8 <__aeabi_dsub>
 80105a4:	460b      	mov	r3, r1
 80105a6:	4924      	ldr	r1, [pc, #144]	; (8010638 <__kernel_cos+0x180>)
 80105a8:	4602      	mov	r2, r0
 80105aa:	2000      	movs	r0, #0
 80105ac:	f7ef fe84 	bl	80002b8 <__aeabi_dsub>
 80105b0:	ecbd 8b02 	vpop	{d8}
 80105b4:	ec41 0b10 	vmov	d0, r0, r1
 80105b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105bc:	4b1f      	ldr	r3, [pc, #124]	; (801063c <__kernel_cos+0x184>)
 80105be:	491e      	ldr	r1, [pc, #120]	; (8010638 <__kernel_cos+0x180>)
 80105c0:	429e      	cmp	r6, r3
 80105c2:	bfcc      	ite	gt
 80105c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8010640 <__kernel_cos+0x188>)
 80105c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80105ca:	2400      	movs	r4, #0
 80105cc:	4622      	mov	r2, r4
 80105ce:	462b      	mov	r3, r5
 80105d0:	2000      	movs	r0, #0
 80105d2:	f7ef fe71 	bl	80002b8 <__aeabi_dsub>
 80105d6:	4622      	mov	r2, r4
 80105d8:	4606      	mov	r6, r0
 80105da:	460f      	mov	r7, r1
 80105dc:	462b      	mov	r3, r5
 80105de:	4650      	mov	r0, sl
 80105e0:	4659      	mov	r1, fp
 80105e2:	f7ef fe69 	bl	80002b8 <__aeabi_dsub>
 80105e6:	4642      	mov	r2, r8
 80105e8:	464b      	mov	r3, r9
 80105ea:	f7ef fe65 	bl	80002b8 <__aeabi_dsub>
 80105ee:	4602      	mov	r2, r0
 80105f0:	460b      	mov	r3, r1
 80105f2:	4630      	mov	r0, r6
 80105f4:	4639      	mov	r1, r7
 80105f6:	e7d9      	b.n	80105ac <__kernel_cos+0xf4>
 80105f8:	2000      	movs	r0, #0
 80105fa:	490f      	ldr	r1, [pc, #60]	; (8010638 <__kernel_cos+0x180>)
 80105fc:	e7d8      	b.n	80105b0 <__kernel_cos+0xf8>
 80105fe:	bf00      	nop
 8010600:	be8838d4 	.word	0xbe8838d4
 8010604:	bda8fae9 	.word	0xbda8fae9
 8010608:	bdb4b1c4 	.word	0xbdb4b1c4
 801060c:	3e21ee9e 	.word	0x3e21ee9e
 8010610:	809c52ad 	.word	0x809c52ad
 8010614:	3e927e4f 	.word	0x3e927e4f
 8010618:	19cb1590 	.word	0x19cb1590
 801061c:	3efa01a0 	.word	0x3efa01a0
 8010620:	16c15177 	.word	0x16c15177
 8010624:	3f56c16c 	.word	0x3f56c16c
 8010628:	5555554c 	.word	0x5555554c
 801062c:	3fa55555 	.word	0x3fa55555
 8010630:	3fe00000 	.word	0x3fe00000
 8010634:	3fd33332 	.word	0x3fd33332
 8010638:	3ff00000 	.word	0x3ff00000
 801063c:	3fe90000 	.word	0x3fe90000
 8010640:	3fd20000 	.word	0x3fd20000
 8010644:	00000000 	.word	0x00000000

08010648 <__kernel_rem_pio2>:
 8010648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064c:	ed2d 8b02 	vpush	{d8}
 8010650:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010654:	1ed4      	subs	r4, r2, #3
 8010656:	9308      	str	r3, [sp, #32]
 8010658:	9101      	str	r1, [sp, #4]
 801065a:	4bc5      	ldr	r3, [pc, #788]	; (8010970 <__kernel_rem_pio2+0x328>)
 801065c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801065e:	9009      	str	r0, [sp, #36]	; 0x24
 8010660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010664:	9304      	str	r3, [sp, #16]
 8010666:	9b08      	ldr	r3, [sp, #32]
 8010668:	3b01      	subs	r3, #1
 801066a:	9307      	str	r3, [sp, #28]
 801066c:	2318      	movs	r3, #24
 801066e:	fb94 f4f3 	sdiv	r4, r4, r3
 8010672:	f06f 0317 	mvn.w	r3, #23
 8010676:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801067a:	fb04 3303 	mla	r3, r4, r3, r3
 801067e:	eb03 0a02 	add.w	sl, r3, r2
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	9a07      	ldr	r2, [sp, #28]
 8010686:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010960 <__kernel_rem_pio2+0x318>
 801068a:	eb03 0802 	add.w	r8, r3, r2
 801068e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010690:	1aa7      	subs	r7, r4, r2
 8010692:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010696:	ae22      	add	r6, sp, #136	; 0x88
 8010698:	2500      	movs	r5, #0
 801069a:	4545      	cmp	r5, r8
 801069c:	dd13      	ble.n	80106c6 <__kernel_rem_pio2+0x7e>
 801069e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010960 <__kernel_rem_pio2+0x318>
 80106a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80106a6:	2600      	movs	r6, #0
 80106a8:	9b04      	ldr	r3, [sp, #16]
 80106aa:	429e      	cmp	r6, r3
 80106ac:	dc32      	bgt.n	8010714 <__kernel_rem_pio2+0xcc>
 80106ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b0:	9302      	str	r3, [sp, #8]
 80106b2:	9b08      	ldr	r3, [sp, #32]
 80106b4:	199d      	adds	r5, r3, r6
 80106b6:	ab22      	add	r3, sp, #136	; 0x88
 80106b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80106bc:	9306      	str	r3, [sp, #24]
 80106be:	ec59 8b18 	vmov	r8, r9, d8
 80106c2:	2700      	movs	r7, #0
 80106c4:	e01f      	b.n	8010706 <__kernel_rem_pio2+0xbe>
 80106c6:	42ef      	cmn	r7, r5
 80106c8:	d407      	bmi.n	80106da <__kernel_rem_pio2+0x92>
 80106ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80106ce:	f7ef ff41 	bl	8000554 <__aeabi_i2d>
 80106d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80106d6:	3501      	adds	r5, #1
 80106d8:	e7df      	b.n	801069a <__kernel_rem_pio2+0x52>
 80106da:	ec51 0b18 	vmov	r0, r1, d8
 80106de:	e7f8      	b.n	80106d2 <__kernel_rem_pio2+0x8a>
 80106e0:	9906      	ldr	r1, [sp, #24]
 80106e2:	9d02      	ldr	r5, [sp, #8]
 80106e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80106e8:	9106      	str	r1, [sp, #24]
 80106ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80106ee:	9502      	str	r5, [sp, #8]
 80106f0:	f7ef ff9a 	bl	8000628 <__aeabi_dmul>
 80106f4:	4602      	mov	r2, r0
 80106f6:	460b      	mov	r3, r1
 80106f8:	4640      	mov	r0, r8
 80106fa:	4649      	mov	r1, r9
 80106fc:	f7ef fdde 	bl	80002bc <__adddf3>
 8010700:	3701      	adds	r7, #1
 8010702:	4680      	mov	r8, r0
 8010704:	4689      	mov	r9, r1
 8010706:	9b07      	ldr	r3, [sp, #28]
 8010708:	429f      	cmp	r7, r3
 801070a:	dde9      	ble.n	80106e0 <__kernel_rem_pio2+0x98>
 801070c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8010710:	3601      	adds	r6, #1
 8010712:	e7c9      	b.n	80106a8 <__kernel_rem_pio2+0x60>
 8010714:	9b04      	ldr	r3, [sp, #16]
 8010716:	aa0e      	add	r2, sp, #56	; 0x38
 8010718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801071c:	930c      	str	r3, [sp, #48]	; 0x30
 801071e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010720:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010724:	9c04      	ldr	r4, [sp, #16]
 8010726:	930b      	str	r3, [sp, #44]	; 0x2c
 8010728:	ab9a      	add	r3, sp, #616	; 0x268
 801072a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801072e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010736:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801073a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801073e:	ab9a      	add	r3, sp, #616	; 0x268
 8010740:	445b      	add	r3, fp
 8010742:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8010746:	2500      	movs	r5, #0
 8010748:	1b63      	subs	r3, r4, r5
 801074a:	2b00      	cmp	r3, #0
 801074c:	dc78      	bgt.n	8010840 <__kernel_rem_pio2+0x1f8>
 801074e:	4650      	mov	r0, sl
 8010750:	ec49 8b10 	vmov	d0, r8, r9
 8010754:	f000 fc00 	bl	8010f58 <scalbn>
 8010758:	ec57 6b10 	vmov	r6, r7, d0
 801075c:	2200      	movs	r2, #0
 801075e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010762:	ee10 0a10 	vmov	r0, s0
 8010766:	4639      	mov	r1, r7
 8010768:	f7ef ff5e 	bl	8000628 <__aeabi_dmul>
 801076c:	ec41 0b10 	vmov	d0, r0, r1
 8010770:	f000 fb6e 	bl	8010e50 <floor>
 8010774:	2200      	movs	r2, #0
 8010776:	ec51 0b10 	vmov	r0, r1, d0
 801077a:	4b7e      	ldr	r3, [pc, #504]	; (8010974 <__kernel_rem_pio2+0x32c>)
 801077c:	f7ef ff54 	bl	8000628 <__aeabi_dmul>
 8010780:	4602      	mov	r2, r0
 8010782:	460b      	mov	r3, r1
 8010784:	4630      	mov	r0, r6
 8010786:	4639      	mov	r1, r7
 8010788:	f7ef fd96 	bl	80002b8 <__aeabi_dsub>
 801078c:	460f      	mov	r7, r1
 801078e:	4606      	mov	r6, r0
 8010790:	f7f0 f9fa 	bl	8000b88 <__aeabi_d2iz>
 8010794:	9006      	str	r0, [sp, #24]
 8010796:	f7ef fedd 	bl	8000554 <__aeabi_i2d>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	4630      	mov	r0, r6
 80107a0:	4639      	mov	r1, r7
 80107a2:	f7ef fd89 	bl	80002b8 <__aeabi_dsub>
 80107a6:	f1ba 0f00 	cmp.w	sl, #0
 80107aa:	4606      	mov	r6, r0
 80107ac:	460f      	mov	r7, r1
 80107ae:	dd6c      	ble.n	801088a <__kernel_rem_pio2+0x242>
 80107b0:	1e62      	subs	r2, r4, #1
 80107b2:	ab0e      	add	r3, sp, #56	; 0x38
 80107b4:	f1ca 0118 	rsb	r1, sl, #24
 80107b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80107bc:	9d06      	ldr	r5, [sp, #24]
 80107be:	fa40 f301 	asr.w	r3, r0, r1
 80107c2:	441d      	add	r5, r3
 80107c4:	408b      	lsls	r3, r1
 80107c6:	1ac0      	subs	r0, r0, r3
 80107c8:	ab0e      	add	r3, sp, #56	; 0x38
 80107ca:	9506      	str	r5, [sp, #24]
 80107cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80107d0:	f1ca 0317 	rsb	r3, sl, #23
 80107d4:	fa40 f303 	asr.w	r3, r0, r3
 80107d8:	9302      	str	r3, [sp, #8]
 80107da:	9b02      	ldr	r3, [sp, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	dd62      	ble.n	80108a6 <__kernel_rem_pio2+0x25e>
 80107e0:	9b06      	ldr	r3, [sp, #24]
 80107e2:	2200      	movs	r2, #0
 80107e4:	3301      	adds	r3, #1
 80107e6:	9306      	str	r3, [sp, #24]
 80107e8:	4615      	mov	r5, r2
 80107ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80107ee:	4294      	cmp	r4, r2
 80107f0:	f300 8095 	bgt.w	801091e <__kernel_rem_pio2+0x2d6>
 80107f4:	f1ba 0f00 	cmp.w	sl, #0
 80107f8:	dd07      	ble.n	801080a <__kernel_rem_pio2+0x1c2>
 80107fa:	f1ba 0f01 	cmp.w	sl, #1
 80107fe:	f000 80a2 	beq.w	8010946 <__kernel_rem_pio2+0x2fe>
 8010802:	f1ba 0f02 	cmp.w	sl, #2
 8010806:	f000 80c1 	beq.w	801098c <__kernel_rem_pio2+0x344>
 801080a:	9b02      	ldr	r3, [sp, #8]
 801080c:	2b02      	cmp	r3, #2
 801080e:	d14a      	bne.n	80108a6 <__kernel_rem_pio2+0x25e>
 8010810:	4632      	mov	r2, r6
 8010812:	463b      	mov	r3, r7
 8010814:	2000      	movs	r0, #0
 8010816:	4958      	ldr	r1, [pc, #352]	; (8010978 <__kernel_rem_pio2+0x330>)
 8010818:	f7ef fd4e 	bl	80002b8 <__aeabi_dsub>
 801081c:	4606      	mov	r6, r0
 801081e:	460f      	mov	r7, r1
 8010820:	2d00      	cmp	r5, #0
 8010822:	d040      	beq.n	80108a6 <__kernel_rem_pio2+0x25e>
 8010824:	4650      	mov	r0, sl
 8010826:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010968 <__kernel_rem_pio2+0x320>
 801082a:	f000 fb95 	bl	8010f58 <scalbn>
 801082e:	4630      	mov	r0, r6
 8010830:	4639      	mov	r1, r7
 8010832:	ec53 2b10 	vmov	r2, r3, d0
 8010836:	f7ef fd3f 	bl	80002b8 <__aeabi_dsub>
 801083a:	4606      	mov	r6, r0
 801083c:	460f      	mov	r7, r1
 801083e:	e032      	b.n	80108a6 <__kernel_rem_pio2+0x25e>
 8010840:	2200      	movs	r2, #0
 8010842:	4b4e      	ldr	r3, [pc, #312]	; (801097c <__kernel_rem_pio2+0x334>)
 8010844:	4640      	mov	r0, r8
 8010846:	4649      	mov	r1, r9
 8010848:	f7ef feee 	bl	8000628 <__aeabi_dmul>
 801084c:	f7f0 f99c 	bl	8000b88 <__aeabi_d2iz>
 8010850:	f7ef fe80 	bl	8000554 <__aeabi_i2d>
 8010854:	2200      	movs	r2, #0
 8010856:	4b4a      	ldr	r3, [pc, #296]	; (8010980 <__kernel_rem_pio2+0x338>)
 8010858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801085c:	f7ef fee4 	bl	8000628 <__aeabi_dmul>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	4640      	mov	r0, r8
 8010866:	4649      	mov	r1, r9
 8010868:	f7ef fd26 	bl	80002b8 <__aeabi_dsub>
 801086c:	f7f0 f98c 	bl	8000b88 <__aeabi_d2iz>
 8010870:	ab0e      	add	r3, sp, #56	; 0x38
 8010872:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010876:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801087a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801087e:	f7ef fd1d 	bl	80002bc <__adddf3>
 8010882:	3501      	adds	r5, #1
 8010884:	4680      	mov	r8, r0
 8010886:	4689      	mov	r9, r1
 8010888:	e75e      	b.n	8010748 <__kernel_rem_pio2+0x100>
 801088a:	d105      	bne.n	8010898 <__kernel_rem_pio2+0x250>
 801088c:	1e63      	subs	r3, r4, #1
 801088e:	aa0e      	add	r2, sp, #56	; 0x38
 8010890:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010894:	15c3      	asrs	r3, r0, #23
 8010896:	e79f      	b.n	80107d8 <__kernel_rem_pio2+0x190>
 8010898:	2200      	movs	r2, #0
 801089a:	4b3a      	ldr	r3, [pc, #232]	; (8010984 <__kernel_rem_pio2+0x33c>)
 801089c:	f7f0 f94a 	bl	8000b34 <__aeabi_dcmpge>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d139      	bne.n	8010918 <__kernel_rem_pio2+0x2d0>
 80108a4:	9002      	str	r0, [sp, #8]
 80108a6:	2200      	movs	r2, #0
 80108a8:	2300      	movs	r3, #0
 80108aa:	4630      	mov	r0, r6
 80108ac:	4639      	mov	r1, r7
 80108ae:	f7f0 f923 	bl	8000af8 <__aeabi_dcmpeq>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f000 80c7 	beq.w	8010a46 <__kernel_rem_pio2+0x3fe>
 80108b8:	1e65      	subs	r5, r4, #1
 80108ba:	462b      	mov	r3, r5
 80108bc:	2200      	movs	r2, #0
 80108be:	9904      	ldr	r1, [sp, #16]
 80108c0:	428b      	cmp	r3, r1
 80108c2:	da6a      	bge.n	801099a <__kernel_rem_pio2+0x352>
 80108c4:	2a00      	cmp	r2, #0
 80108c6:	f000 8088 	beq.w	80109da <__kernel_rem_pio2+0x392>
 80108ca:	ab0e      	add	r3, sp, #56	; 0x38
 80108cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80108d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 80b4 	beq.w	8010a42 <__kernel_rem_pio2+0x3fa>
 80108da:	4650      	mov	r0, sl
 80108dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010968 <__kernel_rem_pio2+0x320>
 80108e0:	f000 fb3a 	bl	8010f58 <scalbn>
 80108e4:	00ec      	lsls	r4, r5, #3
 80108e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80108e8:	191e      	adds	r6, r3, r4
 80108ea:	ec59 8b10 	vmov	r8, r9, d0
 80108ee:	f106 0a08 	add.w	sl, r6, #8
 80108f2:	462f      	mov	r7, r5
 80108f4:	2f00      	cmp	r7, #0
 80108f6:	f280 80df 	bge.w	8010ab8 <__kernel_rem_pio2+0x470>
 80108fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010960 <__kernel_rem_pio2+0x318>
 80108fe:	f04f 0a00 	mov.w	sl, #0
 8010902:	eba5 030a 	sub.w	r3, r5, sl
 8010906:	2b00      	cmp	r3, #0
 8010908:	f2c0 810a 	blt.w	8010b20 <__kernel_rem_pio2+0x4d8>
 801090c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010988 <__kernel_rem_pio2+0x340>
 8010910:	ec59 8b18 	vmov	r8, r9, d8
 8010914:	2700      	movs	r7, #0
 8010916:	e0f5      	b.n	8010b04 <__kernel_rem_pio2+0x4bc>
 8010918:	2302      	movs	r3, #2
 801091a:	9302      	str	r3, [sp, #8]
 801091c:	e760      	b.n	80107e0 <__kernel_rem_pio2+0x198>
 801091e:	ab0e      	add	r3, sp, #56	; 0x38
 8010920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010924:	b94d      	cbnz	r5, 801093a <__kernel_rem_pio2+0x2f2>
 8010926:	b12b      	cbz	r3, 8010934 <__kernel_rem_pio2+0x2ec>
 8010928:	a80e      	add	r0, sp, #56	; 0x38
 801092a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801092e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010932:	2301      	movs	r3, #1
 8010934:	3201      	adds	r2, #1
 8010936:	461d      	mov	r5, r3
 8010938:	e759      	b.n	80107ee <__kernel_rem_pio2+0x1a6>
 801093a:	a80e      	add	r0, sp, #56	; 0x38
 801093c:	1acb      	subs	r3, r1, r3
 801093e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010942:	462b      	mov	r3, r5
 8010944:	e7f6      	b.n	8010934 <__kernel_rem_pio2+0x2ec>
 8010946:	1e62      	subs	r2, r4, #1
 8010948:	ab0e      	add	r3, sp, #56	; 0x38
 801094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010952:	a90e      	add	r1, sp, #56	; 0x38
 8010954:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010958:	e757      	b.n	801080a <__kernel_rem_pio2+0x1c2>
 801095a:	bf00      	nop
 801095c:	f3af 8000 	nop.w
	...
 801096c:	3ff00000 	.word	0x3ff00000
 8010970:	08016700 	.word	0x08016700
 8010974:	40200000 	.word	0x40200000
 8010978:	3ff00000 	.word	0x3ff00000
 801097c:	3e700000 	.word	0x3e700000
 8010980:	41700000 	.word	0x41700000
 8010984:	3fe00000 	.word	0x3fe00000
 8010988:	080166c0 	.word	0x080166c0
 801098c:	1e62      	subs	r2, r4, #1
 801098e:	ab0e      	add	r3, sp, #56	; 0x38
 8010990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010994:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010998:	e7db      	b.n	8010952 <__kernel_rem_pio2+0x30a>
 801099a:	a90e      	add	r1, sp, #56	; 0x38
 801099c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	430a      	orrs	r2, r1
 80109a4:	e78b      	b.n	80108be <__kernel_rem_pio2+0x276>
 80109a6:	3301      	adds	r3, #1
 80109a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80109ac:	2900      	cmp	r1, #0
 80109ae:	d0fa      	beq.n	80109a6 <__kernel_rem_pio2+0x35e>
 80109b0:	9a08      	ldr	r2, [sp, #32]
 80109b2:	4422      	add	r2, r4
 80109b4:	00d2      	lsls	r2, r2, #3
 80109b6:	a922      	add	r1, sp, #136	; 0x88
 80109b8:	18e3      	adds	r3, r4, r3
 80109ba:	9206      	str	r2, [sp, #24]
 80109bc:	440a      	add	r2, r1
 80109be:	9302      	str	r3, [sp, #8]
 80109c0:	f10b 0108 	add.w	r1, fp, #8
 80109c4:	f102 0308 	add.w	r3, r2, #8
 80109c8:	1c66      	adds	r6, r4, #1
 80109ca:	910a      	str	r1, [sp, #40]	; 0x28
 80109cc:	2500      	movs	r5, #0
 80109ce:	930d      	str	r3, [sp, #52]	; 0x34
 80109d0:	9b02      	ldr	r3, [sp, #8]
 80109d2:	42b3      	cmp	r3, r6
 80109d4:	da04      	bge.n	80109e0 <__kernel_rem_pio2+0x398>
 80109d6:	461c      	mov	r4, r3
 80109d8:	e6a6      	b.n	8010728 <__kernel_rem_pio2+0xe0>
 80109da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109dc:	2301      	movs	r3, #1
 80109de:	e7e3      	b.n	80109a8 <__kernel_rem_pio2+0x360>
 80109e0:	9b06      	ldr	r3, [sp, #24]
 80109e2:	18ef      	adds	r7, r5, r3
 80109e4:	ab22      	add	r3, sp, #136	; 0x88
 80109e6:	441f      	add	r7, r3
 80109e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80109ee:	f7ef fdb1 	bl	8000554 <__aeabi_i2d>
 80109f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f4:	461c      	mov	r4, r3
 80109f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109f8:	e9c7 0100 	strd	r0, r1, [r7]
 80109fc:	eb03 0b05 	add.w	fp, r3, r5
 8010a00:	2700      	movs	r7, #0
 8010a02:	f04f 0800 	mov.w	r8, #0
 8010a06:	f04f 0900 	mov.w	r9, #0
 8010a0a:	9b07      	ldr	r3, [sp, #28]
 8010a0c:	429f      	cmp	r7, r3
 8010a0e:	dd08      	ble.n	8010a22 <__kernel_rem_pio2+0x3da>
 8010a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a12:	aa72      	add	r2, sp, #456	; 0x1c8
 8010a14:	18eb      	adds	r3, r5, r3
 8010a16:	4413      	add	r3, r2
 8010a18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8010a1c:	3601      	adds	r6, #1
 8010a1e:	3508      	adds	r5, #8
 8010a20:	e7d6      	b.n	80109d0 <__kernel_rem_pio2+0x388>
 8010a22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010a26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010a2a:	f7ef fdfd 	bl	8000628 <__aeabi_dmul>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	460b      	mov	r3, r1
 8010a32:	4640      	mov	r0, r8
 8010a34:	4649      	mov	r1, r9
 8010a36:	f7ef fc41 	bl	80002bc <__adddf3>
 8010a3a:	3701      	adds	r7, #1
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4689      	mov	r9, r1
 8010a40:	e7e3      	b.n	8010a0a <__kernel_rem_pio2+0x3c2>
 8010a42:	3d01      	subs	r5, #1
 8010a44:	e741      	b.n	80108ca <__kernel_rem_pio2+0x282>
 8010a46:	f1ca 0000 	rsb	r0, sl, #0
 8010a4a:	ec47 6b10 	vmov	d0, r6, r7
 8010a4e:	f000 fa83 	bl	8010f58 <scalbn>
 8010a52:	ec57 6b10 	vmov	r6, r7, d0
 8010a56:	2200      	movs	r2, #0
 8010a58:	4b99      	ldr	r3, [pc, #612]	; (8010cc0 <__kernel_rem_pio2+0x678>)
 8010a5a:	ee10 0a10 	vmov	r0, s0
 8010a5e:	4639      	mov	r1, r7
 8010a60:	f7f0 f868 	bl	8000b34 <__aeabi_dcmpge>
 8010a64:	b1f8      	cbz	r0, 8010aa6 <__kernel_rem_pio2+0x45e>
 8010a66:	2200      	movs	r2, #0
 8010a68:	4b96      	ldr	r3, [pc, #600]	; (8010cc4 <__kernel_rem_pio2+0x67c>)
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	4639      	mov	r1, r7
 8010a6e:	f7ef fddb 	bl	8000628 <__aeabi_dmul>
 8010a72:	f7f0 f889 	bl	8000b88 <__aeabi_d2iz>
 8010a76:	4680      	mov	r8, r0
 8010a78:	f7ef fd6c 	bl	8000554 <__aeabi_i2d>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4b90      	ldr	r3, [pc, #576]	; (8010cc0 <__kernel_rem_pio2+0x678>)
 8010a80:	f7ef fdd2 	bl	8000628 <__aeabi_dmul>
 8010a84:	460b      	mov	r3, r1
 8010a86:	4602      	mov	r2, r0
 8010a88:	4639      	mov	r1, r7
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f7ef fc14 	bl	80002b8 <__aeabi_dsub>
 8010a90:	f7f0 f87a 	bl	8000b88 <__aeabi_d2iz>
 8010a94:	1c65      	adds	r5, r4, #1
 8010a96:	ab0e      	add	r3, sp, #56	; 0x38
 8010a98:	f10a 0a18 	add.w	sl, sl, #24
 8010a9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010aa0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010aa4:	e719      	b.n	80108da <__kernel_rem_pio2+0x292>
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	f7f0 f86d 	bl	8000b88 <__aeabi_d2iz>
 8010aae:	ab0e      	add	r3, sp, #56	; 0x38
 8010ab0:	4625      	mov	r5, r4
 8010ab2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010ab6:	e710      	b.n	80108da <__kernel_rem_pio2+0x292>
 8010ab8:	ab0e      	add	r3, sp, #56	; 0x38
 8010aba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010abe:	f7ef fd49 	bl	8000554 <__aeabi_i2d>
 8010ac2:	4642      	mov	r2, r8
 8010ac4:	464b      	mov	r3, r9
 8010ac6:	f7ef fdaf 	bl	8000628 <__aeabi_dmul>
 8010aca:	2200      	movs	r2, #0
 8010acc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010ad0:	4b7c      	ldr	r3, [pc, #496]	; (8010cc4 <__kernel_rem_pio2+0x67c>)
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	4649      	mov	r1, r9
 8010ad6:	f7ef fda7 	bl	8000628 <__aeabi_dmul>
 8010ada:	3f01      	subs	r7, #1
 8010adc:	4680      	mov	r8, r0
 8010ade:	4689      	mov	r9, r1
 8010ae0:	e708      	b.n	80108f4 <__kernel_rem_pio2+0x2ac>
 8010ae2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8010aee:	f7ef fd9b 	bl	8000628 <__aeabi_dmul>
 8010af2:	4602      	mov	r2, r0
 8010af4:	460b      	mov	r3, r1
 8010af6:	4640      	mov	r0, r8
 8010af8:	4649      	mov	r1, r9
 8010afa:	f7ef fbdf 	bl	80002bc <__adddf3>
 8010afe:	3701      	adds	r7, #1
 8010b00:	4680      	mov	r8, r0
 8010b02:	4689      	mov	r9, r1
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	429f      	cmp	r7, r3
 8010b08:	dc01      	bgt.n	8010b0e <__kernel_rem_pio2+0x4c6>
 8010b0a:	45ba      	cmp	sl, r7
 8010b0c:	dae9      	bge.n	8010ae2 <__kernel_rem_pio2+0x49a>
 8010b0e:	ab4a      	add	r3, sp, #296	; 0x128
 8010b10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b14:	e9c3 8900 	strd	r8, r9, [r3]
 8010b18:	f10a 0a01 	add.w	sl, sl, #1
 8010b1c:	3e08      	subs	r6, #8
 8010b1e:	e6f0      	b.n	8010902 <__kernel_rem_pio2+0x2ba>
 8010b20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010b22:	2b03      	cmp	r3, #3
 8010b24:	d85b      	bhi.n	8010bde <__kernel_rem_pio2+0x596>
 8010b26:	e8df f003 	tbb	[pc, r3]
 8010b2a:	264a      	.short	0x264a
 8010b2c:	0226      	.short	0x0226
 8010b2e:	ab9a      	add	r3, sp, #616	; 0x268
 8010b30:	441c      	add	r4, r3
 8010b32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010b36:	46a2      	mov	sl, r4
 8010b38:	46ab      	mov	fp, r5
 8010b3a:	f1bb 0f00 	cmp.w	fp, #0
 8010b3e:	dc6c      	bgt.n	8010c1a <__kernel_rem_pio2+0x5d2>
 8010b40:	46a2      	mov	sl, r4
 8010b42:	46ab      	mov	fp, r5
 8010b44:	f1bb 0f01 	cmp.w	fp, #1
 8010b48:	f300 8086 	bgt.w	8010c58 <__kernel_rem_pio2+0x610>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	2100      	movs	r1, #0
 8010b50:	2d01      	cmp	r5, #1
 8010b52:	f300 80a0 	bgt.w	8010c96 <__kernel_rem_pio2+0x64e>
 8010b56:	9b02      	ldr	r3, [sp, #8]
 8010b58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010b5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f040 809e 	bne.w	8010ca2 <__kernel_rem_pio2+0x65a>
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	e9c3 7800 	strd	r7, r8, [r3]
 8010b6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010b70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b74:	e033      	b.n	8010bde <__kernel_rem_pio2+0x596>
 8010b76:	3408      	adds	r4, #8
 8010b78:	ab4a      	add	r3, sp, #296	; 0x128
 8010b7a:	441c      	add	r4, r3
 8010b7c:	462e      	mov	r6, r5
 8010b7e:	2000      	movs	r0, #0
 8010b80:	2100      	movs	r1, #0
 8010b82:	2e00      	cmp	r6, #0
 8010b84:	da3a      	bge.n	8010bfc <__kernel_rem_pio2+0x5b4>
 8010b86:	9b02      	ldr	r3, [sp, #8]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d03d      	beq.n	8010c08 <__kernel_rem_pio2+0x5c0>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b92:	9c01      	ldr	r4, [sp, #4]
 8010b94:	e9c4 2300 	strd	r2, r3, [r4]
 8010b98:	4602      	mov	r2, r0
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010ba0:	f7ef fb8a 	bl	80002b8 <__aeabi_dsub>
 8010ba4:	ae4c      	add	r6, sp, #304	; 0x130
 8010ba6:	2401      	movs	r4, #1
 8010ba8:	42a5      	cmp	r5, r4
 8010baa:	da30      	bge.n	8010c0e <__kernel_rem_pio2+0x5c6>
 8010bac:	9b02      	ldr	r3, [sp, #8]
 8010bae:	b113      	cbz	r3, 8010bb6 <__kernel_rem_pio2+0x56e>
 8010bb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010bbc:	e00f      	b.n	8010bde <__kernel_rem_pio2+0x596>
 8010bbe:	ab9a      	add	r3, sp, #616	; 0x268
 8010bc0:	441c      	add	r4, r3
 8010bc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	2100      	movs	r1, #0
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	da10      	bge.n	8010bf0 <__kernel_rem_pio2+0x5a8>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	b113      	cbz	r3, 8010bd8 <__kernel_rem_pio2+0x590>
 8010bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	9b01      	ldr	r3, [sp, #4]
 8010bda:	e9c3 0100 	strd	r0, r1, [r3]
 8010bde:	9b06      	ldr	r3, [sp, #24]
 8010be0:	f003 0007 	and.w	r0, r3, #7
 8010be4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010be8:	ecbd 8b02 	vpop	{d8}
 8010bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010bf4:	f7ef fb62 	bl	80002bc <__adddf3>
 8010bf8:	3d01      	subs	r5, #1
 8010bfa:	e7e6      	b.n	8010bca <__kernel_rem_pio2+0x582>
 8010bfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c00:	f7ef fb5c 	bl	80002bc <__adddf3>
 8010c04:	3e01      	subs	r6, #1
 8010c06:	e7bc      	b.n	8010b82 <__kernel_rem_pio2+0x53a>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	e7c1      	b.n	8010b92 <__kernel_rem_pio2+0x54a>
 8010c0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010c12:	f7ef fb53 	bl	80002bc <__adddf3>
 8010c16:	3401      	adds	r4, #1
 8010c18:	e7c6      	b.n	8010ba8 <__kernel_rem_pio2+0x560>
 8010c1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8010c1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010c22:	4640      	mov	r0, r8
 8010c24:	ec53 2b17 	vmov	r2, r3, d7
 8010c28:	4649      	mov	r1, r9
 8010c2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c2e:	f7ef fb45 	bl	80002bc <__adddf3>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	4606      	mov	r6, r0
 8010c38:	460f      	mov	r7, r1
 8010c3a:	4640      	mov	r0, r8
 8010c3c:	4649      	mov	r1, r9
 8010c3e:	f7ef fb3b 	bl	80002b8 <__aeabi_dsub>
 8010c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c46:	f7ef fb39 	bl	80002bc <__adddf3>
 8010c4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c4e:	e9ca 0100 	strd	r0, r1, [sl]
 8010c52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010c56:	e770      	b.n	8010b3a <__kernel_rem_pio2+0x4f2>
 8010c58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8010c5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010c60:	4630      	mov	r0, r6
 8010c62:	ec53 2b17 	vmov	r2, r3, d7
 8010c66:	4639      	mov	r1, r7
 8010c68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c6c:	f7ef fb26 	bl	80002bc <__adddf3>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4680      	mov	r8, r0
 8010c76:	4689      	mov	r9, r1
 8010c78:	4630      	mov	r0, r6
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	f7ef fb1c 	bl	80002b8 <__aeabi_dsub>
 8010c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c84:	f7ef fb1a 	bl	80002bc <__adddf3>
 8010c88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c8c:	e9ca 0100 	strd	r0, r1, [sl]
 8010c90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010c94:	e756      	b.n	8010b44 <__kernel_rem_pio2+0x4fc>
 8010c96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c9a:	f7ef fb0f 	bl	80002bc <__adddf3>
 8010c9e:	3d01      	subs	r5, #1
 8010ca0:	e756      	b.n	8010b50 <__kernel_rem_pio2+0x508>
 8010ca2:	9b01      	ldr	r3, [sp, #4]
 8010ca4:	9a01      	ldr	r2, [sp, #4]
 8010ca6:	601f      	str	r7, [r3, #0]
 8010ca8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010cac:	605c      	str	r4, [r3, #4]
 8010cae:	609d      	str	r5, [r3, #8]
 8010cb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010cb4:	60d3      	str	r3, [r2, #12]
 8010cb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cba:	6110      	str	r0, [r2, #16]
 8010cbc:	6153      	str	r3, [r2, #20]
 8010cbe:	e78e      	b.n	8010bde <__kernel_rem_pio2+0x596>
 8010cc0:	41700000 	.word	0x41700000
 8010cc4:	3e700000 	.word	0x3e700000

08010cc8 <__kernel_sin>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	ec55 4b10 	vmov	r4, r5, d0
 8010cd0:	b085      	sub	sp, #20
 8010cd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010cd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010cda:	ed8d 1b00 	vstr	d1, [sp]
 8010cde:	9002      	str	r0, [sp, #8]
 8010ce0:	da06      	bge.n	8010cf0 <__kernel_sin+0x28>
 8010ce2:	ee10 0a10 	vmov	r0, s0
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	f7ef ff4e 	bl	8000b88 <__aeabi_d2iz>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d051      	beq.n	8010d94 <__kernel_sin+0xcc>
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	462b      	mov	r3, r5
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	f7ef fc96 	bl	8000628 <__aeabi_dmul>
 8010cfc:	4682      	mov	sl, r0
 8010cfe:	468b      	mov	fp, r1
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	4620      	mov	r0, r4
 8010d06:	4629      	mov	r1, r5
 8010d08:	f7ef fc8e 	bl	8000628 <__aeabi_dmul>
 8010d0c:	a341      	add	r3, pc, #260	; (adr r3, 8010e14 <__kernel_sin+0x14c>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	4680      	mov	r8, r0
 8010d14:	4689      	mov	r9, r1
 8010d16:	4650      	mov	r0, sl
 8010d18:	4659      	mov	r1, fp
 8010d1a:	f7ef fc85 	bl	8000628 <__aeabi_dmul>
 8010d1e:	a33f      	add	r3, pc, #252	; (adr r3, 8010e1c <__kernel_sin+0x154>)
 8010d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d24:	f7ef fac8 	bl	80002b8 <__aeabi_dsub>
 8010d28:	4652      	mov	r2, sl
 8010d2a:	465b      	mov	r3, fp
 8010d2c:	f7ef fc7c 	bl	8000628 <__aeabi_dmul>
 8010d30:	a33c      	add	r3, pc, #240	; (adr r3, 8010e24 <__kernel_sin+0x15c>)
 8010d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d36:	f7ef fac1 	bl	80002bc <__adddf3>
 8010d3a:	4652      	mov	r2, sl
 8010d3c:	465b      	mov	r3, fp
 8010d3e:	f7ef fc73 	bl	8000628 <__aeabi_dmul>
 8010d42:	a33a      	add	r3, pc, #232	; (adr r3, 8010e2c <__kernel_sin+0x164>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	f7ef fab6 	bl	80002b8 <__aeabi_dsub>
 8010d4c:	4652      	mov	r2, sl
 8010d4e:	465b      	mov	r3, fp
 8010d50:	f7ef fc6a 	bl	8000628 <__aeabi_dmul>
 8010d54:	a337      	add	r3, pc, #220	; (adr r3, 8010e34 <__kernel_sin+0x16c>)
 8010d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5a:	f7ef faaf 	bl	80002bc <__adddf3>
 8010d5e:	9b02      	ldr	r3, [sp, #8]
 8010d60:	4606      	mov	r6, r0
 8010d62:	460f      	mov	r7, r1
 8010d64:	b9db      	cbnz	r3, 8010d9e <__kernel_sin+0xd6>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4650      	mov	r0, sl
 8010d6c:	4659      	mov	r1, fp
 8010d6e:	f7ef fc5b 	bl	8000628 <__aeabi_dmul>
 8010d72:	a325      	add	r3, pc, #148	; (adr r3, 8010e08 <__kernel_sin+0x140>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef fa9e 	bl	80002b8 <__aeabi_dsub>
 8010d7c:	4642      	mov	r2, r8
 8010d7e:	464b      	mov	r3, r9
 8010d80:	f7ef fc52 	bl	8000628 <__aeabi_dmul>
 8010d84:	4602      	mov	r2, r0
 8010d86:	460b      	mov	r3, r1
 8010d88:	4620      	mov	r0, r4
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	f7ef fa96 	bl	80002bc <__adddf3>
 8010d90:	4604      	mov	r4, r0
 8010d92:	460d      	mov	r5, r1
 8010d94:	ec45 4b10 	vmov	d0, r4, r5
 8010d98:	b005      	add	sp, #20
 8010d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9e:	2200      	movs	r2, #0
 8010da0:	4b1b      	ldr	r3, [pc, #108]	; (8010e10 <__kernel_sin+0x148>)
 8010da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010da6:	f7ef fc3f 	bl	8000628 <__aeabi_dmul>
 8010daa:	4632      	mov	r2, r6
 8010dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010db0:	463b      	mov	r3, r7
 8010db2:	4640      	mov	r0, r8
 8010db4:	4649      	mov	r1, r9
 8010db6:	f7ef fc37 	bl	8000628 <__aeabi_dmul>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dc2:	f7ef fa79 	bl	80002b8 <__aeabi_dsub>
 8010dc6:	4652      	mov	r2, sl
 8010dc8:	465b      	mov	r3, fp
 8010dca:	f7ef fc2d 	bl	8000628 <__aeabi_dmul>
 8010dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dd2:	f7ef fa71 	bl	80002b8 <__aeabi_dsub>
 8010dd6:	a30c      	add	r3, pc, #48	; (adr r3, 8010e08 <__kernel_sin+0x140>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	4606      	mov	r6, r0
 8010dde:	460f      	mov	r7, r1
 8010de0:	4640      	mov	r0, r8
 8010de2:	4649      	mov	r1, r9
 8010de4:	f7ef fc20 	bl	8000628 <__aeabi_dmul>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4630      	mov	r0, r6
 8010dee:	4639      	mov	r1, r7
 8010df0:	f7ef fa64 	bl	80002bc <__adddf3>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	4620      	mov	r0, r4
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	f7ef fa5c 	bl	80002b8 <__aeabi_dsub>
 8010e00:	e7c6      	b.n	8010d90 <__kernel_sin+0xc8>
 8010e02:	bf00      	nop
 8010e04:	f3af 8000 	nop.w
 8010e08:	55555549 	.word	0x55555549
 8010e0c:	3fc55555 	.word	0x3fc55555
 8010e10:	3fe00000 	.word	0x3fe00000
 8010e14:	5acfd57c 	.word	0x5acfd57c
 8010e18:	3de5d93a 	.word	0x3de5d93a
 8010e1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010e20:	3e5ae5e6 	.word	0x3e5ae5e6
 8010e24:	57b1fe7d 	.word	0x57b1fe7d
 8010e28:	3ec71de3 	.word	0x3ec71de3
 8010e2c:	19c161d5 	.word	0x19c161d5
 8010e30:	3f2a01a0 	.word	0x3f2a01a0
 8010e34:	1110f8a6 	.word	0x1110f8a6
 8010e38:	3f811111 	.word	0x3f811111

08010e3c <fabs>:
 8010e3c:	ec51 0b10 	vmov	r0, r1, d0
 8010e40:	ee10 2a10 	vmov	r2, s0
 8010e44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e48:	ec43 2b10 	vmov	d0, r2, r3
 8010e4c:	4770      	bx	lr
	...

08010e50 <floor>:
 8010e50:	ec51 0b10 	vmov	r0, r1, d0
 8010e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010e5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010e60:	2e13      	cmp	r6, #19
 8010e62:	460c      	mov	r4, r1
 8010e64:	ee10 5a10 	vmov	r5, s0
 8010e68:	4680      	mov	r8, r0
 8010e6a:	dc34      	bgt.n	8010ed6 <floor+0x86>
 8010e6c:	2e00      	cmp	r6, #0
 8010e6e:	da16      	bge.n	8010e9e <floor+0x4e>
 8010e70:	a335      	add	r3, pc, #212	; (adr r3, 8010f48 <floor+0xf8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7ef fa21 	bl	80002bc <__adddf3>
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f7ef fe63 	bl	8000b48 <__aeabi_dcmpgt>
 8010e82:	b148      	cbz	r0, 8010e98 <floor+0x48>
 8010e84:	2c00      	cmp	r4, #0
 8010e86:	da59      	bge.n	8010f3c <floor+0xec>
 8010e88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010e8c:	4a30      	ldr	r2, [pc, #192]	; (8010f50 <floor+0x100>)
 8010e8e:	432b      	orrs	r3, r5
 8010e90:	2500      	movs	r5, #0
 8010e92:	42ab      	cmp	r3, r5
 8010e94:	bf18      	it	ne
 8010e96:	4614      	movne	r4, r2
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	e025      	b.n	8010eea <floor+0x9a>
 8010e9e:	4f2d      	ldr	r7, [pc, #180]	; (8010f54 <floor+0x104>)
 8010ea0:	4137      	asrs	r7, r6
 8010ea2:	ea01 0307 	and.w	r3, r1, r7
 8010ea6:	4303      	orrs	r3, r0
 8010ea8:	d01f      	beq.n	8010eea <floor+0x9a>
 8010eaa:	a327      	add	r3, pc, #156	; (adr r3, 8010f48 <floor+0xf8>)
 8010eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb0:	f7ef fa04 	bl	80002bc <__adddf3>
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f7ef fe46 	bl	8000b48 <__aeabi_dcmpgt>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d0eb      	beq.n	8010e98 <floor+0x48>
 8010ec0:	2c00      	cmp	r4, #0
 8010ec2:	bfbe      	ittt	lt
 8010ec4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010ec8:	fa43 f606 	asrlt.w	r6, r3, r6
 8010ecc:	19a4      	addlt	r4, r4, r6
 8010ece:	ea24 0407 	bic.w	r4, r4, r7
 8010ed2:	2500      	movs	r5, #0
 8010ed4:	e7e0      	b.n	8010e98 <floor+0x48>
 8010ed6:	2e33      	cmp	r6, #51	; 0x33
 8010ed8:	dd0b      	ble.n	8010ef2 <floor+0xa2>
 8010eda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010ede:	d104      	bne.n	8010eea <floor+0x9a>
 8010ee0:	ee10 2a10 	vmov	r2, s0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	f7ef f9e9 	bl	80002bc <__adddf3>
 8010eea:	ec41 0b10 	vmov	d0, r0, r1
 8010eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8010efa:	fa23 f707 	lsr.w	r7, r3, r7
 8010efe:	4207      	tst	r7, r0
 8010f00:	d0f3      	beq.n	8010eea <floor+0x9a>
 8010f02:	a311      	add	r3, pc, #68	; (adr r3, 8010f48 <floor+0xf8>)
 8010f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f08:	f7ef f9d8 	bl	80002bc <__adddf3>
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f7ef fe1a 	bl	8000b48 <__aeabi_dcmpgt>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d0bf      	beq.n	8010e98 <floor+0x48>
 8010f18:	2c00      	cmp	r4, #0
 8010f1a:	da02      	bge.n	8010f22 <floor+0xd2>
 8010f1c:	2e14      	cmp	r6, #20
 8010f1e:	d103      	bne.n	8010f28 <floor+0xd8>
 8010f20:	3401      	adds	r4, #1
 8010f22:	ea25 0507 	bic.w	r5, r5, r7
 8010f26:	e7b7      	b.n	8010e98 <floor+0x48>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010f2e:	fa03 f606 	lsl.w	r6, r3, r6
 8010f32:	4435      	add	r5, r6
 8010f34:	4545      	cmp	r5, r8
 8010f36:	bf38      	it	cc
 8010f38:	18e4      	addcc	r4, r4, r3
 8010f3a:	e7f2      	b.n	8010f22 <floor+0xd2>
 8010f3c:	2500      	movs	r5, #0
 8010f3e:	462c      	mov	r4, r5
 8010f40:	e7aa      	b.n	8010e98 <floor+0x48>
 8010f42:	bf00      	nop
 8010f44:	f3af 8000 	nop.w
 8010f48:	8800759c 	.word	0x8800759c
 8010f4c:	7e37e43c 	.word	0x7e37e43c
 8010f50:	bff00000 	.word	0xbff00000
 8010f54:	000fffff 	.word	0x000fffff

08010f58 <scalbn>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	ec55 4b10 	vmov	r4, r5, d0
 8010f5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010f62:	4606      	mov	r6, r0
 8010f64:	462b      	mov	r3, r5
 8010f66:	b9aa      	cbnz	r2, 8010f94 <scalbn+0x3c>
 8010f68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f6c:	4323      	orrs	r3, r4
 8010f6e:	d03b      	beq.n	8010fe8 <scalbn+0x90>
 8010f70:	4b31      	ldr	r3, [pc, #196]	; (8011038 <scalbn+0xe0>)
 8010f72:	4629      	mov	r1, r5
 8010f74:	2200      	movs	r2, #0
 8010f76:	ee10 0a10 	vmov	r0, s0
 8010f7a:	f7ef fb55 	bl	8000628 <__aeabi_dmul>
 8010f7e:	4b2f      	ldr	r3, [pc, #188]	; (801103c <scalbn+0xe4>)
 8010f80:	429e      	cmp	r6, r3
 8010f82:	4604      	mov	r4, r0
 8010f84:	460d      	mov	r5, r1
 8010f86:	da12      	bge.n	8010fae <scalbn+0x56>
 8010f88:	a327      	add	r3, pc, #156	; (adr r3, 8011028 <scalbn+0xd0>)
 8010f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8e:	f7ef fb4b 	bl	8000628 <__aeabi_dmul>
 8010f92:	e009      	b.n	8010fa8 <scalbn+0x50>
 8010f94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010f98:	428a      	cmp	r2, r1
 8010f9a:	d10c      	bne.n	8010fb6 <scalbn+0x5e>
 8010f9c:	ee10 2a10 	vmov	r2, s0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	4629      	mov	r1, r5
 8010fa4:	f7ef f98a 	bl	80002bc <__adddf3>
 8010fa8:	4604      	mov	r4, r0
 8010faa:	460d      	mov	r5, r1
 8010fac:	e01c      	b.n	8010fe8 <scalbn+0x90>
 8010fae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	3a36      	subs	r2, #54	; 0x36
 8010fb6:	4432      	add	r2, r6
 8010fb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010fbc:	428a      	cmp	r2, r1
 8010fbe:	dd0b      	ble.n	8010fd8 <scalbn+0x80>
 8010fc0:	ec45 4b11 	vmov	d1, r4, r5
 8010fc4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011030 <scalbn+0xd8>
 8010fc8:	f000 f83c 	bl	8011044 <copysign>
 8010fcc:	a318      	add	r3, pc, #96	; (adr r3, 8011030 <scalbn+0xd8>)
 8010fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd2:	ec51 0b10 	vmov	r0, r1, d0
 8010fd6:	e7da      	b.n	8010f8e <scalbn+0x36>
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dd08      	ble.n	8010fee <scalbn+0x96>
 8010fdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010fe8:	ec45 4b10 	vmov	d0, r4, r5
 8010fec:	bd70      	pop	{r4, r5, r6, pc}
 8010fee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010ff2:	da0d      	bge.n	8011010 <scalbn+0xb8>
 8010ff4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010ff8:	429e      	cmp	r6, r3
 8010ffa:	ec45 4b11 	vmov	d1, r4, r5
 8010ffe:	dce1      	bgt.n	8010fc4 <scalbn+0x6c>
 8011000:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011028 <scalbn+0xd0>
 8011004:	f000 f81e 	bl	8011044 <copysign>
 8011008:	a307      	add	r3, pc, #28	; (adr r3, 8011028 <scalbn+0xd0>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	e7e0      	b.n	8010fd2 <scalbn+0x7a>
 8011010:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011014:	3236      	adds	r2, #54	; 0x36
 8011016:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801101a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801101e:	4620      	mov	r0, r4
 8011020:	4629      	mov	r1, r5
 8011022:	2200      	movs	r2, #0
 8011024:	4b06      	ldr	r3, [pc, #24]	; (8011040 <scalbn+0xe8>)
 8011026:	e7b2      	b.n	8010f8e <scalbn+0x36>
 8011028:	c2f8f359 	.word	0xc2f8f359
 801102c:	01a56e1f 	.word	0x01a56e1f
 8011030:	8800759c 	.word	0x8800759c
 8011034:	7e37e43c 	.word	0x7e37e43c
 8011038:	43500000 	.word	0x43500000
 801103c:	ffff3cb0 	.word	0xffff3cb0
 8011040:	3c900000 	.word	0x3c900000

08011044 <copysign>:
 8011044:	ec51 0b10 	vmov	r0, r1, d0
 8011048:	ee11 0a90 	vmov	r0, s3
 801104c:	ee10 2a10 	vmov	r2, s0
 8011050:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011054:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011058:	ea41 0300 	orr.w	r3, r1, r0
 801105c:	ec43 2b10 	vmov	d0, r2, r3
 8011060:	4770      	bx	lr
	...

08011064 <__errno>:
 8011064:	4b01      	ldr	r3, [pc, #4]	; (801106c <__errno+0x8>)
 8011066:	6818      	ldr	r0, [r3, #0]
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	2000000c 	.word	0x2000000c

08011070 <__libc_init_array>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	4e0d      	ldr	r6, [pc, #52]	; (80110a8 <__libc_init_array+0x38>)
 8011074:	4c0d      	ldr	r4, [pc, #52]	; (80110ac <__libc_init_array+0x3c>)
 8011076:	1ba4      	subs	r4, r4, r6
 8011078:	10a4      	asrs	r4, r4, #2
 801107a:	2500      	movs	r5, #0
 801107c:	42a5      	cmp	r5, r4
 801107e:	d109      	bne.n	8011094 <__libc_init_array+0x24>
 8011080:	4e0b      	ldr	r6, [pc, #44]	; (80110b0 <__libc_init_array+0x40>)
 8011082:	4c0c      	ldr	r4, [pc, #48]	; (80110b4 <__libc_init_array+0x44>)
 8011084:	f004 ff36 	bl	8015ef4 <_init>
 8011088:	1ba4      	subs	r4, r4, r6
 801108a:	10a4      	asrs	r4, r4, #2
 801108c:	2500      	movs	r5, #0
 801108e:	42a5      	cmp	r5, r4
 8011090:	d105      	bne.n	801109e <__libc_init_array+0x2e>
 8011092:	bd70      	pop	{r4, r5, r6, pc}
 8011094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011098:	4798      	blx	r3
 801109a:	3501      	adds	r5, #1
 801109c:	e7ee      	b.n	801107c <__libc_init_array+0xc>
 801109e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80110a2:	4798      	blx	r3
 80110a4:	3501      	adds	r5, #1
 80110a6:	e7f2      	b.n	801108e <__libc_init_array+0x1e>
 80110a8:	08016a54 	.word	0x08016a54
 80110ac:	08016a54 	.word	0x08016a54
 80110b0:	08016a54 	.word	0x08016a54
 80110b4:	08016a5c 	.word	0x08016a5c

080110b8 <memset>:
 80110b8:	4402      	add	r2, r0
 80110ba:	4603      	mov	r3, r0
 80110bc:	4293      	cmp	r3, r2
 80110be:	d100      	bne.n	80110c2 <memset+0xa>
 80110c0:	4770      	bx	lr
 80110c2:	f803 1b01 	strb.w	r1, [r3], #1
 80110c6:	e7f9      	b.n	80110bc <memset+0x4>

080110c8 <__cvt>:
 80110c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110cc:	ec55 4b10 	vmov	r4, r5, d0
 80110d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80110d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	460e      	mov	r6, r1
 80110da:	4691      	mov	r9, r2
 80110dc:	4619      	mov	r1, r3
 80110de:	bfb8      	it	lt
 80110e0:	4622      	movlt	r2, r4
 80110e2:	462b      	mov	r3, r5
 80110e4:	f027 0720 	bic.w	r7, r7, #32
 80110e8:	bfbb      	ittet	lt
 80110ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80110ee:	461d      	movlt	r5, r3
 80110f0:	2300      	movge	r3, #0
 80110f2:	232d      	movlt	r3, #45	; 0x2d
 80110f4:	bfb8      	it	lt
 80110f6:	4614      	movlt	r4, r2
 80110f8:	2f46      	cmp	r7, #70	; 0x46
 80110fa:	700b      	strb	r3, [r1, #0]
 80110fc:	d004      	beq.n	8011108 <__cvt+0x40>
 80110fe:	2f45      	cmp	r7, #69	; 0x45
 8011100:	d100      	bne.n	8011104 <__cvt+0x3c>
 8011102:	3601      	adds	r6, #1
 8011104:	2102      	movs	r1, #2
 8011106:	e000      	b.n	801110a <__cvt+0x42>
 8011108:	2103      	movs	r1, #3
 801110a:	ab03      	add	r3, sp, #12
 801110c:	9301      	str	r3, [sp, #4]
 801110e:	ab02      	add	r3, sp, #8
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	4632      	mov	r2, r6
 8011114:	4653      	mov	r3, sl
 8011116:	ec45 4b10 	vmov	d0, r4, r5
 801111a:	f001 ffb1 	bl	8013080 <_dtoa_r>
 801111e:	2f47      	cmp	r7, #71	; 0x47
 8011120:	4680      	mov	r8, r0
 8011122:	d102      	bne.n	801112a <__cvt+0x62>
 8011124:	f019 0f01 	tst.w	r9, #1
 8011128:	d026      	beq.n	8011178 <__cvt+0xb0>
 801112a:	2f46      	cmp	r7, #70	; 0x46
 801112c:	eb08 0906 	add.w	r9, r8, r6
 8011130:	d111      	bne.n	8011156 <__cvt+0x8e>
 8011132:	f898 3000 	ldrb.w	r3, [r8]
 8011136:	2b30      	cmp	r3, #48	; 0x30
 8011138:	d10a      	bne.n	8011150 <__cvt+0x88>
 801113a:	2200      	movs	r2, #0
 801113c:	2300      	movs	r3, #0
 801113e:	4620      	mov	r0, r4
 8011140:	4629      	mov	r1, r5
 8011142:	f7ef fcd9 	bl	8000af8 <__aeabi_dcmpeq>
 8011146:	b918      	cbnz	r0, 8011150 <__cvt+0x88>
 8011148:	f1c6 0601 	rsb	r6, r6, #1
 801114c:	f8ca 6000 	str.w	r6, [sl]
 8011150:	f8da 3000 	ldr.w	r3, [sl]
 8011154:	4499      	add	r9, r3
 8011156:	2200      	movs	r2, #0
 8011158:	2300      	movs	r3, #0
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	f7ef fccb 	bl	8000af8 <__aeabi_dcmpeq>
 8011162:	b938      	cbnz	r0, 8011174 <__cvt+0xac>
 8011164:	2230      	movs	r2, #48	; 0x30
 8011166:	9b03      	ldr	r3, [sp, #12]
 8011168:	454b      	cmp	r3, r9
 801116a:	d205      	bcs.n	8011178 <__cvt+0xb0>
 801116c:	1c59      	adds	r1, r3, #1
 801116e:	9103      	str	r1, [sp, #12]
 8011170:	701a      	strb	r2, [r3, #0]
 8011172:	e7f8      	b.n	8011166 <__cvt+0x9e>
 8011174:	f8cd 900c 	str.w	r9, [sp, #12]
 8011178:	9b03      	ldr	r3, [sp, #12]
 801117a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801117c:	eba3 0308 	sub.w	r3, r3, r8
 8011180:	4640      	mov	r0, r8
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	b004      	add	sp, #16
 8011186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801118a <__exponent>:
 801118a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801118c:	2900      	cmp	r1, #0
 801118e:	4604      	mov	r4, r0
 8011190:	bfba      	itte	lt
 8011192:	4249      	neglt	r1, r1
 8011194:	232d      	movlt	r3, #45	; 0x2d
 8011196:	232b      	movge	r3, #43	; 0x2b
 8011198:	2909      	cmp	r1, #9
 801119a:	f804 2b02 	strb.w	r2, [r4], #2
 801119e:	7043      	strb	r3, [r0, #1]
 80111a0:	dd20      	ble.n	80111e4 <__exponent+0x5a>
 80111a2:	f10d 0307 	add.w	r3, sp, #7
 80111a6:	461f      	mov	r7, r3
 80111a8:	260a      	movs	r6, #10
 80111aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80111ae:	fb06 1115 	mls	r1, r6, r5, r1
 80111b2:	3130      	adds	r1, #48	; 0x30
 80111b4:	2d09      	cmp	r5, #9
 80111b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80111ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80111be:	4629      	mov	r1, r5
 80111c0:	dc09      	bgt.n	80111d6 <__exponent+0x4c>
 80111c2:	3130      	adds	r1, #48	; 0x30
 80111c4:	3b02      	subs	r3, #2
 80111c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80111ca:	42bb      	cmp	r3, r7
 80111cc:	4622      	mov	r2, r4
 80111ce:	d304      	bcc.n	80111da <__exponent+0x50>
 80111d0:	1a10      	subs	r0, r2, r0
 80111d2:	b003      	add	sp, #12
 80111d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d6:	4613      	mov	r3, r2
 80111d8:	e7e7      	b.n	80111aa <__exponent+0x20>
 80111da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111de:	f804 2b01 	strb.w	r2, [r4], #1
 80111e2:	e7f2      	b.n	80111ca <__exponent+0x40>
 80111e4:	2330      	movs	r3, #48	; 0x30
 80111e6:	4419      	add	r1, r3
 80111e8:	7083      	strb	r3, [r0, #2]
 80111ea:	1d02      	adds	r2, r0, #4
 80111ec:	70c1      	strb	r1, [r0, #3]
 80111ee:	e7ef      	b.n	80111d0 <__exponent+0x46>

080111f0 <_printf_float>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	b08d      	sub	sp, #52	; 0x34
 80111f6:	460c      	mov	r4, r1
 80111f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80111fc:	4616      	mov	r6, r2
 80111fe:	461f      	mov	r7, r3
 8011200:	4605      	mov	r5, r0
 8011202:	f003 f9a9 	bl	8014558 <_localeconv_r>
 8011206:	6803      	ldr	r3, [r0, #0]
 8011208:	9304      	str	r3, [sp, #16]
 801120a:	4618      	mov	r0, r3
 801120c:	f7ee fff8 	bl	8000200 <strlen>
 8011210:	2300      	movs	r3, #0
 8011212:	930a      	str	r3, [sp, #40]	; 0x28
 8011214:	f8d8 3000 	ldr.w	r3, [r8]
 8011218:	9005      	str	r0, [sp, #20]
 801121a:	3307      	adds	r3, #7
 801121c:	f023 0307 	bic.w	r3, r3, #7
 8011220:	f103 0208 	add.w	r2, r3, #8
 8011224:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011228:	f8d4 b000 	ldr.w	fp, [r4]
 801122c:	f8c8 2000 	str.w	r2, [r8]
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011238:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801123c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011240:	9307      	str	r3, [sp, #28]
 8011242:	f8cd 8018 	str.w	r8, [sp, #24]
 8011246:	f04f 32ff 	mov.w	r2, #4294967295
 801124a:	4ba7      	ldr	r3, [pc, #668]	; (80114e8 <_printf_float+0x2f8>)
 801124c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011250:	f7ef fc84 	bl	8000b5c <__aeabi_dcmpun>
 8011254:	bb70      	cbnz	r0, 80112b4 <_printf_float+0xc4>
 8011256:	f04f 32ff 	mov.w	r2, #4294967295
 801125a:	4ba3      	ldr	r3, [pc, #652]	; (80114e8 <_printf_float+0x2f8>)
 801125c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011260:	f7ef fc5e 	bl	8000b20 <__aeabi_dcmple>
 8011264:	bb30      	cbnz	r0, 80112b4 <_printf_float+0xc4>
 8011266:	2200      	movs	r2, #0
 8011268:	2300      	movs	r3, #0
 801126a:	4640      	mov	r0, r8
 801126c:	4649      	mov	r1, r9
 801126e:	f7ef fc4d 	bl	8000b0c <__aeabi_dcmplt>
 8011272:	b110      	cbz	r0, 801127a <_printf_float+0x8a>
 8011274:	232d      	movs	r3, #45	; 0x2d
 8011276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801127a:	4a9c      	ldr	r2, [pc, #624]	; (80114ec <_printf_float+0x2fc>)
 801127c:	4b9c      	ldr	r3, [pc, #624]	; (80114f0 <_printf_float+0x300>)
 801127e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011282:	bf8c      	ite	hi
 8011284:	4690      	movhi	r8, r2
 8011286:	4698      	movls	r8, r3
 8011288:	2303      	movs	r3, #3
 801128a:	f02b 0204 	bic.w	r2, fp, #4
 801128e:	6123      	str	r3, [r4, #16]
 8011290:	6022      	str	r2, [r4, #0]
 8011292:	f04f 0900 	mov.w	r9, #0
 8011296:	9700      	str	r7, [sp, #0]
 8011298:	4633      	mov	r3, r6
 801129a:	aa0b      	add	r2, sp, #44	; 0x2c
 801129c:	4621      	mov	r1, r4
 801129e:	4628      	mov	r0, r5
 80112a0:	f000 f9e6 	bl	8011670 <_printf_common>
 80112a4:	3001      	adds	r0, #1
 80112a6:	f040 808d 	bne.w	80113c4 <_printf_float+0x1d4>
 80112aa:	f04f 30ff 	mov.w	r0, #4294967295
 80112ae:	b00d      	add	sp, #52	; 0x34
 80112b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b4:	4642      	mov	r2, r8
 80112b6:	464b      	mov	r3, r9
 80112b8:	4640      	mov	r0, r8
 80112ba:	4649      	mov	r1, r9
 80112bc:	f7ef fc4e 	bl	8000b5c <__aeabi_dcmpun>
 80112c0:	b110      	cbz	r0, 80112c8 <_printf_float+0xd8>
 80112c2:	4a8c      	ldr	r2, [pc, #560]	; (80114f4 <_printf_float+0x304>)
 80112c4:	4b8c      	ldr	r3, [pc, #560]	; (80114f8 <_printf_float+0x308>)
 80112c6:	e7da      	b.n	801127e <_printf_float+0x8e>
 80112c8:	6861      	ldr	r1, [r4, #4]
 80112ca:	1c4b      	adds	r3, r1, #1
 80112cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80112d0:	a80a      	add	r0, sp, #40	; 0x28
 80112d2:	d13e      	bne.n	8011352 <_printf_float+0x162>
 80112d4:	2306      	movs	r3, #6
 80112d6:	6063      	str	r3, [r4, #4]
 80112d8:	2300      	movs	r3, #0
 80112da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80112de:	ab09      	add	r3, sp, #36	; 0x24
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	ec49 8b10 	vmov	d0, r8, r9
 80112e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80112ea:	6022      	str	r2, [r4, #0]
 80112ec:	f8cd a004 	str.w	sl, [sp, #4]
 80112f0:	6861      	ldr	r1, [r4, #4]
 80112f2:	4628      	mov	r0, r5
 80112f4:	f7ff fee8 	bl	80110c8 <__cvt>
 80112f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80112fc:	2b47      	cmp	r3, #71	; 0x47
 80112fe:	4680      	mov	r8, r0
 8011300:	d109      	bne.n	8011316 <_printf_float+0x126>
 8011302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011304:	1cd8      	adds	r0, r3, #3
 8011306:	db02      	blt.n	801130e <_printf_float+0x11e>
 8011308:	6862      	ldr	r2, [r4, #4]
 801130a:	4293      	cmp	r3, r2
 801130c:	dd47      	ble.n	801139e <_printf_float+0x1ae>
 801130e:	f1aa 0a02 	sub.w	sl, sl, #2
 8011312:	fa5f fa8a 	uxtb.w	sl, sl
 8011316:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801131a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801131c:	d824      	bhi.n	8011368 <_printf_float+0x178>
 801131e:	3901      	subs	r1, #1
 8011320:	4652      	mov	r2, sl
 8011322:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011326:	9109      	str	r1, [sp, #36]	; 0x24
 8011328:	f7ff ff2f 	bl	801118a <__exponent>
 801132c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801132e:	1813      	adds	r3, r2, r0
 8011330:	2a01      	cmp	r2, #1
 8011332:	4681      	mov	r9, r0
 8011334:	6123      	str	r3, [r4, #16]
 8011336:	dc02      	bgt.n	801133e <_printf_float+0x14e>
 8011338:	6822      	ldr	r2, [r4, #0]
 801133a:	07d1      	lsls	r1, r2, #31
 801133c:	d501      	bpl.n	8011342 <_printf_float+0x152>
 801133e:	3301      	adds	r3, #1
 8011340:	6123      	str	r3, [r4, #16]
 8011342:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011346:	2b00      	cmp	r3, #0
 8011348:	d0a5      	beq.n	8011296 <_printf_float+0xa6>
 801134a:	232d      	movs	r3, #45	; 0x2d
 801134c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011350:	e7a1      	b.n	8011296 <_printf_float+0xa6>
 8011352:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011356:	f000 8177 	beq.w	8011648 <_printf_float+0x458>
 801135a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801135e:	d1bb      	bne.n	80112d8 <_printf_float+0xe8>
 8011360:	2900      	cmp	r1, #0
 8011362:	d1b9      	bne.n	80112d8 <_printf_float+0xe8>
 8011364:	2301      	movs	r3, #1
 8011366:	e7b6      	b.n	80112d6 <_printf_float+0xe6>
 8011368:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801136c:	d119      	bne.n	80113a2 <_printf_float+0x1b2>
 801136e:	2900      	cmp	r1, #0
 8011370:	6863      	ldr	r3, [r4, #4]
 8011372:	dd0c      	ble.n	801138e <_printf_float+0x19e>
 8011374:	6121      	str	r1, [r4, #16]
 8011376:	b913      	cbnz	r3, 801137e <_printf_float+0x18e>
 8011378:	6822      	ldr	r2, [r4, #0]
 801137a:	07d2      	lsls	r2, r2, #31
 801137c:	d502      	bpl.n	8011384 <_printf_float+0x194>
 801137e:	3301      	adds	r3, #1
 8011380:	440b      	add	r3, r1
 8011382:	6123      	str	r3, [r4, #16]
 8011384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011386:	65a3      	str	r3, [r4, #88]	; 0x58
 8011388:	f04f 0900 	mov.w	r9, #0
 801138c:	e7d9      	b.n	8011342 <_printf_float+0x152>
 801138e:	b913      	cbnz	r3, 8011396 <_printf_float+0x1a6>
 8011390:	6822      	ldr	r2, [r4, #0]
 8011392:	07d0      	lsls	r0, r2, #31
 8011394:	d501      	bpl.n	801139a <_printf_float+0x1aa>
 8011396:	3302      	adds	r3, #2
 8011398:	e7f3      	b.n	8011382 <_printf_float+0x192>
 801139a:	2301      	movs	r3, #1
 801139c:	e7f1      	b.n	8011382 <_printf_float+0x192>
 801139e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80113a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80113a6:	4293      	cmp	r3, r2
 80113a8:	db05      	blt.n	80113b6 <_printf_float+0x1c6>
 80113aa:	6822      	ldr	r2, [r4, #0]
 80113ac:	6123      	str	r3, [r4, #16]
 80113ae:	07d1      	lsls	r1, r2, #31
 80113b0:	d5e8      	bpl.n	8011384 <_printf_float+0x194>
 80113b2:	3301      	adds	r3, #1
 80113b4:	e7e5      	b.n	8011382 <_printf_float+0x192>
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	bfd4      	ite	le
 80113ba:	f1c3 0302 	rsble	r3, r3, #2
 80113be:	2301      	movgt	r3, #1
 80113c0:	4413      	add	r3, r2
 80113c2:	e7de      	b.n	8011382 <_printf_float+0x192>
 80113c4:	6823      	ldr	r3, [r4, #0]
 80113c6:	055a      	lsls	r2, r3, #21
 80113c8:	d407      	bmi.n	80113da <_printf_float+0x1ea>
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	4642      	mov	r2, r8
 80113ce:	4631      	mov	r1, r6
 80113d0:	4628      	mov	r0, r5
 80113d2:	47b8      	blx	r7
 80113d4:	3001      	adds	r0, #1
 80113d6:	d12b      	bne.n	8011430 <_printf_float+0x240>
 80113d8:	e767      	b.n	80112aa <_printf_float+0xba>
 80113da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80113de:	f240 80dc 	bls.w	801159a <_printf_float+0x3aa>
 80113e2:	2200      	movs	r2, #0
 80113e4:	2300      	movs	r3, #0
 80113e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80113ea:	f7ef fb85 	bl	8000af8 <__aeabi_dcmpeq>
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d033      	beq.n	801145a <_printf_float+0x26a>
 80113f2:	2301      	movs	r3, #1
 80113f4:	4a41      	ldr	r2, [pc, #260]	; (80114fc <_printf_float+0x30c>)
 80113f6:	4631      	mov	r1, r6
 80113f8:	4628      	mov	r0, r5
 80113fa:	47b8      	blx	r7
 80113fc:	3001      	adds	r0, #1
 80113fe:	f43f af54 	beq.w	80112aa <_printf_float+0xba>
 8011402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011406:	429a      	cmp	r2, r3
 8011408:	db02      	blt.n	8011410 <_printf_float+0x220>
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	07d8      	lsls	r0, r3, #31
 801140e:	d50f      	bpl.n	8011430 <_printf_float+0x240>
 8011410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011414:	4631      	mov	r1, r6
 8011416:	4628      	mov	r0, r5
 8011418:	47b8      	blx	r7
 801141a:	3001      	adds	r0, #1
 801141c:	f43f af45 	beq.w	80112aa <_printf_float+0xba>
 8011420:	f04f 0800 	mov.w	r8, #0
 8011424:	f104 091a 	add.w	r9, r4, #26
 8011428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801142a:	3b01      	subs	r3, #1
 801142c:	4543      	cmp	r3, r8
 801142e:	dc09      	bgt.n	8011444 <_printf_float+0x254>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	079b      	lsls	r3, r3, #30
 8011434:	f100 8103 	bmi.w	801163e <_printf_float+0x44e>
 8011438:	68e0      	ldr	r0, [r4, #12]
 801143a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801143c:	4298      	cmp	r0, r3
 801143e:	bfb8      	it	lt
 8011440:	4618      	movlt	r0, r3
 8011442:	e734      	b.n	80112ae <_printf_float+0xbe>
 8011444:	2301      	movs	r3, #1
 8011446:	464a      	mov	r2, r9
 8011448:	4631      	mov	r1, r6
 801144a:	4628      	mov	r0, r5
 801144c:	47b8      	blx	r7
 801144e:	3001      	adds	r0, #1
 8011450:	f43f af2b 	beq.w	80112aa <_printf_float+0xba>
 8011454:	f108 0801 	add.w	r8, r8, #1
 8011458:	e7e6      	b.n	8011428 <_printf_float+0x238>
 801145a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801145c:	2b00      	cmp	r3, #0
 801145e:	dc2b      	bgt.n	80114b8 <_printf_float+0x2c8>
 8011460:	2301      	movs	r3, #1
 8011462:	4a26      	ldr	r2, [pc, #152]	; (80114fc <_printf_float+0x30c>)
 8011464:	4631      	mov	r1, r6
 8011466:	4628      	mov	r0, r5
 8011468:	47b8      	blx	r7
 801146a:	3001      	adds	r0, #1
 801146c:	f43f af1d 	beq.w	80112aa <_printf_float+0xba>
 8011470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011472:	b923      	cbnz	r3, 801147e <_printf_float+0x28e>
 8011474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011476:	b913      	cbnz	r3, 801147e <_printf_float+0x28e>
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	07d9      	lsls	r1, r3, #31
 801147c:	d5d8      	bpl.n	8011430 <_printf_float+0x240>
 801147e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011482:	4631      	mov	r1, r6
 8011484:	4628      	mov	r0, r5
 8011486:	47b8      	blx	r7
 8011488:	3001      	adds	r0, #1
 801148a:	f43f af0e 	beq.w	80112aa <_printf_float+0xba>
 801148e:	f04f 0900 	mov.w	r9, #0
 8011492:	f104 0a1a 	add.w	sl, r4, #26
 8011496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011498:	425b      	negs	r3, r3
 801149a:	454b      	cmp	r3, r9
 801149c:	dc01      	bgt.n	80114a2 <_printf_float+0x2b2>
 801149e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114a0:	e794      	b.n	80113cc <_printf_float+0x1dc>
 80114a2:	2301      	movs	r3, #1
 80114a4:	4652      	mov	r2, sl
 80114a6:	4631      	mov	r1, r6
 80114a8:	4628      	mov	r0, r5
 80114aa:	47b8      	blx	r7
 80114ac:	3001      	adds	r0, #1
 80114ae:	f43f aefc 	beq.w	80112aa <_printf_float+0xba>
 80114b2:	f109 0901 	add.w	r9, r9, #1
 80114b6:	e7ee      	b.n	8011496 <_printf_float+0x2a6>
 80114b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114bc:	429a      	cmp	r2, r3
 80114be:	bfa8      	it	ge
 80114c0:	461a      	movge	r2, r3
 80114c2:	2a00      	cmp	r2, #0
 80114c4:	4691      	mov	r9, r2
 80114c6:	dd07      	ble.n	80114d8 <_printf_float+0x2e8>
 80114c8:	4613      	mov	r3, r2
 80114ca:	4631      	mov	r1, r6
 80114cc:	4642      	mov	r2, r8
 80114ce:	4628      	mov	r0, r5
 80114d0:	47b8      	blx	r7
 80114d2:	3001      	adds	r0, #1
 80114d4:	f43f aee9 	beq.w	80112aa <_printf_float+0xba>
 80114d8:	f104 031a 	add.w	r3, r4, #26
 80114dc:	f04f 0b00 	mov.w	fp, #0
 80114e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114e4:	9306      	str	r3, [sp, #24]
 80114e6:	e015      	b.n	8011514 <_printf_float+0x324>
 80114e8:	7fefffff 	.word	0x7fefffff
 80114ec:	08016718 	.word	0x08016718
 80114f0:	08016714 	.word	0x08016714
 80114f4:	08016720 	.word	0x08016720
 80114f8:	0801671c 	.word	0x0801671c
 80114fc:	08016943 	.word	0x08016943
 8011500:	2301      	movs	r3, #1
 8011502:	9a06      	ldr	r2, [sp, #24]
 8011504:	4631      	mov	r1, r6
 8011506:	4628      	mov	r0, r5
 8011508:	47b8      	blx	r7
 801150a:	3001      	adds	r0, #1
 801150c:	f43f aecd 	beq.w	80112aa <_printf_float+0xba>
 8011510:	f10b 0b01 	add.w	fp, fp, #1
 8011514:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011518:	ebaa 0309 	sub.w	r3, sl, r9
 801151c:	455b      	cmp	r3, fp
 801151e:	dcef      	bgt.n	8011500 <_printf_float+0x310>
 8011520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011524:	429a      	cmp	r2, r3
 8011526:	44d0      	add	r8, sl
 8011528:	db15      	blt.n	8011556 <_printf_float+0x366>
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	07da      	lsls	r2, r3, #31
 801152e:	d412      	bmi.n	8011556 <_printf_float+0x366>
 8011530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011534:	eba3 020a 	sub.w	r2, r3, sl
 8011538:	eba3 0a01 	sub.w	sl, r3, r1
 801153c:	4592      	cmp	sl, r2
 801153e:	bfa8      	it	ge
 8011540:	4692      	movge	sl, r2
 8011542:	f1ba 0f00 	cmp.w	sl, #0
 8011546:	dc0e      	bgt.n	8011566 <_printf_float+0x376>
 8011548:	f04f 0800 	mov.w	r8, #0
 801154c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011550:	f104 091a 	add.w	r9, r4, #26
 8011554:	e019      	b.n	801158a <_printf_float+0x39a>
 8011556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801155a:	4631      	mov	r1, r6
 801155c:	4628      	mov	r0, r5
 801155e:	47b8      	blx	r7
 8011560:	3001      	adds	r0, #1
 8011562:	d1e5      	bne.n	8011530 <_printf_float+0x340>
 8011564:	e6a1      	b.n	80112aa <_printf_float+0xba>
 8011566:	4653      	mov	r3, sl
 8011568:	4642      	mov	r2, r8
 801156a:	4631      	mov	r1, r6
 801156c:	4628      	mov	r0, r5
 801156e:	47b8      	blx	r7
 8011570:	3001      	adds	r0, #1
 8011572:	d1e9      	bne.n	8011548 <_printf_float+0x358>
 8011574:	e699      	b.n	80112aa <_printf_float+0xba>
 8011576:	2301      	movs	r3, #1
 8011578:	464a      	mov	r2, r9
 801157a:	4631      	mov	r1, r6
 801157c:	4628      	mov	r0, r5
 801157e:	47b8      	blx	r7
 8011580:	3001      	adds	r0, #1
 8011582:	f43f ae92 	beq.w	80112aa <_printf_float+0xba>
 8011586:	f108 0801 	add.w	r8, r8, #1
 801158a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801158e:	1a9b      	subs	r3, r3, r2
 8011590:	eba3 030a 	sub.w	r3, r3, sl
 8011594:	4543      	cmp	r3, r8
 8011596:	dcee      	bgt.n	8011576 <_printf_float+0x386>
 8011598:	e74a      	b.n	8011430 <_printf_float+0x240>
 801159a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801159c:	2a01      	cmp	r2, #1
 801159e:	dc01      	bgt.n	80115a4 <_printf_float+0x3b4>
 80115a0:	07db      	lsls	r3, r3, #31
 80115a2:	d53a      	bpl.n	801161a <_printf_float+0x42a>
 80115a4:	2301      	movs	r3, #1
 80115a6:	4642      	mov	r2, r8
 80115a8:	4631      	mov	r1, r6
 80115aa:	4628      	mov	r0, r5
 80115ac:	47b8      	blx	r7
 80115ae:	3001      	adds	r0, #1
 80115b0:	f43f ae7b 	beq.w	80112aa <_printf_float+0xba>
 80115b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115b8:	4631      	mov	r1, r6
 80115ba:	4628      	mov	r0, r5
 80115bc:	47b8      	blx	r7
 80115be:	3001      	adds	r0, #1
 80115c0:	f108 0801 	add.w	r8, r8, #1
 80115c4:	f43f ae71 	beq.w	80112aa <_printf_float+0xba>
 80115c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ca:	2200      	movs	r2, #0
 80115cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80115d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80115d4:	2300      	movs	r3, #0
 80115d6:	f7ef fa8f 	bl	8000af8 <__aeabi_dcmpeq>
 80115da:	b9c8      	cbnz	r0, 8011610 <_printf_float+0x420>
 80115dc:	4653      	mov	r3, sl
 80115de:	4642      	mov	r2, r8
 80115e0:	4631      	mov	r1, r6
 80115e2:	4628      	mov	r0, r5
 80115e4:	47b8      	blx	r7
 80115e6:	3001      	adds	r0, #1
 80115e8:	d10e      	bne.n	8011608 <_printf_float+0x418>
 80115ea:	e65e      	b.n	80112aa <_printf_float+0xba>
 80115ec:	2301      	movs	r3, #1
 80115ee:	4652      	mov	r2, sl
 80115f0:	4631      	mov	r1, r6
 80115f2:	4628      	mov	r0, r5
 80115f4:	47b8      	blx	r7
 80115f6:	3001      	adds	r0, #1
 80115f8:	f43f ae57 	beq.w	80112aa <_printf_float+0xba>
 80115fc:	f108 0801 	add.w	r8, r8, #1
 8011600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011602:	3b01      	subs	r3, #1
 8011604:	4543      	cmp	r3, r8
 8011606:	dcf1      	bgt.n	80115ec <_printf_float+0x3fc>
 8011608:	464b      	mov	r3, r9
 801160a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801160e:	e6de      	b.n	80113ce <_printf_float+0x1de>
 8011610:	f04f 0800 	mov.w	r8, #0
 8011614:	f104 0a1a 	add.w	sl, r4, #26
 8011618:	e7f2      	b.n	8011600 <_printf_float+0x410>
 801161a:	2301      	movs	r3, #1
 801161c:	e7df      	b.n	80115de <_printf_float+0x3ee>
 801161e:	2301      	movs	r3, #1
 8011620:	464a      	mov	r2, r9
 8011622:	4631      	mov	r1, r6
 8011624:	4628      	mov	r0, r5
 8011626:	47b8      	blx	r7
 8011628:	3001      	adds	r0, #1
 801162a:	f43f ae3e 	beq.w	80112aa <_printf_float+0xba>
 801162e:	f108 0801 	add.w	r8, r8, #1
 8011632:	68e3      	ldr	r3, [r4, #12]
 8011634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011636:	1a9b      	subs	r3, r3, r2
 8011638:	4543      	cmp	r3, r8
 801163a:	dcf0      	bgt.n	801161e <_printf_float+0x42e>
 801163c:	e6fc      	b.n	8011438 <_printf_float+0x248>
 801163e:	f04f 0800 	mov.w	r8, #0
 8011642:	f104 0919 	add.w	r9, r4, #25
 8011646:	e7f4      	b.n	8011632 <_printf_float+0x442>
 8011648:	2900      	cmp	r1, #0
 801164a:	f43f ae8b 	beq.w	8011364 <_printf_float+0x174>
 801164e:	2300      	movs	r3, #0
 8011650:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011654:	ab09      	add	r3, sp, #36	; 0x24
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	ec49 8b10 	vmov	d0, r8, r9
 801165c:	6022      	str	r2, [r4, #0]
 801165e:	f8cd a004 	str.w	sl, [sp, #4]
 8011662:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011666:	4628      	mov	r0, r5
 8011668:	f7ff fd2e 	bl	80110c8 <__cvt>
 801166c:	4680      	mov	r8, r0
 801166e:	e648      	b.n	8011302 <_printf_float+0x112>

08011670 <_printf_common>:
 8011670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011674:	4691      	mov	r9, r2
 8011676:	461f      	mov	r7, r3
 8011678:	688a      	ldr	r2, [r1, #8]
 801167a:	690b      	ldr	r3, [r1, #16]
 801167c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011680:	4293      	cmp	r3, r2
 8011682:	bfb8      	it	lt
 8011684:	4613      	movlt	r3, r2
 8011686:	f8c9 3000 	str.w	r3, [r9]
 801168a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801168e:	4606      	mov	r6, r0
 8011690:	460c      	mov	r4, r1
 8011692:	b112      	cbz	r2, 801169a <_printf_common+0x2a>
 8011694:	3301      	adds	r3, #1
 8011696:	f8c9 3000 	str.w	r3, [r9]
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	0699      	lsls	r1, r3, #26
 801169e:	bf42      	ittt	mi
 80116a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80116a4:	3302      	addmi	r3, #2
 80116a6:	f8c9 3000 	strmi.w	r3, [r9]
 80116aa:	6825      	ldr	r5, [r4, #0]
 80116ac:	f015 0506 	ands.w	r5, r5, #6
 80116b0:	d107      	bne.n	80116c2 <_printf_common+0x52>
 80116b2:	f104 0a19 	add.w	sl, r4, #25
 80116b6:	68e3      	ldr	r3, [r4, #12]
 80116b8:	f8d9 2000 	ldr.w	r2, [r9]
 80116bc:	1a9b      	subs	r3, r3, r2
 80116be:	42ab      	cmp	r3, r5
 80116c0:	dc28      	bgt.n	8011714 <_printf_common+0xa4>
 80116c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80116c6:	6822      	ldr	r2, [r4, #0]
 80116c8:	3300      	adds	r3, #0
 80116ca:	bf18      	it	ne
 80116cc:	2301      	movne	r3, #1
 80116ce:	0692      	lsls	r2, r2, #26
 80116d0:	d42d      	bmi.n	801172e <_printf_common+0xbe>
 80116d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116d6:	4639      	mov	r1, r7
 80116d8:	4630      	mov	r0, r6
 80116da:	47c0      	blx	r8
 80116dc:	3001      	adds	r0, #1
 80116de:	d020      	beq.n	8011722 <_printf_common+0xb2>
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	68e5      	ldr	r5, [r4, #12]
 80116e4:	f8d9 2000 	ldr.w	r2, [r9]
 80116e8:	f003 0306 	and.w	r3, r3, #6
 80116ec:	2b04      	cmp	r3, #4
 80116ee:	bf08      	it	eq
 80116f0:	1aad      	subeq	r5, r5, r2
 80116f2:	68a3      	ldr	r3, [r4, #8]
 80116f4:	6922      	ldr	r2, [r4, #16]
 80116f6:	bf0c      	ite	eq
 80116f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116fc:	2500      	movne	r5, #0
 80116fe:	4293      	cmp	r3, r2
 8011700:	bfc4      	itt	gt
 8011702:	1a9b      	subgt	r3, r3, r2
 8011704:	18ed      	addgt	r5, r5, r3
 8011706:	f04f 0900 	mov.w	r9, #0
 801170a:	341a      	adds	r4, #26
 801170c:	454d      	cmp	r5, r9
 801170e:	d11a      	bne.n	8011746 <_printf_common+0xd6>
 8011710:	2000      	movs	r0, #0
 8011712:	e008      	b.n	8011726 <_printf_common+0xb6>
 8011714:	2301      	movs	r3, #1
 8011716:	4652      	mov	r2, sl
 8011718:	4639      	mov	r1, r7
 801171a:	4630      	mov	r0, r6
 801171c:	47c0      	blx	r8
 801171e:	3001      	adds	r0, #1
 8011720:	d103      	bne.n	801172a <_printf_common+0xba>
 8011722:	f04f 30ff 	mov.w	r0, #4294967295
 8011726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172a:	3501      	adds	r5, #1
 801172c:	e7c3      	b.n	80116b6 <_printf_common+0x46>
 801172e:	18e1      	adds	r1, r4, r3
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	2030      	movs	r0, #48	; 0x30
 8011734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011738:	4422      	add	r2, r4
 801173a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801173e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011742:	3302      	adds	r3, #2
 8011744:	e7c5      	b.n	80116d2 <_printf_common+0x62>
 8011746:	2301      	movs	r3, #1
 8011748:	4622      	mov	r2, r4
 801174a:	4639      	mov	r1, r7
 801174c:	4630      	mov	r0, r6
 801174e:	47c0      	blx	r8
 8011750:	3001      	adds	r0, #1
 8011752:	d0e6      	beq.n	8011722 <_printf_common+0xb2>
 8011754:	f109 0901 	add.w	r9, r9, #1
 8011758:	e7d8      	b.n	801170c <_printf_common+0x9c>
	...

0801175c <_printf_i>:
 801175c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011760:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011764:	460c      	mov	r4, r1
 8011766:	7e09      	ldrb	r1, [r1, #24]
 8011768:	b085      	sub	sp, #20
 801176a:	296e      	cmp	r1, #110	; 0x6e
 801176c:	4617      	mov	r7, r2
 801176e:	4606      	mov	r6, r0
 8011770:	4698      	mov	r8, r3
 8011772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011774:	f000 80b3 	beq.w	80118de <_printf_i+0x182>
 8011778:	d822      	bhi.n	80117c0 <_printf_i+0x64>
 801177a:	2963      	cmp	r1, #99	; 0x63
 801177c:	d036      	beq.n	80117ec <_printf_i+0x90>
 801177e:	d80a      	bhi.n	8011796 <_printf_i+0x3a>
 8011780:	2900      	cmp	r1, #0
 8011782:	f000 80b9 	beq.w	80118f8 <_printf_i+0x19c>
 8011786:	2958      	cmp	r1, #88	; 0x58
 8011788:	f000 8083 	beq.w	8011892 <_printf_i+0x136>
 801178c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011790:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011794:	e032      	b.n	80117fc <_printf_i+0xa0>
 8011796:	2964      	cmp	r1, #100	; 0x64
 8011798:	d001      	beq.n	801179e <_printf_i+0x42>
 801179a:	2969      	cmp	r1, #105	; 0x69
 801179c:	d1f6      	bne.n	801178c <_printf_i+0x30>
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	6813      	ldr	r3, [r2, #0]
 80117a2:	0605      	lsls	r5, r0, #24
 80117a4:	f103 0104 	add.w	r1, r3, #4
 80117a8:	d52a      	bpl.n	8011800 <_printf_i+0xa4>
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	6011      	str	r1, [r2, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	da03      	bge.n	80117ba <_printf_i+0x5e>
 80117b2:	222d      	movs	r2, #45	; 0x2d
 80117b4:	425b      	negs	r3, r3
 80117b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80117ba:	486f      	ldr	r0, [pc, #444]	; (8011978 <_printf_i+0x21c>)
 80117bc:	220a      	movs	r2, #10
 80117be:	e039      	b.n	8011834 <_printf_i+0xd8>
 80117c0:	2973      	cmp	r1, #115	; 0x73
 80117c2:	f000 809d 	beq.w	8011900 <_printf_i+0x1a4>
 80117c6:	d808      	bhi.n	80117da <_printf_i+0x7e>
 80117c8:	296f      	cmp	r1, #111	; 0x6f
 80117ca:	d020      	beq.n	801180e <_printf_i+0xb2>
 80117cc:	2970      	cmp	r1, #112	; 0x70
 80117ce:	d1dd      	bne.n	801178c <_printf_i+0x30>
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	f043 0320 	orr.w	r3, r3, #32
 80117d6:	6023      	str	r3, [r4, #0]
 80117d8:	e003      	b.n	80117e2 <_printf_i+0x86>
 80117da:	2975      	cmp	r1, #117	; 0x75
 80117dc:	d017      	beq.n	801180e <_printf_i+0xb2>
 80117de:	2978      	cmp	r1, #120	; 0x78
 80117e0:	d1d4      	bne.n	801178c <_printf_i+0x30>
 80117e2:	2378      	movs	r3, #120	; 0x78
 80117e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117e8:	4864      	ldr	r0, [pc, #400]	; (801197c <_printf_i+0x220>)
 80117ea:	e055      	b.n	8011898 <_printf_i+0x13c>
 80117ec:	6813      	ldr	r3, [r2, #0]
 80117ee:	1d19      	adds	r1, r3, #4
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	6011      	str	r1, [r2, #0]
 80117f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117fc:	2301      	movs	r3, #1
 80117fe:	e08c      	b.n	801191a <_printf_i+0x1be>
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	6011      	str	r1, [r2, #0]
 8011804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011808:	bf18      	it	ne
 801180a:	b21b      	sxthne	r3, r3
 801180c:	e7cf      	b.n	80117ae <_printf_i+0x52>
 801180e:	6813      	ldr	r3, [r2, #0]
 8011810:	6825      	ldr	r5, [r4, #0]
 8011812:	1d18      	adds	r0, r3, #4
 8011814:	6010      	str	r0, [r2, #0]
 8011816:	0628      	lsls	r0, r5, #24
 8011818:	d501      	bpl.n	801181e <_printf_i+0xc2>
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	e002      	b.n	8011824 <_printf_i+0xc8>
 801181e:	0668      	lsls	r0, r5, #25
 8011820:	d5fb      	bpl.n	801181a <_printf_i+0xbe>
 8011822:	881b      	ldrh	r3, [r3, #0]
 8011824:	4854      	ldr	r0, [pc, #336]	; (8011978 <_printf_i+0x21c>)
 8011826:	296f      	cmp	r1, #111	; 0x6f
 8011828:	bf14      	ite	ne
 801182a:	220a      	movne	r2, #10
 801182c:	2208      	moveq	r2, #8
 801182e:	2100      	movs	r1, #0
 8011830:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011834:	6865      	ldr	r5, [r4, #4]
 8011836:	60a5      	str	r5, [r4, #8]
 8011838:	2d00      	cmp	r5, #0
 801183a:	f2c0 8095 	blt.w	8011968 <_printf_i+0x20c>
 801183e:	6821      	ldr	r1, [r4, #0]
 8011840:	f021 0104 	bic.w	r1, r1, #4
 8011844:	6021      	str	r1, [r4, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d13d      	bne.n	80118c6 <_printf_i+0x16a>
 801184a:	2d00      	cmp	r5, #0
 801184c:	f040 808e 	bne.w	801196c <_printf_i+0x210>
 8011850:	4665      	mov	r5, ip
 8011852:	2a08      	cmp	r2, #8
 8011854:	d10b      	bne.n	801186e <_printf_i+0x112>
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	07db      	lsls	r3, r3, #31
 801185a:	d508      	bpl.n	801186e <_printf_i+0x112>
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	6862      	ldr	r2, [r4, #4]
 8011860:	429a      	cmp	r2, r3
 8011862:	bfde      	ittt	le
 8011864:	2330      	movle	r3, #48	; 0x30
 8011866:	f805 3c01 	strble.w	r3, [r5, #-1]
 801186a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801186e:	ebac 0305 	sub.w	r3, ip, r5
 8011872:	6123      	str	r3, [r4, #16]
 8011874:	f8cd 8000 	str.w	r8, [sp]
 8011878:	463b      	mov	r3, r7
 801187a:	aa03      	add	r2, sp, #12
 801187c:	4621      	mov	r1, r4
 801187e:	4630      	mov	r0, r6
 8011880:	f7ff fef6 	bl	8011670 <_printf_common>
 8011884:	3001      	adds	r0, #1
 8011886:	d14d      	bne.n	8011924 <_printf_i+0x1c8>
 8011888:	f04f 30ff 	mov.w	r0, #4294967295
 801188c:	b005      	add	sp, #20
 801188e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011892:	4839      	ldr	r0, [pc, #228]	; (8011978 <_printf_i+0x21c>)
 8011894:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011898:	6813      	ldr	r3, [r2, #0]
 801189a:	6821      	ldr	r1, [r4, #0]
 801189c:	1d1d      	adds	r5, r3, #4
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	6015      	str	r5, [r2, #0]
 80118a2:	060a      	lsls	r2, r1, #24
 80118a4:	d50b      	bpl.n	80118be <_printf_i+0x162>
 80118a6:	07ca      	lsls	r2, r1, #31
 80118a8:	bf44      	itt	mi
 80118aa:	f041 0120 	orrmi.w	r1, r1, #32
 80118ae:	6021      	strmi	r1, [r4, #0]
 80118b0:	b91b      	cbnz	r3, 80118ba <_printf_i+0x15e>
 80118b2:	6822      	ldr	r2, [r4, #0]
 80118b4:	f022 0220 	bic.w	r2, r2, #32
 80118b8:	6022      	str	r2, [r4, #0]
 80118ba:	2210      	movs	r2, #16
 80118bc:	e7b7      	b.n	801182e <_printf_i+0xd2>
 80118be:	064d      	lsls	r5, r1, #25
 80118c0:	bf48      	it	mi
 80118c2:	b29b      	uxthmi	r3, r3
 80118c4:	e7ef      	b.n	80118a6 <_printf_i+0x14a>
 80118c6:	4665      	mov	r5, ip
 80118c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80118cc:	fb02 3311 	mls	r3, r2, r1, r3
 80118d0:	5cc3      	ldrb	r3, [r0, r3]
 80118d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80118d6:	460b      	mov	r3, r1
 80118d8:	2900      	cmp	r1, #0
 80118da:	d1f5      	bne.n	80118c8 <_printf_i+0x16c>
 80118dc:	e7b9      	b.n	8011852 <_printf_i+0xf6>
 80118de:	6813      	ldr	r3, [r2, #0]
 80118e0:	6825      	ldr	r5, [r4, #0]
 80118e2:	6961      	ldr	r1, [r4, #20]
 80118e4:	1d18      	adds	r0, r3, #4
 80118e6:	6010      	str	r0, [r2, #0]
 80118e8:	0628      	lsls	r0, r5, #24
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	d501      	bpl.n	80118f2 <_printf_i+0x196>
 80118ee:	6019      	str	r1, [r3, #0]
 80118f0:	e002      	b.n	80118f8 <_printf_i+0x19c>
 80118f2:	066a      	lsls	r2, r5, #25
 80118f4:	d5fb      	bpl.n	80118ee <_printf_i+0x192>
 80118f6:	8019      	strh	r1, [r3, #0]
 80118f8:	2300      	movs	r3, #0
 80118fa:	6123      	str	r3, [r4, #16]
 80118fc:	4665      	mov	r5, ip
 80118fe:	e7b9      	b.n	8011874 <_printf_i+0x118>
 8011900:	6813      	ldr	r3, [r2, #0]
 8011902:	1d19      	adds	r1, r3, #4
 8011904:	6011      	str	r1, [r2, #0]
 8011906:	681d      	ldr	r5, [r3, #0]
 8011908:	6862      	ldr	r2, [r4, #4]
 801190a:	2100      	movs	r1, #0
 801190c:	4628      	mov	r0, r5
 801190e:	f7ee fc7f 	bl	8000210 <memchr>
 8011912:	b108      	cbz	r0, 8011918 <_printf_i+0x1bc>
 8011914:	1b40      	subs	r0, r0, r5
 8011916:	6060      	str	r0, [r4, #4]
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	6123      	str	r3, [r4, #16]
 801191c:	2300      	movs	r3, #0
 801191e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011922:	e7a7      	b.n	8011874 <_printf_i+0x118>
 8011924:	6923      	ldr	r3, [r4, #16]
 8011926:	462a      	mov	r2, r5
 8011928:	4639      	mov	r1, r7
 801192a:	4630      	mov	r0, r6
 801192c:	47c0      	blx	r8
 801192e:	3001      	adds	r0, #1
 8011930:	d0aa      	beq.n	8011888 <_printf_i+0x12c>
 8011932:	6823      	ldr	r3, [r4, #0]
 8011934:	079b      	lsls	r3, r3, #30
 8011936:	d413      	bmi.n	8011960 <_printf_i+0x204>
 8011938:	68e0      	ldr	r0, [r4, #12]
 801193a:	9b03      	ldr	r3, [sp, #12]
 801193c:	4298      	cmp	r0, r3
 801193e:	bfb8      	it	lt
 8011940:	4618      	movlt	r0, r3
 8011942:	e7a3      	b.n	801188c <_printf_i+0x130>
 8011944:	2301      	movs	r3, #1
 8011946:	464a      	mov	r2, r9
 8011948:	4639      	mov	r1, r7
 801194a:	4630      	mov	r0, r6
 801194c:	47c0      	blx	r8
 801194e:	3001      	adds	r0, #1
 8011950:	d09a      	beq.n	8011888 <_printf_i+0x12c>
 8011952:	3501      	adds	r5, #1
 8011954:	68e3      	ldr	r3, [r4, #12]
 8011956:	9a03      	ldr	r2, [sp, #12]
 8011958:	1a9b      	subs	r3, r3, r2
 801195a:	42ab      	cmp	r3, r5
 801195c:	dcf2      	bgt.n	8011944 <_printf_i+0x1e8>
 801195e:	e7eb      	b.n	8011938 <_printf_i+0x1dc>
 8011960:	2500      	movs	r5, #0
 8011962:	f104 0919 	add.w	r9, r4, #25
 8011966:	e7f5      	b.n	8011954 <_printf_i+0x1f8>
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1ac      	bne.n	80118c6 <_printf_i+0x16a>
 801196c:	7803      	ldrb	r3, [r0, #0]
 801196e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011972:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011976:	e76c      	b.n	8011852 <_printf_i+0xf6>
 8011978:	08016724 	.word	0x08016724
 801197c:	08016735 	.word	0x08016735

08011980 <_scanf_float>:
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	469a      	mov	sl, r3
 8011986:	688b      	ldr	r3, [r1, #8]
 8011988:	4616      	mov	r6, r2
 801198a:	1e5a      	subs	r2, r3, #1
 801198c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011990:	b087      	sub	sp, #28
 8011992:	bf83      	ittte	hi
 8011994:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011998:	189b      	addhi	r3, r3, r2
 801199a:	9301      	strhi	r3, [sp, #4]
 801199c:	2300      	movls	r3, #0
 801199e:	bf86      	itte	hi
 80119a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80119a4:	608b      	strhi	r3, [r1, #8]
 80119a6:	9301      	strls	r3, [sp, #4]
 80119a8:	680b      	ldr	r3, [r1, #0]
 80119aa:	4688      	mov	r8, r1
 80119ac:	f04f 0b00 	mov.w	fp, #0
 80119b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80119b4:	f848 3b1c 	str.w	r3, [r8], #28
 80119b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80119bc:	4607      	mov	r7, r0
 80119be:	460c      	mov	r4, r1
 80119c0:	4645      	mov	r5, r8
 80119c2:	465a      	mov	r2, fp
 80119c4:	46d9      	mov	r9, fp
 80119c6:	f8cd b008 	str.w	fp, [sp, #8]
 80119ca:	68a1      	ldr	r1, [r4, #8]
 80119cc:	b181      	cbz	r1, 80119f0 <_scanf_float+0x70>
 80119ce:	6833      	ldr	r3, [r6, #0]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b49      	cmp	r3, #73	; 0x49
 80119d4:	d071      	beq.n	8011aba <_scanf_float+0x13a>
 80119d6:	d84d      	bhi.n	8011a74 <_scanf_float+0xf4>
 80119d8:	2b39      	cmp	r3, #57	; 0x39
 80119da:	d840      	bhi.n	8011a5e <_scanf_float+0xde>
 80119dc:	2b31      	cmp	r3, #49	; 0x31
 80119de:	f080 8088 	bcs.w	8011af2 <_scanf_float+0x172>
 80119e2:	2b2d      	cmp	r3, #45	; 0x2d
 80119e4:	f000 8090 	beq.w	8011b08 <_scanf_float+0x188>
 80119e8:	d815      	bhi.n	8011a16 <_scanf_float+0x96>
 80119ea:	2b2b      	cmp	r3, #43	; 0x2b
 80119ec:	f000 808c 	beq.w	8011b08 <_scanf_float+0x188>
 80119f0:	f1b9 0f00 	cmp.w	r9, #0
 80119f4:	d003      	beq.n	80119fe <_scanf_float+0x7e>
 80119f6:	6823      	ldr	r3, [r4, #0]
 80119f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	3a01      	subs	r2, #1
 8011a00:	2a01      	cmp	r2, #1
 8011a02:	f200 80ea 	bhi.w	8011bda <_scanf_float+0x25a>
 8011a06:	4545      	cmp	r5, r8
 8011a08:	f200 80dc 	bhi.w	8011bc4 <_scanf_float+0x244>
 8011a0c:	2601      	movs	r6, #1
 8011a0e:	4630      	mov	r0, r6
 8011a10:	b007      	add	sp, #28
 8011a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a16:	2b2e      	cmp	r3, #46	; 0x2e
 8011a18:	f000 809f 	beq.w	8011b5a <_scanf_float+0x1da>
 8011a1c:	2b30      	cmp	r3, #48	; 0x30
 8011a1e:	d1e7      	bne.n	80119f0 <_scanf_float+0x70>
 8011a20:	6820      	ldr	r0, [r4, #0]
 8011a22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011a26:	d064      	beq.n	8011af2 <_scanf_float+0x172>
 8011a28:	9b01      	ldr	r3, [sp, #4]
 8011a2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011a2e:	6020      	str	r0, [r4, #0]
 8011a30:	f109 0901 	add.w	r9, r9, #1
 8011a34:	b11b      	cbz	r3, 8011a3e <_scanf_float+0xbe>
 8011a36:	3b01      	subs	r3, #1
 8011a38:	3101      	adds	r1, #1
 8011a3a:	9301      	str	r3, [sp, #4]
 8011a3c:	60a1      	str	r1, [r4, #8]
 8011a3e:	68a3      	ldr	r3, [r4, #8]
 8011a40:	3b01      	subs	r3, #1
 8011a42:	60a3      	str	r3, [r4, #8]
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	3301      	adds	r3, #1
 8011a48:	6123      	str	r3, [r4, #16]
 8011a4a:	6873      	ldr	r3, [r6, #4]
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	6073      	str	r3, [r6, #4]
 8011a52:	f340 80ac 	ble.w	8011bae <_scanf_float+0x22e>
 8011a56:	6833      	ldr	r3, [r6, #0]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	6033      	str	r3, [r6, #0]
 8011a5c:	e7b5      	b.n	80119ca <_scanf_float+0x4a>
 8011a5e:	2b45      	cmp	r3, #69	; 0x45
 8011a60:	f000 8085 	beq.w	8011b6e <_scanf_float+0x1ee>
 8011a64:	2b46      	cmp	r3, #70	; 0x46
 8011a66:	d06a      	beq.n	8011b3e <_scanf_float+0x1be>
 8011a68:	2b41      	cmp	r3, #65	; 0x41
 8011a6a:	d1c1      	bne.n	80119f0 <_scanf_float+0x70>
 8011a6c:	2a01      	cmp	r2, #1
 8011a6e:	d1bf      	bne.n	80119f0 <_scanf_float+0x70>
 8011a70:	2202      	movs	r2, #2
 8011a72:	e046      	b.n	8011b02 <_scanf_float+0x182>
 8011a74:	2b65      	cmp	r3, #101	; 0x65
 8011a76:	d07a      	beq.n	8011b6e <_scanf_float+0x1ee>
 8011a78:	d818      	bhi.n	8011aac <_scanf_float+0x12c>
 8011a7a:	2b54      	cmp	r3, #84	; 0x54
 8011a7c:	d066      	beq.n	8011b4c <_scanf_float+0x1cc>
 8011a7e:	d811      	bhi.n	8011aa4 <_scanf_float+0x124>
 8011a80:	2b4e      	cmp	r3, #78	; 0x4e
 8011a82:	d1b5      	bne.n	80119f0 <_scanf_float+0x70>
 8011a84:	2a00      	cmp	r2, #0
 8011a86:	d146      	bne.n	8011b16 <_scanf_float+0x196>
 8011a88:	f1b9 0f00 	cmp.w	r9, #0
 8011a8c:	d145      	bne.n	8011b1a <_scanf_float+0x19a>
 8011a8e:	6821      	ldr	r1, [r4, #0]
 8011a90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011a94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011a98:	d13f      	bne.n	8011b1a <_scanf_float+0x19a>
 8011a9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011a9e:	6021      	str	r1, [r4, #0]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	e02e      	b.n	8011b02 <_scanf_float+0x182>
 8011aa4:	2b59      	cmp	r3, #89	; 0x59
 8011aa6:	d01e      	beq.n	8011ae6 <_scanf_float+0x166>
 8011aa8:	2b61      	cmp	r3, #97	; 0x61
 8011aaa:	e7de      	b.n	8011a6a <_scanf_float+0xea>
 8011aac:	2b6e      	cmp	r3, #110	; 0x6e
 8011aae:	d0e9      	beq.n	8011a84 <_scanf_float+0x104>
 8011ab0:	d815      	bhi.n	8011ade <_scanf_float+0x15e>
 8011ab2:	2b66      	cmp	r3, #102	; 0x66
 8011ab4:	d043      	beq.n	8011b3e <_scanf_float+0x1be>
 8011ab6:	2b69      	cmp	r3, #105	; 0x69
 8011ab8:	d19a      	bne.n	80119f0 <_scanf_float+0x70>
 8011aba:	f1bb 0f00 	cmp.w	fp, #0
 8011abe:	d138      	bne.n	8011b32 <_scanf_float+0x1b2>
 8011ac0:	f1b9 0f00 	cmp.w	r9, #0
 8011ac4:	d197      	bne.n	80119f6 <_scanf_float+0x76>
 8011ac6:	6821      	ldr	r1, [r4, #0]
 8011ac8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011acc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011ad0:	d195      	bne.n	80119fe <_scanf_float+0x7e>
 8011ad2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011ad6:	6021      	str	r1, [r4, #0]
 8011ad8:	f04f 0b01 	mov.w	fp, #1
 8011adc:	e011      	b.n	8011b02 <_scanf_float+0x182>
 8011ade:	2b74      	cmp	r3, #116	; 0x74
 8011ae0:	d034      	beq.n	8011b4c <_scanf_float+0x1cc>
 8011ae2:	2b79      	cmp	r3, #121	; 0x79
 8011ae4:	d184      	bne.n	80119f0 <_scanf_float+0x70>
 8011ae6:	f1bb 0f07 	cmp.w	fp, #7
 8011aea:	d181      	bne.n	80119f0 <_scanf_float+0x70>
 8011aec:	f04f 0b08 	mov.w	fp, #8
 8011af0:	e007      	b.n	8011b02 <_scanf_float+0x182>
 8011af2:	eb12 0f0b 	cmn.w	r2, fp
 8011af6:	f47f af7b 	bne.w	80119f0 <_scanf_float+0x70>
 8011afa:	6821      	ldr	r1, [r4, #0]
 8011afc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011b00:	6021      	str	r1, [r4, #0]
 8011b02:	702b      	strb	r3, [r5, #0]
 8011b04:	3501      	adds	r5, #1
 8011b06:	e79a      	b.n	8011a3e <_scanf_float+0xbe>
 8011b08:	6821      	ldr	r1, [r4, #0]
 8011b0a:	0608      	lsls	r0, r1, #24
 8011b0c:	f57f af70 	bpl.w	80119f0 <_scanf_float+0x70>
 8011b10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011b14:	e7f4      	b.n	8011b00 <_scanf_float+0x180>
 8011b16:	2a02      	cmp	r2, #2
 8011b18:	d047      	beq.n	8011baa <_scanf_float+0x22a>
 8011b1a:	f1bb 0f01 	cmp.w	fp, #1
 8011b1e:	d003      	beq.n	8011b28 <_scanf_float+0x1a8>
 8011b20:	f1bb 0f04 	cmp.w	fp, #4
 8011b24:	f47f af64 	bne.w	80119f0 <_scanf_float+0x70>
 8011b28:	f10b 0b01 	add.w	fp, fp, #1
 8011b2c:	fa5f fb8b 	uxtb.w	fp, fp
 8011b30:	e7e7      	b.n	8011b02 <_scanf_float+0x182>
 8011b32:	f1bb 0f03 	cmp.w	fp, #3
 8011b36:	d0f7      	beq.n	8011b28 <_scanf_float+0x1a8>
 8011b38:	f1bb 0f05 	cmp.w	fp, #5
 8011b3c:	e7f2      	b.n	8011b24 <_scanf_float+0x1a4>
 8011b3e:	f1bb 0f02 	cmp.w	fp, #2
 8011b42:	f47f af55 	bne.w	80119f0 <_scanf_float+0x70>
 8011b46:	f04f 0b03 	mov.w	fp, #3
 8011b4a:	e7da      	b.n	8011b02 <_scanf_float+0x182>
 8011b4c:	f1bb 0f06 	cmp.w	fp, #6
 8011b50:	f47f af4e 	bne.w	80119f0 <_scanf_float+0x70>
 8011b54:	f04f 0b07 	mov.w	fp, #7
 8011b58:	e7d3      	b.n	8011b02 <_scanf_float+0x182>
 8011b5a:	6821      	ldr	r1, [r4, #0]
 8011b5c:	0588      	lsls	r0, r1, #22
 8011b5e:	f57f af47 	bpl.w	80119f0 <_scanf_float+0x70>
 8011b62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011b66:	6021      	str	r1, [r4, #0]
 8011b68:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b6c:	e7c9      	b.n	8011b02 <_scanf_float+0x182>
 8011b6e:	6821      	ldr	r1, [r4, #0]
 8011b70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011b74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011b78:	d006      	beq.n	8011b88 <_scanf_float+0x208>
 8011b7a:	0548      	lsls	r0, r1, #21
 8011b7c:	f57f af38 	bpl.w	80119f0 <_scanf_float+0x70>
 8011b80:	f1b9 0f00 	cmp.w	r9, #0
 8011b84:	f43f af3b 	beq.w	80119fe <_scanf_float+0x7e>
 8011b88:	0588      	lsls	r0, r1, #22
 8011b8a:	bf58      	it	pl
 8011b8c:	9802      	ldrpl	r0, [sp, #8]
 8011b8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011b92:	bf58      	it	pl
 8011b94:	eba9 0000 	subpl.w	r0, r9, r0
 8011b98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011b9c:	bf58      	it	pl
 8011b9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011ba2:	6021      	str	r1, [r4, #0]
 8011ba4:	f04f 0900 	mov.w	r9, #0
 8011ba8:	e7ab      	b.n	8011b02 <_scanf_float+0x182>
 8011baa:	2203      	movs	r2, #3
 8011bac:	e7a9      	b.n	8011b02 <_scanf_float+0x182>
 8011bae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011bb2:	9205      	str	r2, [sp, #20]
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4638      	mov	r0, r7
 8011bb8:	4798      	blx	r3
 8011bba:	9a05      	ldr	r2, [sp, #20]
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	f43f af04 	beq.w	80119ca <_scanf_float+0x4a>
 8011bc2:	e715      	b.n	80119f0 <_scanf_float+0x70>
 8011bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011bc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011bcc:	4632      	mov	r2, r6
 8011bce:	4638      	mov	r0, r7
 8011bd0:	4798      	blx	r3
 8011bd2:	6923      	ldr	r3, [r4, #16]
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	6123      	str	r3, [r4, #16]
 8011bd8:	e715      	b.n	8011a06 <_scanf_float+0x86>
 8011bda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011bde:	2b06      	cmp	r3, #6
 8011be0:	d80a      	bhi.n	8011bf8 <_scanf_float+0x278>
 8011be2:	f1bb 0f02 	cmp.w	fp, #2
 8011be6:	d968      	bls.n	8011cba <_scanf_float+0x33a>
 8011be8:	f1ab 0b03 	sub.w	fp, fp, #3
 8011bec:	fa5f fb8b 	uxtb.w	fp, fp
 8011bf0:	eba5 0b0b 	sub.w	fp, r5, fp
 8011bf4:	455d      	cmp	r5, fp
 8011bf6:	d14b      	bne.n	8011c90 <_scanf_float+0x310>
 8011bf8:	6823      	ldr	r3, [r4, #0]
 8011bfa:	05da      	lsls	r2, r3, #23
 8011bfc:	d51f      	bpl.n	8011c3e <_scanf_float+0x2be>
 8011bfe:	055b      	lsls	r3, r3, #21
 8011c00:	d468      	bmi.n	8011cd4 <_scanf_float+0x354>
 8011c02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011c06:	6923      	ldr	r3, [r4, #16]
 8011c08:	2965      	cmp	r1, #101	; 0x65
 8011c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8011c12:	6123      	str	r3, [r4, #16]
 8011c14:	d00d      	beq.n	8011c32 <_scanf_float+0x2b2>
 8011c16:	2945      	cmp	r1, #69	; 0x45
 8011c18:	d00b      	beq.n	8011c32 <_scanf_float+0x2b2>
 8011c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c1e:	4632      	mov	r2, r6
 8011c20:	4638      	mov	r0, r7
 8011c22:	4798      	blx	r3
 8011c24:	6923      	ldr	r3, [r4, #16]
 8011c26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c36:	4632      	mov	r2, r6
 8011c38:	4638      	mov	r0, r7
 8011c3a:	4798      	blx	r3
 8011c3c:	465d      	mov	r5, fp
 8011c3e:	6826      	ldr	r6, [r4, #0]
 8011c40:	f016 0610 	ands.w	r6, r6, #16
 8011c44:	d17a      	bne.n	8011d3c <_scanf_float+0x3bc>
 8011c46:	702e      	strb	r6, [r5, #0]
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c52:	d142      	bne.n	8011cda <_scanf_float+0x35a>
 8011c54:	9b02      	ldr	r3, [sp, #8]
 8011c56:	eba9 0303 	sub.w	r3, r9, r3
 8011c5a:	425a      	negs	r2, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d149      	bne.n	8011cf4 <_scanf_float+0x374>
 8011c60:	2200      	movs	r2, #0
 8011c62:	4641      	mov	r1, r8
 8011c64:	4638      	mov	r0, r7
 8011c66:	f000 ffdf 	bl	8012c28 <_strtod_r>
 8011c6a:	6825      	ldr	r5, [r4, #0]
 8011c6c:	f8da 3000 	ldr.w	r3, [sl]
 8011c70:	f015 0f02 	tst.w	r5, #2
 8011c74:	f103 0204 	add.w	r2, r3, #4
 8011c78:	ec59 8b10 	vmov	r8, r9, d0
 8011c7c:	f8ca 2000 	str.w	r2, [sl]
 8011c80:	d043      	beq.n	8011d0a <_scanf_float+0x38a>
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	e9c3 8900 	strd	r8, r9, [r3]
 8011c88:	68e3      	ldr	r3, [r4, #12]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	60e3      	str	r3, [r4, #12]
 8011c8e:	e6be      	b.n	8011a0e <_scanf_float+0x8e>
 8011c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011c98:	4632      	mov	r2, r6
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	4798      	blx	r3
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	6123      	str	r3, [r4, #16]
 8011ca4:	e7a6      	b.n	8011bf4 <_scanf_float+0x274>
 8011ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011caa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011cae:	4632      	mov	r2, r6
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	4798      	blx	r3
 8011cb4:	6923      	ldr	r3, [r4, #16]
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	6123      	str	r3, [r4, #16]
 8011cba:	4545      	cmp	r5, r8
 8011cbc:	d8f3      	bhi.n	8011ca6 <_scanf_float+0x326>
 8011cbe:	e6a5      	b.n	8011a0c <_scanf_float+0x8c>
 8011cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011cc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011cc8:	4632      	mov	r2, r6
 8011cca:	4638      	mov	r0, r7
 8011ccc:	4798      	blx	r3
 8011cce:	6923      	ldr	r3, [r4, #16]
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	6123      	str	r3, [r4, #16]
 8011cd4:	4545      	cmp	r5, r8
 8011cd6:	d8f3      	bhi.n	8011cc0 <_scanf_float+0x340>
 8011cd8:	e698      	b.n	8011a0c <_scanf_float+0x8c>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d0bf      	beq.n	8011c60 <_scanf_float+0x2e0>
 8011ce0:	9904      	ldr	r1, [sp, #16]
 8011ce2:	230a      	movs	r3, #10
 8011ce4:	4632      	mov	r2, r6
 8011ce6:	3101      	adds	r1, #1
 8011ce8:	4638      	mov	r0, r7
 8011cea:	f001 f829 	bl	8012d40 <_strtol_r>
 8011cee:	9b03      	ldr	r3, [sp, #12]
 8011cf0:	9d04      	ldr	r5, [sp, #16]
 8011cf2:	1ac2      	subs	r2, r0, r3
 8011cf4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011cf8:	429d      	cmp	r5, r3
 8011cfa:	bf28      	it	cs
 8011cfc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011d00:	490f      	ldr	r1, [pc, #60]	; (8011d40 <_scanf_float+0x3c0>)
 8011d02:	4628      	mov	r0, r5
 8011d04:	f000 f8e8 	bl	8011ed8 <siprintf>
 8011d08:	e7aa      	b.n	8011c60 <_scanf_float+0x2e0>
 8011d0a:	f015 0504 	ands.w	r5, r5, #4
 8011d0e:	d1b8      	bne.n	8011c82 <_scanf_float+0x302>
 8011d10:	681f      	ldr	r7, [r3, #0]
 8011d12:	ee10 2a10 	vmov	r2, s0
 8011d16:	464b      	mov	r3, r9
 8011d18:	ee10 0a10 	vmov	r0, s0
 8011d1c:	4649      	mov	r1, r9
 8011d1e:	f7ee ff1d 	bl	8000b5c <__aeabi_dcmpun>
 8011d22:	b128      	cbz	r0, 8011d30 <_scanf_float+0x3b0>
 8011d24:	4628      	mov	r0, r5
 8011d26:	f000 f89d 	bl	8011e64 <nanf>
 8011d2a:	ed87 0a00 	vstr	s0, [r7]
 8011d2e:	e7ab      	b.n	8011c88 <_scanf_float+0x308>
 8011d30:	4640      	mov	r0, r8
 8011d32:	4649      	mov	r1, r9
 8011d34:	f7ee ff70 	bl	8000c18 <__aeabi_d2f>
 8011d38:	6038      	str	r0, [r7, #0]
 8011d3a:	e7a5      	b.n	8011c88 <_scanf_float+0x308>
 8011d3c:	2600      	movs	r6, #0
 8011d3e:	e666      	b.n	8011a0e <_scanf_float+0x8e>
 8011d40:	08016746 	.word	0x08016746

08011d44 <iprintf>:
 8011d44:	b40f      	push	{r0, r1, r2, r3}
 8011d46:	4b0a      	ldr	r3, [pc, #40]	; (8011d70 <iprintf+0x2c>)
 8011d48:	b513      	push	{r0, r1, r4, lr}
 8011d4a:	681c      	ldr	r4, [r3, #0]
 8011d4c:	b124      	cbz	r4, 8011d58 <iprintf+0x14>
 8011d4e:	69a3      	ldr	r3, [r4, #24]
 8011d50:	b913      	cbnz	r3, 8011d58 <iprintf+0x14>
 8011d52:	4620      	mov	r0, r4
 8011d54:	f002 f83c 	bl	8013dd0 <__sinit>
 8011d58:	ab05      	add	r3, sp, #20
 8011d5a:	9a04      	ldr	r2, [sp, #16]
 8011d5c:	68a1      	ldr	r1, [r4, #8]
 8011d5e:	9301      	str	r3, [sp, #4]
 8011d60:	4620      	mov	r0, r4
 8011d62:	f003 fc7d 	bl	8015660 <_vfiprintf_r>
 8011d66:	b002      	add	sp, #8
 8011d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d6c:	b004      	add	sp, #16
 8011d6e:	4770      	bx	lr
 8011d70:	2000000c 	.word	0x2000000c

08011d74 <putchar>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4b08      	ldr	r3, [pc, #32]	; (8011d98 <putchar+0x24>)
 8011d78:	681c      	ldr	r4, [r3, #0]
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	b124      	cbz	r4, 8011d88 <putchar+0x14>
 8011d7e:	69a3      	ldr	r3, [r4, #24]
 8011d80:	b913      	cbnz	r3, 8011d88 <putchar+0x14>
 8011d82:	4620      	mov	r0, r4
 8011d84:	f002 f824 	bl	8013dd0 <__sinit>
 8011d88:	68a2      	ldr	r2, [r4, #8]
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d92:	f003 bed3 	b.w	8015b3c <_putc_r>
 8011d96:	bf00      	nop
 8011d98:	2000000c 	.word	0x2000000c

08011d9c <_puts_r>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	460e      	mov	r6, r1
 8011da0:	4605      	mov	r5, r0
 8011da2:	b118      	cbz	r0, 8011dac <_puts_r+0x10>
 8011da4:	6983      	ldr	r3, [r0, #24]
 8011da6:	b90b      	cbnz	r3, 8011dac <_puts_r+0x10>
 8011da8:	f002 f812 	bl	8013dd0 <__sinit>
 8011dac:	69ab      	ldr	r3, [r5, #24]
 8011dae:	68ac      	ldr	r4, [r5, #8]
 8011db0:	b913      	cbnz	r3, 8011db8 <_puts_r+0x1c>
 8011db2:	4628      	mov	r0, r5
 8011db4:	f002 f80c 	bl	8013dd0 <__sinit>
 8011db8:	4b23      	ldr	r3, [pc, #140]	; (8011e48 <_puts_r+0xac>)
 8011dba:	429c      	cmp	r4, r3
 8011dbc:	d117      	bne.n	8011dee <_puts_r+0x52>
 8011dbe:	686c      	ldr	r4, [r5, #4]
 8011dc0:	89a3      	ldrh	r3, [r4, #12]
 8011dc2:	071b      	lsls	r3, r3, #28
 8011dc4:	d51d      	bpl.n	8011e02 <_puts_r+0x66>
 8011dc6:	6923      	ldr	r3, [r4, #16]
 8011dc8:	b1db      	cbz	r3, 8011e02 <_puts_r+0x66>
 8011dca:	3e01      	subs	r6, #1
 8011dcc:	68a3      	ldr	r3, [r4, #8]
 8011dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011dd2:	3b01      	subs	r3, #1
 8011dd4:	60a3      	str	r3, [r4, #8]
 8011dd6:	b9e9      	cbnz	r1, 8011e14 <_puts_r+0x78>
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	da2e      	bge.n	8011e3a <_puts_r+0x9e>
 8011ddc:	4622      	mov	r2, r4
 8011dde:	210a      	movs	r1, #10
 8011de0:	4628      	mov	r0, r5
 8011de2:	f000 ffdf 	bl	8012da4 <__swbuf_r>
 8011de6:	3001      	adds	r0, #1
 8011de8:	d011      	beq.n	8011e0e <_puts_r+0x72>
 8011dea:	200a      	movs	r0, #10
 8011dec:	e011      	b.n	8011e12 <_puts_r+0x76>
 8011dee:	4b17      	ldr	r3, [pc, #92]	; (8011e4c <_puts_r+0xb0>)
 8011df0:	429c      	cmp	r4, r3
 8011df2:	d101      	bne.n	8011df8 <_puts_r+0x5c>
 8011df4:	68ac      	ldr	r4, [r5, #8]
 8011df6:	e7e3      	b.n	8011dc0 <_puts_r+0x24>
 8011df8:	4b15      	ldr	r3, [pc, #84]	; (8011e50 <_puts_r+0xb4>)
 8011dfa:	429c      	cmp	r4, r3
 8011dfc:	bf08      	it	eq
 8011dfe:	68ec      	ldreq	r4, [r5, #12]
 8011e00:	e7de      	b.n	8011dc0 <_puts_r+0x24>
 8011e02:	4621      	mov	r1, r4
 8011e04:	4628      	mov	r0, r5
 8011e06:	f001 f831 	bl	8012e6c <__swsetup_r>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d0dd      	beq.n	8011dca <_puts_r+0x2e>
 8011e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e12:	bd70      	pop	{r4, r5, r6, pc}
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	da04      	bge.n	8011e22 <_puts_r+0x86>
 8011e18:	69a2      	ldr	r2, [r4, #24]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	dc06      	bgt.n	8011e2c <_puts_r+0x90>
 8011e1e:	290a      	cmp	r1, #10
 8011e20:	d004      	beq.n	8011e2c <_puts_r+0x90>
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	1c5a      	adds	r2, r3, #1
 8011e26:	6022      	str	r2, [r4, #0]
 8011e28:	7019      	strb	r1, [r3, #0]
 8011e2a:	e7cf      	b.n	8011dcc <_puts_r+0x30>
 8011e2c:	4622      	mov	r2, r4
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f000 ffb8 	bl	8012da4 <__swbuf_r>
 8011e34:	3001      	adds	r0, #1
 8011e36:	d1c9      	bne.n	8011dcc <_puts_r+0x30>
 8011e38:	e7e9      	b.n	8011e0e <_puts_r+0x72>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	200a      	movs	r0, #10
 8011e3e:	1c5a      	adds	r2, r3, #1
 8011e40:	6022      	str	r2, [r4, #0]
 8011e42:	7018      	strb	r0, [r3, #0]
 8011e44:	e7e5      	b.n	8011e12 <_puts_r+0x76>
 8011e46:	bf00      	nop
 8011e48:	080167d0 	.word	0x080167d0
 8011e4c:	080167f0 	.word	0x080167f0
 8011e50:	080167b0 	.word	0x080167b0

08011e54 <puts>:
 8011e54:	4b02      	ldr	r3, [pc, #8]	; (8011e60 <puts+0xc>)
 8011e56:	4601      	mov	r1, r0
 8011e58:	6818      	ldr	r0, [r3, #0]
 8011e5a:	f7ff bf9f 	b.w	8011d9c <_puts_r>
 8011e5e:	bf00      	nop
 8011e60:	2000000c 	.word	0x2000000c

08011e64 <nanf>:
 8011e64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011e6c <nanf+0x8>
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	7fc00000 	.word	0x7fc00000

08011e70 <sniprintf>:
 8011e70:	b40c      	push	{r2, r3}
 8011e72:	b530      	push	{r4, r5, lr}
 8011e74:	4b17      	ldr	r3, [pc, #92]	; (8011ed4 <sniprintf+0x64>)
 8011e76:	1e0c      	subs	r4, r1, #0
 8011e78:	b09d      	sub	sp, #116	; 0x74
 8011e7a:	681d      	ldr	r5, [r3, #0]
 8011e7c:	da08      	bge.n	8011e90 <sniprintf+0x20>
 8011e7e:	238b      	movs	r3, #139	; 0x8b
 8011e80:	602b      	str	r3, [r5, #0]
 8011e82:	f04f 30ff 	mov.w	r0, #4294967295
 8011e86:	b01d      	add	sp, #116	; 0x74
 8011e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e8c:	b002      	add	sp, #8
 8011e8e:	4770      	bx	lr
 8011e90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011e94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e98:	bf14      	ite	ne
 8011e9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011e9e:	4623      	moveq	r3, r4
 8011ea0:	9304      	str	r3, [sp, #16]
 8011ea2:	9307      	str	r3, [sp, #28]
 8011ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ea8:	9002      	str	r0, [sp, #8]
 8011eaa:	9006      	str	r0, [sp, #24]
 8011eac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011eb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011eb2:	ab21      	add	r3, sp, #132	; 0x84
 8011eb4:	a902      	add	r1, sp, #8
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	f003 f905 	bl	80150c8 <_svfiprintf_r>
 8011ebe:	1c43      	adds	r3, r0, #1
 8011ec0:	bfbc      	itt	lt
 8011ec2:	238b      	movlt	r3, #139	; 0x8b
 8011ec4:	602b      	strlt	r3, [r5, #0]
 8011ec6:	2c00      	cmp	r4, #0
 8011ec8:	d0dd      	beq.n	8011e86 <sniprintf+0x16>
 8011eca:	9b02      	ldr	r3, [sp, #8]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	701a      	strb	r2, [r3, #0]
 8011ed0:	e7d9      	b.n	8011e86 <sniprintf+0x16>
 8011ed2:	bf00      	nop
 8011ed4:	2000000c 	.word	0x2000000c

08011ed8 <siprintf>:
 8011ed8:	b40e      	push	{r1, r2, r3}
 8011eda:	b500      	push	{lr}
 8011edc:	b09c      	sub	sp, #112	; 0x70
 8011ede:	ab1d      	add	r3, sp, #116	; 0x74
 8011ee0:	9002      	str	r0, [sp, #8]
 8011ee2:	9006      	str	r0, [sp, #24]
 8011ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ee8:	4809      	ldr	r0, [pc, #36]	; (8011f10 <siprintf+0x38>)
 8011eea:	9107      	str	r1, [sp, #28]
 8011eec:	9104      	str	r1, [sp, #16]
 8011eee:	4909      	ldr	r1, [pc, #36]	; (8011f14 <siprintf+0x3c>)
 8011ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ef4:	9105      	str	r1, [sp, #20]
 8011ef6:	6800      	ldr	r0, [r0, #0]
 8011ef8:	9301      	str	r3, [sp, #4]
 8011efa:	a902      	add	r1, sp, #8
 8011efc:	f003 f8e4 	bl	80150c8 <_svfiprintf_r>
 8011f00:	9b02      	ldr	r3, [sp, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	701a      	strb	r2, [r3, #0]
 8011f06:	b01c      	add	sp, #112	; 0x70
 8011f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f0c:	b003      	add	sp, #12
 8011f0e:	4770      	bx	lr
 8011f10:	2000000c 	.word	0x2000000c
 8011f14:	ffff0208 	.word	0xffff0208

08011f18 <siscanf>:
 8011f18:	b40e      	push	{r1, r2, r3}
 8011f1a:	b530      	push	{r4, r5, lr}
 8011f1c:	b09c      	sub	sp, #112	; 0x70
 8011f1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8011f20:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011f24:	f854 5b04 	ldr.w	r5, [r4], #4
 8011f28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f2c:	9002      	str	r0, [sp, #8]
 8011f2e:	9006      	str	r0, [sp, #24]
 8011f30:	f7ee f966 	bl	8000200 <strlen>
 8011f34:	4b0b      	ldr	r3, [pc, #44]	; (8011f64 <siscanf+0x4c>)
 8011f36:	9003      	str	r0, [sp, #12]
 8011f38:	9007      	str	r0, [sp, #28]
 8011f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f3c:	480a      	ldr	r0, [pc, #40]	; (8011f68 <siscanf+0x50>)
 8011f3e:	9401      	str	r4, [sp, #4]
 8011f40:	2300      	movs	r3, #0
 8011f42:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f44:	9314      	str	r3, [sp, #80]	; 0x50
 8011f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f4e:	462a      	mov	r2, r5
 8011f50:	4623      	mov	r3, r4
 8011f52:	a902      	add	r1, sp, #8
 8011f54:	6800      	ldr	r0, [r0, #0]
 8011f56:	f003 fa09 	bl	801536c <__ssvfiscanf_r>
 8011f5a:	b01c      	add	sp, #112	; 0x70
 8011f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f60:	b003      	add	sp, #12
 8011f62:	4770      	bx	lr
 8011f64:	08011f8f 	.word	0x08011f8f
 8011f68:	2000000c 	.word	0x2000000c

08011f6c <__sread>:
 8011f6c:	b510      	push	{r4, lr}
 8011f6e:	460c      	mov	r4, r1
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	f003 fe18 	bl	8015ba8 <_read_r>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	bfab      	itete	ge
 8011f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f80:	181b      	addge	r3, r3, r0
 8011f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f86:	bfac      	ite	ge
 8011f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f8a:	81a3      	strhlt	r3, [r4, #12]
 8011f8c:	bd10      	pop	{r4, pc}

08011f8e <__seofread>:
 8011f8e:	2000      	movs	r0, #0
 8011f90:	4770      	bx	lr

08011f92 <__swrite>:
 8011f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f96:	461f      	mov	r7, r3
 8011f98:	898b      	ldrh	r3, [r1, #12]
 8011f9a:	05db      	lsls	r3, r3, #23
 8011f9c:	4605      	mov	r5, r0
 8011f9e:	460c      	mov	r4, r1
 8011fa0:	4616      	mov	r6, r2
 8011fa2:	d505      	bpl.n	8011fb0 <__swrite+0x1e>
 8011fa4:	2302      	movs	r3, #2
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fac:	f002 fae2 	bl	8014574 <_lseek_r>
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fba:	81a3      	strh	r3, [r4, #12]
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	463b      	mov	r3, r7
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc6:	f000 bf3f 	b.w	8012e48 <_write_r>

08011fca <__sseek>:
 8011fca:	b510      	push	{r4, lr}
 8011fcc:	460c      	mov	r4, r1
 8011fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd2:	f002 facf 	bl	8014574 <_lseek_r>
 8011fd6:	1c43      	adds	r3, r0, #1
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	bf15      	itete	ne
 8011fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fe6:	81a3      	strheq	r3, [r4, #12]
 8011fe8:	bf18      	it	ne
 8011fea:	81a3      	strhne	r3, [r4, #12]
 8011fec:	bd10      	pop	{r4, pc}

08011fee <__sclose>:
 8011fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff2:	f000 bfa9 	b.w	8012f48 <_close_r>

08011ff6 <strcpy>:
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ffc:	f803 2b01 	strb.w	r2, [r3], #1
 8012000:	2a00      	cmp	r2, #0
 8012002:	d1f9      	bne.n	8011ff8 <strcpy+0x2>
 8012004:	4770      	bx	lr

08012006 <sulp>:
 8012006:	b570      	push	{r4, r5, r6, lr}
 8012008:	4604      	mov	r4, r0
 801200a:	460d      	mov	r5, r1
 801200c:	ec45 4b10 	vmov	d0, r4, r5
 8012010:	4616      	mov	r6, r2
 8012012:	f002 fe15 	bl	8014c40 <__ulp>
 8012016:	ec51 0b10 	vmov	r0, r1, d0
 801201a:	b17e      	cbz	r6, 801203c <sulp+0x36>
 801201c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012024:	2b00      	cmp	r3, #0
 8012026:	dd09      	ble.n	801203c <sulp+0x36>
 8012028:	051b      	lsls	r3, r3, #20
 801202a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801202e:	2400      	movs	r4, #0
 8012030:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012034:	4622      	mov	r2, r4
 8012036:	462b      	mov	r3, r5
 8012038:	f7ee faf6 	bl	8000628 <__aeabi_dmul>
 801203c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012040 <_strtod_l>:
 8012040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	461f      	mov	r7, r3
 8012046:	b0a1      	sub	sp, #132	; 0x84
 8012048:	2300      	movs	r3, #0
 801204a:	4681      	mov	r9, r0
 801204c:	4638      	mov	r0, r7
 801204e:	460e      	mov	r6, r1
 8012050:	9217      	str	r2, [sp, #92]	; 0x5c
 8012052:	931c      	str	r3, [sp, #112]	; 0x70
 8012054:	f002 fa7e 	bl	8014554 <__localeconv_l>
 8012058:	4680      	mov	r8, r0
 801205a:	6800      	ldr	r0, [r0, #0]
 801205c:	f7ee f8d0 	bl	8000200 <strlen>
 8012060:	f04f 0a00 	mov.w	sl, #0
 8012064:	4604      	mov	r4, r0
 8012066:	f04f 0b00 	mov.w	fp, #0
 801206a:	961b      	str	r6, [sp, #108]	; 0x6c
 801206c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801206e:	781a      	ldrb	r2, [r3, #0]
 8012070:	2a0d      	cmp	r2, #13
 8012072:	d832      	bhi.n	80120da <_strtod_l+0x9a>
 8012074:	2a09      	cmp	r2, #9
 8012076:	d236      	bcs.n	80120e6 <_strtod_l+0xa6>
 8012078:	2a00      	cmp	r2, #0
 801207a:	d03e      	beq.n	80120fa <_strtod_l+0xba>
 801207c:	2300      	movs	r3, #0
 801207e:	930d      	str	r3, [sp, #52]	; 0x34
 8012080:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012082:	782b      	ldrb	r3, [r5, #0]
 8012084:	2b30      	cmp	r3, #48	; 0x30
 8012086:	f040 80ac 	bne.w	80121e2 <_strtod_l+0x1a2>
 801208a:	786b      	ldrb	r3, [r5, #1]
 801208c:	2b58      	cmp	r3, #88	; 0x58
 801208e:	d001      	beq.n	8012094 <_strtod_l+0x54>
 8012090:	2b78      	cmp	r3, #120	; 0x78
 8012092:	d167      	bne.n	8012164 <_strtod_l+0x124>
 8012094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	ab1c      	add	r3, sp, #112	; 0x70
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	9702      	str	r7, [sp, #8]
 801209e:	ab1d      	add	r3, sp, #116	; 0x74
 80120a0:	4a88      	ldr	r2, [pc, #544]	; (80122c4 <_strtod_l+0x284>)
 80120a2:	a91b      	add	r1, sp, #108	; 0x6c
 80120a4:	4648      	mov	r0, r9
 80120a6:	f001 ff6c 	bl	8013f82 <__gethex>
 80120aa:	f010 0407 	ands.w	r4, r0, #7
 80120ae:	4606      	mov	r6, r0
 80120b0:	d005      	beq.n	80120be <_strtod_l+0x7e>
 80120b2:	2c06      	cmp	r4, #6
 80120b4:	d12b      	bne.n	801210e <_strtod_l+0xce>
 80120b6:	3501      	adds	r5, #1
 80120b8:	2300      	movs	r3, #0
 80120ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80120bc:	930d      	str	r3, [sp, #52]	; 0x34
 80120be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f040 859a 	bne.w	8012bfa <_strtod_l+0xbba>
 80120c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120c8:	b1e3      	cbz	r3, 8012104 <_strtod_l+0xc4>
 80120ca:	4652      	mov	r2, sl
 80120cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80120d0:	ec43 2b10 	vmov	d0, r2, r3
 80120d4:	b021      	add	sp, #132	; 0x84
 80120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120da:	2a2b      	cmp	r2, #43	; 0x2b
 80120dc:	d015      	beq.n	801210a <_strtod_l+0xca>
 80120de:	2a2d      	cmp	r2, #45	; 0x2d
 80120e0:	d004      	beq.n	80120ec <_strtod_l+0xac>
 80120e2:	2a20      	cmp	r2, #32
 80120e4:	d1ca      	bne.n	801207c <_strtod_l+0x3c>
 80120e6:	3301      	adds	r3, #1
 80120e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80120ea:	e7bf      	b.n	801206c <_strtod_l+0x2c>
 80120ec:	2201      	movs	r2, #1
 80120ee:	920d      	str	r2, [sp, #52]	; 0x34
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80120f4:	785b      	ldrb	r3, [r3, #1]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1c2      	bne.n	8012080 <_strtod_l+0x40>
 80120fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80120fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f040 8579 	bne.w	8012bf6 <_strtod_l+0xbb6>
 8012104:	4652      	mov	r2, sl
 8012106:	465b      	mov	r3, fp
 8012108:	e7e2      	b.n	80120d0 <_strtod_l+0x90>
 801210a:	2200      	movs	r2, #0
 801210c:	e7ef      	b.n	80120ee <_strtod_l+0xae>
 801210e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012110:	b13a      	cbz	r2, 8012122 <_strtod_l+0xe2>
 8012112:	2135      	movs	r1, #53	; 0x35
 8012114:	a81e      	add	r0, sp, #120	; 0x78
 8012116:	f002 fe8b 	bl	8014e30 <__copybits>
 801211a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801211c:	4648      	mov	r0, r9
 801211e:	f002 faf8 	bl	8014712 <_Bfree>
 8012122:	3c01      	subs	r4, #1
 8012124:	2c04      	cmp	r4, #4
 8012126:	d806      	bhi.n	8012136 <_strtod_l+0xf6>
 8012128:	e8df f004 	tbb	[pc, r4]
 801212c:	1714030a 	.word	0x1714030a
 8012130:	0a          	.byte	0x0a
 8012131:	00          	.byte	0x00
 8012132:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012136:	0730      	lsls	r0, r6, #28
 8012138:	d5c1      	bpl.n	80120be <_strtod_l+0x7e>
 801213a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801213e:	e7be      	b.n	80120be <_strtod_l+0x7e>
 8012140:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012144:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012146:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801214a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801214e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012152:	e7f0      	b.n	8012136 <_strtod_l+0xf6>
 8012154:	f8df b170 	ldr.w	fp, [pc, #368]	; 80122c8 <_strtod_l+0x288>
 8012158:	e7ed      	b.n	8012136 <_strtod_l+0xf6>
 801215a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801215e:	f04f 3aff 	mov.w	sl, #4294967295
 8012162:	e7e8      	b.n	8012136 <_strtod_l+0xf6>
 8012164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012166:	1c5a      	adds	r2, r3, #1
 8012168:	921b      	str	r2, [sp, #108]	; 0x6c
 801216a:	785b      	ldrb	r3, [r3, #1]
 801216c:	2b30      	cmp	r3, #48	; 0x30
 801216e:	d0f9      	beq.n	8012164 <_strtod_l+0x124>
 8012170:	2b00      	cmp	r3, #0
 8012172:	d0a4      	beq.n	80120be <_strtod_l+0x7e>
 8012174:	2301      	movs	r3, #1
 8012176:	2500      	movs	r5, #0
 8012178:	9306      	str	r3, [sp, #24]
 801217a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801217c:	9308      	str	r3, [sp, #32]
 801217e:	9507      	str	r5, [sp, #28]
 8012180:	9505      	str	r5, [sp, #20]
 8012182:	220a      	movs	r2, #10
 8012184:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012186:	7807      	ldrb	r7, [r0, #0]
 8012188:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801218c:	b2d9      	uxtb	r1, r3
 801218e:	2909      	cmp	r1, #9
 8012190:	d929      	bls.n	80121e6 <_strtod_l+0x1a6>
 8012192:	4622      	mov	r2, r4
 8012194:	f8d8 1000 	ldr.w	r1, [r8]
 8012198:	f003 fd5a 	bl	8015c50 <strncmp>
 801219c:	2800      	cmp	r0, #0
 801219e:	d031      	beq.n	8012204 <_strtod_l+0x1c4>
 80121a0:	2000      	movs	r0, #0
 80121a2:	9c05      	ldr	r4, [sp, #20]
 80121a4:	9004      	str	r0, [sp, #16]
 80121a6:	463b      	mov	r3, r7
 80121a8:	4602      	mov	r2, r0
 80121aa:	2b65      	cmp	r3, #101	; 0x65
 80121ac:	d001      	beq.n	80121b2 <_strtod_l+0x172>
 80121ae:	2b45      	cmp	r3, #69	; 0x45
 80121b0:	d114      	bne.n	80121dc <_strtod_l+0x19c>
 80121b2:	b924      	cbnz	r4, 80121be <_strtod_l+0x17e>
 80121b4:	b910      	cbnz	r0, 80121bc <_strtod_l+0x17c>
 80121b6:	9b06      	ldr	r3, [sp, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d09e      	beq.n	80120fa <_strtod_l+0xba>
 80121bc:	2400      	movs	r4, #0
 80121be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80121c0:	1c73      	adds	r3, r6, #1
 80121c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80121c4:	7873      	ldrb	r3, [r6, #1]
 80121c6:	2b2b      	cmp	r3, #43	; 0x2b
 80121c8:	d078      	beq.n	80122bc <_strtod_l+0x27c>
 80121ca:	2b2d      	cmp	r3, #45	; 0x2d
 80121cc:	d070      	beq.n	80122b0 <_strtod_l+0x270>
 80121ce:	f04f 0c00 	mov.w	ip, #0
 80121d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80121d6:	2f09      	cmp	r7, #9
 80121d8:	d97c      	bls.n	80122d4 <_strtod_l+0x294>
 80121da:	961b      	str	r6, [sp, #108]	; 0x6c
 80121dc:	f04f 0e00 	mov.w	lr, #0
 80121e0:	e09a      	b.n	8012318 <_strtod_l+0x2d8>
 80121e2:	2300      	movs	r3, #0
 80121e4:	e7c7      	b.n	8012176 <_strtod_l+0x136>
 80121e6:	9905      	ldr	r1, [sp, #20]
 80121e8:	2908      	cmp	r1, #8
 80121ea:	bfdd      	ittte	le
 80121ec:	9907      	ldrle	r1, [sp, #28]
 80121ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80121f2:	9307      	strle	r3, [sp, #28]
 80121f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80121f8:	9b05      	ldr	r3, [sp, #20]
 80121fa:	3001      	adds	r0, #1
 80121fc:	3301      	adds	r3, #1
 80121fe:	9305      	str	r3, [sp, #20]
 8012200:	901b      	str	r0, [sp, #108]	; 0x6c
 8012202:	e7bf      	b.n	8012184 <_strtod_l+0x144>
 8012204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012206:	191a      	adds	r2, r3, r4
 8012208:	921b      	str	r2, [sp, #108]	; 0x6c
 801220a:	9a05      	ldr	r2, [sp, #20]
 801220c:	5d1b      	ldrb	r3, [r3, r4]
 801220e:	2a00      	cmp	r2, #0
 8012210:	d037      	beq.n	8012282 <_strtod_l+0x242>
 8012212:	9c05      	ldr	r4, [sp, #20]
 8012214:	4602      	mov	r2, r0
 8012216:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801221a:	2909      	cmp	r1, #9
 801221c:	d913      	bls.n	8012246 <_strtod_l+0x206>
 801221e:	2101      	movs	r1, #1
 8012220:	9104      	str	r1, [sp, #16]
 8012222:	e7c2      	b.n	80121aa <_strtod_l+0x16a>
 8012224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012226:	1c5a      	adds	r2, r3, #1
 8012228:	921b      	str	r2, [sp, #108]	; 0x6c
 801222a:	785b      	ldrb	r3, [r3, #1]
 801222c:	3001      	adds	r0, #1
 801222e:	2b30      	cmp	r3, #48	; 0x30
 8012230:	d0f8      	beq.n	8012224 <_strtod_l+0x1e4>
 8012232:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012236:	2a08      	cmp	r2, #8
 8012238:	f200 84e4 	bhi.w	8012c04 <_strtod_l+0xbc4>
 801223c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801223e:	9208      	str	r2, [sp, #32]
 8012240:	4602      	mov	r2, r0
 8012242:	2000      	movs	r0, #0
 8012244:	4604      	mov	r4, r0
 8012246:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801224a:	f100 0101 	add.w	r1, r0, #1
 801224e:	d012      	beq.n	8012276 <_strtod_l+0x236>
 8012250:	440a      	add	r2, r1
 8012252:	eb00 0c04 	add.w	ip, r0, r4
 8012256:	4621      	mov	r1, r4
 8012258:	270a      	movs	r7, #10
 801225a:	458c      	cmp	ip, r1
 801225c:	d113      	bne.n	8012286 <_strtod_l+0x246>
 801225e:	1821      	adds	r1, r4, r0
 8012260:	2908      	cmp	r1, #8
 8012262:	f104 0401 	add.w	r4, r4, #1
 8012266:	4404      	add	r4, r0
 8012268:	dc19      	bgt.n	801229e <_strtod_l+0x25e>
 801226a:	9b07      	ldr	r3, [sp, #28]
 801226c:	210a      	movs	r1, #10
 801226e:	fb01 e303 	mla	r3, r1, r3, lr
 8012272:	9307      	str	r3, [sp, #28]
 8012274:	2100      	movs	r1, #0
 8012276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012278:	1c58      	adds	r0, r3, #1
 801227a:	901b      	str	r0, [sp, #108]	; 0x6c
 801227c:	785b      	ldrb	r3, [r3, #1]
 801227e:	4608      	mov	r0, r1
 8012280:	e7c9      	b.n	8012216 <_strtod_l+0x1d6>
 8012282:	9805      	ldr	r0, [sp, #20]
 8012284:	e7d3      	b.n	801222e <_strtod_l+0x1ee>
 8012286:	2908      	cmp	r1, #8
 8012288:	f101 0101 	add.w	r1, r1, #1
 801228c:	dc03      	bgt.n	8012296 <_strtod_l+0x256>
 801228e:	9b07      	ldr	r3, [sp, #28]
 8012290:	437b      	muls	r3, r7
 8012292:	9307      	str	r3, [sp, #28]
 8012294:	e7e1      	b.n	801225a <_strtod_l+0x21a>
 8012296:	2910      	cmp	r1, #16
 8012298:	bfd8      	it	le
 801229a:	437d      	mulle	r5, r7
 801229c:	e7dd      	b.n	801225a <_strtod_l+0x21a>
 801229e:	2c10      	cmp	r4, #16
 80122a0:	bfdc      	itt	le
 80122a2:	210a      	movle	r1, #10
 80122a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80122a8:	e7e4      	b.n	8012274 <_strtod_l+0x234>
 80122aa:	2301      	movs	r3, #1
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	e781      	b.n	80121b4 <_strtod_l+0x174>
 80122b0:	f04f 0c01 	mov.w	ip, #1
 80122b4:	1cb3      	adds	r3, r6, #2
 80122b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80122b8:	78b3      	ldrb	r3, [r6, #2]
 80122ba:	e78a      	b.n	80121d2 <_strtod_l+0x192>
 80122bc:	f04f 0c00 	mov.w	ip, #0
 80122c0:	e7f8      	b.n	80122b4 <_strtod_l+0x274>
 80122c2:	bf00      	nop
 80122c4:	0801674c 	.word	0x0801674c
 80122c8:	7ff00000 	.word	0x7ff00000
 80122cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122ce:	1c5f      	adds	r7, r3, #1
 80122d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80122d2:	785b      	ldrb	r3, [r3, #1]
 80122d4:	2b30      	cmp	r3, #48	; 0x30
 80122d6:	d0f9      	beq.n	80122cc <_strtod_l+0x28c>
 80122d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80122dc:	2f08      	cmp	r7, #8
 80122de:	f63f af7d 	bhi.w	80121dc <_strtod_l+0x19c>
 80122e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80122e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122e8:	930a      	str	r3, [sp, #40]	; 0x28
 80122ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122ec:	1c5f      	adds	r7, r3, #1
 80122ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80122f0:	785b      	ldrb	r3, [r3, #1]
 80122f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80122f6:	f1b8 0f09 	cmp.w	r8, #9
 80122fa:	d937      	bls.n	801236c <_strtod_l+0x32c>
 80122fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80122fe:	1a7f      	subs	r7, r7, r1
 8012300:	2f08      	cmp	r7, #8
 8012302:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012306:	dc37      	bgt.n	8012378 <_strtod_l+0x338>
 8012308:	45be      	cmp	lr, r7
 801230a:	bfa8      	it	ge
 801230c:	46be      	movge	lr, r7
 801230e:	f1bc 0f00 	cmp.w	ip, #0
 8012312:	d001      	beq.n	8012318 <_strtod_l+0x2d8>
 8012314:	f1ce 0e00 	rsb	lr, lr, #0
 8012318:	2c00      	cmp	r4, #0
 801231a:	d151      	bne.n	80123c0 <_strtod_l+0x380>
 801231c:	2800      	cmp	r0, #0
 801231e:	f47f aece 	bne.w	80120be <_strtod_l+0x7e>
 8012322:	9a06      	ldr	r2, [sp, #24]
 8012324:	2a00      	cmp	r2, #0
 8012326:	f47f aeca 	bne.w	80120be <_strtod_l+0x7e>
 801232a:	9a04      	ldr	r2, [sp, #16]
 801232c:	2a00      	cmp	r2, #0
 801232e:	f47f aee4 	bne.w	80120fa <_strtod_l+0xba>
 8012332:	2b4e      	cmp	r3, #78	; 0x4e
 8012334:	d027      	beq.n	8012386 <_strtod_l+0x346>
 8012336:	dc21      	bgt.n	801237c <_strtod_l+0x33c>
 8012338:	2b49      	cmp	r3, #73	; 0x49
 801233a:	f47f aede 	bne.w	80120fa <_strtod_l+0xba>
 801233e:	49a0      	ldr	r1, [pc, #640]	; (80125c0 <_strtod_l+0x580>)
 8012340:	a81b      	add	r0, sp, #108	; 0x6c
 8012342:	f002 f851 	bl	80143e8 <__match>
 8012346:	2800      	cmp	r0, #0
 8012348:	f43f aed7 	beq.w	80120fa <_strtod_l+0xba>
 801234c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801234e:	499d      	ldr	r1, [pc, #628]	; (80125c4 <_strtod_l+0x584>)
 8012350:	3b01      	subs	r3, #1
 8012352:	a81b      	add	r0, sp, #108	; 0x6c
 8012354:	931b      	str	r3, [sp, #108]	; 0x6c
 8012356:	f002 f847 	bl	80143e8 <__match>
 801235a:	b910      	cbnz	r0, 8012362 <_strtod_l+0x322>
 801235c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801235e:	3301      	adds	r3, #1
 8012360:	931b      	str	r3, [sp, #108]	; 0x6c
 8012362:	f8df b274 	ldr.w	fp, [pc, #628]	; 80125d8 <_strtod_l+0x598>
 8012366:	f04f 0a00 	mov.w	sl, #0
 801236a:	e6a8      	b.n	80120be <_strtod_l+0x7e>
 801236c:	210a      	movs	r1, #10
 801236e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012372:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012376:	e7b8      	b.n	80122ea <_strtod_l+0x2aa>
 8012378:	46be      	mov	lr, r7
 801237a:	e7c8      	b.n	801230e <_strtod_l+0x2ce>
 801237c:	2b69      	cmp	r3, #105	; 0x69
 801237e:	d0de      	beq.n	801233e <_strtod_l+0x2fe>
 8012380:	2b6e      	cmp	r3, #110	; 0x6e
 8012382:	f47f aeba 	bne.w	80120fa <_strtod_l+0xba>
 8012386:	4990      	ldr	r1, [pc, #576]	; (80125c8 <_strtod_l+0x588>)
 8012388:	a81b      	add	r0, sp, #108	; 0x6c
 801238a:	f002 f82d 	bl	80143e8 <__match>
 801238e:	2800      	cmp	r0, #0
 8012390:	f43f aeb3 	beq.w	80120fa <_strtod_l+0xba>
 8012394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b28      	cmp	r3, #40	; 0x28
 801239a:	d10e      	bne.n	80123ba <_strtod_l+0x37a>
 801239c:	aa1e      	add	r2, sp, #120	; 0x78
 801239e:	498b      	ldr	r1, [pc, #556]	; (80125cc <_strtod_l+0x58c>)
 80123a0:	a81b      	add	r0, sp, #108	; 0x6c
 80123a2:	f002 f835 	bl	8014410 <__hexnan>
 80123a6:	2805      	cmp	r0, #5
 80123a8:	d107      	bne.n	80123ba <_strtod_l+0x37a>
 80123aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80123ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80123b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80123b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80123b8:	e681      	b.n	80120be <_strtod_l+0x7e>
 80123ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80125e0 <_strtod_l+0x5a0>
 80123be:	e7d2      	b.n	8012366 <_strtod_l+0x326>
 80123c0:	ebae 0302 	sub.w	r3, lr, r2
 80123c4:	9306      	str	r3, [sp, #24]
 80123c6:	9b05      	ldr	r3, [sp, #20]
 80123c8:	9807      	ldr	r0, [sp, #28]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	bf08      	it	eq
 80123ce:	4623      	moveq	r3, r4
 80123d0:	2c10      	cmp	r4, #16
 80123d2:	9305      	str	r3, [sp, #20]
 80123d4:	46a0      	mov	r8, r4
 80123d6:	bfa8      	it	ge
 80123d8:	f04f 0810 	movge.w	r8, #16
 80123dc:	f7ee f8aa 	bl	8000534 <__aeabi_ui2d>
 80123e0:	2c09      	cmp	r4, #9
 80123e2:	4682      	mov	sl, r0
 80123e4:	468b      	mov	fp, r1
 80123e6:	dc13      	bgt.n	8012410 <_strtod_l+0x3d0>
 80123e8:	9b06      	ldr	r3, [sp, #24]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f43f ae67 	beq.w	80120be <_strtod_l+0x7e>
 80123f0:	9b06      	ldr	r3, [sp, #24]
 80123f2:	dd7a      	ble.n	80124ea <_strtod_l+0x4aa>
 80123f4:	2b16      	cmp	r3, #22
 80123f6:	dc61      	bgt.n	80124bc <_strtod_l+0x47c>
 80123f8:	4a75      	ldr	r2, [pc, #468]	; (80125d0 <_strtod_l+0x590>)
 80123fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80123fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8012402:	4652      	mov	r2, sl
 8012404:	465b      	mov	r3, fp
 8012406:	f7ee f90f 	bl	8000628 <__aeabi_dmul>
 801240a:	4682      	mov	sl, r0
 801240c:	468b      	mov	fp, r1
 801240e:	e656      	b.n	80120be <_strtod_l+0x7e>
 8012410:	4b6f      	ldr	r3, [pc, #444]	; (80125d0 <_strtod_l+0x590>)
 8012412:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012416:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801241a:	f7ee f905 	bl	8000628 <__aeabi_dmul>
 801241e:	4606      	mov	r6, r0
 8012420:	4628      	mov	r0, r5
 8012422:	460f      	mov	r7, r1
 8012424:	f7ee f886 	bl	8000534 <__aeabi_ui2d>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4630      	mov	r0, r6
 801242e:	4639      	mov	r1, r7
 8012430:	f7ed ff44 	bl	80002bc <__adddf3>
 8012434:	2c0f      	cmp	r4, #15
 8012436:	4682      	mov	sl, r0
 8012438:	468b      	mov	fp, r1
 801243a:	ddd5      	ble.n	80123e8 <_strtod_l+0x3a8>
 801243c:	9b06      	ldr	r3, [sp, #24]
 801243e:	eba4 0808 	sub.w	r8, r4, r8
 8012442:	4498      	add	r8, r3
 8012444:	f1b8 0f00 	cmp.w	r8, #0
 8012448:	f340 8096 	ble.w	8012578 <_strtod_l+0x538>
 801244c:	f018 030f 	ands.w	r3, r8, #15
 8012450:	d00a      	beq.n	8012468 <_strtod_l+0x428>
 8012452:	495f      	ldr	r1, [pc, #380]	; (80125d0 <_strtod_l+0x590>)
 8012454:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012458:	4652      	mov	r2, sl
 801245a:	465b      	mov	r3, fp
 801245c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012460:	f7ee f8e2 	bl	8000628 <__aeabi_dmul>
 8012464:	4682      	mov	sl, r0
 8012466:	468b      	mov	fp, r1
 8012468:	f038 080f 	bics.w	r8, r8, #15
 801246c:	d073      	beq.n	8012556 <_strtod_l+0x516>
 801246e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012472:	dd47      	ble.n	8012504 <_strtod_l+0x4c4>
 8012474:	2400      	movs	r4, #0
 8012476:	46a0      	mov	r8, r4
 8012478:	9407      	str	r4, [sp, #28]
 801247a:	9405      	str	r4, [sp, #20]
 801247c:	2322      	movs	r3, #34	; 0x22
 801247e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80125d8 <_strtod_l+0x598>
 8012482:	f8c9 3000 	str.w	r3, [r9]
 8012486:	f04f 0a00 	mov.w	sl, #0
 801248a:	9b07      	ldr	r3, [sp, #28]
 801248c:	2b00      	cmp	r3, #0
 801248e:	f43f ae16 	beq.w	80120be <_strtod_l+0x7e>
 8012492:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012494:	4648      	mov	r0, r9
 8012496:	f002 f93c 	bl	8014712 <_Bfree>
 801249a:	9905      	ldr	r1, [sp, #20]
 801249c:	4648      	mov	r0, r9
 801249e:	f002 f938 	bl	8014712 <_Bfree>
 80124a2:	4641      	mov	r1, r8
 80124a4:	4648      	mov	r0, r9
 80124a6:	f002 f934 	bl	8014712 <_Bfree>
 80124aa:	9907      	ldr	r1, [sp, #28]
 80124ac:	4648      	mov	r0, r9
 80124ae:	f002 f930 	bl	8014712 <_Bfree>
 80124b2:	4621      	mov	r1, r4
 80124b4:	4648      	mov	r0, r9
 80124b6:	f002 f92c 	bl	8014712 <_Bfree>
 80124ba:	e600      	b.n	80120be <_strtod_l+0x7e>
 80124bc:	9a06      	ldr	r2, [sp, #24]
 80124be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80124c2:	4293      	cmp	r3, r2
 80124c4:	dbba      	blt.n	801243c <_strtod_l+0x3fc>
 80124c6:	4d42      	ldr	r5, [pc, #264]	; (80125d0 <_strtod_l+0x590>)
 80124c8:	f1c4 040f 	rsb	r4, r4, #15
 80124cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80124d0:	4652      	mov	r2, sl
 80124d2:	465b      	mov	r3, fp
 80124d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124d8:	f7ee f8a6 	bl	8000628 <__aeabi_dmul>
 80124dc:	9b06      	ldr	r3, [sp, #24]
 80124de:	1b1c      	subs	r4, r3, r4
 80124e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80124e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124e8:	e78d      	b.n	8012406 <_strtod_l+0x3c6>
 80124ea:	f113 0f16 	cmn.w	r3, #22
 80124ee:	dba5      	blt.n	801243c <_strtod_l+0x3fc>
 80124f0:	4a37      	ldr	r2, [pc, #220]	; (80125d0 <_strtod_l+0x590>)
 80124f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80124f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80124fa:	4650      	mov	r0, sl
 80124fc:	4659      	mov	r1, fp
 80124fe:	f7ee f9bd 	bl	800087c <__aeabi_ddiv>
 8012502:	e782      	b.n	801240a <_strtod_l+0x3ca>
 8012504:	2300      	movs	r3, #0
 8012506:	4e33      	ldr	r6, [pc, #204]	; (80125d4 <_strtod_l+0x594>)
 8012508:	ea4f 1828 	mov.w	r8, r8, asr #4
 801250c:	4650      	mov	r0, sl
 801250e:	4659      	mov	r1, fp
 8012510:	461d      	mov	r5, r3
 8012512:	f1b8 0f01 	cmp.w	r8, #1
 8012516:	dc21      	bgt.n	801255c <_strtod_l+0x51c>
 8012518:	b10b      	cbz	r3, 801251e <_strtod_l+0x4de>
 801251a:	4682      	mov	sl, r0
 801251c:	468b      	mov	fp, r1
 801251e:	4b2d      	ldr	r3, [pc, #180]	; (80125d4 <_strtod_l+0x594>)
 8012520:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012524:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012528:	4652      	mov	r2, sl
 801252a:	465b      	mov	r3, fp
 801252c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012530:	f7ee f87a 	bl	8000628 <__aeabi_dmul>
 8012534:	4b28      	ldr	r3, [pc, #160]	; (80125d8 <_strtod_l+0x598>)
 8012536:	460a      	mov	r2, r1
 8012538:	400b      	ands	r3, r1
 801253a:	4928      	ldr	r1, [pc, #160]	; (80125dc <_strtod_l+0x59c>)
 801253c:	428b      	cmp	r3, r1
 801253e:	4682      	mov	sl, r0
 8012540:	d898      	bhi.n	8012474 <_strtod_l+0x434>
 8012542:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012546:	428b      	cmp	r3, r1
 8012548:	bf86      	itte	hi
 801254a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80125e4 <_strtod_l+0x5a4>
 801254e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012552:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012556:	2300      	movs	r3, #0
 8012558:	9304      	str	r3, [sp, #16]
 801255a:	e077      	b.n	801264c <_strtod_l+0x60c>
 801255c:	f018 0f01 	tst.w	r8, #1
 8012560:	d006      	beq.n	8012570 <_strtod_l+0x530>
 8012562:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256a:	f7ee f85d 	bl	8000628 <__aeabi_dmul>
 801256e:	2301      	movs	r3, #1
 8012570:	3501      	adds	r5, #1
 8012572:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012576:	e7cc      	b.n	8012512 <_strtod_l+0x4d2>
 8012578:	d0ed      	beq.n	8012556 <_strtod_l+0x516>
 801257a:	f1c8 0800 	rsb	r8, r8, #0
 801257e:	f018 020f 	ands.w	r2, r8, #15
 8012582:	d00a      	beq.n	801259a <_strtod_l+0x55a>
 8012584:	4b12      	ldr	r3, [pc, #72]	; (80125d0 <_strtod_l+0x590>)
 8012586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801258a:	4650      	mov	r0, sl
 801258c:	4659      	mov	r1, fp
 801258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012592:	f7ee f973 	bl	800087c <__aeabi_ddiv>
 8012596:	4682      	mov	sl, r0
 8012598:	468b      	mov	fp, r1
 801259a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801259e:	d0da      	beq.n	8012556 <_strtod_l+0x516>
 80125a0:	f1b8 0f1f 	cmp.w	r8, #31
 80125a4:	dd20      	ble.n	80125e8 <_strtod_l+0x5a8>
 80125a6:	2400      	movs	r4, #0
 80125a8:	46a0      	mov	r8, r4
 80125aa:	9407      	str	r4, [sp, #28]
 80125ac:	9405      	str	r4, [sp, #20]
 80125ae:	2322      	movs	r3, #34	; 0x22
 80125b0:	f04f 0a00 	mov.w	sl, #0
 80125b4:	f04f 0b00 	mov.w	fp, #0
 80125b8:	f8c9 3000 	str.w	r3, [r9]
 80125bc:	e765      	b.n	801248a <_strtod_l+0x44a>
 80125be:	bf00      	nop
 80125c0:	08016719 	.word	0x08016719
 80125c4:	080167a3 	.word	0x080167a3
 80125c8:	08016721 	.word	0x08016721
 80125cc:	08016760 	.word	0x08016760
 80125d0:	08016848 	.word	0x08016848
 80125d4:	08016820 	.word	0x08016820
 80125d8:	7ff00000 	.word	0x7ff00000
 80125dc:	7ca00000 	.word	0x7ca00000
 80125e0:	fff80000 	.word	0xfff80000
 80125e4:	7fefffff 	.word	0x7fefffff
 80125e8:	f018 0310 	ands.w	r3, r8, #16
 80125ec:	bf18      	it	ne
 80125ee:	236a      	movne	r3, #106	; 0x6a
 80125f0:	4da0      	ldr	r5, [pc, #640]	; (8012874 <_strtod_l+0x834>)
 80125f2:	9304      	str	r3, [sp, #16]
 80125f4:	4650      	mov	r0, sl
 80125f6:	4659      	mov	r1, fp
 80125f8:	2300      	movs	r3, #0
 80125fa:	f1b8 0f00 	cmp.w	r8, #0
 80125fe:	f300 810a 	bgt.w	8012816 <_strtod_l+0x7d6>
 8012602:	b10b      	cbz	r3, 8012608 <_strtod_l+0x5c8>
 8012604:	4682      	mov	sl, r0
 8012606:	468b      	mov	fp, r1
 8012608:	9b04      	ldr	r3, [sp, #16]
 801260a:	b1bb      	cbz	r3, 801263c <_strtod_l+0x5fc>
 801260c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012614:	2b00      	cmp	r3, #0
 8012616:	4659      	mov	r1, fp
 8012618:	dd10      	ble.n	801263c <_strtod_l+0x5fc>
 801261a:	2b1f      	cmp	r3, #31
 801261c:	f340 8107 	ble.w	801282e <_strtod_l+0x7ee>
 8012620:	2b34      	cmp	r3, #52	; 0x34
 8012622:	bfde      	ittt	le
 8012624:	3b20      	suble	r3, #32
 8012626:	f04f 32ff 	movle.w	r2, #4294967295
 801262a:	fa02 f303 	lslle.w	r3, r2, r3
 801262e:	f04f 0a00 	mov.w	sl, #0
 8012632:	bfcc      	ite	gt
 8012634:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012638:	ea03 0b01 	andle.w	fp, r3, r1
 801263c:	2200      	movs	r2, #0
 801263e:	2300      	movs	r3, #0
 8012640:	4650      	mov	r0, sl
 8012642:	4659      	mov	r1, fp
 8012644:	f7ee fa58 	bl	8000af8 <__aeabi_dcmpeq>
 8012648:	2800      	cmp	r0, #0
 801264a:	d1ac      	bne.n	80125a6 <_strtod_l+0x566>
 801264c:	9b07      	ldr	r3, [sp, #28]
 801264e:	9300      	str	r3, [sp, #0]
 8012650:	9a05      	ldr	r2, [sp, #20]
 8012652:	9908      	ldr	r1, [sp, #32]
 8012654:	4623      	mov	r3, r4
 8012656:	4648      	mov	r0, r9
 8012658:	f002 f8ad 	bl	80147b6 <__s2b>
 801265c:	9007      	str	r0, [sp, #28]
 801265e:	2800      	cmp	r0, #0
 8012660:	f43f af08 	beq.w	8012474 <_strtod_l+0x434>
 8012664:	9a06      	ldr	r2, [sp, #24]
 8012666:	9b06      	ldr	r3, [sp, #24]
 8012668:	2a00      	cmp	r2, #0
 801266a:	f1c3 0300 	rsb	r3, r3, #0
 801266e:	bfa8      	it	ge
 8012670:	2300      	movge	r3, #0
 8012672:	930e      	str	r3, [sp, #56]	; 0x38
 8012674:	2400      	movs	r4, #0
 8012676:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801267a:	9316      	str	r3, [sp, #88]	; 0x58
 801267c:	46a0      	mov	r8, r4
 801267e:	9b07      	ldr	r3, [sp, #28]
 8012680:	4648      	mov	r0, r9
 8012682:	6859      	ldr	r1, [r3, #4]
 8012684:	f002 f811 	bl	80146aa <_Balloc>
 8012688:	9005      	str	r0, [sp, #20]
 801268a:	2800      	cmp	r0, #0
 801268c:	f43f aef6 	beq.w	801247c <_strtod_l+0x43c>
 8012690:	9b07      	ldr	r3, [sp, #28]
 8012692:	691a      	ldr	r2, [r3, #16]
 8012694:	3202      	adds	r2, #2
 8012696:	f103 010c 	add.w	r1, r3, #12
 801269a:	0092      	lsls	r2, r2, #2
 801269c:	300c      	adds	r0, #12
 801269e:	f001 fff9 	bl	8014694 <memcpy>
 80126a2:	aa1e      	add	r2, sp, #120	; 0x78
 80126a4:	a91d      	add	r1, sp, #116	; 0x74
 80126a6:	ec4b ab10 	vmov	d0, sl, fp
 80126aa:	4648      	mov	r0, r9
 80126ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80126b0:	f002 fb3c 	bl	8014d2c <__d2b>
 80126b4:	901c      	str	r0, [sp, #112]	; 0x70
 80126b6:	2800      	cmp	r0, #0
 80126b8:	f43f aee0 	beq.w	801247c <_strtod_l+0x43c>
 80126bc:	2101      	movs	r1, #1
 80126be:	4648      	mov	r0, r9
 80126c0:	f002 f905 	bl	80148ce <__i2b>
 80126c4:	4680      	mov	r8, r0
 80126c6:	2800      	cmp	r0, #0
 80126c8:	f43f aed8 	beq.w	801247c <_strtod_l+0x43c>
 80126cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80126ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80126d0:	2e00      	cmp	r6, #0
 80126d2:	bfab      	itete	ge
 80126d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80126d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80126d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80126da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80126dc:	bfac      	ite	ge
 80126de:	18f7      	addge	r7, r6, r3
 80126e0:	1b9d      	sublt	r5, r3, r6
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	1af6      	subs	r6, r6, r3
 80126e6:	4416      	add	r6, r2
 80126e8:	4b63      	ldr	r3, [pc, #396]	; (8012878 <_strtod_l+0x838>)
 80126ea:	3e01      	subs	r6, #1
 80126ec:	429e      	cmp	r6, r3
 80126ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80126f2:	f280 80af 	bge.w	8012854 <_strtod_l+0x814>
 80126f6:	1b9b      	subs	r3, r3, r6
 80126f8:	2b1f      	cmp	r3, #31
 80126fa:	eba2 0203 	sub.w	r2, r2, r3
 80126fe:	f04f 0101 	mov.w	r1, #1
 8012702:	f300 809b 	bgt.w	801283c <_strtod_l+0x7fc>
 8012706:	fa01 f303 	lsl.w	r3, r1, r3
 801270a:	930f      	str	r3, [sp, #60]	; 0x3c
 801270c:	2300      	movs	r3, #0
 801270e:	930a      	str	r3, [sp, #40]	; 0x28
 8012710:	18be      	adds	r6, r7, r2
 8012712:	9b04      	ldr	r3, [sp, #16]
 8012714:	42b7      	cmp	r7, r6
 8012716:	4415      	add	r5, r2
 8012718:	441d      	add	r5, r3
 801271a:	463b      	mov	r3, r7
 801271c:	bfa8      	it	ge
 801271e:	4633      	movge	r3, r6
 8012720:	42ab      	cmp	r3, r5
 8012722:	bfa8      	it	ge
 8012724:	462b      	movge	r3, r5
 8012726:	2b00      	cmp	r3, #0
 8012728:	bfc2      	ittt	gt
 801272a:	1af6      	subgt	r6, r6, r3
 801272c:	1aed      	subgt	r5, r5, r3
 801272e:	1aff      	subgt	r7, r7, r3
 8012730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012732:	b1bb      	cbz	r3, 8012764 <_strtod_l+0x724>
 8012734:	4641      	mov	r1, r8
 8012736:	461a      	mov	r2, r3
 8012738:	4648      	mov	r0, r9
 801273a:	f002 f967 	bl	8014a0c <__pow5mult>
 801273e:	4680      	mov	r8, r0
 8012740:	2800      	cmp	r0, #0
 8012742:	f43f ae9b 	beq.w	801247c <_strtod_l+0x43c>
 8012746:	4601      	mov	r1, r0
 8012748:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801274a:	4648      	mov	r0, r9
 801274c:	f002 f8c8 	bl	80148e0 <__multiply>
 8012750:	900c      	str	r0, [sp, #48]	; 0x30
 8012752:	2800      	cmp	r0, #0
 8012754:	f43f ae92 	beq.w	801247c <_strtod_l+0x43c>
 8012758:	991c      	ldr	r1, [sp, #112]	; 0x70
 801275a:	4648      	mov	r0, r9
 801275c:	f001 ffd9 	bl	8014712 <_Bfree>
 8012760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012762:	931c      	str	r3, [sp, #112]	; 0x70
 8012764:	2e00      	cmp	r6, #0
 8012766:	dc7a      	bgt.n	801285e <_strtod_l+0x81e>
 8012768:	9b06      	ldr	r3, [sp, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd08      	ble.n	8012780 <_strtod_l+0x740>
 801276e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012770:	9905      	ldr	r1, [sp, #20]
 8012772:	4648      	mov	r0, r9
 8012774:	f002 f94a 	bl	8014a0c <__pow5mult>
 8012778:	9005      	str	r0, [sp, #20]
 801277a:	2800      	cmp	r0, #0
 801277c:	f43f ae7e 	beq.w	801247c <_strtod_l+0x43c>
 8012780:	2d00      	cmp	r5, #0
 8012782:	dd08      	ble.n	8012796 <_strtod_l+0x756>
 8012784:	462a      	mov	r2, r5
 8012786:	9905      	ldr	r1, [sp, #20]
 8012788:	4648      	mov	r0, r9
 801278a:	f002 f98d 	bl	8014aa8 <__lshift>
 801278e:	9005      	str	r0, [sp, #20]
 8012790:	2800      	cmp	r0, #0
 8012792:	f43f ae73 	beq.w	801247c <_strtod_l+0x43c>
 8012796:	2f00      	cmp	r7, #0
 8012798:	dd08      	ble.n	80127ac <_strtod_l+0x76c>
 801279a:	4641      	mov	r1, r8
 801279c:	463a      	mov	r2, r7
 801279e:	4648      	mov	r0, r9
 80127a0:	f002 f982 	bl	8014aa8 <__lshift>
 80127a4:	4680      	mov	r8, r0
 80127a6:	2800      	cmp	r0, #0
 80127a8:	f43f ae68 	beq.w	801247c <_strtod_l+0x43c>
 80127ac:	9a05      	ldr	r2, [sp, #20]
 80127ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80127b0:	4648      	mov	r0, r9
 80127b2:	f002 f9e7 	bl	8014b84 <__mdiff>
 80127b6:	4604      	mov	r4, r0
 80127b8:	2800      	cmp	r0, #0
 80127ba:	f43f ae5f 	beq.w	801247c <_strtod_l+0x43c>
 80127be:	68c3      	ldr	r3, [r0, #12]
 80127c0:	930c      	str	r3, [sp, #48]	; 0x30
 80127c2:	2300      	movs	r3, #0
 80127c4:	60c3      	str	r3, [r0, #12]
 80127c6:	4641      	mov	r1, r8
 80127c8:	f002 f9c2 	bl	8014b50 <__mcmp>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	da55      	bge.n	801287c <_strtod_l+0x83c>
 80127d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d2:	b9e3      	cbnz	r3, 801280e <_strtod_l+0x7ce>
 80127d4:	f1ba 0f00 	cmp.w	sl, #0
 80127d8:	d119      	bne.n	801280e <_strtod_l+0x7ce>
 80127da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127de:	b9b3      	cbnz	r3, 801280e <_strtod_l+0x7ce>
 80127e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80127e4:	0d1b      	lsrs	r3, r3, #20
 80127e6:	051b      	lsls	r3, r3, #20
 80127e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80127ec:	d90f      	bls.n	801280e <_strtod_l+0x7ce>
 80127ee:	6963      	ldr	r3, [r4, #20]
 80127f0:	b913      	cbnz	r3, 80127f8 <_strtod_l+0x7b8>
 80127f2:	6923      	ldr	r3, [r4, #16]
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	dd0a      	ble.n	801280e <_strtod_l+0x7ce>
 80127f8:	4621      	mov	r1, r4
 80127fa:	2201      	movs	r2, #1
 80127fc:	4648      	mov	r0, r9
 80127fe:	f002 f953 	bl	8014aa8 <__lshift>
 8012802:	4641      	mov	r1, r8
 8012804:	4604      	mov	r4, r0
 8012806:	f002 f9a3 	bl	8014b50 <__mcmp>
 801280a:	2800      	cmp	r0, #0
 801280c:	dc67      	bgt.n	80128de <_strtod_l+0x89e>
 801280e:	9b04      	ldr	r3, [sp, #16]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d171      	bne.n	80128f8 <_strtod_l+0x8b8>
 8012814:	e63d      	b.n	8012492 <_strtod_l+0x452>
 8012816:	f018 0f01 	tst.w	r8, #1
 801281a:	d004      	beq.n	8012826 <_strtod_l+0x7e6>
 801281c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012820:	f7ed ff02 	bl	8000628 <__aeabi_dmul>
 8012824:	2301      	movs	r3, #1
 8012826:	ea4f 0868 	mov.w	r8, r8, asr #1
 801282a:	3508      	adds	r5, #8
 801282c:	e6e5      	b.n	80125fa <_strtod_l+0x5ba>
 801282e:	f04f 32ff 	mov.w	r2, #4294967295
 8012832:	fa02 f303 	lsl.w	r3, r2, r3
 8012836:	ea03 0a0a 	and.w	sl, r3, sl
 801283a:	e6ff      	b.n	801263c <_strtod_l+0x5fc>
 801283c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012840:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012844:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012848:	36e2      	adds	r6, #226	; 0xe2
 801284a:	fa01 f306 	lsl.w	r3, r1, r6
 801284e:	930a      	str	r3, [sp, #40]	; 0x28
 8012850:	910f      	str	r1, [sp, #60]	; 0x3c
 8012852:	e75d      	b.n	8012710 <_strtod_l+0x6d0>
 8012854:	2300      	movs	r3, #0
 8012856:	930a      	str	r3, [sp, #40]	; 0x28
 8012858:	2301      	movs	r3, #1
 801285a:	930f      	str	r3, [sp, #60]	; 0x3c
 801285c:	e758      	b.n	8012710 <_strtod_l+0x6d0>
 801285e:	4632      	mov	r2, r6
 8012860:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012862:	4648      	mov	r0, r9
 8012864:	f002 f920 	bl	8014aa8 <__lshift>
 8012868:	901c      	str	r0, [sp, #112]	; 0x70
 801286a:	2800      	cmp	r0, #0
 801286c:	f47f af7c 	bne.w	8012768 <_strtod_l+0x728>
 8012870:	e604      	b.n	801247c <_strtod_l+0x43c>
 8012872:	bf00      	nop
 8012874:	08016778 	.word	0x08016778
 8012878:	fffffc02 	.word	0xfffffc02
 801287c:	465d      	mov	r5, fp
 801287e:	f040 8086 	bne.w	801298e <_strtod_l+0x94e>
 8012882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012888:	b32a      	cbz	r2, 80128d6 <_strtod_l+0x896>
 801288a:	4aaf      	ldr	r2, [pc, #700]	; (8012b48 <_strtod_l+0xb08>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d153      	bne.n	8012938 <_strtod_l+0x8f8>
 8012890:	9b04      	ldr	r3, [sp, #16]
 8012892:	4650      	mov	r0, sl
 8012894:	b1d3      	cbz	r3, 80128cc <_strtod_l+0x88c>
 8012896:	4aad      	ldr	r2, [pc, #692]	; (8012b4c <_strtod_l+0xb0c>)
 8012898:	402a      	ands	r2, r5
 801289a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801289e:	f04f 31ff 	mov.w	r1, #4294967295
 80128a2:	d816      	bhi.n	80128d2 <_strtod_l+0x892>
 80128a4:	0d12      	lsrs	r2, r2, #20
 80128a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80128aa:	fa01 f303 	lsl.w	r3, r1, r3
 80128ae:	4298      	cmp	r0, r3
 80128b0:	d142      	bne.n	8012938 <_strtod_l+0x8f8>
 80128b2:	4ba7      	ldr	r3, [pc, #668]	; (8012b50 <_strtod_l+0xb10>)
 80128b4:	429d      	cmp	r5, r3
 80128b6:	d102      	bne.n	80128be <_strtod_l+0x87e>
 80128b8:	3001      	adds	r0, #1
 80128ba:	f43f addf 	beq.w	801247c <_strtod_l+0x43c>
 80128be:	4ba3      	ldr	r3, [pc, #652]	; (8012b4c <_strtod_l+0xb0c>)
 80128c0:	402b      	ands	r3, r5
 80128c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80128c6:	f04f 0a00 	mov.w	sl, #0
 80128ca:	e7a0      	b.n	801280e <_strtod_l+0x7ce>
 80128cc:	f04f 33ff 	mov.w	r3, #4294967295
 80128d0:	e7ed      	b.n	80128ae <_strtod_l+0x86e>
 80128d2:	460b      	mov	r3, r1
 80128d4:	e7eb      	b.n	80128ae <_strtod_l+0x86e>
 80128d6:	bb7b      	cbnz	r3, 8012938 <_strtod_l+0x8f8>
 80128d8:	f1ba 0f00 	cmp.w	sl, #0
 80128dc:	d12c      	bne.n	8012938 <_strtod_l+0x8f8>
 80128de:	9904      	ldr	r1, [sp, #16]
 80128e0:	4a9a      	ldr	r2, [pc, #616]	; (8012b4c <_strtod_l+0xb0c>)
 80128e2:	465b      	mov	r3, fp
 80128e4:	b1f1      	cbz	r1, 8012924 <_strtod_l+0x8e4>
 80128e6:	ea02 010b 	and.w	r1, r2, fp
 80128ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80128ee:	dc19      	bgt.n	8012924 <_strtod_l+0x8e4>
 80128f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80128f4:	f77f ae5b 	ble.w	80125ae <_strtod_l+0x56e>
 80128f8:	4a96      	ldr	r2, [pc, #600]	; (8012b54 <_strtod_l+0xb14>)
 80128fa:	2300      	movs	r3, #0
 80128fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012900:	4650      	mov	r0, sl
 8012902:	4659      	mov	r1, fp
 8012904:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012908:	f7ed fe8e 	bl	8000628 <__aeabi_dmul>
 801290c:	4682      	mov	sl, r0
 801290e:	468b      	mov	fp, r1
 8012910:	2900      	cmp	r1, #0
 8012912:	f47f adbe 	bne.w	8012492 <_strtod_l+0x452>
 8012916:	2800      	cmp	r0, #0
 8012918:	f47f adbb 	bne.w	8012492 <_strtod_l+0x452>
 801291c:	2322      	movs	r3, #34	; 0x22
 801291e:	f8c9 3000 	str.w	r3, [r9]
 8012922:	e5b6      	b.n	8012492 <_strtod_l+0x452>
 8012924:	4013      	ands	r3, r2
 8012926:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801292a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801292e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012932:	f04f 3aff 	mov.w	sl, #4294967295
 8012936:	e76a      	b.n	801280e <_strtod_l+0x7ce>
 8012938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293a:	b193      	cbz	r3, 8012962 <_strtod_l+0x922>
 801293c:	422b      	tst	r3, r5
 801293e:	f43f af66 	beq.w	801280e <_strtod_l+0x7ce>
 8012942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012944:	9a04      	ldr	r2, [sp, #16]
 8012946:	4650      	mov	r0, sl
 8012948:	4659      	mov	r1, fp
 801294a:	b173      	cbz	r3, 801296a <_strtod_l+0x92a>
 801294c:	f7ff fb5b 	bl	8012006 <sulp>
 8012950:	4602      	mov	r2, r0
 8012952:	460b      	mov	r3, r1
 8012954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012958:	f7ed fcb0 	bl	80002bc <__adddf3>
 801295c:	4682      	mov	sl, r0
 801295e:	468b      	mov	fp, r1
 8012960:	e755      	b.n	801280e <_strtod_l+0x7ce>
 8012962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012964:	ea13 0f0a 	tst.w	r3, sl
 8012968:	e7e9      	b.n	801293e <_strtod_l+0x8fe>
 801296a:	f7ff fb4c 	bl	8012006 <sulp>
 801296e:	4602      	mov	r2, r0
 8012970:	460b      	mov	r3, r1
 8012972:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012976:	f7ed fc9f 	bl	80002b8 <__aeabi_dsub>
 801297a:	2200      	movs	r2, #0
 801297c:	2300      	movs	r3, #0
 801297e:	4682      	mov	sl, r0
 8012980:	468b      	mov	fp, r1
 8012982:	f7ee f8b9 	bl	8000af8 <__aeabi_dcmpeq>
 8012986:	2800      	cmp	r0, #0
 8012988:	f47f ae11 	bne.w	80125ae <_strtod_l+0x56e>
 801298c:	e73f      	b.n	801280e <_strtod_l+0x7ce>
 801298e:	4641      	mov	r1, r8
 8012990:	4620      	mov	r0, r4
 8012992:	f002 fa1a 	bl	8014dca <__ratio>
 8012996:	ec57 6b10 	vmov	r6, r7, d0
 801299a:	2200      	movs	r2, #0
 801299c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80129a0:	ee10 0a10 	vmov	r0, s0
 80129a4:	4639      	mov	r1, r7
 80129a6:	f7ee f8bb 	bl	8000b20 <__aeabi_dcmple>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d077      	beq.n	8012a9e <_strtod_l+0xa5e>
 80129ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d04a      	beq.n	8012a4a <_strtod_l+0xa0a>
 80129b4:	4b68      	ldr	r3, [pc, #416]	; (8012b58 <_strtod_l+0xb18>)
 80129b6:	2200      	movs	r2, #0
 80129b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80129bc:	4f66      	ldr	r7, [pc, #408]	; (8012b58 <_strtod_l+0xb18>)
 80129be:	2600      	movs	r6, #0
 80129c0:	4b62      	ldr	r3, [pc, #392]	; (8012b4c <_strtod_l+0xb0c>)
 80129c2:	402b      	ands	r3, r5
 80129c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80129c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129c8:	4b64      	ldr	r3, [pc, #400]	; (8012b5c <_strtod_l+0xb1c>)
 80129ca:	429a      	cmp	r2, r3
 80129cc:	f040 80ce 	bne.w	8012b6c <_strtod_l+0xb2c>
 80129d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80129d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80129d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80129dc:	ec4b ab10 	vmov	d0, sl, fp
 80129e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80129e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80129e8:	f002 f92a 	bl	8014c40 <__ulp>
 80129ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80129f0:	ec53 2b10 	vmov	r2, r3, d0
 80129f4:	f7ed fe18 	bl	8000628 <__aeabi_dmul>
 80129f8:	4652      	mov	r2, sl
 80129fa:	465b      	mov	r3, fp
 80129fc:	f7ed fc5e 	bl	80002bc <__adddf3>
 8012a00:	460b      	mov	r3, r1
 8012a02:	4952      	ldr	r1, [pc, #328]	; (8012b4c <_strtod_l+0xb0c>)
 8012a04:	4a56      	ldr	r2, [pc, #344]	; (8012b60 <_strtod_l+0xb20>)
 8012a06:	4019      	ands	r1, r3
 8012a08:	4291      	cmp	r1, r2
 8012a0a:	4682      	mov	sl, r0
 8012a0c:	d95b      	bls.n	8012ac6 <_strtod_l+0xa86>
 8012a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d103      	bne.n	8012a20 <_strtod_l+0x9e0>
 8012a18:	9b08      	ldr	r3, [sp, #32]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	f43f ad2e 	beq.w	801247c <_strtod_l+0x43c>
 8012a20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012b50 <_strtod_l+0xb10>
 8012a24:	f04f 3aff 	mov.w	sl, #4294967295
 8012a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a2a:	4648      	mov	r0, r9
 8012a2c:	f001 fe71 	bl	8014712 <_Bfree>
 8012a30:	9905      	ldr	r1, [sp, #20]
 8012a32:	4648      	mov	r0, r9
 8012a34:	f001 fe6d 	bl	8014712 <_Bfree>
 8012a38:	4641      	mov	r1, r8
 8012a3a:	4648      	mov	r0, r9
 8012a3c:	f001 fe69 	bl	8014712 <_Bfree>
 8012a40:	4621      	mov	r1, r4
 8012a42:	4648      	mov	r0, r9
 8012a44:	f001 fe65 	bl	8014712 <_Bfree>
 8012a48:	e619      	b.n	801267e <_strtod_l+0x63e>
 8012a4a:	f1ba 0f00 	cmp.w	sl, #0
 8012a4e:	d11a      	bne.n	8012a86 <_strtod_l+0xa46>
 8012a50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a54:	b9eb      	cbnz	r3, 8012a92 <_strtod_l+0xa52>
 8012a56:	2200      	movs	r2, #0
 8012a58:	4b3f      	ldr	r3, [pc, #252]	; (8012b58 <_strtod_l+0xb18>)
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	4639      	mov	r1, r7
 8012a5e:	f7ee f855 	bl	8000b0c <__aeabi_dcmplt>
 8012a62:	b9c8      	cbnz	r0, 8012a98 <_strtod_l+0xa58>
 8012a64:	4630      	mov	r0, r6
 8012a66:	4639      	mov	r1, r7
 8012a68:	2200      	movs	r2, #0
 8012a6a:	4b3e      	ldr	r3, [pc, #248]	; (8012b64 <_strtod_l+0xb24>)
 8012a6c:	f7ed fddc 	bl	8000628 <__aeabi_dmul>
 8012a70:	4606      	mov	r6, r0
 8012a72:	460f      	mov	r7, r1
 8012a74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012a78:	9618      	str	r6, [sp, #96]	; 0x60
 8012a7a:	9319      	str	r3, [sp, #100]	; 0x64
 8012a7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012a80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012a84:	e79c      	b.n	80129c0 <_strtod_l+0x980>
 8012a86:	f1ba 0f01 	cmp.w	sl, #1
 8012a8a:	d102      	bne.n	8012a92 <_strtod_l+0xa52>
 8012a8c:	2d00      	cmp	r5, #0
 8012a8e:	f43f ad8e 	beq.w	80125ae <_strtod_l+0x56e>
 8012a92:	2200      	movs	r2, #0
 8012a94:	4b34      	ldr	r3, [pc, #208]	; (8012b68 <_strtod_l+0xb28>)
 8012a96:	e78f      	b.n	80129b8 <_strtod_l+0x978>
 8012a98:	2600      	movs	r6, #0
 8012a9a:	4f32      	ldr	r7, [pc, #200]	; (8012b64 <_strtod_l+0xb24>)
 8012a9c:	e7ea      	b.n	8012a74 <_strtod_l+0xa34>
 8012a9e:	4b31      	ldr	r3, [pc, #196]	; (8012b64 <_strtod_l+0xb24>)
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	4639      	mov	r1, r7
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	f7ed fdbf 	bl	8000628 <__aeabi_dmul>
 8012aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aac:	4606      	mov	r6, r0
 8012aae:	460f      	mov	r7, r1
 8012ab0:	b933      	cbnz	r3, 8012ac0 <_strtod_l+0xa80>
 8012ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ab6:	9010      	str	r0, [sp, #64]	; 0x40
 8012ab8:	9311      	str	r3, [sp, #68]	; 0x44
 8012aba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012abe:	e7df      	b.n	8012a80 <_strtod_l+0xa40>
 8012ac0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012ac4:	e7f9      	b.n	8012aba <_strtod_l+0xa7a>
 8012ac6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012aca:	9b04      	ldr	r3, [sp, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1ab      	bne.n	8012a28 <_strtod_l+0x9e8>
 8012ad0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012ad4:	0d1b      	lsrs	r3, r3, #20
 8012ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ad8:	051b      	lsls	r3, r3, #20
 8012ada:	429a      	cmp	r2, r3
 8012adc:	465d      	mov	r5, fp
 8012ade:	d1a3      	bne.n	8012a28 <_strtod_l+0x9e8>
 8012ae0:	4639      	mov	r1, r7
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	f7ee f850 	bl	8000b88 <__aeabi_d2iz>
 8012ae8:	f7ed fd34 	bl	8000554 <__aeabi_i2d>
 8012aec:	460b      	mov	r3, r1
 8012aee:	4602      	mov	r2, r0
 8012af0:	4639      	mov	r1, r7
 8012af2:	4630      	mov	r0, r6
 8012af4:	f7ed fbe0 	bl	80002b8 <__aeabi_dsub>
 8012af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012afa:	4606      	mov	r6, r0
 8012afc:	460f      	mov	r7, r1
 8012afe:	b933      	cbnz	r3, 8012b0e <_strtod_l+0xace>
 8012b00:	f1ba 0f00 	cmp.w	sl, #0
 8012b04:	d103      	bne.n	8012b0e <_strtod_l+0xace>
 8012b06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8012b0a:	2d00      	cmp	r5, #0
 8012b0c:	d06d      	beq.n	8012bea <_strtod_l+0xbaa>
 8012b0e:	a30a      	add	r3, pc, #40	; (adr r3, 8012b38 <_strtod_l+0xaf8>)
 8012b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b14:	4630      	mov	r0, r6
 8012b16:	4639      	mov	r1, r7
 8012b18:	f7ed fff8 	bl	8000b0c <__aeabi_dcmplt>
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	f47f acb8 	bne.w	8012492 <_strtod_l+0x452>
 8012b22:	a307      	add	r3, pc, #28	; (adr r3, 8012b40 <_strtod_l+0xb00>)
 8012b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b28:	4630      	mov	r0, r6
 8012b2a:	4639      	mov	r1, r7
 8012b2c:	f7ee f80c 	bl	8000b48 <__aeabi_dcmpgt>
 8012b30:	2800      	cmp	r0, #0
 8012b32:	f43f af79 	beq.w	8012a28 <_strtod_l+0x9e8>
 8012b36:	e4ac      	b.n	8012492 <_strtod_l+0x452>
 8012b38:	94a03595 	.word	0x94a03595
 8012b3c:	3fdfffff 	.word	0x3fdfffff
 8012b40:	35afe535 	.word	0x35afe535
 8012b44:	3fe00000 	.word	0x3fe00000
 8012b48:	000fffff 	.word	0x000fffff
 8012b4c:	7ff00000 	.word	0x7ff00000
 8012b50:	7fefffff 	.word	0x7fefffff
 8012b54:	39500000 	.word	0x39500000
 8012b58:	3ff00000 	.word	0x3ff00000
 8012b5c:	7fe00000 	.word	0x7fe00000
 8012b60:	7c9fffff 	.word	0x7c9fffff
 8012b64:	3fe00000 	.word	0x3fe00000
 8012b68:	bff00000 	.word	0xbff00000
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	b333      	cbz	r3, 8012bbe <_strtod_l+0xb7e>
 8012b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012b76:	d822      	bhi.n	8012bbe <_strtod_l+0xb7e>
 8012b78:	a327      	add	r3, pc, #156	; (adr r3, 8012c18 <_strtod_l+0xbd8>)
 8012b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7e:	4630      	mov	r0, r6
 8012b80:	4639      	mov	r1, r7
 8012b82:	f7ed ffcd 	bl	8000b20 <__aeabi_dcmple>
 8012b86:	b1a0      	cbz	r0, 8012bb2 <_strtod_l+0xb72>
 8012b88:	4639      	mov	r1, r7
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f7ee f824 	bl	8000bd8 <__aeabi_d2uiz>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	bf08      	it	eq
 8012b94:	2001      	moveq	r0, #1
 8012b96:	f7ed fccd 	bl	8000534 <__aeabi_ui2d>
 8012b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	460f      	mov	r7, r1
 8012ba0:	bb03      	cbnz	r3, 8012be4 <_strtod_l+0xba4>
 8012ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ba6:	9012      	str	r0, [sp, #72]	; 0x48
 8012ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8012baa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012bb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012bba:	1a9b      	subs	r3, r3, r2
 8012bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8012bbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012bc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012bc6:	f002 f83b 	bl	8014c40 <__ulp>
 8012bca:	4650      	mov	r0, sl
 8012bcc:	ec53 2b10 	vmov	r2, r3, d0
 8012bd0:	4659      	mov	r1, fp
 8012bd2:	f7ed fd29 	bl	8000628 <__aeabi_dmul>
 8012bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012bda:	f7ed fb6f 	bl	80002bc <__adddf3>
 8012bde:	4682      	mov	sl, r0
 8012be0:	468b      	mov	fp, r1
 8012be2:	e772      	b.n	8012aca <_strtod_l+0xa8a>
 8012be4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012be8:	e7df      	b.n	8012baa <_strtod_l+0xb6a>
 8012bea:	a30d      	add	r3, pc, #52	; (adr r3, 8012c20 <_strtod_l+0xbe0>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	f7ed ff8c 	bl	8000b0c <__aeabi_dcmplt>
 8012bf4:	e79c      	b.n	8012b30 <_strtod_l+0xaf0>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8012bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bfe:	6013      	str	r3, [r2, #0]
 8012c00:	f7ff ba61 	b.w	80120c6 <_strtod_l+0x86>
 8012c04:	2b65      	cmp	r3, #101	; 0x65
 8012c06:	f04f 0200 	mov.w	r2, #0
 8012c0a:	f43f ab4e 	beq.w	80122aa <_strtod_l+0x26a>
 8012c0e:	2101      	movs	r1, #1
 8012c10:	4614      	mov	r4, r2
 8012c12:	9104      	str	r1, [sp, #16]
 8012c14:	f7ff bacb 	b.w	80121ae <_strtod_l+0x16e>
 8012c18:	ffc00000 	.word	0xffc00000
 8012c1c:	41dfffff 	.word	0x41dfffff
 8012c20:	94a03595 	.word	0x94a03595
 8012c24:	3fcfffff 	.word	0x3fcfffff

08012c28 <_strtod_r>:
 8012c28:	4b05      	ldr	r3, [pc, #20]	; (8012c40 <_strtod_r+0x18>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	b410      	push	{r4}
 8012c2e:	6a1b      	ldr	r3, [r3, #32]
 8012c30:	4c04      	ldr	r4, [pc, #16]	; (8012c44 <_strtod_r+0x1c>)
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	bf08      	it	eq
 8012c36:	4623      	moveq	r3, r4
 8012c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c3c:	f7ff ba00 	b.w	8012040 <_strtod_l>
 8012c40:	2000000c 	.word	0x2000000c
 8012c44:	20000070 	.word	0x20000070

08012c48 <_strtol_l.isra.0>:
 8012c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c4c:	4680      	mov	r8, r0
 8012c4e:	4689      	mov	r9, r1
 8012c50:	4692      	mov	sl, r2
 8012c52:	461e      	mov	r6, r3
 8012c54:	460f      	mov	r7, r1
 8012c56:	463d      	mov	r5, r7
 8012c58:	9808      	ldr	r0, [sp, #32]
 8012c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c5e:	f001 fc67 	bl	8014530 <__locale_ctype_ptr_l>
 8012c62:	4420      	add	r0, r4
 8012c64:	7843      	ldrb	r3, [r0, #1]
 8012c66:	f013 0308 	ands.w	r3, r3, #8
 8012c6a:	d132      	bne.n	8012cd2 <_strtol_l.isra.0+0x8a>
 8012c6c:	2c2d      	cmp	r4, #45	; 0x2d
 8012c6e:	d132      	bne.n	8012cd6 <_strtol_l.isra.0+0x8e>
 8012c70:	787c      	ldrb	r4, [r7, #1]
 8012c72:	1cbd      	adds	r5, r7, #2
 8012c74:	2201      	movs	r2, #1
 8012c76:	2e00      	cmp	r6, #0
 8012c78:	d05d      	beq.n	8012d36 <_strtol_l.isra.0+0xee>
 8012c7a:	2e10      	cmp	r6, #16
 8012c7c:	d109      	bne.n	8012c92 <_strtol_l.isra.0+0x4a>
 8012c7e:	2c30      	cmp	r4, #48	; 0x30
 8012c80:	d107      	bne.n	8012c92 <_strtol_l.isra.0+0x4a>
 8012c82:	782b      	ldrb	r3, [r5, #0]
 8012c84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012c88:	2b58      	cmp	r3, #88	; 0x58
 8012c8a:	d14f      	bne.n	8012d2c <_strtol_l.isra.0+0xe4>
 8012c8c:	786c      	ldrb	r4, [r5, #1]
 8012c8e:	2610      	movs	r6, #16
 8012c90:	3502      	adds	r5, #2
 8012c92:	2a00      	cmp	r2, #0
 8012c94:	bf14      	ite	ne
 8012c96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012c9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012c9e:	2700      	movs	r7, #0
 8012ca0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012caa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012cae:	2b09      	cmp	r3, #9
 8012cb0:	d817      	bhi.n	8012ce2 <_strtol_l.isra.0+0x9a>
 8012cb2:	461c      	mov	r4, r3
 8012cb4:	42a6      	cmp	r6, r4
 8012cb6:	dd23      	ble.n	8012d00 <_strtol_l.isra.0+0xb8>
 8012cb8:	1c7b      	adds	r3, r7, #1
 8012cba:	d007      	beq.n	8012ccc <_strtol_l.isra.0+0x84>
 8012cbc:	4584      	cmp	ip, r0
 8012cbe:	d31c      	bcc.n	8012cfa <_strtol_l.isra.0+0xb2>
 8012cc0:	d101      	bne.n	8012cc6 <_strtol_l.isra.0+0x7e>
 8012cc2:	45a6      	cmp	lr, r4
 8012cc4:	db19      	blt.n	8012cfa <_strtol_l.isra.0+0xb2>
 8012cc6:	fb00 4006 	mla	r0, r0, r6, r4
 8012cca:	2701      	movs	r7, #1
 8012ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cd0:	e7eb      	b.n	8012caa <_strtol_l.isra.0+0x62>
 8012cd2:	462f      	mov	r7, r5
 8012cd4:	e7bf      	b.n	8012c56 <_strtol_l.isra.0+0xe>
 8012cd6:	2c2b      	cmp	r4, #43	; 0x2b
 8012cd8:	bf04      	itt	eq
 8012cda:	1cbd      	addeq	r5, r7, #2
 8012cdc:	787c      	ldrbeq	r4, [r7, #1]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	e7c9      	b.n	8012c76 <_strtol_l.isra.0+0x2e>
 8012ce2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012ce6:	2b19      	cmp	r3, #25
 8012ce8:	d801      	bhi.n	8012cee <_strtol_l.isra.0+0xa6>
 8012cea:	3c37      	subs	r4, #55	; 0x37
 8012cec:	e7e2      	b.n	8012cb4 <_strtol_l.isra.0+0x6c>
 8012cee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012cf2:	2b19      	cmp	r3, #25
 8012cf4:	d804      	bhi.n	8012d00 <_strtol_l.isra.0+0xb8>
 8012cf6:	3c57      	subs	r4, #87	; 0x57
 8012cf8:	e7dc      	b.n	8012cb4 <_strtol_l.isra.0+0x6c>
 8012cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8012cfe:	e7e5      	b.n	8012ccc <_strtol_l.isra.0+0x84>
 8012d00:	1c7b      	adds	r3, r7, #1
 8012d02:	d108      	bne.n	8012d16 <_strtol_l.isra.0+0xce>
 8012d04:	2322      	movs	r3, #34	; 0x22
 8012d06:	f8c8 3000 	str.w	r3, [r8]
 8012d0a:	4608      	mov	r0, r1
 8012d0c:	f1ba 0f00 	cmp.w	sl, #0
 8012d10:	d107      	bne.n	8012d22 <_strtol_l.isra.0+0xda>
 8012d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d16:	b102      	cbz	r2, 8012d1a <_strtol_l.isra.0+0xd2>
 8012d18:	4240      	negs	r0, r0
 8012d1a:	f1ba 0f00 	cmp.w	sl, #0
 8012d1e:	d0f8      	beq.n	8012d12 <_strtol_l.isra.0+0xca>
 8012d20:	b10f      	cbz	r7, 8012d26 <_strtol_l.isra.0+0xde>
 8012d22:	f105 39ff 	add.w	r9, r5, #4294967295
 8012d26:	f8ca 9000 	str.w	r9, [sl]
 8012d2a:	e7f2      	b.n	8012d12 <_strtol_l.isra.0+0xca>
 8012d2c:	2430      	movs	r4, #48	; 0x30
 8012d2e:	2e00      	cmp	r6, #0
 8012d30:	d1af      	bne.n	8012c92 <_strtol_l.isra.0+0x4a>
 8012d32:	2608      	movs	r6, #8
 8012d34:	e7ad      	b.n	8012c92 <_strtol_l.isra.0+0x4a>
 8012d36:	2c30      	cmp	r4, #48	; 0x30
 8012d38:	d0a3      	beq.n	8012c82 <_strtol_l.isra.0+0x3a>
 8012d3a:	260a      	movs	r6, #10
 8012d3c:	e7a9      	b.n	8012c92 <_strtol_l.isra.0+0x4a>
	...

08012d40 <_strtol_r>:
 8012d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d42:	4c06      	ldr	r4, [pc, #24]	; (8012d5c <_strtol_r+0x1c>)
 8012d44:	4d06      	ldr	r5, [pc, #24]	; (8012d60 <_strtol_r+0x20>)
 8012d46:	6824      	ldr	r4, [r4, #0]
 8012d48:	6a24      	ldr	r4, [r4, #32]
 8012d4a:	2c00      	cmp	r4, #0
 8012d4c:	bf08      	it	eq
 8012d4e:	462c      	moveq	r4, r5
 8012d50:	9400      	str	r4, [sp, #0]
 8012d52:	f7ff ff79 	bl	8012c48 <_strtol_l.isra.0>
 8012d56:	b003      	add	sp, #12
 8012d58:	bd30      	pop	{r4, r5, pc}
 8012d5a:	bf00      	nop
 8012d5c:	2000000c 	.word	0x2000000c
 8012d60:	20000070 	.word	0x20000070

08012d64 <_vsiprintf_r>:
 8012d64:	b500      	push	{lr}
 8012d66:	b09b      	sub	sp, #108	; 0x6c
 8012d68:	9100      	str	r1, [sp, #0]
 8012d6a:	9104      	str	r1, [sp, #16]
 8012d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d70:	9105      	str	r1, [sp, #20]
 8012d72:	9102      	str	r1, [sp, #8]
 8012d74:	4905      	ldr	r1, [pc, #20]	; (8012d8c <_vsiprintf_r+0x28>)
 8012d76:	9103      	str	r1, [sp, #12]
 8012d78:	4669      	mov	r1, sp
 8012d7a:	f002 f9a5 	bl	80150c8 <_svfiprintf_r>
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	2200      	movs	r2, #0
 8012d82:	701a      	strb	r2, [r3, #0]
 8012d84:	b01b      	add	sp, #108	; 0x6c
 8012d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d8a:	bf00      	nop
 8012d8c:	ffff0208 	.word	0xffff0208

08012d90 <vsiprintf>:
 8012d90:	4613      	mov	r3, r2
 8012d92:	460a      	mov	r2, r1
 8012d94:	4601      	mov	r1, r0
 8012d96:	4802      	ldr	r0, [pc, #8]	; (8012da0 <vsiprintf+0x10>)
 8012d98:	6800      	ldr	r0, [r0, #0]
 8012d9a:	f7ff bfe3 	b.w	8012d64 <_vsiprintf_r>
 8012d9e:	bf00      	nop
 8012da0:	2000000c 	.word	0x2000000c

08012da4 <__swbuf_r>:
 8012da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012da6:	460e      	mov	r6, r1
 8012da8:	4614      	mov	r4, r2
 8012daa:	4605      	mov	r5, r0
 8012dac:	b118      	cbz	r0, 8012db6 <__swbuf_r+0x12>
 8012dae:	6983      	ldr	r3, [r0, #24]
 8012db0:	b90b      	cbnz	r3, 8012db6 <__swbuf_r+0x12>
 8012db2:	f001 f80d 	bl	8013dd0 <__sinit>
 8012db6:	4b21      	ldr	r3, [pc, #132]	; (8012e3c <__swbuf_r+0x98>)
 8012db8:	429c      	cmp	r4, r3
 8012dba:	d12a      	bne.n	8012e12 <__swbuf_r+0x6e>
 8012dbc:	686c      	ldr	r4, [r5, #4]
 8012dbe:	69a3      	ldr	r3, [r4, #24]
 8012dc0:	60a3      	str	r3, [r4, #8]
 8012dc2:	89a3      	ldrh	r3, [r4, #12]
 8012dc4:	071a      	lsls	r2, r3, #28
 8012dc6:	d52e      	bpl.n	8012e26 <__swbuf_r+0x82>
 8012dc8:	6923      	ldr	r3, [r4, #16]
 8012dca:	b363      	cbz	r3, 8012e26 <__swbuf_r+0x82>
 8012dcc:	6923      	ldr	r3, [r4, #16]
 8012dce:	6820      	ldr	r0, [r4, #0]
 8012dd0:	1ac0      	subs	r0, r0, r3
 8012dd2:	6963      	ldr	r3, [r4, #20]
 8012dd4:	b2f6      	uxtb	r6, r6
 8012dd6:	4283      	cmp	r3, r0
 8012dd8:	4637      	mov	r7, r6
 8012dda:	dc04      	bgt.n	8012de6 <__swbuf_r+0x42>
 8012ddc:	4621      	mov	r1, r4
 8012dde:	4628      	mov	r0, r5
 8012de0:	f000 ff8c 	bl	8013cfc <_fflush_r>
 8012de4:	bb28      	cbnz	r0, 8012e32 <__swbuf_r+0x8e>
 8012de6:	68a3      	ldr	r3, [r4, #8]
 8012de8:	3b01      	subs	r3, #1
 8012dea:	60a3      	str	r3, [r4, #8]
 8012dec:	6823      	ldr	r3, [r4, #0]
 8012dee:	1c5a      	adds	r2, r3, #1
 8012df0:	6022      	str	r2, [r4, #0]
 8012df2:	701e      	strb	r6, [r3, #0]
 8012df4:	6963      	ldr	r3, [r4, #20]
 8012df6:	3001      	adds	r0, #1
 8012df8:	4283      	cmp	r3, r0
 8012dfa:	d004      	beq.n	8012e06 <__swbuf_r+0x62>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	07db      	lsls	r3, r3, #31
 8012e00:	d519      	bpl.n	8012e36 <__swbuf_r+0x92>
 8012e02:	2e0a      	cmp	r6, #10
 8012e04:	d117      	bne.n	8012e36 <__swbuf_r+0x92>
 8012e06:	4621      	mov	r1, r4
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f000 ff77 	bl	8013cfc <_fflush_r>
 8012e0e:	b190      	cbz	r0, 8012e36 <__swbuf_r+0x92>
 8012e10:	e00f      	b.n	8012e32 <__swbuf_r+0x8e>
 8012e12:	4b0b      	ldr	r3, [pc, #44]	; (8012e40 <__swbuf_r+0x9c>)
 8012e14:	429c      	cmp	r4, r3
 8012e16:	d101      	bne.n	8012e1c <__swbuf_r+0x78>
 8012e18:	68ac      	ldr	r4, [r5, #8]
 8012e1a:	e7d0      	b.n	8012dbe <__swbuf_r+0x1a>
 8012e1c:	4b09      	ldr	r3, [pc, #36]	; (8012e44 <__swbuf_r+0xa0>)
 8012e1e:	429c      	cmp	r4, r3
 8012e20:	bf08      	it	eq
 8012e22:	68ec      	ldreq	r4, [r5, #12]
 8012e24:	e7cb      	b.n	8012dbe <__swbuf_r+0x1a>
 8012e26:	4621      	mov	r1, r4
 8012e28:	4628      	mov	r0, r5
 8012e2a:	f000 f81f 	bl	8012e6c <__swsetup_r>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0cc      	beq.n	8012dcc <__swbuf_r+0x28>
 8012e32:	f04f 37ff 	mov.w	r7, #4294967295
 8012e36:	4638      	mov	r0, r7
 8012e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	080167d0 	.word	0x080167d0
 8012e40:	080167f0 	.word	0x080167f0
 8012e44:	080167b0 	.word	0x080167b0

08012e48 <_write_r>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	4c07      	ldr	r4, [pc, #28]	; (8012e68 <_write_r+0x20>)
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	4608      	mov	r0, r1
 8012e50:	4611      	mov	r1, r2
 8012e52:	2200      	movs	r2, #0
 8012e54:	6022      	str	r2, [r4, #0]
 8012e56:	461a      	mov	r2, r3
 8012e58:	f7ef ffeb 	bl	8002e32 <_write>
 8012e5c:	1c43      	adds	r3, r0, #1
 8012e5e:	d102      	bne.n	8012e66 <_write_r+0x1e>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	b103      	cbz	r3, 8012e66 <_write_r+0x1e>
 8012e64:	602b      	str	r3, [r5, #0]
 8012e66:	bd38      	pop	{r3, r4, r5, pc}
 8012e68:	2000c680 	.word	0x2000c680

08012e6c <__swsetup_r>:
 8012e6c:	4b32      	ldr	r3, [pc, #200]	; (8012f38 <__swsetup_r+0xcc>)
 8012e6e:	b570      	push	{r4, r5, r6, lr}
 8012e70:	681d      	ldr	r5, [r3, #0]
 8012e72:	4606      	mov	r6, r0
 8012e74:	460c      	mov	r4, r1
 8012e76:	b125      	cbz	r5, 8012e82 <__swsetup_r+0x16>
 8012e78:	69ab      	ldr	r3, [r5, #24]
 8012e7a:	b913      	cbnz	r3, 8012e82 <__swsetup_r+0x16>
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f000 ffa7 	bl	8013dd0 <__sinit>
 8012e82:	4b2e      	ldr	r3, [pc, #184]	; (8012f3c <__swsetup_r+0xd0>)
 8012e84:	429c      	cmp	r4, r3
 8012e86:	d10f      	bne.n	8012ea8 <__swsetup_r+0x3c>
 8012e88:	686c      	ldr	r4, [r5, #4]
 8012e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	0715      	lsls	r5, r2, #28
 8012e92:	d42c      	bmi.n	8012eee <__swsetup_r+0x82>
 8012e94:	06d0      	lsls	r0, r2, #27
 8012e96:	d411      	bmi.n	8012ebc <__swsetup_r+0x50>
 8012e98:	2209      	movs	r2, #9
 8012e9a:	6032      	str	r2, [r6, #0]
 8012e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ea0:	81a3      	strh	r3, [r4, #12]
 8012ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea6:	e03e      	b.n	8012f26 <__swsetup_r+0xba>
 8012ea8:	4b25      	ldr	r3, [pc, #148]	; (8012f40 <__swsetup_r+0xd4>)
 8012eaa:	429c      	cmp	r4, r3
 8012eac:	d101      	bne.n	8012eb2 <__swsetup_r+0x46>
 8012eae:	68ac      	ldr	r4, [r5, #8]
 8012eb0:	e7eb      	b.n	8012e8a <__swsetup_r+0x1e>
 8012eb2:	4b24      	ldr	r3, [pc, #144]	; (8012f44 <__swsetup_r+0xd8>)
 8012eb4:	429c      	cmp	r4, r3
 8012eb6:	bf08      	it	eq
 8012eb8:	68ec      	ldreq	r4, [r5, #12]
 8012eba:	e7e6      	b.n	8012e8a <__swsetup_r+0x1e>
 8012ebc:	0751      	lsls	r1, r2, #29
 8012ebe:	d512      	bpl.n	8012ee6 <__swsetup_r+0x7a>
 8012ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ec2:	b141      	cbz	r1, 8012ed6 <__swsetup_r+0x6a>
 8012ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ec8:	4299      	cmp	r1, r3
 8012eca:	d002      	beq.n	8012ed2 <__swsetup_r+0x66>
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f001 fff9 	bl	8014ec4 <_free_r>
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012edc:	81a3      	strh	r3, [r4, #12]
 8012ede:	2300      	movs	r3, #0
 8012ee0:	6063      	str	r3, [r4, #4]
 8012ee2:	6923      	ldr	r3, [r4, #16]
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	89a3      	ldrh	r3, [r4, #12]
 8012ee8:	f043 0308 	orr.w	r3, r3, #8
 8012eec:	81a3      	strh	r3, [r4, #12]
 8012eee:	6923      	ldr	r3, [r4, #16]
 8012ef0:	b94b      	cbnz	r3, 8012f06 <__swsetup_r+0x9a>
 8012ef2:	89a3      	ldrh	r3, [r4, #12]
 8012ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012efc:	d003      	beq.n	8012f06 <__swsetup_r+0x9a>
 8012efe:	4621      	mov	r1, r4
 8012f00:	4630      	mov	r0, r6
 8012f02:	f001 fb6d 	bl	80145e0 <__smakebuf_r>
 8012f06:	89a2      	ldrh	r2, [r4, #12]
 8012f08:	f012 0301 	ands.w	r3, r2, #1
 8012f0c:	d00c      	beq.n	8012f28 <__swsetup_r+0xbc>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	60a3      	str	r3, [r4, #8]
 8012f12:	6963      	ldr	r3, [r4, #20]
 8012f14:	425b      	negs	r3, r3
 8012f16:	61a3      	str	r3, [r4, #24]
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	b953      	cbnz	r3, 8012f32 <__swsetup_r+0xc6>
 8012f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012f24:	d1ba      	bne.n	8012e9c <__swsetup_r+0x30>
 8012f26:	bd70      	pop	{r4, r5, r6, pc}
 8012f28:	0792      	lsls	r2, r2, #30
 8012f2a:	bf58      	it	pl
 8012f2c:	6963      	ldrpl	r3, [r4, #20]
 8012f2e:	60a3      	str	r3, [r4, #8]
 8012f30:	e7f2      	b.n	8012f18 <__swsetup_r+0xac>
 8012f32:	2000      	movs	r0, #0
 8012f34:	e7f7      	b.n	8012f26 <__swsetup_r+0xba>
 8012f36:	bf00      	nop
 8012f38:	2000000c 	.word	0x2000000c
 8012f3c:	080167d0 	.word	0x080167d0
 8012f40:	080167f0 	.word	0x080167f0
 8012f44:	080167b0 	.word	0x080167b0

08012f48 <_close_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4c06      	ldr	r4, [pc, #24]	; (8012f64 <_close_r+0x1c>)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4605      	mov	r5, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	6023      	str	r3, [r4, #0]
 8012f54:	f7f1 fccb 	bl	80048ee <_close>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	d102      	bne.n	8012f62 <_close_r+0x1a>
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	b103      	cbz	r3, 8012f62 <_close_r+0x1a>
 8012f60:	602b      	str	r3, [r5, #0]
 8012f62:	bd38      	pop	{r3, r4, r5, pc}
 8012f64:	2000c680 	.word	0x2000c680

08012f68 <quorem>:
 8012f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	6903      	ldr	r3, [r0, #16]
 8012f6e:	690c      	ldr	r4, [r1, #16]
 8012f70:	42a3      	cmp	r3, r4
 8012f72:	4680      	mov	r8, r0
 8012f74:	f2c0 8082 	blt.w	801307c <quorem+0x114>
 8012f78:	3c01      	subs	r4, #1
 8012f7a:	f101 0714 	add.w	r7, r1, #20
 8012f7e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012f82:	f100 0614 	add.w	r6, r0, #20
 8012f86:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012f8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012f8e:	eb06 030c 	add.w	r3, r6, ip
 8012f92:	3501      	adds	r5, #1
 8012f94:	eb07 090c 	add.w	r9, r7, ip
 8012f98:	9301      	str	r3, [sp, #4]
 8012f9a:	fbb0 f5f5 	udiv	r5, r0, r5
 8012f9e:	b395      	cbz	r5, 8013006 <quorem+0x9e>
 8012fa0:	f04f 0a00 	mov.w	sl, #0
 8012fa4:	4638      	mov	r0, r7
 8012fa6:	46b6      	mov	lr, r6
 8012fa8:	46d3      	mov	fp, sl
 8012faa:	f850 2b04 	ldr.w	r2, [r0], #4
 8012fae:	b293      	uxth	r3, r2
 8012fb0:	fb05 a303 	mla	r3, r5, r3, sl
 8012fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	ebab 0303 	sub.w	r3, fp, r3
 8012fbe:	0c12      	lsrs	r2, r2, #16
 8012fc0:	f8de b000 	ldr.w	fp, [lr]
 8012fc4:	fb05 a202 	mla	r2, r5, r2, sl
 8012fc8:	fa13 f38b 	uxtah	r3, r3, fp
 8012fcc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012fd0:	fa1f fb82 	uxth.w	fp, r2
 8012fd4:	f8de 2000 	ldr.w	r2, [lr]
 8012fd8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012fe6:	4581      	cmp	r9, r0
 8012fe8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012fec:	f84e 3b04 	str.w	r3, [lr], #4
 8012ff0:	d2db      	bcs.n	8012faa <quorem+0x42>
 8012ff2:	f856 300c 	ldr.w	r3, [r6, ip]
 8012ff6:	b933      	cbnz	r3, 8013006 <quorem+0x9e>
 8012ff8:	9b01      	ldr	r3, [sp, #4]
 8012ffa:	3b04      	subs	r3, #4
 8012ffc:	429e      	cmp	r6, r3
 8012ffe:	461a      	mov	r2, r3
 8013000:	d330      	bcc.n	8013064 <quorem+0xfc>
 8013002:	f8c8 4010 	str.w	r4, [r8, #16]
 8013006:	4640      	mov	r0, r8
 8013008:	f001 fda2 	bl	8014b50 <__mcmp>
 801300c:	2800      	cmp	r0, #0
 801300e:	db25      	blt.n	801305c <quorem+0xf4>
 8013010:	3501      	adds	r5, #1
 8013012:	4630      	mov	r0, r6
 8013014:	f04f 0c00 	mov.w	ip, #0
 8013018:	f857 2b04 	ldr.w	r2, [r7], #4
 801301c:	f8d0 e000 	ldr.w	lr, [r0]
 8013020:	b293      	uxth	r3, r2
 8013022:	ebac 0303 	sub.w	r3, ip, r3
 8013026:	0c12      	lsrs	r2, r2, #16
 8013028:	fa13 f38e 	uxtah	r3, r3, lr
 801302c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013030:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013034:	b29b      	uxth	r3, r3
 8013036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801303a:	45b9      	cmp	r9, r7
 801303c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013040:	f840 3b04 	str.w	r3, [r0], #4
 8013044:	d2e8      	bcs.n	8013018 <quorem+0xb0>
 8013046:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801304a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801304e:	b92a      	cbnz	r2, 801305c <quorem+0xf4>
 8013050:	3b04      	subs	r3, #4
 8013052:	429e      	cmp	r6, r3
 8013054:	461a      	mov	r2, r3
 8013056:	d30b      	bcc.n	8013070 <quorem+0x108>
 8013058:	f8c8 4010 	str.w	r4, [r8, #16]
 801305c:	4628      	mov	r0, r5
 801305e:	b003      	add	sp, #12
 8013060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013064:	6812      	ldr	r2, [r2, #0]
 8013066:	3b04      	subs	r3, #4
 8013068:	2a00      	cmp	r2, #0
 801306a:	d1ca      	bne.n	8013002 <quorem+0x9a>
 801306c:	3c01      	subs	r4, #1
 801306e:	e7c5      	b.n	8012ffc <quorem+0x94>
 8013070:	6812      	ldr	r2, [r2, #0]
 8013072:	3b04      	subs	r3, #4
 8013074:	2a00      	cmp	r2, #0
 8013076:	d1ef      	bne.n	8013058 <quorem+0xf0>
 8013078:	3c01      	subs	r4, #1
 801307a:	e7ea      	b.n	8013052 <quorem+0xea>
 801307c:	2000      	movs	r0, #0
 801307e:	e7ee      	b.n	801305e <quorem+0xf6>

08013080 <_dtoa_r>:
 8013080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013084:	ec57 6b10 	vmov	r6, r7, d0
 8013088:	b097      	sub	sp, #92	; 0x5c
 801308a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801308c:	9106      	str	r1, [sp, #24]
 801308e:	4604      	mov	r4, r0
 8013090:	920b      	str	r2, [sp, #44]	; 0x2c
 8013092:	9312      	str	r3, [sp, #72]	; 0x48
 8013094:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013098:	e9cd 6700 	strd	r6, r7, [sp]
 801309c:	b93d      	cbnz	r5, 80130ae <_dtoa_r+0x2e>
 801309e:	2010      	movs	r0, #16
 80130a0:	f001 fade 	bl	8014660 <malloc>
 80130a4:	6260      	str	r0, [r4, #36]	; 0x24
 80130a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80130aa:	6005      	str	r5, [r0, #0]
 80130ac:	60c5      	str	r5, [r0, #12]
 80130ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130b0:	6819      	ldr	r1, [r3, #0]
 80130b2:	b151      	cbz	r1, 80130ca <_dtoa_r+0x4a>
 80130b4:	685a      	ldr	r2, [r3, #4]
 80130b6:	604a      	str	r2, [r1, #4]
 80130b8:	2301      	movs	r3, #1
 80130ba:	4093      	lsls	r3, r2
 80130bc:	608b      	str	r3, [r1, #8]
 80130be:	4620      	mov	r0, r4
 80130c0:	f001 fb27 	bl	8014712 <_Bfree>
 80130c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130c6:	2200      	movs	r2, #0
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	1e3b      	subs	r3, r7, #0
 80130cc:	bfbb      	ittet	lt
 80130ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80130d2:	9301      	strlt	r3, [sp, #4]
 80130d4:	2300      	movge	r3, #0
 80130d6:	2201      	movlt	r2, #1
 80130d8:	bfac      	ite	ge
 80130da:	f8c8 3000 	strge.w	r3, [r8]
 80130de:	f8c8 2000 	strlt.w	r2, [r8]
 80130e2:	4baf      	ldr	r3, [pc, #700]	; (80133a0 <_dtoa_r+0x320>)
 80130e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130e8:	ea33 0308 	bics.w	r3, r3, r8
 80130ec:	d114      	bne.n	8013118 <_dtoa_r+0x98>
 80130ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80130f4:	6013      	str	r3, [r2, #0]
 80130f6:	9b00      	ldr	r3, [sp, #0]
 80130f8:	b923      	cbnz	r3, 8013104 <_dtoa_r+0x84>
 80130fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80130fe:	2800      	cmp	r0, #0
 8013100:	f000 8542 	beq.w	8013b88 <_dtoa_r+0xb08>
 8013104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013106:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80133b4 <_dtoa_r+0x334>
 801310a:	2b00      	cmp	r3, #0
 801310c:	f000 8544 	beq.w	8013b98 <_dtoa_r+0xb18>
 8013110:	f10b 0303 	add.w	r3, fp, #3
 8013114:	f000 bd3e 	b.w	8013b94 <_dtoa_r+0xb14>
 8013118:	e9dd 6700 	ldrd	r6, r7, [sp]
 801311c:	2200      	movs	r2, #0
 801311e:	2300      	movs	r3, #0
 8013120:	4630      	mov	r0, r6
 8013122:	4639      	mov	r1, r7
 8013124:	f7ed fce8 	bl	8000af8 <__aeabi_dcmpeq>
 8013128:	4681      	mov	r9, r0
 801312a:	b168      	cbz	r0, 8013148 <_dtoa_r+0xc8>
 801312c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801312e:	2301      	movs	r3, #1
 8013130:	6013      	str	r3, [r2, #0]
 8013132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 8524 	beq.w	8013b82 <_dtoa_r+0xb02>
 801313a:	4b9a      	ldr	r3, [pc, #616]	; (80133a4 <_dtoa_r+0x324>)
 801313c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801313e:	f103 3bff 	add.w	fp, r3, #4294967295
 8013142:	6013      	str	r3, [r2, #0]
 8013144:	f000 bd28 	b.w	8013b98 <_dtoa_r+0xb18>
 8013148:	aa14      	add	r2, sp, #80	; 0x50
 801314a:	a915      	add	r1, sp, #84	; 0x54
 801314c:	ec47 6b10 	vmov	d0, r6, r7
 8013150:	4620      	mov	r0, r4
 8013152:	f001 fdeb 	bl	8014d2c <__d2b>
 8013156:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801315a:	9004      	str	r0, [sp, #16]
 801315c:	2d00      	cmp	r5, #0
 801315e:	d07c      	beq.n	801325a <_dtoa_r+0x1da>
 8013160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013164:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013168:	46b2      	mov	sl, r6
 801316a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801316e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013172:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013176:	2200      	movs	r2, #0
 8013178:	4b8b      	ldr	r3, [pc, #556]	; (80133a8 <_dtoa_r+0x328>)
 801317a:	4650      	mov	r0, sl
 801317c:	4659      	mov	r1, fp
 801317e:	f7ed f89b 	bl	80002b8 <__aeabi_dsub>
 8013182:	a381      	add	r3, pc, #516	; (adr r3, 8013388 <_dtoa_r+0x308>)
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	f7ed fa4e 	bl	8000628 <__aeabi_dmul>
 801318c:	a380      	add	r3, pc, #512	; (adr r3, 8013390 <_dtoa_r+0x310>)
 801318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013192:	f7ed f893 	bl	80002bc <__adddf3>
 8013196:	4606      	mov	r6, r0
 8013198:	4628      	mov	r0, r5
 801319a:	460f      	mov	r7, r1
 801319c:	f7ed f9da 	bl	8000554 <__aeabi_i2d>
 80131a0:	a37d      	add	r3, pc, #500	; (adr r3, 8013398 <_dtoa_r+0x318>)
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	f7ed fa3f 	bl	8000628 <__aeabi_dmul>
 80131aa:	4602      	mov	r2, r0
 80131ac:	460b      	mov	r3, r1
 80131ae:	4630      	mov	r0, r6
 80131b0:	4639      	mov	r1, r7
 80131b2:	f7ed f883 	bl	80002bc <__adddf3>
 80131b6:	4606      	mov	r6, r0
 80131b8:	460f      	mov	r7, r1
 80131ba:	f7ed fce5 	bl	8000b88 <__aeabi_d2iz>
 80131be:	2200      	movs	r2, #0
 80131c0:	4682      	mov	sl, r0
 80131c2:	2300      	movs	r3, #0
 80131c4:	4630      	mov	r0, r6
 80131c6:	4639      	mov	r1, r7
 80131c8:	f7ed fca0 	bl	8000b0c <__aeabi_dcmplt>
 80131cc:	b148      	cbz	r0, 80131e2 <_dtoa_r+0x162>
 80131ce:	4650      	mov	r0, sl
 80131d0:	f7ed f9c0 	bl	8000554 <__aeabi_i2d>
 80131d4:	4632      	mov	r2, r6
 80131d6:	463b      	mov	r3, r7
 80131d8:	f7ed fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80131dc:	b908      	cbnz	r0, 80131e2 <_dtoa_r+0x162>
 80131de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131e2:	f1ba 0f16 	cmp.w	sl, #22
 80131e6:	d859      	bhi.n	801329c <_dtoa_r+0x21c>
 80131e8:	4970      	ldr	r1, [pc, #448]	; (80133ac <_dtoa_r+0x32c>)
 80131ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80131ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131f6:	f7ed fca7 	bl	8000b48 <__aeabi_dcmpgt>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d050      	beq.n	80132a0 <_dtoa_r+0x220>
 80131fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013202:	2300      	movs	r3, #0
 8013204:	930f      	str	r3, [sp, #60]	; 0x3c
 8013206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013208:	1b5d      	subs	r5, r3, r5
 801320a:	f1b5 0801 	subs.w	r8, r5, #1
 801320e:	bf49      	itett	mi
 8013210:	f1c5 0301 	rsbmi	r3, r5, #1
 8013214:	2300      	movpl	r3, #0
 8013216:	9305      	strmi	r3, [sp, #20]
 8013218:	f04f 0800 	movmi.w	r8, #0
 801321c:	bf58      	it	pl
 801321e:	9305      	strpl	r3, [sp, #20]
 8013220:	f1ba 0f00 	cmp.w	sl, #0
 8013224:	db3e      	blt.n	80132a4 <_dtoa_r+0x224>
 8013226:	2300      	movs	r3, #0
 8013228:	44d0      	add	r8, sl
 801322a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801322e:	9307      	str	r3, [sp, #28]
 8013230:	9b06      	ldr	r3, [sp, #24]
 8013232:	2b09      	cmp	r3, #9
 8013234:	f200 8090 	bhi.w	8013358 <_dtoa_r+0x2d8>
 8013238:	2b05      	cmp	r3, #5
 801323a:	bfc4      	itt	gt
 801323c:	3b04      	subgt	r3, #4
 801323e:	9306      	strgt	r3, [sp, #24]
 8013240:	9b06      	ldr	r3, [sp, #24]
 8013242:	f1a3 0302 	sub.w	r3, r3, #2
 8013246:	bfcc      	ite	gt
 8013248:	2500      	movgt	r5, #0
 801324a:	2501      	movle	r5, #1
 801324c:	2b03      	cmp	r3, #3
 801324e:	f200 808f 	bhi.w	8013370 <_dtoa_r+0x2f0>
 8013252:	e8df f003 	tbb	[pc, r3]
 8013256:	7f7d      	.short	0x7f7d
 8013258:	7131      	.short	0x7131
 801325a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801325e:	441d      	add	r5, r3
 8013260:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013264:	2820      	cmp	r0, #32
 8013266:	dd13      	ble.n	8013290 <_dtoa_r+0x210>
 8013268:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	fa08 f800 	lsl.w	r8, r8, r0
 8013272:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013276:	fa23 f000 	lsr.w	r0, r3, r0
 801327a:	ea48 0000 	orr.w	r0, r8, r0
 801327e:	f7ed f959 	bl	8000534 <__aeabi_ui2d>
 8013282:	2301      	movs	r3, #1
 8013284:	4682      	mov	sl, r0
 8013286:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801328a:	3d01      	subs	r5, #1
 801328c:	9313      	str	r3, [sp, #76]	; 0x4c
 801328e:	e772      	b.n	8013176 <_dtoa_r+0xf6>
 8013290:	9b00      	ldr	r3, [sp, #0]
 8013292:	f1c0 0020 	rsb	r0, r0, #32
 8013296:	fa03 f000 	lsl.w	r0, r3, r0
 801329a:	e7f0      	b.n	801327e <_dtoa_r+0x1fe>
 801329c:	2301      	movs	r3, #1
 801329e:	e7b1      	b.n	8013204 <_dtoa_r+0x184>
 80132a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80132a2:	e7b0      	b.n	8013206 <_dtoa_r+0x186>
 80132a4:	9b05      	ldr	r3, [sp, #20]
 80132a6:	eba3 030a 	sub.w	r3, r3, sl
 80132aa:	9305      	str	r3, [sp, #20]
 80132ac:	f1ca 0300 	rsb	r3, sl, #0
 80132b0:	9307      	str	r3, [sp, #28]
 80132b2:	2300      	movs	r3, #0
 80132b4:	930e      	str	r3, [sp, #56]	; 0x38
 80132b6:	e7bb      	b.n	8013230 <_dtoa_r+0x1b0>
 80132b8:	2301      	movs	r3, #1
 80132ba:	930a      	str	r3, [sp, #40]	; 0x28
 80132bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132be:	2b00      	cmp	r3, #0
 80132c0:	dd59      	ble.n	8013376 <_dtoa_r+0x2f6>
 80132c2:	9302      	str	r3, [sp, #8]
 80132c4:	4699      	mov	r9, r3
 80132c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132c8:	2200      	movs	r2, #0
 80132ca:	6072      	str	r2, [r6, #4]
 80132cc:	2204      	movs	r2, #4
 80132ce:	f102 0014 	add.w	r0, r2, #20
 80132d2:	4298      	cmp	r0, r3
 80132d4:	6871      	ldr	r1, [r6, #4]
 80132d6:	d953      	bls.n	8013380 <_dtoa_r+0x300>
 80132d8:	4620      	mov	r0, r4
 80132da:	f001 f9e6 	bl	80146aa <_Balloc>
 80132de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132e0:	6030      	str	r0, [r6, #0]
 80132e2:	f1b9 0f0e 	cmp.w	r9, #14
 80132e6:	f8d3 b000 	ldr.w	fp, [r3]
 80132ea:	f200 80e6 	bhi.w	80134ba <_dtoa_r+0x43a>
 80132ee:	2d00      	cmp	r5, #0
 80132f0:	f000 80e3 	beq.w	80134ba <_dtoa_r+0x43a>
 80132f4:	ed9d 7b00 	vldr	d7, [sp]
 80132f8:	f1ba 0f00 	cmp.w	sl, #0
 80132fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013300:	dd74      	ble.n	80133ec <_dtoa_r+0x36c>
 8013302:	4a2a      	ldr	r2, [pc, #168]	; (80133ac <_dtoa_r+0x32c>)
 8013304:	f00a 030f 	and.w	r3, sl, #15
 8013308:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801330c:	ed93 7b00 	vldr	d7, [r3]
 8013310:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013314:	06f0      	lsls	r0, r6, #27
 8013316:	ed8d 7b08 	vstr	d7, [sp, #32]
 801331a:	d565      	bpl.n	80133e8 <_dtoa_r+0x368>
 801331c:	4b24      	ldr	r3, [pc, #144]	; (80133b0 <_dtoa_r+0x330>)
 801331e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013322:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013326:	f7ed faa9 	bl	800087c <__aeabi_ddiv>
 801332a:	e9cd 0100 	strd	r0, r1, [sp]
 801332e:	f006 060f 	and.w	r6, r6, #15
 8013332:	2503      	movs	r5, #3
 8013334:	4f1e      	ldr	r7, [pc, #120]	; (80133b0 <_dtoa_r+0x330>)
 8013336:	e04c      	b.n	80133d2 <_dtoa_r+0x352>
 8013338:	2301      	movs	r3, #1
 801333a:	930a      	str	r3, [sp, #40]	; 0x28
 801333c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801333e:	4453      	add	r3, sl
 8013340:	f103 0901 	add.w	r9, r3, #1
 8013344:	9302      	str	r3, [sp, #8]
 8013346:	464b      	mov	r3, r9
 8013348:	2b01      	cmp	r3, #1
 801334a:	bfb8      	it	lt
 801334c:	2301      	movlt	r3, #1
 801334e:	e7ba      	b.n	80132c6 <_dtoa_r+0x246>
 8013350:	2300      	movs	r3, #0
 8013352:	e7b2      	b.n	80132ba <_dtoa_r+0x23a>
 8013354:	2300      	movs	r3, #0
 8013356:	e7f0      	b.n	801333a <_dtoa_r+0x2ba>
 8013358:	2501      	movs	r5, #1
 801335a:	2300      	movs	r3, #0
 801335c:	9306      	str	r3, [sp, #24]
 801335e:	950a      	str	r5, [sp, #40]	; 0x28
 8013360:	f04f 33ff 	mov.w	r3, #4294967295
 8013364:	9302      	str	r3, [sp, #8]
 8013366:	4699      	mov	r9, r3
 8013368:	2200      	movs	r2, #0
 801336a:	2312      	movs	r3, #18
 801336c:	920b      	str	r2, [sp, #44]	; 0x2c
 801336e:	e7aa      	b.n	80132c6 <_dtoa_r+0x246>
 8013370:	2301      	movs	r3, #1
 8013372:	930a      	str	r3, [sp, #40]	; 0x28
 8013374:	e7f4      	b.n	8013360 <_dtoa_r+0x2e0>
 8013376:	2301      	movs	r3, #1
 8013378:	9302      	str	r3, [sp, #8]
 801337a:	4699      	mov	r9, r3
 801337c:	461a      	mov	r2, r3
 801337e:	e7f5      	b.n	801336c <_dtoa_r+0x2ec>
 8013380:	3101      	adds	r1, #1
 8013382:	6071      	str	r1, [r6, #4]
 8013384:	0052      	lsls	r2, r2, #1
 8013386:	e7a2      	b.n	80132ce <_dtoa_r+0x24e>
 8013388:	636f4361 	.word	0x636f4361
 801338c:	3fd287a7 	.word	0x3fd287a7
 8013390:	8b60c8b3 	.word	0x8b60c8b3
 8013394:	3fc68a28 	.word	0x3fc68a28
 8013398:	509f79fb 	.word	0x509f79fb
 801339c:	3fd34413 	.word	0x3fd34413
 80133a0:	7ff00000 	.word	0x7ff00000
 80133a4:	08016944 	.word	0x08016944
 80133a8:	3ff80000 	.word	0x3ff80000
 80133ac:	08016848 	.word	0x08016848
 80133b0:	08016820 	.word	0x08016820
 80133b4:	080167a9 	.word	0x080167a9
 80133b8:	07f1      	lsls	r1, r6, #31
 80133ba:	d508      	bpl.n	80133ce <_dtoa_r+0x34e>
 80133bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80133c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133c4:	f7ed f930 	bl	8000628 <__aeabi_dmul>
 80133c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80133cc:	3501      	adds	r5, #1
 80133ce:	1076      	asrs	r6, r6, #1
 80133d0:	3708      	adds	r7, #8
 80133d2:	2e00      	cmp	r6, #0
 80133d4:	d1f0      	bne.n	80133b8 <_dtoa_r+0x338>
 80133d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80133da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133de:	f7ed fa4d 	bl	800087c <__aeabi_ddiv>
 80133e2:	e9cd 0100 	strd	r0, r1, [sp]
 80133e6:	e01a      	b.n	801341e <_dtoa_r+0x39e>
 80133e8:	2502      	movs	r5, #2
 80133ea:	e7a3      	b.n	8013334 <_dtoa_r+0x2b4>
 80133ec:	f000 80a0 	beq.w	8013530 <_dtoa_r+0x4b0>
 80133f0:	f1ca 0600 	rsb	r6, sl, #0
 80133f4:	4b9f      	ldr	r3, [pc, #636]	; (8013674 <_dtoa_r+0x5f4>)
 80133f6:	4fa0      	ldr	r7, [pc, #640]	; (8013678 <_dtoa_r+0x5f8>)
 80133f8:	f006 020f 	and.w	r2, r6, #15
 80133fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013404:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013408:	f7ed f90e 	bl	8000628 <__aeabi_dmul>
 801340c:	e9cd 0100 	strd	r0, r1, [sp]
 8013410:	1136      	asrs	r6, r6, #4
 8013412:	2300      	movs	r3, #0
 8013414:	2502      	movs	r5, #2
 8013416:	2e00      	cmp	r6, #0
 8013418:	d17f      	bne.n	801351a <_dtoa_r+0x49a>
 801341a:	2b00      	cmp	r3, #0
 801341c:	d1e1      	bne.n	80133e2 <_dtoa_r+0x362>
 801341e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 8087 	beq.w	8013534 <_dtoa_r+0x4b4>
 8013426:	e9dd 6700 	ldrd	r6, r7, [sp]
 801342a:	2200      	movs	r2, #0
 801342c:	4b93      	ldr	r3, [pc, #588]	; (801367c <_dtoa_r+0x5fc>)
 801342e:	4630      	mov	r0, r6
 8013430:	4639      	mov	r1, r7
 8013432:	f7ed fb6b 	bl	8000b0c <__aeabi_dcmplt>
 8013436:	2800      	cmp	r0, #0
 8013438:	d07c      	beq.n	8013534 <_dtoa_r+0x4b4>
 801343a:	f1b9 0f00 	cmp.w	r9, #0
 801343e:	d079      	beq.n	8013534 <_dtoa_r+0x4b4>
 8013440:	9b02      	ldr	r3, [sp, #8]
 8013442:	2b00      	cmp	r3, #0
 8013444:	dd35      	ble.n	80134b2 <_dtoa_r+0x432>
 8013446:	f10a 33ff 	add.w	r3, sl, #4294967295
 801344a:	9308      	str	r3, [sp, #32]
 801344c:	4639      	mov	r1, r7
 801344e:	2200      	movs	r2, #0
 8013450:	4b8b      	ldr	r3, [pc, #556]	; (8013680 <_dtoa_r+0x600>)
 8013452:	4630      	mov	r0, r6
 8013454:	f7ed f8e8 	bl	8000628 <__aeabi_dmul>
 8013458:	e9cd 0100 	strd	r0, r1, [sp]
 801345c:	9f02      	ldr	r7, [sp, #8]
 801345e:	3501      	adds	r5, #1
 8013460:	4628      	mov	r0, r5
 8013462:	f7ed f877 	bl	8000554 <__aeabi_i2d>
 8013466:	e9dd 2300 	ldrd	r2, r3, [sp]
 801346a:	f7ed f8dd 	bl	8000628 <__aeabi_dmul>
 801346e:	2200      	movs	r2, #0
 8013470:	4b84      	ldr	r3, [pc, #528]	; (8013684 <_dtoa_r+0x604>)
 8013472:	f7ec ff23 	bl	80002bc <__adddf3>
 8013476:	4605      	mov	r5, r0
 8013478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801347c:	2f00      	cmp	r7, #0
 801347e:	d15d      	bne.n	801353c <_dtoa_r+0x4bc>
 8013480:	2200      	movs	r2, #0
 8013482:	4b81      	ldr	r3, [pc, #516]	; (8013688 <_dtoa_r+0x608>)
 8013484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013488:	f7ec ff16 	bl	80002b8 <__aeabi_dsub>
 801348c:	462a      	mov	r2, r5
 801348e:	4633      	mov	r3, r6
 8013490:	e9cd 0100 	strd	r0, r1, [sp]
 8013494:	f7ed fb58 	bl	8000b48 <__aeabi_dcmpgt>
 8013498:	2800      	cmp	r0, #0
 801349a:	f040 8288 	bne.w	80139ae <_dtoa_r+0x92e>
 801349e:	462a      	mov	r2, r5
 80134a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80134a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134a8:	f7ed fb30 	bl	8000b0c <__aeabi_dcmplt>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	f040 827c 	bne.w	80139aa <_dtoa_r+0x92a>
 80134b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80134b6:	e9cd 2300 	strd	r2, r3, [sp]
 80134ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f2c0 8150 	blt.w	8013762 <_dtoa_r+0x6e2>
 80134c2:	f1ba 0f0e 	cmp.w	sl, #14
 80134c6:	f300 814c 	bgt.w	8013762 <_dtoa_r+0x6e2>
 80134ca:	4b6a      	ldr	r3, [pc, #424]	; (8013674 <_dtoa_r+0x5f4>)
 80134cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80134d0:	ed93 7b00 	vldr	d7, [r3]
 80134d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134dc:	f280 80d8 	bge.w	8013690 <_dtoa_r+0x610>
 80134e0:	f1b9 0f00 	cmp.w	r9, #0
 80134e4:	f300 80d4 	bgt.w	8013690 <_dtoa_r+0x610>
 80134e8:	f040 825e 	bne.w	80139a8 <_dtoa_r+0x928>
 80134ec:	2200      	movs	r2, #0
 80134ee:	4b66      	ldr	r3, [pc, #408]	; (8013688 <_dtoa_r+0x608>)
 80134f0:	ec51 0b17 	vmov	r0, r1, d7
 80134f4:	f7ed f898 	bl	8000628 <__aeabi_dmul>
 80134f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134fc:	f7ed fb1a 	bl	8000b34 <__aeabi_dcmpge>
 8013500:	464f      	mov	r7, r9
 8013502:	464e      	mov	r6, r9
 8013504:	2800      	cmp	r0, #0
 8013506:	f040 8234 	bne.w	8013972 <_dtoa_r+0x8f2>
 801350a:	2331      	movs	r3, #49	; 0x31
 801350c:	f10b 0501 	add.w	r5, fp, #1
 8013510:	f88b 3000 	strb.w	r3, [fp]
 8013514:	f10a 0a01 	add.w	sl, sl, #1
 8013518:	e22f      	b.n	801397a <_dtoa_r+0x8fa>
 801351a:	07f2      	lsls	r2, r6, #31
 801351c:	d505      	bpl.n	801352a <_dtoa_r+0x4aa>
 801351e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013522:	f7ed f881 	bl	8000628 <__aeabi_dmul>
 8013526:	3501      	adds	r5, #1
 8013528:	2301      	movs	r3, #1
 801352a:	1076      	asrs	r6, r6, #1
 801352c:	3708      	adds	r7, #8
 801352e:	e772      	b.n	8013416 <_dtoa_r+0x396>
 8013530:	2502      	movs	r5, #2
 8013532:	e774      	b.n	801341e <_dtoa_r+0x39e>
 8013534:	f8cd a020 	str.w	sl, [sp, #32]
 8013538:	464f      	mov	r7, r9
 801353a:	e791      	b.n	8013460 <_dtoa_r+0x3e0>
 801353c:	4b4d      	ldr	r3, [pc, #308]	; (8013674 <_dtoa_r+0x5f4>)
 801353e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013542:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013548:	2b00      	cmp	r3, #0
 801354a:	d047      	beq.n	80135dc <_dtoa_r+0x55c>
 801354c:	4602      	mov	r2, r0
 801354e:	460b      	mov	r3, r1
 8013550:	2000      	movs	r0, #0
 8013552:	494e      	ldr	r1, [pc, #312]	; (801368c <_dtoa_r+0x60c>)
 8013554:	f7ed f992 	bl	800087c <__aeabi_ddiv>
 8013558:	462a      	mov	r2, r5
 801355a:	4633      	mov	r3, r6
 801355c:	f7ec feac 	bl	80002b8 <__aeabi_dsub>
 8013560:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013564:	465d      	mov	r5, fp
 8013566:	e9dd 0100 	ldrd	r0, r1, [sp]
 801356a:	f7ed fb0d 	bl	8000b88 <__aeabi_d2iz>
 801356e:	4606      	mov	r6, r0
 8013570:	f7ec fff0 	bl	8000554 <__aeabi_i2d>
 8013574:	4602      	mov	r2, r0
 8013576:	460b      	mov	r3, r1
 8013578:	e9dd 0100 	ldrd	r0, r1, [sp]
 801357c:	f7ec fe9c 	bl	80002b8 <__aeabi_dsub>
 8013580:	3630      	adds	r6, #48	; 0x30
 8013582:	f805 6b01 	strb.w	r6, [r5], #1
 8013586:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801358a:	e9cd 0100 	strd	r0, r1, [sp]
 801358e:	f7ed fabd 	bl	8000b0c <__aeabi_dcmplt>
 8013592:	2800      	cmp	r0, #0
 8013594:	d163      	bne.n	801365e <_dtoa_r+0x5de>
 8013596:	e9dd 2300 	ldrd	r2, r3, [sp]
 801359a:	2000      	movs	r0, #0
 801359c:	4937      	ldr	r1, [pc, #220]	; (801367c <_dtoa_r+0x5fc>)
 801359e:	f7ec fe8b 	bl	80002b8 <__aeabi_dsub>
 80135a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80135a6:	f7ed fab1 	bl	8000b0c <__aeabi_dcmplt>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	f040 80b7 	bne.w	801371e <_dtoa_r+0x69e>
 80135b0:	eba5 030b 	sub.w	r3, r5, fp
 80135b4:	429f      	cmp	r7, r3
 80135b6:	f77f af7c 	ble.w	80134b2 <_dtoa_r+0x432>
 80135ba:	2200      	movs	r2, #0
 80135bc:	4b30      	ldr	r3, [pc, #192]	; (8013680 <_dtoa_r+0x600>)
 80135be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80135c2:	f7ed f831 	bl	8000628 <__aeabi_dmul>
 80135c6:	2200      	movs	r2, #0
 80135c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80135cc:	4b2c      	ldr	r3, [pc, #176]	; (8013680 <_dtoa_r+0x600>)
 80135ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135d2:	f7ed f829 	bl	8000628 <__aeabi_dmul>
 80135d6:	e9cd 0100 	strd	r0, r1, [sp]
 80135da:	e7c4      	b.n	8013566 <_dtoa_r+0x4e6>
 80135dc:	462a      	mov	r2, r5
 80135de:	4633      	mov	r3, r6
 80135e0:	f7ed f822 	bl	8000628 <__aeabi_dmul>
 80135e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80135e8:	eb0b 0507 	add.w	r5, fp, r7
 80135ec:	465e      	mov	r6, fp
 80135ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135f2:	f7ed fac9 	bl	8000b88 <__aeabi_d2iz>
 80135f6:	4607      	mov	r7, r0
 80135f8:	f7ec ffac 	bl	8000554 <__aeabi_i2d>
 80135fc:	3730      	adds	r7, #48	; 0x30
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013606:	f7ec fe57 	bl	80002b8 <__aeabi_dsub>
 801360a:	f806 7b01 	strb.w	r7, [r6], #1
 801360e:	42ae      	cmp	r6, r5
 8013610:	e9cd 0100 	strd	r0, r1, [sp]
 8013614:	f04f 0200 	mov.w	r2, #0
 8013618:	d126      	bne.n	8013668 <_dtoa_r+0x5e8>
 801361a:	4b1c      	ldr	r3, [pc, #112]	; (801368c <_dtoa_r+0x60c>)
 801361c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013620:	f7ec fe4c 	bl	80002bc <__adddf3>
 8013624:	4602      	mov	r2, r0
 8013626:	460b      	mov	r3, r1
 8013628:	e9dd 0100 	ldrd	r0, r1, [sp]
 801362c:	f7ed fa8c 	bl	8000b48 <__aeabi_dcmpgt>
 8013630:	2800      	cmp	r0, #0
 8013632:	d174      	bne.n	801371e <_dtoa_r+0x69e>
 8013634:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013638:	2000      	movs	r0, #0
 801363a:	4914      	ldr	r1, [pc, #80]	; (801368c <_dtoa_r+0x60c>)
 801363c:	f7ec fe3c 	bl	80002b8 <__aeabi_dsub>
 8013640:	4602      	mov	r2, r0
 8013642:	460b      	mov	r3, r1
 8013644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013648:	f7ed fa60 	bl	8000b0c <__aeabi_dcmplt>
 801364c:	2800      	cmp	r0, #0
 801364e:	f43f af30 	beq.w	80134b2 <_dtoa_r+0x432>
 8013652:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013656:	2b30      	cmp	r3, #48	; 0x30
 8013658:	f105 32ff 	add.w	r2, r5, #4294967295
 801365c:	d002      	beq.n	8013664 <_dtoa_r+0x5e4>
 801365e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013662:	e04a      	b.n	80136fa <_dtoa_r+0x67a>
 8013664:	4615      	mov	r5, r2
 8013666:	e7f4      	b.n	8013652 <_dtoa_r+0x5d2>
 8013668:	4b05      	ldr	r3, [pc, #20]	; (8013680 <_dtoa_r+0x600>)
 801366a:	f7ec ffdd 	bl	8000628 <__aeabi_dmul>
 801366e:	e9cd 0100 	strd	r0, r1, [sp]
 8013672:	e7bc      	b.n	80135ee <_dtoa_r+0x56e>
 8013674:	08016848 	.word	0x08016848
 8013678:	08016820 	.word	0x08016820
 801367c:	3ff00000 	.word	0x3ff00000
 8013680:	40240000 	.word	0x40240000
 8013684:	401c0000 	.word	0x401c0000
 8013688:	40140000 	.word	0x40140000
 801368c:	3fe00000 	.word	0x3fe00000
 8013690:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013694:	465d      	mov	r5, fp
 8013696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801369a:	4630      	mov	r0, r6
 801369c:	4639      	mov	r1, r7
 801369e:	f7ed f8ed 	bl	800087c <__aeabi_ddiv>
 80136a2:	f7ed fa71 	bl	8000b88 <__aeabi_d2iz>
 80136a6:	4680      	mov	r8, r0
 80136a8:	f7ec ff54 	bl	8000554 <__aeabi_i2d>
 80136ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136b0:	f7ec ffba 	bl	8000628 <__aeabi_dmul>
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	4630      	mov	r0, r6
 80136ba:	4639      	mov	r1, r7
 80136bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80136c0:	f7ec fdfa 	bl	80002b8 <__aeabi_dsub>
 80136c4:	f805 6b01 	strb.w	r6, [r5], #1
 80136c8:	eba5 060b 	sub.w	r6, r5, fp
 80136cc:	45b1      	cmp	r9, r6
 80136ce:	4602      	mov	r2, r0
 80136d0:	460b      	mov	r3, r1
 80136d2:	d139      	bne.n	8013748 <_dtoa_r+0x6c8>
 80136d4:	f7ec fdf2 	bl	80002bc <__adddf3>
 80136d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136dc:	4606      	mov	r6, r0
 80136de:	460f      	mov	r7, r1
 80136e0:	f7ed fa32 	bl	8000b48 <__aeabi_dcmpgt>
 80136e4:	b9c8      	cbnz	r0, 801371a <_dtoa_r+0x69a>
 80136e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136ea:	4630      	mov	r0, r6
 80136ec:	4639      	mov	r1, r7
 80136ee:	f7ed fa03 	bl	8000af8 <__aeabi_dcmpeq>
 80136f2:	b110      	cbz	r0, 80136fa <_dtoa_r+0x67a>
 80136f4:	f018 0f01 	tst.w	r8, #1
 80136f8:	d10f      	bne.n	801371a <_dtoa_r+0x69a>
 80136fa:	9904      	ldr	r1, [sp, #16]
 80136fc:	4620      	mov	r0, r4
 80136fe:	f001 f808 	bl	8014712 <_Bfree>
 8013702:	2300      	movs	r3, #0
 8013704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013706:	702b      	strb	r3, [r5, #0]
 8013708:	f10a 0301 	add.w	r3, sl, #1
 801370c:	6013      	str	r3, [r2, #0]
 801370e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 8241 	beq.w	8013b98 <_dtoa_r+0xb18>
 8013716:	601d      	str	r5, [r3, #0]
 8013718:	e23e      	b.n	8013b98 <_dtoa_r+0xb18>
 801371a:	f8cd a020 	str.w	sl, [sp, #32]
 801371e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013722:	2a39      	cmp	r2, #57	; 0x39
 8013724:	f105 33ff 	add.w	r3, r5, #4294967295
 8013728:	d108      	bne.n	801373c <_dtoa_r+0x6bc>
 801372a:	459b      	cmp	fp, r3
 801372c:	d10a      	bne.n	8013744 <_dtoa_r+0x6c4>
 801372e:	9b08      	ldr	r3, [sp, #32]
 8013730:	3301      	adds	r3, #1
 8013732:	9308      	str	r3, [sp, #32]
 8013734:	2330      	movs	r3, #48	; 0x30
 8013736:	f88b 3000 	strb.w	r3, [fp]
 801373a:	465b      	mov	r3, fp
 801373c:	781a      	ldrb	r2, [r3, #0]
 801373e:	3201      	adds	r2, #1
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	e78c      	b.n	801365e <_dtoa_r+0x5de>
 8013744:	461d      	mov	r5, r3
 8013746:	e7ea      	b.n	801371e <_dtoa_r+0x69e>
 8013748:	2200      	movs	r2, #0
 801374a:	4b9b      	ldr	r3, [pc, #620]	; (80139b8 <_dtoa_r+0x938>)
 801374c:	f7ec ff6c 	bl	8000628 <__aeabi_dmul>
 8013750:	2200      	movs	r2, #0
 8013752:	2300      	movs	r3, #0
 8013754:	4606      	mov	r6, r0
 8013756:	460f      	mov	r7, r1
 8013758:	f7ed f9ce 	bl	8000af8 <__aeabi_dcmpeq>
 801375c:	2800      	cmp	r0, #0
 801375e:	d09a      	beq.n	8013696 <_dtoa_r+0x616>
 8013760:	e7cb      	b.n	80136fa <_dtoa_r+0x67a>
 8013762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013764:	2a00      	cmp	r2, #0
 8013766:	f000 808b 	beq.w	8013880 <_dtoa_r+0x800>
 801376a:	9a06      	ldr	r2, [sp, #24]
 801376c:	2a01      	cmp	r2, #1
 801376e:	dc6e      	bgt.n	801384e <_dtoa_r+0x7ce>
 8013770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013772:	2a00      	cmp	r2, #0
 8013774:	d067      	beq.n	8013846 <_dtoa_r+0x7c6>
 8013776:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801377a:	9f07      	ldr	r7, [sp, #28]
 801377c:	9d05      	ldr	r5, [sp, #20]
 801377e:	9a05      	ldr	r2, [sp, #20]
 8013780:	2101      	movs	r1, #1
 8013782:	441a      	add	r2, r3
 8013784:	4620      	mov	r0, r4
 8013786:	9205      	str	r2, [sp, #20]
 8013788:	4498      	add	r8, r3
 801378a:	f001 f8a0 	bl	80148ce <__i2b>
 801378e:	4606      	mov	r6, r0
 8013790:	2d00      	cmp	r5, #0
 8013792:	dd0c      	ble.n	80137ae <_dtoa_r+0x72e>
 8013794:	f1b8 0f00 	cmp.w	r8, #0
 8013798:	dd09      	ble.n	80137ae <_dtoa_r+0x72e>
 801379a:	4545      	cmp	r5, r8
 801379c:	9a05      	ldr	r2, [sp, #20]
 801379e:	462b      	mov	r3, r5
 80137a0:	bfa8      	it	ge
 80137a2:	4643      	movge	r3, r8
 80137a4:	1ad2      	subs	r2, r2, r3
 80137a6:	9205      	str	r2, [sp, #20]
 80137a8:	1aed      	subs	r5, r5, r3
 80137aa:	eba8 0803 	sub.w	r8, r8, r3
 80137ae:	9b07      	ldr	r3, [sp, #28]
 80137b0:	b1eb      	cbz	r3, 80137ee <_dtoa_r+0x76e>
 80137b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d067      	beq.n	8013888 <_dtoa_r+0x808>
 80137b8:	b18f      	cbz	r7, 80137de <_dtoa_r+0x75e>
 80137ba:	4631      	mov	r1, r6
 80137bc:	463a      	mov	r2, r7
 80137be:	4620      	mov	r0, r4
 80137c0:	f001 f924 	bl	8014a0c <__pow5mult>
 80137c4:	9a04      	ldr	r2, [sp, #16]
 80137c6:	4601      	mov	r1, r0
 80137c8:	4606      	mov	r6, r0
 80137ca:	4620      	mov	r0, r4
 80137cc:	f001 f888 	bl	80148e0 <__multiply>
 80137d0:	9904      	ldr	r1, [sp, #16]
 80137d2:	9008      	str	r0, [sp, #32]
 80137d4:	4620      	mov	r0, r4
 80137d6:	f000 ff9c 	bl	8014712 <_Bfree>
 80137da:	9b08      	ldr	r3, [sp, #32]
 80137dc:	9304      	str	r3, [sp, #16]
 80137de:	9b07      	ldr	r3, [sp, #28]
 80137e0:	1bda      	subs	r2, r3, r7
 80137e2:	d004      	beq.n	80137ee <_dtoa_r+0x76e>
 80137e4:	9904      	ldr	r1, [sp, #16]
 80137e6:	4620      	mov	r0, r4
 80137e8:	f001 f910 	bl	8014a0c <__pow5mult>
 80137ec:	9004      	str	r0, [sp, #16]
 80137ee:	2101      	movs	r1, #1
 80137f0:	4620      	mov	r0, r4
 80137f2:	f001 f86c 	bl	80148ce <__i2b>
 80137f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137f8:	4607      	mov	r7, r0
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f000 81d0 	beq.w	8013ba0 <_dtoa_r+0xb20>
 8013800:	461a      	mov	r2, r3
 8013802:	4601      	mov	r1, r0
 8013804:	4620      	mov	r0, r4
 8013806:	f001 f901 	bl	8014a0c <__pow5mult>
 801380a:	9b06      	ldr	r3, [sp, #24]
 801380c:	2b01      	cmp	r3, #1
 801380e:	4607      	mov	r7, r0
 8013810:	dc40      	bgt.n	8013894 <_dtoa_r+0x814>
 8013812:	9b00      	ldr	r3, [sp, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d139      	bne.n	801388c <_dtoa_r+0x80c>
 8013818:	9b01      	ldr	r3, [sp, #4]
 801381a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801381e:	2b00      	cmp	r3, #0
 8013820:	d136      	bne.n	8013890 <_dtoa_r+0x810>
 8013822:	9b01      	ldr	r3, [sp, #4]
 8013824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013828:	0d1b      	lsrs	r3, r3, #20
 801382a:	051b      	lsls	r3, r3, #20
 801382c:	b12b      	cbz	r3, 801383a <_dtoa_r+0x7ba>
 801382e:	9b05      	ldr	r3, [sp, #20]
 8013830:	3301      	adds	r3, #1
 8013832:	9305      	str	r3, [sp, #20]
 8013834:	f108 0801 	add.w	r8, r8, #1
 8013838:	2301      	movs	r3, #1
 801383a:	9307      	str	r3, [sp, #28]
 801383c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801383e:	2b00      	cmp	r3, #0
 8013840:	d12a      	bne.n	8013898 <_dtoa_r+0x818>
 8013842:	2001      	movs	r0, #1
 8013844:	e030      	b.n	80138a8 <_dtoa_r+0x828>
 8013846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013848:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801384c:	e795      	b.n	801377a <_dtoa_r+0x6fa>
 801384e:	9b07      	ldr	r3, [sp, #28]
 8013850:	f109 37ff 	add.w	r7, r9, #4294967295
 8013854:	42bb      	cmp	r3, r7
 8013856:	bfbf      	itttt	lt
 8013858:	9b07      	ldrlt	r3, [sp, #28]
 801385a:	9707      	strlt	r7, [sp, #28]
 801385c:	1afa      	sublt	r2, r7, r3
 801385e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013860:	bfbb      	ittet	lt
 8013862:	189b      	addlt	r3, r3, r2
 8013864:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013866:	1bdf      	subge	r7, r3, r7
 8013868:	2700      	movlt	r7, #0
 801386a:	f1b9 0f00 	cmp.w	r9, #0
 801386e:	bfb5      	itete	lt
 8013870:	9b05      	ldrlt	r3, [sp, #20]
 8013872:	9d05      	ldrge	r5, [sp, #20]
 8013874:	eba3 0509 	sublt.w	r5, r3, r9
 8013878:	464b      	movge	r3, r9
 801387a:	bfb8      	it	lt
 801387c:	2300      	movlt	r3, #0
 801387e:	e77e      	b.n	801377e <_dtoa_r+0x6fe>
 8013880:	9f07      	ldr	r7, [sp, #28]
 8013882:	9d05      	ldr	r5, [sp, #20]
 8013884:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013886:	e783      	b.n	8013790 <_dtoa_r+0x710>
 8013888:	9a07      	ldr	r2, [sp, #28]
 801388a:	e7ab      	b.n	80137e4 <_dtoa_r+0x764>
 801388c:	2300      	movs	r3, #0
 801388e:	e7d4      	b.n	801383a <_dtoa_r+0x7ba>
 8013890:	9b00      	ldr	r3, [sp, #0]
 8013892:	e7d2      	b.n	801383a <_dtoa_r+0x7ba>
 8013894:	2300      	movs	r3, #0
 8013896:	9307      	str	r3, [sp, #28]
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801389e:	6918      	ldr	r0, [r3, #16]
 80138a0:	f000 ffc7 	bl	8014832 <__hi0bits>
 80138a4:	f1c0 0020 	rsb	r0, r0, #32
 80138a8:	4440      	add	r0, r8
 80138aa:	f010 001f 	ands.w	r0, r0, #31
 80138ae:	d047      	beq.n	8013940 <_dtoa_r+0x8c0>
 80138b0:	f1c0 0320 	rsb	r3, r0, #32
 80138b4:	2b04      	cmp	r3, #4
 80138b6:	dd3b      	ble.n	8013930 <_dtoa_r+0x8b0>
 80138b8:	9b05      	ldr	r3, [sp, #20]
 80138ba:	f1c0 001c 	rsb	r0, r0, #28
 80138be:	4403      	add	r3, r0
 80138c0:	9305      	str	r3, [sp, #20]
 80138c2:	4405      	add	r5, r0
 80138c4:	4480      	add	r8, r0
 80138c6:	9b05      	ldr	r3, [sp, #20]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	dd05      	ble.n	80138d8 <_dtoa_r+0x858>
 80138cc:	461a      	mov	r2, r3
 80138ce:	9904      	ldr	r1, [sp, #16]
 80138d0:	4620      	mov	r0, r4
 80138d2:	f001 f8e9 	bl	8014aa8 <__lshift>
 80138d6:	9004      	str	r0, [sp, #16]
 80138d8:	f1b8 0f00 	cmp.w	r8, #0
 80138dc:	dd05      	ble.n	80138ea <_dtoa_r+0x86a>
 80138de:	4639      	mov	r1, r7
 80138e0:	4642      	mov	r2, r8
 80138e2:	4620      	mov	r0, r4
 80138e4:	f001 f8e0 	bl	8014aa8 <__lshift>
 80138e8:	4607      	mov	r7, r0
 80138ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138ec:	b353      	cbz	r3, 8013944 <_dtoa_r+0x8c4>
 80138ee:	4639      	mov	r1, r7
 80138f0:	9804      	ldr	r0, [sp, #16]
 80138f2:	f001 f92d 	bl	8014b50 <__mcmp>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	da24      	bge.n	8013944 <_dtoa_r+0x8c4>
 80138fa:	2300      	movs	r3, #0
 80138fc:	220a      	movs	r2, #10
 80138fe:	9904      	ldr	r1, [sp, #16]
 8013900:	4620      	mov	r0, r4
 8013902:	f000 ff1d 	bl	8014740 <__multadd>
 8013906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013908:	9004      	str	r0, [sp, #16]
 801390a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801390e:	2b00      	cmp	r3, #0
 8013910:	f000 814d 	beq.w	8013bae <_dtoa_r+0xb2e>
 8013914:	2300      	movs	r3, #0
 8013916:	4631      	mov	r1, r6
 8013918:	220a      	movs	r2, #10
 801391a:	4620      	mov	r0, r4
 801391c:	f000 ff10 	bl	8014740 <__multadd>
 8013920:	9b02      	ldr	r3, [sp, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	4606      	mov	r6, r0
 8013926:	dc4f      	bgt.n	80139c8 <_dtoa_r+0x948>
 8013928:	9b06      	ldr	r3, [sp, #24]
 801392a:	2b02      	cmp	r3, #2
 801392c:	dd4c      	ble.n	80139c8 <_dtoa_r+0x948>
 801392e:	e011      	b.n	8013954 <_dtoa_r+0x8d4>
 8013930:	d0c9      	beq.n	80138c6 <_dtoa_r+0x846>
 8013932:	9a05      	ldr	r2, [sp, #20]
 8013934:	331c      	adds	r3, #28
 8013936:	441a      	add	r2, r3
 8013938:	9205      	str	r2, [sp, #20]
 801393a:	441d      	add	r5, r3
 801393c:	4498      	add	r8, r3
 801393e:	e7c2      	b.n	80138c6 <_dtoa_r+0x846>
 8013940:	4603      	mov	r3, r0
 8013942:	e7f6      	b.n	8013932 <_dtoa_r+0x8b2>
 8013944:	f1b9 0f00 	cmp.w	r9, #0
 8013948:	dc38      	bgt.n	80139bc <_dtoa_r+0x93c>
 801394a:	9b06      	ldr	r3, [sp, #24]
 801394c:	2b02      	cmp	r3, #2
 801394e:	dd35      	ble.n	80139bc <_dtoa_r+0x93c>
 8013950:	f8cd 9008 	str.w	r9, [sp, #8]
 8013954:	9b02      	ldr	r3, [sp, #8]
 8013956:	b963      	cbnz	r3, 8013972 <_dtoa_r+0x8f2>
 8013958:	4639      	mov	r1, r7
 801395a:	2205      	movs	r2, #5
 801395c:	4620      	mov	r0, r4
 801395e:	f000 feef 	bl	8014740 <__multadd>
 8013962:	4601      	mov	r1, r0
 8013964:	4607      	mov	r7, r0
 8013966:	9804      	ldr	r0, [sp, #16]
 8013968:	f001 f8f2 	bl	8014b50 <__mcmp>
 801396c:	2800      	cmp	r0, #0
 801396e:	f73f adcc 	bgt.w	801350a <_dtoa_r+0x48a>
 8013972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013974:	465d      	mov	r5, fp
 8013976:	ea6f 0a03 	mvn.w	sl, r3
 801397a:	f04f 0900 	mov.w	r9, #0
 801397e:	4639      	mov	r1, r7
 8013980:	4620      	mov	r0, r4
 8013982:	f000 fec6 	bl	8014712 <_Bfree>
 8013986:	2e00      	cmp	r6, #0
 8013988:	f43f aeb7 	beq.w	80136fa <_dtoa_r+0x67a>
 801398c:	f1b9 0f00 	cmp.w	r9, #0
 8013990:	d005      	beq.n	801399e <_dtoa_r+0x91e>
 8013992:	45b1      	cmp	r9, r6
 8013994:	d003      	beq.n	801399e <_dtoa_r+0x91e>
 8013996:	4649      	mov	r1, r9
 8013998:	4620      	mov	r0, r4
 801399a:	f000 feba 	bl	8014712 <_Bfree>
 801399e:	4631      	mov	r1, r6
 80139a0:	4620      	mov	r0, r4
 80139a2:	f000 feb6 	bl	8014712 <_Bfree>
 80139a6:	e6a8      	b.n	80136fa <_dtoa_r+0x67a>
 80139a8:	2700      	movs	r7, #0
 80139aa:	463e      	mov	r6, r7
 80139ac:	e7e1      	b.n	8013972 <_dtoa_r+0x8f2>
 80139ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80139b2:	463e      	mov	r6, r7
 80139b4:	e5a9      	b.n	801350a <_dtoa_r+0x48a>
 80139b6:	bf00      	nop
 80139b8:	40240000 	.word	0x40240000
 80139bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139be:	f8cd 9008 	str.w	r9, [sp, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f000 80fa 	beq.w	8013bbc <_dtoa_r+0xb3c>
 80139c8:	2d00      	cmp	r5, #0
 80139ca:	dd05      	ble.n	80139d8 <_dtoa_r+0x958>
 80139cc:	4631      	mov	r1, r6
 80139ce:	462a      	mov	r2, r5
 80139d0:	4620      	mov	r0, r4
 80139d2:	f001 f869 	bl	8014aa8 <__lshift>
 80139d6:	4606      	mov	r6, r0
 80139d8:	9b07      	ldr	r3, [sp, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d04c      	beq.n	8013a78 <_dtoa_r+0x9f8>
 80139de:	6871      	ldr	r1, [r6, #4]
 80139e0:	4620      	mov	r0, r4
 80139e2:	f000 fe62 	bl	80146aa <_Balloc>
 80139e6:	6932      	ldr	r2, [r6, #16]
 80139e8:	3202      	adds	r2, #2
 80139ea:	4605      	mov	r5, r0
 80139ec:	0092      	lsls	r2, r2, #2
 80139ee:	f106 010c 	add.w	r1, r6, #12
 80139f2:	300c      	adds	r0, #12
 80139f4:	f000 fe4e 	bl	8014694 <memcpy>
 80139f8:	2201      	movs	r2, #1
 80139fa:	4629      	mov	r1, r5
 80139fc:	4620      	mov	r0, r4
 80139fe:	f001 f853 	bl	8014aa8 <__lshift>
 8013a02:	9b00      	ldr	r3, [sp, #0]
 8013a04:	f8cd b014 	str.w	fp, [sp, #20]
 8013a08:	f003 0301 	and.w	r3, r3, #1
 8013a0c:	46b1      	mov	r9, r6
 8013a0e:	9307      	str	r3, [sp, #28]
 8013a10:	4606      	mov	r6, r0
 8013a12:	4639      	mov	r1, r7
 8013a14:	9804      	ldr	r0, [sp, #16]
 8013a16:	f7ff faa7 	bl	8012f68 <quorem>
 8013a1a:	4649      	mov	r1, r9
 8013a1c:	4605      	mov	r5, r0
 8013a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013a22:	9804      	ldr	r0, [sp, #16]
 8013a24:	f001 f894 	bl	8014b50 <__mcmp>
 8013a28:	4632      	mov	r2, r6
 8013a2a:	9000      	str	r0, [sp, #0]
 8013a2c:	4639      	mov	r1, r7
 8013a2e:	4620      	mov	r0, r4
 8013a30:	f001 f8a8 	bl	8014b84 <__mdiff>
 8013a34:	68c3      	ldr	r3, [r0, #12]
 8013a36:	4602      	mov	r2, r0
 8013a38:	bb03      	cbnz	r3, 8013a7c <_dtoa_r+0x9fc>
 8013a3a:	4601      	mov	r1, r0
 8013a3c:	9008      	str	r0, [sp, #32]
 8013a3e:	9804      	ldr	r0, [sp, #16]
 8013a40:	f001 f886 	bl	8014b50 <__mcmp>
 8013a44:	9a08      	ldr	r2, [sp, #32]
 8013a46:	4603      	mov	r3, r0
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	9308      	str	r3, [sp, #32]
 8013a4e:	f000 fe60 	bl	8014712 <_Bfree>
 8013a52:	9b08      	ldr	r3, [sp, #32]
 8013a54:	b9a3      	cbnz	r3, 8013a80 <_dtoa_r+0xa00>
 8013a56:	9a06      	ldr	r2, [sp, #24]
 8013a58:	b992      	cbnz	r2, 8013a80 <_dtoa_r+0xa00>
 8013a5a:	9a07      	ldr	r2, [sp, #28]
 8013a5c:	b982      	cbnz	r2, 8013a80 <_dtoa_r+0xa00>
 8013a5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013a62:	d029      	beq.n	8013ab8 <_dtoa_r+0xa38>
 8013a64:	9b00      	ldr	r3, [sp, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	dd01      	ble.n	8013a6e <_dtoa_r+0x9ee>
 8013a6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013a6e:	9b05      	ldr	r3, [sp, #20]
 8013a70:	1c5d      	adds	r5, r3, #1
 8013a72:	f883 8000 	strb.w	r8, [r3]
 8013a76:	e782      	b.n	801397e <_dtoa_r+0x8fe>
 8013a78:	4630      	mov	r0, r6
 8013a7a:	e7c2      	b.n	8013a02 <_dtoa_r+0x982>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	e7e3      	b.n	8013a48 <_dtoa_r+0x9c8>
 8013a80:	9a00      	ldr	r2, [sp, #0]
 8013a82:	2a00      	cmp	r2, #0
 8013a84:	db04      	blt.n	8013a90 <_dtoa_r+0xa10>
 8013a86:	d125      	bne.n	8013ad4 <_dtoa_r+0xa54>
 8013a88:	9a06      	ldr	r2, [sp, #24]
 8013a8a:	bb1a      	cbnz	r2, 8013ad4 <_dtoa_r+0xa54>
 8013a8c:	9a07      	ldr	r2, [sp, #28]
 8013a8e:	bb0a      	cbnz	r2, 8013ad4 <_dtoa_r+0xa54>
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	ddec      	ble.n	8013a6e <_dtoa_r+0x9ee>
 8013a94:	2201      	movs	r2, #1
 8013a96:	9904      	ldr	r1, [sp, #16]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f001 f805 	bl	8014aa8 <__lshift>
 8013a9e:	4639      	mov	r1, r7
 8013aa0:	9004      	str	r0, [sp, #16]
 8013aa2:	f001 f855 	bl	8014b50 <__mcmp>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	dc03      	bgt.n	8013ab2 <_dtoa_r+0xa32>
 8013aaa:	d1e0      	bne.n	8013a6e <_dtoa_r+0x9ee>
 8013aac:	f018 0f01 	tst.w	r8, #1
 8013ab0:	d0dd      	beq.n	8013a6e <_dtoa_r+0x9ee>
 8013ab2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013ab6:	d1d8      	bne.n	8013a6a <_dtoa_r+0x9ea>
 8013ab8:	9b05      	ldr	r3, [sp, #20]
 8013aba:	9a05      	ldr	r2, [sp, #20]
 8013abc:	1c5d      	adds	r5, r3, #1
 8013abe:	2339      	movs	r3, #57	; 0x39
 8013ac0:	7013      	strb	r3, [r2, #0]
 8013ac2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013ac6:	2b39      	cmp	r3, #57	; 0x39
 8013ac8:	f105 32ff 	add.w	r2, r5, #4294967295
 8013acc:	d04f      	beq.n	8013b6e <_dtoa_r+0xaee>
 8013ace:	3301      	adds	r3, #1
 8013ad0:	7013      	strb	r3, [r2, #0]
 8013ad2:	e754      	b.n	801397e <_dtoa_r+0x8fe>
 8013ad4:	9a05      	ldr	r2, [sp, #20]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f102 0501 	add.w	r5, r2, #1
 8013adc:	dd06      	ble.n	8013aec <_dtoa_r+0xa6c>
 8013ade:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013ae2:	d0e9      	beq.n	8013ab8 <_dtoa_r+0xa38>
 8013ae4:	f108 0801 	add.w	r8, r8, #1
 8013ae8:	9b05      	ldr	r3, [sp, #20]
 8013aea:	e7c2      	b.n	8013a72 <_dtoa_r+0x9f2>
 8013aec:	9a02      	ldr	r2, [sp, #8]
 8013aee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013af2:	eba5 030b 	sub.w	r3, r5, fp
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d021      	beq.n	8013b3e <_dtoa_r+0xabe>
 8013afa:	2300      	movs	r3, #0
 8013afc:	220a      	movs	r2, #10
 8013afe:	9904      	ldr	r1, [sp, #16]
 8013b00:	4620      	mov	r0, r4
 8013b02:	f000 fe1d 	bl	8014740 <__multadd>
 8013b06:	45b1      	cmp	r9, r6
 8013b08:	9004      	str	r0, [sp, #16]
 8013b0a:	f04f 0300 	mov.w	r3, #0
 8013b0e:	f04f 020a 	mov.w	r2, #10
 8013b12:	4649      	mov	r1, r9
 8013b14:	4620      	mov	r0, r4
 8013b16:	d105      	bne.n	8013b24 <_dtoa_r+0xaa4>
 8013b18:	f000 fe12 	bl	8014740 <__multadd>
 8013b1c:	4681      	mov	r9, r0
 8013b1e:	4606      	mov	r6, r0
 8013b20:	9505      	str	r5, [sp, #20]
 8013b22:	e776      	b.n	8013a12 <_dtoa_r+0x992>
 8013b24:	f000 fe0c 	bl	8014740 <__multadd>
 8013b28:	4631      	mov	r1, r6
 8013b2a:	4681      	mov	r9, r0
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	220a      	movs	r2, #10
 8013b30:	4620      	mov	r0, r4
 8013b32:	f000 fe05 	bl	8014740 <__multadd>
 8013b36:	4606      	mov	r6, r0
 8013b38:	e7f2      	b.n	8013b20 <_dtoa_r+0xaa0>
 8013b3a:	f04f 0900 	mov.w	r9, #0
 8013b3e:	2201      	movs	r2, #1
 8013b40:	9904      	ldr	r1, [sp, #16]
 8013b42:	4620      	mov	r0, r4
 8013b44:	f000 ffb0 	bl	8014aa8 <__lshift>
 8013b48:	4639      	mov	r1, r7
 8013b4a:	9004      	str	r0, [sp, #16]
 8013b4c:	f001 f800 	bl	8014b50 <__mcmp>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	dcb6      	bgt.n	8013ac2 <_dtoa_r+0xa42>
 8013b54:	d102      	bne.n	8013b5c <_dtoa_r+0xadc>
 8013b56:	f018 0f01 	tst.w	r8, #1
 8013b5a:	d1b2      	bne.n	8013ac2 <_dtoa_r+0xa42>
 8013b5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013b60:	2b30      	cmp	r3, #48	; 0x30
 8013b62:	f105 32ff 	add.w	r2, r5, #4294967295
 8013b66:	f47f af0a 	bne.w	801397e <_dtoa_r+0x8fe>
 8013b6a:	4615      	mov	r5, r2
 8013b6c:	e7f6      	b.n	8013b5c <_dtoa_r+0xadc>
 8013b6e:	4593      	cmp	fp, r2
 8013b70:	d105      	bne.n	8013b7e <_dtoa_r+0xafe>
 8013b72:	2331      	movs	r3, #49	; 0x31
 8013b74:	f10a 0a01 	add.w	sl, sl, #1
 8013b78:	f88b 3000 	strb.w	r3, [fp]
 8013b7c:	e6ff      	b.n	801397e <_dtoa_r+0x8fe>
 8013b7e:	4615      	mov	r5, r2
 8013b80:	e79f      	b.n	8013ac2 <_dtoa_r+0xa42>
 8013b82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013be8 <_dtoa_r+0xb68>
 8013b86:	e007      	b.n	8013b98 <_dtoa_r+0xb18>
 8013b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013bec <_dtoa_r+0xb6c>
 8013b8e:	b11b      	cbz	r3, 8013b98 <_dtoa_r+0xb18>
 8013b90:	f10b 0308 	add.w	r3, fp, #8
 8013b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b96:	6013      	str	r3, [r2, #0]
 8013b98:	4658      	mov	r0, fp
 8013b9a:	b017      	add	sp, #92	; 0x5c
 8013b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba0:	9b06      	ldr	r3, [sp, #24]
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	f77f ae35 	ble.w	8013812 <_dtoa_r+0x792>
 8013ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013baa:	9307      	str	r3, [sp, #28]
 8013bac:	e649      	b.n	8013842 <_dtoa_r+0x7c2>
 8013bae:	9b02      	ldr	r3, [sp, #8]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	dc03      	bgt.n	8013bbc <_dtoa_r+0xb3c>
 8013bb4:	9b06      	ldr	r3, [sp, #24]
 8013bb6:	2b02      	cmp	r3, #2
 8013bb8:	f73f aecc 	bgt.w	8013954 <_dtoa_r+0x8d4>
 8013bbc:	465d      	mov	r5, fp
 8013bbe:	4639      	mov	r1, r7
 8013bc0:	9804      	ldr	r0, [sp, #16]
 8013bc2:	f7ff f9d1 	bl	8012f68 <quorem>
 8013bc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013bca:	f805 8b01 	strb.w	r8, [r5], #1
 8013bce:	9a02      	ldr	r2, [sp, #8]
 8013bd0:	eba5 030b 	sub.w	r3, r5, fp
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	ddb0      	ble.n	8013b3a <_dtoa_r+0xaba>
 8013bd8:	2300      	movs	r3, #0
 8013bda:	220a      	movs	r2, #10
 8013bdc:	9904      	ldr	r1, [sp, #16]
 8013bde:	4620      	mov	r0, r4
 8013be0:	f000 fdae 	bl	8014740 <__multadd>
 8013be4:	9004      	str	r0, [sp, #16]
 8013be6:	e7ea      	b.n	8013bbe <_dtoa_r+0xb3e>
 8013be8:	08016943 	.word	0x08016943
 8013bec:	080167a0 	.word	0x080167a0

08013bf0 <__sflush_r>:
 8013bf0:	898a      	ldrh	r2, [r1, #12]
 8013bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	0710      	lsls	r0, r2, #28
 8013bfa:	460c      	mov	r4, r1
 8013bfc:	d458      	bmi.n	8013cb0 <__sflush_r+0xc0>
 8013bfe:	684b      	ldr	r3, [r1, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	dc05      	bgt.n	8013c10 <__sflush_r+0x20>
 8013c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	dc02      	bgt.n	8013c10 <__sflush_r+0x20>
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c12:	2e00      	cmp	r6, #0
 8013c14:	d0f9      	beq.n	8013c0a <__sflush_r+0x1a>
 8013c16:	2300      	movs	r3, #0
 8013c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c1c:	682f      	ldr	r7, [r5, #0]
 8013c1e:	6a21      	ldr	r1, [r4, #32]
 8013c20:	602b      	str	r3, [r5, #0]
 8013c22:	d032      	beq.n	8013c8a <__sflush_r+0x9a>
 8013c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c26:	89a3      	ldrh	r3, [r4, #12]
 8013c28:	075a      	lsls	r2, r3, #29
 8013c2a:	d505      	bpl.n	8013c38 <__sflush_r+0x48>
 8013c2c:	6863      	ldr	r3, [r4, #4]
 8013c2e:	1ac0      	subs	r0, r0, r3
 8013c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c32:	b10b      	cbz	r3, 8013c38 <__sflush_r+0x48>
 8013c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c36:	1ac0      	subs	r0, r0, r3
 8013c38:	2300      	movs	r3, #0
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c3e:	6a21      	ldr	r1, [r4, #32]
 8013c40:	4628      	mov	r0, r5
 8013c42:	47b0      	blx	r6
 8013c44:	1c43      	adds	r3, r0, #1
 8013c46:	89a3      	ldrh	r3, [r4, #12]
 8013c48:	d106      	bne.n	8013c58 <__sflush_r+0x68>
 8013c4a:	6829      	ldr	r1, [r5, #0]
 8013c4c:	291d      	cmp	r1, #29
 8013c4e:	d848      	bhi.n	8013ce2 <__sflush_r+0xf2>
 8013c50:	4a29      	ldr	r2, [pc, #164]	; (8013cf8 <__sflush_r+0x108>)
 8013c52:	40ca      	lsrs	r2, r1
 8013c54:	07d6      	lsls	r6, r2, #31
 8013c56:	d544      	bpl.n	8013ce2 <__sflush_r+0xf2>
 8013c58:	2200      	movs	r2, #0
 8013c5a:	6062      	str	r2, [r4, #4]
 8013c5c:	04d9      	lsls	r1, r3, #19
 8013c5e:	6922      	ldr	r2, [r4, #16]
 8013c60:	6022      	str	r2, [r4, #0]
 8013c62:	d504      	bpl.n	8013c6e <__sflush_r+0x7e>
 8013c64:	1c42      	adds	r2, r0, #1
 8013c66:	d101      	bne.n	8013c6c <__sflush_r+0x7c>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	b903      	cbnz	r3, 8013c6e <__sflush_r+0x7e>
 8013c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8013c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c70:	602f      	str	r7, [r5, #0]
 8013c72:	2900      	cmp	r1, #0
 8013c74:	d0c9      	beq.n	8013c0a <__sflush_r+0x1a>
 8013c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c7a:	4299      	cmp	r1, r3
 8013c7c:	d002      	beq.n	8013c84 <__sflush_r+0x94>
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f001 f920 	bl	8014ec4 <_free_r>
 8013c84:	2000      	movs	r0, #0
 8013c86:	6360      	str	r0, [r4, #52]	; 0x34
 8013c88:	e7c0      	b.n	8013c0c <__sflush_r+0x1c>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	47b0      	blx	r6
 8013c90:	1c41      	adds	r1, r0, #1
 8013c92:	d1c8      	bne.n	8013c26 <__sflush_r+0x36>
 8013c94:	682b      	ldr	r3, [r5, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d0c5      	beq.n	8013c26 <__sflush_r+0x36>
 8013c9a:	2b1d      	cmp	r3, #29
 8013c9c:	d001      	beq.n	8013ca2 <__sflush_r+0xb2>
 8013c9e:	2b16      	cmp	r3, #22
 8013ca0:	d101      	bne.n	8013ca6 <__sflush_r+0xb6>
 8013ca2:	602f      	str	r7, [r5, #0]
 8013ca4:	e7b1      	b.n	8013c0a <__sflush_r+0x1a>
 8013ca6:	89a3      	ldrh	r3, [r4, #12]
 8013ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cac:	81a3      	strh	r3, [r4, #12]
 8013cae:	e7ad      	b.n	8013c0c <__sflush_r+0x1c>
 8013cb0:	690f      	ldr	r7, [r1, #16]
 8013cb2:	2f00      	cmp	r7, #0
 8013cb4:	d0a9      	beq.n	8013c0a <__sflush_r+0x1a>
 8013cb6:	0793      	lsls	r3, r2, #30
 8013cb8:	680e      	ldr	r6, [r1, #0]
 8013cba:	bf08      	it	eq
 8013cbc:	694b      	ldreq	r3, [r1, #20]
 8013cbe:	600f      	str	r7, [r1, #0]
 8013cc0:	bf18      	it	ne
 8013cc2:	2300      	movne	r3, #0
 8013cc4:	eba6 0807 	sub.w	r8, r6, r7
 8013cc8:	608b      	str	r3, [r1, #8]
 8013cca:	f1b8 0f00 	cmp.w	r8, #0
 8013cce:	dd9c      	ble.n	8013c0a <__sflush_r+0x1a>
 8013cd0:	4643      	mov	r3, r8
 8013cd2:	463a      	mov	r2, r7
 8013cd4:	6a21      	ldr	r1, [r4, #32]
 8013cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013cd8:	4628      	mov	r0, r5
 8013cda:	47b0      	blx	r6
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	dc06      	bgt.n	8013cee <__sflush_r+0xfe>
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ce6:	81a3      	strh	r3, [r4, #12]
 8013ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cec:	e78e      	b.n	8013c0c <__sflush_r+0x1c>
 8013cee:	4407      	add	r7, r0
 8013cf0:	eba8 0800 	sub.w	r8, r8, r0
 8013cf4:	e7e9      	b.n	8013cca <__sflush_r+0xda>
 8013cf6:	bf00      	nop
 8013cf8:	20400001 	.word	0x20400001

08013cfc <_fflush_r>:
 8013cfc:	b538      	push	{r3, r4, r5, lr}
 8013cfe:	690b      	ldr	r3, [r1, #16]
 8013d00:	4605      	mov	r5, r0
 8013d02:	460c      	mov	r4, r1
 8013d04:	b1db      	cbz	r3, 8013d3e <_fflush_r+0x42>
 8013d06:	b118      	cbz	r0, 8013d10 <_fflush_r+0x14>
 8013d08:	6983      	ldr	r3, [r0, #24]
 8013d0a:	b90b      	cbnz	r3, 8013d10 <_fflush_r+0x14>
 8013d0c:	f000 f860 	bl	8013dd0 <__sinit>
 8013d10:	4b0c      	ldr	r3, [pc, #48]	; (8013d44 <_fflush_r+0x48>)
 8013d12:	429c      	cmp	r4, r3
 8013d14:	d109      	bne.n	8013d2a <_fflush_r+0x2e>
 8013d16:	686c      	ldr	r4, [r5, #4]
 8013d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d1c:	b17b      	cbz	r3, 8013d3e <_fflush_r+0x42>
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4628      	mov	r0, r5
 8013d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d26:	f7ff bf63 	b.w	8013bf0 <__sflush_r>
 8013d2a:	4b07      	ldr	r3, [pc, #28]	; (8013d48 <_fflush_r+0x4c>)
 8013d2c:	429c      	cmp	r4, r3
 8013d2e:	d101      	bne.n	8013d34 <_fflush_r+0x38>
 8013d30:	68ac      	ldr	r4, [r5, #8]
 8013d32:	e7f1      	b.n	8013d18 <_fflush_r+0x1c>
 8013d34:	4b05      	ldr	r3, [pc, #20]	; (8013d4c <_fflush_r+0x50>)
 8013d36:	429c      	cmp	r4, r3
 8013d38:	bf08      	it	eq
 8013d3a:	68ec      	ldreq	r4, [r5, #12]
 8013d3c:	e7ec      	b.n	8013d18 <_fflush_r+0x1c>
 8013d3e:	2000      	movs	r0, #0
 8013d40:	bd38      	pop	{r3, r4, r5, pc}
 8013d42:	bf00      	nop
 8013d44:	080167d0 	.word	0x080167d0
 8013d48:	080167f0 	.word	0x080167f0
 8013d4c:	080167b0 	.word	0x080167b0

08013d50 <std>:
 8013d50:	2300      	movs	r3, #0
 8013d52:	b510      	push	{r4, lr}
 8013d54:	4604      	mov	r4, r0
 8013d56:	e9c0 3300 	strd	r3, r3, [r0]
 8013d5a:	6083      	str	r3, [r0, #8]
 8013d5c:	8181      	strh	r1, [r0, #12]
 8013d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d60:	81c2      	strh	r2, [r0, #14]
 8013d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d66:	6183      	str	r3, [r0, #24]
 8013d68:	4619      	mov	r1, r3
 8013d6a:	2208      	movs	r2, #8
 8013d6c:	305c      	adds	r0, #92	; 0x5c
 8013d6e:	f7fd f9a3 	bl	80110b8 <memset>
 8013d72:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <std+0x38>)
 8013d74:	6263      	str	r3, [r4, #36]	; 0x24
 8013d76:	4b05      	ldr	r3, [pc, #20]	; (8013d8c <std+0x3c>)
 8013d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d7a:	4b05      	ldr	r3, [pc, #20]	; (8013d90 <std+0x40>)
 8013d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d7e:	4b05      	ldr	r3, [pc, #20]	; (8013d94 <std+0x44>)
 8013d80:	6224      	str	r4, [r4, #32]
 8013d82:	6323      	str	r3, [r4, #48]	; 0x30
 8013d84:	bd10      	pop	{r4, pc}
 8013d86:	bf00      	nop
 8013d88:	08011f6d 	.word	0x08011f6d
 8013d8c:	08011f93 	.word	0x08011f93
 8013d90:	08011fcb 	.word	0x08011fcb
 8013d94:	08011fef 	.word	0x08011fef

08013d98 <_cleanup_r>:
 8013d98:	4901      	ldr	r1, [pc, #4]	; (8013da0 <_cleanup_r+0x8>)
 8013d9a:	f000 b885 	b.w	8013ea8 <_fwalk_reent>
 8013d9e:	bf00      	nop
 8013da0:	08013cfd 	.word	0x08013cfd

08013da4 <__sfmoreglue>:
 8013da4:	b570      	push	{r4, r5, r6, lr}
 8013da6:	1e4a      	subs	r2, r1, #1
 8013da8:	2568      	movs	r5, #104	; 0x68
 8013daa:	4355      	muls	r5, r2
 8013dac:	460e      	mov	r6, r1
 8013dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013db2:	f001 f8d5 	bl	8014f60 <_malloc_r>
 8013db6:	4604      	mov	r4, r0
 8013db8:	b140      	cbz	r0, 8013dcc <__sfmoreglue+0x28>
 8013dba:	2100      	movs	r1, #0
 8013dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8013dc0:	300c      	adds	r0, #12
 8013dc2:	60a0      	str	r0, [r4, #8]
 8013dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013dc8:	f7fd f976 	bl	80110b8 <memset>
 8013dcc:	4620      	mov	r0, r4
 8013dce:	bd70      	pop	{r4, r5, r6, pc}

08013dd0 <__sinit>:
 8013dd0:	6983      	ldr	r3, [r0, #24]
 8013dd2:	b510      	push	{r4, lr}
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	bb33      	cbnz	r3, 8013e26 <__sinit+0x56>
 8013dd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013ddc:	6503      	str	r3, [r0, #80]	; 0x50
 8013dde:	4b12      	ldr	r3, [pc, #72]	; (8013e28 <__sinit+0x58>)
 8013de0:	4a12      	ldr	r2, [pc, #72]	; (8013e2c <__sinit+0x5c>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	6282      	str	r2, [r0, #40]	; 0x28
 8013de6:	4298      	cmp	r0, r3
 8013de8:	bf04      	itt	eq
 8013dea:	2301      	moveq	r3, #1
 8013dec:	6183      	streq	r3, [r0, #24]
 8013dee:	f000 f81f 	bl	8013e30 <__sfp>
 8013df2:	6060      	str	r0, [r4, #4]
 8013df4:	4620      	mov	r0, r4
 8013df6:	f000 f81b 	bl	8013e30 <__sfp>
 8013dfa:	60a0      	str	r0, [r4, #8]
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f000 f817 	bl	8013e30 <__sfp>
 8013e02:	2200      	movs	r2, #0
 8013e04:	60e0      	str	r0, [r4, #12]
 8013e06:	2104      	movs	r1, #4
 8013e08:	6860      	ldr	r0, [r4, #4]
 8013e0a:	f7ff ffa1 	bl	8013d50 <std>
 8013e0e:	2201      	movs	r2, #1
 8013e10:	2109      	movs	r1, #9
 8013e12:	68a0      	ldr	r0, [r4, #8]
 8013e14:	f7ff ff9c 	bl	8013d50 <std>
 8013e18:	2202      	movs	r2, #2
 8013e1a:	2112      	movs	r1, #18
 8013e1c:	68e0      	ldr	r0, [r4, #12]
 8013e1e:	f7ff ff97 	bl	8013d50 <std>
 8013e22:	2301      	movs	r3, #1
 8013e24:	61a3      	str	r3, [r4, #24]
 8013e26:	bd10      	pop	{r4, pc}
 8013e28:	08016710 	.word	0x08016710
 8013e2c:	08013d99 	.word	0x08013d99

08013e30 <__sfp>:
 8013e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e32:	4b1b      	ldr	r3, [pc, #108]	; (8013ea0 <__sfp+0x70>)
 8013e34:	681e      	ldr	r6, [r3, #0]
 8013e36:	69b3      	ldr	r3, [r6, #24]
 8013e38:	4607      	mov	r7, r0
 8013e3a:	b913      	cbnz	r3, 8013e42 <__sfp+0x12>
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f7ff ffc7 	bl	8013dd0 <__sinit>
 8013e42:	3648      	adds	r6, #72	; 0x48
 8013e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e48:	3b01      	subs	r3, #1
 8013e4a:	d503      	bpl.n	8013e54 <__sfp+0x24>
 8013e4c:	6833      	ldr	r3, [r6, #0]
 8013e4e:	b133      	cbz	r3, 8013e5e <__sfp+0x2e>
 8013e50:	6836      	ldr	r6, [r6, #0]
 8013e52:	e7f7      	b.n	8013e44 <__sfp+0x14>
 8013e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e58:	b16d      	cbz	r5, 8013e76 <__sfp+0x46>
 8013e5a:	3468      	adds	r4, #104	; 0x68
 8013e5c:	e7f4      	b.n	8013e48 <__sfp+0x18>
 8013e5e:	2104      	movs	r1, #4
 8013e60:	4638      	mov	r0, r7
 8013e62:	f7ff ff9f 	bl	8013da4 <__sfmoreglue>
 8013e66:	6030      	str	r0, [r6, #0]
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d1f1      	bne.n	8013e50 <__sfp+0x20>
 8013e6c:	230c      	movs	r3, #12
 8013e6e:	603b      	str	r3, [r7, #0]
 8013e70:	4604      	mov	r4, r0
 8013e72:	4620      	mov	r0, r4
 8013e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e76:	4b0b      	ldr	r3, [pc, #44]	; (8013ea4 <__sfp+0x74>)
 8013e78:	6665      	str	r5, [r4, #100]	; 0x64
 8013e7a:	e9c4 5500 	strd	r5, r5, [r4]
 8013e7e:	60a5      	str	r5, [r4, #8]
 8013e80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013e84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013e88:	2208      	movs	r2, #8
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e90:	f7fd f912 	bl	80110b8 <memset>
 8013e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e9c:	e7e9      	b.n	8013e72 <__sfp+0x42>
 8013e9e:	bf00      	nop
 8013ea0:	08016710 	.word	0x08016710
 8013ea4:	ffff0001 	.word	0xffff0001

08013ea8 <_fwalk_reent>:
 8013ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eac:	4680      	mov	r8, r0
 8013eae:	4689      	mov	r9, r1
 8013eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013eb4:	2600      	movs	r6, #0
 8013eb6:	b914      	cbnz	r4, 8013ebe <_fwalk_reent+0x16>
 8013eb8:	4630      	mov	r0, r6
 8013eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ebe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013ec2:	3f01      	subs	r7, #1
 8013ec4:	d501      	bpl.n	8013eca <_fwalk_reent+0x22>
 8013ec6:	6824      	ldr	r4, [r4, #0]
 8013ec8:	e7f5      	b.n	8013eb6 <_fwalk_reent+0xe>
 8013eca:	89ab      	ldrh	r3, [r5, #12]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d907      	bls.n	8013ee0 <_fwalk_reent+0x38>
 8013ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	d003      	beq.n	8013ee0 <_fwalk_reent+0x38>
 8013ed8:	4629      	mov	r1, r5
 8013eda:	4640      	mov	r0, r8
 8013edc:	47c8      	blx	r9
 8013ede:	4306      	orrs	r6, r0
 8013ee0:	3568      	adds	r5, #104	; 0x68
 8013ee2:	e7ee      	b.n	8013ec2 <_fwalk_reent+0x1a>

08013ee4 <rshift>:
 8013ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ee6:	6906      	ldr	r6, [r0, #16]
 8013ee8:	114b      	asrs	r3, r1, #5
 8013eea:	429e      	cmp	r6, r3
 8013eec:	f100 0414 	add.w	r4, r0, #20
 8013ef0:	dd30      	ble.n	8013f54 <rshift+0x70>
 8013ef2:	f011 011f 	ands.w	r1, r1, #31
 8013ef6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013efa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013efe:	d108      	bne.n	8013f12 <rshift+0x2e>
 8013f00:	4621      	mov	r1, r4
 8013f02:	42b2      	cmp	r2, r6
 8013f04:	460b      	mov	r3, r1
 8013f06:	d211      	bcs.n	8013f2c <rshift+0x48>
 8013f08:	f852 3b04 	ldr.w	r3, [r2], #4
 8013f0c:	f841 3b04 	str.w	r3, [r1], #4
 8013f10:	e7f7      	b.n	8013f02 <rshift+0x1e>
 8013f12:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013f16:	f1c1 0c20 	rsb	ip, r1, #32
 8013f1a:	40cd      	lsrs	r5, r1
 8013f1c:	3204      	adds	r2, #4
 8013f1e:	4623      	mov	r3, r4
 8013f20:	42b2      	cmp	r2, r6
 8013f22:	4617      	mov	r7, r2
 8013f24:	d30c      	bcc.n	8013f40 <rshift+0x5c>
 8013f26:	601d      	str	r5, [r3, #0]
 8013f28:	b105      	cbz	r5, 8013f2c <rshift+0x48>
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	1b1a      	subs	r2, r3, r4
 8013f2e:	42a3      	cmp	r3, r4
 8013f30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013f34:	bf08      	it	eq
 8013f36:	2300      	moveq	r3, #0
 8013f38:	6102      	str	r2, [r0, #16]
 8013f3a:	bf08      	it	eq
 8013f3c:	6143      	streq	r3, [r0, #20]
 8013f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f40:	683f      	ldr	r7, [r7, #0]
 8013f42:	fa07 f70c 	lsl.w	r7, r7, ip
 8013f46:	433d      	orrs	r5, r7
 8013f48:	f843 5b04 	str.w	r5, [r3], #4
 8013f4c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013f50:	40cd      	lsrs	r5, r1
 8013f52:	e7e5      	b.n	8013f20 <rshift+0x3c>
 8013f54:	4623      	mov	r3, r4
 8013f56:	e7e9      	b.n	8013f2c <rshift+0x48>

08013f58 <__hexdig_fun>:
 8013f58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013f5c:	2b09      	cmp	r3, #9
 8013f5e:	d802      	bhi.n	8013f66 <__hexdig_fun+0xe>
 8013f60:	3820      	subs	r0, #32
 8013f62:	b2c0      	uxtb	r0, r0
 8013f64:	4770      	bx	lr
 8013f66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013f6a:	2b05      	cmp	r3, #5
 8013f6c:	d801      	bhi.n	8013f72 <__hexdig_fun+0x1a>
 8013f6e:	3847      	subs	r0, #71	; 0x47
 8013f70:	e7f7      	b.n	8013f62 <__hexdig_fun+0xa>
 8013f72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013f76:	2b05      	cmp	r3, #5
 8013f78:	d801      	bhi.n	8013f7e <__hexdig_fun+0x26>
 8013f7a:	3827      	subs	r0, #39	; 0x27
 8013f7c:	e7f1      	b.n	8013f62 <__hexdig_fun+0xa>
 8013f7e:	2000      	movs	r0, #0
 8013f80:	4770      	bx	lr

08013f82 <__gethex>:
 8013f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f86:	b08b      	sub	sp, #44	; 0x2c
 8013f88:	468a      	mov	sl, r1
 8013f8a:	9002      	str	r0, [sp, #8]
 8013f8c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013f8e:	9306      	str	r3, [sp, #24]
 8013f90:	4690      	mov	r8, r2
 8013f92:	f000 fadf 	bl	8014554 <__localeconv_l>
 8013f96:	6803      	ldr	r3, [r0, #0]
 8013f98:	9303      	str	r3, [sp, #12]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7ec f930 	bl	8000200 <strlen>
 8013fa0:	9b03      	ldr	r3, [sp, #12]
 8013fa2:	9001      	str	r0, [sp, #4]
 8013fa4:	4403      	add	r3, r0
 8013fa6:	f04f 0b00 	mov.w	fp, #0
 8013faa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013fae:	9307      	str	r3, [sp, #28]
 8013fb0:	f8da 3000 	ldr.w	r3, [sl]
 8013fb4:	3302      	adds	r3, #2
 8013fb6:	461f      	mov	r7, r3
 8013fb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013fbc:	2830      	cmp	r0, #48	; 0x30
 8013fbe:	d06c      	beq.n	801409a <__gethex+0x118>
 8013fc0:	f7ff ffca 	bl	8013f58 <__hexdig_fun>
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d16a      	bne.n	80140a0 <__gethex+0x11e>
 8013fca:	9a01      	ldr	r2, [sp, #4]
 8013fcc:	9903      	ldr	r1, [sp, #12]
 8013fce:	4638      	mov	r0, r7
 8013fd0:	f001 fe3e 	bl	8015c50 <strncmp>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d166      	bne.n	80140a6 <__gethex+0x124>
 8013fd8:	9b01      	ldr	r3, [sp, #4]
 8013fda:	5cf8      	ldrb	r0, [r7, r3]
 8013fdc:	18fe      	adds	r6, r7, r3
 8013fde:	f7ff ffbb 	bl	8013f58 <__hexdig_fun>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	d062      	beq.n	80140ac <__gethex+0x12a>
 8013fe6:	4633      	mov	r3, r6
 8013fe8:	7818      	ldrb	r0, [r3, #0]
 8013fea:	2830      	cmp	r0, #48	; 0x30
 8013fec:	461f      	mov	r7, r3
 8013fee:	f103 0301 	add.w	r3, r3, #1
 8013ff2:	d0f9      	beq.n	8013fe8 <__gethex+0x66>
 8013ff4:	f7ff ffb0 	bl	8013f58 <__hexdig_fun>
 8013ff8:	fab0 f580 	clz	r5, r0
 8013ffc:	096d      	lsrs	r5, r5, #5
 8013ffe:	4634      	mov	r4, r6
 8014000:	f04f 0b01 	mov.w	fp, #1
 8014004:	463a      	mov	r2, r7
 8014006:	4616      	mov	r6, r2
 8014008:	3201      	adds	r2, #1
 801400a:	7830      	ldrb	r0, [r6, #0]
 801400c:	f7ff ffa4 	bl	8013f58 <__hexdig_fun>
 8014010:	2800      	cmp	r0, #0
 8014012:	d1f8      	bne.n	8014006 <__gethex+0x84>
 8014014:	9a01      	ldr	r2, [sp, #4]
 8014016:	9903      	ldr	r1, [sp, #12]
 8014018:	4630      	mov	r0, r6
 801401a:	f001 fe19 	bl	8015c50 <strncmp>
 801401e:	b950      	cbnz	r0, 8014036 <__gethex+0xb4>
 8014020:	b954      	cbnz	r4, 8014038 <__gethex+0xb6>
 8014022:	9b01      	ldr	r3, [sp, #4]
 8014024:	18f4      	adds	r4, r6, r3
 8014026:	4622      	mov	r2, r4
 8014028:	4616      	mov	r6, r2
 801402a:	3201      	adds	r2, #1
 801402c:	7830      	ldrb	r0, [r6, #0]
 801402e:	f7ff ff93 	bl	8013f58 <__hexdig_fun>
 8014032:	2800      	cmp	r0, #0
 8014034:	d1f8      	bne.n	8014028 <__gethex+0xa6>
 8014036:	b10c      	cbz	r4, 801403c <__gethex+0xba>
 8014038:	1ba4      	subs	r4, r4, r6
 801403a:	00a4      	lsls	r4, r4, #2
 801403c:	7833      	ldrb	r3, [r6, #0]
 801403e:	2b50      	cmp	r3, #80	; 0x50
 8014040:	d001      	beq.n	8014046 <__gethex+0xc4>
 8014042:	2b70      	cmp	r3, #112	; 0x70
 8014044:	d140      	bne.n	80140c8 <__gethex+0x146>
 8014046:	7873      	ldrb	r3, [r6, #1]
 8014048:	2b2b      	cmp	r3, #43	; 0x2b
 801404a:	d031      	beq.n	80140b0 <__gethex+0x12e>
 801404c:	2b2d      	cmp	r3, #45	; 0x2d
 801404e:	d033      	beq.n	80140b8 <__gethex+0x136>
 8014050:	1c71      	adds	r1, r6, #1
 8014052:	f04f 0900 	mov.w	r9, #0
 8014056:	7808      	ldrb	r0, [r1, #0]
 8014058:	f7ff ff7e 	bl	8013f58 <__hexdig_fun>
 801405c:	1e43      	subs	r3, r0, #1
 801405e:	b2db      	uxtb	r3, r3
 8014060:	2b18      	cmp	r3, #24
 8014062:	d831      	bhi.n	80140c8 <__gethex+0x146>
 8014064:	f1a0 0210 	sub.w	r2, r0, #16
 8014068:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801406c:	f7ff ff74 	bl	8013f58 <__hexdig_fun>
 8014070:	1e43      	subs	r3, r0, #1
 8014072:	b2db      	uxtb	r3, r3
 8014074:	2b18      	cmp	r3, #24
 8014076:	d922      	bls.n	80140be <__gethex+0x13c>
 8014078:	f1b9 0f00 	cmp.w	r9, #0
 801407c:	d000      	beq.n	8014080 <__gethex+0xfe>
 801407e:	4252      	negs	r2, r2
 8014080:	4414      	add	r4, r2
 8014082:	f8ca 1000 	str.w	r1, [sl]
 8014086:	b30d      	cbz	r5, 80140cc <__gethex+0x14a>
 8014088:	f1bb 0f00 	cmp.w	fp, #0
 801408c:	bf0c      	ite	eq
 801408e:	2706      	moveq	r7, #6
 8014090:	2700      	movne	r7, #0
 8014092:	4638      	mov	r0, r7
 8014094:	b00b      	add	sp, #44	; 0x2c
 8014096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801409a:	f10b 0b01 	add.w	fp, fp, #1
 801409e:	e78a      	b.n	8013fb6 <__gethex+0x34>
 80140a0:	2500      	movs	r5, #0
 80140a2:	462c      	mov	r4, r5
 80140a4:	e7ae      	b.n	8014004 <__gethex+0x82>
 80140a6:	463e      	mov	r6, r7
 80140a8:	2501      	movs	r5, #1
 80140aa:	e7c7      	b.n	801403c <__gethex+0xba>
 80140ac:	4604      	mov	r4, r0
 80140ae:	e7fb      	b.n	80140a8 <__gethex+0x126>
 80140b0:	f04f 0900 	mov.w	r9, #0
 80140b4:	1cb1      	adds	r1, r6, #2
 80140b6:	e7ce      	b.n	8014056 <__gethex+0xd4>
 80140b8:	f04f 0901 	mov.w	r9, #1
 80140bc:	e7fa      	b.n	80140b4 <__gethex+0x132>
 80140be:	230a      	movs	r3, #10
 80140c0:	fb03 0202 	mla	r2, r3, r2, r0
 80140c4:	3a10      	subs	r2, #16
 80140c6:	e7cf      	b.n	8014068 <__gethex+0xe6>
 80140c8:	4631      	mov	r1, r6
 80140ca:	e7da      	b.n	8014082 <__gethex+0x100>
 80140cc:	1bf3      	subs	r3, r6, r7
 80140ce:	3b01      	subs	r3, #1
 80140d0:	4629      	mov	r1, r5
 80140d2:	2b07      	cmp	r3, #7
 80140d4:	dc49      	bgt.n	801416a <__gethex+0x1e8>
 80140d6:	9802      	ldr	r0, [sp, #8]
 80140d8:	f000 fae7 	bl	80146aa <_Balloc>
 80140dc:	9b01      	ldr	r3, [sp, #4]
 80140de:	f100 0914 	add.w	r9, r0, #20
 80140e2:	f04f 0b00 	mov.w	fp, #0
 80140e6:	f1c3 0301 	rsb	r3, r3, #1
 80140ea:	4605      	mov	r5, r0
 80140ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80140f0:	46da      	mov	sl, fp
 80140f2:	9308      	str	r3, [sp, #32]
 80140f4:	42b7      	cmp	r7, r6
 80140f6:	d33b      	bcc.n	8014170 <__gethex+0x1ee>
 80140f8:	9804      	ldr	r0, [sp, #16]
 80140fa:	f840 ab04 	str.w	sl, [r0], #4
 80140fe:	eba0 0009 	sub.w	r0, r0, r9
 8014102:	1080      	asrs	r0, r0, #2
 8014104:	6128      	str	r0, [r5, #16]
 8014106:	0147      	lsls	r7, r0, #5
 8014108:	4650      	mov	r0, sl
 801410a:	f000 fb92 	bl	8014832 <__hi0bits>
 801410e:	f8d8 6000 	ldr.w	r6, [r8]
 8014112:	1a3f      	subs	r7, r7, r0
 8014114:	42b7      	cmp	r7, r6
 8014116:	dd64      	ble.n	80141e2 <__gethex+0x260>
 8014118:	1bbf      	subs	r7, r7, r6
 801411a:	4639      	mov	r1, r7
 801411c:	4628      	mov	r0, r5
 801411e:	f000 fea1 	bl	8014e64 <__any_on>
 8014122:	4682      	mov	sl, r0
 8014124:	b178      	cbz	r0, 8014146 <__gethex+0x1c4>
 8014126:	1e7b      	subs	r3, r7, #1
 8014128:	1159      	asrs	r1, r3, #5
 801412a:	f003 021f 	and.w	r2, r3, #31
 801412e:	f04f 0a01 	mov.w	sl, #1
 8014132:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014136:	fa0a f202 	lsl.w	r2, sl, r2
 801413a:	420a      	tst	r2, r1
 801413c:	d003      	beq.n	8014146 <__gethex+0x1c4>
 801413e:	4553      	cmp	r3, sl
 8014140:	dc46      	bgt.n	80141d0 <__gethex+0x24e>
 8014142:	f04f 0a02 	mov.w	sl, #2
 8014146:	4639      	mov	r1, r7
 8014148:	4628      	mov	r0, r5
 801414a:	f7ff fecb 	bl	8013ee4 <rshift>
 801414e:	443c      	add	r4, r7
 8014150:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014154:	42a3      	cmp	r3, r4
 8014156:	da52      	bge.n	80141fe <__gethex+0x27c>
 8014158:	4629      	mov	r1, r5
 801415a:	9802      	ldr	r0, [sp, #8]
 801415c:	f000 fad9 	bl	8014712 <_Bfree>
 8014160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014162:	2300      	movs	r3, #0
 8014164:	6013      	str	r3, [r2, #0]
 8014166:	27a3      	movs	r7, #163	; 0xa3
 8014168:	e793      	b.n	8014092 <__gethex+0x110>
 801416a:	3101      	adds	r1, #1
 801416c:	105b      	asrs	r3, r3, #1
 801416e:	e7b0      	b.n	80140d2 <__gethex+0x150>
 8014170:	1e73      	subs	r3, r6, #1
 8014172:	9305      	str	r3, [sp, #20]
 8014174:	9a07      	ldr	r2, [sp, #28]
 8014176:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801417a:	4293      	cmp	r3, r2
 801417c:	d018      	beq.n	80141b0 <__gethex+0x22e>
 801417e:	f1bb 0f20 	cmp.w	fp, #32
 8014182:	d107      	bne.n	8014194 <__gethex+0x212>
 8014184:	9b04      	ldr	r3, [sp, #16]
 8014186:	f8c3 a000 	str.w	sl, [r3]
 801418a:	3304      	adds	r3, #4
 801418c:	f04f 0a00 	mov.w	sl, #0
 8014190:	9304      	str	r3, [sp, #16]
 8014192:	46d3      	mov	fp, sl
 8014194:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014198:	f7ff fede 	bl	8013f58 <__hexdig_fun>
 801419c:	f000 000f 	and.w	r0, r0, #15
 80141a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80141a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80141a8:	f10b 0b04 	add.w	fp, fp, #4
 80141ac:	9b05      	ldr	r3, [sp, #20]
 80141ae:	e00d      	b.n	80141cc <__gethex+0x24a>
 80141b0:	9b05      	ldr	r3, [sp, #20]
 80141b2:	9a08      	ldr	r2, [sp, #32]
 80141b4:	4413      	add	r3, r2
 80141b6:	42bb      	cmp	r3, r7
 80141b8:	d3e1      	bcc.n	801417e <__gethex+0x1fc>
 80141ba:	4618      	mov	r0, r3
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	9903      	ldr	r1, [sp, #12]
 80141c0:	9309      	str	r3, [sp, #36]	; 0x24
 80141c2:	f001 fd45 	bl	8015c50 <strncmp>
 80141c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d1d8      	bne.n	801417e <__gethex+0x1fc>
 80141cc:	461e      	mov	r6, r3
 80141ce:	e791      	b.n	80140f4 <__gethex+0x172>
 80141d0:	1eb9      	subs	r1, r7, #2
 80141d2:	4628      	mov	r0, r5
 80141d4:	f000 fe46 	bl	8014e64 <__any_on>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0b2      	beq.n	8014142 <__gethex+0x1c0>
 80141dc:	f04f 0a03 	mov.w	sl, #3
 80141e0:	e7b1      	b.n	8014146 <__gethex+0x1c4>
 80141e2:	da09      	bge.n	80141f8 <__gethex+0x276>
 80141e4:	1bf7      	subs	r7, r6, r7
 80141e6:	4629      	mov	r1, r5
 80141e8:	463a      	mov	r2, r7
 80141ea:	9802      	ldr	r0, [sp, #8]
 80141ec:	f000 fc5c 	bl	8014aa8 <__lshift>
 80141f0:	1be4      	subs	r4, r4, r7
 80141f2:	4605      	mov	r5, r0
 80141f4:	f100 0914 	add.w	r9, r0, #20
 80141f8:	f04f 0a00 	mov.w	sl, #0
 80141fc:	e7a8      	b.n	8014150 <__gethex+0x1ce>
 80141fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014202:	42a0      	cmp	r0, r4
 8014204:	dd6a      	ble.n	80142dc <__gethex+0x35a>
 8014206:	1b04      	subs	r4, r0, r4
 8014208:	42a6      	cmp	r6, r4
 801420a:	dc2e      	bgt.n	801426a <__gethex+0x2e8>
 801420c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014210:	2b02      	cmp	r3, #2
 8014212:	d022      	beq.n	801425a <__gethex+0x2d8>
 8014214:	2b03      	cmp	r3, #3
 8014216:	d024      	beq.n	8014262 <__gethex+0x2e0>
 8014218:	2b01      	cmp	r3, #1
 801421a:	d115      	bne.n	8014248 <__gethex+0x2c6>
 801421c:	42a6      	cmp	r6, r4
 801421e:	d113      	bne.n	8014248 <__gethex+0x2c6>
 8014220:	2e01      	cmp	r6, #1
 8014222:	dc0b      	bgt.n	801423c <__gethex+0x2ba>
 8014224:	9a06      	ldr	r2, [sp, #24]
 8014226:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801422a:	6013      	str	r3, [r2, #0]
 801422c:	2301      	movs	r3, #1
 801422e:	612b      	str	r3, [r5, #16]
 8014230:	f8c9 3000 	str.w	r3, [r9]
 8014234:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014236:	2762      	movs	r7, #98	; 0x62
 8014238:	601d      	str	r5, [r3, #0]
 801423a:	e72a      	b.n	8014092 <__gethex+0x110>
 801423c:	1e71      	subs	r1, r6, #1
 801423e:	4628      	mov	r0, r5
 8014240:	f000 fe10 	bl	8014e64 <__any_on>
 8014244:	2800      	cmp	r0, #0
 8014246:	d1ed      	bne.n	8014224 <__gethex+0x2a2>
 8014248:	4629      	mov	r1, r5
 801424a:	9802      	ldr	r0, [sp, #8]
 801424c:	f000 fa61 	bl	8014712 <_Bfree>
 8014250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014252:	2300      	movs	r3, #0
 8014254:	6013      	str	r3, [r2, #0]
 8014256:	2750      	movs	r7, #80	; 0x50
 8014258:	e71b      	b.n	8014092 <__gethex+0x110>
 801425a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801425c:	2b00      	cmp	r3, #0
 801425e:	d0e1      	beq.n	8014224 <__gethex+0x2a2>
 8014260:	e7f2      	b.n	8014248 <__gethex+0x2c6>
 8014262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1dd      	bne.n	8014224 <__gethex+0x2a2>
 8014268:	e7ee      	b.n	8014248 <__gethex+0x2c6>
 801426a:	1e67      	subs	r7, r4, #1
 801426c:	f1ba 0f00 	cmp.w	sl, #0
 8014270:	d131      	bne.n	80142d6 <__gethex+0x354>
 8014272:	b127      	cbz	r7, 801427e <__gethex+0x2fc>
 8014274:	4639      	mov	r1, r7
 8014276:	4628      	mov	r0, r5
 8014278:	f000 fdf4 	bl	8014e64 <__any_on>
 801427c:	4682      	mov	sl, r0
 801427e:	117a      	asrs	r2, r7, #5
 8014280:	2301      	movs	r3, #1
 8014282:	f007 071f 	and.w	r7, r7, #31
 8014286:	fa03 f707 	lsl.w	r7, r3, r7
 801428a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801428e:	4621      	mov	r1, r4
 8014290:	421f      	tst	r7, r3
 8014292:	4628      	mov	r0, r5
 8014294:	bf18      	it	ne
 8014296:	f04a 0a02 	orrne.w	sl, sl, #2
 801429a:	1b36      	subs	r6, r6, r4
 801429c:	f7ff fe22 	bl	8013ee4 <rshift>
 80142a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80142a4:	2702      	movs	r7, #2
 80142a6:	f1ba 0f00 	cmp.w	sl, #0
 80142aa:	d048      	beq.n	801433e <__gethex+0x3bc>
 80142ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80142b0:	2b02      	cmp	r3, #2
 80142b2:	d015      	beq.n	80142e0 <__gethex+0x35e>
 80142b4:	2b03      	cmp	r3, #3
 80142b6:	d017      	beq.n	80142e8 <__gethex+0x366>
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d109      	bne.n	80142d0 <__gethex+0x34e>
 80142bc:	f01a 0f02 	tst.w	sl, #2
 80142c0:	d006      	beq.n	80142d0 <__gethex+0x34e>
 80142c2:	f8d9 3000 	ldr.w	r3, [r9]
 80142c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80142ca:	f01a 0f01 	tst.w	sl, #1
 80142ce:	d10e      	bne.n	80142ee <__gethex+0x36c>
 80142d0:	f047 0710 	orr.w	r7, r7, #16
 80142d4:	e033      	b.n	801433e <__gethex+0x3bc>
 80142d6:	f04f 0a01 	mov.w	sl, #1
 80142da:	e7d0      	b.n	801427e <__gethex+0x2fc>
 80142dc:	2701      	movs	r7, #1
 80142de:	e7e2      	b.n	80142a6 <__gethex+0x324>
 80142e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142e2:	f1c3 0301 	rsb	r3, r3, #1
 80142e6:	9315      	str	r3, [sp, #84]	; 0x54
 80142e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d0f0      	beq.n	80142d0 <__gethex+0x34e>
 80142ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80142f2:	f105 0314 	add.w	r3, r5, #20
 80142f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80142fa:	eb03 010a 	add.w	r1, r3, sl
 80142fe:	f04f 0c00 	mov.w	ip, #0
 8014302:	4618      	mov	r0, r3
 8014304:	f853 2b04 	ldr.w	r2, [r3], #4
 8014308:	f1b2 3fff 	cmp.w	r2, #4294967295
 801430c:	d01c      	beq.n	8014348 <__gethex+0x3c6>
 801430e:	3201      	adds	r2, #1
 8014310:	6002      	str	r2, [r0, #0]
 8014312:	2f02      	cmp	r7, #2
 8014314:	f105 0314 	add.w	r3, r5, #20
 8014318:	d138      	bne.n	801438c <__gethex+0x40a>
 801431a:	f8d8 2000 	ldr.w	r2, [r8]
 801431e:	3a01      	subs	r2, #1
 8014320:	42b2      	cmp	r2, r6
 8014322:	d10a      	bne.n	801433a <__gethex+0x3b8>
 8014324:	1171      	asrs	r1, r6, #5
 8014326:	2201      	movs	r2, #1
 8014328:	f006 061f 	and.w	r6, r6, #31
 801432c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014330:	fa02 f606 	lsl.w	r6, r2, r6
 8014334:	421e      	tst	r6, r3
 8014336:	bf18      	it	ne
 8014338:	4617      	movne	r7, r2
 801433a:	f047 0720 	orr.w	r7, r7, #32
 801433e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014340:	601d      	str	r5, [r3, #0]
 8014342:	9b06      	ldr	r3, [sp, #24]
 8014344:	601c      	str	r4, [r3, #0]
 8014346:	e6a4      	b.n	8014092 <__gethex+0x110>
 8014348:	4299      	cmp	r1, r3
 801434a:	f843 cc04 	str.w	ip, [r3, #-4]
 801434e:	d8d8      	bhi.n	8014302 <__gethex+0x380>
 8014350:	68ab      	ldr	r3, [r5, #8]
 8014352:	4599      	cmp	r9, r3
 8014354:	db12      	blt.n	801437c <__gethex+0x3fa>
 8014356:	6869      	ldr	r1, [r5, #4]
 8014358:	9802      	ldr	r0, [sp, #8]
 801435a:	3101      	adds	r1, #1
 801435c:	f000 f9a5 	bl	80146aa <_Balloc>
 8014360:	692a      	ldr	r2, [r5, #16]
 8014362:	3202      	adds	r2, #2
 8014364:	f105 010c 	add.w	r1, r5, #12
 8014368:	4683      	mov	fp, r0
 801436a:	0092      	lsls	r2, r2, #2
 801436c:	300c      	adds	r0, #12
 801436e:	f000 f991 	bl	8014694 <memcpy>
 8014372:	4629      	mov	r1, r5
 8014374:	9802      	ldr	r0, [sp, #8]
 8014376:	f000 f9cc 	bl	8014712 <_Bfree>
 801437a:	465d      	mov	r5, fp
 801437c:	692b      	ldr	r3, [r5, #16]
 801437e:	1c5a      	adds	r2, r3, #1
 8014380:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014384:	612a      	str	r2, [r5, #16]
 8014386:	2201      	movs	r2, #1
 8014388:	615a      	str	r2, [r3, #20]
 801438a:	e7c2      	b.n	8014312 <__gethex+0x390>
 801438c:	692a      	ldr	r2, [r5, #16]
 801438e:	454a      	cmp	r2, r9
 8014390:	dd0b      	ble.n	80143aa <__gethex+0x428>
 8014392:	2101      	movs	r1, #1
 8014394:	4628      	mov	r0, r5
 8014396:	f7ff fda5 	bl	8013ee4 <rshift>
 801439a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801439e:	3401      	adds	r4, #1
 80143a0:	42a3      	cmp	r3, r4
 80143a2:	f6ff aed9 	blt.w	8014158 <__gethex+0x1d6>
 80143a6:	2701      	movs	r7, #1
 80143a8:	e7c7      	b.n	801433a <__gethex+0x3b8>
 80143aa:	f016 061f 	ands.w	r6, r6, #31
 80143ae:	d0fa      	beq.n	80143a6 <__gethex+0x424>
 80143b0:	449a      	add	sl, r3
 80143b2:	f1c6 0620 	rsb	r6, r6, #32
 80143b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80143ba:	f000 fa3a 	bl	8014832 <__hi0bits>
 80143be:	42b0      	cmp	r0, r6
 80143c0:	dbe7      	blt.n	8014392 <__gethex+0x410>
 80143c2:	e7f0      	b.n	80143a6 <__gethex+0x424>

080143c4 <L_shift>:
 80143c4:	f1c2 0208 	rsb	r2, r2, #8
 80143c8:	0092      	lsls	r2, r2, #2
 80143ca:	b570      	push	{r4, r5, r6, lr}
 80143cc:	f1c2 0620 	rsb	r6, r2, #32
 80143d0:	6843      	ldr	r3, [r0, #4]
 80143d2:	6804      	ldr	r4, [r0, #0]
 80143d4:	fa03 f506 	lsl.w	r5, r3, r6
 80143d8:	432c      	orrs	r4, r5
 80143da:	40d3      	lsrs	r3, r2
 80143dc:	6004      	str	r4, [r0, #0]
 80143de:	f840 3f04 	str.w	r3, [r0, #4]!
 80143e2:	4288      	cmp	r0, r1
 80143e4:	d3f4      	bcc.n	80143d0 <L_shift+0xc>
 80143e6:	bd70      	pop	{r4, r5, r6, pc}

080143e8 <__match>:
 80143e8:	b530      	push	{r4, r5, lr}
 80143ea:	6803      	ldr	r3, [r0, #0]
 80143ec:	3301      	adds	r3, #1
 80143ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143f2:	b914      	cbnz	r4, 80143fa <__match+0x12>
 80143f4:	6003      	str	r3, [r0, #0]
 80143f6:	2001      	movs	r0, #1
 80143f8:	bd30      	pop	{r4, r5, pc}
 80143fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014402:	2d19      	cmp	r5, #25
 8014404:	bf98      	it	ls
 8014406:	3220      	addls	r2, #32
 8014408:	42a2      	cmp	r2, r4
 801440a:	d0f0      	beq.n	80143ee <__match+0x6>
 801440c:	2000      	movs	r0, #0
 801440e:	e7f3      	b.n	80143f8 <__match+0x10>

08014410 <__hexnan>:
 8014410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014414:	680b      	ldr	r3, [r1, #0]
 8014416:	6801      	ldr	r1, [r0, #0]
 8014418:	115f      	asrs	r7, r3, #5
 801441a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801441e:	f013 031f 	ands.w	r3, r3, #31
 8014422:	b087      	sub	sp, #28
 8014424:	bf18      	it	ne
 8014426:	3704      	addne	r7, #4
 8014428:	2500      	movs	r5, #0
 801442a:	1f3e      	subs	r6, r7, #4
 801442c:	4682      	mov	sl, r0
 801442e:	4690      	mov	r8, r2
 8014430:	9301      	str	r3, [sp, #4]
 8014432:	f847 5c04 	str.w	r5, [r7, #-4]
 8014436:	46b1      	mov	r9, r6
 8014438:	4634      	mov	r4, r6
 801443a:	9502      	str	r5, [sp, #8]
 801443c:	46ab      	mov	fp, r5
 801443e:	784a      	ldrb	r2, [r1, #1]
 8014440:	1c4b      	adds	r3, r1, #1
 8014442:	9303      	str	r3, [sp, #12]
 8014444:	b342      	cbz	r2, 8014498 <__hexnan+0x88>
 8014446:	4610      	mov	r0, r2
 8014448:	9105      	str	r1, [sp, #20]
 801444a:	9204      	str	r2, [sp, #16]
 801444c:	f7ff fd84 	bl	8013f58 <__hexdig_fun>
 8014450:	2800      	cmp	r0, #0
 8014452:	d143      	bne.n	80144dc <__hexnan+0xcc>
 8014454:	9a04      	ldr	r2, [sp, #16]
 8014456:	9905      	ldr	r1, [sp, #20]
 8014458:	2a20      	cmp	r2, #32
 801445a:	d818      	bhi.n	801448e <__hexnan+0x7e>
 801445c:	9b02      	ldr	r3, [sp, #8]
 801445e:	459b      	cmp	fp, r3
 8014460:	dd13      	ble.n	801448a <__hexnan+0x7a>
 8014462:	454c      	cmp	r4, r9
 8014464:	d206      	bcs.n	8014474 <__hexnan+0x64>
 8014466:	2d07      	cmp	r5, #7
 8014468:	dc04      	bgt.n	8014474 <__hexnan+0x64>
 801446a:	462a      	mov	r2, r5
 801446c:	4649      	mov	r1, r9
 801446e:	4620      	mov	r0, r4
 8014470:	f7ff ffa8 	bl	80143c4 <L_shift>
 8014474:	4544      	cmp	r4, r8
 8014476:	d944      	bls.n	8014502 <__hexnan+0xf2>
 8014478:	2300      	movs	r3, #0
 801447a:	f1a4 0904 	sub.w	r9, r4, #4
 801447e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014482:	f8cd b008 	str.w	fp, [sp, #8]
 8014486:	464c      	mov	r4, r9
 8014488:	461d      	mov	r5, r3
 801448a:	9903      	ldr	r1, [sp, #12]
 801448c:	e7d7      	b.n	801443e <__hexnan+0x2e>
 801448e:	2a29      	cmp	r2, #41	; 0x29
 8014490:	d14a      	bne.n	8014528 <__hexnan+0x118>
 8014492:	3102      	adds	r1, #2
 8014494:	f8ca 1000 	str.w	r1, [sl]
 8014498:	f1bb 0f00 	cmp.w	fp, #0
 801449c:	d044      	beq.n	8014528 <__hexnan+0x118>
 801449e:	454c      	cmp	r4, r9
 80144a0:	d206      	bcs.n	80144b0 <__hexnan+0xa0>
 80144a2:	2d07      	cmp	r5, #7
 80144a4:	dc04      	bgt.n	80144b0 <__hexnan+0xa0>
 80144a6:	462a      	mov	r2, r5
 80144a8:	4649      	mov	r1, r9
 80144aa:	4620      	mov	r0, r4
 80144ac:	f7ff ff8a 	bl	80143c4 <L_shift>
 80144b0:	4544      	cmp	r4, r8
 80144b2:	d928      	bls.n	8014506 <__hexnan+0xf6>
 80144b4:	4643      	mov	r3, r8
 80144b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80144ba:	f843 2b04 	str.w	r2, [r3], #4
 80144be:	42a6      	cmp	r6, r4
 80144c0:	d2f9      	bcs.n	80144b6 <__hexnan+0xa6>
 80144c2:	2200      	movs	r2, #0
 80144c4:	f843 2b04 	str.w	r2, [r3], #4
 80144c8:	429e      	cmp	r6, r3
 80144ca:	d2fb      	bcs.n	80144c4 <__hexnan+0xb4>
 80144cc:	6833      	ldr	r3, [r6, #0]
 80144ce:	b91b      	cbnz	r3, 80144d8 <__hexnan+0xc8>
 80144d0:	4546      	cmp	r6, r8
 80144d2:	d127      	bne.n	8014524 <__hexnan+0x114>
 80144d4:	2301      	movs	r3, #1
 80144d6:	6033      	str	r3, [r6, #0]
 80144d8:	2005      	movs	r0, #5
 80144da:	e026      	b.n	801452a <__hexnan+0x11a>
 80144dc:	3501      	adds	r5, #1
 80144de:	2d08      	cmp	r5, #8
 80144e0:	f10b 0b01 	add.w	fp, fp, #1
 80144e4:	dd06      	ble.n	80144f4 <__hexnan+0xe4>
 80144e6:	4544      	cmp	r4, r8
 80144e8:	d9cf      	bls.n	801448a <__hexnan+0x7a>
 80144ea:	2300      	movs	r3, #0
 80144ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80144f0:	2501      	movs	r5, #1
 80144f2:	3c04      	subs	r4, #4
 80144f4:	6822      	ldr	r2, [r4, #0]
 80144f6:	f000 000f 	and.w	r0, r0, #15
 80144fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80144fe:	6020      	str	r0, [r4, #0]
 8014500:	e7c3      	b.n	801448a <__hexnan+0x7a>
 8014502:	2508      	movs	r5, #8
 8014504:	e7c1      	b.n	801448a <__hexnan+0x7a>
 8014506:	9b01      	ldr	r3, [sp, #4]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d0df      	beq.n	80144cc <__hexnan+0xbc>
 801450c:	f04f 32ff 	mov.w	r2, #4294967295
 8014510:	f1c3 0320 	rsb	r3, r3, #32
 8014514:	fa22 f303 	lsr.w	r3, r2, r3
 8014518:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801451c:	401a      	ands	r2, r3
 801451e:	f847 2c04 	str.w	r2, [r7, #-4]
 8014522:	e7d3      	b.n	80144cc <__hexnan+0xbc>
 8014524:	3e04      	subs	r6, #4
 8014526:	e7d1      	b.n	80144cc <__hexnan+0xbc>
 8014528:	2004      	movs	r0, #4
 801452a:	b007      	add	sp, #28
 801452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014530 <__locale_ctype_ptr_l>:
 8014530:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014534:	4770      	bx	lr
	...

08014538 <__locale_ctype_ptr>:
 8014538:	4b04      	ldr	r3, [pc, #16]	; (801454c <__locale_ctype_ptr+0x14>)
 801453a:	4a05      	ldr	r2, [pc, #20]	; (8014550 <__locale_ctype_ptr+0x18>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	6a1b      	ldr	r3, [r3, #32]
 8014540:	2b00      	cmp	r3, #0
 8014542:	bf08      	it	eq
 8014544:	4613      	moveq	r3, r2
 8014546:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801454a:	4770      	bx	lr
 801454c:	2000000c 	.word	0x2000000c
 8014550:	20000070 	.word	0x20000070

08014554 <__localeconv_l>:
 8014554:	30f0      	adds	r0, #240	; 0xf0
 8014556:	4770      	bx	lr

08014558 <_localeconv_r>:
 8014558:	4b04      	ldr	r3, [pc, #16]	; (801456c <_localeconv_r+0x14>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	6a18      	ldr	r0, [r3, #32]
 801455e:	4b04      	ldr	r3, [pc, #16]	; (8014570 <_localeconv_r+0x18>)
 8014560:	2800      	cmp	r0, #0
 8014562:	bf08      	it	eq
 8014564:	4618      	moveq	r0, r3
 8014566:	30f0      	adds	r0, #240	; 0xf0
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	2000000c 	.word	0x2000000c
 8014570:	20000070 	.word	0x20000070

08014574 <_lseek_r>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	4c07      	ldr	r4, [pc, #28]	; (8014594 <_lseek_r+0x20>)
 8014578:	4605      	mov	r5, r0
 801457a:	4608      	mov	r0, r1
 801457c:	4611      	mov	r1, r2
 801457e:	2200      	movs	r2, #0
 8014580:	6022      	str	r2, [r4, #0]
 8014582:	461a      	mov	r2, r3
 8014584:	f7f0 f9da 	bl	800493c <_lseek>
 8014588:	1c43      	adds	r3, r0, #1
 801458a:	d102      	bne.n	8014592 <_lseek_r+0x1e>
 801458c:	6823      	ldr	r3, [r4, #0]
 801458e:	b103      	cbz	r3, 8014592 <_lseek_r+0x1e>
 8014590:	602b      	str	r3, [r5, #0]
 8014592:	bd38      	pop	{r3, r4, r5, pc}
 8014594:	2000c680 	.word	0x2000c680

08014598 <__swhatbuf_r>:
 8014598:	b570      	push	{r4, r5, r6, lr}
 801459a:	460e      	mov	r6, r1
 801459c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145a0:	2900      	cmp	r1, #0
 80145a2:	b096      	sub	sp, #88	; 0x58
 80145a4:	4614      	mov	r4, r2
 80145a6:	461d      	mov	r5, r3
 80145a8:	da07      	bge.n	80145ba <__swhatbuf_r+0x22>
 80145aa:	2300      	movs	r3, #0
 80145ac:	602b      	str	r3, [r5, #0]
 80145ae:	89b3      	ldrh	r3, [r6, #12]
 80145b0:	061a      	lsls	r2, r3, #24
 80145b2:	d410      	bmi.n	80145d6 <__swhatbuf_r+0x3e>
 80145b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145b8:	e00e      	b.n	80145d8 <__swhatbuf_r+0x40>
 80145ba:	466a      	mov	r2, sp
 80145bc:	f001 fc2e 	bl	8015e1c <_fstat_r>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	dbf2      	blt.n	80145aa <__swhatbuf_r+0x12>
 80145c4:	9a01      	ldr	r2, [sp, #4]
 80145c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145ce:	425a      	negs	r2, r3
 80145d0:	415a      	adcs	r2, r3
 80145d2:	602a      	str	r2, [r5, #0]
 80145d4:	e7ee      	b.n	80145b4 <__swhatbuf_r+0x1c>
 80145d6:	2340      	movs	r3, #64	; 0x40
 80145d8:	2000      	movs	r0, #0
 80145da:	6023      	str	r3, [r4, #0]
 80145dc:	b016      	add	sp, #88	; 0x58
 80145de:	bd70      	pop	{r4, r5, r6, pc}

080145e0 <__smakebuf_r>:
 80145e0:	898b      	ldrh	r3, [r1, #12]
 80145e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e4:	079d      	lsls	r5, r3, #30
 80145e6:	4606      	mov	r6, r0
 80145e8:	460c      	mov	r4, r1
 80145ea:	d507      	bpl.n	80145fc <__smakebuf_r+0x1c>
 80145ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145f0:	6023      	str	r3, [r4, #0]
 80145f2:	6123      	str	r3, [r4, #16]
 80145f4:	2301      	movs	r3, #1
 80145f6:	6163      	str	r3, [r4, #20]
 80145f8:	b002      	add	sp, #8
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	ab01      	add	r3, sp, #4
 80145fe:	466a      	mov	r2, sp
 8014600:	f7ff ffca 	bl	8014598 <__swhatbuf_r>
 8014604:	9900      	ldr	r1, [sp, #0]
 8014606:	4605      	mov	r5, r0
 8014608:	4630      	mov	r0, r6
 801460a:	f000 fca9 	bl	8014f60 <_malloc_r>
 801460e:	b948      	cbnz	r0, 8014624 <__smakebuf_r+0x44>
 8014610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014614:	059a      	lsls	r2, r3, #22
 8014616:	d4ef      	bmi.n	80145f8 <__smakebuf_r+0x18>
 8014618:	f023 0303 	bic.w	r3, r3, #3
 801461c:	f043 0302 	orr.w	r3, r3, #2
 8014620:	81a3      	strh	r3, [r4, #12]
 8014622:	e7e3      	b.n	80145ec <__smakebuf_r+0xc>
 8014624:	4b0d      	ldr	r3, [pc, #52]	; (801465c <__smakebuf_r+0x7c>)
 8014626:	62b3      	str	r3, [r6, #40]	; 0x28
 8014628:	89a3      	ldrh	r3, [r4, #12]
 801462a:	6020      	str	r0, [r4, #0]
 801462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	9b00      	ldr	r3, [sp, #0]
 8014634:	6163      	str	r3, [r4, #20]
 8014636:	9b01      	ldr	r3, [sp, #4]
 8014638:	6120      	str	r0, [r4, #16]
 801463a:	b15b      	cbz	r3, 8014654 <__smakebuf_r+0x74>
 801463c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014640:	4630      	mov	r0, r6
 8014642:	f001 fbfd 	bl	8015e40 <_isatty_r>
 8014646:	b128      	cbz	r0, 8014654 <__smakebuf_r+0x74>
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	f023 0303 	bic.w	r3, r3, #3
 801464e:	f043 0301 	orr.w	r3, r3, #1
 8014652:	81a3      	strh	r3, [r4, #12]
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	431d      	orrs	r5, r3
 8014658:	81a5      	strh	r5, [r4, #12]
 801465a:	e7cd      	b.n	80145f8 <__smakebuf_r+0x18>
 801465c:	08013d99 	.word	0x08013d99

08014660 <malloc>:
 8014660:	4b02      	ldr	r3, [pc, #8]	; (801466c <malloc+0xc>)
 8014662:	4601      	mov	r1, r0
 8014664:	6818      	ldr	r0, [r3, #0]
 8014666:	f000 bc7b 	b.w	8014f60 <_malloc_r>
 801466a:	bf00      	nop
 801466c:	2000000c 	.word	0x2000000c

08014670 <__ascii_mbtowc>:
 8014670:	b082      	sub	sp, #8
 8014672:	b901      	cbnz	r1, 8014676 <__ascii_mbtowc+0x6>
 8014674:	a901      	add	r1, sp, #4
 8014676:	b142      	cbz	r2, 801468a <__ascii_mbtowc+0x1a>
 8014678:	b14b      	cbz	r3, 801468e <__ascii_mbtowc+0x1e>
 801467a:	7813      	ldrb	r3, [r2, #0]
 801467c:	600b      	str	r3, [r1, #0]
 801467e:	7812      	ldrb	r2, [r2, #0]
 8014680:	1c10      	adds	r0, r2, #0
 8014682:	bf18      	it	ne
 8014684:	2001      	movne	r0, #1
 8014686:	b002      	add	sp, #8
 8014688:	4770      	bx	lr
 801468a:	4610      	mov	r0, r2
 801468c:	e7fb      	b.n	8014686 <__ascii_mbtowc+0x16>
 801468e:	f06f 0001 	mvn.w	r0, #1
 8014692:	e7f8      	b.n	8014686 <__ascii_mbtowc+0x16>

08014694 <memcpy>:
 8014694:	b510      	push	{r4, lr}
 8014696:	1e43      	subs	r3, r0, #1
 8014698:	440a      	add	r2, r1
 801469a:	4291      	cmp	r1, r2
 801469c:	d100      	bne.n	80146a0 <memcpy+0xc>
 801469e:	bd10      	pop	{r4, pc}
 80146a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146a8:	e7f7      	b.n	801469a <memcpy+0x6>

080146aa <_Balloc>:
 80146aa:	b570      	push	{r4, r5, r6, lr}
 80146ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80146ae:	4604      	mov	r4, r0
 80146b0:	460e      	mov	r6, r1
 80146b2:	b93d      	cbnz	r5, 80146c4 <_Balloc+0x1a>
 80146b4:	2010      	movs	r0, #16
 80146b6:	f7ff ffd3 	bl	8014660 <malloc>
 80146ba:	6260      	str	r0, [r4, #36]	; 0x24
 80146bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80146c0:	6005      	str	r5, [r0, #0]
 80146c2:	60c5      	str	r5, [r0, #12]
 80146c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80146c6:	68eb      	ldr	r3, [r5, #12]
 80146c8:	b183      	cbz	r3, 80146ec <_Balloc+0x42>
 80146ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146cc:	68db      	ldr	r3, [r3, #12]
 80146ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80146d2:	b9b8      	cbnz	r0, 8014704 <_Balloc+0x5a>
 80146d4:	2101      	movs	r1, #1
 80146d6:	fa01 f506 	lsl.w	r5, r1, r6
 80146da:	1d6a      	adds	r2, r5, #5
 80146dc:	0092      	lsls	r2, r2, #2
 80146de:	4620      	mov	r0, r4
 80146e0:	f000 fbe1 	bl	8014ea6 <_calloc_r>
 80146e4:	b160      	cbz	r0, 8014700 <_Balloc+0x56>
 80146e6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80146ea:	e00e      	b.n	801470a <_Balloc+0x60>
 80146ec:	2221      	movs	r2, #33	; 0x21
 80146ee:	2104      	movs	r1, #4
 80146f0:	4620      	mov	r0, r4
 80146f2:	f000 fbd8 	bl	8014ea6 <_calloc_r>
 80146f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146f8:	60e8      	str	r0, [r5, #12]
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d1e4      	bne.n	80146ca <_Balloc+0x20>
 8014700:	2000      	movs	r0, #0
 8014702:	bd70      	pop	{r4, r5, r6, pc}
 8014704:	6802      	ldr	r2, [r0, #0]
 8014706:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801470a:	2300      	movs	r3, #0
 801470c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014710:	e7f7      	b.n	8014702 <_Balloc+0x58>

08014712 <_Bfree>:
 8014712:	b570      	push	{r4, r5, r6, lr}
 8014714:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014716:	4606      	mov	r6, r0
 8014718:	460d      	mov	r5, r1
 801471a:	b93c      	cbnz	r4, 801472c <_Bfree+0x1a>
 801471c:	2010      	movs	r0, #16
 801471e:	f7ff ff9f 	bl	8014660 <malloc>
 8014722:	6270      	str	r0, [r6, #36]	; 0x24
 8014724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014728:	6004      	str	r4, [r0, #0]
 801472a:	60c4      	str	r4, [r0, #12]
 801472c:	b13d      	cbz	r5, 801473e <_Bfree+0x2c>
 801472e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014730:	686a      	ldr	r2, [r5, #4]
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014738:	6029      	str	r1, [r5, #0]
 801473a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801473e:	bd70      	pop	{r4, r5, r6, pc}

08014740 <__multadd>:
 8014740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014744:	690d      	ldr	r5, [r1, #16]
 8014746:	461f      	mov	r7, r3
 8014748:	4606      	mov	r6, r0
 801474a:	460c      	mov	r4, r1
 801474c:	f101 0c14 	add.w	ip, r1, #20
 8014750:	2300      	movs	r3, #0
 8014752:	f8dc 0000 	ldr.w	r0, [ip]
 8014756:	b281      	uxth	r1, r0
 8014758:	fb02 7101 	mla	r1, r2, r1, r7
 801475c:	0c0f      	lsrs	r7, r1, #16
 801475e:	0c00      	lsrs	r0, r0, #16
 8014760:	fb02 7000 	mla	r0, r2, r0, r7
 8014764:	b289      	uxth	r1, r1
 8014766:	3301      	adds	r3, #1
 8014768:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801476c:	429d      	cmp	r5, r3
 801476e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014772:	f84c 1b04 	str.w	r1, [ip], #4
 8014776:	dcec      	bgt.n	8014752 <__multadd+0x12>
 8014778:	b1d7      	cbz	r7, 80147b0 <__multadd+0x70>
 801477a:	68a3      	ldr	r3, [r4, #8]
 801477c:	42ab      	cmp	r3, r5
 801477e:	dc12      	bgt.n	80147a6 <__multadd+0x66>
 8014780:	6861      	ldr	r1, [r4, #4]
 8014782:	4630      	mov	r0, r6
 8014784:	3101      	adds	r1, #1
 8014786:	f7ff ff90 	bl	80146aa <_Balloc>
 801478a:	6922      	ldr	r2, [r4, #16]
 801478c:	3202      	adds	r2, #2
 801478e:	f104 010c 	add.w	r1, r4, #12
 8014792:	4680      	mov	r8, r0
 8014794:	0092      	lsls	r2, r2, #2
 8014796:	300c      	adds	r0, #12
 8014798:	f7ff ff7c 	bl	8014694 <memcpy>
 801479c:	4621      	mov	r1, r4
 801479e:	4630      	mov	r0, r6
 80147a0:	f7ff ffb7 	bl	8014712 <_Bfree>
 80147a4:	4644      	mov	r4, r8
 80147a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80147aa:	3501      	adds	r5, #1
 80147ac:	615f      	str	r7, [r3, #20]
 80147ae:	6125      	str	r5, [r4, #16]
 80147b0:	4620      	mov	r0, r4
 80147b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147b6 <__s2b>:
 80147b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147ba:	460c      	mov	r4, r1
 80147bc:	4615      	mov	r5, r2
 80147be:	461f      	mov	r7, r3
 80147c0:	2209      	movs	r2, #9
 80147c2:	3308      	adds	r3, #8
 80147c4:	4606      	mov	r6, r0
 80147c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80147ca:	2100      	movs	r1, #0
 80147cc:	2201      	movs	r2, #1
 80147ce:	429a      	cmp	r2, r3
 80147d0:	db20      	blt.n	8014814 <__s2b+0x5e>
 80147d2:	4630      	mov	r0, r6
 80147d4:	f7ff ff69 	bl	80146aa <_Balloc>
 80147d8:	9b08      	ldr	r3, [sp, #32]
 80147da:	6143      	str	r3, [r0, #20]
 80147dc:	2d09      	cmp	r5, #9
 80147de:	f04f 0301 	mov.w	r3, #1
 80147e2:	6103      	str	r3, [r0, #16]
 80147e4:	dd19      	ble.n	801481a <__s2b+0x64>
 80147e6:	f104 0809 	add.w	r8, r4, #9
 80147ea:	46c1      	mov	r9, r8
 80147ec:	442c      	add	r4, r5
 80147ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80147f2:	4601      	mov	r1, r0
 80147f4:	3b30      	subs	r3, #48	; 0x30
 80147f6:	220a      	movs	r2, #10
 80147f8:	4630      	mov	r0, r6
 80147fa:	f7ff ffa1 	bl	8014740 <__multadd>
 80147fe:	45a1      	cmp	r9, r4
 8014800:	d1f5      	bne.n	80147ee <__s2b+0x38>
 8014802:	eb08 0405 	add.w	r4, r8, r5
 8014806:	3c08      	subs	r4, #8
 8014808:	1b2d      	subs	r5, r5, r4
 801480a:	1963      	adds	r3, r4, r5
 801480c:	42bb      	cmp	r3, r7
 801480e:	db07      	blt.n	8014820 <__s2b+0x6a>
 8014810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014814:	0052      	lsls	r2, r2, #1
 8014816:	3101      	adds	r1, #1
 8014818:	e7d9      	b.n	80147ce <__s2b+0x18>
 801481a:	340a      	adds	r4, #10
 801481c:	2509      	movs	r5, #9
 801481e:	e7f3      	b.n	8014808 <__s2b+0x52>
 8014820:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014824:	4601      	mov	r1, r0
 8014826:	3b30      	subs	r3, #48	; 0x30
 8014828:	220a      	movs	r2, #10
 801482a:	4630      	mov	r0, r6
 801482c:	f7ff ff88 	bl	8014740 <__multadd>
 8014830:	e7eb      	b.n	801480a <__s2b+0x54>

08014832 <__hi0bits>:
 8014832:	0c02      	lsrs	r2, r0, #16
 8014834:	0412      	lsls	r2, r2, #16
 8014836:	4603      	mov	r3, r0
 8014838:	b9b2      	cbnz	r2, 8014868 <__hi0bits+0x36>
 801483a:	0403      	lsls	r3, r0, #16
 801483c:	2010      	movs	r0, #16
 801483e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014842:	bf04      	itt	eq
 8014844:	021b      	lsleq	r3, r3, #8
 8014846:	3008      	addeq	r0, #8
 8014848:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801484c:	bf04      	itt	eq
 801484e:	011b      	lsleq	r3, r3, #4
 8014850:	3004      	addeq	r0, #4
 8014852:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014856:	bf04      	itt	eq
 8014858:	009b      	lsleq	r3, r3, #2
 801485a:	3002      	addeq	r0, #2
 801485c:	2b00      	cmp	r3, #0
 801485e:	db06      	blt.n	801486e <__hi0bits+0x3c>
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	d503      	bpl.n	801486c <__hi0bits+0x3a>
 8014864:	3001      	adds	r0, #1
 8014866:	4770      	bx	lr
 8014868:	2000      	movs	r0, #0
 801486a:	e7e8      	b.n	801483e <__hi0bits+0xc>
 801486c:	2020      	movs	r0, #32
 801486e:	4770      	bx	lr

08014870 <__lo0bits>:
 8014870:	6803      	ldr	r3, [r0, #0]
 8014872:	f013 0207 	ands.w	r2, r3, #7
 8014876:	4601      	mov	r1, r0
 8014878:	d00b      	beq.n	8014892 <__lo0bits+0x22>
 801487a:	07da      	lsls	r2, r3, #31
 801487c:	d423      	bmi.n	80148c6 <__lo0bits+0x56>
 801487e:	0798      	lsls	r0, r3, #30
 8014880:	bf49      	itett	mi
 8014882:	085b      	lsrmi	r3, r3, #1
 8014884:	089b      	lsrpl	r3, r3, #2
 8014886:	2001      	movmi	r0, #1
 8014888:	600b      	strmi	r3, [r1, #0]
 801488a:	bf5c      	itt	pl
 801488c:	600b      	strpl	r3, [r1, #0]
 801488e:	2002      	movpl	r0, #2
 8014890:	4770      	bx	lr
 8014892:	b298      	uxth	r0, r3
 8014894:	b9a8      	cbnz	r0, 80148c2 <__lo0bits+0x52>
 8014896:	0c1b      	lsrs	r3, r3, #16
 8014898:	2010      	movs	r0, #16
 801489a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801489e:	bf04      	itt	eq
 80148a0:	0a1b      	lsreq	r3, r3, #8
 80148a2:	3008      	addeq	r0, #8
 80148a4:	071a      	lsls	r2, r3, #28
 80148a6:	bf04      	itt	eq
 80148a8:	091b      	lsreq	r3, r3, #4
 80148aa:	3004      	addeq	r0, #4
 80148ac:	079a      	lsls	r2, r3, #30
 80148ae:	bf04      	itt	eq
 80148b0:	089b      	lsreq	r3, r3, #2
 80148b2:	3002      	addeq	r0, #2
 80148b4:	07da      	lsls	r2, r3, #31
 80148b6:	d402      	bmi.n	80148be <__lo0bits+0x4e>
 80148b8:	085b      	lsrs	r3, r3, #1
 80148ba:	d006      	beq.n	80148ca <__lo0bits+0x5a>
 80148bc:	3001      	adds	r0, #1
 80148be:	600b      	str	r3, [r1, #0]
 80148c0:	4770      	bx	lr
 80148c2:	4610      	mov	r0, r2
 80148c4:	e7e9      	b.n	801489a <__lo0bits+0x2a>
 80148c6:	2000      	movs	r0, #0
 80148c8:	4770      	bx	lr
 80148ca:	2020      	movs	r0, #32
 80148cc:	4770      	bx	lr

080148ce <__i2b>:
 80148ce:	b510      	push	{r4, lr}
 80148d0:	460c      	mov	r4, r1
 80148d2:	2101      	movs	r1, #1
 80148d4:	f7ff fee9 	bl	80146aa <_Balloc>
 80148d8:	2201      	movs	r2, #1
 80148da:	6144      	str	r4, [r0, #20]
 80148dc:	6102      	str	r2, [r0, #16]
 80148de:	bd10      	pop	{r4, pc}

080148e0 <__multiply>:
 80148e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e4:	4614      	mov	r4, r2
 80148e6:	690a      	ldr	r2, [r1, #16]
 80148e8:	6923      	ldr	r3, [r4, #16]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	bfb8      	it	lt
 80148ee:	460b      	movlt	r3, r1
 80148f0:	4688      	mov	r8, r1
 80148f2:	bfbc      	itt	lt
 80148f4:	46a0      	movlt	r8, r4
 80148f6:	461c      	movlt	r4, r3
 80148f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80148fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014900:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014908:	eb07 0609 	add.w	r6, r7, r9
 801490c:	42b3      	cmp	r3, r6
 801490e:	bfb8      	it	lt
 8014910:	3101      	addlt	r1, #1
 8014912:	f7ff feca 	bl	80146aa <_Balloc>
 8014916:	f100 0514 	add.w	r5, r0, #20
 801491a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801491e:	462b      	mov	r3, r5
 8014920:	2200      	movs	r2, #0
 8014922:	4573      	cmp	r3, lr
 8014924:	d316      	bcc.n	8014954 <__multiply+0x74>
 8014926:	f104 0214 	add.w	r2, r4, #20
 801492a:	f108 0114 	add.w	r1, r8, #20
 801492e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014932:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	9b00      	ldr	r3, [sp, #0]
 801493a:	9201      	str	r2, [sp, #4]
 801493c:	4293      	cmp	r3, r2
 801493e:	d80c      	bhi.n	801495a <__multiply+0x7a>
 8014940:	2e00      	cmp	r6, #0
 8014942:	dd03      	ble.n	801494c <__multiply+0x6c>
 8014944:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014948:	2b00      	cmp	r3, #0
 801494a:	d05d      	beq.n	8014a08 <__multiply+0x128>
 801494c:	6106      	str	r6, [r0, #16]
 801494e:	b003      	add	sp, #12
 8014950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014954:	f843 2b04 	str.w	r2, [r3], #4
 8014958:	e7e3      	b.n	8014922 <__multiply+0x42>
 801495a:	f8b2 b000 	ldrh.w	fp, [r2]
 801495e:	f1bb 0f00 	cmp.w	fp, #0
 8014962:	d023      	beq.n	80149ac <__multiply+0xcc>
 8014964:	4689      	mov	r9, r1
 8014966:	46ac      	mov	ip, r5
 8014968:	f04f 0800 	mov.w	r8, #0
 801496c:	f859 4b04 	ldr.w	r4, [r9], #4
 8014970:	f8dc a000 	ldr.w	sl, [ip]
 8014974:	b2a3      	uxth	r3, r4
 8014976:	fa1f fa8a 	uxth.w	sl, sl
 801497a:	fb0b a303 	mla	r3, fp, r3, sl
 801497e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014982:	f8dc 4000 	ldr.w	r4, [ip]
 8014986:	4443      	add	r3, r8
 8014988:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801498c:	fb0b 840a 	mla	r4, fp, sl, r8
 8014990:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014994:	46e2      	mov	sl, ip
 8014996:	b29b      	uxth	r3, r3
 8014998:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801499c:	454f      	cmp	r7, r9
 801499e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80149a2:	f84a 3b04 	str.w	r3, [sl], #4
 80149a6:	d82b      	bhi.n	8014a00 <__multiply+0x120>
 80149a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80149ac:	9b01      	ldr	r3, [sp, #4]
 80149ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80149b2:	3204      	adds	r2, #4
 80149b4:	f1ba 0f00 	cmp.w	sl, #0
 80149b8:	d020      	beq.n	80149fc <__multiply+0x11c>
 80149ba:	682b      	ldr	r3, [r5, #0]
 80149bc:	4689      	mov	r9, r1
 80149be:	46a8      	mov	r8, r5
 80149c0:	f04f 0b00 	mov.w	fp, #0
 80149c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80149c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80149cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80149d0:	445c      	add	r4, fp
 80149d2:	46c4      	mov	ip, r8
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80149da:	f84c 3b04 	str.w	r3, [ip], #4
 80149de:	f859 3b04 	ldr.w	r3, [r9], #4
 80149e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80149e6:	0c1b      	lsrs	r3, r3, #16
 80149e8:	fb0a b303 	mla	r3, sl, r3, fp
 80149ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80149f0:	454f      	cmp	r7, r9
 80149f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80149f6:	d805      	bhi.n	8014a04 <__multiply+0x124>
 80149f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80149fc:	3504      	adds	r5, #4
 80149fe:	e79b      	b.n	8014938 <__multiply+0x58>
 8014a00:	46d4      	mov	ip, sl
 8014a02:	e7b3      	b.n	801496c <__multiply+0x8c>
 8014a04:	46e0      	mov	r8, ip
 8014a06:	e7dd      	b.n	80149c4 <__multiply+0xe4>
 8014a08:	3e01      	subs	r6, #1
 8014a0a:	e799      	b.n	8014940 <__multiply+0x60>

08014a0c <__pow5mult>:
 8014a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a10:	4615      	mov	r5, r2
 8014a12:	f012 0203 	ands.w	r2, r2, #3
 8014a16:	4606      	mov	r6, r0
 8014a18:	460f      	mov	r7, r1
 8014a1a:	d007      	beq.n	8014a2c <__pow5mult+0x20>
 8014a1c:	3a01      	subs	r2, #1
 8014a1e:	4c21      	ldr	r4, [pc, #132]	; (8014aa4 <__pow5mult+0x98>)
 8014a20:	2300      	movs	r3, #0
 8014a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014a26:	f7ff fe8b 	bl	8014740 <__multadd>
 8014a2a:	4607      	mov	r7, r0
 8014a2c:	10ad      	asrs	r5, r5, #2
 8014a2e:	d035      	beq.n	8014a9c <__pow5mult+0x90>
 8014a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014a32:	b93c      	cbnz	r4, 8014a44 <__pow5mult+0x38>
 8014a34:	2010      	movs	r0, #16
 8014a36:	f7ff fe13 	bl	8014660 <malloc>
 8014a3a:	6270      	str	r0, [r6, #36]	; 0x24
 8014a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a40:	6004      	str	r4, [r0, #0]
 8014a42:	60c4      	str	r4, [r0, #12]
 8014a44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a4c:	b94c      	cbnz	r4, 8014a62 <__pow5mult+0x56>
 8014a4e:	f240 2171 	movw	r1, #625	; 0x271
 8014a52:	4630      	mov	r0, r6
 8014a54:	f7ff ff3b 	bl	80148ce <__i2b>
 8014a58:	2300      	movs	r3, #0
 8014a5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a5e:	4604      	mov	r4, r0
 8014a60:	6003      	str	r3, [r0, #0]
 8014a62:	f04f 0800 	mov.w	r8, #0
 8014a66:	07eb      	lsls	r3, r5, #31
 8014a68:	d50a      	bpl.n	8014a80 <__pow5mult+0x74>
 8014a6a:	4639      	mov	r1, r7
 8014a6c:	4622      	mov	r2, r4
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f7ff ff36 	bl	80148e0 <__multiply>
 8014a74:	4639      	mov	r1, r7
 8014a76:	4681      	mov	r9, r0
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f7ff fe4a 	bl	8014712 <_Bfree>
 8014a7e:	464f      	mov	r7, r9
 8014a80:	106d      	asrs	r5, r5, #1
 8014a82:	d00b      	beq.n	8014a9c <__pow5mult+0x90>
 8014a84:	6820      	ldr	r0, [r4, #0]
 8014a86:	b938      	cbnz	r0, 8014a98 <__pow5mult+0x8c>
 8014a88:	4622      	mov	r2, r4
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	4630      	mov	r0, r6
 8014a8e:	f7ff ff27 	bl	80148e0 <__multiply>
 8014a92:	6020      	str	r0, [r4, #0]
 8014a94:	f8c0 8000 	str.w	r8, [r0]
 8014a98:	4604      	mov	r4, r0
 8014a9a:	e7e4      	b.n	8014a66 <__pow5mult+0x5a>
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aa2:	bf00      	nop
 8014aa4:	08016910 	.word	0x08016910

08014aa8 <__lshift>:
 8014aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014aac:	460c      	mov	r4, r1
 8014aae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ab2:	6923      	ldr	r3, [r4, #16]
 8014ab4:	6849      	ldr	r1, [r1, #4]
 8014ab6:	eb0a 0903 	add.w	r9, sl, r3
 8014aba:	68a3      	ldr	r3, [r4, #8]
 8014abc:	4607      	mov	r7, r0
 8014abe:	4616      	mov	r6, r2
 8014ac0:	f109 0501 	add.w	r5, r9, #1
 8014ac4:	42ab      	cmp	r3, r5
 8014ac6:	db32      	blt.n	8014b2e <__lshift+0x86>
 8014ac8:	4638      	mov	r0, r7
 8014aca:	f7ff fdee 	bl	80146aa <_Balloc>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	4680      	mov	r8, r0
 8014ad2:	f100 0114 	add.w	r1, r0, #20
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	4553      	cmp	r3, sl
 8014ada:	db2b      	blt.n	8014b34 <__lshift+0x8c>
 8014adc:	6920      	ldr	r0, [r4, #16]
 8014ade:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ae2:	f104 0314 	add.w	r3, r4, #20
 8014ae6:	f016 021f 	ands.w	r2, r6, #31
 8014aea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014aee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014af2:	d025      	beq.n	8014b40 <__lshift+0x98>
 8014af4:	f1c2 0e20 	rsb	lr, r2, #32
 8014af8:	2000      	movs	r0, #0
 8014afa:	681e      	ldr	r6, [r3, #0]
 8014afc:	468a      	mov	sl, r1
 8014afe:	4096      	lsls	r6, r2
 8014b00:	4330      	orrs	r0, r6
 8014b02:	f84a 0b04 	str.w	r0, [sl], #4
 8014b06:	f853 0b04 	ldr.w	r0, [r3], #4
 8014b0a:	459c      	cmp	ip, r3
 8014b0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014b10:	d814      	bhi.n	8014b3c <__lshift+0x94>
 8014b12:	6048      	str	r0, [r1, #4]
 8014b14:	b108      	cbz	r0, 8014b1a <__lshift+0x72>
 8014b16:	f109 0502 	add.w	r5, r9, #2
 8014b1a:	3d01      	subs	r5, #1
 8014b1c:	4638      	mov	r0, r7
 8014b1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014b22:	4621      	mov	r1, r4
 8014b24:	f7ff fdf5 	bl	8014712 <_Bfree>
 8014b28:	4640      	mov	r0, r8
 8014b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2e:	3101      	adds	r1, #1
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	e7c7      	b.n	8014ac4 <__lshift+0x1c>
 8014b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	e7cd      	b.n	8014ad8 <__lshift+0x30>
 8014b3c:	4651      	mov	r1, sl
 8014b3e:	e7dc      	b.n	8014afa <__lshift+0x52>
 8014b40:	3904      	subs	r1, #4
 8014b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b46:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b4a:	459c      	cmp	ip, r3
 8014b4c:	d8f9      	bhi.n	8014b42 <__lshift+0x9a>
 8014b4e:	e7e4      	b.n	8014b1a <__lshift+0x72>

08014b50 <__mcmp>:
 8014b50:	6903      	ldr	r3, [r0, #16]
 8014b52:	690a      	ldr	r2, [r1, #16]
 8014b54:	1a9b      	subs	r3, r3, r2
 8014b56:	b530      	push	{r4, r5, lr}
 8014b58:	d10c      	bne.n	8014b74 <__mcmp+0x24>
 8014b5a:	0092      	lsls	r2, r2, #2
 8014b5c:	3014      	adds	r0, #20
 8014b5e:	3114      	adds	r1, #20
 8014b60:	1884      	adds	r4, r0, r2
 8014b62:	4411      	add	r1, r2
 8014b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014b6c:	4295      	cmp	r5, r2
 8014b6e:	d003      	beq.n	8014b78 <__mcmp+0x28>
 8014b70:	d305      	bcc.n	8014b7e <__mcmp+0x2e>
 8014b72:	2301      	movs	r3, #1
 8014b74:	4618      	mov	r0, r3
 8014b76:	bd30      	pop	{r4, r5, pc}
 8014b78:	42a0      	cmp	r0, r4
 8014b7a:	d3f3      	bcc.n	8014b64 <__mcmp+0x14>
 8014b7c:	e7fa      	b.n	8014b74 <__mcmp+0x24>
 8014b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b82:	e7f7      	b.n	8014b74 <__mcmp+0x24>

08014b84 <__mdiff>:
 8014b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b88:	460d      	mov	r5, r1
 8014b8a:	4607      	mov	r7, r0
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	4628      	mov	r0, r5
 8014b90:	4614      	mov	r4, r2
 8014b92:	f7ff ffdd 	bl	8014b50 <__mcmp>
 8014b96:	1e06      	subs	r6, r0, #0
 8014b98:	d108      	bne.n	8014bac <__mdiff+0x28>
 8014b9a:	4631      	mov	r1, r6
 8014b9c:	4638      	mov	r0, r7
 8014b9e:	f7ff fd84 	bl	80146aa <_Balloc>
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bac:	bfa4      	itt	ge
 8014bae:	4623      	movge	r3, r4
 8014bb0:	462c      	movge	r4, r5
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	6861      	ldr	r1, [r4, #4]
 8014bb6:	bfa6      	itte	ge
 8014bb8:	461d      	movge	r5, r3
 8014bba:	2600      	movge	r6, #0
 8014bbc:	2601      	movlt	r6, #1
 8014bbe:	f7ff fd74 	bl	80146aa <_Balloc>
 8014bc2:	692b      	ldr	r3, [r5, #16]
 8014bc4:	60c6      	str	r6, [r0, #12]
 8014bc6:	6926      	ldr	r6, [r4, #16]
 8014bc8:	f105 0914 	add.w	r9, r5, #20
 8014bcc:	f104 0214 	add.w	r2, r4, #20
 8014bd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014bd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014bd8:	f100 0514 	add.w	r5, r0, #20
 8014bdc:	f04f 0e00 	mov.w	lr, #0
 8014be0:	f852 ab04 	ldr.w	sl, [r2], #4
 8014be4:	f859 4b04 	ldr.w	r4, [r9], #4
 8014be8:	fa1e f18a 	uxtah	r1, lr, sl
 8014bec:	b2a3      	uxth	r3, r4
 8014bee:	1ac9      	subs	r1, r1, r3
 8014bf0:	0c23      	lsrs	r3, r4, #16
 8014bf2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014bf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014bfa:	b289      	uxth	r1, r1
 8014bfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014c00:	45c8      	cmp	r8, r9
 8014c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014c06:	4694      	mov	ip, r2
 8014c08:	f845 3b04 	str.w	r3, [r5], #4
 8014c0c:	d8e8      	bhi.n	8014be0 <__mdiff+0x5c>
 8014c0e:	45bc      	cmp	ip, r7
 8014c10:	d304      	bcc.n	8014c1c <__mdiff+0x98>
 8014c12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014c16:	b183      	cbz	r3, 8014c3a <__mdiff+0xb6>
 8014c18:	6106      	str	r6, [r0, #16]
 8014c1a:	e7c5      	b.n	8014ba8 <__mdiff+0x24>
 8014c1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014c20:	fa1e f381 	uxtah	r3, lr, r1
 8014c24:	141a      	asrs	r2, r3, #16
 8014c26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014c34:	f845 3b04 	str.w	r3, [r5], #4
 8014c38:	e7e9      	b.n	8014c0e <__mdiff+0x8a>
 8014c3a:	3e01      	subs	r6, #1
 8014c3c:	e7e9      	b.n	8014c12 <__mdiff+0x8e>
	...

08014c40 <__ulp>:
 8014c40:	4b12      	ldr	r3, [pc, #72]	; (8014c8c <__ulp+0x4c>)
 8014c42:	ee10 2a90 	vmov	r2, s1
 8014c46:	401a      	ands	r2, r3
 8014c48:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	dd04      	ble.n	8014c5a <__ulp+0x1a>
 8014c50:	2000      	movs	r0, #0
 8014c52:	4619      	mov	r1, r3
 8014c54:	ec41 0b10 	vmov	d0, r0, r1
 8014c58:	4770      	bx	lr
 8014c5a:	425b      	negs	r3, r3
 8014c5c:	151b      	asrs	r3, r3, #20
 8014c5e:	2b13      	cmp	r3, #19
 8014c60:	f04f 0000 	mov.w	r0, #0
 8014c64:	f04f 0100 	mov.w	r1, #0
 8014c68:	dc04      	bgt.n	8014c74 <__ulp+0x34>
 8014c6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014c6e:	fa42 f103 	asr.w	r1, r2, r3
 8014c72:	e7ef      	b.n	8014c54 <__ulp+0x14>
 8014c74:	3b14      	subs	r3, #20
 8014c76:	2b1e      	cmp	r3, #30
 8014c78:	f04f 0201 	mov.w	r2, #1
 8014c7c:	bfda      	itte	le
 8014c7e:	f1c3 031f 	rsble	r3, r3, #31
 8014c82:	fa02 f303 	lslle.w	r3, r2, r3
 8014c86:	4613      	movgt	r3, r2
 8014c88:	4618      	mov	r0, r3
 8014c8a:	e7e3      	b.n	8014c54 <__ulp+0x14>
 8014c8c:	7ff00000 	.word	0x7ff00000

08014c90 <__b2d>:
 8014c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c92:	6905      	ldr	r5, [r0, #16]
 8014c94:	f100 0714 	add.w	r7, r0, #20
 8014c98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014c9c:	1f2e      	subs	r6, r5, #4
 8014c9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f7ff fdc5 	bl	8014832 <__hi0bits>
 8014ca8:	f1c0 0320 	rsb	r3, r0, #32
 8014cac:	280a      	cmp	r0, #10
 8014cae:	600b      	str	r3, [r1, #0]
 8014cb0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014d28 <__b2d+0x98>
 8014cb4:	dc14      	bgt.n	8014ce0 <__b2d+0x50>
 8014cb6:	f1c0 0e0b 	rsb	lr, r0, #11
 8014cba:	fa24 f10e 	lsr.w	r1, r4, lr
 8014cbe:	42b7      	cmp	r7, r6
 8014cc0:	ea41 030c 	orr.w	r3, r1, ip
 8014cc4:	bf34      	ite	cc
 8014cc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014cca:	2100      	movcs	r1, #0
 8014ccc:	3015      	adds	r0, #21
 8014cce:	fa04 f000 	lsl.w	r0, r4, r0
 8014cd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8014cd6:	ea40 0201 	orr.w	r2, r0, r1
 8014cda:	ec43 2b10 	vmov	d0, r2, r3
 8014cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ce0:	42b7      	cmp	r7, r6
 8014ce2:	bf3a      	itte	cc
 8014ce4:	f1a5 0608 	subcc.w	r6, r5, #8
 8014ce8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014cec:	2100      	movcs	r1, #0
 8014cee:	380b      	subs	r0, #11
 8014cf0:	d015      	beq.n	8014d1e <__b2d+0x8e>
 8014cf2:	4084      	lsls	r4, r0
 8014cf4:	f1c0 0520 	rsb	r5, r0, #32
 8014cf8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014cfc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014d00:	42be      	cmp	r6, r7
 8014d02:	fa21 fc05 	lsr.w	ip, r1, r5
 8014d06:	ea44 030c 	orr.w	r3, r4, ip
 8014d0a:	bf8c      	ite	hi
 8014d0c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014d10:	2400      	movls	r4, #0
 8014d12:	fa01 f000 	lsl.w	r0, r1, r0
 8014d16:	40ec      	lsrs	r4, r5
 8014d18:	ea40 0204 	orr.w	r2, r0, r4
 8014d1c:	e7dd      	b.n	8014cda <__b2d+0x4a>
 8014d1e:	ea44 030c 	orr.w	r3, r4, ip
 8014d22:	460a      	mov	r2, r1
 8014d24:	e7d9      	b.n	8014cda <__b2d+0x4a>
 8014d26:	bf00      	nop
 8014d28:	3ff00000 	.word	0x3ff00000

08014d2c <__d2b>:
 8014d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d30:	460e      	mov	r6, r1
 8014d32:	2101      	movs	r1, #1
 8014d34:	ec59 8b10 	vmov	r8, r9, d0
 8014d38:	4615      	mov	r5, r2
 8014d3a:	f7ff fcb6 	bl	80146aa <_Balloc>
 8014d3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014d42:	4607      	mov	r7, r0
 8014d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d48:	bb34      	cbnz	r4, 8014d98 <__d2b+0x6c>
 8014d4a:	9301      	str	r3, [sp, #4]
 8014d4c:	f1b8 0300 	subs.w	r3, r8, #0
 8014d50:	d027      	beq.n	8014da2 <__d2b+0x76>
 8014d52:	a802      	add	r0, sp, #8
 8014d54:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014d58:	f7ff fd8a 	bl	8014870 <__lo0bits>
 8014d5c:	9900      	ldr	r1, [sp, #0]
 8014d5e:	b1f0      	cbz	r0, 8014d9e <__d2b+0x72>
 8014d60:	9a01      	ldr	r2, [sp, #4]
 8014d62:	f1c0 0320 	rsb	r3, r0, #32
 8014d66:	fa02 f303 	lsl.w	r3, r2, r3
 8014d6a:	430b      	orrs	r3, r1
 8014d6c:	40c2      	lsrs	r2, r0
 8014d6e:	617b      	str	r3, [r7, #20]
 8014d70:	9201      	str	r2, [sp, #4]
 8014d72:	9b01      	ldr	r3, [sp, #4]
 8014d74:	61bb      	str	r3, [r7, #24]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	bf14      	ite	ne
 8014d7a:	2102      	movne	r1, #2
 8014d7c:	2101      	moveq	r1, #1
 8014d7e:	6139      	str	r1, [r7, #16]
 8014d80:	b1c4      	cbz	r4, 8014db4 <__d2b+0x88>
 8014d82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014d86:	4404      	add	r4, r0
 8014d88:	6034      	str	r4, [r6, #0]
 8014d8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d8e:	6028      	str	r0, [r5, #0]
 8014d90:	4638      	mov	r0, r7
 8014d92:	b003      	add	sp, #12
 8014d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d9c:	e7d5      	b.n	8014d4a <__d2b+0x1e>
 8014d9e:	6179      	str	r1, [r7, #20]
 8014da0:	e7e7      	b.n	8014d72 <__d2b+0x46>
 8014da2:	a801      	add	r0, sp, #4
 8014da4:	f7ff fd64 	bl	8014870 <__lo0bits>
 8014da8:	9b01      	ldr	r3, [sp, #4]
 8014daa:	617b      	str	r3, [r7, #20]
 8014dac:	2101      	movs	r1, #1
 8014dae:	6139      	str	r1, [r7, #16]
 8014db0:	3020      	adds	r0, #32
 8014db2:	e7e5      	b.n	8014d80 <__d2b+0x54>
 8014db4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014db8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014dbc:	6030      	str	r0, [r6, #0]
 8014dbe:	6918      	ldr	r0, [r3, #16]
 8014dc0:	f7ff fd37 	bl	8014832 <__hi0bits>
 8014dc4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014dc8:	e7e1      	b.n	8014d8e <__d2b+0x62>

08014dca <__ratio>:
 8014dca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dce:	4688      	mov	r8, r1
 8014dd0:	4669      	mov	r1, sp
 8014dd2:	4681      	mov	r9, r0
 8014dd4:	f7ff ff5c 	bl	8014c90 <__b2d>
 8014dd8:	a901      	add	r1, sp, #4
 8014dda:	4640      	mov	r0, r8
 8014ddc:	ec57 6b10 	vmov	r6, r7, d0
 8014de0:	f7ff ff56 	bl	8014c90 <__b2d>
 8014de4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014de8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014dec:	eba3 0c02 	sub.w	ip, r3, r2
 8014df0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014df4:	1a9b      	subs	r3, r3, r2
 8014df6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014dfa:	ec5b ab10 	vmov	sl, fp, d0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	bfce      	itee	gt
 8014e02:	463a      	movgt	r2, r7
 8014e04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014e08:	465a      	movle	r2, fp
 8014e0a:	4659      	mov	r1, fp
 8014e0c:	463d      	mov	r5, r7
 8014e0e:	bfd4      	ite	le
 8014e10:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014e14:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8014e18:	4630      	mov	r0, r6
 8014e1a:	ee10 2a10 	vmov	r2, s0
 8014e1e:	460b      	mov	r3, r1
 8014e20:	4629      	mov	r1, r5
 8014e22:	f7eb fd2b 	bl	800087c <__aeabi_ddiv>
 8014e26:	ec41 0b10 	vmov	d0, r0, r1
 8014e2a:	b003      	add	sp, #12
 8014e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e30 <__copybits>:
 8014e30:	3901      	subs	r1, #1
 8014e32:	b510      	push	{r4, lr}
 8014e34:	1149      	asrs	r1, r1, #5
 8014e36:	6914      	ldr	r4, [r2, #16]
 8014e38:	3101      	adds	r1, #1
 8014e3a:	f102 0314 	add.w	r3, r2, #20
 8014e3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014e42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014e46:	42a3      	cmp	r3, r4
 8014e48:	4602      	mov	r2, r0
 8014e4a:	d303      	bcc.n	8014e54 <__copybits+0x24>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	428a      	cmp	r2, r1
 8014e50:	d305      	bcc.n	8014e5e <__copybits+0x2e>
 8014e52:	bd10      	pop	{r4, pc}
 8014e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e58:	f840 2b04 	str.w	r2, [r0], #4
 8014e5c:	e7f3      	b.n	8014e46 <__copybits+0x16>
 8014e5e:	f842 3b04 	str.w	r3, [r2], #4
 8014e62:	e7f4      	b.n	8014e4e <__copybits+0x1e>

08014e64 <__any_on>:
 8014e64:	f100 0214 	add.w	r2, r0, #20
 8014e68:	6900      	ldr	r0, [r0, #16]
 8014e6a:	114b      	asrs	r3, r1, #5
 8014e6c:	4298      	cmp	r0, r3
 8014e6e:	b510      	push	{r4, lr}
 8014e70:	db11      	blt.n	8014e96 <__any_on+0x32>
 8014e72:	dd0a      	ble.n	8014e8a <__any_on+0x26>
 8014e74:	f011 011f 	ands.w	r1, r1, #31
 8014e78:	d007      	beq.n	8014e8a <__any_on+0x26>
 8014e7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014e7e:	fa24 f001 	lsr.w	r0, r4, r1
 8014e82:	fa00 f101 	lsl.w	r1, r0, r1
 8014e86:	428c      	cmp	r4, r1
 8014e88:	d10b      	bne.n	8014ea2 <__any_on+0x3e>
 8014e8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d803      	bhi.n	8014e9a <__any_on+0x36>
 8014e92:	2000      	movs	r0, #0
 8014e94:	bd10      	pop	{r4, pc}
 8014e96:	4603      	mov	r3, r0
 8014e98:	e7f7      	b.n	8014e8a <__any_on+0x26>
 8014e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e9e:	2900      	cmp	r1, #0
 8014ea0:	d0f5      	beq.n	8014e8e <__any_on+0x2a>
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	e7f6      	b.n	8014e94 <__any_on+0x30>

08014ea6 <_calloc_r>:
 8014ea6:	b538      	push	{r3, r4, r5, lr}
 8014ea8:	fb02 f401 	mul.w	r4, r2, r1
 8014eac:	4621      	mov	r1, r4
 8014eae:	f000 f857 	bl	8014f60 <_malloc_r>
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	b118      	cbz	r0, 8014ebe <_calloc_r+0x18>
 8014eb6:	4622      	mov	r2, r4
 8014eb8:	2100      	movs	r1, #0
 8014eba:	f7fc f8fd 	bl	80110b8 <memset>
 8014ebe:	4628      	mov	r0, r5
 8014ec0:	bd38      	pop	{r3, r4, r5, pc}
	...

08014ec4 <_free_r>:
 8014ec4:	b538      	push	{r3, r4, r5, lr}
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	2900      	cmp	r1, #0
 8014eca:	d045      	beq.n	8014f58 <_free_r+0x94>
 8014ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ed0:	1f0c      	subs	r4, r1, #4
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	bfb8      	it	lt
 8014ed6:	18e4      	addlt	r4, r4, r3
 8014ed8:	f000 ffdb 	bl	8015e92 <__malloc_lock>
 8014edc:	4a1f      	ldr	r2, [pc, #124]	; (8014f5c <_free_r+0x98>)
 8014ede:	6813      	ldr	r3, [r2, #0]
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	b933      	cbnz	r3, 8014ef2 <_free_r+0x2e>
 8014ee4:	6063      	str	r3, [r4, #4]
 8014ee6:	6014      	str	r4, [r2, #0]
 8014ee8:	4628      	mov	r0, r5
 8014eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014eee:	f000 bfd1 	b.w	8015e94 <__malloc_unlock>
 8014ef2:	42a3      	cmp	r3, r4
 8014ef4:	d90c      	bls.n	8014f10 <_free_r+0x4c>
 8014ef6:	6821      	ldr	r1, [r4, #0]
 8014ef8:	1862      	adds	r2, r4, r1
 8014efa:	4293      	cmp	r3, r2
 8014efc:	bf04      	itt	eq
 8014efe:	681a      	ldreq	r2, [r3, #0]
 8014f00:	685b      	ldreq	r3, [r3, #4]
 8014f02:	6063      	str	r3, [r4, #4]
 8014f04:	bf04      	itt	eq
 8014f06:	1852      	addeq	r2, r2, r1
 8014f08:	6022      	streq	r2, [r4, #0]
 8014f0a:	6004      	str	r4, [r0, #0]
 8014f0c:	e7ec      	b.n	8014ee8 <_free_r+0x24>
 8014f0e:	4613      	mov	r3, r2
 8014f10:	685a      	ldr	r2, [r3, #4]
 8014f12:	b10a      	cbz	r2, 8014f18 <_free_r+0x54>
 8014f14:	42a2      	cmp	r2, r4
 8014f16:	d9fa      	bls.n	8014f0e <_free_r+0x4a>
 8014f18:	6819      	ldr	r1, [r3, #0]
 8014f1a:	1858      	adds	r0, r3, r1
 8014f1c:	42a0      	cmp	r0, r4
 8014f1e:	d10b      	bne.n	8014f38 <_free_r+0x74>
 8014f20:	6820      	ldr	r0, [r4, #0]
 8014f22:	4401      	add	r1, r0
 8014f24:	1858      	adds	r0, r3, r1
 8014f26:	4282      	cmp	r2, r0
 8014f28:	6019      	str	r1, [r3, #0]
 8014f2a:	d1dd      	bne.n	8014ee8 <_free_r+0x24>
 8014f2c:	6810      	ldr	r0, [r2, #0]
 8014f2e:	6852      	ldr	r2, [r2, #4]
 8014f30:	605a      	str	r2, [r3, #4]
 8014f32:	4401      	add	r1, r0
 8014f34:	6019      	str	r1, [r3, #0]
 8014f36:	e7d7      	b.n	8014ee8 <_free_r+0x24>
 8014f38:	d902      	bls.n	8014f40 <_free_r+0x7c>
 8014f3a:	230c      	movs	r3, #12
 8014f3c:	602b      	str	r3, [r5, #0]
 8014f3e:	e7d3      	b.n	8014ee8 <_free_r+0x24>
 8014f40:	6820      	ldr	r0, [r4, #0]
 8014f42:	1821      	adds	r1, r4, r0
 8014f44:	428a      	cmp	r2, r1
 8014f46:	bf04      	itt	eq
 8014f48:	6811      	ldreq	r1, [r2, #0]
 8014f4a:	6852      	ldreq	r2, [r2, #4]
 8014f4c:	6062      	str	r2, [r4, #4]
 8014f4e:	bf04      	itt	eq
 8014f50:	1809      	addeq	r1, r1, r0
 8014f52:	6021      	streq	r1, [r4, #0]
 8014f54:	605c      	str	r4, [r3, #4]
 8014f56:	e7c7      	b.n	8014ee8 <_free_r+0x24>
 8014f58:	bd38      	pop	{r3, r4, r5, pc}
 8014f5a:	bf00      	nop
 8014f5c:	20007d74 	.word	0x20007d74

08014f60 <_malloc_r>:
 8014f60:	b570      	push	{r4, r5, r6, lr}
 8014f62:	1ccd      	adds	r5, r1, #3
 8014f64:	f025 0503 	bic.w	r5, r5, #3
 8014f68:	3508      	adds	r5, #8
 8014f6a:	2d0c      	cmp	r5, #12
 8014f6c:	bf38      	it	cc
 8014f6e:	250c      	movcc	r5, #12
 8014f70:	2d00      	cmp	r5, #0
 8014f72:	4606      	mov	r6, r0
 8014f74:	db01      	blt.n	8014f7a <_malloc_r+0x1a>
 8014f76:	42a9      	cmp	r1, r5
 8014f78:	d903      	bls.n	8014f82 <_malloc_r+0x22>
 8014f7a:	230c      	movs	r3, #12
 8014f7c:	6033      	str	r3, [r6, #0]
 8014f7e:	2000      	movs	r0, #0
 8014f80:	bd70      	pop	{r4, r5, r6, pc}
 8014f82:	f000 ff86 	bl	8015e92 <__malloc_lock>
 8014f86:	4a21      	ldr	r2, [pc, #132]	; (801500c <_malloc_r+0xac>)
 8014f88:	6814      	ldr	r4, [r2, #0]
 8014f8a:	4621      	mov	r1, r4
 8014f8c:	b991      	cbnz	r1, 8014fb4 <_malloc_r+0x54>
 8014f8e:	4c20      	ldr	r4, [pc, #128]	; (8015010 <_malloc_r+0xb0>)
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	b91b      	cbnz	r3, 8014f9c <_malloc_r+0x3c>
 8014f94:	4630      	mov	r0, r6
 8014f96:	f000 fe19 	bl	8015bcc <_sbrk_r>
 8014f9a:	6020      	str	r0, [r4, #0]
 8014f9c:	4629      	mov	r1, r5
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	f000 fe14 	bl	8015bcc <_sbrk_r>
 8014fa4:	1c43      	adds	r3, r0, #1
 8014fa6:	d124      	bne.n	8014ff2 <_malloc_r+0x92>
 8014fa8:	230c      	movs	r3, #12
 8014faa:	6033      	str	r3, [r6, #0]
 8014fac:	4630      	mov	r0, r6
 8014fae:	f000 ff71 	bl	8015e94 <__malloc_unlock>
 8014fb2:	e7e4      	b.n	8014f7e <_malloc_r+0x1e>
 8014fb4:	680b      	ldr	r3, [r1, #0]
 8014fb6:	1b5b      	subs	r3, r3, r5
 8014fb8:	d418      	bmi.n	8014fec <_malloc_r+0x8c>
 8014fba:	2b0b      	cmp	r3, #11
 8014fbc:	d90f      	bls.n	8014fde <_malloc_r+0x7e>
 8014fbe:	600b      	str	r3, [r1, #0]
 8014fc0:	50cd      	str	r5, [r1, r3]
 8014fc2:	18cc      	adds	r4, r1, r3
 8014fc4:	4630      	mov	r0, r6
 8014fc6:	f000 ff65 	bl	8015e94 <__malloc_unlock>
 8014fca:	f104 000b 	add.w	r0, r4, #11
 8014fce:	1d23      	adds	r3, r4, #4
 8014fd0:	f020 0007 	bic.w	r0, r0, #7
 8014fd4:	1ac3      	subs	r3, r0, r3
 8014fd6:	d0d3      	beq.n	8014f80 <_malloc_r+0x20>
 8014fd8:	425a      	negs	r2, r3
 8014fda:	50e2      	str	r2, [r4, r3]
 8014fdc:	e7d0      	b.n	8014f80 <_malloc_r+0x20>
 8014fde:	428c      	cmp	r4, r1
 8014fe0:	684b      	ldr	r3, [r1, #4]
 8014fe2:	bf16      	itet	ne
 8014fe4:	6063      	strne	r3, [r4, #4]
 8014fe6:	6013      	streq	r3, [r2, #0]
 8014fe8:	460c      	movne	r4, r1
 8014fea:	e7eb      	b.n	8014fc4 <_malloc_r+0x64>
 8014fec:	460c      	mov	r4, r1
 8014fee:	6849      	ldr	r1, [r1, #4]
 8014ff0:	e7cc      	b.n	8014f8c <_malloc_r+0x2c>
 8014ff2:	1cc4      	adds	r4, r0, #3
 8014ff4:	f024 0403 	bic.w	r4, r4, #3
 8014ff8:	42a0      	cmp	r0, r4
 8014ffa:	d005      	beq.n	8015008 <_malloc_r+0xa8>
 8014ffc:	1a21      	subs	r1, r4, r0
 8014ffe:	4630      	mov	r0, r6
 8015000:	f000 fde4 	bl	8015bcc <_sbrk_r>
 8015004:	3001      	adds	r0, #1
 8015006:	d0cf      	beq.n	8014fa8 <_malloc_r+0x48>
 8015008:	6025      	str	r5, [r4, #0]
 801500a:	e7db      	b.n	8014fc4 <_malloc_r+0x64>
 801500c:	20007d74 	.word	0x20007d74
 8015010:	20007d78 	.word	0x20007d78

08015014 <__ssputs_r>:
 8015014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015018:	688e      	ldr	r6, [r1, #8]
 801501a:	429e      	cmp	r6, r3
 801501c:	4682      	mov	sl, r0
 801501e:	460c      	mov	r4, r1
 8015020:	4690      	mov	r8, r2
 8015022:	4699      	mov	r9, r3
 8015024:	d837      	bhi.n	8015096 <__ssputs_r+0x82>
 8015026:	898a      	ldrh	r2, [r1, #12]
 8015028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801502c:	d031      	beq.n	8015092 <__ssputs_r+0x7e>
 801502e:	6825      	ldr	r5, [r4, #0]
 8015030:	6909      	ldr	r1, [r1, #16]
 8015032:	1a6f      	subs	r7, r5, r1
 8015034:	6965      	ldr	r5, [r4, #20]
 8015036:	2302      	movs	r3, #2
 8015038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801503c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015040:	f109 0301 	add.w	r3, r9, #1
 8015044:	443b      	add	r3, r7
 8015046:	429d      	cmp	r5, r3
 8015048:	bf38      	it	cc
 801504a:	461d      	movcc	r5, r3
 801504c:	0553      	lsls	r3, r2, #21
 801504e:	d530      	bpl.n	80150b2 <__ssputs_r+0x9e>
 8015050:	4629      	mov	r1, r5
 8015052:	f7ff ff85 	bl	8014f60 <_malloc_r>
 8015056:	4606      	mov	r6, r0
 8015058:	b950      	cbnz	r0, 8015070 <__ssputs_r+0x5c>
 801505a:	230c      	movs	r3, #12
 801505c:	f8ca 3000 	str.w	r3, [sl]
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015066:	81a3      	strh	r3, [r4, #12]
 8015068:	f04f 30ff 	mov.w	r0, #4294967295
 801506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015070:	463a      	mov	r2, r7
 8015072:	6921      	ldr	r1, [r4, #16]
 8015074:	f7ff fb0e 	bl	8014694 <memcpy>
 8015078:	89a3      	ldrh	r3, [r4, #12]
 801507a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015082:	81a3      	strh	r3, [r4, #12]
 8015084:	6126      	str	r6, [r4, #16]
 8015086:	6165      	str	r5, [r4, #20]
 8015088:	443e      	add	r6, r7
 801508a:	1bed      	subs	r5, r5, r7
 801508c:	6026      	str	r6, [r4, #0]
 801508e:	60a5      	str	r5, [r4, #8]
 8015090:	464e      	mov	r6, r9
 8015092:	454e      	cmp	r6, r9
 8015094:	d900      	bls.n	8015098 <__ssputs_r+0x84>
 8015096:	464e      	mov	r6, r9
 8015098:	4632      	mov	r2, r6
 801509a:	4641      	mov	r1, r8
 801509c:	6820      	ldr	r0, [r4, #0]
 801509e:	f000 fedf 	bl	8015e60 <memmove>
 80150a2:	68a3      	ldr	r3, [r4, #8]
 80150a4:	1b9b      	subs	r3, r3, r6
 80150a6:	60a3      	str	r3, [r4, #8]
 80150a8:	6823      	ldr	r3, [r4, #0]
 80150aa:	441e      	add	r6, r3
 80150ac:	6026      	str	r6, [r4, #0]
 80150ae:	2000      	movs	r0, #0
 80150b0:	e7dc      	b.n	801506c <__ssputs_r+0x58>
 80150b2:	462a      	mov	r2, r5
 80150b4:	f000 feef 	bl	8015e96 <_realloc_r>
 80150b8:	4606      	mov	r6, r0
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d1e2      	bne.n	8015084 <__ssputs_r+0x70>
 80150be:	6921      	ldr	r1, [r4, #16]
 80150c0:	4650      	mov	r0, sl
 80150c2:	f7ff feff 	bl	8014ec4 <_free_r>
 80150c6:	e7c8      	b.n	801505a <__ssputs_r+0x46>

080150c8 <_svfiprintf_r>:
 80150c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150cc:	461d      	mov	r5, r3
 80150ce:	898b      	ldrh	r3, [r1, #12]
 80150d0:	061f      	lsls	r7, r3, #24
 80150d2:	b09d      	sub	sp, #116	; 0x74
 80150d4:	4680      	mov	r8, r0
 80150d6:	460c      	mov	r4, r1
 80150d8:	4616      	mov	r6, r2
 80150da:	d50f      	bpl.n	80150fc <_svfiprintf_r+0x34>
 80150dc:	690b      	ldr	r3, [r1, #16]
 80150de:	b96b      	cbnz	r3, 80150fc <_svfiprintf_r+0x34>
 80150e0:	2140      	movs	r1, #64	; 0x40
 80150e2:	f7ff ff3d 	bl	8014f60 <_malloc_r>
 80150e6:	6020      	str	r0, [r4, #0]
 80150e8:	6120      	str	r0, [r4, #16]
 80150ea:	b928      	cbnz	r0, 80150f8 <_svfiprintf_r+0x30>
 80150ec:	230c      	movs	r3, #12
 80150ee:	f8c8 3000 	str.w	r3, [r8]
 80150f2:	f04f 30ff 	mov.w	r0, #4294967295
 80150f6:	e0c8      	b.n	801528a <_svfiprintf_r+0x1c2>
 80150f8:	2340      	movs	r3, #64	; 0x40
 80150fa:	6163      	str	r3, [r4, #20]
 80150fc:	2300      	movs	r3, #0
 80150fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015100:	2320      	movs	r3, #32
 8015102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015106:	2330      	movs	r3, #48	; 0x30
 8015108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801510c:	9503      	str	r5, [sp, #12]
 801510e:	f04f 0b01 	mov.w	fp, #1
 8015112:	4637      	mov	r7, r6
 8015114:	463d      	mov	r5, r7
 8015116:	f815 3b01 	ldrb.w	r3, [r5], #1
 801511a:	b10b      	cbz	r3, 8015120 <_svfiprintf_r+0x58>
 801511c:	2b25      	cmp	r3, #37	; 0x25
 801511e:	d13e      	bne.n	801519e <_svfiprintf_r+0xd6>
 8015120:	ebb7 0a06 	subs.w	sl, r7, r6
 8015124:	d00b      	beq.n	801513e <_svfiprintf_r+0x76>
 8015126:	4653      	mov	r3, sl
 8015128:	4632      	mov	r2, r6
 801512a:	4621      	mov	r1, r4
 801512c:	4640      	mov	r0, r8
 801512e:	f7ff ff71 	bl	8015014 <__ssputs_r>
 8015132:	3001      	adds	r0, #1
 8015134:	f000 80a4 	beq.w	8015280 <_svfiprintf_r+0x1b8>
 8015138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801513a:	4453      	add	r3, sl
 801513c:	9309      	str	r3, [sp, #36]	; 0x24
 801513e:	783b      	ldrb	r3, [r7, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 809d 	beq.w	8015280 <_svfiprintf_r+0x1b8>
 8015146:	2300      	movs	r3, #0
 8015148:	f04f 32ff 	mov.w	r2, #4294967295
 801514c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015150:	9304      	str	r3, [sp, #16]
 8015152:	9307      	str	r3, [sp, #28]
 8015154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015158:	931a      	str	r3, [sp, #104]	; 0x68
 801515a:	462f      	mov	r7, r5
 801515c:	2205      	movs	r2, #5
 801515e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015162:	4850      	ldr	r0, [pc, #320]	; (80152a4 <_svfiprintf_r+0x1dc>)
 8015164:	f7eb f854 	bl	8000210 <memchr>
 8015168:	9b04      	ldr	r3, [sp, #16]
 801516a:	b9d0      	cbnz	r0, 80151a2 <_svfiprintf_r+0xda>
 801516c:	06d9      	lsls	r1, r3, #27
 801516e:	bf44      	itt	mi
 8015170:	2220      	movmi	r2, #32
 8015172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015176:	071a      	lsls	r2, r3, #28
 8015178:	bf44      	itt	mi
 801517a:	222b      	movmi	r2, #43	; 0x2b
 801517c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015180:	782a      	ldrb	r2, [r5, #0]
 8015182:	2a2a      	cmp	r2, #42	; 0x2a
 8015184:	d015      	beq.n	80151b2 <_svfiprintf_r+0xea>
 8015186:	9a07      	ldr	r2, [sp, #28]
 8015188:	462f      	mov	r7, r5
 801518a:	2000      	movs	r0, #0
 801518c:	250a      	movs	r5, #10
 801518e:	4639      	mov	r1, r7
 8015190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015194:	3b30      	subs	r3, #48	; 0x30
 8015196:	2b09      	cmp	r3, #9
 8015198:	d94d      	bls.n	8015236 <_svfiprintf_r+0x16e>
 801519a:	b1b8      	cbz	r0, 80151cc <_svfiprintf_r+0x104>
 801519c:	e00f      	b.n	80151be <_svfiprintf_r+0xf6>
 801519e:	462f      	mov	r7, r5
 80151a0:	e7b8      	b.n	8015114 <_svfiprintf_r+0x4c>
 80151a2:	4a40      	ldr	r2, [pc, #256]	; (80152a4 <_svfiprintf_r+0x1dc>)
 80151a4:	1a80      	subs	r0, r0, r2
 80151a6:	fa0b f000 	lsl.w	r0, fp, r0
 80151aa:	4318      	orrs	r0, r3
 80151ac:	9004      	str	r0, [sp, #16]
 80151ae:	463d      	mov	r5, r7
 80151b0:	e7d3      	b.n	801515a <_svfiprintf_r+0x92>
 80151b2:	9a03      	ldr	r2, [sp, #12]
 80151b4:	1d11      	adds	r1, r2, #4
 80151b6:	6812      	ldr	r2, [r2, #0]
 80151b8:	9103      	str	r1, [sp, #12]
 80151ba:	2a00      	cmp	r2, #0
 80151bc:	db01      	blt.n	80151c2 <_svfiprintf_r+0xfa>
 80151be:	9207      	str	r2, [sp, #28]
 80151c0:	e004      	b.n	80151cc <_svfiprintf_r+0x104>
 80151c2:	4252      	negs	r2, r2
 80151c4:	f043 0302 	orr.w	r3, r3, #2
 80151c8:	9207      	str	r2, [sp, #28]
 80151ca:	9304      	str	r3, [sp, #16]
 80151cc:	783b      	ldrb	r3, [r7, #0]
 80151ce:	2b2e      	cmp	r3, #46	; 0x2e
 80151d0:	d10c      	bne.n	80151ec <_svfiprintf_r+0x124>
 80151d2:	787b      	ldrb	r3, [r7, #1]
 80151d4:	2b2a      	cmp	r3, #42	; 0x2a
 80151d6:	d133      	bne.n	8015240 <_svfiprintf_r+0x178>
 80151d8:	9b03      	ldr	r3, [sp, #12]
 80151da:	1d1a      	adds	r2, r3, #4
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	9203      	str	r2, [sp, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	bfb8      	it	lt
 80151e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80151e8:	3702      	adds	r7, #2
 80151ea:	9305      	str	r3, [sp, #20]
 80151ec:	4d2e      	ldr	r5, [pc, #184]	; (80152a8 <_svfiprintf_r+0x1e0>)
 80151ee:	7839      	ldrb	r1, [r7, #0]
 80151f0:	2203      	movs	r2, #3
 80151f2:	4628      	mov	r0, r5
 80151f4:	f7eb f80c 	bl	8000210 <memchr>
 80151f8:	b138      	cbz	r0, 801520a <_svfiprintf_r+0x142>
 80151fa:	2340      	movs	r3, #64	; 0x40
 80151fc:	1b40      	subs	r0, r0, r5
 80151fe:	fa03 f000 	lsl.w	r0, r3, r0
 8015202:	9b04      	ldr	r3, [sp, #16]
 8015204:	4303      	orrs	r3, r0
 8015206:	3701      	adds	r7, #1
 8015208:	9304      	str	r3, [sp, #16]
 801520a:	7839      	ldrb	r1, [r7, #0]
 801520c:	4827      	ldr	r0, [pc, #156]	; (80152ac <_svfiprintf_r+0x1e4>)
 801520e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015212:	2206      	movs	r2, #6
 8015214:	1c7e      	adds	r6, r7, #1
 8015216:	f7ea fffb 	bl	8000210 <memchr>
 801521a:	2800      	cmp	r0, #0
 801521c:	d038      	beq.n	8015290 <_svfiprintf_r+0x1c8>
 801521e:	4b24      	ldr	r3, [pc, #144]	; (80152b0 <_svfiprintf_r+0x1e8>)
 8015220:	bb13      	cbnz	r3, 8015268 <_svfiprintf_r+0x1a0>
 8015222:	9b03      	ldr	r3, [sp, #12]
 8015224:	3307      	adds	r3, #7
 8015226:	f023 0307 	bic.w	r3, r3, #7
 801522a:	3308      	adds	r3, #8
 801522c:	9303      	str	r3, [sp, #12]
 801522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015230:	444b      	add	r3, r9
 8015232:	9309      	str	r3, [sp, #36]	; 0x24
 8015234:	e76d      	b.n	8015112 <_svfiprintf_r+0x4a>
 8015236:	fb05 3202 	mla	r2, r5, r2, r3
 801523a:	2001      	movs	r0, #1
 801523c:	460f      	mov	r7, r1
 801523e:	e7a6      	b.n	801518e <_svfiprintf_r+0xc6>
 8015240:	2300      	movs	r3, #0
 8015242:	3701      	adds	r7, #1
 8015244:	9305      	str	r3, [sp, #20]
 8015246:	4619      	mov	r1, r3
 8015248:	250a      	movs	r5, #10
 801524a:	4638      	mov	r0, r7
 801524c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015250:	3a30      	subs	r2, #48	; 0x30
 8015252:	2a09      	cmp	r2, #9
 8015254:	d903      	bls.n	801525e <_svfiprintf_r+0x196>
 8015256:	2b00      	cmp	r3, #0
 8015258:	d0c8      	beq.n	80151ec <_svfiprintf_r+0x124>
 801525a:	9105      	str	r1, [sp, #20]
 801525c:	e7c6      	b.n	80151ec <_svfiprintf_r+0x124>
 801525e:	fb05 2101 	mla	r1, r5, r1, r2
 8015262:	2301      	movs	r3, #1
 8015264:	4607      	mov	r7, r0
 8015266:	e7f0      	b.n	801524a <_svfiprintf_r+0x182>
 8015268:	ab03      	add	r3, sp, #12
 801526a:	9300      	str	r3, [sp, #0]
 801526c:	4622      	mov	r2, r4
 801526e:	4b11      	ldr	r3, [pc, #68]	; (80152b4 <_svfiprintf_r+0x1ec>)
 8015270:	a904      	add	r1, sp, #16
 8015272:	4640      	mov	r0, r8
 8015274:	f7fb ffbc 	bl	80111f0 <_printf_float>
 8015278:	f1b0 3fff 	cmp.w	r0, #4294967295
 801527c:	4681      	mov	r9, r0
 801527e:	d1d6      	bne.n	801522e <_svfiprintf_r+0x166>
 8015280:	89a3      	ldrh	r3, [r4, #12]
 8015282:	065b      	lsls	r3, r3, #25
 8015284:	f53f af35 	bmi.w	80150f2 <_svfiprintf_r+0x2a>
 8015288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801528a:	b01d      	add	sp, #116	; 0x74
 801528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015290:	ab03      	add	r3, sp, #12
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	4622      	mov	r2, r4
 8015296:	4b07      	ldr	r3, [pc, #28]	; (80152b4 <_svfiprintf_r+0x1ec>)
 8015298:	a904      	add	r1, sp, #16
 801529a:	4640      	mov	r0, r8
 801529c:	f7fc fa5e 	bl	801175c <_printf_i>
 80152a0:	e7ea      	b.n	8015278 <_svfiprintf_r+0x1b0>
 80152a2:	bf00      	nop
 80152a4:	0801691c 	.word	0x0801691c
 80152a8:	08016922 	.word	0x08016922
 80152ac:	08016926 	.word	0x08016926
 80152b0:	080111f1 	.word	0x080111f1
 80152b4:	08015015 	.word	0x08015015

080152b8 <_sungetc_r>:
 80152b8:	b538      	push	{r3, r4, r5, lr}
 80152ba:	1c4b      	adds	r3, r1, #1
 80152bc:	4614      	mov	r4, r2
 80152be:	d103      	bne.n	80152c8 <_sungetc_r+0x10>
 80152c0:	f04f 35ff 	mov.w	r5, #4294967295
 80152c4:	4628      	mov	r0, r5
 80152c6:	bd38      	pop	{r3, r4, r5, pc}
 80152c8:	8993      	ldrh	r3, [r2, #12]
 80152ca:	f023 0320 	bic.w	r3, r3, #32
 80152ce:	8193      	strh	r3, [r2, #12]
 80152d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152d2:	6852      	ldr	r2, [r2, #4]
 80152d4:	b2cd      	uxtb	r5, r1
 80152d6:	b18b      	cbz	r3, 80152fc <_sungetc_r+0x44>
 80152d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80152da:	4293      	cmp	r3, r2
 80152dc:	dd08      	ble.n	80152f0 <_sungetc_r+0x38>
 80152de:	6823      	ldr	r3, [r4, #0]
 80152e0:	1e5a      	subs	r2, r3, #1
 80152e2:	6022      	str	r2, [r4, #0]
 80152e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80152e8:	6863      	ldr	r3, [r4, #4]
 80152ea:	3301      	adds	r3, #1
 80152ec:	6063      	str	r3, [r4, #4]
 80152ee:	e7e9      	b.n	80152c4 <_sungetc_r+0xc>
 80152f0:	4621      	mov	r1, r4
 80152f2:	f000 fd4b 	bl	8015d8c <__submore>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d0f1      	beq.n	80152de <_sungetc_r+0x26>
 80152fa:	e7e1      	b.n	80152c0 <_sungetc_r+0x8>
 80152fc:	6921      	ldr	r1, [r4, #16]
 80152fe:	6823      	ldr	r3, [r4, #0]
 8015300:	b151      	cbz	r1, 8015318 <_sungetc_r+0x60>
 8015302:	4299      	cmp	r1, r3
 8015304:	d208      	bcs.n	8015318 <_sungetc_r+0x60>
 8015306:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801530a:	42a9      	cmp	r1, r5
 801530c:	d104      	bne.n	8015318 <_sungetc_r+0x60>
 801530e:	3b01      	subs	r3, #1
 8015310:	3201      	adds	r2, #1
 8015312:	6023      	str	r3, [r4, #0]
 8015314:	6062      	str	r2, [r4, #4]
 8015316:	e7d5      	b.n	80152c4 <_sungetc_r+0xc>
 8015318:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801531c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015320:	6363      	str	r3, [r4, #52]	; 0x34
 8015322:	2303      	movs	r3, #3
 8015324:	63a3      	str	r3, [r4, #56]	; 0x38
 8015326:	4623      	mov	r3, r4
 8015328:	f803 5f46 	strb.w	r5, [r3, #70]!
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	2301      	movs	r3, #1
 8015330:	e7dc      	b.n	80152ec <_sungetc_r+0x34>

08015332 <__ssrefill_r>:
 8015332:	b510      	push	{r4, lr}
 8015334:	460c      	mov	r4, r1
 8015336:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015338:	b169      	cbz	r1, 8015356 <__ssrefill_r+0x24>
 801533a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801533e:	4299      	cmp	r1, r3
 8015340:	d001      	beq.n	8015346 <__ssrefill_r+0x14>
 8015342:	f7ff fdbf 	bl	8014ec4 <_free_r>
 8015346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015348:	6063      	str	r3, [r4, #4]
 801534a:	2000      	movs	r0, #0
 801534c:	6360      	str	r0, [r4, #52]	; 0x34
 801534e:	b113      	cbz	r3, 8015356 <__ssrefill_r+0x24>
 8015350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015352:	6023      	str	r3, [r4, #0]
 8015354:	bd10      	pop	{r4, pc}
 8015356:	6923      	ldr	r3, [r4, #16]
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	2300      	movs	r3, #0
 801535c:	6063      	str	r3, [r4, #4]
 801535e:	89a3      	ldrh	r3, [r4, #12]
 8015360:	f043 0320 	orr.w	r3, r3, #32
 8015364:	81a3      	strh	r3, [r4, #12]
 8015366:	f04f 30ff 	mov.w	r0, #4294967295
 801536a:	e7f3      	b.n	8015354 <__ssrefill_r+0x22>

0801536c <__ssvfiscanf_r>:
 801536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015374:	460c      	mov	r4, r1
 8015376:	2100      	movs	r1, #0
 8015378:	9144      	str	r1, [sp, #272]	; 0x110
 801537a:	9145      	str	r1, [sp, #276]	; 0x114
 801537c:	499f      	ldr	r1, [pc, #636]	; (80155fc <__ssvfiscanf_r+0x290>)
 801537e:	91a0      	str	r1, [sp, #640]	; 0x280
 8015380:	f10d 0804 	add.w	r8, sp, #4
 8015384:	499e      	ldr	r1, [pc, #632]	; (8015600 <__ssvfiscanf_r+0x294>)
 8015386:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8015604 <__ssvfiscanf_r+0x298>
 801538a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801538e:	4606      	mov	r6, r0
 8015390:	4692      	mov	sl, r2
 8015392:	91a1      	str	r1, [sp, #644]	; 0x284
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	270a      	movs	r7, #10
 8015398:	f89a 3000 	ldrb.w	r3, [sl]
 801539c:	2b00      	cmp	r3, #0
 801539e:	f000 812a 	beq.w	80155f6 <__ssvfiscanf_r+0x28a>
 80153a2:	4655      	mov	r5, sl
 80153a4:	f7ff f8c8 	bl	8014538 <__locale_ctype_ptr>
 80153a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80153ac:	4458      	add	r0, fp
 80153ae:	7843      	ldrb	r3, [r0, #1]
 80153b0:	f013 0308 	ands.w	r3, r3, #8
 80153b4:	d01c      	beq.n	80153f0 <__ssvfiscanf_r+0x84>
 80153b6:	6863      	ldr	r3, [r4, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	dd12      	ble.n	80153e2 <__ssvfiscanf_r+0x76>
 80153bc:	f7ff f8bc 	bl	8014538 <__locale_ctype_ptr>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	781a      	ldrb	r2, [r3, #0]
 80153c4:	4410      	add	r0, r2
 80153c6:	7842      	ldrb	r2, [r0, #1]
 80153c8:	0712      	lsls	r2, r2, #28
 80153ca:	d401      	bmi.n	80153d0 <__ssvfiscanf_r+0x64>
 80153cc:	46aa      	mov	sl, r5
 80153ce:	e7e3      	b.n	8015398 <__ssvfiscanf_r+0x2c>
 80153d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80153d2:	3201      	adds	r2, #1
 80153d4:	9245      	str	r2, [sp, #276]	; 0x114
 80153d6:	6862      	ldr	r2, [r4, #4]
 80153d8:	3301      	adds	r3, #1
 80153da:	3a01      	subs	r2, #1
 80153dc:	6062      	str	r2, [r4, #4]
 80153de:	6023      	str	r3, [r4, #0]
 80153e0:	e7e9      	b.n	80153b6 <__ssvfiscanf_r+0x4a>
 80153e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80153e4:	4621      	mov	r1, r4
 80153e6:	4630      	mov	r0, r6
 80153e8:	4798      	blx	r3
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d0e6      	beq.n	80153bc <__ssvfiscanf_r+0x50>
 80153ee:	e7ed      	b.n	80153cc <__ssvfiscanf_r+0x60>
 80153f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80153f4:	f040 8082 	bne.w	80154fc <__ssvfiscanf_r+0x190>
 80153f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80153fa:	9341      	str	r3, [sp, #260]	; 0x104
 80153fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015400:	2b2a      	cmp	r3, #42	; 0x2a
 8015402:	d103      	bne.n	801540c <__ssvfiscanf_r+0xa0>
 8015404:	2310      	movs	r3, #16
 8015406:	9341      	str	r3, [sp, #260]	; 0x104
 8015408:	f10a 0502 	add.w	r5, sl, #2
 801540c:	46aa      	mov	sl, r5
 801540e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8015412:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015416:	2a09      	cmp	r2, #9
 8015418:	d922      	bls.n	8015460 <__ssvfiscanf_r+0xf4>
 801541a:	2203      	movs	r2, #3
 801541c:	4879      	ldr	r0, [pc, #484]	; (8015604 <__ssvfiscanf_r+0x298>)
 801541e:	f7ea fef7 	bl	8000210 <memchr>
 8015422:	b138      	cbz	r0, 8015434 <__ssvfiscanf_r+0xc8>
 8015424:	eba0 0309 	sub.w	r3, r0, r9
 8015428:	2001      	movs	r0, #1
 801542a:	4098      	lsls	r0, r3
 801542c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801542e:	4318      	orrs	r0, r3
 8015430:	9041      	str	r0, [sp, #260]	; 0x104
 8015432:	46aa      	mov	sl, r5
 8015434:	f89a 3000 	ldrb.w	r3, [sl]
 8015438:	2b67      	cmp	r3, #103	; 0x67
 801543a:	f10a 0501 	add.w	r5, sl, #1
 801543e:	d82b      	bhi.n	8015498 <__ssvfiscanf_r+0x12c>
 8015440:	2b65      	cmp	r3, #101	; 0x65
 8015442:	f080 809f 	bcs.w	8015584 <__ssvfiscanf_r+0x218>
 8015446:	2b47      	cmp	r3, #71	; 0x47
 8015448:	d810      	bhi.n	801546c <__ssvfiscanf_r+0x100>
 801544a:	2b45      	cmp	r3, #69	; 0x45
 801544c:	f080 809a 	bcs.w	8015584 <__ssvfiscanf_r+0x218>
 8015450:	2b00      	cmp	r3, #0
 8015452:	d06c      	beq.n	801552e <__ssvfiscanf_r+0x1c2>
 8015454:	2b25      	cmp	r3, #37	; 0x25
 8015456:	d051      	beq.n	80154fc <__ssvfiscanf_r+0x190>
 8015458:	2303      	movs	r3, #3
 801545a:	9347      	str	r3, [sp, #284]	; 0x11c
 801545c:	9742      	str	r7, [sp, #264]	; 0x108
 801545e:	e027      	b.n	80154b0 <__ssvfiscanf_r+0x144>
 8015460:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015462:	fb07 1303 	mla	r3, r7, r3, r1
 8015466:	3b30      	subs	r3, #48	; 0x30
 8015468:	9343      	str	r3, [sp, #268]	; 0x10c
 801546a:	e7cf      	b.n	801540c <__ssvfiscanf_r+0xa0>
 801546c:	2b5b      	cmp	r3, #91	; 0x5b
 801546e:	d06a      	beq.n	8015546 <__ssvfiscanf_r+0x1da>
 8015470:	d80c      	bhi.n	801548c <__ssvfiscanf_r+0x120>
 8015472:	2b58      	cmp	r3, #88	; 0x58
 8015474:	d1f0      	bne.n	8015458 <__ssvfiscanf_r+0xec>
 8015476:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801547c:	9241      	str	r2, [sp, #260]	; 0x104
 801547e:	2210      	movs	r2, #16
 8015480:	9242      	str	r2, [sp, #264]	; 0x108
 8015482:	2b6e      	cmp	r3, #110	; 0x6e
 8015484:	bf8c      	ite	hi
 8015486:	2304      	movhi	r3, #4
 8015488:	2303      	movls	r3, #3
 801548a:	e010      	b.n	80154ae <__ssvfiscanf_r+0x142>
 801548c:	2b63      	cmp	r3, #99	; 0x63
 801548e:	d065      	beq.n	801555c <__ssvfiscanf_r+0x1f0>
 8015490:	2b64      	cmp	r3, #100	; 0x64
 8015492:	d1e1      	bne.n	8015458 <__ssvfiscanf_r+0xec>
 8015494:	9742      	str	r7, [sp, #264]	; 0x108
 8015496:	e7f4      	b.n	8015482 <__ssvfiscanf_r+0x116>
 8015498:	2b70      	cmp	r3, #112	; 0x70
 801549a:	d04b      	beq.n	8015534 <__ssvfiscanf_r+0x1c8>
 801549c:	d826      	bhi.n	80154ec <__ssvfiscanf_r+0x180>
 801549e:	2b6e      	cmp	r3, #110	; 0x6e
 80154a0:	d062      	beq.n	8015568 <__ssvfiscanf_r+0x1fc>
 80154a2:	d84c      	bhi.n	801553e <__ssvfiscanf_r+0x1d2>
 80154a4:	2b69      	cmp	r3, #105	; 0x69
 80154a6:	d1d7      	bne.n	8015458 <__ssvfiscanf_r+0xec>
 80154a8:	2300      	movs	r3, #0
 80154aa:	9342      	str	r3, [sp, #264]	; 0x108
 80154ac:	2303      	movs	r3, #3
 80154ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80154b0:	6863      	ldr	r3, [r4, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	dd68      	ble.n	8015588 <__ssvfiscanf_r+0x21c>
 80154b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80154b8:	0659      	lsls	r1, r3, #25
 80154ba:	d407      	bmi.n	80154cc <__ssvfiscanf_r+0x160>
 80154bc:	f7ff f83c 	bl	8014538 <__locale_ctype_ptr>
 80154c0:	6823      	ldr	r3, [r4, #0]
 80154c2:	781a      	ldrb	r2, [r3, #0]
 80154c4:	4410      	add	r0, r2
 80154c6:	7842      	ldrb	r2, [r0, #1]
 80154c8:	0712      	lsls	r2, r2, #28
 80154ca:	d464      	bmi.n	8015596 <__ssvfiscanf_r+0x22a>
 80154cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	dc73      	bgt.n	80155ba <__ssvfiscanf_r+0x24e>
 80154d2:	466b      	mov	r3, sp
 80154d4:	4622      	mov	r2, r4
 80154d6:	a941      	add	r1, sp, #260	; 0x104
 80154d8:	4630      	mov	r0, r6
 80154da:	f000 f9d7 	bl	801588c <_scanf_chars>
 80154de:	2801      	cmp	r0, #1
 80154e0:	f000 8089 	beq.w	80155f6 <__ssvfiscanf_r+0x28a>
 80154e4:	2802      	cmp	r0, #2
 80154e6:	f47f af71 	bne.w	80153cc <__ssvfiscanf_r+0x60>
 80154ea:	e01d      	b.n	8015528 <__ssvfiscanf_r+0x1bc>
 80154ec:	2b75      	cmp	r3, #117	; 0x75
 80154ee:	d0d1      	beq.n	8015494 <__ssvfiscanf_r+0x128>
 80154f0:	2b78      	cmp	r3, #120	; 0x78
 80154f2:	d0c0      	beq.n	8015476 <__ssvfiscanf_r+0x10a>
 80154f4:	2b73      	cmp	r3, #115	; 0x73
 80154f6:	d1af      	bne.n	8015458 <__ssvfiscanf_r+0xec>
 80154f8:	2302      	movs	r3, #2
 80154fa:	e7d8      	b.n	80154ae <__ssvfiscanf_r+0x142>
 80154fc:	6863      	ldr	r3, [r4, #4]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	dd0c      	ble.n	801551c <__ssvfiscanf_r+0x1b0>
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	781a      	ldrb	r2, [r3, #0]
 8015506:	455a      	cmp	r2, fp
 8015508:	d175      	bne.n	80155f6 <__ssvfiscanf_r+0x28a>
 801550a:	3301      	adds	r3, #1
 801550c:	6862      	ldr	r2, [r4, #4]
 801550e:	6023      	str	r3, [r4, #0]
 8015510:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015512:	3a01      	subs	r2, #1
 8015514:	3301      	adds	r3, #1
 8015516:	6062      	str	r2, [r4, #4]
 8015518:	9345      	str	r3, [sp, #276]	; 0x114
 801551a:	e757      	b.n	80153cc <__ssvfiscanf_r+0x60>
 801551c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801551e:	4621      	mov	r1, r4
 8015520:	4630      	mov	r0, r6
 8015522:	4798      	blx	r3
 8015524:	2800      	cmp	r0, #0
 8015526:	d0ec      	beq.n	8015502 <__ssvfiscanf_r+0x196>
 8015528:	9844      	ldr	r0, [sp, #272]	; 0x110
 801552a:	2800      	cmp	r0, #0
 801552c:	d159      	bne.n	80155e2 <__ssvfiscanf_r+0x276>
 801552e:	f04f 30ff 	mov.w	r0, #4294967295
 8015532:	e05c      	b.n	80155ee <__ssvfiscanf_r+0x282>
 8015534:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015536:	f042 0220 	orr.w	r2, r2, #32
 801553a:	9241      	str	r2, [sp, #260]	; 0x104
 801553c:	e79b      	b.n	8015476 <__ssvfiscanf_r+0x10a>
 801553e:	2308      	movs	r3, #8
 8015540:	9342      	str	r3, [sp, #264]	; 0x108
 8015542:	2304      	movs	r3, #4
 8015544:	e7b3      	b.n	80154ae <__ssvfiscanf_r+0x142>
 8015546:	4629      	mov	r1, r5
 8015548:	4640      	mov	r0, r8
 801554a:	f000 fb4f 	bl	8015bec <__sccl>
 801554e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015554:	9341      	str	r3, [sp, #260]	; 0x104
 8015556:	4605      	mov	r5, r0
 8015558:	2301      	movs	r3, #1
 801555a:	e7a8      	b.n	80154ae <__ssvfiscanf_r+0x142>
 801555c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801555e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015562:	9341      	str	r3, [sp, #260]	; 0x104
 8015564:	2300      	movs	r3, #0
 8015566:	e7a2      	b.n	80154ae <__ssvfiscanf_r+0x142>
 8015568:	9841      	ldr	r0, [sp, #260]	; 0x104
 801556a:	06c3      	lsls	r3, r0, #27
 801556c:	f53f af2e 	bmi.w	80153cc <__ssvfiscanf_r+0x60>
 8015570:	9b00      	ldr	r3, [sp, #0]
 8015572:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015574:	1d19      	adds	r1, r3, #4
 8015576:	9100      	str	r1, [sp, #0]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	07c0      	lsls	r0, r0, #31
 801557c:	bf4c      	ite	mi
 801557e:	801a      	strhmi	r2, [r3, #0]
 8015580:	601a      	strpl	r2, [r3, #0]
 8015582:	e723      	b.n	80153cc <__ssvfiscanf_r+0x60>
 8015584:	2305      	movs	r3, #5
 8015586:	e792      	b.n	80154ae <__ssvfiscanf_r+0x142>
 8015588:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801558a:	4621      	mov	r1, r4
 801558c:	4630      	mov	r0, r6
 801558e:	4798      	blx	r3
 8015590:	2800      	cmp	r0, #0
 8015592:	d090      	beq.n	80154b6 <__ssvfiscanf_r+0x14a>
 8015594:	e7c8      	b.n	8015528 <__ssvfiscanf_r+0x1bc>
 8015596:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015598:	3201      	adds	r2, #1
 801559a:	9245      	str	r2, [sp, #276]	; 0x114
 801559c:	6862      	ldr	r2, [r4, #4]
 801559e:	3a01      	subs	r2, #1
 80155a0:	2a00      	cmp	r2, #0
 80155a2:	6062      	str	r2, [r4, #4]
 80155a4:	dd02      	ble.n	80155ac <__ssvfiscanf_r+0x240>
 80155a6:	3301      	adds	r3, #1
 80155a8:	6023      	str	r3, [r4, #0]
 80155aa:	e787      	b.n	80154bc <__ssvfiscanf_r+0x150>
 80155ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80155ae:	4621      	mov	r1, r4
 80155b0:	4630      	mov	r0, r6
 80155b2:	4798      	blx	r3
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d081      	beq.n	80154bc <__ssvfiscanf_r+0x150>
 80155b8:	e7b6      	b.n	8015528 <__ssvfiscanf_r+0x1bc>
 80155ba:	2b04      	cmp	r3, #4
 80155bc:	dc06      	bgt.n	80155cc <__ssvfiscanf_r+0x260>
 80155be:	466b      	mov	r3, sp
 80155c0:	4622      	mov	r2, r4
 80155c2:	a941      	add	r1, sp, #260	; 0x104
 80155c4:	4630      	mov	r0, r6
 80155c6:	f000 f9c5 	bl	8015954 <_scanf_i>
 80155ca:	e788      	b.n	80154de <__ssvfiscanf_r+0x172>
 80155cc:	4b0e      	ldr	r3, [pc, #56]	; (8015608 <__ssvfiscanf_r+0x29c>)
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	f43f aefc 	beq.w	80153cc <__ssvfiscanf_r+0x60>
 80155d4:	466b      	mov	r3, sp
 80155d6:	4622      	mov	r2, r4
 80155d8:	a941      	add	r1, sp, #260	; 0x104
 80155da:	4630      	mov	r0, r6
 80155dc:	f7fc f9d0 	bl	8011980 <_scanf_float>
 80155e0:	e77d      	b.n	80154de <__ssvfiscanf_r+0x172>
 80155e2:	89a3      	ldrh	r3, [r4, #12]
 80155e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80155e8:	bf18      	it	ne
 80155ea:	f04f 30ff 	movne.w	r0, #4294967295
 80155ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80155f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80155f8:	e7f9      	b.n	80155ee <__ssvfiscanf_r+0x282>
 80155fa:	bf00      	nop
 80155fc:	080152b9 	.word	0x080152b9
 8015600:	08015333 	.word	0x08015333
 8015604:	08016922 	.word	0x08016922
 8015608:	08011981 	.word	0x08011981

0801560c <__sfputc_r>:
 801560c:	6893      	ldr	r3, [r2, #8]
 801560e:	3b01      	subs	r3, #1
 8015610:	2b00      	cmp	r3, #0
 8015612:	b410      	push	{r4}
 8015614:	6093      	str	r3, [r2, #8]
 8015616:	da08      	bge.n	801562a <__sfputc_r+0x1e>
 8015618:	6994      	ldr	r4, [r2, #24]
 801561a:	42a3      	cmp	r3, r4
 801561c:	db01      	blt.n	8015622 <__sfputc_r+0x16>
 801561e:	290a      	cmp	r1, #10
 8015620:	d103      	bne.n	801562a <__sfputc_r+0x1e>
 8015622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015626:	f7fd bbbd 	b.w	8012da4 <__swbuf_r>
 801562a:	6813      	ldr	r3, [r2, #0]
 801562c:	1c58      	adds	r0, r3, #1
 801562e:	6010      	str	r0, [r2, #0]
 8015630:	7019      	strb	r1, [r3, #0]
 8015632:	4608      	mov	r0, r1
 8015634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015638:	4770      	bx	lr

0801563a <__sfputs_r>:
 801563a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563c:	4606      	mov	r6, r0
 801563e:	460f      	mov	r7, r1
 8015640:	4614      	mov	r4, r2
 8015642:	18d5      	adds	r5, r2, r3
 8015644:	42ac      	cmp	r4, r5
 8015646:	d101      	bne.n	801564c <__sfputs_r+0x12>
 8015648:	2000      	movs	r0, #0
 801564a:	e007      	b.n	801565c <__sfputs_r+0x22>
 801564c:	463a      	mov	r2, r7
 801564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015652:	4630      	mov	r0, r6
 8015654:	f7ff ffda 	bl	801560c <__sfputc_r>
 8015658:	1c43      	adds	r3, r0, #1
 801565a:	d1f3      	bne.n	8015644 <__sfputs_r+0xa>
 801565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015660 <_vfiprintf_r>:
 8015660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015664:	460c      	mov	r4, r1
 8015666:	b09d      	sub	sp, #116	; 0x74
 8015668:	4617      	mov	r7, r2
 801566a:	461d      	mov	r5, r3
 801566c:	4606      	mov	r6, r0
 801566e:	b118      	cbz	r0, 8015678 <_vfiprintf_r+0x18>
 8015670:	6983      	ldr	r3, [r0, #24]
 8015672:	b90b      	cbnz	r3, 8015678 <_vfiprintf_r+0x18>
 8015674:	f7fe fbac 	bl	8013dd0 <__sinit>
 8015678:	4b7c      	ldr	r3, [pc, #496]	; (801586c <_vfiprintf_r+0x20c>)
 801567a:	429c      	cmp	r4, r3
 801567c:	d158      	bne.n	8015730 <_vfiprintf_r+0xd0>
 801567e:	6874      	ldr	r4, [r6, #4]
 8015680:	89a3      	ldrh	r3, [r4, #12]
 8015682:	0718      	lsls	r0, r3, #28
 8015684:	d55e      	bpl.n	8015744 <_vfiprintf_r+0xe4>
 8015686:	6923      	ldr	r3, [r4, #16]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d05b      	beq.n	8015744 <_vfiprintf_r+0xe4>
 801568c:	2300      	movs	r3, #0
 801568e:	9309      	str	r3, [sp, #36]	; 0x24
 8015690:	2320      	movs	r3, #32
 8015692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015696:	2330      	movs	r3, #48	; 0x30
 8015698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801569c:	9503      	str	r5, [sp, #12]
 801569e:	f04f 0b01 	mov.w	fp, #1
 80156a2:	46b8      	mov	r8, r7
 80156a4:	4645      	mov	r5, r8
 80156a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80156aa:	b10b      	cbz	r3, 80156b0 <_vfiprintf_r+0x50>
 80156ac:	2b25      	cmp	r3, #37	; 0x25
 80156ae:	d154      	bne.n	801575a <_vfiprintf_r+0xfa>
 80156b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80156b4:	d00b      	beq.n	80156ce <_vfiprintf_r+0x6e>
 80156b6:	4653      	mov	r3, sl
 80156b8:	463a      	mov	r2, r7
 80156ba:	4621      	mov	r1, r4
 80156bc:	4630      	mov	r0, r6
 80156be:	f7ff ffbc 	bl	801563a <__sfputs_r>
 80156c2:	3001      	adds	r0, #1
 80156c4:	f000 80c2 	beq.w	801584c <_vfiprintf_r+0x1ec>
 80156c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ca:	4453      	add	r3, sl
 80156cc:	9309      	str	r3, [sp, #36]	; 0x24
 80156ce:	f898 3000 	ldrb.w	r3, [r8]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 80ba 	beq.w	801584c <_vfiprintf_r+0x1ec>
 80156d8:	2300      	movs	r3, #0
 80156da:	f04f 32ff 	mov.w	r2, #4294967295
 80156de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156e2:	9304      	str	r3, [sp, #16]
 80156e4:	9307      	str	r3, [sp, #28]
 80156e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156ea:	931a      	str	r3, [sp, #104]	; 0x68
 80156ec:	46a8      	mov	r8, r5
 80156ee:	2205      	movs	r2, #5
 80156f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80156f4:	485e      	ldr	r0, [pc, #376]	; (8015870 <_vfiprintf_r+0x210>)
 80156f6:	f7ea fd8b 	bl	8000210 <memchr>
 80156fa:	9b04      	ldr	r3, [sp, #16]
 80156fc:	bb78      	cbnz	r0, 801575e <_vfiprintf_r+0xfe>
 80156fe:	06d9      	lsls	r1, r3, #27
 8015700:	bf44      	itt	mi
 8015702:	2220      	movmi	r2, #32
 8015704:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015708:	071a      	lsls	r2, r3, #28
 801570a:	bf44      	itt	mi
 801570c:	222b      	movmi	r2, #43	; 0x2b
 801570e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015712:	782a      	ldrb	r2, [r5, #0]
 8015714:	2a2a      	cmp	r2, #42	; 0x2a
 8015716:	d02a      	beq.n	801576e <_vfiprintf_r+0x10e>
 8015718:	9a07      	ldr	r2, [sp, #28]
 801571a:	46a8      	mov	r8, r5
 801571c:	2000      	movs	r0, #0
 801571e:	250a      	movs	r5, #10
 8015720:	4641      	mov	r1, r8
 8015722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015726:	3b30      	subs	r3, #48	; 0x30
 8015728:	2b09      	cmp	r3, #9
 801572a:	d969      	bls.n	8015800 <_vfiprintf_r+0x1a0>
 801572c:	b360      	cbz	r0, 8015788 <_vfiprintf_r+0x128>
 801572e:	e024      	b.n	801577a <_vfiprintf_r+0x11a>
 8015730:	4b50      	ldr	r3, [pc, #320]	; (8015874 <_vfiprintf_r+0x214>)
 8015732:	429c      	cmp	r4, r3
 8015734:	d101      	bne.n	801573a <_vfiprintf_r+0xda>
 8015736:	68b4      	ldr	r4, [r6, #8]
 8015738:	e7a2      	b.n	8015680 <_vfiprintf_r+0x20>
 801573a:	4b4f      	ldr	r3, [pc, #316]	; (8015878 <_vfiprintf_r+0x218>)
 801573c:	429c      	cmp	r4, r3
 801573e:	bf08      	it	eq
 8015740:	68f4      	ldreq	r4, [r6, #12]
 8015742:	e79d      	b.n	8015680 <_vfiprintf_r+0x20>
 8015744:	4621      	mov	r1, r4
 8015746:	4630      	mov	r0, r6
 8015748:	f7fd fb90 	bl	8012e6c <__swsetup_r>
 801574c:	2800      	cmp	r0, #0
 801574e:	d09d      	beq.n	801568c <_vfiprintf_r+0x2c>
 8015750:	f04f 30ff 	mov.w	r0, #4294967295
 8015754:	b01d      	add	sp, #116	; 0x74
 8015756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801575a:	46a8      	mov	r8, r5
 801575c:	e7a2      	b.n	80156a4 <_vfiprintf_r+0x44>
 801575e:	4a44      	ldr	r2, [pc, #272]	; (8015870 <_vfiprintf_r+0x210>)
 8015760:	1a80      	subs	r0, r0, r2
 8015762:	fa0b f000 	lsl.w	r0, fp, r0
 8015766:	4318      	orrs	r0, r3
 8015768:	9004      	str	r0, [sp, #16]
 801576a:	4645      	mov	r5, r8
 801576c:	e7be      	b.n	80156ec <_vfiprintf_r+0x8c>
 801576e:	9a03      	ldr	r2, [sp, #12]
 8015770:	1d11      	adds	r1, r2, #4
 8015772:	6812      	ldr	r2, [r2, #0]
 8015774:	9103      	str	r1, [sp, #12]
 8015776:	2a00      	cmp	r2, #0
 8015778:	db01      	blt.n	801577e <_vfiprintf_r+0x11e>
 801577a:	9207      	str	r2, [sp, #28]
 801577c:	e004      	b.n	8015788 <_vfiprintf_r+0x128>
 801577e:	4252      	negs	r2, r2
 8015780:	f043 0302 	orr.w	r3, r3, #2
 8015784:	9207      	str	r2, [sp, #28]
 8015786:	9304      	str	r3, [sp, #16]
 8015788:	f898 3000 	ldrb.w	r3, [r8]
 801578c:	2b2e      	cmp	r3, #46	; 0x2e
 801578e:	d10e      	bne.n	80157ae <_vfiprintf_r+0x14e>
 8015790:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015794:	2b2a      	cmp	r3, #42	; 0x2a
 8015796:	d138      	bne.n	801580a <_vfiprintf_r+0x1aa>
 8015798:	9b03      	ldr	r3, [sp, #12]
 801579a:	1d1a      	adds	r2, r3, #4
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	9203      	str	r2, [sp, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	bfb8      	it	lt
 80157a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80157a8:	f108 0802 	add.w	r8, r8, #2
 80157ac:	9305      	str	r3, [sp, #20]
 80157ae:	4d33      	ldr	r5, [pc, #204]	; (801587c <_vfiprintf_r+0x21c>)
 80157b0:	f898 1000 	ldrb.w	r1, [r8]
 80157b4:	2203      	movs	r2, #3
 80157b6:	4628      	mov	r0, r5
 80157b8:	f7ea fd2a 	bl	8000210 <memchr>
 80157bc:	b140      	cbz	r0, 80157d0 <_vfiprintf_r+0x170>
 80157be:	2340      	movs	r3, #64	; 0x40
 80157c0:	1b40      	subs	r0, r0, r5
 80157c2:	fa03 f000 	lsl.w	r0, r3, r0
 80157c6:	9b04      	ldr	r3, [sp, #16]
 80157c8:	4303      	orrs	r3, r0
 80157ca:	f108 0801 	add.w	r8, r8, #1
 80157ce:	9304      	str	r3, [sp, #16]
 80157d0:	f898 1000 	ldrb.w	r1, [r8]
 80157d4:	482a      	ldr	r0, [pc, #168]	; (8015880 <_vfiprintf_r+0x220>)
 80157d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157da:	2206      	movs	r2, #6
 80157dc:	f108 0701 	add.w	r7, r8, #1
 80157e0:	f7ea fd16 	bl	8000210 <memchr>
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d037      	beq.n	8015858 <_vfiprintf_r+0x1f8>
 80157e8:	4b26      	ldr	r3, [pc, #152]	; (8015884 <_vfiprintf_r+0x224>)
 80157ea:	bb1b      	cbnz	r3, 8015834 <_vfiprintf_r+0x1d4>
 80157ec:	9b03      	ldr	r3, [sp, #12]
 80157ee:	3307      	adds	r3, #7
 80157f0:	f023 0307 	bic.w	r3, r3, #7
 80157f4:	3308      	adds	r3, #8
 80157f6:	9303      	str	r3, [sp, #12]
 80157f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157fa:	444b      	add	r3, r9
 80157fc:	9309      	str	r3, [sp, #36]	; 0x24
 80157fe:	e750      	b.n	80156a2 <_vfiprintf_r+0x42>
 8015800:	fb05 3202 	mla	r2, r5, r2, r3
 8015804:	2001      	movs	r0, #1
 8015806:	4688      	mov	r8, r1
 8015808:	e78a      	b.n	8015720 <_vfiprintf_r+0xc0>
 801580a:	2300      	movs	r3, #0
 801580c:	f108 0801 	add.w	r8, r8, #1
 8015810:	9305      	str	r3, [sp, #20]
 8015812:	4619      	mov	r1, r3
 8015814:	250a      	movs	r5, #10
 8015816:	4640      	mov	r0, r8
 8015818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801581c:	3a30      	subs	r2, #48	; 0x30
 801581e:	2a09      	cmp	r2, #9
 8015820:	d903      	bls.n	801582a <_vfiprintf_r+0x1ca>
 8015822:	2b00      	cmp	r3, #0
 8015824:	d0c3      	beq.n	80157ae <_vfiprintf_r+0x14e>
 8015826:	9105      	str	r1, [sp, #20]
 8015828:	e7c1      	b.n	80157ae <_vfiprintf_r+0x14e>
 801582a:	fb05 2101 	mla	r1, r5, r1, r2
 801582e:	2301      	movs	r3, #1
 8015830:	4680      	mov	r8, r0
 8015832:	e7f0      	b.n	8015816 <_vfiprintf_r+0x1b6>
 8015834:	ab03      	add	r3, sp, #12
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	4622      	mov	r2, r4
 801583a:	4b13      	ldr	r3, [pc, #76]	; (8015888 <_vfiprintf_r+0x228>)
 801583c:	a904      	add	r1, sp, #16
 801583e:	4630      	mov	r0, r6
 8015840:	f7fb fcd6 	bl	80111f0 <_printf_float>
 8015844:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015848:	4681      	mov	r9, r0
 801584a:	d1d5      	bne.n	80157f8 <_vfiprintf_r+0x198>
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	065b      	lsls	r3, r3, #25
 8015850:	f53f af7e 	bmi.w	8015750 <_vfiprintf_r+0xf0>
 8015854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015856:	e77d      	b.n	8015754 <_vfiprintf_r+0xf4>
 8015858:	ab03      	add	r3, sp, #12
 801585a:	9300      	str	r3, [sp, #0]
 801585c:	4622      	mov	r2, r4
 801585e:	4b0a      	ldr	r3, [pc, #40]	; (8015888 <_vfiprintf_r+0x228>)
 8015860:	a904      	add	r1, sp, #16
 8015862:	4630      	mov	r0, r6
 8015864:	f7fb ff7a 	bl	801175c <_printf_i>
 8015868:	e7ec      	b.n	8015844 <_vfiprintf_r+0x1e4>
 801586a:	bf00      	nop
 801586c:	080167d0 	.word	0x080167d0
 8015870:	0801691c 	.word	0x0801691c
 8015874:	080167f0 	.word	0x080167f0
 8015878:	080167b0 	.word	0x080167b0
 801587c:	08016922 	.word	0x08016922
 8015880:	08016926 	.word	0x08016926
 8015884:	080111f1 	.word	0x080111f1
 8015888:	0801563b 	.word	0x0801563b

0801588c <_scanf_chars>:
 801588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015890:	4615      	mov	r5, r2
 8015892:	688a      	ldr	r2, [r1, #8]
 8015894:	4680      	mov	r8, r0
 8015896:	460c      	mov	r4, r1
 8015898:	b932      	cbnz	r2, 80158a8 <_scanf_chars+0x1c>
 801589a:	698a      	ldr	r2, [r1, #24]
 801589c:	2a00      	cmp	r2, #0
 801589e:	bf14      	ite	ne
 80158a0:	f04f 32ff 	movne.w	r2, #4294967295
 80158a4:	2201      	moveq	r2, #1
 80158a6:	608a      	str	r2, [r1, #8]
 80158a8:	6822      	ldr	r2, [r4, #0]
 80158aa:	06d1      	lsls	r1, r2, #27
 80158ac:	bf5f      	itttt	pl
 80158ae:	681a      	ldrpl	r2, [r3, #0]
 80158b0:	1d11      	addpl	r1, r2, #4
 80158b2:	6019      	strpl	r1, [r3, #0]
 80158b4:	6817      	ldrpl	r7, [r2, #0]
 80158b6:	2600      	movs	r6, #0
 80158b8:	69a3      	ldr	r3, [r4, #24]
 80158ba:	b1db      	cbz	r3, 80158f4 <_scanf_chars+0x68>
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d107      	bne.n	80158d0 <_scanf_chars+0x44>
 80158c0:	682b      	ldr	r3, [r5, #0]
 80158c2:	6962      	ldr	r2, [r4, #20]
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	5cd3      	ldrb	r3, [r2, r3]
 80158c8:	b9a3      	cbnz	r3, 80158f4 <_scanf_chars+0x68>
 80158ca:	2e00      	cmp	r6, #0
 80158cc:	d132      	bne.n	8015934 <_scanf_chars+0xa8>
 80158ce:	e006      	b.n	80158de <_scanf_chars+0x52>
 80158d0:	2b02      	cmp	r3, #2
 80158d2:	d007      	beq.n	80158e4 <_scanf_chars+0x58>
 80158d4:	2e00      	cmp	r6, #0
 80158d6:	d12d      	bne.n	8015934 <_scanf_chars+0xa8>
 80158d8:	69a3      	ldr	r3, [r4, #24]
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d12a      	bne.n	8015934 <_scanf_chars+0xa8>
 80158de:	2001      	movs	r0, #1
 80158e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e4:	f7fe fe28 	bl	8014538 <__locale_ctype_ptr>
 80158e8:	682b      	ldr	r3, [r5, #0]
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	4418      	add	r0, r3
 80158ee:	7843      	ldrb	r3, [r0, #1]
 80158f0:	071b      	lsls	r3, r3, #28
 80158f2:	d4ef      	bmi.n	80158d4 <_scanf_chars+0x48>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	06da      	lsls	r2, r3, #27
 80158f8:	bf5e      	ittt	pl
 80158fa:	682b      	ldrpl	r3, [r5, #0]
 80158fc:	781b      	ldrbpl	r3, [r3, #0]
 80158fe:	703b      	strbpl	r3, [r7, #0]
 8015900:	682a      	ldr	r2, [r5, #0]
 8015902:	686b      	ldr	r3, [r5, #4]
 8015904:	f102 0201 	add.w	r2, r2, #1
 8015908:	602a      	str	r2, [r5, #0]
 801590a:	68a2      	ldr	r2, [r4, #8]
 801590c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015910:	f102 32ff 	add.w	r2, r2, #4294967295
 8015914:	606b      	str	r3, [r5, #4]
 8015916:	f106 0601 	add.w	r6, r6, #1
 801591a:	bf58      	it	pl
 801591c:	3701      	addpl	r7, #1
 801591e:	60a2      	str	r2, [r4, #8]
 8015920:	b142      	cbz	r2, 8015934 <_scanf_chars+0xa8>
 8015922:	2b00      	cmp	r3, #0
 8015924:	dcc8      	bgt.n	80158b8 <_scanf_chars+0x2c>
 8015926:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801592a:	4629      	mov	r1, r5
 801592c:	4640      	mov	r0, r8
 801592e:	4798      	blx	r3
 8015930:	2800      	cmp	r0, #0
 8015932:	d0c1      	beq.n	80158b8 <_scanf_chars+0x2c>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	f013 0310 	ands.w	r3, r3, #16
 801593a:	d105      	bne.n	8015948 <_scanf_chars+0xbc>
 801593c:	68e2      	ldr	r2, [r4, #12]
 801593e:	3201      	adds	r2, #1
 8015940:	60e2      	str	r2, [r4, #12]
 8015942:	69a2      	ldr	r2, [r4, #24]
 8015944:	b102      	cbz	r2, 8015948 <_scanf_chars+0xbc>
 8015946:	703b      	strb	r3, [r7, #0]
 8015948:	6923      	ldr	r3, [r4, #16]
 801594a:	441e      	add	r6, r3
 801594c:	6126      	str	r6, [r4, #16]
 801594e:	2000      	movs	r0, #0
 8015950:	e7c6      	b.n	80158e0 <_scanf_chars+0x54>
	...

08015954 <_scanf_i>:
 8015954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015958:	469a      	mov	sl, r3
 801595a:	4b74      	ldr	r3, [pc, #464]	; (8015b2c <_scanf_i+0x1d8>)
 801595c:	460c      	mov	r4, r1
 801595e:	4683      	mov	fp, r0
 8015960:	4616      	mov	r6, r2
 8015962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015966:	b087      	sub	sp, #28
 8015968:	ab03      	add	r3, sp, #12
 801596a:	68a7      	ldr	r7, [r4, #8]
 801596c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015970:	4b6f      	ldr	r3, [pc, #444]	; (8015b30 <_scanf_i+0x1dc>)
 8015972:	69a1      	ldr	r1, [r4, #24]
 8015974:	4a6f      	ldr	r2, [pc, #444]	; (8015b34 <_scanf_i+0x1e0>)
 8015976:	2903      	cmp	r1, #3
 8015978:	bf08      	it	eq
 801597a:	461a      	moveq	r2, r3
 801597c:	1e7b      	subs	r3, r7, #1
 801597e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8015982:	bf84      	itt	hi
 8015984:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015988:	60a3      	strhi	r3, [r4, #8]
 801598a:	6823      	ldr	r3, [r4, #0]
 801598c:	9200      	str	r2, [sp, #0]
 801598e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015992:	bf88      	it	hi
 8015994:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015998:	f104 091c 	add.w	r9, r4, #28
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	bf8c      	ite	hi
 80159a0:	197f      	addhi	r7, r7, r5
 80159a2:	2700      	movls	r7, #0
 80159a4:	464b      	mov	r3, r9
 80159a6:	f04f 0800 	mov.w	r8, #0
 80159aa:	9301      	str	r3, [sp, #4]
 80159ac:	6831      	ldr	r1, [r6, #0]
 80159ae:	ab03      	add	r3, sp, #12
 80159b0:	2202      	movs	r2, #2
 80159b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80159b6:	7809      	ldrb	r1, [r1, #0]
 80159b8:	f7ea fc2a 	bl	8000210 <memchr>
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	b330      	cbz	r0, 8015a0e <_scanf_i+0xba>
 80159c0:	f1b8 0f01 	cmp.w	r8, #1
 80159c4:	d15a      	bne.n	8015a7c <_scanf_i+0x128>
 80159c6:	6862      	ldr	r2, [r4, #4]
 80159c8:	b92a      	cbnz	r2, 80159d6 <_scanf_i+0x82>
 80159ca:	6822      	ldr	r2, [r4, #0]
 80159cc:	2108      	movs	r1, #8
 80159ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80159d2:	6061      	str	r1, [r4, #4]
 80159d4:	6022      	str	r2, [r4, #0]
 80159d6:	6822      	ldr	r2, [r4, #0]
 80159d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80159dc:	6022      	str	r2, [r4, #0]
 80159de:	68a2      	ldr	r2, [r4, #8]
 80159e0:	1e51      	subs	r1, r2, #1
 80159e2:	60a1      	str	r1, [r4, #8]
 80159e4:	b19a      	cbz	r2, 8015a0e <_scanf_i+0xba>
 80159e6:	6832      	ldr	r2, [r6, #0]
 80159e8:	1c51      	adds	r1, r2, #1
 80159ea:	6031      	str	r1, [r6, #0]
 80159ec:	7812      	ldrb	r2, [r2, #0]
 80159ee:	701a      	strb	r2, [r3, #0]
 80159f0:	1c5d      	adds	r5, r3, #1
 80159f2:	6873      	ldr	r3, [r6, #4]
 80159f4:	3b01      	subs	r3, #1
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	6073      	str	r3, [r6, #4]
 80159fa:	dc07      	bgt.n	8015a0c <_scanf_i+0xb8>
 80159fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015a00:	4631      	mov	r1, r6
 8015a02:	4658      	mov	r0, fp
 8015a04:	4798      	blx	r3
 8015a06:	2800      	cmp	r0, #0
 8015a08:	f040 8086 	bne.w	8015b18 <_scanf_i+0x1c4>
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	f108 0801 	add.w	r8, r8, #1
 8015a12:	f1b8 0f03 	cmp.w	r8, #3
 8015a16:	d1c8      	bne.n	80159aa <_scanf_i+0x56>
 8015a18:	6862      	ldr	r2, [r4, #4]
 8015a1a:	b90a      	cbnz	r2, 8015a20 <_scanf_i+0xcc>
 8015a1c:	220a      	movs	r2, #10
 8015a1e:	6062      	str	r2, [r4, #4]
 8015a20:	6862      	ldr	r2, [r4, #4]
 8015a22:	4945      	ldr	r1, [pc, #276]	; (8015b38 <_scanf_i+0x1e4>)
 8015a24:	6960      	ldr	r0, [r4, #20]
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	1a89      	subs	r1, r1, r2
 8015a2a:	f000 f8df 	bl	8015bec <__sccl>
 8015a2e:	9b01      	ldr	r3, [sp, #4]
 8015a30:	f04f 0800 	mov.w	r8, #0
 8015a34:	461d      	mov	r5, r3
 8015a36:	68a3      	ldr	r3, [r4, #8]
 8015a38:	6822      	ldr	r2, [r4, #0]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d03a      	beq.n	8015ab4 <_scanf_i+0x160>
 8015a3e:	6831      	ldr	r1, [r6, #0]
 8015a40:	6960      	ldr	r0, [r4, #20]
 8015a42:	f891 c000 	ldrb.w	ip, [r1]
 8015a46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d032      	beq.n	8015ab4 <_scanf_i+0x160>
 8015a4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015a52:	d121      	bne.n	8015a98 <_scanf_i+0x144>
 8015a54:	0510      	lsls	r0, r2, #20
 8015a56:	d51f      	bpl.n	8015a98 <_scanf_i+0x144>
 8015a58:	f108 0801 	add.w	r8, r8, #1
 8015a5c:	b117      	cbz	r7, 8015a64 <_scanf_i+0x110>
 8015a5e:	3301      	adds	r3, #1
 8015a60:	3f01      	subs	r7, #1
 8015a62:	60a3      	str	r3, [r4, #8]
 8015a64:	6873      	ldr	r3, [r6, #4]
 8015a66:	3b01      	subs	r3, #1
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	6073      	str	r3, [r6, #4]
 8015a6c:	dd1b      	ble.n	8015aa6 <_scanf_i+0x152>
 8015a6e:	6833      	ldr	r3, [r6, #0]
 8015a70:	3301      	adds	r3, #1
 8015a72:	6033      	str	r3, [r6, #0]
 8015a74:	68a3      	ldr	r3, [r4, #8]
 8015a76:	3b01      	subs	r3, #1
 8015a78:	60a3      	str	r3, [r4, #8]
 8015a7a:	e7dc      	b.n	8015a36 <_scanf_i+0xe2>
 8015a7c:	f1b8 0f02 	cmp.w	r8, #2
 8015a80:	d1ad      	bne.n	80159de <_scanf_i+0x8a>
 8015a82:	6822      	ldr	r2, [r4, #0]
 8015a84:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015a88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015a8c:	d1bf      	bne.n	8015a0e <_scanf_i+0xba>
 8015a8e:	2110      	movs	r1, #16
 8015a90:	6061      	str	r1, [r4, #4]
 8015a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015a96:	e7a1      	b.n	80159dc <_scanf_i+0x88>
 8015a98:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015a9c:	6022      	str	r2, [r4, #0]
 8015a9e:	780b      	ldrb	r3, [r1, #0]
 8015aa0:	702b      	strb	r3, [r5, #0]
 8015aa2:	3501      	adds	r5, #1
 8015aa4:	e7de      	b.n	8015a64 <_scanf_i+0x110>
 8015aa6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015aaa:	4631      	mov	r1, r6
 8015aac:	4658      	mov	r0, fp
 8015aae:	4798      	blx	r3
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	d0df      	beq.n	8015a74 <_scanf_i+0x120>
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	05d9      	lsls	r1, r3, #23
 8015ab8:	d50c      	bpl.n	8015ad4 <_scanf_i+0x180>
 8015aba:	454d      	cmp	r5, r9
 8015abc:	d908      	bls.n	8015ad0 <_scanf_i+0x17c>
 8015abe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ac6:	4632      	mov	r2, r6
 8015ac8:	4658      	mov	r0, fp
 8015aca:	4798      	blx	r3
 8015acc:	1e6f      	subs	r7, r5, #1
 8015ace:	463d      	mov	r5, r7
 8015ad0:	454d      	cmp	r5, r9
 8015ad2:	d029      	beq.n	8015b28 <_scanf_i+0x1d4>
 8015ad4:	6822      	ldr	r2, [r4, #0]
 8015ad6:	f012 0210 	ands.w	r2, r2, #16
 8015ada:	d113      	bne.n	8015b04 <_scanf_i+0x1b0>
 8015adc:	702a      	strb	r2, [r5, #0]
 8015ade:	6863      	ldr	r3, [r4, #4]
 8015ae0:	9e00      	ldr	r6, [sp, #0]
 8015ae2:	4649      	mov	r1, r9
 8015ae4:	4658      	mov	r0, fp
 8015ae6:	47b0      	blx	r6
 8015ae8:	f8da 3000 	ldr.w	r3, [sl]
 8015aec:	6821      	ldr	r1, [r4, #0]
 8015aee:	1d1a      	adds	r2, r3, #4
 8015af0:	f8ca 2000 	str.w	r2, [sl]
 8015af4:	f011 0f20 	tst.w	r1, #32
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	d010      	beq.n	8015b1e <_scanf_i+0x1ca>
 8015afc:	6018      	str	r0, [r3, #0]
 8015afe:	68e3      	ldr	r3, [r4, #12]
 8015b00:	3301      	adds	r3, #1
 8015b02:	60e3      	str	r3, [r4, #12]
 8015b04:	eba5 0509 	sub.w	r5, r5, r9
 8015b08:	44a8      	add	r8, r5
 8015b0a:	6925      	ldr	r5, [r4, #16]
 8015b0c:	4445      	add	r5, r8
 8015b0e:	6125      	str	r5, [r4, #16]
 8015b10:	2000      	movs	r0, #0
 8015b12:	b007      	add	sp, #28
 8015b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b18:	f04f 0800 	mov.w	r8, #0
 8015b1c:	e7ca      	b.n	8015ab4 <_scanf_i+0x160>
 8015b1e:	07ca      	lsls	r2, r1, #31
 8015b20:	bf4c      	ite	mi
 8015b22:	8018      	strhmi	r0, [r3, #0]
 8015b24:	6018      	strpl	r0, [r3, #0]
 8015b26:	e7ea      	b.n	8015afe <_scanf_i+0x1aa>
 8015b28:	2001      	movs	r0, #1
 8015b2a:	e7f2      	b.n	8015b12 <_scanf_i+0x1be>
 8015b2c:	080160b4 	.word	0x080160b4
 8015b30:	08012d41 	.word	0x08012d41
 8015b34:	08015d69 	.word	0x08015d69
 8015b38:	0801693d 	.word	0x0801693d

08015b3c <_putc_r>:
 8015b3c:	b570      	push	{r4, r5, r6, lr}
 8015b3e:	460d      	mov	r5, r1
 8015b40:	4614      	mov	r4, r2
 8015b42:	4606      	mov	r6, r0
 8015b44:	b118      	cbz	r0, 8015b4e <_putc_r+0x12>
 8015b46:	6983      	ldr	r3, [r0, #24]
 8015b48:	b90b      	cbnz	r3, 8015b4e <_putc_r+0x12>
 8015b4a:	f7fe f941 	bl	8013dd0 <__sinit>
 8015b4e:	4b13      	ldr	r3, [pc, #76]	; (8015b9c <_putc_r+0x60>)
 8015b50:	429c      	cmp	r4, r3
 8015b52:	d112      	bne.n	8015b7a <_putc_r+0x3e>
 8015b54:	6874      	ldr	r4, [r6, #4]
 8015b56:	68a3      	ldr	r3, [r4, #8]
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	60a3      	str	r3, [r4, #8]
 8015b5e:	da16      	bge.n	8015b8e <_putc_r+0x52>
 8015b60:	69a2      	ldr	r2, [r4, #24]
 8015b62:	4293      	cmp	r3, r2
 8015b64:	db02      	blt.n	8015b6c <_putc_r+0x30>
 8015b66:	b2eb      	uxtb	r3, r5
 8015b68:	2b0a      	cmp	r3, #10
 8015b6a:	d110      	bne.n	8015b8e <_putc_r+0x52>
 8015b6c:	4622      	mov	r2, r4
 8015b6e:	4629      	mov	r1, r5
 8015b70:	4630      	mov	r0, r6
 8015b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b76:	f7fd b915 	b.w	8012da4 <__swbuf_r>
 8015b7a:	4b09      	ldr	r3, [pc, #36]	; (8015ba0 <_putc_r+0x64>)
 8015b7c:	429c      	cmp	r4, r3
 8015b7e:	d101      	bne.n	8015b84 <_putc_r+0x48>
 8015b80:	68b4      	ldr	r4, [r6, #8]
 8015b82:	e7e8      	b.n	8015b56 <_putc_r+0x1a>
 8015b84:	4b07      	ldr	r3, [pc, #28]	; (8015ba4 <_putc_r+0x68>)
 8015b86:	429c      	cmp	r4, r3
 8015b88:	bf08      	it	eq
 8015b8a:	68f4      	ldreq	r4, [r6, #12]
 8015b8c:	e7e3      	b.n	8015b56 <_putc_r+0x1a>
 8015b8e:	6823      	ldr	r3, [r4, #0]
 8015b90:	1c5a      	adds	r2, r3, #1
 8015b92:	6022      	str	r2, [r4, #0]
 8015b94:	701d      	strb	r5, [r3, #0]
 8015b96:	b2e8      	uxtb	r0, r5
 8015b98:	bd70      	pop	{r4, r5, r6, pc}
 8015b9a:	bf00      	nop
 8015b9c:	080167d0 	.word	0x080167d0
 8015ba0:	080167f0 	.word	0x080167f0
 8015ba4:	080167b0 	.word	0x080167b0

08015ba8 <_read_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4c07      	ldr	r4, [pc, #28]	; (8015bc8 <_read_r+0x20>)
 8015bac:	4605      	mov	r5, r0
 8015bae:	4608      	mov	r0, r1
 8015bb0:	4611      	mov	r1, r2
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	6022      	str	r2, [r4, #0]
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	f7ee fe7c 	bl	80048b4 <_read>
 8015bbc:	1c43      	adds	r3, r0, #1
 8015bbe:	d102      	bne.n	8015bc6 <_read_r+0x1e>
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	b103      	cbz	r3, 8015bc6 <_read_r+0x1e>
 8015bc4:	602b      	str	r3, [r5, #0]
 8015bc6:	bd38      	pop	{r3, r4, r5, pc}
 8015bc8:	2000c680 	.word	0x2000c680

08015bcc <_sbrk_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4c06      	ldr	r4, [pc, #24]	; (8015be8 <_sbrk_r+0x1c>)
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	6023      	str	r3, [r4, #0]
 8015bd8:	f7ee febe 	bl	8004958 <_sbrk>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_sbrk_r+0x1a>
 8015be0:	6823      	ldr	r3, [r4, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_sbrk_r+0x1a>
 8015be4:	602b      	str	r3, [r5, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	2000c680 	.word	0x2000c680

08015bec <__sccl>:
 8015bec:	b570      	push	{r4, r5, r6, lr}
 8015bee:	780b      	ldrb	r3, [r1, #0]
 8015bf0:	2b5e      	cmp	r3, #94	; 0x5e
 8015bf2:	bf13      	iteet	ne
 8015bf4:	1c4a      	addne	r2, r1, #1
 8015bf6:	1c8a      	addeq	r2, r1, #2
 8015bf8:	784b      	ldrbeq	r3, [r1, #1]
 8015bfa:	2100      	movne	r1, #0
 8015bfc:	bf08      	it	eq
 8015bfe:	2101      	moveq	r1, #1
 8015c00:	1e44      	subs	r4, r0, #1
 8015c02:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8015c06:	f804 1f01 	strb.w	r1, [r4, #1]!
 8015c0a:	42ac      	cmp	r4, r5
 8015c0c:	d1fb      	bne.n	8015c06 <__sccl+0x1a>
 8015c0e:	b913      	cbnz	r3, 8015c16 <__sccl+0x2a>
 8015c10:	3a01      	subs	r2, #1
 8015c12:	4610      	mov	r0, r2
 8015c14:	bd70      	pop	{r4, r5, r6, pc}
 8015c16:	f081 0401 	eor.w	r4, r1, #1
 8015c1a:	54c4      	strb	r4, [r0, r3]
 8015c1c:	1c51      	adds	r1, r2, #1
 8015c1e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015c22:	2d2d      	cmp	r5, #45	; 0x2d
 8015c24:	f101 36ff 	add.w	r6, r1, #4294967295
 8015c28:	460a      	mov	r2, r1
 8015c2a:	d006      	beq.n	8015c3a <__sccl+0x4e>
 8015c2c:	2d5d      	cmp	r5, #93	; 0x5d
 8015c2e:	d0f0      	beq.n	8015c12 <__sccl+0x26>
 8015c30:	b90d      	cbnz	r5, 8015c36 <__sccl+0x4a>
 8015c32:	4632      	mov	r2, r6
 8015c34:	e7ed      	b.n	8015c12 <__sccl+0x26>
 8015c36:	462b      	mov	r3, r5
 8015c38:	e7ef      	b.n	8015c1a <__sccl+0x2e>
 8015c3a:	780e      	ldrb	r6, [r1, #0]
 8015c3c:	2e5d      	cmp	r6, #93	; 0x5d
 8015c3e:	d0fa      	beq.n	8015c36 <__sccl+0x4a>
 8015c40:	42b3      	cmp	r3, r6
 8015c42:	dcf8      	bgt.n	8015c36 <__sccl+0x4a>
 8015c44:	3301      	adds	r3, #1
 8015c46:	429e      	cmp	r6, r3
 8015c48:	54c4      	strb	r4, [r0, r3]
 8015c4a:	dcfb      	bgt.n	8015c44 <__sccl+0x58>
 8015c4c:	3102      	adds	r1, #2
 8015c4e:	e7e6      	b.n	8015c1e <__sccl+0x32>

08015c50 <strncmp>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	b16a      	cbz	r2, 8015c70 <strncmp+0x20>
 8015c54:	3901      	subs	r1, #1
 8015c56:	1884      	adds	r4, r0, r2
 8015c58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015c5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015c60:	4293      	cmp	r3, r2
 8015c62:	d103      	bne.n	8015c6c <strncmp+0x1c>
 8015c64:	42a0      	cmp	r0, r4
 8015c66:	d001      	beq.n	8015c6c <strncmp+0x1c>
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d1f5      	bne.n	8015c58 <strncmp+0x8>
 8015c6c:	1a98      	subs	r0, r3, r2
 8015c6e:	bd10      	pop	{r4, pc}
 8015c70:	4610      	mov	r0, r2
 8015c72:	e7fc      	b.n	8015c6e <strncmp+0x1e>

08015c74 <_strtoul_l.isra.0>:
 8015c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c78:	4680      	mov	r8, r0
 8015c7a:	4689      	mov	r9, r1
 8015c7c:	4692      	mov	sl, r2
 8015c7e:	461e      	mov	r6, r3
 8015c80:	460f      	mov	r7, r1
 8015c82:	463d      	mov	r5, r7
 8015c84:	9808      	ldr	r0, [sp, #32]
 8015c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015c8a:	f7fe fc51 	bl	8014530 <__locale_ctype_ptr_l>
 8015c8e:	4420      	add	r0, r4
 8015c90:	7843      	ldrb	r3, [r0, #1]
 8015c92:	f013 0308 	ands.w	r3, r3, #8
 8015c96:	d130      	bne.n	8015cfa <_strtoul_l.isra.0+0x86>
 8015c98:	2c2d      	cmp	r4, #45	; 0x2d
 8015c9a:	d130      	bne.n	8015cfe <_strtoul_l.isra.0+0x8a>
 8015c9c:	787c      	ldrb	r4, [r7, #1]
 8015c9e:	1cbd      	adds	r5, r7, #2
 8015ca0:	2101      	movs	r1, #1
 8015ca2:	2e00      	cmp	r6, #0
 8015ca4:	d05c      	beq.n	8015d60 <_strtoul_l.isra.0+0xec>
 8015ca6:	2e10      	cmp	r6, #16
 8015ca8:	d109      	bne.n	8015cbe <_strtoul_l.isra.0+0x4a>
 8015caa:	2c30      	cmp	r4, #48	; 0x30
 8015cac:	d107      	bne.n	8015cbe <_strtoul_l.isra.0+0x4a>
 8015cae:	782b      	ldrb	r3, [r5, #0]
 8015cb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015cb4:	2b58      	cmp	r3, #88	; 0x58
 8015cb6:	d14e      	bne.n	8015d56 <_strtoul_l.isra.0+0xe2>
 8015cb8:	786c      	ldrb	r4, [r5, #1]
 8015cba:	2610      	movs	r6, #16
 8015cbc:	3502      	adds	r5, #2
 8015cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	fbb2 f2f6 	udiv	r2, r2, r6
 8015cc8:	fb06 fc02 	mul.w	ip, r6, r2
 8015ccc:	ea6f 0c0c 	mvn.w	ip, ip
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015cd6:	2f09      	cmp	r7, #9
 8015cd8:	d817      	bhi.n	8015d0a <_strtoul_l.isra.0+0x96>
 8015cda:	463c      	mov	r4, r7
 8015cdc:	42a6      	cmp	r6, r4
 8015cde:	dd23      	ble.n	8015d28 <_strtoul_l.isra.0+0xb4>
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	db1e      	blt.n	8015d22 <_strtoul_l.isra.0+0xae>
 8015ce4:	4282      	cmp	r2, r0
 8015ce6:	d31c      	bcc.n	8015d22 <_strtoul_l.isra.0+0xae>
 8015ce8:	d101      	bne.n	8015cee <_strtoul_l.isra.0+0x7a>
 8015cea:	45a4      	cmp	ip, r4
 8015cec:	db19      	blt.n	8015d22 <_strtoul_l.isra.0+0xae>
 8015cee:	fb00 4006 	mla	r0, r0, r6, r4
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015cf8:	e7eb      	b.n	8015cd2 <_strtoul_l.isra.0+0x5e>
 8015cfa:	462f      	mov	r7, r5
 8015cfc:	e7c1      	b.n	8015c82 <_strtoul_l.isra.0+0xe>
 8015cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8015d00:	bf04      	itt	eq
 8015d02:	1cbd      	addeq	r5, r7, #2
 8015d04:	787c      	ldrbeq	r4, [r7, #1]
 8015d06:	4619      	mov	r1, r3
 8015d08:	e7cb      	b.n	8015ca2 <_strtoul_l.isra.0+0x2e>
 8015d0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015d0e:	2f19      	cmp	r7, #25
 8015d10:	d801      	bhi.n	8015d16 <_strtoul_l.isra.0+0xa2>
 8015d12:	3c37      	subs	r4, #55	; 0x37
 8015d14:	e7e2      	b.n	8015cdc <_strtoul_l.isra.0+0x68>
 8015d16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015d1a:	2f19      	cmp	r7, #25
 8015d1c:	d804      	bhi.n	8015d28 <_strtoul_l.isra.0+0xb4>
 8015d1e:	3c57      	subs	r4, #87	; 0x57
 8015d20:	e7dc      	b.n	8015cdc <_strtoul_l.isra.0+0x68>
 8015d22:	f04f 33ff 	mov.w	r3, #4294967295
 8015d26:	e7e5      	b.n	8015cf4 <_strtoul_l.isra.0+0x80>
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	da09      	bge.n	8015d40 <_strtoul_l.isra.0+0xcc>
 8015d2c:	2322      	movs	r3, #34	; 0x22
 8015d2e:	f8c8 3000 	str.w	r3, [r8]
 8015d32:	f04f 30ff 	mov.w	r0, #4294967295
 8015d36:	f1ba 0f00 	cmp.w	sl, #0
 8015d3a:	d107      	bne.n	8015d4c <_strtoul_l.isra.0+0xd8>
 8015d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d40:	b101      	cbz	r1, 8015d44 <_strtoul_l.isra.0+0xd0>
 8015d42:	4240      	negs	r0, r0
 8015d44:	f1ba 0f00 	cmp.w	sl, #0
 8015d48:	d0f8      	beq.n	8015d3c <_strtoul_l.isra.0+0xc8>
 8015d4a:	b10b      	cbz	r3, 8015d50 <_strtoul_l.isra.0+0xdc>
 8015d4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8015d50:	f8ca 9000 	str.w	r9, [sl]
 8015d54:	e7f2      	b.n	8015d3c <_strtoul_l.isra.0+0xc8>
 8015d56:	2430      	movs	r4, #48	; 0x30
 8015d58:	2e00      	cmp	r6, #0
 8015d5a:	d1b0      	bne.n	8015cbe <_strtoul_l.isra.0+0x4a>
 8015d5c:	2608      	movs	r6, #8
 8015d5e:	e7ae      	b.n	8015cbe <_strtoul_l.isra.0+0x4a>
 8015d60:	2c30      	cmp	r4, #48	; 0x30
 8015d62:	d0a4      	beq.n	8015cae <_strtoul_l.isra.0+0x3a>
 8015d64:	260a      	movs	r6, #10
 8015d66:	e7aa      	b.n	8015cbe <_strtoul_l.isra.0+0x4a>

08015d68 <_strtoul_r>:
 8015d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d6a:	4c06      	ldr	r4, [pc, #24]	; (8015d84 <_strtoul_r+0x1c>)
 8015d6c:	4d06      	ldr	r5, [pc, #24]	; (8015d88 <_strtoul_r+0x20>)
 8015d6e:	6824      	ldr	r4, [r4, #0]
 8015d70:	6a24      	ldr	r4, [r4, #32]
 8015d72:	2c00      	cmp	r4, #0
 8015d74:	bf08      	it	eq
 8015d76:	462c      	moveq	r4, r5
 8015d78:	9400      	str	r4, [sp, #0]
 8015d7a:	f7ff ff7b 	bl	8015c74 <_strtoul_l.isra.0>
 8015d7e:	b003      	add	sp, #12
 8015d80:	bd30      	pop	{r4, r5, pc}
 8015d82:	bf00      	nop
 8015d84:	2000000c 	.word	0x2000000c
 8015d88:	20000070 	.word	0x20000070

08015d8c <__submore>:
 8015d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d90:	460c      	mov	r4, r1
 8015d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d98:	4299      	cmp	r1, r3
 8015d9a:	d11d      	bne.n	8015dd8 <__submore+0x4c>
 8015d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015da0:	f7ff f8de 	bl	8014f60 <_malloc_r>
 8015da4:	b918      	cbnz	r0, 8015dae <__submore+0x22>
 8015da6:	f04f 30ff 	mov.w	r0, #4294967295
 8015daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8015db4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015db8:	6360      	str	r0, [r4, #52]	; 0x34
 8015dba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015dbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015dc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015dc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015dca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015dce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015dd2:	6020      	str	r0, [r4, #0]
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	e7e8      	b.n	8015daa <__submore+0x1e>
 8015dd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015dda:	0077      	lsls	r7, r6, #1
 8015ddc:	463a      	mov	r2, r7
 8015dde:	f000 f85a 	bl	8015e96 <_realloc_r>
 8015de2:	4605      	mov	r5, r0
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d0de      	beq.n	8015da6 <__submore+0x1a>
 8015de8:	eb00 0806 	add.w	r8, r0, r6
 8015dec:	4601      	mov	r1, r0
 8015dee:	4632      	mov	r2, r6
 8015df0:	4640      	mov	r0, r8
 8015df2:	f7fe fc4f 	bl	8014694 <memcpy>
 8015df6:	f8c4 8000 	str.w	r8, [r4]
 8015dfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015dfe:	e7e9      	b.n	8015dd4 <__submore+0x48>

08015e00 <__ascii_wctomb>:
 8015e00:	b149      	cbz	r1, 8015e16 <__ascii_wctomb+0x16>
 8015e02:	2aff      	cmp	r2, #255	; 0xff
 8015e04:	bf85      	ittet	hi
 8015e06:	238a      	movhi	r3, #138	; 0x8a
 8015e08:	6003      	strhi	r3, [r0, #0]
 8015e0a:	700a      	strbls	r2, [r1, #0]
 8015e0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015e10:	bf98      	it	ls
 8015e12:	2001      	movls	r0, #1
 8015e14:	4770      	bx	lr
 8015e16:	4608      	mov	r0, r1
 8015e18:	4770      	bx	lr
	...

08015e1c <_fstat_r>:
 8015e1c:	b538      	push	{r3, r4, r5, lr}
 8015e1e:	4c07      	ldr	r4, [pc, #28]	; (8015e3c <_fstat_r+0x20>)
 8015e20:	2300      	movs	r3, #0
 8015e22:	4605      	mov	r5, r0
 8015e24:	4608      	mov	r0, r1
 8015e26:	4611      	mov	r1, r2
 8015e28:	6023      	str	r3, [r4, #0]
 8015e2a:	f7ee fd6c 	bl	8004906 <_fstat>
 8015e2e:	1c43      	adds	r3, r0, #1
 8015e30:	d102      	bne.n	8015e38 <_fstat_r+0x1c>
 8015e32:	6823      	ldr	r3, [r4, #0]
 8015e34:	b103      	cbz	r3, 8015e38 <_fstat_r+0x1c>
 8015e36:	602b      	str	r3, [r5, #0]
 8015e38:	bd38      	pop	{r3, r4, r5, pc}
 8015e3a:	bf00      	nop
 8015e3c:	2000c680 	.word	0x2000c680

08015e40 <_isatty_r>:
 8015e40:	b538      	push	{r3, r4, r5, lr}
 8015e42:	4c06      	ldr	r4, [pc, #24]	; (8015e5c <_isatty_r+0x1c>)
 8015e44:	2300      	movs	r3, #0
 8015e46:	4605      	mov	r5, r0
 8015e48:	4608      	mov	r0, r1
 8015e4a:	6023      	str	r3, [r4, #0]
 8015e4c:	f7ee fd6b 	bl	8004926 <_isatty>
 8015e50:	1c43      	adds	r3, r0, #1
 8015e52:	d102      	bne.n	8015e5a <_isatty_r+0x1a>
 8015e54:	6823      	ldr	r3, [r4, #0]
 8015e56:	b103      	cbz	r3, 8015e5a <_isatty_r+0x1a>
 8015e58:	602b      	str	r3, [r5, #0]
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	2000c680 	.word	0x2000c680

08015e60 <memmove>:
 8015e60:	4288      	cmp	r0, r1
 8015e62:	b510      	push	{r4, lr}
 8015e64:	eb01 0302 	add.w	r3, r1, r2
 8015e68:	d807      	bhi.n	8015e7a <memmove+0x1a>
 8015e6a:	1e42      	subs	r2, r0, #1
 8015e6c:	4299      	cmp	r1, r3
 8015e6e:	d00a      	beq.n	8015e86 <memmove+0x26>
 8015e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e78:	e7f8      	b.n	8015e6c <memmove+0xc>
 8015e7a:	4283      	cmp	r3, r0
 8015e7c:	d9f5      	bls.n	8015e6a <memmove+0xa>
 8015e7e:	1881      	adds	r1, r0, r2
 8015e80:	1ad2      	subs	r2, r2, r3
 8015e82:	42d3      	cmn	r3, r2
 8015e84:	d100      	bne.n	8015e88 <memmove+0x28>
 8015e86:	bd10      	pop	{r4, pc}
 8015e88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e90:	e7f7      	b.n	8015e82 <memmove+0x22>

08015e92 <__malloc_lock>:
 8015e92:	4770      	bx	lr

08015e94 <__malloc_unlock>:
 8015e94:	4770      	bx	lr

08015e96 <_realloc_r>:
 8015e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e98:	4607      	mov	r7, r0
 8015e9a:	4614      	mov	r4, r2
 8015e9c:	460e      	mov	r6, r1
 8015e9e:	b921      	cbnz	r1, 8015eaa <_realloc_r+0x14>
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015ea6:	f7ff b85b 	b.w	8014f60 <_malloc_r>
 8015eaa:	b922      	cbnz	r2, 8015eb6 <_realloc_r+0x20>
 8015eac:	f7ff f80a 	bl	8014ec4 <_free_r>
 8015eb0:	4625      	mov	r5, r4
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eb6:	f000 f814 	bl	8015ee2 <_malloc_usable_size_r>
 8015eba:	42a0      	cmp	r0, r4
 8015ebc:	d20f      	bcs.n	8015ede <_realloc_r+0x48>
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	4638      	mov	r0, r7
 8015ec2:	f7ff f84d 	bl	8014f60 <_malloc_r>
 8015ec6:	4605      	mov	r5, r0
 8015ec8:	2800      	cmp	r0, #0
 8015eca:	d0f2      	beq.n	8015eb2 <_realloc_r+0x1c>
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4622      	mov	r2, r4
 8015ed0:	f7fe fbe0 	bl	8014694 <memcpy>
 8015ed4:	4631      	mov	r1, r6
 8015ed6:	4638      	mov	r0, r7
 8015ed8:	f7fe fff4 	bl	8014ec4 <_free_r>
 8015edc:	e7e9      	b.n	8015eb2 <_realloc_r+0x1c>
 8015ede:	4635      	mov	r5, r6
 8015ee0:	e7e7      	b.n	8015eb2 <_realloc_r+0x1c>

08015ee2 <_malloc_usable_size_r>:
 8015ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ee6:	1f18      	subs	r0, r3, #4
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	bfbc      	itt	lt
 8015eec:	580b      	ldrlt	r3, [r1, r0]
 8015eee:	18c0      	addlt	r0, r0, r3
 8015ef0:	4770      	bx	lr
	...

08015ef4 <_init>:
 8015ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ef6:	bf00      	nop
 8015ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015efa:	bc08      	pop	{r3}
 8015efc:	469e      	mov	lr, r3
 8015efe:	4770      	bx	lr

08015f00 <_fini>:
 8015f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f02:	bf00      	nop
 8015f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f06:	bc08      	pop	{r3}
 8015f08:	469e      	mov	lr, r3
 8015f0a:	4770      	bx	lr
