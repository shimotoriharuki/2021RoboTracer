
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ec4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08017088  08017088  00027088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c04  08017c04  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017c04  08017c04  00027c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c0c  08017c0c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017c0c  08017c0c  00027c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c14  08017c14  00027c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017c18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001805c  200001dc  08017df4  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018238  08017df4  00038238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033190  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007085  00000000  00000000  0006339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002078  00000000  00000000  0006a428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc8  00000000  00000000  0006c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036352  00000000  00000000  0006e268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023d1b  00000000  00000000  000a45ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010df05  00000000  00000000  000c82d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d61da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e70  00000000  00000000  001d6258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801706c 	.word	0x0801706c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0801706c 	.word	0x0801706c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fa0c 	bl	80073f4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20015dc4 	.word	0x20015dc4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 f9f4 	bl	80073f4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20015dc4 	.word	0x20015dc4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 f87d 	bl	8007120 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 fde4 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 fdde 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 fdd8 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 fdd2 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fdcc 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fdc6 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 fdc0 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 fdba 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 fdb4 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 fdae 	bl	8005bf4 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fda2 	bl	8005bf4 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fd9c 	bl	8005bf4 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 feed 	bl	8013f08 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a0:	213c      	movs	r1, #60	; 0x3c
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <_ZN7Encoder4initEv+0x30>)
 80011a4:	f009 ffbe 	bl	800b124 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011a8:	213c      	movs	r1, #60	; 0x3c
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <_ZN7Encoder4initEv+0x34>)
 80011ac:	f009 ffba 	bl	800b124 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_ZN7Encoder4initEv+0x38>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <_ZN7Encoder4initEv+0x3c>)
 80011ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20016018 	.word	0x20016018
 80011cc:	20015cfc 	.word	0x20015cfc
 80011d0:	40010000 	.word	0x40010000
 80011d4:	40010400 	.word	0x40010400

080011d8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	monitor_cnt_l = cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <_ZN7Encoder9updateCntEv+0x118>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80012f4 <_ZN7Encoder9updateCntEv+0x11c>
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80012f8 <_ZN7Encoder9updateCntEv+0x120>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a00 	vstr	s15, [r3]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <_ZN7Encoder9updateCntEv+0x124>)
 8001208:	6013      	str	r3, [r2, #0]
	monitor_cnt_r = cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <_ZN7Encoder9updateCntEv+0x128>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80012f4 <_ZN7Encoder9updateCntEv+0x11c>
 800121a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012f8 <_ZN7Encoder9updateCntEv+0x120>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edc3 7a01 	vstr	s15, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a34      	ldr	r2, [pc, #208]	; (8001304 <_ZN7Encoder9updateCntEv+0x12c>)
 8001232:	6013      	str	r3, [r2, #0]

	total_cnt_l_ += cnt_l_;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 2a90 	vmov	r2, s15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60da      	str	r2, [r3, #12]
	total_cnt_r_ += cnt_r_;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a01 	vldr	s15, [r3, #4]
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edd3 7a01 	vldr	s15, [r3, #4]
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	ee17 0a90 	vmov	r0, s15
 800128c:	f7ff f974 	bl	8000578 <__aeabi_f2d>
 8001290:	a315      	add	r3, pc, #84	; (adr r3, 80012e8 <_ZN7Encoder9updateCntEv+0x110>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9c7 	bl	8000628 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012aa:	f7ff fae7 	bl	800087c <__aeabi_ddiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	f7ff fcaf 	bl	8000c18 <__aeabi_d2f>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <_ZN7Encoder9updateCntEv+0x130>)
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	1ab1d998 	.word	0x1ab1d998
 80012ec:	3f7830b5 	.word	0x3f7830b5
 80012f0:	40010000 	.word	0x40010000
 80012f4:	47000000 	.word	0x47000000
 80012f8:	3f912547 	.word	0x3f912547
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	40010400 	.word	0x40010400
 8001304:	20000200 	.word	0x20000200
 8001308:	200001f8 	.word	0x200001f8

0800130c <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	return distance_;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	ee07 3a90 	vmov	s15, r3
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return total_distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	ee07 3a90 	vmov	s15, r3
}
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_ZN7Encoder8clearCntEv+0x3c>)
 80013a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_ZN7Encoder8clearCntEv+0x40>)
 80013ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010400 	.word	0x40010400

080013d0 <_ZN7Encoder13clearTotalCntEv>:
{
	return long((total_cnt_l_ + total_cnt_r_) / 2);
}

void Encoder::clearTotalCnt()
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f98f 	bl	800172c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800140e:	f000 f9a3 	bl	8001758 <fopen_folder_and_file>

	return ret;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <user_fclose+0x1c>)
 8001428:	f00f f8ad 	bl	8010586 <f_close>

	return ret;
 800142c:	79fb      	ldrb	r3, [r7, #7]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20014c08 	.word	0x20014c08

0800143c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b087      	sub	sp, #28
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	4613      	mov	r3, r2
 800144a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	81fb      	strh	r3, [r7, #14]
 8001454:	e030      	b.n	80014b8 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f888 	bl	8000578 <__aeabi_f2d>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	e9cd 3400 	strd	r3, r4, [sp]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <sd_write+0x94>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <sd_write+0x98>)
 8001476:	f011 fdb7 	bl	8012fe8 <sniprintf>

		if(state == ADD_WRITE){
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <sd_write+0x9c>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <sd_write+0x9c>)
 8001488:	f00f f8f1 	bl	801066e <f_lseek>
 800148c:	e003      	b.n	8001496 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800148e:	2100      	movs	r1, #0
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <sd_write+0x9c>)
 8001492:	f00f f8ec 	bl	801066e <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <sd_write+0x98>)
 8001498:	f7fe feb2 	bl	8000200 <strlen>
 800149c:	4602      	mov	r2, r0
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <sd_write+0xa0>)
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <sd_write+0x98>)
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <sd_write+0x9c>)
 80014a4:	f00e fe5d 	bl	8010162 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014a8:	f000 f970 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbc8      	blt.n	8001456 <sd_write+0x1a>
	}
	return ret;
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08017088 	.word	0x08017088
 80014d4:	20014b78 	.word	0x20014b78
 80014d8:	20014c08 	.word	0x20014c08
 80014dc:	20014bf8 	.word	0x20014bf8

080014e0 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4613      	mov	r3, r2
 80014ee:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f918 	bl	800172c <create_path>

	if(state == OVER_WRITE){
 80014fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001504:	4822      	ldr	r0, [pc, #136]	; (8001590 <sd_write_array_float+0xb0>)
 8001506:	f00f f868 	bl	80105da <f_chdir>
		f_unlink(filepath);	//	一回消す
 800150a:	4822      	ldr	r0, [pc, #136]	; (8001594 <sd_write_array_float+0xb4>)
 800150c:	f00f fad3 	bl	8010ab6 <f_unlink>
		f_chdir("..");
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <sd_write_array_float+0xb8>)
 8001512:	f00f f862 	bl	80105da <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001516:	f000 f91f 	bl	8001758 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	82fb      	strh	r3, [r7, #22]
 800151e:	e028      	b.n	8001572 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001520:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f823 	bl	8000578 <__aeabi_f2d>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	e9cd 3400 	strd	r3, r4, [sp]
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <sd_write_array_float+0xbc>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <sd_write_array_float+0xc0>)
 8001540:	f011 fd52 	bl	8012fe8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <sd_write_array_float+0xc4>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4619      	mov	r1, r3
 800154a:	4816      	ldr	r0, [pc, #88]	; (80015a4 <sd_write_array_float+0xc4>)
 800154c:	f00f f88f 	bl	801066e <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <sd_write_array_float+0xc0>)
 8001552:	f7fe fe55 	bl	8000200 <strlen>
 8001556:	4602      	mov	r2, r0
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <sd_write_array_float+0xc8>)
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <sd_write_array_float+0xc0>)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <sd_write_array_float+0xc4>)
 800155e:	f00e fe00 	bl	8010162 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001562:	f000 f913 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001566:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	82fb      	strh	r3, [r7, #22]
 8001572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbd0      	blt.n	8001520 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <sd_write_array_float+0xc4>)
 8001580:	f00f f801 	bl	8010586 <f_close>

	return ret;
 8001584:	7d7b      	ldrb	r3, [r7, #21]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20014a78 	.word	0x20014a78
 8001594:	20013934 	.word	0x20013934
 8001598:	08017098 	.word	0x08017098
 800159c:	08017088 	.word	0x08017088
 80015a0:	20014b78 	.word	0x20014b78
 80015a4:	20014c08 	.word	0x20014c08
 80015a8:	20014bf8 	.word	0x20014bf8

080015ac <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f8b2 	bl	800172c <create_path>

	if(state == OVER_WRITE){
 80015c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80015d0:	481e      	ldr	r0, [pc, #120]	; (800164c <sd_write_array_int+0xa0>)
 80015d2:	f00f f802 	bl	80105da <f_chdir>
		f_unlink(filepath);	//一回消す
 80015d6:	481e      	ldr	r0, [pc, #120]	; (8001650 <sd_write_array_int+0xa4>)
 80015d8:	f00f fa6d 	bl	8010ab6 <f_unlink>
		f_chdir("..");
 80015dc:	481d      	ldr	r0, [pc, #116]	; (8001654 <sd_write_array_int+0xa8>)
 80015de:	f00e fffc 	bl	80105da <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80015e2:	f000 f8b9 	bl	8001758 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	82fb      	strh	r3, [r7, #22]
 80015ea:	e021      	b.n	8001630 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80015ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <sd_write_array_int+0xac>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <sd_write_array_int+0xb0>)
 80015fe:	f011 fcf3 	bl	8012fe8 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <sd_write_array_int+0xb4>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4619      	mov	r1, r3
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <sd_write_array_int+0xb4>)
 800160a:	f00f f830 	bl	801066e <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <sd_write_array_int+0xb0>)
 8001610:	f7fe fdf6 	bl	8000200 <strlen>
 8001614:	4602      	mov	r2, r0
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <sd_write_array_int+0xb8>)
 8001618:	4910      	ldr	r1, [pc, #64]	; (800165c <sd_write_array_int+0xb0>)
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <sd_write_array_int+0xb4>)
 800161c:	f00e fda1 	bl	8010162 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001620:	f000 f8b4 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	82fb      	strh	r3, [r7, #22]
 8001630:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbd7      	blt.n	80015ec <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <sd_write_array_int+0xb4>)
 800163e:	f00e ffa2 	bl	8010586 <f_close>

	return ret;
 8001642:	7d7b      	ldrb	r3, [r7, #21]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20014a78 	.word	0x20014a78
 8001650:	20013934 	.word	0x20013934
 8001654:	08017098 	.word	0x08017098
 8001658:	0801709c 	.word	0x0801709c
 800165c:	20014b78 	.word	0x20014b78
 8001660:	20014c08 	.word	0x20014c08
 8001664:	20014bf8 	.word	0x20014bf8

08001668 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f852 	bl	800172c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001688:	f000 f866 	bl	8001758 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800168c:	e019      	b.n	80016c2 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800168e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4913      	ldr	r1, [pc, #76]	; (80016e8 <sd_read_array_int+0x80>)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <sd_read_array_int+0x84>)
 800169e:	f011 fcf7 	bl	8013090 <siscanf>
		i++;
 80016a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	db03      	blt.n	80016c2 <sd_read_array_int+0x5a>
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <sd_read_array_int+0x88>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <sd_read_array_int+0x84>)
 80016c8:	f00f fbd0 	bl	8010e6c <f_gets>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1dd      	bne.n	800168e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016d2:	f000 f85b 	bl	800178c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <sd_read_array_int+0x88>)
 80016d8:	f00e ff55 	bl	8010586 <f_close>

	return ret;
 80016dc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080170a0 	.word	0x080170a0
 80016ec:	20014b78 	.word	0x20014b78
 80016f0:	20014c08 	.word	0x20014c08

080016f4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80016fe:	2201      	movs	r2, #1
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <sd_mount+0x30>)
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <sd_mount+0x34>)
 8001704:	f00e f9bc 	bl	800fa80 <f_mount>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <sd_mount+0x20>
 800170e:	2301      	movs	r3, #1
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e001      	b.n	8001718 <sd_mount+0x24>
	else ret = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001718:	79fb      	ldrb	r3, [r7, #7]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	080170a4 	.word	0x080170a4
 8001728:	20013a34 	.word	0x20013a34

0800172c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <create_path+0x24>)
 800173a:	f011 fd18 	bl	801316e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <create_path+0x28>)
 8001742:	f011 fd14 	bl	801316e <strcpy>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20014a78 	.word	0x20014a78
 8001754:	20013934 	.word	0x20013934

08001758 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <fopen_folder_and_file+0x24>)
 800175e:	f00f fa6b 	bl	8010c38 <f_mkdir>

	f_chdir(dirpath);
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <fopen_folder_and_file+0x24>)
 8001764:	f00e ff39 	bl	80105da <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001768:	2213      	movs	r2, #19
 800176a:	4905      	ldr	r1, [pc, #20]	; (8001780 <fopen_folder_and_file+0x28>)
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <fopen_folder_and_file+0x2c>)
 800176e:	f00e f9cd 	bl	800fb0c <f_open>

	f_chdir("..");
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <fopen_folder_and_file+0x30>)
 8001774:	f00e ff31 	bl	80105da <f_chdir>


}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20014a78 	.word	0x20014a78
 8001780:	20013934 	.word	0x20013934
 8001784:	20014c08 	.word	0x20014c08
 8001788:	08017098 	.word	0x08017098

0800178c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e007      	b.n	80017a8 <bufclear+0x1c>
		buffer[i] = '\0';
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <bufclear+0x30>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b7f      	cmp	r3, #127	; 0x7f
 80017ac:	ddf4      	ble.n	8001798 <bufclear+0xc>
	}
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20014b78 	.word	0x20014b78

080017c0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <read_byte+0x54>)
 80017dc:	f005 fca0 	bl	8007120 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017e0:	f107 010f 	add.w	r1, r7, #15
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	2201      	movs	r2, #1
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <read_byte+0x58>)
 80017ea:	f008 fe61 	bl	800a4b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80017ee:	f107 010e 	add.w	r1, r7, #14
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	2201      	movs	r2, #1
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <read_byte+0x58>)
 80017f8:	f008 ff8e 	bl	800a718 <HAL_SPI_Receive>
	CS_SET;
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <read_byte+0x54>)
 8001804:	f005 fc8c 	bl	8007120 <HAL_GPIO_WritePin>

	return val;
 8001808:	7bbb      	ldrb	r3, [r7, #14]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40020400 	.word	0x40020400
 8001818:	20015ca4 	.word	0x20015ca4

0800181c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <write_byte+0x54>)
 800183e:	f005 fc6f 	bl	8007120 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001842:	f107 010f 	add.w	r1, r7, #15
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2201      	movs	r2, #1
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <write_byte+0x58>)
 800184c:	f008 fe30 	bl	800a4b0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001850:	1db9      	adds	r1, r7, #6
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <write_byte+0x58>)
 8001858:	f008 fe2a 	bl	800a4b0 <HAL_SPI_Transmit>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <write_byte+0x54>)
 8001864:	f005 fc5c 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020400 	.word	0x40020400
 8001874:	20015ca4 	.word	0x20015ca4

08001878 <IMU_init>:

uint16_t IMU_init() {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff ff9c 	bl	80017c0 <read_byte>
 8001888:	4603      	mov	r3, r0
 800188a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	2be0      	cmp	r3, #224	; 0xe0
 8001890:	d119      	bne.n	80018c6 <IMU_init+0x4e>
		ret = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001896:	2101      	movs	r1, #1
 8001898:	2006      	movs	r0, #6
 800189a:	f7ff ffbf 	bl	800181c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800189e:	2110      	movs	r1, #16
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff ffbb 	bl	800181c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018a6:	2120      	movs	r1, #32
 80018a8:	207f      	movs	r0, #127	; 0x7f
 80018aa:	f7ff ffb7 	bl	800181c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80018ae:	2106      	movs	r1, #6
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff ffb3 	bl	800181c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80018b6:	2106      	movs	r1, #6
 80018b8:	2014      	movs	r0, #20
 80018ba:	f7ff ffaf 	bl	800181c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80018be:	2100      	movs	r1, #0
 80018c0:	207f      	movs	r0, #127	; 0x7f
 80018c2:	f7ff ffab 	bl	800181c <write_byte>
	}
	return ret;
 80018c6:	88fb      	ldrh	r3, [r7, #6]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <read_gyro_data>:

void read_gyro_data() {
 80018d0:	b598      	push	{r3, r4, r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018d4:	2033      	movs	r0, #51	; 0x33
 80018d6:	f7ff ff73 	bl	80017c0 <read_byte>
 80018da:	4603      	mov	r3, r0
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21c      	sxth	r4, r3
 80018e0:	2034      	movs	r0, #52	; 0x34
 80018e2:	f7ff ff6d 	bl	80017c0 <read_byte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4323      	orrs	r3, r4
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <read_gyro_data+0x64>)
 80018f0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80018f2:	2035      	movs	r0, #53	; 0x35
 80018f4:	f7ff ff64 	bl	80017c0 <read_byte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21c      	sxth	r4, r3
 80018fe:	2036      	movs	r0, #54	; 0x36
 8001900:	f7ff ff5e 	bl	80017c0 <read_byte>
 8001904:	4603      	mov	r3, r0
 8001906:	b21b      	sxth	r3, r3
 8001908:	4323      	orrs	r3, r4
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <read_gyro_data+0x68>)
 800190e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001910:	2037      	movs	r0, #55	; 0x37
 8001912:	f7ff ff55 	bl	80017c0 <read_byte>
 8001916:	4603      	mov	r3, r0
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21c      	sxth	r4, r3
 800191c:	2038      	movs	r0, #56	; 0x38
 800191e:	f7ff ff4f 	bl	80017c0 <read_byte>
 8001922:	4603      	mov	r3, r0
 8001924:	b21b      	sxth	r3, r3
 8001926:	4323      	orrs	r3, r4
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <read_gyro_data+0x6c>)
 800192c:	801a      	strh	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	bd98      	pop	{r3, r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	20015c40 	.word	0x20015c40
 8001938:	20015c3e 	.word	0x20015c3e
 800193c:	20015c38 	.word	0x20015c38

08001940 <read_accel_data>:

void read_accel_data() {
 8001940:	b598      	push	{r3, r4, r7, lr}
 8001942:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001944:	202d      	movs	r0, #45	; 0x2d
 8001946:	f7ff ff3b 	bl	80017c0 <read_byte>
 800194a:	4603      	mov	r3, r0
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21c      	sxth	r4, r3
 8001950:	202e      	movs	r0, #46	; 0x2e
 8001952:	f7ff ff35 	bl	80017c0 <read_byte>
 8001956:	4603      	mov	r3, r0
 8001958:	b21b      	sxth	r3, r3
 800195a:	4323      	orrs	r3, r4
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <read_accel_data+0x64>)
 8001960:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001962:	202f      	movs	r0, #47	; 0x2f
 8001964:	f7ff ff2c 	bl	80017c0 <read_byte>
 8001968:	4603      	mov	r3, r0
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21c      	sxth	r4, r3
 800196e:	2030      	movs	r0, #48	; 0x30
 8001970:	f7ff ff26 	bl	80017c0 <read_byte>
 8001974:	4603      	mov	r3, r0
 8001976:	b21b      	sxth	r3, r3
 8001978:	4323      	orrs	r3, r4
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <read_accel_data+0x68>)
 800197e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001980:	2031      	movs	r0, #49	; 0x31
 8001982:	f7ff ff1d 	bl	80017c0 <read_byte>
 8001986:	4603      	mov	r3, r0
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21c      	sxth	r4, r3
 800198c:	2032      	movs	r0, #50	; 0x32
 800198e:	f7ff ff17 	bl	80017c0 <read_byte>
 8001992:	4603      	mov	r3, r0
 8001994:	b21b      	sxth	r3, r3
 8001996:	4323      	orrs	r3, r4
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <read_accel_data+0x6c>)
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	bd98      	pop	{r3, r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20015c3c 	.word	0x20015c3c
 80019a8:	20015c42 	.word	0x20015c42
 80019ac:	20015c3a 	.word	0x20015c3a

080019b0 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
{

}
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a08:	f7ff ff36 	bl	8001878 <IMU_init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <_ZN3IMU4initEv+0x24>)
 8001a16:	f011 fa51 	bl	8012ebc <iprintf>

}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	080170a8 	.word	0x080170a8

08001a28 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a30:	f7ff ff4e 	bl	80018d0 <read_gyro_data>
	read_accel_data();
 8001a34:	f7ff ff84 	bl	8001940 <read_accel_data>

	xa_ = xa;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <_ZN3IMU12updateValuesEv+0x90>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edc3 7a00 	vstr	s15, [r3]
	ya_ = ya;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <_ZN3IMU12updateValuesEv+0x94>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edc3 7a01 	vstr	s15, [r3, #4]
	za_ = za;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <_ZN3IMU12updateValuesEv+0x98>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edc3 7a02 	vstr	s15, [r3, #8]
	xg_ = xg;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_ZN3IMU12updateValuesEv+0x9c>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	edc3 7a03 	vstr	s15, [r3, #12]
	yg_ = yg;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edc3 7a04 	vstr	s15, [r3, #16]
	zg_ = zg;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <_ZN3IMU12updateValuesEv+0xa4>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20015c3c 	.word	0x20015c3c
 8001abc:	20015c42 	.word	0x20015c42
 8001ac0:	20015c3a 	.word	0x20015c3a
 8001ac4:	20015c40 	.word	0x20015c40
 8001ac8:	20015c3e 	.word	0x20015c3e
 8001acc:	20015c38 	.word	0x20015c38

08001ad0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	return zg_ - offset_;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15

}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	f6ad 7dc4 	subw	sp, sp, #4036	; 0xfc4
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	6018      	str	r0, [r3, #0]
	HAL_Delay(1000);
 8001b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b08:	f004 f874 	bl	8005bf4 <HAL_Delay>
	led.fullColor('G');
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	331c      	adds	r3, #28
 8001b12:	2147      	movs	r1, #71	; 0x47
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f953 	bl	8001dc0 <_ZN3LED9fullColorEc>

	//std::vector<float> zg_vals;
	float zg_vals[1000];
	for(uint16_t i = 0; i < 1000; i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8a7 3fbe 	strh.w	r3, [r7, #4030]	; 0xfbe
 8001b20:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 8001b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b28:	d212      	bcs.n	8001b50 <_ZN3IMU11calibrationEv+0x58>
		zg_vals[i] = zg_;
 8001b2a:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 8001b2e:	1d3a      	adds	r2, r7, #4
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	6952      	ldr	r2, [r2, #20]
 8001b34:	f107 0108 	add.w	r1, r7, #8
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	601a      	str	r2, [r3, #0]
		HAL_Delay(2);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f004 f858 	bl	8005bf4 <HAL_Delay>
	for(uint16_t i = 0; i < 1000; i++){
 8001b44:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8a7 3fbe 	strh.w	r3, [r7, #4030]	; 0xfbe
 8001b4e:	e7e7      	b.n	8001b20 <_ZN3IMU11calibrationEv+0x28>
	}

	float sum;
	for(const auto &v : zg_vals){
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001b58:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001b5c:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001b60:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001b64:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001b68:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8001b6c:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001b70:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d017      	beq.n	8001ba8 <_ZN3IMU11calibrationEv+0xb0>
 8001b78:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001b7c:	f8c7 3fa8 	str.w	r3, [r7, #4008]	; 0xfa8
		sum += v;
 8001b80:	f8d7 3fa8 	ldr.w	r3, [r7, #4008]	; 0xfa8
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8001b98:	edc3 7a00 	vstr	s15, [r3]
	for(const auto &v : zg_vals){
 8001b9c:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001ba6:	e7e1      	b.n	8001b6c <_ZN3IMU11calibrationEv+0x74>
	}

	offset_ = sum / 1000;
 8001ba8:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001bf4 <_ZN3IMU11calibrationEv+0xfc>
 8001bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	edc3 7a06 	vstr	s15, [r3, #24]

	printf("imu offset %f", offset_);
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcd6 	bl	8000578 <__aeabi_f2d>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	460c      	mov	r4, r1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <_ZN3IMU11calibrationEv+0x100>)
 8001bd6:	f011 f971 	bl	8012ebc <iprintf>

	led.fullColor('B');
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	331c      	adds	r3, #28
 8001be0:	2142      	movs	r1, #66	; 0x42
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f8ec 	bl	8001dc0 <_ZN3LED9fullColorEc>
}
 8001be8:	bf00      	nop
 8001bea:	f607 77c4 	addw	r7, r7, #4036	; 0xfc4
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	447a0000 	.word	0x447a0000
 8001bf8:	080170b8 	.word	0x080170b8

08001bfc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	b299      	uxth	r1, r3
 8001c10:	1dfa      	adds	r2, r7, #7
 8001c12:	2364      	movs	r3, #100	; 0x64
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <INA260_read+0x50>)
 8001c1a:	f005 fbeb 	bl	80073f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	b299      	uxth	r1, r3
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <INA260_read+0x50>)
 8001c2e:	f005 fcdf 	bl	80075f0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c32:	7b3b      	ldrb	r3, [r7, #12]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	7b7b      	ldrb	r3, [r7, #13]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c42:	89fb      	ldrh	r3, [r7, #14]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20015e58 	.word	0x20015e58

08001c50 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	4603      	mov	r3, r0
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	460b      	mov	r3, r1
 8001c68:	717b      	strb	r3, [r7, #5]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	733b      	strb	r3, [r7, #12]
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	737b      	strb	r3, [r7, #13]
 8001c76:	797b      	ldrb	r3, [r7, #5]
 8001c78:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001c7a:	793b      	ldrb	r3, [r7, #4]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2303      	movs	r3, #3
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <INA260_write+0x48>)
 8001c8a:	f005 fbb3 	bl	80073f4 <HAL_I2C_Master_Transmit>
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20015e58 	.word	0x20015e58

08001c9c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	71bb      	strb	r3, [r7, #6]
 8001caa:	4613      	mov	r3, r2
 8001cac:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	79ba      	ldrb	r2, [r7, #6]
 8001cb2:	79f9      	ldrb	r1, [r7, #7]
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff ffcb 	bl	8001c50 <INA260_write>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	21df      	movs	r1, #223	; 0xdf
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ffe2 	bl	8001c9c <setConfig>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
{

}
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d08:	482a      	ldr	r0, [pc, #168]	; (8001db4 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d0a:	f005 f9f1 	bl	80070f0 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <_ZN8JoyStick8getValueEv+0x2e>
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d26:	2101      	movs	r1, #1
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <_ZN8JoyStick8getValueEv+0xc0>)
 8001d2a:	f005 f9e1 	bl	80070f0 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <_ZN8JoyStick8getValueEv+0x4e>
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d4a:	481a      	ldr	r0, [pc, #104]	; (8001db4 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d4c:	f005 f9d0 	bl	80070f0 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <_ZN8JoyStick8getValueEv+0x70>
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4814      	ldr	r0, [pc, #80]	; (8001dbc <_ZN8JoyStick8getValueEv+0xc4>)
 8001d6c:	f005 f9c0 	bl	80070f0 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <_ZN8JoyStick8getValueEv+0x90>
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d8c:	f005 f9b0 	bl	80070f0 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <_ZN8JoyStick8getValueEv+0xb0>
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001da8:	89fb      	ldrh	r3, [r7, #14]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	2b52      	cmp	r3, #82	; 0x52
 8001dd0:	d112      	bne.n	8001df8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	4856      	ldr	r0, [pc, #344]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001dda:	f005 f9a1 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de4:	4853      	ldr	r0, [pc, #332]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001de6:	f005 f99b 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df0:	4850      	ldr	r0, [pc, #320]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001df2:	f005 f995 	bl	8007120 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001df6:	e098      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	2b47      	cmp	r3, #71	; 0x47
 8001dfc:	d112      	bne.n	8001e24 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e04:	484b      	ldr	r0, [pc, #300]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e06:	f005 f98b 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e10:	4848      	ldr	r0, [pc, #288]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e12:	f005 f985 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1c:	4845      	ldr	r0, [pc, #276]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e1e:	f005 f97f 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001e22:	e082      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	2b42      	cmp	r3, #66	; 0x42
 8001e28:	d112      	bne.n	8001e50 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	4840      	ldr	r0, [pc, #256]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e32:	f005 f975 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3c:	483d      	ldr	r0, [pc, #244]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e3e:	f005 f96f 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e48:	483a      	ldr	r0, [pc, #232]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e4a:	f005 f969 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001e4e:	e06c      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b43      	cmp	r3, #67	; 0x43
 8001e54:	d112      	bne.n	8001e7c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5c:	4835      	ldr	r0, [pc, #212]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e5e:	f005 f95f 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e68:	4832      	ldr	r0, [pc, #200]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e6a:	f005 f959 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e74:	482f      	ldr	r0, [pc, #188]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e76:	f005 f953 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001e7a:	e056      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	2b4d      	cmp	r3, #77	; 0x4d
 8001e80:	d112      	bne.n	8001ea8 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e88:	482a      	ldr	r0, [pc, #168]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e8a:	f005 f949 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e94:	4827      	ldr	r0, [pc, #156]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001e96:	f005 f943 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea0:	4824      	ldr	r0, [pc, #144]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001ea2:	f005 f93d 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001ea6:	e040      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	2b59      	cmp	r3, #89	; 0x59
 8001eac:	d112      	bne.n	8001ed4 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb4:	481f      	ldr	r0, [pc, #124]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001eb6:	f005 f933 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001ec2:	f005 f92d 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f005 f927 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001ed2:	e02a      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b57      	cmp	r3, #87	; 0x57
 8001ed8:	d112      	bne.n	8001f00 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee0:	4814      	ldr	r0, [pc, #80]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001ee2:	f005 f91d 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eec:	4811      	ldr	r0, [pc, #68]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001eee:	f005 f917 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f005 f911 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001efe:	e014      	b.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b7e      	cmp	r3, #126	; 0x7e
 8001f04:	d111      	bne.n	8001f2a <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f005 f907 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001f1a:	f005 f901 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f005 f8fb 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020000 	.word	0x40020000

08001f38 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
 8001f44:	4613      	mov	r3, r2
 8001f46:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f56:	4813      	ldr	r0, [pc, #76]	; (8001fa4 <_ZN3LED2LREaa+0x6c>)
 8001f58:	f005 f8e2 	bl	8007120 <HAL_GPIO_WritePin>
 8001f5c:	e009      	b.n	8001f72 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <_ZN3LED2LREaa+0x6c>)
 8001f6e:	f005 f8d7 	bl	8007120 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001f72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d106      	bne.n	8001f88 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <_ZN3LED2LREaa+0x6c>)
 8001f82:	f005 f8cd 	bl	8007120 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001f86:	e009      	b.n	8001f9c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001f88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <_ZN3LED2LREaa+0x6c>)
 8001f98:	f005 f8c2 	bl	8007120 <HAL_GPIO_WritePin>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b092      	sub	sp, #72	; 0x48
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fe92 	bl	8001ce0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d008      	beq.n	8001fe4 <_ZN10LineSensorC1Ev+0x3c>
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fde:	3302      	adds	r3, #2
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe2:	e7f2      	b.n	8001fca <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	3338      	adds	r3, #56	; 0x38
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d009      	beq.n	8002012 <_ZN10LineSensorC1Ev+0x6a>
 8001ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002000:	623b      	str	r3, [r7, #32]
		s = 0;
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	3304      	adds	r3, #4
 800200e:	643b      	str	r3, [r7, #64]	; 0x40
 8002010:	e7f1      	b.n	8001ff6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3338      	adds	r3, #56	; 0x38
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	429a      	cmp	r2, r3
 800202a:	d009      	beq.n	8002040 <_ZN10LineSensorC1Ev+0x98>
 800202c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202e:	617b      	str	r3, [r7, #20]
		m = 0;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203a:	3304      	adds	r3, #4
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203e:	e7f1      	b.n	8002024 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	429a      	cmp	r2, r3
 8002058:	d009      	beq.n	800206e <_ZN10LineSensorC1Ev+0xc6>
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	60bb      	str	r3, [r7, #8]
		s = 1;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002064:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	3304      	adds	r3, #4
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
 800206c:	e7f1      	b.n	8002052 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	3748      	adds	r7, #72	; 0x48
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	220e      	movs	r2, #14
 8002084:	4619      	mov	r1, r3
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002088:	f003 fe1a 	bl	8005cc0 <HAL_ADC_Start_DMA>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20015d7c 	.word	0x20015d7c

08002098 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b0d      	cmp	r3, #13
 80020a8:	dc2f      	bgt.n	800210a <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3392      	adds	r3, #146	; 0x92
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	33a0      	adds	r3, #160	; 0xa0
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	440b      	add	r3, r1
 80020f6:	3306      	adds	r3, #6
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e7cc      	b.n	80020a4 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002114:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d902      	bls.n	8002124 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]


}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000204 	.word	0x20000204

08002134 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002134:	b490      	push	{r4, r7}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002142:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002146:	2b0d      	cmp	r3, #13
 8002148:	f200 8087 	bhi.w	800225a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002152:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002156:	2b09      	cmp	r3, #9
 8002158:	d81c      	bhi.n	8002194 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800215a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800215e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002162:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4423      	add	r3, r4
 8002172:	3306      	adds	r3, #6
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4403      	add	r3, r0
 8002178:	3304      	adds	r3, #4
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	008b      	lsls	r3, r1, #2
 800217e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002182:	440b      	add	r3, r1
 8002184:	3b30      	subs	r3, #48	; 0x30
 8002186:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002188:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800218c:	3301      	adds	r3, #1
 800218e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002192:	e7de      	b.n	8002152 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800219a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800219e:	2b09      	cmp	r3, #9
 80021a0:	d84d      	bhi.n	800223e <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021a6:	3301      	adds	r3, #1
 80021a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80021ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d83e      	bhi.n	8002232 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80021b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021be:	4413      	add	r3, r2
 80021c0:	3b30      	subs	r3, #48	; 0x30
 80021c2:	ed93 7a00 	vldr	s14, [r3]
 80021c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021d0:	4413      	add	r3, r2
 80021d2:	3b30      	subs	r3, #48	; 0x30
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d521      	bpl.n	8002226 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80021e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021ec:	4413      	add	r3, r2
 80021ee:	3b30      	subs	r3, #48	; 0x30
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80021f4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80021f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002202:	440a      	add	r2, r1
 8002204:	3a30      	subs	r2, #48	; 0x30
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800220e:	440b      	add	r3, r1
 8002210:	3b30      	subs	r3, #48	; 0x30
 8002212:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002214:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800221e:	4413      	add	r3, r2
 8002220:	3b30      	subs	r3, #48	; 0x30
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002226:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800222a:	3301      	adds	r3, #1
 800222c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002230:	e7bc      	b.n	80021ac <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002232:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002236:	3301      	adds	r3, #1
 8002238:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800223c:	e7ad      	b.n	800219a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 800223e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	33b0      	adds	r3, #176	; 0xb0
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800224e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002252:	3301      	adds	r3, #1
 8002254:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002258:	e773      	b.n	8002142 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800225a:	bf00      	nop
 800225c:	3738      	adds	r7, #56	; 0x38
 800225e:	46bd      	mov	sp, r7
 8002260:	bc90      	pop	{r4, r7}
 8002262:	4770      	bx	lr

08002264 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b0a9      	sub	sp, #164	; 0xa4
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	f003 fcc1 	bl	8005bf4 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002272:	2300      	movs	r3, #0
 8002274:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002278:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800227c:	2b0d      	cmp	r3, #13
 800227e:	d823      	bhi.n	80022c8 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8002280:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002284:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	32b0      	adds	r2, #176	; 0xb0
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	440a      	add	r2, r1
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002298:	440b      	add	r3, r1
 800229a:	3b60      	subs	r3, #96	; 0x60
 800229c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800229e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80022a2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	32b0      	adds	r2, #176	; 0xb0
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	440a      	add	r2, r1
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80022b6:	440b      	add	r3, r1
 80022b8:	3b98      	subs	r3, #152	; 0x98
 80022ba:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80022bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80022c0:	3301      	adds	r3, #1
 80022c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80022c6:	e7d7      	b.n	8002278 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fd12 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	bf14      	ite	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	2300      	moveq	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d079      	beq.n	80023d8 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80022ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022ee:	2b0d      	cmp	r3, #13
 80022f0:	d850      	bhi.n	8002394 <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 80022f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80022fc:	4413      	add	r3, r2
 80022fe:	3b60      	subs	r3, #96	; 0x60
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	33b0      	adds	r3, #176	; 0xb0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d50f      	bpl.n	800233e <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 800231e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002322:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	32b0      	adds	r2, #176	; 0xb0
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	440a      	add	r2, r1
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002336:	440b      	add	r3, r1
 8002338:	3b60      	subs	r3, #96	; 0x60
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e024      	b.n	8002388 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 800233e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002348:	4413      	add	r3, r2
 800234a:	3b98      	subs	r3, #152	; 0x98
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	33b0      	adds	r3, #176	; 0xb0
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	dd0e      	ble.n	8002388 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 800236a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800236e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	32b0      	adds	r2, #176	; 0xb0
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	440a      	add	r2, r1
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002382:	440b      	add	r3, r1
 8002384:	3b98      	subs	r3, #152	; 0x98
 8002386:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002388:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800238c:	3301      	adds	r3, #1
 800238e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002392:	e7aa      	b.n	80022ea <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fe4e 	bl	800303c <_ZN12RotarySwitch8getValueEv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80023b6:	2201      	movs	r2, #1
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fdbb 	bl	8001f38 <_ZN3LED2LREaa>
 80023c2:	e781      	b.n	80022c8 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80023ca:	2200      	movs	r2, #0
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fdb1 	bl	8001f38 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80023d6:	e777      	b.n	80022c8 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 80023d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ec:	3338      	adds	r3, #56	; 0x38
 80023ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d016      	beq.n	800242c <_ZN10LineSensor11calibrationEv+0x1c8>
 80023fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 8002406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f8b3 	bl	8000578 <__aeabi_f2d>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	461a      	mov	r2, r3
 8002418:	4623      	mov	r3, r4
 800241a:	4842      	ldr	r0, [pc, #264]	; (8002524 <_ZN10LineSensor11calibrationEv+0x2c0>)
 800241c:	f010 fd4e 	bl	8012ebc <iprintf>
	for(const auto &m : max_values){
 8002420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002424:	3304      	adds	r3, #4
 8002426:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800242a:	e7e2      	b.n	80023f2 <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 800242c:	200a      	movs	r0, #10
 800242e:	f010 fd5d 	bl	8012eec <putchar>
	for(const auto &m : min_values){
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800243a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002442:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002446:	3338      	adds	r3, #56	; 0x38
 8002448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800244a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800244e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002450:	429a      	cmp	r2, r3
 8002452:	d014      	beq.n	800247e <_ZN10LineSensor11calibrationEv+0x21a>
 8002454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800245a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f88a 	bl	8000578 <__aeabi_f2d>
 8002464:	4603      	mov	r3, r0
 8002466:	460c      	mov	r4, r1
 8002468:	461a      	mov	r2, r3
 800246a:	4623      	mov	r3, r4
 800246c:	482d      	ldr	r0, [pc, #180]	; (8002524 <_ZN10LineSensor11calibrationEv+0x2c0>)
 800246e:	f010 fd25 	bl	8012ebc <iprintf>
	for(const auto &m : min_values){
 8002472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002476:	3304      	adds	r3, #4
 8002478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800247c:	e7e5      	b.n	800244a <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 800247e:	200a      	movs	r0, #10
 8002480:	f010 fd34 	bl	8012eec <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002484:	2300      	movs	r3, #0
 8002486:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800248a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800248e:	2b0d      	cmp	r3, #13
 8002490:	d826      	bhi.n	80024e0 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002492:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800249c:	4413      	add	r3, r2
 800249e:	3b60      	subs	r3, #96	; 0x60
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024ae:	4413      	add	r3, r2
 80024b0:	3b98      	subs	r3, #152	; 0x98
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024be:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002528 <_ZN10LineSensor11calibrationEv+0x2c4>
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	3392      	adds	r3, #146	; 0x92
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3304      	adds	r3, #4
 80024d0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024d8:	3301      	adds	r3, #1
 80024da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80024de:	e7d4      	b.n	800248a <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80024e6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d815      	bhi.n	800251a <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 80024ee:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80024f2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024fc:	440a      	add	r2, r1
 80024fe:	3a98      	subs	r2, #152	; 0x98
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	33a0      	adds	r3, #160	; 0xa0
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3304      	adds	r3, #4
 800250c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800250e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002512:	3301      	adds	r3, #1
 8002514:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002518:	e7e5      	b.n	80024e6 <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 800251a:	bf00      	nop
 800251c:	37a4      	adds	r7, #164	; 0xa4
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	080170c8 	.word	0x080170c8
 8002528:	447a0000 	.word	0x447a0000

0800252c <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	3338      	adds	r3, #56	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d012      	beq.n	8002578 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002598 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	db02      	blt.n	8002570 <_ZN10LineSensor13emergencyStopEv+0x44>
 800256a:	7ffb      	ldrb	r3, [r7, #31]
 800256c:	3301      	adds	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	3304      	adds	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e7e8      	b.n	800254a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002578:	7ffb      	ldrb	r3, [r7, #31]
 800257a:	2b0d      	cmp	r3, #13
 800257c:	d902      	bls.n	8002584 <_ZN10LineSensor13emergencyStopEv+0x58>
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
 8002582:	e001      	b.n	8002588 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002588:	7dfb      	ldrb	r3, [r7, #23]

}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	44160000 	.word	0x44160000

0800259c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800262c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002658:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002664:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002670:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800267c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002688:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002694:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269c:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	ee07 3a90 	vmov	s15, r3

}
 80026a6:	eeb0 0a67 	vmov.f32	s0, s15
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	0000      	movs	r0, r0
	...

080026b8 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff95 	bl	80025f0 <_ZN9LineTrace9calcErrorEv>
 80026c6:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80026d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	ed93 7a05 	vldr	s14, [r3, #20]
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <_ZN9LineTrace3pidEv+0x130>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80026ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	ee17 0a90 	vmov	r0, s15
 80026f8:	f7fd ff3e 	bl	8000578 <__aeabi_f2d>
 80026fc:	a338      	add	r3, pc, #224	; (adr r3, 80027e0 <_ZN9LineTrace3pidEv+0x128>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fe f8bb 	bl	800087c <__aeabi_ddiv>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	4618      	mov	r0, r3
 800270c:	4621      	mov	r1, r4
 800270e:	f7fe fa83 	bl	8000c18 <__aeabi_d2f>
 8002712:	4603      	mov	r3, r0
 8002714:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002716:	4b35      	ldr	r3, [pc, #212]	; (80027ec <_ZN9LineTrace3pidEv+0x134>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff2c 	bl	8000578 <__aeabi_f2d>
 8002720:	4604      	mov	r4, r0
 8002722:	460d      	mov	r5, r1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	ed93 7a06 	vldr	s14, [r3, #24]
 800272a:	edd7 7a07 	vldr	s15, [r7, #28]
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	ee17 0a90 	vmov	r0, s15
 8002736:	f7fd ff1f 	bl	8000578 <__aeabi_f2d>
 800273a:	a329      	add	r3, pc, #164	; (adr r3, 80027e0 <_ZN9LineTrace3pidEv+0x128>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fd ff72 	bl	8000628 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fdb6 	bl	80002bc <__adddf3>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	4618      	mov	r0, r3
 8002756:	4621      	mov	r1, r4
 8002758:	f7fe fa5e 	bl	8000c18 <__aeabi_d2f>
 800275c:	4602      	mov	r2, r0
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <_ZN9LineTrace3pidEv+0x134>)
 8002760:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	ed93 7a08 	vldr	s14, [r3, #32]
 8002768:	edd7 6a06 	vldr	s13, [r7, #24]
 800276c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002770:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <_ZN9LineTrace3pidEv+0x134>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002782:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	ed93 7a08 	vldr	s14, [r3, #32]
 800278c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002790:	edd7 7a05 	vldr	s15, [r7, #20]
 8002794:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <_ZN9LineTrace3pidEv+0x134>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	6938      	ldr	r0, [r7, #16]
 80027b0:	f7fd fee2 	bl	8000578 <__aeabi_f2d>
 80027b4:	4605      	mov	r5, r0
 80027b6:	460e      	mov	r6, r1
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7fd fedd 	bl	8000578 <__aeabi_f2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	ec43 2b11 	vmov	d1, r2, r3
 80027c6:	ec46 5b10 	vmov	d0, r5, r6
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 fa5a 	bl	8002c84 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80027d0:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_ZN9LineTrace3pidEv+0x130>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	6013      	str	r3, [r2, #0]

}
 80027d6:	bf00      	nop
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	bf00      	nop
 80027e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027e4:	3f50624d 	.word	0x3f50624d
 80027e8:	20000208 	.word	0x20000208
 80027ec:	2000020c 	.word	0x2000020c

080027f0 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002800:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7f1b      	ldrb	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff21 	bl	80026b8 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe56 	bl	800252c <_ZN10LineSensor13emergencyStopEv>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d011      	beq.n	80028aa <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80028c8 <_ZN9LineTrace4flipEv+0x68>
 800288e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80028c8 <_ZN9LineTrace4flipEv+0x68>
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f9f6 	bl	8002c84 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	330c      	adds	r3, #12
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fb48 	bl	8001f38 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80028a8:	e007      	b.n	80028ba <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	330c      	adds	r3, #12
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fb3f 	bl	8001f38 <_ZN3LED2LREaa>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
	...

080028d0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	771a      	strb	r2, [r3, #28]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	0000      	movs	r0, r0
 80028ec:	0000      	movs	r0, r0
	...

080028f0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002918 <_ZN9LineTrace4stopEv+0x28>
 8002906:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002918 <_ZN9LineTrace4stopEv+0x28>
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f9ba 	bl	8002c84 <_ZN5Motor8setRatioEdd>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
	...

08002920 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800292e:	33b0      	adds	r3, #176	; 0xb0
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800293a:	33b2      	adds	r3, #178	; 0xb2
 800293c:	2200      	movs	r2, #0
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002946:	33b4      	adds	r3, #180	; 0xb4
 8002948:	2200      	movs	r2, #0
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002968:	f7fe fec4 	bl	80016f4 <sd_mount>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 800297c:	4816      	ldr	r0, [pc, #88]	; (80029d8 <_ZN6Logger10sdCardInitEv+0x7c>)
 800297e:	f010 fb25 	bl	8012fcc <puts>
	  ret = true;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
 8002986:	e004      	b.n	8002992 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002988:	4814      	ldr	r0, [pc, #80]	; (80029dc <_ZN6Logger10sdCardInitEv+0x80>)
 800298a:	f010 fb1f 	bl	8012fcc <puts>
	  ret = false;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002992:	2364      	movs	r3, #100	; 0x64
 8002994:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002996:	f107 0210 	add.w	r2, r7, #16
 800299a:	2301      	movs	r3, #1
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	2201      	movs	r2, #1
 80029a2:	490f      	ldr	r1, [pc, #60]	; (80029e0 <_ZN6Logger10sdCardInitEv+0x84>)
 80029a4:	480f      	ldr	r0, [pc, #60]	; (80029e4 <_ZN6Logger10sdCardInitEv+0x88>)
 80029a6:	f7fe fe01 	bl	80015ac <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	2201      	movs	r2, #1
 80029b0:	490b      	ldr	r1, [pc, #44]	; (80029e0 <_ZN6Logger10sdCardInitEv+0x84>)
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <_ZN6Logger10sdCardInitEv+0x88>)
 80029b4:	f7fe fe58 	bl	8001668 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80029b8:	f107 020c 	add.w	r2, r7, #12
 80029bc:	2301      	movs	r3, #1
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	2201      	movs	r2, #1
 80029c4:	4908      	ldr	r1, [pc, #32]	; (80029e8 <_ZN6Logger10sdCardInitEv+0x8c>)
 80029c6:	4807      	ldr	r0, [pc, #28]	; (80029e4 <_ZN6Logger10sdCardInitEv+0x88>)
 80029c8:	f7fe fdf0 	bl	80015ac <sd_write_array_int>

	return ret;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08017108 	.word	0x08017108
 80029dc:	08017118 	.word	0x08017118
 80029e0:	08017128 	.word	0x08017128
 80029e4:	08017134 	.word	0x08017134
 80029e8:	0801713c 	.word	0x0801713c

080029ec <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80029fe:	33b0      	adds	r3, #176	; 0xb0
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d024      	beq.n	8002a50 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a0c:	33b2      	adds	r3, #178	; 0xb2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a20:	33b2      	adds	r3, #178	; 0xb2
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a2e:	33b2      	adds	r3, #178	; 0xb2
 8002a30:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a38:	33b2      	adds	r3, #178	; 0xb2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d905      	bls.n	8002a50 <_ZN6Logger8storeLogEf+0x64>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a4a:	33b2      	adds	r3, #178	; 0xb2
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]
	}
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a68:	edc7 0a01 	vstr	s1, [r7, #4]
	if(recording_flag_ == true){
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a72:	33b0      	adds	r3, #176	; 0xb0
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d034      	beq.n	8002ae4 <_ZN6Logger21storeDistanceAndThetaEff+0x88>
		store_distance_[log_index_dis_] = distance;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a80:	33b4      	adds	r3, #180	; 0xb4
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a9a:	33b4      	adds	r3, #180	; 0xb4
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 8002aa4:	333c      	adds	r3, #60	; 0x3c
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ab4:	33b4      	adds	r3, #180	; 0xb4
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ac2:	33b4      	adds	r3, #180	; 0xb4
 8002ac4:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002acc:	33b4      	adds	r3, #180	; 0xb4
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d905      	bls.n	8002ae4 <_ZN6Logger21storeDistanceAndThetaEff+0x88>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ade:	33b4      	adds	r3, #180	; 0xb4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	801a      	strh	r2, [r3, #0]
	}
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	2300      	movs	r3, #0
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	f7fe fce8 	bl	80014e0 <sd_write_array_float>
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002b2c:	3330      	adds	r3, #48	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	9200      	str	r2, [sp, #0]
 8002b32:	f241 7270 	movw	r2, #6000	; 0x1770
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fe fcd1 	bl	80014e0 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 8002b44:	33f0      	adds	r3, #240	; 0xf0
 8002b46:	2200      	movs	r2, #0
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	f241 7270 	movw	r2, #6000	; 0x1770
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f7fe fcc5 	bl	80014e0 <sd_write_array_float>
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b6c:	33b0      	adds	r3, #176	; 0xb0
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b8c:	33b0      	adds	r3, #176	; 0xb0
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	805a      	strh	r2, [r3, #2]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002bc8:	2108      	movs	r1, #8
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <_ZN5Motor4initEv+0x20>)
 8002bcc:	f008 f9da 	bl	800af84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002bd0:	210c      	movs	r1, #12
 8002bd2:	4803      	ldr	r0, [pc, #12]	; (8002be0 <_ZN5Motor4initEv+0x20>)
 8002bd4:	f008 f9d6 	bl	800af84 <HAL_TIM_PWM_Start>

}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20015d3c 	.word	0x20015d3c

08002be4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da0d      	bge.n	8002c12 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bfc:	481f      	ldr	r0, [pc, #124]	; (8002c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8002bfe:	f004 fa8f 	bl	8007120 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	81fb      	strh	r3, [r7, #14]
 8002c10:	e00a      	b.n	8002c28 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8002c1a:	f004 fa81 	bl	8007120 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da0d      	bge.n	8002c4e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002c32:	2201      	movs	r2, #1
 8002c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c38:	4810      	ldr	r0, [pc, #64]	; (8002c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8002c3a:	f004 fa71 	bl	8007120 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	425b      	negs	r3, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	81bb      	strh	r3, [r7, #12]
 8002c4c:	e00a      	b.n	8002c64 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c54:	4809      	ldr	r0, [pc, #36]	; (8002c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8002c56:	f004 fa63 	bl	8007120 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002c64:	89fa      	ldrh	r2, [r7, #14]
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002c6c:	89ba      	ldrh	r2, [r7, #12]
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	20015d3c 	.word	0x20015d3c

08002c84 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6178      	str	r0, [r7, #20]
 8002c8c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c90:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8002c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9e:	f7fd ff53 	bl	8000b48 <__aeabi_dcmpgt>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <_ZN5Motor8setRatioEdd+0x30>
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	4c2b      	ldr	r4, [pc, #172]	; (8002d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8002cae:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002cb2:	e00e      	b.n	8002cd2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8002cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cbe:	f7fd ff25 	bl	8000b0c <__aeabi_dcmplt>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <_ZN5Motor8setRatioEdd+0x4e>
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	4c24      	ldr	r4, [pc, #144]	; (8002d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8002cce:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8002cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cdc:	f7fd ff34 	bl	8000b48 <__aeabi_dcmpgt>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <_ZN5Motor8setRatioEdd+0x6e>
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	4c1c      	ldr	r4, [pc, #112]	; (8002d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8002cec:	e9c7 3400 	strd	r3, r4, [r7]
 8002cf0:	e00e      	b.n	8002d10 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8002cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cfc:	f7fd ff06 	bl	8000b0c <__aeabi_dcmplt>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <_ZN5Motor8setRatioEdd+0x8c>
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	4c15      	ldr	r4, [pc, #84]	; (8002d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d0c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d1a:	f7fd fc85 	bl	8000628 <__aeabi_dmul>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	4618      	mov	r0, r3
 8002d24:	4621      	mov	r1, r4
 8002d26:	f7fd ff2f 	bl	8000b88 <__aeabi_d2iz>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	b21a      	sxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d3c:	f7fd fc74 	bl	8000628 <__aeabi_dmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	460c      	mov	r4, r1
 8002d44:	4618      	mov	r0, r3
 8002d46:	4621      	mov	r1, r4
 8002d48:	f7fd ff1e 	bl	8000b88 <__aeabi_d2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	805a      	strh	r2, [r3, #2]

}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}
 8002d5c:	3ff00000 	.word	0x3ff00000
 8002d60:	bff00000 	.word	0xbff00000
 8002d64:	409c2000 	.word	0x409c2000

08002d68 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
{
	encoder_ = encoder;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	float current_omega = velocity_ctrl_->getCurrentOmega();
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fc56 	bl	8003670 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 8002dc4:	ed87 0a05 	vstr	s0, [r7, #20]
	float distance = encoder_->getDistance();
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fab1 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 8002dd2:	ed87 0a04 	vstr	s0, [r7, #16]

	float delta_theta = current_omega * DELTA_T;
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7fd fbce 	bl	8000578 <__aeabi_f2d>
 8002ddc:	a34d      	add	r3, pc, #308	; (adr r3, 8002f14 <_ZN8Odometry12calcPotitionEv+0x164>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fc21 	bl	8000628 <__aeabi_dmul>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	4618      	mov	r0, r3
 8002dec:	4621      	mov	r1, r4
 8002dee:	f7fd ff13 	bl	8000c18 <__aeabi_d2f>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60fb      	str	r3, [r7, #12]

	x_ = x_ + distance * cos(theta_ + delta_theta / 2);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fbbc 	bl	8000578 <__aeabi_f2d>
 8002e00:	4604      	mov	r4, r0
 8002e02:	460d      	mov	r5, r1
 8002e04:	6938      	ldr	r0, [r7, #16]
 8002e06:	f7fd fbb7 	bl	8000578 <__aeabi_f2d>
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	4689      	mov	r9, r1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e14:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e18:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002e1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e24:	ee17 0a90 	vmov	r0, s15
 8002e28:	f7fd fba6 	bl	8000578 <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	ec43 2b10 	vmov	d0, r2, r3
 8002e34:	f00e f97c 	bl	8011130 <cos>
 8002e38:	ec53 2b10 	vmov	r2, r3, d0
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	4649      	mov	r1, r9
 8002e40:	f7fd fbf2 	bl	8000628 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	f7fd fa36 	bl	80002bc <__adddf3>
 8002e50:	4603      	mov	r3, r0
 8002e52:	460c      	mov	r4, r1
 8002e54:	4618      	mov	r0, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	f7fd fede 	bl	8000c18 <__aeabi_d2f>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60da      	str	r2, [r3, #12]
	y_ = y_ + distance * sin(theta_ + delta_theta / 2);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb86 	bl	8000578 <__aeabi_f2d>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	6938      	ldr	r0, [r7, #16]
 8002e72:	f7fd fb81 	bl	8000578 <__aeabi_f2d>
 8002e76:	4680      	mov	r8, r0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e80:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e84:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002e88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	ee17 0a90 	vmov	r0, s15
 8002e94:	f7fd fb70 	bl	8000578 <__aeabi_f2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	ec43 2b10 	vmov	d0, r2, r3
 8002ea0:	f00e f98a 	bl	80111b8 <sin>
 8002ea4:	ec53 2b10 	vmov	r2, r3, d0
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	4649      	mov	r1, r9
 8002eac:	f7fd fbbc 	bl	8000628 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7fd fa00 	bl	80002bc <__adddf3>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	f7fd fea8 	bl	8000c18 <__aeabi_d2f>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]
	theta_ = theta_ + delta_theta;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edc3 7a05 	vstr	s15, [r3, #20]


	monitor_x = x_;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <_ZN8Odometry12calcPotitionEv+0x158>)
 8002ee8:	6013      	str	r3, [r2, #0]
	monitor_y = y_;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <_ZN8Odometry12calcPotitionEv+0x15c>)
 8002ef0:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <_ZN8Odometry12calcPotitionEv+0x160>)
 8002ef8:	6013      	str	r3, [r2, #0]


}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f04:	f3af 8000 	nop.w
 8002f08:	20000210 	.word	0x20000210
 8002f0c:	20000214 	.word	0x20000214
 8002f10:	20000218 	.word	0x20000218
 8002f14:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f18:	3f50624d 	.word	0x3f50624d

08002f1c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff43 	bl	8002db0 <_ZN8Odometry12calcPotitionEv>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_ZN8Odometry13clearPotitionEv>:
{
	return theta_;
}

void Odometry::clearPotition()
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
	y_ = 0;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
	theta_ = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8002f66:	2088      	movs	r0, #136	; 0x88
 8002f68:	f7fe feab 	bl	8001cc2 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8002f6c:	2080      	movs	r0, #128	; 0x80
 8002f6e:	f7fe fea8 	bl	8001cc2 <INA260_init>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	0000      	movs	r0, r0
 8002f7c:	0000      	movs	r0, r0
	...

08002f80 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8002f88:	2188      	movs	r1, #136	; 0x88
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	f7fe fe36 	bl	8001bfc <INA260_read>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fade 	bl	8000554 <__aeabi_i2d>
 8002f98:	a30c      	add	r3, pc, #48	; (adr r3, 8002fcc <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fb43 	bl	8000628 <__aeabi_dmul>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	4621      	mov	r1, r4
 8002faa:	f7fd fe35 	bl	8000c18 <__aeabi_d2f>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	2000021c 	.word	0x2000021c
 8002fcc:	47ae147b 	.word	0x47ae147b
 8002fd0:	3f547ae1 	.word	0x3f547ae1
 8002fd4:	00000000 	.word	0x00000000

08002fd8 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fac5 	bl	8000578 <__aeabi_f2d>
 8002fee:	a311      	add	r3, pc, #68	; (adr r3, 8003034 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fd8a 	bl	8000b0c <__aeabi_dcmplt>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	e002      	b.n	8003012 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003012:	4b07      	ldr	r3, [pc, #28]	; (8003030 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003020:	2201      	movs	r2, #1
 8003022:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000220 	.word	0x20000220
 8003034:	9999999a 	.word	0x9999999a
 8003038:	401d9999 	.word	0x401d9999

0800303c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003048:	2102      	movs	r1, #2
 800304a:	4822      	ldr	r0, [pc, #136]	; (80030d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800304c:	f004 f850 	bl	80070f0 <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003068:	2108      	movs	r1, #8
 800306a:	481a      	ldr	r0, [pc, #104]	; (80030d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800306c:	f004 f840 	bl	80070f0 <HAL_GPIO_ReadPin>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003088:	2110      	movs	r1, #16
 800308a:	4812      	ldr	r0, [pc, #72]	; (80030d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800308c:	f004 f830 	bl	80070f0 <HAL_GPIO_ReadPin>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	480a      	ldr	r0, [pc, #40]	; (80030d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80030ac:	f004 f820 	bl	80070f0 <HAL_GPIO_ReadPin>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80030c8:	89fb      	ldrh	r3, [r7, #14]

}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020c00 	.word	0x40020c00

080030d8 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
{

}
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d111      	bne.n	8003126 <_ZN10SideSensor12updateStatusEt+0x36>
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e010      	b.n	8003148 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d10d      	bne.n	8003148 <_ZN10SideSensor12updateStatusEt+0x58>
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d111      	bne.n	8003174 <_ZN10SideSensor12updateStatusEt+0x84>
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8003172:	e011      	b.n	8003198 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317a:	d10d      	bne.n	8003198 <_ZN10SideSensor12updateStatusEt+0xa8>
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f083 0302 	eor.w	r3, r3, #2
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000222 	.word	0x20000222
 80031a8:	20000223 	.word	0x20000223

080031ac <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	0000      	movs	r0, r0
 8003234:	0000      	movs	r0, r0
	...

08003238 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f107 020c 	add.w	r2, r7, #12
 8003248:	f107 0110 	add.w	r1, r7, #16
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe f85d 	bl	800130c <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003252:	ed97 7a04 	vldr	s14, [r7, #16]
 8003256:	edd7 7a03 	vldr	s15, [r7, #12]
 800325a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003266:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7fd f984 	bl	8000578 <__aeabi_f2d>
 8003270:	a30b      	add	r3, pc, #44	; (adr r3, 80032a0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f9d7 	bl	8000628 <__aeabi_dmul>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	4618      	mov	r0, r3
 8003280:	4621      	mov	r1, r4
 8003282:	f7fd fcc9 	bl	8000c18 <__aeabi_d2f>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	ee07 3a90 	vmov	s15, r3
}
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	1ab1d998 	.word	0x1ab1d998
 80032a4:	3f7830b5 	.word	0x3f7830b5

080032a8 <_ZN12VelocityCtrl9calcOmegaEv>:

float VelocityCtrl::calcOmega()
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	float omega = imu_->getOmega();
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fc0b 	bl	8001ad0 <_ZN3IMU8getOmegaEv>
 80032ba:	ed87 0a03 	vstr	s0, [r7, #12]
	current_omega_ = -(omega / 16.4) * PI / 180;
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7fd f95a 	bl	8000578 <__aeabi_f2d>
 80032c4:	a317      	add	r3, pc, #92	; (adr r3, 8003324 <_ZN12VelocityCtrl9calcOmegaEv+0x7c>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fd fad7 	bl	800087c <__aeabi_ddiv>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4614      	mov	r4, r2
 80032d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80032d8:	a314      	add	r3, pc, #80	; (adr r3, 800332c <_ZN12VelocityCtrl9calcOmegaEv+0x84>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	4620      	mov	r0, r4
 80032e0:	4629      	mov	r1, r5
 80032e2:	f7fd f9a1 	bl	8000628 <__aeabi_dmul>
 80032e6:	4603      	mov	r3, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	4618      	mov	r0, r3
 80032ec:	4621      	mov	r1, r4
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <_ZN12VelocityCtrl9calcOmegaEv+0x78>)
 80032f4:	f7fd fac2 	bl	800087c <__aeabi_ddiv>
 80032f8:	4603      	mov	r3, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4618      	mov	r0, r3
 80032fe:	4621      	mov	r1, r4
 8003300:	f7fd fc8a 	bl	8000c18 <__aeabi_d2f>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60da      	str	r2, [r3, #12]
	//printf("omegao: %f\n", current_omega_);

	return current_omega_;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	ee07 3a90 	vmov	s15, r3
}
 8003312:	eeb0 0a67 	vmov.f32	s0, s15
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	f3af 8000 	nop.w
 8003320:	40668000 	.word	0x40668000
 8003324:	66666666 	.word	0x66666666
 8003328:	40306666 	.word	0x40306666
 800332c:	54411744 	.word	0x54411744
 8003330:	400921fb 	.word	0x400921fb
 8003334:	00000000 	.word	0x00000000

08003338 <_ZN12VelocityCtrl3pidEv>:

void VelocityCtrl::pid()
{
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b08d      	sub	sp, #52	; 0x34
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ed93 7a00 	vldr	s14, [r3]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edd3 7a02 	vldr	s15, [r3, #8]
 800334c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003350:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- current_omega_;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	ed93 7a01 	vldr	s14, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edd3 7a04 	vldr	s15, [r3, #16]
 800336e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003380:	4b73      	ldr	r3, [pc, #460]	; (8003550 <_ZN12VelocityCtrl3pidEv+0x218>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800338a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	ee17 0a90 	vmov	r0, s15
 8003396:	f7fd f8ef 	bl	8000578 <__aeabi_f2d>
 800339a:	a36b      	add	r3, pc, #428	; (adr r3, 8003548 <_ZN12VelocityCtrl3pidEv+0x210>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd f942 	bl	8000628 <__aeabi_dmul>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4618      	mov	r0, r3
 80033aa:	4621      	mov	r1, r4
 80033ac:	f7fd fc34 	bl	8000c18 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80033b4:	4b67      	ldr	r3, [pc, #412]	; (8003554 <_ZN12VelocityCtrl3pidEv+0x21c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f8dd 	bl	8000578 <__aeabi_f2d>
 80033be:	4604      	mov	r4, r0
 80033c0:	460d      	mov	r5, r1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80033c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	ee17 0a90 	vmov	r0, s15
 80033d4:	f7fd f8d0 	bl	8000578 <__aeabi_f2d>
 80033d8:	a35b      	add	r3, pc, #364	; (adr r3, 8003548 <_ZN12VelocityCtrl3pidEv+0x210>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f7fd f923 	bl	8000628 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fc ff67 	bl	80002bc <__adddf3>
 80033ee:	4603      	mov	r3, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	4618      	mov	r0, r3
 80033f4:	4621      	mov	r1, r4
 80033f6:	f7fd fc0f 	bl	8000c18 <__aeabi_d2f>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b55      	ldr	r3, [pc, #340]	; (8003554 <_ZN12VelocityCtrl3pidEv+0x21c>)
 80033fe:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	edd3 7a07 	vldr	s15, [r3, #28]
 8003406:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ed93 7a08 	vldr	s14, [r3, #32]
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <_ZN12VelocityCtrl3pidEv+0x220>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003422:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	ee17 0a90 	vmov	r0, s15
 800342e:	f7fd f8a3 	bl	8000578 <__aeabi_f2d>
 8003432:	a345      	add	r3, pc, #276	; (adr r3, 8003548 <_ZN12VelocityCtrl3pidEv+0x210>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f8f6 	bl	8000628 <__aeabi_dmul>
 800343c:	4603      	mov	r3, r0
 800343e:	460c      	mov	r4, r1
 8003440:	4618      	mov	r0, r3
 8003442:	4621      	mov	r1, r4
 8003444:	f7fd fbe8 	bl	8000c18 <__aeabi_d2f>
 8003448:	4603      	mov	r3, r0
 800344a:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <_ZN12VelocityCtrl3pidEv+0x224>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f891 	bl	8000578 <__aeabi_f2d>
 8003456:	4604      	mov	r4, r0
 8003458:	460d      	mov	r5, r1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003460:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	ee17 0a90 	vmov	r0, s15
 800346c:	f7fd f884 	bl	8000578 <__aeabi_f2d>
 8003470:	a335      	add	r3, pc, #212	; (adr r3, 8003548 <_ZN12VelocityCtrl3pidEv+0x210>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fd f8d7 	bl	8000628 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f7fc ff1b 	bl	80002bc <__adddf3>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	4618      	mov	r0, r3
 800348c:	4621      	mov	r1, r4
 800348e:	f7fd fbc3 	bl	8000c18 <__aeabi_d2f>
 8003492:	4602      	mov	r2, r0
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <_ZN12VelocityCtrl3pidEv+0x224>)
 8003496:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003498:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800349c:	edd7 7a08 	vldr	s15, [r7, #32]
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <_ZN12VelocityCtrl3pidEv+0x21c>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	edc7 7a05 	vstr	s15, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80034b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80034ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80034be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <_ZN12VelocityCtrl3pidEv+0x224>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80034d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80034d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <_ZN12VelocityCtrl3pidEv+0x224>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	eef1 7a67 	vneg.f32	s15, s15
 80034ea:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80034f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80034f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f839 	bl	8000578 <__aeabi_f2d>
 8003506:	4605      	mov	r5, r0
 8003508:	460e      	mov	r6, r1
 800350a:	ed97 7a05 	vldr	s14, [r7, #20]
 800350e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	f7fd f82d 	bl	8000578 <__aeabi_f2d>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	ec43 2b11 	vmov	d1, r2, r3
 8003526:	ec46 5b10 	vmov	d0, r5, r6
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff fbaa 	bl	8002c84 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <_ZN12VelocityCtrl3pidEv+0x218>)
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	3734      	adds	r7, #52	; 0x34
 8003540:	46bd      	mov	sp, r7
 8003542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003544:	f3af 8000 	nop.w
 8003548:	d2f1a9fc 	.word	0xd2f1a9fc
 800354c:	3f50624d 	.word	0x3f50624d
 8003550:	20000224 	.word	0x20000224
 8003554:	2000022c 	.word	0x2000022c
 8003558:	20000228 	.word	0x20000228
 800355c:	20000230 	.word	0x20000230

08003560 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	ed87 0a02 	vstr	s0, [r7, #8]
 800356c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	ed87 0a02 	vstr	s0, [r7, #8]
 8003594:	edc7 0a01 	vstr	s1, [r7, #4]
 8003598:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80035ca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	61da      	str	r2, [r3, #28]
	o_kd_ = kd;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
	o_ki_ = ki;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fe1f 	bl	8003238 <_ZN12VelocityCtrl12calcVelocityEv>
	calcOmega();
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fe54 	bl	80032a8 <_ZN12VelocityCtrl9calcOmegaEv>

	if(excution_flag_ == true){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <_ZN12VelocityCtrl4flipEv+0x24>
		pid();
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fe94 	bl	8003338 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	0000      	movs	r0, r0
	...

08003638 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003668 <_ZN12VelocityCtrl4stopEv+0x30>
 8003650:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003668 <_ZN12VelocityCtrl4stopEv+0x30>
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb15 	bl	8002c84 <_ZN5Motor8setRatioEdd>

}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	f3af 8000 	nop.w
	...

08003670 <_ZN12VelocityCtrl15getCurrentOmegaEv>:
{
	return current_velocity_;
}

float VelocityCtrl::getCurrentOmega()
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	return current_omega_;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	ee07 3a90 	vmov	s15, r3
}
 8003680:	eeb0 0a67 	vmov.f32	s0, s15
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003696:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800369a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80036a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036aa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80036ae:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80036b6:	e000      	b.n	80036ba <ITM_SendChar+0x2c>
    {
      __NOP();
 80036b8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80036ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f9      	beq.n	80036b8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80036c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80036ce:	687b      	ldr	r3, [r7, #4]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e009      	b.n	8003702 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	60ba      	str	r2, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ffc9 	bl	800368e <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	dbf1      	blt.n	80036ee <_write+0x12>
  }
  return len;
 800370a:	687b      	ldr	r3, [r7, #4]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	4618      	mov	r0, r3
 8003722:	f001 feff 	bl	8005524 <cppExit>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003742:	f001 fe69 	bl	8005418 <cppFlip1ms>

		tim6_timer++;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800374e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <HAL_TIM_PeriodElapsedCallback+0x30>
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 800376a:	f001 fec1 	bl	80054f0 <cppFlip100ns>

		tim7_timer++;
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003776:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d902      	bls.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003792:	f001 feb7 	bl	8005504 <cppFlip10ms>

		tim13_timer++;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800379e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a06      	ldr	r2, [pc, #24]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d902      	bls.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
	}

}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40001000 	.word	0x40001000
 80037bc:	20015eac 	.word	0x20015eac
 80037c0:	0001869f 	.word	0x0001869f
 80037c4:	40001400 	.word	0x40001400
 80037c8:	20015ef0 	.word	0x20015ef0
 80037cc:	40001c00 	.word	0x40001c00
 80037d0:	20015ef4 	.word	0x20015ef4

080037d4 <init>:

void init()
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037de:	4808      	ldr	r0, [pc, #32]	; (8003800 <init+0x2c>)
 80037e0:	f003 fc9e 	bl	8007120 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80037e4:	4807      	ldr	r0, [pc, #28]	; (8003804 <init+0x30>)
 80037e6:	f007 fb7e 	bl	800aee6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80037ea:	4807      	ldr	r0, [pc, #28]	; (8003808 <init+0x34>)
 80037ec:	f007 fb7b 	bl	800aee6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80037f0:	4806      	ldr	r0, [pc, #24]	; (800380c <init+0x38>)
 80037f2:	f007 fb78 	bl	800aee6 <HAL_TIM_Base_Start_IT>

	cppInit();
 80037f6:	f001 fd8b 	bl	8005310 <cppInit>

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	20015fd8 	.word	0x20015fd8
 8003808:	2001617c 	.word	0x2001617c
 800380c:	20015ef8 	.word	0x20015ef8

08003810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003814:	f002 f97c 	bl	8005b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003818:	f000 f82a 	bl	8003870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800381c:	f000 fdbc 	bl	8004398 <MX_GPIO_Init>
  MX_DMA_Init();
 8003820:	f000 fd8a 	bl	8004338 <MX_DMA_Init>
  MX_I2C2_Init();
 8003824:	f000 f9e8 	bl	8003bf8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003828:	f000 fa14 	bl	8003c54 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800382c:	f000 fa32 	bl	8003c94 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003830:	f000 fa66 	bl	8003d00 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003834:	f000 fb70 	bl	8003f18 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003838:	f000 fc3c 	bl	80040b4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800383c:	f000 fd52 	bl	80042e4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003840:	f009 fb24 	bl	800ce8c <MX_FATFS_Init>
  MX_TIM6_Init();
 8003844:	f000 fbcc 	bl	8003fe0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003848:	f000 f9a8 	bl	8003b9c <MX_I2C1_Init>
  MX_TIM3_Init();
 800384c:	f000 fb00 	bl	8003e50 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003850:	f000 fc88 	bl	8004164 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003854:	f000 fcd4 	bl	8004200 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003858:	f000 f898 	bl	800398c <MX_ADC2_Init>
  MX_TIM7_Init();
 800385c:	f000 fbf6 	bl	800404c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003860:	f000 fd1c 	bl	800429c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003864:	f7ff ffb6 	bl	80037d4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003868:	f001 fe6c 	bl	8005544 <cppLoop>
 800386c:	e7fc      	b.n	8003868 <main+0x58>
	...

08003870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b0a4      	sub	sp, #144	; 0x90
 8003874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003876:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800387a:	2234      	movs	r2, #52	; 0x34
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f00e fcd6 	bl	8012230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003884:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	223c      	movs	r2, #60	; 0x3c
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f00e fcc7 	bl	8012230 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b37      	ldr	r3, [pc, #220]	; (8003984 <SystemClock_Config+0x114>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a36      	ldr	r2, [pc, #216]	; (8003984 <SystemClock_Config+0x114>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <SystemClock_Config+0x114>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <SystemClock_Config+0x118>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a30      	ldr	r2, [pc, #192]	; (8003988 <SystemClock_Config+0x118>)
 80038c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <SystemClock_Config+0x118>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038da:	2301      	movs	r3, #1
 80038dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038e4:	2302      	movs	r3, #2
 80038e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038ee:	2308      	movs	r3, #8
 80038f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80038f2:	23b4      	movs	r3, #180	; 0xb4
 80038f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80038fe:	2308      	movs	r3, #8
 8003900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003904:	2302      	movs	r3, #2
 8003906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800390a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800390e:	4618      	mov	r0, r3
 8003910:	f005 f840 	bl	8008994 <HAL_RCC_OscConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800391a:	f000 fe93 	bl	8004644 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800391e:	f004 fbbb 	bl	8008098 <HAL_PWREx_EnableOverDrive>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003928:	f000 fe8c 	bl	8004644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800392c:	230f      	movs	r3, #15
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003930:	2302      	movs	r3, #2
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003934:	2300      	movs	r3, #0
 8003936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800393c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800393e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003942:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003948:	2105      	movs	r1, #5
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fbf4 	bl	8008138 <HAL_RCC_ClockConfig>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003956:	f000 fe75 	bl	8004644 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800395a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800395e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003960:	2300      	movs	r3, #0
 8003962:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003964:	2300      	movs	r3, #0
 8003966:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003968:	f107 030c 	add.w	r3, r7, #12
 800396c:	4618      	mov	r0, r3
 800396e:	f004 fdd3 	bl	8008518 <HAL_RCCEx_PeriphCLKConfig>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003978:	f000 fe64 	bl	8004644 <Error_Handler>
  }
}
 800397c:	bf00      	nop
 800397e:	3790      	adds	r7, #144	; 0x90
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	40007000 	.word	0x40007000

0800398c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003992:	463b      	mov	r3, r7
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800399e:	4b7c      	ldr	r3, [pc, #496]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039a0:	4a7c      	ldr	r2, [pc, #496]	; (8003b94 <MX_ADC2_Init+0x208>)
 80039a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039a4:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80039ac:	4b78      	ldr	r3, [pc, #480]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80039b2:	4b77      	ldr	r3, [pc, #476]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80039b8:	4b75      	ldr	r3, [pc, #468]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80039be:	4b74      	ldr	r3, [pc, #464]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039c6:	4b72      	ldr	r3, [pc, #456]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039cc:	4b70      	ldr	r3, [pc, #448]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039ce:	4a72      	ldr	r2, [pc, #456]	; (8003b98 <MX_ADC2_Init+0x20c>)
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039d2:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80039d8:	4b6d      	ldr	r3, [pc, #436]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039da:	220e      	movs	r2, #14
 80039dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039e6:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80039ec:	4868      	ldr	r0, [pc, #416]	; (8003b90 <MX_ADC2_Init+0x204>)
 80039ee:	f002 f923 	bl	8005c38 <HAL_ADC_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80039f8:	f000 fe24 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80039fc:	230a      	movs	r3, #10
 80039fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003a04:	2306      	movs	r3, #6
 8003a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a08:	463b      	mov	r3, r7
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4860      	ldr	r0, [pc, #384]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a0e:	f002 fa67 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003a18:	f000 fe14 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003a1c:	230b      	movs	r3, #11
 8003a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a20:	2302      	movs	r3, #2
 8003a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a24:	463b      	mov	r3, r7
 8003a26:	4619      	mov	r1, r3
 8003a28:	4859      	ldr	r0, [pc, #356]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a2a:	f002 fa59 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003a34:	f000 fe06 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a40:	463b      	mov	r3, r7
 8003a42:	4619      	mov	r1, r3
 8003a44:	4852      	ldr	r0, [pc, #328]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a46:	f002 fa4b 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003a50:	f000 fdf8 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003a54:	230d      	movs	r3, #13
 8003a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003a58:	2304      	movs	r3, #4
 8003a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	4619      	mov	r1, r3
 8003a60:	484b      	ldr	r0, [pc, #300]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a62:	f002 fa3d 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003a6c:	f000 fdea 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003a74:	2305      	movs	r3, #5
 8003a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4844      	ldr	r0, [pc, #272]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a7e:	f002 fa2f 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003a88:	f000 fddc 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003a90:	2306      	movs	r3, #6
 8003a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a94:	463b      	mov	r3, r7
 8003a96:	4619      	mov	r1, r3
 8003a98:	483d      	ldr	r0, [pc, #244]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003a9a:	f002 fa21 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003aa4:	f000 fdce 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003aac:	2307      	movs	r3, #7
 8003aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4836      	ldr	r0, [pc, #216]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003ab6:	f002 fa13 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003ac0:	f000 fdc0 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003ac8:	2308      	movs	r3, #8
 8003aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003acc:	463b      	mov	r3, r7
 8003ace:	4619      	mov	r1, r3
 8003ad0:	482f      	ldr	r0, [pc, #188]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003ad2:	f002 fa05 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003adc:	f000 fdb2 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003ae4:	2309      	movs	r3, #9
 8003ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ae8:	463b      	mov	r3, r7
 8003aea:	4619      	mov	r1, r3
 8003aec:	4828      	ldr	r0, [pc, #160]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003aee:	f002 f9f7 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003af8:	f000 fda4 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003afc:	2305      	movs	r3, #5
 8003afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003b00:	230a      	movs	r3, #10
 8003b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b04:	463b      	mov	r3, r7
 8003b06:	4619      	mov	r1, r3
 8003b08:	4821      	ldr	r0, [pc, #132]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003b0a:	f002 f9e9 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003b14:	f000 fd96 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003b18:	2306      	movs	r3, #6
 8003b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003b1c:	230b      	movs	r3, #11
 8003b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b20:	463b      	mov	r3, r7
 8003b22:	4619      	mov	r1, r3
 8003b24:	481a      	ldr	r0, [pc, #104]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003b26:	f002 f9db 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003b30:	f000 fd88 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003b34:	2307      	movs	r3, #7
 8003b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003b38:	230c      	movs	r3, #12
 8003b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003b42:	f002 f9cd 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003b4c:	f000 fd7a 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003b50:	2308      	movs	r3, #8
 8003b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003b54:	230d      	movs	r3, #13
 8003b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b58:	463b      	mov	r3, r7
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	480c      	ldr	r0, [pc, #48]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003b5e:	f002 f9bf 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003b68:	f000 fd6c 	bl	8004644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003b6c:	2309      	movs	r3, #9
 8003b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003b70:	230e      	movs	r3, #14
 8003b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b74:	463b      	mov	r3, r7
 8003b76:	4619      	mov	r1, r3
 8003b78:	4805      	ldr	r0, [pc, #20]	; (8003b90 <MX_ADC2_Init+0x204>)
 8003b7a:	f002 f9b1 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003b84:	f000 fd5e 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20015d7c 	.word	0x20015d7c
 8003b94:	40012100 	.word	0x40012100
 8003b98:	0f000001 	.word	0x0f000001

08003b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <MX_I2C1_Init+0x50>)
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <MX_I2C1_Init+0x54>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_I2C1_Init+0x50>)
 8003ba8:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <MX_I2C1_Init+0x58>)
 8003baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bda:	f003 fad3 	bl	8007184 <HAL_I2C_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003be4:	f000 fd2e 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20015dc4 	.word	0x20015dc4
 8003bf0:	40005400 	.word	0x40005400
 8003bf4:	000186a0 	.word	0x000186a0

08003bf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <MX_I2C2_Init+0x54>)
 8003c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c04:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <MX_I2C2_Init+0x58>)
 8003c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c34:	4804      	ldr	r0, [pc, #16]	; (8003c48 <MX_I2C2_Init+0x50>)
 8003c36:	f003 faa5 	bl	8007184 <HAL_I2C_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003c40:	f000 fd00 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20015e58 	.word	0x20015e58
 8003c4c:	40005800 	.word	0x40005800
 8003c50:	000186a0 	.word	0x000186a0

08003c54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <MX_SDIO_SD_Init+0x3c>)
 8003c5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <MX_SDIO_SD_Init+0x38>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20016058 	.word	0x20016058
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c98:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003c9a:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <MX_SPI2_Init+0x68>)
 8003c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cc8:	2228      	movs	r2, #40	; 0x28
 8003cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003ce0:	220a      	movs	r2, #10
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ce4:	4804      	ldr	r0, [pc, #16]	; (8003cf8 <MX_SPI2_Init+0x64>)
 8003ce6:	f006 fb7f 	bl	800a3e8 <HAL_SPI_Init>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003cf0:	f000 fca8 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20015ca4 	.word	0x20015ca4
 8003cfc:	40003800 	.word	0x40003800

08003d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b09a      	sub	sp, #104	; 0x68
 8003d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00e fa8e 	bl	8012230 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d1e:	f107 0320 	add.w	r3, r7, #32
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	615a      	str	r2, [r3, #20]
 8003d30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d32:	463b      	mov	r3, r7
 8003d34:	2220      	movs	r2, #32
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f00e fa79 	bl	8012230 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d40:	4a42      	ldr	r2, [pc, #264]	; (8003e4c <MX_TIM1_Init+0x14c>)
 8003d42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d44:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d50:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d6a:	4837      	ldr	r0, [pc, #220]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003d6c:	f007 f8df 	bl	800af2e <HAL_TIM_PWM_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003d76:	f000 fc65 	bl	8004644 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d82:	2301      	movs	r3, #1
 8003d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d86:	2300      	movs	r3, #0
 8003d88:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d92:	2301      	movs	r3, #1
 8003d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d96:	2300      	movs	r3, #0
 8003d98:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003da2:	4619      	mov	r1, r3
 8003da4:	4828      	ldr	r0, [pc, #160]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003da6:	f007 f92b 	bl	800b000 <HAL_TIM_Encoder_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003db0:	f000 fc48 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4821      	ldr	r0, [pc, #132]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003dc4:	f007 fe52 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003dce:	f000 fc39 	bl	8004644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dd2:	2360      	movs	r3, #96	; 0x60
 8003dd4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dee:	f107 0320 	add.w	r3, r7, #32
 8003df2:	2208      	movs	r2, #8
 8003df4:	4619      	mov	r1, r3
 8003df6:	4814      	ldr	r0, [pc, #80]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003df8:	f007 fad4 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003e02:	f000 fc1f 	bl	8004644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e24:	463b      	mov	r3, r7
 8003e26:	4619      	mov	r1, r3
 8003e28:	4807      	ldr	r0, [pc, #28]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003e2a:	f007 fe9b 	bl	800bb64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003e34:	f000 fc06 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e38:	4803      	ldr	r0, [pc, #12]	; (8003e48 <MX_TIM1_Init+0x148>)
 8003e3a:	f000 ffeb 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8003e3e:	bf00      	nop
 8003e40:	3768      	adds	r7, #104	; 0x68
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20016018 	.word	0x20016018
 8003e4c:	40010000 	.word	0x40010000

08003e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e56:	f107 0320 	add.w	r3, r7, #32
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	615a      	str	r2, [r3, #20]
 8003e70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e72:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <MX_TIM3_Init+0xc4>)
 8003e76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e98:	481d      	ldr	r0, [pc, #116]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003e9a:	f007 f848 	bl	800af2e <HAL_TIM_PWM_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003ea4:	f000 fbce 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb0:	f107 0320 	add.w	r3, r7, #32
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4816      	ldr	r0, [pc, #88]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003eb8:	f007 fdd8 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003ec2:	f000 fbbf 	bl	8004644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ec6:	2360      	movs	r3, #96	; 0x60
 8003ec8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4619      	mov	r1, r3
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003ede:	f007 fa61 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003ee8:	f000 fbac 	bl	8004644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	2204      	movs	r2, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4807      	ldr	r0, [pc, #28]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003ef4:	f007 fa56 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003efe:	f000 fba1 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f02:	4803      	ldr	r0, [pc, #12]	; (8003f10 <MX_TIM3_Init+0xc0>)
 8003f04:	f000 ff86 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8003f08:	bf00      	nop
 8003f0a:	3728      	adds	r7, #40	; 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20015eb0 	.word	0x20015eb0
 8003f14:	40000400 	.word	0x40000400

08003f18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1e:	f107 0320 	add.w	r3, r7, #32
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <MX_TIM4_Init+0xc4>)
 8003f3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f4e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003f52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003f60:	481d      	ldr	r0, [pc, #116]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f62:	f006 ffe4 	bl	800af2e <HAL_TIM_PWM_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003f6c:	f000 fb6a 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f78:	f107 0320 	add.w	r3, r7, #32
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4816      	ldr	r0, [pc, #88]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003f80:	f007 fd74 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003f8a:	f000 fb5b 	bl	8004644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f8e:	2360      	movs	r3, #96	; 0x60
 8003f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003fa6:	f007 f9fd 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003fb0:	f000 fb48 	bl	8004644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	220c      	movs	r2, #12
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003fbc:	f007 f9f2 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003fc6:	f000 fb3d 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003fca:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <MX_TIM4_Init+0xc0>)
 8003fcc:	f000 ff22 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8003fd0:	bf00      	nop
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20015d3c 	.word	0x20015d3c
 8003fdc:	40000800 	.word	0x40000800

08003fe0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <MX_TIM6_Init+0x64>)
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <MX_TIM6_Init+0x68>)
 8003ff2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <MX_TIM6_Init+0x64>)
 8003ff6:	2259      	movs	r2, #89	; 0x59
 8003ff8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <MX_TIM6_Init+0x64>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <MX_TIM6_Init+0x64>)
 8004002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004006:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <MX_TIM6_Init+0x64>)
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800400e:	480d      	ldr	r0, [pc, #52]	; (8004044 <MX_TIM6_Init+0x64>)
 8004010:	f006 ff3e 	bl	800ae90 <HAL_TIM_Base_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800401a:	f000 fb13 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004026:	463b      	mov	r3, r7
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	; (8004044 <MX_TIM6_Init+0x64>)
 800402c:	f007 fd1e 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004036:	f000 fb05 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20015fd8 	.word	0x20015fd8
 8004048:	40001000 	.word	0x40001000

0800404c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004052:	463b      	mov	r3, r7
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <MX_TIM7_Init+0x60>)
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <MX_TIM7_Init+0x64>)
 800405e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <MX_TIM7_Init+0x60>)
 8004062:	22b3      	movs	r2, #179	; 0xb3
 8004064:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <MX_TIM7_Init+0x60>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <MX_TIM7_Init+0x60>)
 800406e:	2231      	movs	r2, #49	; 0x31
 8004070:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <MX_TIM7_Init+0x60>)
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004078:	480c      	ldr	r0, [pc, #48]	; (80040ac <MX_TIM7_Init+0x60>)
 800407a:	f006 ff09 	bl	800ae90 <HAL_TIM_Base_Init>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004084:	f000 fade 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004090:	463b      	mov	r3, r7
 8004092:	4619      	mov	r1, r3
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <MX_TIM7_Init+0x60>)
 8004096:	f007 fce9 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80040a0:	f000 fad0 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2001617c 	.word	0x2001617c
 80040b0:	40001400 	.word	0x40001400

080040b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00e f8b4 	bl	8012230 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <MX_TIM8_Init+0xa8>)
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <MX_TIM8_Init+0xac>)
 80040d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <MX_TIM8_Init+0xa8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <MX_TIM8_Init+0xa8>)
 80040de:	2210      	movs	r2, #16
 80040e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <MX_TIM8_Init+0xa8>)
 80040e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <MX_TIM8_Init+0xa8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <MX_TIM8_Init+0xa8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <MX_TIM8_Init+0xa8>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040fc:	2303      	movs	r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004120:	f107 030c 	add.w	r3, r7, #12
 8004124:	4619      	mov	r1, r3
 8004126:	480d      	ldr	r0, [pc, #52]	; (800415c <MX_TIM8_Init+0xa8>)
 8004128:	f006 ff6a 	bl	800b000 <HAL_TIM_Encoder_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004132:	f000 fa87 	bl	8004644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4806      	ldr	r0, [pc, #24]	; (800415c <MX_TIM8_Init+0xa8>)
 8004144:	f007 fc92 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800414e:	f000 fa79 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004152:	bf00      	nop
 8004154:	3730      	adds	r7, #48	; 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20015cfc 	.word	0x20015cfc
 8004160:	40010400 	.word	0x40010400

08004164 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	615a      	str	r2, [r3, #20]
 800417a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <MX_TIM10_Init+0x94>)
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <MX_TIM10_Init+0x98>)
 8004180:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <MX_TIM10_Init+0x94>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004194:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004198:	2200      	movs	r2, #0
 800419a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <MX_TIM10_Init+0x94>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80041a2:	4815      	ldr	r0, [pc, #84]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041a4:	f006 fe74 	bl	800ae90 <HAL_TIM_Base_Init>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80041ae:	f000 fa49 	bl	8004644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80041b2:	4811      	ldr	r0, [pc, #68]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041b4:	f006 febb 	bl	800af2e <HAL_TIM_PWM_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80041be:	f000 fa41 	bl	8004644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041c2:	2360      	movs	r3, #96	; 0x60
 80041c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	2200      	movs	r2, #0
 80041d6:	4619      	mov	r1, r3
 80041d8:	4807      	ldr	r0, [pc, #28]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041da:	f007 f8e3 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80041e4:	f000 fa2e 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041ea:	f000 fe13 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 80041ee:	bf00      	nop
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20015e18 	.word	0x20015e18
 80041fc:	40014400 	.word	0x40014400

08004200 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
 8004214:	615a      	str	r2, [r3, #20]
 8004216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <MX_TIM11_Init+0x94>)
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <MX_TIM11_Init+0x98>)
 800421c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <MX_TIM11_Init+0x94>)
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <MX_TIM11_Init+0x94>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800422a:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <MX_TIM11_Init+0x94>)
 800422c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004230:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004232:	4b18      	ldr	r3, [pc, #96]	; (8004294 <MX_TIM11_Init+0x94>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <MX_TIM11_Init+0x94>)
 800423a:	2200      	movs	r2, #0
 800423c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800423e:	4815      	ldr	r0, [pc, #84]	; (8004294 <MX_TIM11_Init+0x94>)
 8004240:	f006 fe26 	bl	800ae90 <HAL_TIM_Base_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800424a:	f000 f9fb 	bl	8004644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800424e:	4811      	ldr	r0, [pc, #68]	; (8004294 <MX_TIM11_Init+0x94>)
 8004250:	f006 fe6d 	bl	800af2e <HAL_TIM_PWM_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800425a:	f000 f9f3 	bl	8004644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800425e:	2360      	movs	r3, #96	; 0x60
 8004260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	2200      	movs	r2, #0
 8004272:	4619      	mov	r1, r3
 8004274:	4807      	ldr	r0, [pc, #28]	; (8004294 <MX_TIM11_Init+0x94>)
 8004276:	f007 f895 	bl	800b3a4 <HAL_TIM_PWM_ConfigChannel>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004280:	f000 f9e0 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004284:	4803      	ldr	r0, [pc, #12]	; (8004294 <MX_TIM11_Init+0x94>)
 8004286:	f000 fdc5 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20015f38 	.word	0x20015f38
 8004298:	40014800 	.word	0x40014800

0800429c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <MX_TIM13_Init+0x40>)
 80042a2:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <MX_TIM13_Init+0x44>)
 80042a4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <MX_TIM13_Init+0x40>)
 80042a8:	2259      	movs	r2, #89	; 0x59
 80042aa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <MX_TIM13_Init+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <MX_TIM13_Init+0x40>)
 80042b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80042b8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <MX_TIM13_Init+0x40>)
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <MX_TIM13_Init+0x40>)
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <MX_TIM13_Init+0x40>)
 80042c8:	f006 fde2 	bl	800ae90 <HAL_TIM_Base_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80042d2:	f000 f9b7 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20015ef8 	.word	0x20015ef8
 80042e0:	40001c00 	.word	0x40001c00

080042e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <MX_USART2_UART_Init+0x50>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 80042f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_USART2_UART_Init+0x4c>)
 800431c:	f007 fc88 	bl	800bc30 <HAL_UART_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004326:	f000 f98d 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200160dc 	.word	0x200160dc
 8004334:	40004400 	.word	0x40004400

08004338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	4b14      	ldr	r3, [pc, #80]	; (8004394 <MX_DMA_Init+0x5c>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <MX_DMA_Init+0x5c>)
 8004348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <MX_DMA_Init+0x5c>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	203a      	movs	r0, #58	; 0x3a
 8004360:	f002 f949 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004364:	203a      	movs	r0, #58	; 0x3a
 8004366:	f002 f962 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	203b      	movs	r0, #59	; 0x3b
 8004370:	f002 f941 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004374:	203b      	movs	r0, #59	; 0x3b
 8004376:	f002 f95a 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	2045      	movs	r0, #69	; 0x45
 8004380:	f002 f939 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004384:	2045      	movs	r0, #69	; 0x45
 8004386:	f002 f952 	bl	800662e <HAL_NVIC_EnableIRQ>

}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	4b9c      	ldr	r3, [pc, #624]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a9b      	ldr	r2, [pc, #620]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b99      	ldr	r3, [pc, #612]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	4b95      	ldr	r3, [pc, #596]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a94      	ldr	r2, [pc, #592]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b92      	ldr	r3, [pc, #584]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a8d      	ldr	r2, [pc, #564]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <MX_GPIO_Init+0x28c>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b87      	ldr	r3, [pc, #540]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a86      	ldr	r2, [pc, #536]	; (8004624 <MX_GPIO_Init+0x28c>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b84      	ldr	r3, [pc, #528]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b80      	ldr	r3, [pc, #512]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	4a7f      	ldr	r2, [pc, #508]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	6313      	str	r3, [r2, #48]	; 0x30
 800442e:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	4b79      	ldr	r3, [pc, #484]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a78      	ldr	r2, [pc, #480]	; (8004624 <MX_GPIO_Init+0x28c>)
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <MX_GPIO_Init+0x28c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004456:	2200      	movs	r2, #0
 8004458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800445c:	4872      	ldr	r0, [pc, #456]	; (8004628 <MX_GPIO_Init+0x290>)
 800445e:	f002 fe5f 	bl	8007120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004462:	2200      	movs	r2, #0
 8004464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004468:	4870      	ldr	r0, [pc, #448]	; (800462c <MX_GPIO_Init+0x294>)
 800446a:	f002 fe59 	bl	8007120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800446e:	2200      	movs	r2, #0
 8004470:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004474:	486e      	ldr	r0, [pc, #440]	; (8004630 <MX_GPIO_Init+0x298>)
 8004476:	f002 fe53 	bl	8007120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800447a:	2200      	movs	r2, #0
 800447c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004480:	486c      	ldr	r0, [pc, #432]	; (8004634 <MX_GPIO_Init+0x29c>)
 8004482:	f002 fe4d 	bl	8007120 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004486:	2304      	movs	r3, #4
 8004488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800448a:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <MX_GPIO_Init+0x2a0>)
 800448c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	4619      	mov	r1, r3
 8004498:	4863      	ldr	r0, [pc, #396]	; (8004628 <MX_GPIO_Init+0x290>)
 800449a:	f002 fc7f 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800449e:	230f      	movs	r3, #15
 80044a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044a2:	2303      	movs	r3, #3
 80044a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044aa:	f107 031c 	add.w	r3, r7, #28
 80044ae:	4619      	mov	r1, r3
 80044b0:	4862      	ldr	r0, [pc, #392]	; (800463c <MX_GPIO_Init+0x2a4>)
 80044b2:	f002 fc73 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80044b6:	23e1      	movs	r3, #225	; 0xe1
 80044b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ba:	2303      	movs	r3, #3
 80044bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	4619      	mov	r1, r3
 80044c8:	485a      	ldr	r0, [pc, #360]	; (8004634 <MX_GPIO_Init+0x29c>)
 80044ca:	f002 fc67 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044ce:	2303      	movs	r3, #3
 80044d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044d2:	2303      	movs	r3, #3
 80044d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	4852      	ldr	r0, [pc, #328]	; (800462c <MX_GPIO_Init+0x294>)
 80044e2:	f002 fc5b 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044e6:	2304      	movs	r3, #4
 80044e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ee:	2301      	movs	r3, #1
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	484c      	ldr	r0, [pc, #304]	; (800462c <MX_GPIO_Init+0x294>)
 80044fa:	f002 fc4f 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80044fe:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004504:	2300      	movs	r3, #0
 8004506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004508:	2301      	movs	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	4619      	mov	r1, r3
 8004512:	4845      	ldr	r0, [pc, #276]	; (8004628 <MX_GPIO_Init+0x290>)
 8004514:	f002 fc42 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800451c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800452a:	f107 031c 	add.w	r3, r7, #28
 800452e:	4619      	mov	r1, r3
 8004530:	483d      	ldr	r0, [pc, #244]	; (8004628 <MX_GPIO_Init+0x290>)
 8004532:	f002 fc33 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	4837      	ldr	r0, [pc, #220]	; (800462c <MX_GPIO_Init+0x294>)
 8004550:	f002 fc24 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800455a:	4b39      	ldr	r3, [pc, #228]	; (8004640 <MX_GPIO_Init+0x2a8>)
 800455c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004562:	f107 031c 	add.w	r3, r7, #28
 8004566:	4619      	mov	r1, r3
 8004568:	4831      	ldr	r0, [pc, #196]	; (8004630 <MX_GPIO_Init+0x298>)
 800456a:	f002 fc17 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800456e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004574:	2301      	movs	r3, #1
 8004576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	2300      	movs	r3, #0
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	482a      	ldr	r0, [pc, #168]	; (8004630 <MX_GPIO_Init+0x298>)
 8004588:	f002 fc08 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800458c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004592:	2301      	movs	r3, #1
 8004594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	4619      	mov	r1, r3
 80045a4:	4822      	ldr	r0, [pc, #136]	; (8004630 <MX_GPIO_Init+0x298>)
 80045a6:	f002 fbf9 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80045aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80045ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b0:	2301      	movs	r3, #1
 80045b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	f107 031c 	add.w	r3, r7, #28
 80045c0:	4619      	mov	r1, r3
 80045c2:	481c      	ldr	r0, [pc, #112]	; (8004634 <MX_GPIO_Init+0x29c>)
 80045c4:	f002 fbea 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d6:	f107 031c 	add.w	r3, r7, #28
 80045da:	4619      	mov	r1, r3
 80045dc:	4815      	ldr	r0, [pc, #84]	; (8004634 <MX_GPIO_Init+0x29c>)
 80045de:	f002 fbdd 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80045e2:	239b      	movs	r3, #155	; 0x9b
 80045e4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045e6:	2300      	movs	r3, #0
 80045e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ea:	2301      	movs	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ee:	f107 031c 	add.w	r3, r7, #28
 80045f2:	4619      	mov	r1, r3
 80045f4:	480e      	ldr	r0, [pc, #56]	; (8004630 <MX_GPIO_Init+0x298>)
 80045f6:	f002 fbd1 	bl	8006d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	2008      	movs	r0, #8
 8004600:	f001 fff9 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004604:	2008      	movs	r0, #8
 8004606:	f002 f812 	bl	800662e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	2017      	movs	r0, #23
 8004610:	f001 fff1 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004614:	2017      	movs	r0, #23
 8004616:	f002 f80a 	bl	800662e <HAL_NVIC_EnableIRQ>

}
 800461a:	bf00      	nop
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40021000 	.word	0x40021000
 800462c:	40020400 	.word	0x40020400
 8004630:	40020c00 	.word	0x40020c00
 8004634:	40020000 	.word	0x40020000
 8004638:	10310000 	.word	0x10310000
 800463c:	40020800 	.word	0x40020800
 8004640:	10110000 	.word	0x10110000

08004644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004648:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800464a:	e7fe      	b.n	800464a <Error_Handler+0x6>

0800464c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_MspInit+0x4c>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <HAL_MspInit+0x4c>)
 800465c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004660:	6453      	str	r3, [r2, #68]	; 0x44
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_MspInit+0x4c>)
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_MspInit+0x4c>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <HAL_MspInit+0x4c>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_MspInit+0x4c>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800

0800469c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08c      	sub	sp, #48	; 0x30
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a4:	f107 031c 	add.w	r3, r7, #28
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_ADC_MspInit+0x148>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f040 808e 	bne.w	80047dc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	4b48      	ldr	r3, [pc, #288]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	4a47      	ldr	r2, [pc, #284]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ce:	6453      	str	r3, [r2, #68]	; 0x44
 80046d0:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	4a40      	ldr	r2, [pc, #256]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	6313      	str	r3, [r2, #48]	; 0x30
 80046ec:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	4b3a      	ldr	r3, [pc, #232]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	4a39      	ldr	r2, [pc, #228]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6313      	str	r3, [r2, #48]	; 0x30
 8004708:	4b37      	ldr	r3, [pc, #220]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a32      	ldr	r2, [pc, #200]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b30      	ldr	r3, [pc, #192]	; (80047e8 <HAL_ADC_MspInit+0x14c>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004730:	230f      	movs	r3, #15
 8004732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004734:	2303      	movs	r3, #3
 8004736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800473c:	f107 031c 	add.w	r3, r7, #28
 8004740:	4619      	mov	r1, r3
 8004742:	482a      	ldr	r0, [pc, #168]	; (80047ec <HAL_ADC_MspInit+0x150>)
 8004744:	f002 fb2a 	bl	8006d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004748:	23ff      	movs	r3, #255	; 0xff
 800474a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800474c:	2303      	movs	r3, #3
 800474e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004754:	f107 031c 	add.w	r3, r7, #28
 8004758:	4619      	mov	r1, r3
 800475a:	4825      	ldr	r0, [pc, #148]	; (80047f0 <HAL_ADC_MspInit+0x154>)
 800475c:	f002 fb1e 	bl	8006d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004760:	2303      	movs	r3, #3
 8004762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004764:	2303      	movs	r3, #3
 8004766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476c:	f107 031c 	add.w	r3, r7, #28
 8004770:	4619      	mov	r1, r3
 8004772:	4820      	ldr	r0, [pc, #128]	; (80047f4 <HAL_ADC_MspInit+0x158>)
 8004774:	f002 fb12 	bl	8006d9c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 800477a:	4a20      	ldr	r2, [pc, #128]	; (80047fc <HAL_ADC_MspInit+0x160>)
 800477c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 8004780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004784:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004792:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 8004794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004798:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 800479c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047a8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047b8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80047c0:	480d      	ldr	r0, [pc, #52]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047c2:	f001 ff4f 	bl	8006664 <HAL_DMA_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80047cc:	f7ff ff3a 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_ADC_MspInit+0x15c>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047dc:	bf00      	nop
 80047de:	3730      	adds	r7, #48	; 0x30
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40012100 	.word	0x40012100
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020000 	.word	0x40020000
 80047f4:	40020400 	.word	0x40020400
 80047f8:	2001611c 	.word	0x2001611c
 80047fc:	40026440 	.word	0x40026440

08004800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	; 0x30
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	f107 031c 	add.w	r3, r7, #28
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_I2C_MspInit+0xe8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d12c      	bne.n	800487c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_I2C_MspInit+0xec>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6313      	str	r3, [r2, #48]	; 0x30
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800483e:	23c0      	movs	r3, #192	; 0xc0
 8004840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004842:	2312      	movs	r3, #18
 8004844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004846:	2301      	movs	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800484a:	2303      	movs	r3, #3
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800484e:	2304      	movs	r3, #4
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	4825      	ldr	r0, [pc, #148]	; (80048f0 <HAL_I2C_MspInit+0xf0>)
 800485a:	f002 fa9f 	bl	8006d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800486c:	6413      	str	r3, [r2, #64]	; 0x40
 800486e:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800487a:	e031      	b.n	80048e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_I2C_MspInit+0xf4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d12c      	bne.n	80048e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_I2C_MspInit+0xec>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_I2C_MspInit+0xec>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a8:	2312      	movs	r3, #18
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b0:	2303      	movs	r3, #3
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80048b4:	2304      	movs	r3, #4
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b8:	f107 031c 	add.w	r3, r7, #28
 80048bc:	4619      	mov	r1, r3
 80048be:	480c      	ldr	r0, [pc, #48]	; (80048f0 <HAL_I2C_MspInit+0xf0>)
 80048c0:	f002 fa6c 	bl	8006d9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_I2C_MspInit+0xec>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	4a07      	ldr	r2, [pc, #28]	; (80048ec <HAL_I2C_MspInit+0xec>)
 80048ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048d2:	6413      	str	r3, [r2, #64]	; 0x40
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_I2C_MspInit+0xec>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
}
 80048e0:	bf00      	nop
 80048e2:	3730      	adds	r7, #48	; 0x30
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40005400 	.word	0x40005400
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40005800 	.word	0x40005800

080048f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a69      	ldr	r2, [pc, #420]	; (8004abc <HAL_SD_MspInit+0x1c4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	f040 80cb 	bne.w	8004ab2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	4a66      	ldr	r2, [pc, #408]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 8004926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800492a:	6453      	str	r3, [r2, #68]	; 0x44
 800492c:	4b64      	ldr	r3, [pc, #400]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	4a5f      	ldr	r2, [pc, #380]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6313      	str	r3, [r2, #48]	; 0x30
 8004948:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	4b59      	ldr	r3, [pc, #356]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	4a58      	ldr	r2, [pc, #352]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 800495e:	f043 0308 	orr.w	r3, r3, #8
 8004962:	6313      	str	r3, [r2, #48]	; 0x30
 8004964:	4b56      	ldr	r3, [pc, #344]	; (8004ac0 <HAL_SD_MspInit+0x1c8>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004970:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004974:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004976:	2302      	movs	r3, #2
 8004978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497e:	2303      	movs	r3, #3
 8004980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004982:	230c      	movs	r3, #12
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	4619      	mov	r1, r3
 800498c:	484d      	ldr	r0, [pc, #308]	; (8004ac4 <HAL_SD_MspInit+0x1cc>)
 800498e:	f002 fa05 	bl	8006d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004992:	2304      	movs	r3, #4
 8004994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2302      	movs	r3, #2
 8004998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80049a2:	230c      	movs	r3, #12
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049a6:	f107 0314 	add.w	r3, r7, #20
 80049aa:	4619      	mov	r1, r3
 80049ac:	4846      	ldr	r0, [pc, #280]	; (8004ac8 <HAL_SD_MspInit+0x1d0>)
 80049ae:	f002 f9f5 	bl	8006d9c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80049b2:	4b46      	ldr	r3, [pc, #280]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049b4:	4a46      	ldr	r2, [pc, #280]	; (8004ad0 <HAL_SD_MspInit+0x1d8>)
 80049b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80049b8:	4b44      	ldr	r3, [pc, #272]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049be:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049d4:	4b3d      	ldr	r3, [pc, #244]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049da:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049e6:	2220      	movs	r2, #32
 80049e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80049ea:	4b38      	ldr	r3, [pc, #224]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049f4:	2204      	movs	r2, #4
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80049f8:	4b34      	ldr	r3, [pc, #208]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 80049fa:	2203      	movs	r2, #3
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80049fe:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 8004a00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 8004a08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004a0e:	482f      	ldr	r0, [pc, #188]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 8004a10:	f001 fe28 	bl	8006664 <HAL_DMA_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004a1a:	f7ff fe13 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <HAL_SD_MspInit+0x1d4>)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_SD_MspInit+0x1e0>)
 8004a2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a36:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3e:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a52:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a5e:	2220      	movs	r2, #32
 8004a60:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a68:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a72:	2203      	movs	r2, #3
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004a86:	4813      	ldr	r0, [pc, #76]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a88:	f001 fdec 	bl	8006664 <HAL_DMA_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004a92:	f7ff fdd7 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <HAL_SD_MspInit+0x1dc>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2031      	movs	r0, #49	; 0x31
 8004aa8:	f001 fda5 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004aac:	2031      	movs	r0, #49	; 0x31
 8004aae:	f001 fdbe 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004ab2:	bf00      	nop
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40020800 	.word	0x40020800
 8004ac8:	40020c00 	.word	0x40020c00
 8004acc:	20015c44 	.word	0x20015c44
 8004ad0:	40026458 	.word	0x40026458
 8004ad4:	20015f78 	.word	0x20015f78
 8004ad8:	400264a0 	.word	0x400264a0

08004adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <HAL_SPI_MspInit+0x84>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d12c      	bne.n	8004b58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_SPI_MspInit+0x88>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004b36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b44:	2303      	movs	r3, #3
 8004b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b48:	2305      	movs	r3, #5
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4619      	mov	r1, r3
 8004b52:	4805      	ldr	r0, [pc, #20]	; (8004b68 <HAL_SPI_MspInit+0x8c>)
 8004b54:	f002 f922 	bl	8006d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b58:	bf00      	nop
 8004b5a:	3728      	adds	r7, #40	; 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40003800 	.word	0x40003800
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40020400 	.word	0x40020400

08004b6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 031c 	add.w	r3, r7, #28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_TIM_PWM_MspInit+0xd4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12d      	bne.n	8004bea <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	4a2b      	ldr	r2, [pc, #172]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004bb4:	f043 0310 	orr.w	r3, r3, #16
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004bc6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bdc:	f107 031c 	add.w	r3, r7, #28
 8004be0:	4619      	mov	r1, r3
 8004be2:	4819      	ldr	r0, [pc, #100]	; (8004c48 <HAL_TIM_PWM_MspInit+0xdc>)
 8004be4:	f002 f8da 	bl	8006d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004be8:	e026      	b.n	8004c38 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_TIM_PWM_MspInit+0xe0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d10e      	bne.n	8004c12 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	6413      	str	r3, [r2, #64]	; 0x40
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
}
 8004c10:	e012      	b.n	8004c38 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_TIM_PWM_MspInit+0xe4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10d      	bne.n	8004c38 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800

08004c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <HAL_TIM_Base_MspInit+0x108>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d116      	bne.n	8004c94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004c70:	f043 0310 	orr.w	r3, r3, #16
 8004c74:	6413      	str	r3, [r2, #64]	; 0x40
 8004c76:	4b3a      	ldr	r3, [pc, #232]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2101      	movs	r1, #1
 8004c86:	2036      	movs	r0, #54	; 0x36
 8004c88:	f001 fcb5 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c8c:	2036      	movs	r0, #54	; 0x36
 8004c8e:	f001 fcce 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004c92:	e05e      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a32      	ldr	r2, [pc, #200]	; (8004d64 <HAL_TIM_Base_MspInit+0x110>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d116      	bne.n	8004ccc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	4a2e      	ldr	r2, [pc, #184]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004ca8:	f043 0320 	orr.w	r3, r3, #32
 8004cac:	6413      	str	r3, [r2, #64]	; 0x40
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	2037      	movs	r0, #55	; 0x37
 8004cc0:	f001 fc99 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004cc4:	2037      	movs	r0, #55	; 0x37
 8004cc6:	f001 fcb2 	bl	800662e <HAL_NVIC_EnableIRQ>
}
 8004cca:	e042      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <HAL_TIM_Base_MspInit+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	697b      	ldr	r3, [r7, #20]
}
 8004cf2:	e02e      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <HAL_TIM_Base_MspInit+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	693b      	ldr	r3, [r7, #16]
}
 8004d1a:	e01a      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_TIM_Base_MspInit+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d115      	bne.n	8004d52 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_TIM_Base_MspInit+0x10c>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	202c      	movs	r0, #44	; 0x2c
 8004d48:	f001 fc55 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004d4c:	202c      	movs	r0, #44	; 0x2c
 8004d4e:	f001 fc6e 	bl	800662e <HAL_NVIC_EnableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40001000 	.word	0x40001000
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40001400 	.word	0x40001400
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	40001c00 	.word	0x40001c00

08004d74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d133      	bne.n	8004dfe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004dbc:	f043 0304 	orr.w	r3, r3, #4
 8004dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004dce:	23c0      	movs	r3, #192	; 0xc0
 8004dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004dde:	2303      	movs	r3, #3
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de2:	f107 0314 	add.w	r3, r7, #20
 8004de6:	4619      	mov	r1, r3
 8004de8:	4809      	ldr	r0, [pc, #36]	; (8004e10 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004dea:	f001 ffd7 	bl	8006d9c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	f001 fbff 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004df8:	202c      	movs	r0, #44	; 0x2c
 8004dfa:	f001 fc18 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004dfe:	bf00      	nop
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40020800 	.word	0x40020800

08004e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 031c 	add.w	r3, r7, #28
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5c      	ldr	r2, [pc, #368]	; (8004fa4 <HAL_TIM_MspPostInit+0x190>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d11f      	bne.n	8004e76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	4a5a      	ldr	r2, [pc, #360]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e40:	f043 0310 	orr.w	r3, r3, #16
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30
 8004e46:	4b58      	ldr	r3, [pc, #352]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e64:	2301      	movs	r3, #1
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e68:	f107 031c 	add.w	r3, r7, #28
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	484f      	ldr	r0, [pc, #316]	; (8004fac <HAL_TIM_MspPostInit+0x198>)
 8004e70:	f001 ff94 	bl	8006d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004e74:	e091      	b.n	8004f9a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a4d      	ldr	r2, [pc, #308]	; (8004fb0 <HAL_TIM_MspPostInit+0x19c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d11e      	bne.n	8004ebe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	4a47      	ldr	r2, [pc, #284]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e8a:	f043 0302 	orr.w	r3, r3, #2
 8004e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e90:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004e9c:	2330      	movs	r3, #48	; 0x30
 8004e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004eac:	2302      	movs	r3, #2
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb0:	f107 031c 	add.w	r3, r7, #28
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	483f      	ldr	r0, [pc, #252]	; (8004fb4 <HAL_TIM_MspPostInit+0x1a0>)
 8004eb8:	f001 ff70 	bl	8006d9c <HAL_GPIO_Init>
}
 8004ebc:	e06d      	b.n	8004f9a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <HAL_TIM_MspPostInit+0x1a4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d11f      	bne.n	8004f08 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	4a35      	ldr	r2, [pc, #212]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004ed2:	f043 0308 	orr.w	r3, r3, #8
 8004ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed8:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004ee4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eea:	2302      	movs	r3, #2
 8004eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004efa:	f107 031c 	add.w	r3, r7, #28
 8004efe:	4619      	mov	r1, r3
 8004f00:	482e      	ldr	r0, [pc, #184]	; (8004fbc <HAL_TIM_MspPostInit+0x1a8>)
 8004f02:	f001 ff4b 	bl	8006d9c <HAL_GPIO_Init>
}
 8004f06:	e048      	b.n	8004f9a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <HAL_TIM_MspPostInit+0x1ac>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d11f      	bne.n	8004f52 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	6313      	str	r3, [r2, #48]	; 0x30
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004f40:	2303      	movs	r3, #3
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	481a      	ldr	r0, [pc, #104]	; (8004fb4 <HAL_TIM_MspPostInit+0x1a0>)
 8004f4c:	f001 ff26 	bl	8006d9c <HAL_GPIO_Init>
}
 8004f50:	e023      	b.n	8004f9a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIM_MspPostInit+0x1b0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d11e      	bne.n	8004f9a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f66:	f043 0302 	orr.w	r3, r3, #2
 8004f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f86:	2300      	movs	r3, #0
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8e:	f107 031c 	add.w	r3, r7, #28
 8004f92:	4619      	mov	r1, r3
 8004f94:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <HAL_TIM_MspPostInit+0x1a0>)
 8004f96:	f001 ff01 	bl	8006d9c <HAL_GPIO_Init>
}
 8004f9a:	bf00      	nop
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800

08004fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd0:	f107 0314 	add.w	r3, r7, #20
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <HAL_UART_MspInit+0x84>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d12b      	bne.n	8005042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	4b18      	ldr	r3, [pc, #96]	; (8005050 <HAL_UART_MspInit+0x88>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_UART_MspInit+0x88>)
 8004ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <HAL_UART_MspInit+0x88>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_UART_MspInit+0x88>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <HAL_UART_MspInit+0x88>)
 8005010:	f043 0308 	orr.w	r3, r3, #8
 8005014:	6313      	str	r3, [r2, #48]	; 0x30
 8005016:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <HAL_UART_MspInit+0x88>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005022:	2360      	movs	r3, #96	; 0x60
 8005024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005026:	2302      	movs	r3, #2
 8005028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502e:	2303      	movs	r3, #3
 8005030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005032:	2307      	movs	r3, #7
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	4619      	mov	r1, r3
 800503c:	4805      	ldr	r0, [pc, #20]	; (8005054 <HAL_UART_MspInit+0x8c>)
 800503e:	f001 fead 	bl	8006d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005042:	bf00      	nop
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40004400 	.word	0x40004400
 8005050:	40023800 	.word	0x40023800
 8005054:	40020c00 	.word	0x40020c00

08005058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800505c:	e7fe      	b.n	800505c <NMI_Handler+0x4>

0800505e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005062:	e7fe      	b.n	8005062 <HardFault_Handler+0x4>

08005064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005068:	e7fe      	b.n	8005068 <MemManage_Handler+0x4>

0800506a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800506e:	e7fe      	b.n	800506e <BusFault_Handler+0x4>

08005070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005074:	e7fe      	b.n	8005074 <UsageFault_Handler+0x4>

08005076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800507a:	bf00      	nop
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050a4:	f000 fd86 	bl	8005bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}

080050ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80050b0:	2004      	movs	r0, #4
 80050b2:	f002 f84f 	bl	8007154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}

080050ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80050be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050c2:	f002 f847 	bl	8007154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80050d0:	4803      	ldr	r0, [pc, #12]	; (80050e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80050d2:	f006 f85e 	bl	800b192 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80050d6:	4803      	ldr	r0, [pc, #12]	; (80050e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80050d8:	f006 f85b 	bl	800b192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20015cfc 	.word	0x20015cfc
 80050e4:	20015ef8 	.word	0x20015ef8

080050e8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <SDIO_IRQHandler+0x10>)
 80050ee:	f004 f8f7 	bl	80092e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20016058 	.word	0x20016058

080050fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005100:	4802      	ldr	r0, [pc, #8]	; (800510c <TIM6_DAC_IRQHandler+0x10>)
 8005102:	f006 f846 	bl	800b192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20015fd8 	.word	0x20015fd8

08005110 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005114:	4802      	ldr	r0, [pc, #8]	; (8005120 <TIM7_IRQHandler+0x10>)
 8005116:	f006 f83c 	bl	800b192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	2001617c 	.word	0x2001617c

08005124 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <DMA2_Stream2_IRQHandler+0x10>)
 800512a:	f001 fbc3 	bl	80068b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	2001611c 	.word	0x2001611c

08005138 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <DMA2_Stream3_IRQHandler+0x10>)
 800513e:	f001 fbb9 	bl	80068b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20015c44 	.word	0x20015c44

0800514c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005150:	4802      	ldr	r0, [pc, #8]	; (800515c <DMA2_Stream6_IRQHandler+0x10>)
 8005152:	f001 fbaf 	bl	80068b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20015f78 	.word	0x20015f78

08005160 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e00a      	b.n	8005188 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005172:	f3af 8000 	nop.w
 8005176:	4601      	mov	r1, r0
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	60ba      	str	r2, [r7, #8]
 800517e:	b2ca      	uxtb	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3301      	adds	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	dbf0      	blt.n	8005172 <_read+0x12>
	}

return len;
 8005190:	687b      	ldr	r3, [r7, #4]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <_close>:
	}
	return len;
}

int _close(int file)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
	return -1;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051c2:	605a      	str	r2, [r3, #4]
	return 0;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <_isatty>:

int _isatty(int file)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
	return 1;
 80051da:	2301      	movs	r3, #1
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	return 0;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800520c:	4a14      	ldr	r2, [pc, #80]	; (8005260 <_sbrk+0x5c>)
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <_sbrk+0x60>)
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005218:	4b13      	ldr	r3, [pc, #76]	; (8005268 <_sbrk+0x64>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <_sbrk+0x64>)
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <_sbrk+0x68>)
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <_sbrk+0x64>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005234:	f00c ffd2 	bl	80121dc <__errno>
 8005238:	4602      	mov	r2, r0
 800523a:	230c      	movs	r3, #12
 800523c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e009      	b.n	8005258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <_sbrk+0x64>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <_sbrk+0x64>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	4a05      	ldr	r2, [pc, #20]	; (8005268 <_sbrk+0x64>)
 8005254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20050000 	.word	0x20050000
 8005264:	00000400 	.word	0x00000400
 8005268:	20000234 	.word	0x20000234
 800526c:	20018238 	.word	0x20018238

08005270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005274:	4b08      	ldr	r3, [pc, #32]	; (8005298 <SystemInit+0x28>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	4a07      	ldr	r2, [pc, #28]	; (8005298 <SystemInit+0x28>)
 800527c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <SystemInit+0x28>)
 8005286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800528a:	609a      	str	r2, [r3, #8]
#endif
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <batteryLowMode>:
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
Odometry odometry(&encoder, &imu, &velocity_ctrl);

void batteryLowMode()
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
	lcd_clear();
 80052a0:	f7fb fefe 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80052a4:	2100      	movs	r1, #0
 80052a6:	2000      	movs	r0, #0
 80052a8:	f7fb ff0a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80052ac:	4814      	ldr	r0, [pc, #80]	; (8005300 <batteryLowMode+0x64>)
 80052ae:	f7fb ff31 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80052b2:	2101      	movs	r1, #1
 80052b4:	2000      	movs	r0, #0
 80052b6:	f7fb ff03 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80052ba:	4812      	ldr	r0, [pc, #72]	; (8005304 <batteryLowMode+0x68>)
 80052bc:	f7fb ff2a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80052c0:	2152      	movs	r1, #82	; 0x52
 80052c2:	4811      	ldr	r0, [pc, #68]	; (8005308 <batteryLowMode+0x6c>)
 80052c4:	f7fc fd7c 	bl	8001dc0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80052c8:	2064      	movs	r0, #100	; 0x64
 80052ca:	f000 fc93 	bl	8005bf4 <HAL_Delay>
		led.fullColor('Y');
 80052ce:	2159      	movs	r1, #89	; 0x59
 80052d0:	480d      	ldr	r0, [pc, #52]	; (8005308 <batteryLowMode+0x6c>)
 80052d2:	f7fc fd75 	bl	8001dc0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80052d6:	2064      	movs	r0, #100	; 0x64
 80052d8:	f000 fc8c 	bl	8005bf4 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80052dc:	480b      	ldr	r0, [pc, #44]	; (800530c <batteryLowMode+0x70>)
 80052de:	f7fc fd0b 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0e6      	beq.n	80052c0 <batteryLowMode+0x24>
			HAL_Delay(500);
 80052f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052f6:	f000 fc7d 	bl	8005bf4 <HAL_Delay>
			break;
 80052fa:	bf00      	nop
		}
	}
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08017148 	.word	0x08017148
 8005304:	08017150 	.word	0x08017150
 8005308:	20000540 	.word	0x20000540
 800530c:	20000534 	.word	0x20000534

08005310 <cppInit>:

void cppInit(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
	lcd_init();
 8005314:	f7fb fe80 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005318:	4831      	ldr	r0, [pc, #196]	; (80053e0 <cppInit+0xd0>)
 800531a:	f7fd fe20 	bl	8002f5e <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800531e:	2064      	movs	r0, #100	; 0x64
 8005320:	f000 fc68 	bl	8005bf4 <HAL_Delay>
	power_sensor.updateValues();
 8005324:	482e      	ldr	r0, [pc, #184]	; (80053e0 <cppInit+0xd0>)
 8005326:	f7fd fe2b 	bl	8002f80 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800532a:	482d      	ldr	r0, [pc, #180]	; (80053e0 <cppInit+0xd0>)
 800532c:	f7fd fe54 	bl	8002fd8 <_ZN11PowerSensor12butteryCheckEv>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <cppInit+0x2a>
 8005336:	f7ff ffb1 	bl	800529c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800533a:	482a      	ldr	r0, [pc, #168]	; (80053e4 <cppInit+0xd4>)
 800533c:	f7fd fb0e 	bl	800295c <_ZN6Logger10sdCardInitEv>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <cppInit+0x46>
		led.fullColor('G');
 8005346:	2147      	movs	r1, #71	; 0x47
 8005348:	4827      	ldr	r0, [pc, #156]	; (80053e8 <cppInit+0xd8>)
 800534a:	f7fc fd39 	bl	8001dc0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800534e:	2064      	movs	r0, #100	; 0x64
 8005350:	f000 fc50 	bl	8005bf4 <HAL_Delay>
 8005354:	e006      	b.n	8005364 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005356:	2152      	movs	r1, #82	; 0x52
 8005358:	4823      	ldr	r0, [pc, #140]	; (80053e8 <cppInit+0xd8>)
 800535a:	f7fc fd31 	bl	8001dc0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800535e:	2064      	movs	r0, #100	; 0x64
 8005360:	f000 fc48 	bl	8005bf4 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005364:	4821      	ldr	r0, [pc, #132]	; (80053ec <cppInit+0xdc>)
 8005366:	f7fc fe87 	bl	8002078 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800536a:	4821      	ldr	r0, [pc, #132]	; (80053f0 <cppInit+0xe0>)
 800536c:	f7fd fc28 	bl	8002bc0 <_ZN5Motor4initEv>
	encoder.init();
 8005370:	4820      	ldr	r0, [pc, #128]	; (80053f4 <cppInit+0xe4>)
 8005372:	f7fb ff11 	bl	8001198 <_ZN7Encoder4initEv>
	imu.init();
 8005376:	4820      	ldr	r0, [pc, #128]	; (80053f8 <cppInit+0xe8>)
 8005378:	f7fc fb42 	bl	8001a00 <_ZN3IMU4initEv>

	line_sensor.calibration();
 800537c:	481b      	ldr	r0, [pc, #108]	; (80053ec <cppInit+0xdc>)
 800537e:	f7fc ff71 	bl	8002264 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005386:	f000 fc35 	bl	8005bf4 <HAL_Delay>

	led.fullColor('M');
 800538a:	214d      	movs	r1, #77	; 0x4d
 800538c:	4816      	ldr	r0, [pc, #88]	; (80053e8 <cppInit+0xd8>)
 800538e:	f7fc fd17 	bl	8001dc0 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005392:	4819      	ldr	r0, [pc, #100]	; (80053f8 <cppInit+0xe8>)
 8005394:	f7fc fbb0 	bl	8001af8 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005398:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80053fc <cppInit+0xec>
 800539c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005400 <cppInit+0xf0>
 80053a0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005404 <cppInit+0xf4>
 80053a4:	4818      	ldr	r0, [pc, #96]	; (8005408 <cppInit+0xf8>)
 80053a6:	f7fd fa23 	bl	80027f0 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 80053aa:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80053fc <cppInit+0xec>
 80053ae:	eddf 0a13 	vldr	s1, [pc, #76]	; 80053fc <cppInit+0xec>
 80053b2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80053fc <cppInit+0xec>
 80053b6:	4815      	ldr	r0, [pc, #84]	; (800540c <cppInit+0xfc>)
 80053b8:	f7fe f8e6 	bl	8003588 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 80053bc:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80053fc <cppInit+0xec>
 80053c0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80053fc <cppInit+0xec>
 80053c4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80053fc <cppInit+0xec>
 80053c8:	4810      	ldr	r0, [pc, #64]	; (800540c <cppInit+0xfc>)
 80053ca:	f7fe f8f6 	bl	80035ba <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 80053ce:	4809      	ldr	r0, [pc, #36]	; (80053f4 <cppInit+0xe4>)
 80053d0:	f7fb ffce 	bl	8001370 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80053d4:	480e      	ldr	r0, [pc, #56]	; (8005410 <cppInit+0x100>)
 80053d6:	f7fd fdac 	bl	8002f32 <_ZN8Odometry13clearPotitionEv>

}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000544 	.word	0x20000544
 80053e4:	20000570 	.word	0x20000570
 80053e8:	20000540 	.word	0x20000540
 80053ec:	20000238 	.word	0x20000238
 80053f0:	2000053c 	.word	0x2000053c
 80053f4:	20013628 	.word	0x20013628
 80053f8:	20000550 	.word	0x20000550
 80053fc:	00000000 	.word	0x00000000
 8005400:	360637bd 	.word	0x360637bd
 8005404:	3a03126f 	.word	0x3a03126f
 8005408:	20013678 	.word	0x20013678
 800540c:	20013640 	.word	0x20013640
 8005410:	200136d4 	.word	0x200136d4
 8005414:	00000000 	.word	0x00000000

08005418 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005418:	b598      	push	{r3, r4, r7, lr}
 800541a:	ed2d 8b02 	vpush	{d8}
 800541e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005420:	482b      	ldr	r0, [pc, #172]	; (80054d0 <cppFlip1ms+0xb8>)
 8005422:	f7fc fe87 	bl	8002134 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005426:	482b      	ldr	r0, [pc, #172]	; (80054d4 <cppFlip1ms+0xbc>)
 8005428:	f7fc fafe 	bl	8001a28 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 800542c:	482a      	ldr	r0, [pc, #168]	; (80054d8 <cppFlip1ms+0xc0>)
 800542e:	f7fb fed3 	bl	80011d8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005432:	482a      	ldr	r0, [pc, #168]	; (80054dc <cppFlip1ms+0xc4>)
 8005434:	f7fd fa14 	bl	8002860 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005438:	4829      	ldr	r0, [pc, #164]	; (80054e0 <cppFlip1ms+0xc8>)
 800543a:	f7fe f8d7 	bl	80035ec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800543e:	4829      	ldr	r0, [pc, #164]	; (80054e4 <cppFlip1ms+0xcc>)
 8005440:	f7fd fd6c 	bl	8002f1c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005444:	4828      	ldr	r0, [pc, #160]	; (80054e8 <cppFlip1ms+0xd0>)
 8005446:	f7fd fbcd 	bl	8002be4 <_ZN5Motor9motorCtrlEv>

	if(encoder.getTotalDistance() >= 10){
 800544a:	4823      	ldr	r0, [pc, #140]	; (80054d8 <cppFlip1ms+0xc0>)
 800544c:	f7fb ff81 	bl	8001352 <_ZN7Encoder16getTotalDistanceEv>
 8005450:	eeb0 7a40 	vmov.f32	s14, s0
 8005454:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005460:	bfac      	ite	ge
 8005462:	2301      	movge	r3, #1
 8005464:	2300      	movlt	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d022      	beq.n	80054b2 <cppFlip1ms+0x9a>
		logger.storeDistanceAndTheta(encoder.getTotalDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
 800546c:	481a      	ldr	r0, [pc, #104]	; (80054d8 <cppFlip1ms+0xc0>)
 800546e:	f7fb ff70 	bl	8001352 <_ZN7Encoder16getTotalDistanceEv>
 8005472:	eeb0 8a40 	vmov.f32	s16, s0
 8005476:	481a      	ldr	r0, [pc, #104]	; (80054e0 <cppFlip1ms+0xc8>)
 8005478:	f7fe f8fa 	bl	8003670 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 800547c:	ee10 3a10 	vmov	r3, s0
 8005480:	4618      	mov	r0, r3
 8005482:	f7fb f879 	bl	8000578 <__aeabi_f2d>
 8005486:	a310      	add	r3, pc, #64	; (adr r3, 80054c8 <cppFlip1ms+0xb0>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fb f8cc 	bl	8000628 <__aeabi_dmul>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4618      	mov	r0, r3
 8005496:	4621      	mov	r1, r4
 8005498:	f7fb fbbe 	bl	8000c18 <__aeabi_d2f>
 800549c:	4603      	mov	r3, r0
 800549e:	ee00 3a90 	vmov	s1, r3
 80054a2:	eeb0 0a48 	vmov.f32	s0, s16
 80054a6:	4811      	ldr	r0, [pc, #68]	; (80054ec <cppFlip1ms+0xd4>)
 80054a8:	f7fd fad8 	bl	8002a5c <_ZN6Logger21storeDistanceAndThetaEff>
		encoder.clearTotalCnt();
 80054ac:	480a      	ldr	r0, [pc, #40]	; (80054d8 <cppFlip1ms+0xc0>)
 80054ae:	f7fb ff8f 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
	}

	encoder.clearCnt();
 80054b2:	4809      	ldr	r0, [pc, #36]	; (80054d8 <cppFlip1ms+0xc0>)
 80054b4:	f7fb ff6a 	bl	800138c <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	ecbd 8b02 	vpop	{d8}
 80054c0:	bd98      	pop	{r3, r4, r7, pc}
 80054c2:	bf00      	nop
 80054c4:	f3af 8000 	nop.w
 80054c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80054cc:	3f50624d 	.word	0x3f50624d
 80054d0:	20000238 	.word	0x20000238
 80054d4:	20000550 	.word	0x20000550
 80054d8:	20013628 	.word	0x20013628
 80054dc:	20013678 	.word	0x20013678
 80054e0:	20013640 	.word	0x20013640
 80054e4:	200136d4 	.word	0x200136d4
 80054e8:	2000053c 	.word	0x2000053c
 80054ec:	20000570 	.word	0x20000570

080054f0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80054f4:	4802      	ldr	r0, [pc, #8]	; (8005500 <cppFlip100ns+0x10>)
 80054f6:	f7fc fdcf 	bl	8002098 <_ZN10LineSensor17storeSensorValuesEv>
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000238 	.word	0x20000238

08005504 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <cppFlip10ms+0x18>)
 800550a:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 800550e:	eeb0 0a67 	vmov.f32	s0, s15
 8005512:	4803      	ldr	r0, [pc, #12]	; (8005520 <cppFlip10ms+0x1c>)
 8005514:	f7fd fa6a 	bl	80029ec <_ZN6Logger8storeLogEf>
	//logger.storeDistanceAndTheta(encoder.getDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000238 	.word	0x20000238
 8005520:	20000570 	.word	0x20000570

08005524 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	4619      	mov	r1, r3
 8005532:	4803      	ldr	r0, [pc, #12]	; (8005540 <cppExit+0x1c>)
 8005534:	f7fd fddc 	bl	80030f0 <_ZN10SideSensor12updateStatusEt>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000530 	.word	0x20000530

08005544 <cppLoop>:

void cppLoop(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 800554a:	48a8      	ldr	r0, [pc, #672]	; (80057ec <cppLoop+0x2a8>)
 800554c:	f7fd fd76 	bl	800303c <_ZN12RotarySwitch8getValueEv>
 8005550:	4603      	mov	r3, r0
 8005552:	2b0f      	cmp	r3, #15
 8005554:	f200 822c 	bhi.w	80059b0 <cppLoop+0x46c>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <cppLoop+0x1c>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	080055a1 	.word	0x080055a1
 8005564:	080055c3 	.word	0x080055c3
 8005568:	0800564b 	.word	0x0800564b
 800556c:	080056a7 	.word	0x080056a7
 8005570:	0800575f 	.word	0x0800575f
 8005574:	0800583d 	.word	0x0800583d
 8005578:	080058ff 	.word	0x080058ff
 800557c:	080059b1 	.word	0x080059b1
 8005580:	080059b1 	.word	0x080059b1
 8005584:	080059b1 	.word	0x080059b1
 8005588:	080059b1 	.word	0x080059b1
 800558c:	080059b1 	.word	0x080059b1
 8005590:	080059b1 	.word	0x080059b1
 8005594:	080059b1 	.word	0x080059b1
 8005598:	080059b1 	.word	0x080059b1
 800559c:	080059b1 	.word	0x080059b1

	case 0:
		lcd_clear();
 80055a0:	f7fb fd7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80055a4:	2100      	movs	r1, #0
 80055a6:	2000      	movs	r0, #0
 80055a8:	f7fb fd8a 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 80055ac:	4890      	ldr	r0, [pc, #576]	; (80057f0 <cppLoop+0x2ac>)
 80055ae:	f7fb fdb1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80055b2:	2101      	movs	r1, #1
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fb fd83 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 80055ba:	488e      	ldr	r0, [pc, #568]	; (80057f4 <cppLoop+0x2b0>)
 80055bc:	f7fb fdaa 	bl	8001114 <lcd_printf>
		break;
 80055c0:	e203      	b.n	80059ca <cppLoop+0x486>

	case 1:
		lcd_clear();
 80055c2:	f7fb fd6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80055c6:	2100      	movs	r1, #0
 80055c8:	2000      	movs	r0, #0
 80055ca:	f7fb fd79 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 80055ce:	488a      	ldr	r0, [pc, #552]	; (80057f8 <cppLoop+0x2b4>)
 80055d0:	f7fb fda0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80055d4:	2101      	movs	r1, #1
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7fb fd72 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 80055dc:	4887      	ldr	r0, [pc, #540]	; (80057fc <cppLoop+0x2b8>)
 80055de:	f7fb fd99 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80055e2:	4887      	ldr	r0, [pc, #540]	; (8005800 <cppLoop+0x2bc>)
 80055e4:	f7fc fb88 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 81dd 	beq.w	80059b4 <cppLoop+0x470>
			HAL_Delay(500);
 80055fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055fe:	f000 faf9 	bl	8005bf4 <HAL_Delay>

			logger.start();
 8005602:	4880      	ldr	r0, [pc, #512]	; (8005804 <cppLoop+0x2c0>)
 8005604:	f7fd faab 	bl	8002b5e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005608:	487f      	ldr	r0, [pc, #508]	; (8005808 <cppLoop+0x2c4>)
 800560a:	f7fe f805 	bl	8003618 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 800560e:	eddf 0a7f 	vldr	s1, [pc, #508]	; 800580c <cppLoop+0x2c8>
 8005612:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800580c <cppLoop+0x2c8>
 8005616:	487c      	ldr	r0, [pc, #496]	; (8005808 <cppLoop+0x2c4>)
 8005618:	f7fd ffa2 	bl	8003560 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	2101      	movs	r1, #1
 8005622:	487b      	ldr	r0, [pc, #492]	; (8005810 <cppLoop+0x2cc>)
 8005624:	f7fc fc88 	bl	8001f38 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005628:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800562c:	f000 fae2 	bl	8005bf4 <HAL_Delay>

			velocity_ctrl.stop();
 8005630:	4875      	ldr	r0, [pc, #468]	; (8005808 <cppLoop+0x2c4>)
 8005632:	f7fe f801 	bl	8003638 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005636:	f04f 32ff 	mov.w	r2, #4294967295
 800563a:	2100      	movs	r1, #0
 800563c:	4874      	ldr	r0, [pc, #464]	; (8005810 <cppLoop+0x2cc>)
 800563e:	f7fc fc7b 	bl	8001f38 <_ZN3LED2LREaa>

			logger.stop();
 8005642:	4870      	ldr	r0, [pc, #448]	; (8005804 <cppLoop+0x2c0>)
 8005644:	f7fd fa9b 	bl	8002b7e <_ZN6Logger4stopEv>
		}

		break;
 8005648:	e1b4      	b.n	80059b4 <cppLoop+0x470>

	case 2:
		lcd_clear();
 800564a:	f7fb fd29 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800564e:	2100      	movs	r1, #0
 8005650:	2000      	movs	r0, #0
 8005652:	f7fb fd35 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005656:	486f      	ldr	r0, [pc, #444]	; (8005814 <cppLoop+0x2d0>)
 8005658:	f7fb fd5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800565c:	2101      	movs	r1, #1
 800565e:	2000      	movs	r0, #0
 8005660:	f7fb fd2e 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005664:	486c      	ldr	r0, [pc, #432]	; (8005818 <cppLoop+0x2d4>)
 8005666:	f7fb fd55 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800566a:	4865      	ldr	r0, [pc, #404]	; (8005800 <cppLoop+0x2bc>)
 800566c:	f7fc fb44 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 8005670:	4603      	mov	r3, r0
 8005672:	2b02      	cmp	r3, #2
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 819b 	beq.w	80059b8 <cppLoop+0x474>
			led.LR(1, -1);
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	2101      	movs	r1, #1
 8005688:	4861      	ldr	r0, [pc, #388]	; (8005810 <cppLoop+0x2cc>)
 800568a:	f7fc fc55 	bl	8001f38 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 800568e:	4a63      	ldr	r2, [pc, #396]	; (800581c <cppLoop+0x2d8>)
 8005690:	4963      	ldr	r1, [pc, #396]	; (8005820 <cppLoop+0x2dc>)
 8005692:	485c      	ldr	r0, [pc, #368]	; (8005804 <cppLoop+0x2c0>)
 8005694:	f7fd fa2c 	bl	8002af0 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	2100      	movs	r1, #0
 800569e:	485c      	ldr	r0, [pc, #368]	; (8005810 <cppLoop+0x2cc>)
 80056a0:	f7fc fc4a 	bl	8001f38 <_ZN3LED2LREaa>
		}
		break;
 80056a4:	e188      	b.n	80059b8 <cppLoop+0x474>

	case 3:
		led.fullColor('C');
 80056a6:	2143      	movs	r1, #67	; 0x43
 80056a8:	4859      	ldr	r0, [pc, #356]	; (8005810 <cppLoop+0x2cc>)
 80056aa:	f7fc fb89 	bl	8001dc0 <_ZN3LED9fullColorEc>

		lcd_clear();
 80056ae:	f7fb fcf7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80056b2:	2100      	movs	r1, #0
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7fb fd03 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80056ba:	485a      	ldr	r0, [pc, #360]	; (8005824 <cppLoop+0x2e0>)
 80056bc:	f7fb fd2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80056c0:	2101      	movs	r1, #1
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fb fcfc 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80056c8:	4857      	ldr	r0, [pc, #348]	; (8005828 <cppLoop+0x2e4>)
 80056ca:	f7fb fd23 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80056ce:	484c      	ldr	r0, [pc, #304]	; (8005800 <cppLoop+0x2bc>)
 80056d0:	f7fc fb12 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 816b 	beq.w	80059bc <cppLoop+0x478>
			led.LR(-1, 1);
 80056e6:	2201      	movs	r2, #1
 80056e8:	f04f 31ff 	mov.w	r1, #4294967295
 80056ec:	4848      	ldr	r0, [pc, #288]	; (8005810 <cppLoop+0x2cc>)
 80056ee:	f7fc fc23 	bl	8001f38 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80056f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056f6:	f000 fa7d 	bl	8005bf4 <HAL_Delay>

			logger.start();
 80056fa:	4842      	ldr	r0, [pc, #264]	; (8005804 <cppLoop+0x2c0>)
 80056fc:	f7fd fa2f 	bl	8002b5e <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005700:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800582c <cppLoop+0x2e8>
 8005704:	484a      	ldr	r0, [pc, #296]	; (8005830 <cppLoop+0x2ec>)
 8005706:	f7fd f88c 	bl	8002822 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800570a:	4849      	ldr	r0, [pc, #292]	; (8005830 <cppLoop+0x2ec>)
 800570c:	f7fd f8e0 	bl	80028d0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005710:	f241 3088 	movw	r0, #5000	; 0x1388
 8005714:	f000 fa6e 	bl	8005bf4 <HAL_Delay>

			logger.stop();
 8005718:	483a      	ldr	r0, [pc, #232]	; (8005804 <cppLoop+0x2c0>)
 800571a:	f7fd fa30 	bl	8002b7e <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 800571e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800582c <cppLoop+0x2e8>
 8005722:	4843      	ldr	r0, [pc, #268]	; (8005830 <cppLoop+0x2ec>)
 8005724:	f7fd f87d 	bl	8002822 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005728:	4841      	ldr	r0, [pc, #260]	; (8005830 <cppLoop+0x2ec>)
 800572a:	f7fd f8e1 	bl	80028f0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 800572e:	f04f 32ff 	mov.w	r2, #4294967295
 8005732:	2101      	movs	r1, #1
 8005734:	4836      	ldr	r0, [pc, #216]	; (8005810 <cppLoop+0x2cc>)
 8005736:	f7fc fbff 	bl	8001f38 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 800573a:	4a3e      	ldr	r2, [pc, #248]	; (8005834 <cppLoop+0x2f0>)
 800573c:	4938      	ldr	r1, [pc, #224]	; (8005820 <cppLoop+0x2dc>)
 800573e:	4831      	ldr	r0, [pc, #196]	; (8005804 <cppLoop+0x2c0>)
 8005740:	f7fd f9d6 	bl	8002af0 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	2100      	movs	r1, #0
 800574a:	4831      	ldr	r0, [pc, #196]	; (8005810 <cppLoop+0x2cc>)
 800574c:	f7fc fbf4 	bl	8001f38 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005750:	2200      	movs	r2, #0
 8005752:	f04f 31ff 	mov.w	r1, #4294967295
 8005756:	482e      	ldr	r0, [pc, #184]	; (8005810 <cppLoop+0x2cc>)
 8005758:	f7fc fbee 	bl	8001f38 <_ZN3LED2LREaa>
		}

		break;
 800575c:	e12e      	b.n	80059bc <cppLoop+0x478>

	case 4:
		led.fullColor('M');
 800575e:	214d      	movs	r1, #77	; 0x4d
 8005760:	482b      	ldr	r0, [pc, #172]	; (8005810 <cppLoop+0x2cc>)
 8005762:	f7fc fb2d 	bl	8001dc0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005766:	f7fb fc9b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800576a:	2100      	movs	r1, #0
 800576c:	2000      	movs	r0, #0
 800576e:	f7fb fca7 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005772:	4831      	ldr	r0, [pc, #196]	; (8005838 <cppLoop+0x2f4>)
 8005774:	f7fb fcce 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005778:	2101      	movs	r1, #1
 800577a:	2000      	movs	r0, #0
 800577c:	f7fb fca0 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005780:	4829      	ldr	r0, [pc, #164]	; (8005828 <cppLoop+0x2e4>)
 8005782:	f7fb fcc7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005786:	481e      	ldr	r0, [pc, #120]	; (8005800 <cppLoop+0x2bc>)
 8005788:	f7fc fab6 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 800578c:	4603      	mov	r3, r0
 800578e:	2b02      	cmp	r3, #2
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8111 	beq.w	80059c0 <cppLoop+0x47c>
			led.LR(-1, 1);
 800579e:	2201      	movs	r2, #1
 80057a0:	f04f 31ff 	mov.w	r1, #4294967295
 80057a4:	481a      	ldr	r0, [pc, #104]	; (8005810 <cppLoop+0x2cc>)
 80057a6:	f7fc fbc7 	bl	8001f38 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80057aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ae:	f000 fa21 	bl	8005bf4 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80057b2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800582c <cppLoop+0x2e8>
 80057b6:	481e      	ldr	r0, [pc, #120]	; (8005830 <cppLoop+0x2ec>)
 80057b8:	f7fd f842 	bl	8002840 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80057bc:	4812      	ldr	r0, [pc, #72]	; (8005808 <cppLoop+0x2c4>)
 80057be:	f7fd ff2b 	bl	8003618 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80057c2:	481b      	ldr	r0, [pc, #108]	; (8005830 <cppLoop+0x2ec>)
 80057c4:	f7fd f884 	bl	80028d0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80057c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80057cc:	f000 fa12 	bl	8005bf4 <HAL_Delay>

			line_trace.stop();
 80057d0:	4817      	ldr	r0, [pc, #92]	; (8005830 <cppLoop+0x2ec>)
 80057d2:	f7fd f88d 	bl	80028f0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80057d6:	480c      	ldr	r0, [pc, #48]	; (8005808 <cppLoop+0x2c4>)
 80057d8:	f7fd ff2e 	bl	8003638 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80057dc:	2200      	movs	r2, #0
 80057de:	f04f 31ff 	mov.w	r1, #4294967295
 80057e2:	480b      	ldr	r0, [pc, #44]	; (8005810 <cppLoop+0x2cc>)
 80057e4:	f7fc fba8 	bl	8001f38 <_ZN3LED2LREaa>
		}
		break;
 80057e8:	e0ea      	b.n	80059c0 <cppLoop+0x47c>
 80057ea:	bf00      	nop
 80057ec:	20000538 	.word	0x20000538
 80057f0:	08017154 	.word	0x08017154
 80057f4:	08017158 	.word	0x08017158
 80057f8:	08017160 	.word	0x08017160
 80057fc:	0801716c 	.word	0x0801716c
 8005800:	20000534 	.word	0x20000534
 8005804:	20000570 	.word	0x20000570
 8005808:	20013640 	.word	0x20013640
 800580c:	00000000 	.word	0x00000000
 8005810:	20000540 	.word	0x20000540
 8005814:	08017174 	.word	0x08017174
 8005818:	08017178 	.word	0x08017178
 800581c:	08017180 	.word	0x08017180
 8005820:	0801718c 	.word	0x0801718c
 8005824:	0801719c 	.word	0x0801719c
 8005828:	080171a4 	.word	0x080171a4
 800582c:	3dcccccd 	.word	0x3dcccccd
 8005830:	20013678 	.word	0x20013678
 8005834:	080171ac 	.word	0x080171ac
 8005838:	080171b8 	.word	0x080171b8

	case 5:
		led.fullColor('Y');
 800583c:	2159      	movs	r1, #89	; 0x59
 800583e:	4866      	ldr	r0, [pc, #408]	; (80059d8 <cppLoop+0x494>)
 8005840:	f7fc fabe 	bl	8001dc0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005844:	f7fb fc2c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005848:	2100      	movs	r1, #0
 800584a:	2000      	movs	r0, #0
 800584c:	f7fb fc38 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005850:	4862      	ldr	r0, [pc, #392]	; (80059dc <cppLoop+0x498>)
 8005852:	f7fb fc5f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005856:	2101      	movs	r1, #1
 8005858:	2000      	movs	r0, #0
 800585a:	f7fb fc31 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800585e:	4860      	ldr	r0, [pc, #384]	; (80059e0 <cppLoop+0x49c>)
 8005860:	f7fb fc58 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005864:	485f      	ldr	r0, [pc, #380]	; (80059e4 <cppLoop+0x4a0>)
 8005866:	f7fc fa47 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 800586a:	4603      	mov	r3, r0
 800586c:	2b02      	cmp	r3, #2
 800586e:	bf0c      	ite	eq
 8005870:	2301      	moveq	r3, #1
 8005872:	2300      	movne	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 80a4 	beq.w	80059c4 <cppLoop+0x480>
			led.LR(-1, 1);
 800587c:	2201      	movs	r2, #1
 800587e:	f04f 31ff 	mov.w	r1, #4294967295
 8005882:	4855      	ldr	r0, [pc, #340]	; (80059d8 <cppLoop+0x494>)
 8005884:	f7fc fb58 	bl	8001f38 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800588c:	f000 f9b2 	bl	8005bf4 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8005890:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80059e8 <cppLoop+0x4a4>
 8005894:	4855      	ldr	r0, [pc, #340]	; (80059ec <cppLoop+0x4a8>)
 8005896:	f7fc ffc4 	bl	8002822 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800589a:	4854      	ldr	r0, [pc, #336]	; (80059ec <cppLoop+0x4a8>)
 800589c:	f7fd f818 	bl	80028d0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80058a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058a4:	f000 f9a6 	bl	8005bf4 <HAL_Delay>

			led.fullColor('R');
 80058a8:	2152      	movs	r1, #82	; 0x52
 80058aa:	484b      	ldr	r0, [pc, #300]	; (80059d8 <cppLoop+0x494>)
 80058ac:	f7fc fa88 	bl	8001dc0 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80058b0:	484f      	ldr	r0, [pc, #316]	; (80059f0 <cppLoop+0x4ac>)
 80058b2:	f7fb fd8d 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80058b6:	484e      	ldr	r0, [pc, #312]	; (80059f0 <cppLoop+0x4ac>)
 80058b8:	f7fb fd5a 	bl	8001370 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80058bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80058c0:	f000 f998 	bl	8005bf4 <HAL_Delay>

			line_trace.stop();
 80058c4:	4849      	ldr	r0, [pc, #292]	; (80059ec <cppLoop+0x4a8>)
 80058c6:	f7fd f813 	bl	80028f0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80058ca:	494a      	ldr	r1, [pc, #296]	; (80059f4 <cppLoop+0x4b0>)
 80058cc:	484a      	ldr	r0, [pc, #296]	; (80059f8 <cppLoop+0x4b4>)
 80058ce:	f7fb fd93 	bl	80013f8 <user_fopen>
			float d = encoder.getDistance();
 80058d2:	4847      	ldr	r0, [pc, #284]	; (80059f0 <cppLoop+0x4ac>)
 80058d4:	f7fb fd2e 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 80058d8:	eef0 7a40 	vmov.f32	s15, s0
 80058dc:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	2201      	movs	r2, #1
 80058e4:	4619      	mov	r1, r3
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fb fda8 	bl	800143c <sd_write>
			user_fclose();
 80058ec:	f7fb fd96 	bl	800141c <user_fclose>

			led.LR(-1, 0);
 80058f0:	2200      	movs	r2, #0
 80058f2:	f04f 31ff 	mov.w	r1, #4294967295
 80058f6:	4838      	ldr	r0, [pc, #224]	; (80059d8 <cppLoop+0x494>)
 80058f8:	f7fc fb1e 	bl	8001f38 <_ZN3LED2LREaa>
		}

		break;
 80058fc:	e062      	b.n	80059c4 <cppLoop+0x480>

	case 6:
		led.fullColor('C');
 80058fe:	2143      	movs	r1, #67	; 0x43
 8005900:	4835      	ldr	r0, [pc, #212]	; (80059d8 <cppLoop+0x494>)
 8005902:	f7fc fa5d 	bl	8001dc0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005906:	f7fb fbcb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800590a:	2100      	movs	r1, #0
 800590c:	2000      	movs	r0, #0
 800590e:	f7fb fbd7 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8005912:	483a      	ldr	r0, [pc, #232]	; (80059fc <cppLoop+0x4b8>)
 8005914:	f7fb fbfe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005918:	2101      	movs	r1, #1
 800591a:	2000      	movs	r0, #0
 800591c:	f7fb fbd0 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005920:	4837      	ldr	r0, [pc, #220]	; (8005a00 <cppLoop+0x4bc>)
 8005922:	f7fb fbf7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005926:	482f      	ldr	r0, [pc, #188]	; (80059e4 <cppLoop+0x4a0>)
 8005928:	f7fc f9e6 	bl	8001cf8 <_ZN8JoyStick8getValueEv>
 800592c:	4603      	mov	r3, r0
 800592e:	2b02      	cmp	r3, #2
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d045      	beq.n	80059c8 <cppLoop+0x484>
			HAL_Delay(500);
 800593c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005940:	f000 f958 	bl	8005bf4 <HAL_Delay>
			led.LR(-1, 1);
 8005944:	2201      	movs	r2, #1
 8005946:	f04f 31ff 	mov.w	r1, #4294967295
 800594a:	4823      	ldr	r0, [pc, #140]	; (80059d8 <cppLoop+0x494>)
 800594c:	f7fc faf4 	bl	8001f38 <_ZN3LED2LREaa>
			logger.start();
 8005950:	482c      	ldr	r0, [pc, #176]	; (8005a04 <cppLoop+0x4c0>)
 8005952:	f7fd f904 	bl	8002b5e <_ZN6Logger5startEv>

			line_trace.setNormalRatio(0.1);
 8005956:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8005a08 <cppLoop+0x4c4>
 800595a:	4824      	ldr	r0, [pc, #144]	; (80059ec <cppLoop+0x4a8>)
 800595c:	f7fc ff61 	bl	8002822 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005960:	4822      	ldr	r0, [pc, #136]	; (80059ec <cppLoop+0x4a8>)
 8005962:	f7fc ffb5 	bl	80028d0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800596a:	f000 f943 	bl	8005bf4 <HAL_Delay>

			led.fullColor('R');
 800596e:	2152      	movs	r1, #82	; 0x52
 8005970:	4819      	ldr	r0, [pc, #100]	; (80059d8 <cppLoop+0x494>)
 8005972:	f7fc fa25 	bl	8001dc0 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005976:	481e      	ldr	r0, [pc, #120]	; (80059f0 <cppLoop+0x4ac>)
 8005978:	f7fb fd2a 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800597c:	481c      	ldr	r0, [pc, #112]	; (80059f0 <cppLoop+0x4ac>)
 800597e:	f7fb fcf7 	bl	8001370 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005982:	f242 7010 	movw	r0, #10000	; 0x2710
 8005986:	f000 f935 	bl	8005bf4 <HAL_Delay>

			line_trace.stop();
 800598a:	4818      	ldr	r0, [pc, #96]	; (80059ec <cppLoop+0x4a8>)
 800598c:	f7fc ffb0 	bl	80028f0 <_ZN9LineTrace4stopEv>
			logger.stop();
 8005990:	481c      	ldr	r0, [pc, #112]	; (8005a04 <cppLoop+0x4c0>)
 8005992:	f7fd f8f4 	bl	8002b7e <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <cppLoop+0x4c8>)
 8005998:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <cppLoop+0x4cc>)
 800599a:	4918      	ldr	r1, [pc, #96]	; (80059fc <cppLoop+0x4b8>)
 800599c:	4819      	ldr	r0, [pc, #100]	; (8005a04 <cppLoop+0x4c0>)
 800599e:	f7fd f8bb 	bl	8002b18 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	f04f 31ff 	mov.w	r1, #4294967295
 80059a8:	480b      	ldr	r0, [pc, #44]	; (80059d8 <cppLoop+0x494>)
 80059aa:	f7fc fac5 	bl	8001f38 <_ZN3LED2LREaa>
		}

		break;
 80059ae:	e00b      	b.n	80059c8 <cppLoop+0x484>
	case 15:

		break;

	default:
		break;
 80059b0:	bf00      	nop
 80059b2:	e00a      	b.n	80059ca <cppLoop+0x486>
		break;
 80059b4:	bf00      	nop
 80059b6:	e008      	b.n	80059ca <cppLoop+0x486>
		break;
 80059b8:	bf00      	nop
 80059ba:	e006      	b.n	80059ca <cppLoop+0x486>
		break;
 80059bc:	bf00      	nop
 80059be:	e004      	b.n	80059ca <cppLoop+0x486>
		break;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <cppLoop+0x486>
		break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <cppLoop+0x486>
		break;
 80059c8:	bf00      	nop

	}

	HAL_Delay(10);
 80059ca:	200a      	movs	r0, #10
 80059cc:	f000 f912 	bl	8005bf4 <HAL_Delay>

}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000540 	.word	0x20000540
 80059dc:	080171c4 	.word	0x080171c4
 80059e0:	080171cc 	.word	0x080171cc
 80059e4:	20000534 	.word	0x20000534
 80059e8:	00000000 	.word	0x00000000
 80059ec:	20013678 	.word	0x20013678
 80059f0:	20013628 	.word	0x20013628
 80059f4:	080171d8 	.word	0x080171d8
 80059f8:	080171e0 	.word	0x080171e0
 80059fc:	080171ec 	.word	0x080171ec
 8005a00:	080171f8 	.word	0x080171f8
 8005a04:	20000570 	.word	0x20000570
 8005a08:	3dcccccd 	.word	0x3dcccccd
 8005a0c:	08017200 	.word	0x08017200
 8005a10:	08017210 	.word	0x08017210

08005a14 <_Z41__static_initialization_and_destruction_0ii>:
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d12b      	bne.n	8005a7c <_Z41__static_initialization_and_destruction_0ii+0x68>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d126      	bne.n	8005a7c <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 8005a2e:	4815      	ldr	r0, [pc, #84]	; (8005a84 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005a30:	f7fc faba 	bl	8001fa8 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8005a34:	4814      	ldr	r0, [pc, #80]	; (8005a88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005a36:	f7fd fb4f 	bl	80030d8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8005a3a:	4814      	ldr	r0, [pc, #80]	; (8005a8c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005a3c:	f7fc f950 	bl	8001ce0 <_ZN8JoyStickC1Ev>
Motor motor;
 8005a40:	4813      	ldr	r0, [pc, #76]	; (8005a90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005a42:	f7fd f8ac 	bl	8002b9e <_ZN5MotorC1Ev>
IMU imu;
 8005a46:	4813      	ldr	r0, [pc, #76]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005a48:	f7fb ffb2 	bl	80019b0 <_ZN3IMUC1Ev>
Logger logger;
 8005a4c:	4812      	ldr	r0, [pc, #72]	; (8005a98 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005a4e:	f7fc ff67 	bl	8002920 <_ZN6LoggerC1Ev>
Encoder encoder;
 8005a52:	4812      	ldr	r0, [pc, #72]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005a54:	f7fb fb7e 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8005a58:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005a5a:	4a10      	ldr	r2, [pc, #64]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005a5c:	490c      	ldr	r1, [pc, #48]	; (8005a90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005a5e:	4810      	ldr	r0, [pc, #64]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005a60:	f7fd fba4 	bl	80031ac <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005a66:	4a07      	ldr	r2, [pc, #28]	; (8005a84 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005a68:	4909      	ldr	r1, [pc, #36]	; (8005a90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005a6a:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005a6c:	f7fc fd96 	bl	800259c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005a76:	480c      	ldr	r0, [pc, #48]	; (8005aa8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005a78:	f7fd f976 	bl	8002d68 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000238 	.word	0x20000238
 8005a88:	20000530 	.word	0x20000530
 8005a8c:	20000534 	.word	0x20000534
 8005a90:	2000053c 	.word	0x2000053c
 8005a94:	20000550 	.word	0x20000550
 8005a98:	20000570 	.word	0x20000570
 8005a9c:	20013628 	.word	0x20013628
 8005aa0:	20013640 	.word	0x20013640
 8005aa4:	20013678 	.word	0x20013678
 8005aa8:	200136d4 	.word	0x200136d4

08005aac <_GLOBAL__sub_I_line_sensor>:
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f7ff ffad 	bl	8005a14 <_Z41__static_initialization_and_destruction_0ii>
 8005aba:	bd80      	pop	{r7, pc}

08005abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ac2:	e003      	b.n	8005acc <LoopCopyDataInit>

08005ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005aca:	3104      	adds	r1, #4

08005acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005acc:	480b      	ldr	r0, [pc, #44]	; (8005afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ad4:	d3f6      	bcc.n	8005ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ad6:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ad8:	e002      	b.n	8005ae0 <LoopFillZerobss>

08005ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005adc:	f842 3b04 	str.w	r3, [r2], #4

08005ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ae4:	d3f9      	bcc.n	8005ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ae6:	f7ff fbc3 	bl	8005270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aea:	f00c fb7d 	bl	80121e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aee:	f7fd fe8f 	bl	8003810 <main>
  bx  lr    
 8005af2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005af4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005af8:	08017c18 	.word	0x08017c18
  ldr  r0, =_sdata
 8005afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b00:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005b04:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005b08:	20018238 	.word	0x20018238

08005b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b0c:	e7fe      	b.n	8005b0c <ADC_IRQHandler>
	...

08005b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <HAL_Init+0x40>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0d      	ldr	r2, [pc, #52]	; (8005b50 <HAL_Init+0x40>)
 8005b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_Init+0x40>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <HAL_Init+0x40>)
 8005b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <HAL_Init+0x40>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <HAL_Init+0x40>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f000 fd51 	bl	80065e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f000 f808 	bl	8005b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b44:	f7fe fd82 	bl	800464c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40023c00 	.word	0x40023c00

08005b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_InitTick+0x54>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_InitTick+0x58>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	4619      	mov	r1, r3
 8005b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fd69 	bl	800664a <HAL_SYSTICK_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00e      	b.n	8005ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b0f      	cmp	r3, #15
 8005b86:	d80a      	bhi.n	8005b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b88:	2200      	movs	r2, #0
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f000 fd31 	bl	80065f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <HAL_InitTick+0x5c>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	20000008 	.word	0x20000008
 8005bb0:	20000004 	.word	0x20000004

08005bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_IncTick+0x20>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc6:	6013      	str	r3, [r2, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000008 	.word	0x20000008
 8005bd8:	200161bc 	.word	0x200161bc

08005bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return uwTick;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <HAL_GetTick+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	200161bc 	.word	0x200161bc

08005bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bfc:	f7ff ffee 	bl	8005bdc <HAL_GetTick>
 8005c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d005      	beq.n	8005c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_Delay+0x40>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c1a:	bf00      	nop
 8005c1c:	f7ff ffde 	bl	8005bdc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d8f7      	bhi.n	8005c1c <HAL_Delay+0x28>
  {
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000008 	.word	0x20000008

08005c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e033      	b.n	8005cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe fd20 	bl	800469c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d118      	bne.n	8005ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005c7e:	f023 0302 	bic.w	r3, r3, #2
 8005c82:	f043 0202 	orr.w	r2, r3, #2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa5a 	bl	8006144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ca6:	e001      	b.n	8005cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_ADC_Start_DMA+0x1e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0cc      	b.n	8005e78 <HAL_ADC_Start_DMA+0x1b8>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d018      	beq.n	8005d26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d04:	4b5e      	ldr	r3, [pc, #376]	; (8005e80 <HAL_ADC_Start_DMA+0x1c0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a5e      	ldr	r2, [pc, #376]	; (8005e84 <HAL_ADC_Start_DMA+0x1c4>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	0c9a      	lsrs	r2, r3, #18
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005d18:	e002      	b.n	8005d20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f9      	bne.n	8005d1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	f040 80a0 	bne.w	8005e76 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d74:	d106      	bne.n	8005d84 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f023 0206 	bic.w	r2, r3, #6
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	645a      	str	r2, [r3, #68]	; 0x44
 8005d82:	e002      	b.n	8005d8a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d92:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <HAL_ADC_Start_DMA+0x1c8>)
 8005d94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	4a3c      	ldr	r2, [pc, #240]	; (8005e8c <HAL_ADC_Start_DMA+0x1cc>)
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <HAL_ADC_Start_DMA+0x1d0>)
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <HAL_ADC_Start_DMA+0x1d4>)
 8005dac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005db6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005dc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	334c      	adds	r3, #76	; 0x4c
 8005de2:	4619      	mov	r1, r3
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f000 fcea 	bl	80067c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d12a      	bne.n	8005e4e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <HAL_ADC_Start_DMA+0x1d8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d015      	beq.n	8005e2e <HAL_ADC_Start_DMA+0x16e>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <HAL_ADC_Start_DMA+0x1dc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d105      	bne.n	8005e18 <HAL_ADC_Start_DMA+0x158>
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <HAL_ADC_Start_DMA+0x1c8>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <HAL_ADC_Start_DMA+0x1e0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d129      	bne.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <HAL_ADC_Start_DMA+0x1c8>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d823      	bhi.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11c      	bne.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	e013      	b.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <HAL_ADC_Start_DMA+0x1d8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10e      	bne.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e74:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000000 	.word	0x20000000
 8005e84:	431bde83 	.word	0x431bde83
 8005e88:	40012300 	.word	0x40012300
 8005e8c:	0800633d 	.word	0x0800633d
 8005e90:	080063f7 	.word	0x080063f7
 8005e94:	08006413 	.word	0x08006413
 8005e98:	40012000 	.word	0x40012000
 8005e9c:	40012100 	.word	0x40012100
 8005ea0:	40012200 	.word	0x40012200

08005ea4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e113      	b.n	8006124 <HAL_ADC_ConfigChannel+0x244>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d925      	bls.n	8005f58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68d9      	ldr	r1, [r3, #12]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	3b1e      	subs	r3, #30
 8005f22:	2207      	movs	r2, #7
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	400a      	ands	r2, r1
 8005f30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68d9      	ldr	r1, [r3, #12]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4618      	mov	r0, r3
 8005f44:	4603      	mov	r3, r0
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4403      	add	r3, r0
 8005f4a:	3b1e      	subs	r3, #30
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	60da      	str	r2, [r3, #12]
 8005f56:	e022      	b.n	8005f9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6919      	ldr	r1, [r3, #16]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	400a      	ands	r2, r1
 8005f7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6919      	ldr	r1, [r3, #16]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4403      	add	r3, r0
 8005f94:	409a      	lsls	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d824      	bhi.n	8005ff0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3b05      	subs	r3, #5
 8005fb8:	221f      	movs	r2, #31
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	3b05      	subs	r3, #5
 8005fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34
 8005fee:	e04c      	b.n	800608a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b0c      	cmp	r3, #12
 8005ff6:	d824      	bhi.n	8006042 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	3b23      	subs	r3, #35	; 0x23
 800600a:	221f      	movs	r2, #31
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43da      	mvns	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	400a      	ands	r2, r1
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	4618      	mov	r0, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	3b23      	subs	r3, #35	; 0x23
 8006034:	fa00 f203 	lsl.w	r2, r0, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
 8006040:	e023      	b.n	800608a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	3b41      	subs	r3, #65	; 0x41
 8006054:	221f      	movs	r2, #31
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43da      	mvns	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	400a      	ands	r2, r1
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	4618      	mov	r0, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	3b41      	subs	r3, #65	; 0x41
 800607e:	fa00 f203 	lsl.w	r2, r0, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <HAL_ADC_ConfigChannel+0x250>)
 800608c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a28      	ldr	r2, [pc, #160]	; (8006134 <HAL_ADC_ConfigChannel+0x254>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d10f      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x1d8>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b12      	cmp	r3, #18
 800609e:	d10b      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_ADC_ConfigChannel+0x254>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d12b      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_ADC_ConfigChannel+0x258>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <HAL_ADC_ConfigChannel+0x1f4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b11      	cmp	r3, #17
 80060d2:	d122      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a11      	ldr	r2, [pc, #68]	; (8006138 <HAL_ADC_ConfigChannel+0x258>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d111      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_ADC_ConfigChannel+0x25c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_ADC_ConfigChannel+0x260>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	0c9a      	lsrs	r2, r3, #18
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800610c:	e002      	b.n	8006114 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f9      	bne.n	800610e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40012300 	.word	0x40012300
 8006134:	40012000 	.word	0x40012000
 8006138:	10000012 	.word	0x10000012
 800613c:	20000000 	.word	0x20000000
 8006140:	431bde83 	.word	0x431bde83

08006144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800614c:	4b79      	ldr	r3, [pc, #484]	; (8006334 <ADC_Init+0x1f0>)
 800614e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	431a      	orrs	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800619c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	4a58      	ldr	r2, [pc, #352]	; (8006338 <ADC_Init+0x1f4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800620c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6899      	ldr	r1, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	e00f      	b.n	8006242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0202 	bic.w	r2, r2, #2
 8006250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7e1b      	ldrb	r3, [r3, #24]
 800625c:	005a      	lsls	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01b      	beq.n	80062a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800628e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	3b01      	subs	r3, #1
 800629c:	035a      	lsls	r2, r3, #13
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	e007      	b.n	80062b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	051a      	lsls	r2, r3, #20
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80062ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6899      	ldr	r1, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062fa:	025a      	lsls	r2, r3, #9
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6899      	ldr	r1, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	029a      	lsls	r2, r3, #10
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	609a      	str	r2, [r3, #8]
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40012300 	.word	0x40012300
 8006338:	0f000001 	.word	0x0f000001

0800633c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d13c      	bne.n	80063d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d12b      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d127      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006382:	2b00      	cmp	r3, #0
 8006384:	d006      	beq.n	8006394 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0220 	bic.w	r2, r2, #32
 80063a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff fd6b 	bl	8005ea4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80063ce:	e00e      	b.n	80063ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fd75 	bl	8005ecc <HAL_ADC_ErrorCallback>
}
 80063e2:	e004      	b.n	80063ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff fd57 	bl	8005eb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2240      	movs	r2, #64	; 0x40
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	f043 0204 	orr.w	r2, r3, #4
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fd4a 	bl	8005ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <__NVIC_SetPriorityGrouping>:
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <__NVIC_SetPriorityGrouping+0x44>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800646c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006472:	4a04      	ldr	r2, [pc, #16]	; (8006484 <__NVIC_SetPriorityGrouping+0x44>)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	60d3      	str	r3, [r2, #12]
}
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000ed00 	.word	0xe000ed00

08006488 <__NVIC_GetPriorityGrouping>:
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <__NVIC_GetPriorityGrouping+0x18>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	f003 0307 	and.w	r3, r3, #7
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	e000ed00 	.word	0xe000ed00

080064a4 <__NVIC_EnableIRQ>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db0b      	blt.n	80064ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	f003 021f 	and.w	r2, r3, #31
 80064bc:	4907      	ldr	r1, [pc, #28]	; (80064dc <__NVIC_EnableIRQ+0x38>)
 80064be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	2001      	movs	r0, #1
 80064c6:	fa00 f202 	lsl.w	r2, r0, r2
 80064ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	e000e100 	.word	0xe000e100

080064e0 <__NVIC_SetPriority>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db0a      	blt.n	800650a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	490c      	ldr	r1, [pc, #48]	; (800652c <__NVIC_SetPriority+0x4c>)
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	0112      	lsls	r2, r2, #4
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	440b      	add	r3, r1
 8006504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006508:	e00a      	b.n	8006520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4908      	ldr	r1, [pc, #32]	; (8006530 <__NVIC_SetPriority+0x50>)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	3b04      	subs	r3, #4
 8006518:	0112      	lsls	r2, r2, #4
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	440b      	add	r3, r1
 800651e:	761a      	strb	r2, [r3, #24]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000e100 	.word	0xe000e100
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <NVIC_EncodePriority>:
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	bf28      	it	cs
 8006552:	2304      	movcs	r3, #4
 8006554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3304      	adds	r3, #4
 800655a:	2b06      	cmp	r3, #6
 800655c:	d902      	bls.n	8006564 <NVIC_EncodePriority+0x30>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3b03      	subs	r3, #3
 8006562:	e000      	b.n	8006566 <NVIC_EncodePriority+0x32>
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43da      	mvns	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	401a      	ands	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800657c:	f04f 31ff 	mov.w	r1, #4294967295
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	fa01 f303 	lsl.w	r3, r1, r3
 8006586:	43d9      	mvns	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800658c:	4313      	orrs	r3, r2
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <SysTick_Config>:
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ac:	d301      	bcc.n	80065b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80065ae:	2301      	movs	r3, #1
 80065b0:	e00f      	b.n	80065d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <SysTick_Config+0x40>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ba:	210f      	movs	r1, #15
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	f7ff ff8e 	bl	80064e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <SysTick_Config+0x40>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <SysTick_Config+0x40>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	e000e010 	.word	0xe000e010

080065e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff29 	bl	8006440 <__NVIC_SetPriorityGrouping>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006608:	f7ff ff3e 	bl	8006488 <__NVIC_GetPriorityGrouping>
 800660c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7ff ff8e 	bl	8006534 <NVIC_EncodePriority>
 8006618:	4602      	mov	r2, r0
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ff5d 	bl	80064e0 <__NVIC_SetPriority>
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff ff31 	bl	80064a4 <__NVIC_EnableIRQ>
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffa2 	bl	800659c <SysTick_Config>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006670:	f7ff fab4 	bl	8005bdc <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e099      	b.n	80067b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066a0:	e00f      	b.n	80066c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066a2:	f7ff fa9b 	bl	8005bdc <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d908      	bls.n	80066c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e078      	b.n	80067b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e8      	bne.n	80066a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4b38      	ldr	r3, [pc, #224]	; (80067bc <HAL_DMA_Init+0x158>)
 80066dc:	4013      	ands	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2b04      	cmp	r3, #4
 800671a:	d107      	bne.n	800672c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	4313      	orrs	r3, r2
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 0307 	bic.w	r3, r3, #7
 8006742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	2b04      	cmp	r3, #4
 8006754:	d117      	bne.n	8006786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa9d 	bl	8006ca8 <DMA_CheckFifoParam>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2240      	movs	r2, #64	; 0x40
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006782:	2301      	movs	r3, #1
 8006784:	e016      	b.n	80067b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa54 	bl	8006c3c <DMA_CalcBaseAndBitshift>
 8006794:	4603      	mov	r3, r0
 8006796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	223f      	movs	r2, #63	; 0x3f
 800679e:	409a      	lsls	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	f010803f 	.word	0xf010803f

080067c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_DMA_Start_IT+0x26>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e040      	b.n	8006868 <HAL_DMA_Start_IT+0xa8>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d12f      	bne.n	800685a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f9e6 	bl	8006be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006818:	223f      	movs	r2, #63	; 0x3f
 800681a:	409a      	lsls	r2, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0216 	orr.w	r2, r2, #22
 800682e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0208 	orr.w	r2, r2, #8
 8006846:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e005      	b.n	8006866 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006862:	2302      	movs	r3, #2
 8006864:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d004      	beq.n	800688e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e00c      	b.n	80068a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2205      	movs	r2, #5
 8006892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068c0:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <HAL_DMA_IRQHandler+0x258>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a92      	ldr	r2, [pc, #584]	; (8006b10 <HAL_DMA_IRQHandler+0x25c>)
 80068c6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ca:	0a9b      	lsrs	r3, r3, #10
 80068cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068de:	2208      	movs	r2, #8
 80068e0:	409a      	lsls	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01a      	beq.n	8006920 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0204 	bic.w	r2, r2, #4
 8006906:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	2208      	movs	r2, #8
 800690e:	409a      	lsls	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006918:	f043 0201 	orr.w	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	2201      	movs	r2, #1
 8006926:	409a      	lsls	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d012      	beq.n	8006956 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	2201      	movs	r2, #1
 8006944:	409a      	lsls	r2, r3
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	f043 0202 	orr.w	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	2204      	movs	r2, #4
 800695c:	409a      	lsls	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d012      	beq.n	800698c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006978:	2204      	movs	r2, #4
 800697a:	409a      	lsls	r2, r3
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f043 0204 	orr.w	r2, r3, #4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	2210      	movs	r2, #16
 8006992:	409a      	lsls	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d043      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d03c      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ae:	2210      	movs	r2, #16
 80069b0:	409a      	lsls	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d018      	beq.n	80069f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d024      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
 80069e2:	e01f      	b.n	8006a24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
 80069f4:	e016      	b.n	8006a24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d107      	bne.n	8006a14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0208 	bic.w	r2, r2, #8
 8006a12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a28:	2220      	movs	r2, #32
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 808e 	beq.w	8006b52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8086 	beq.w	8006b52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	409a      	lsls	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d136      	bne.n	8006acc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0216 	bic.w	r2, r2, #22
 8006a6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <HAL_DMA_IRQHandler+0x1da>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0208 	bic.w	r2, r2, #8
 8006a9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa2:	223f      	movs	r2, #63	; 0x3f
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d07d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
        }
        return;
 8006aca:	e078      	b.n	8006bbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01c      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d030      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
 8006af8:	e02b      	b.n	8006b52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	e022      	b.n	8006b52 <HAL_DMA_IRQHandler+0x29e>
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10f      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0210 	bic.w	r2, r2, #16
 8006b30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d032      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2205      	movs	r2, #5
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d307      	bcc.n	8006b9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f2      	bne.n	8006b7e <HAL_DMA_IRQHandler+0x2ca>
 8006b98:	e000      	b.n	8006b9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006b9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
 8006bbc:	e000      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006bbe:	bf00      	nop
    }
  }
}
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d108      	bne.n	8006c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c1e:	e007      	b.n	8006c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	3b10      	subs	r3, #16
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d909      	bls.n	8006c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c7c:	e007      	b.n	8006c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	aaaaaaab 	.word	0xaaaaaaab
 8006ca4:	08017290 	.word	0x08017290

08006ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11f      	bne.n	8006d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d855      	bhi.n	8006d74 <DMA_CheckFifoParam+0xcc>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <DMA_CheckFifoParam+0x28>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf3 	.word	0x08006cf3
 8006cd8:	08006ce1 	.word	0x08006ce1
 8006cdc:	08006d75 	.word	0x08006d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d045      	beq.n	8006d78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cf0:	e042      	b.n	8006d78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cfa:	d13f      	bne.n	8006d7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d00:	e03c      	b.n	8006d7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0a:	d121      	bne.n	8006d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d836      	bhi.n	8006d80 <DMA_CheckFifoParam+0xd8>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <DMA_CheckFifoParam+0x70>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d2f 	.word	0x08006d2f
 8006d20:	08006d29 	.word	0x08006d29
 8006d24:	08006d41 	.word	0x08006d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	e02f      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d024      	beq.n	8006d84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d3e:	e021      	b.n	8006d84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d48:	d11e      	bne.n	8006d88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d4e:	e01b      	b.n	8006d88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d902      	bls.n	8006d5c <DMA_CheckFifoParam+0xb4>
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d003      	beq.n	8006d62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d5a:	e018      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e015      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
      break;
 8006d72:	e00b      	b.n	8006d8c <DMA_CheckFifoParam+0xe4>
      break;
 8006d74:	bf00      	nop
 8006d76:	e00a      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e008      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d7c:	bf00      	nop
 8006d7e:	e006      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d80:	bf00      	nop
 8006d82:	e004      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;   
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d8c:	bf00      	nop
    }
  } 
  
  return status; 
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e177      	b.n	80070a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006db8:	2201      	movs	r2, #1
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	f040 8166 	bne.w	80070a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d00b      	beq.n	8006df6 <HAL_GPIO_Init+0x5a>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d007      	beq.n	8006df6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dea:	2b11      	cmp	r3, #17
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b12      	cmp	r3, #18
 8006df4:	d130      	bne.n	8006e58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	2203      	movs	r2, #3
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43db      	mvns	r3, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 0201 	and.w	r2, r3, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	2203      	movs	r2, #3
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d003      	beq.n	8006e98 <HAL_GPIO_Init+0xfc>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b12      	cmp	r3, #18
 8006e96:	d123      	bne.n	8006ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	08da      	lsrs	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3208      	adds	r2, #8
 8006ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	220f      	movs	r2, #15
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	08da      	lsrs	r2, r3, #3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3208      	adds	r2, #8
 8006eda:	69b9      	ldr	r1, [r7, #24]
 8006edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	2203      	movs	r2, #3
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 0203 	and.w	r2, r3, #3
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80c0 	beq.w	80070a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	4b65      	ldr	r3, [pc, #404]	; (80070bc <HAL_GPIO_Init+0x320>)
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	4a64      	ldr	r2, [pc, #400]	; (80070bc <HAL_GPIO_Init+0x320>)
 8006f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f30:	6453      	str	r3, [r2, #68]	; 0x44
 8006f32:	4b62      	ldr	r3, [pc, #392]	; (80070bc <HAL_GPIO_Init+0x320>)
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f3e:	4a60      	ldr	r2, [pc, #384]	; (80070c0 <HAL_GPIO_Init+0x324>)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	3302      	adds	r3, #2
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	220f      	movs	r2, #15
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a57      	ldr	r2, [pc, #348]	; (80070c4 <HAL_GPIO_Init+0x328>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d037      	beq.n	8006fda <HAL_GPIO_Init+0x23e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a56      	ldr	r2, [pc, #344]	; (80070c8 <HAL_GPIO_Init+0x32c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d031      	beq.n	8006fd6 <HAL_GPIO_Init+0x23a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a55      	ldr	r2, [pc, #340]	; (80070cc <HAL_GPIO_Init+0x330>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d02b      	beq.n	8006fd2 <HAL_GPIO_Init+0x236>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a54      	ldr	r2, [pc, #336]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d025      	beq.n	8006fce <HAL_GPIO_Init+0x232>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a53      	ldr	r2, [pc, #332]	; (80070d4 <HAL_GPIO_Init+0x338>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01f      	beq.n	8006fca <HAL_GPIO_Init+0x22e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a52      	ldr	r2, [pc, #328]	; (80070d8 <HAL_GPIO_Init+0x33c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d019      	beq.n	8006fc6 <HAL_GPIO_Init+0x22a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a51      	ldr	r2, [pc, #324]	; (80070dc <HAL_GPIO_Init+0x340>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_GPIO_Init+0x226>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a50      	ldr	r2, [pc, #320]	; (80070e0 <HAL_GPIO_Init+0x344>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00d      	beq.n	8006fbe <HAL_GPIO_Init+0x222>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a4f      	ldr	r2, [pc, #316]	; (80070e4 <HAL_GPIO_Init+0x348>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d007      	beq.n	8006fba <HAL_GPIO_Init+0x21e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a4e      	ldr	r2, [pc, #312]	; (80070e8 <HAL_GPIO_Init+0x34c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d101      	bne.n	8006fb6 <HAL_GPIO_Init+0x21a>
 8006fb2:	2309      	movs	r3, #9
 8006fb4:	e012      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e010      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fba:	2308      	movs	r3, #8
 8006fbc:	e00e      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fbe:	2307      	movs	r3, #7
 8006fc0:	e00c      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	e00a      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fc6:	2305      	movs	r3, #5
 8006fc8:	e008      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fca:	2304      	movs	r3, #4
 8006fcc:	e006      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e004      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e002      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <HAL_GPIO_Init+0x240>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	f002 0203 	and.w	r2, r2, #3
 8006fe2:	0092      	lsls	r2, r2, #2
 8006fe4:	4093      	lsls	r3, r2
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fec:	4934      	ldr	r1, [pc, #208]	; (80070c0 <HAL_GPIO_Init+0x324>)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	3302      	adds	r3, #2
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ffa:	4b3c      	ldr	r3, [pc, #240]	; (80070ec <HAL_GPIO_Init+0x350>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800701e:	4a33      	ldr	r2, [pc, #204]	; (80070ec <HAL_GPIO_Init+0x350>)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007024:	4b31      	ldr	r3, [pc, #196]	; (80070ec <HAL_GPIO_Init+0x350>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	43db      	mvns	r3, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007048:	4a28      	ldr	r2, [pc, #160]	; (80070ec <HAL_GPIO_Init+0x350>)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800704e:	4b27      	ldr	r3, [pc, #156]	; (80070ec <HAL_GPIO_Init+0x350>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	43db      	mvns	r3, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4013      	ands	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <HAL_GPIO_Init+0x350>)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <HAL_GPIO_Init+0x350>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	43db      	mvns	r3, r3
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	4013      	ands	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800709c:	4a13      	ldr	r2, [pc, #76]	; (80070ec <HAL_GPIO_Init+0x350>)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3301      	adds	r3, #1
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b0f      	cmp	r3, #15
 80070ac:	f67f ae84 	bls.w	8006db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070b0:	bf00      	nop
 80070b2:	3724      	adds	r7, #36	; 0x24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40013800 	.word	0x40013800
 80070c4:	40020000 	.word	0x40020000
 80070c8:	40020400 	.word	0x40020400
 80070cc:	40020800 	.word	0x40020800
 80070d0:	40020c00 	.word	0x40020c00
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40021400 	.word	0x40021400
 80070dc:	40021800 	.word	0x40021800
 80070e0:	40021c00 	.word	0x40021c00
 80070e4:	40022000 	.word	0x40022000
 80070e8:	40022400 	.word	0x40022400
 80070ec:	40013c00 	.word	0x40013c00

080070f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e001      	b.n	8007112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	807b      	strh	r3, [r7, #2]
 800712c:	4613      	mov	r3, r2
 800712e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007130:	787b      	ldrb	r3, [r7, #1]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007136:	887a      	ldrh	r2, [r7, #2]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800713c:	e003      	b.n	8007146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800713e:	887b      	ldrh	r3, [r7, #2]
 8007140:	041a      	lsls	r2, r3, #16
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	619a      	str	r2, [r3, #24]
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	4013      	ands	r3, r2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	4618      	mov	r0, r3
 8007174:	f7fc face 	bl	8003714 <HAL_GPIO_EXTI_Callback>
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40013c00 	.word	0x40013c00

08007184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e11f      	b.n	80073d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fd fb28 	bl	8004800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071e8:	f001 f96e 	bl	80084c8 <HAL_RCC_GetPCLK1Freq>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4a7b      	ldr	r2, [pc, #492]	; (80073e0 <HAL_I2C_Init+0x25c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d807      	bhi.n	8007208 <HAL_I2C_Init+0x84>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a7a      	ldr	r2, [pc, #488]	; (80073e4 <HAL_I2C_Init+0x260>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bf94      	ite	ls
 8007200:	2301      	movls	r3, #1
 8007202:	2300      	movhi	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	e006      	b.n	8007216 <HAL_I2C_Init+0x92>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a77      	ldr	r2, [pc, #476]	; (80073e8 <HAL_I2C_Init+0x264>)
 800720c:	4293      	cmp	r3, r2
 800720e:	bf94      	ite	ls
 8007210:	2301      	movls	r3, #1
 8007212:	2300      	movhi	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e0db      	b.n	80073d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4a72      	ldr	r2, [pc, #456]	; (80073ec <HAL_I2C_Init+0x268>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	0c9b      	lsrs	r3, r3, #18
 8007228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4a64      	ldr	r2, [pc, #400]	; (80073e0 <HAL_I2C_Init+0x25c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d802      	bhi.n	8007258 <HAL_I2C_Init+0xd4>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3301      	adds	r3, #1
 8007256:	e009      	b.n	800726c <HAL_I2C_Init+0xe8>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	4a63      	ldr	r2, [pc, #396]	; (80073f0 <HAL_I2C_Init+0x26c>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	099b      	lsrs	r3, r3, #6
 800726a:	3301      	adds	r3, #1
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	430b      	orrs	r3, r1
 8007272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800727e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	4956      	ldr	r1, [pc, #344]	; (80073e0 <HAL_I2C_Init+0x25c>)
 8007288:	428b      	cmp	r3, r1
 800728a:	d80d      	bhi.n	80072a8 <HAL_I2C_Init+0x124>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	1e59      	subs	r1, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	fbb1 f3f3 	udiv	r3, r1, r3
 800729a:	3301      	adds	r3, #1
 800729c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	bf38      	it	cc
 80072a4:	2304      	movcc	r3, #4
 80072a6:	e04f      	b.n	8007348 <HAL_I2C_Init+0x1c4>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d111      	bne.n	80072d4 <HAL_I2C_Init+0x150>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1e58      	subs	r0, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6859      	ldr	r1, [r3, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	440b      	add	r3, r1
 80072be:	fbb0 f3f3 	udiv	r3, r0, r3
 80072c2:	3301      	adds	r3, #1
 80072c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	e012      	b.n	80072fa <HAL_I2C_Init+0x176>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	1e58      	subs	r0, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	0099      	lsls	r1, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ea:	3301      	adds	r3, #1
 80072ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bf0c      	ite	eq
 80072f4:	2301      	moveq	r3, #1
 80072f6:	2300      	movne	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_I2C_Init+0x17e>
 80072fe:	2301      	movs	r3, #1
 8007300:	e022      	b.n	8007348 <HAL_I2C_Init+0x1c4>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10e      	bne.n	8007328 <HAL_I2C_Init+0x1a4>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1e58      	subs	r0, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6859      	ldr	r1, [r3, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	440b      	add	r3, r1
 8007318:	fbb0 f3f3 	udiv	r3, r0, r3
 800731c:	3301      	adds	r3, #1
 800731e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007326:	e00f      	b.n	8007348 <HAL_I2C_Init+0x1c4>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1e58      	subs	r0, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6859      	ldr	r1, [r3, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	0099      	lsls	r1, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	fbb0 f3f3 	udiv	r3, r0, r3
 800733e:	3301      	adds	r3, #1
 8007340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	6809      	ldr	r1, [r1, #0]
 800734c:	4313      	orrs	r3, r2
 800734e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6911      	ldr	r1, [r2, #16]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68d2      	ldr	r2, [r2, #12]
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	430b      	orrs	r3, r1
 800738a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	000186a0 	.word	0x000186a0
 80073e4:	001e847f 	.word	0x001e847f
 80073e8:	003d08ff 	.word	0x003d08ff
 80073ec:	431bde83 	.word	0x431bde83
 80073f0:	10624dd3 	.word	0x10624dd3

080073f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	461a      	mov	r2, r3
 8007400:	460b      	mov	r3, r1
 8007402:	817b      	strh	r3, [r7, #10]
 8007404:	4613      	mov	r3, r2
 8007406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007408:	f7fe fbe8 	bl	8005bdc <HAL_GetTick>
 800740c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b20      	cmp	r3, #32
 8007418:	f040 80e0 	bne.w	80075dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2319      	movs	r3, #25
 8007422:	2201      	movs	r2, #1
 8007424:	4970      	ldr	r1, [pc, #448]	; (80075e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fc58 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007432:	2302      	movs	r3, #2
 8007434:	e0d3      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_I2C_Master_Transmit+0x50>
 8007440:	2302      	movs	r3, #2
 8007442:	e0cc      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d007      	beq.n	800746a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2221      	movs	r2, #33	; 0x21
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2210      	movs	r2, #16
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	893a      	ldrh	r2, [r7, #8]
 800749a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a50      	ldr	r2, [pc, #320]	; (80075ec <HAL_I2C_Master_Transmit+0x1f8>)
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074ac:	8979      	ldrh	r1, [r7, #10]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a3a      	ldr	r2, [r7, #32]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fac2 	bl	8007a3c <I2C_MasterRequestWrite>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e08d      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074c2:	2300      	movs	r3, #0
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074d8:	e066      	b.n	80075a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6a39      	ldr	r1, [r7, #32]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fcd2 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00d      	beq.n	8007506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d107      	bne.n	8007502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e06b      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b04      	cmp	r3, #4
 8007542:	d11b      	bne.n	800757c <HAL_I2C_Master_Transmit+0x188>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	2b00      	cmp	r3, #0
 800754a:	d017      	beq.n	800757c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	6a39      	ldr	r1, [r7, #32]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fcc2 	bl	8007f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	2b04      	cmp	r3, #4
 8007592:	d107      	bne.n	80075a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e01a      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d194      	bne.n	80074da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	e000      	b.n	80075de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	00100002 	.word	0x00100002
 80075ec:	ffff0000 	.word	0xffff0000

080075f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	; 0x30
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	461a      	mov	r2, r3
 80075fc:	460b      	mov	r3, r1
 80075fe:	817b      	strh	r3, [r7, #10]
 8007600:	4613      	mov	r3, r2
 8007602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007604:	f7fe faea 	bl	8005bdc <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b20      	cmp	r3, #32
 8007614:	f040 820b 	bne.w	8007a2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2319      	movs	r3, #25
 800761e:	2201      	movs	r2, #1
 8007620:	497c      	ldr	r1, [pc, #496]	; (8007814 <HAL_I2C_Master_Receive+0x224>)
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fb5a 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
 8007630:	e1fe      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_I2C_Master_Receive+0x50>
 800763c:	2302      	movs	r3, #2
 800763e:	e1f7      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d007      	beq.n	8007666 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2222      	movs	r2, #34	; 0x22
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2210      	movs	r2, #16
 8007682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	893a      	ldrh	r2, [r7, #8]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a5c      	ldr	r2, [pc, #368]	; (8007818 <HAL_I2C_Master_Receive+0x228>)
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80076a8:	8979      	ldrh	r1, [r7, #10]
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fa46 	bl	8007b40 <I2C_MasterRequestRead>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e1b8      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c6:	2300      	movs	r3, #0
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	623b      	str	r3, [r7, #32]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	623b      	str	r3, [r7, #32]
 80076da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e18c      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11b      	bne.n	800772e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e16c      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007732:	2b02      	cmp	r3, #2
 8007734:	d11b      	bne.n	800776e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007756:	2300      	movs	r3, #0
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	e14c      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800777c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007794:	e138      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779a:	2b03      	cmp	r3, #3
 800779c:	f200 80f1 	bhi.w	8007982 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d123      	bne.n	80077f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fbed 	bl	8007f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e139      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077ee:	e10b      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d14e      	bne.n	8007896 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	2200      	movs	r2, #0
 8007800:	4906      	ldr	r1, [pc, #24]	; (800781c <HAL_I2C_Master_Receive+0x22c>)
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fa6a 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e10e      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
 8007812:	bf00      	nop
 8007814:	00100002 	.word	0x00100002
 8007818:	ffff0000 	.word	0xffff0000
 800781c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800782e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007894:	e0b8      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	2200      	movs	r2, #0
 800789e:	4966      	ldr	r1, [pc, #408]	; (8007a38 <HAL_I2C_Master_Receive+0x448>)
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fa1b 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e0bf      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	2200      	movs	r2, #0
 80078fa:	494f      	ldr	r1, [pc, #316]	; (8007a38 <HAL_I2C_Master_Receive+0x448>)
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f9ed 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e091      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007980:	e042      	b.n	8007a08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fb00 	bl	8007f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e04c      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d118      	bne.n	8007a08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f aec2 	bne.w	8007796 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3728      	adds	r7, #40	; 0x28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	00010004 	.word	0x00010004

08007a3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d006      	beq.n	8007a66 <I2C_MasterRequestWrite+0x2a>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d003      	beq.n	8007a66 <I2C_MasterRequestWrite+0x2a>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a64:	d108      	bne.n	8007a78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e00b      	b.n	8007a90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	2b12      	cmp	r3, #18
 8007a7e:	d107      	bne.n	8007a90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f91d 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00d      	beq.n	8007ac4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d103      	bne.n	8007ac0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e035      	b.n	8007b30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007acc:	d108      	bne.n	8007ae0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ace:	897b      	ldrh	r3, [r7, #10]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007adc:	611a      	str	r2, [r3, #16]
 8007ade:	e01b      	b.n	8007b18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ae0:	897b      	ldrh	r3, [r7, #10]
 8007ae2:	11db      	asrs	r3, r3, #7
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f003 0306 	and.w	r3, r3, #6
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f063 030f 	orn	r3, r3, #15
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	490e      	ldr	r1, [pc, #56]	; (8007b38 <I2C_MasterRequestWrite+0xfc>)
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f943 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e010      	b.n	8007b30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b0e:	897b      	ldrh	r3, [r7, #10]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4907      	ldr	r1, [pc, #28]	; (8007b3c <I2C_MasterRequestWrite+0x100>)
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f933 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	00010008 	.word	0x00010008
 8007b3c:	00010002 	.word	0x00010002

08007b40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d006      	beq.n	8007b7a <I2C_MasterRequestRead+0x3a>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d003      	beq.n	8007b7a <I2C_MasterRequestRead+0x3a>
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b78:	d108      	bne.n	8007b8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	e00b      	b.n	8007ba4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	2b11      	cmp	r3, #17
 8007b92:	d107      	bne.n	8007ba4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f893 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bca:	d103      	bne.n	8007bd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e079      	b.n	8007ccc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be0:	d108      	bne.n	8007bf4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007be2:	897b      	ldrh	r3, [r7, #10]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	611a      	str	r2, [r3, #16]
 8007bf2:	e05f      	b.n	8007cb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bf4:	897b      	ldrh	r3, [r7, #10]
 8007bf6:	11db      	asrs	r3, r3, #7
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 0306 	and.w	r3, r3, #6
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f063 030f 	orn	r3, r3, #15
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4930      	ldr	r1, [pc, #192]	; (8007cd4 <I2C_MasterRequestRead+0x194>)
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f8b9 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e054      	b.n	8007ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c22:	897b      	ldrh	r3, [r7, #10]
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4929      	ldr	r1, [pc, #164]	; (8007cd8 <I2C_MasterRequestRead+0x198>)
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f8a9 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e044      	b.n	8007ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f831 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8e:	d103      	bne.n	8007c98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e017      	b.n	8007ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c9c:	897b      	ldrh	r3, [r7, #10]
 8007c9e:	11db      	asrs	r3, r3, #7
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f063 030e 	orn	r3, r3, #14
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4907      	ldr	r1, [pc, #28]	; (8007cd8 <I2C_MasterRequestRead+0x198>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f865 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	00010008 	.word	0x00010008
 8007cd8:	00010002 	.word	0x00010002

08007cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cec:	e025      	b.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf4:	d021      	beq.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf6:	f7fd ff71 	bl	8005bdc <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d302      	bcc.n	8007d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d116      	bne.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e023      	b.n	8007d82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d10d      	bne.n	8007d60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	43da      	mvns	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf0c      	ite	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	2300      	movne	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	e00c      	b.n	8007d7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	43da      	mvns	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bf0c      	ite	eq
 8007d72:	2301      	moveq	r3, #1
 8007d74:	2300      	movne	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d0b6      	beq.n	8007cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d98:	e051      	b.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da8:	d123      	bne.n	8007df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f043 0204 	orr.w	r2, r3, #4
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e046      	b.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d021      	beq.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfa:	f7fd feef 	bl	8005bdc <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d116      	bne.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f043 0220 	orr.w	r2, r3, #32
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e020      	b.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	0c1b      	lsrs	r3, r3, #16
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d10c      	bne.n	8007e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	43da      	mvns	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4013      	ands	r3, r2
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	e00b      	b.n	8007e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	43da      	mvns	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d18d      	bne.n	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e94:	e02d      	b.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f8ce 	bl	8008038 <I2C_IsAcknowledgeFailed>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e02d      	b.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	d021      	beq.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eae:	f7fd fe95 	bl	8005bdc <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d302      	bcc.n	8007ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d116      	bne.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e007      	b.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d1ca      	bne.n	8007e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f16:	e02d      	b.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f88d 	bl	8008038 <I2C_IsAcknowledgeFailed>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e02d      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d021      	beq.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f30:	f7fd fe54 	bl	8005bdc <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d116      	bne.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e007      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d1ca      	bne.n	8007f18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f98:	e042      	b.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d119      	bne.n	8007fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0210 	mvn.w	r2, #16
 8007fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e029      	b.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fdc:	f7fd fdfe 	bl	8005bdc <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d116      	bne.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e007      	b.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	d1b5      	bne.n	8007f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804e:	d11b      	bne.n	8008088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	f043 0204 	orr.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80080a2:	2300      	movs	r3, #0
 80080a4:	603b      	str	r3, [r7, #0]
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <HAL_PWREx_EnableOverDrive+0x90>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <HAL_PWREx_EnableOverDrive+0x90>)
 80080ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6413      	str	r3, [r2, #64]	; 0x40
 80080b2:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_PWREx_EnableOverDrive+0x90>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80080be:	4b1b      	ldr	r3, [pc, #108]	; (800812c <HAL_PWREx_EnableOverDrive+0x94>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080c4:	f7fd fd8a 	bl	8005bdc <HAL_GetTick>
 80080c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080ca:	e009      	b.n	80080e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080cc:	f7fd fd86 	bl	8005bdc <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080da:	d901      	bls.n	80080e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e01f      	b.n	8008120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080e0:	4b13      	ldr	r3, [pc, #76]	; (8008130 <HAL_PWREx_EnableOverDrive+0x98>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ec:	d1ee      	bne.n	80080cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80080ee:	4b11      	ldr	r3, [pc, #68]	; (8008134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080f4:	f7fd fd72 	bl	8005bdc <HAL_GetTick>
 80080f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080fa:	e009      	b.n	8008110 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080fc:	f7fd fd6e 	bl	8005bdc <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800810a:	d901      	bls.n	8008110 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e007      	b.n	8008120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <HAL_PWREx_EnableOverDrive+0x98>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800811c:	d1ee      	bne.n	80080fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40023800 	.word	0x40023800
 800812c:	420e0040 	.word	0x420e0040
 8008130:	40007000 	.word	0x40007000
 8008134:	420e0044 	.word	0x420e0044

08008138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0cc      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800814c:	4b68      	ldr	r3, [pc, #416]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d90c      	bls.n	8008174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815a:	4b65      	ldr	r3, [pc, #404]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008162:	4b63      	ldr	r3, [pc, #396]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d001      	beq.n	8008174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0b8      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d020      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800818c:	4b59      	ldr	r3, [pc, #356]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	4a58      	ldr	r2, [pc, #352]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081a4:	4b53      	ldr	r3, [pc, #332]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4a52      	ldr	r2, [pc, #328]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081b0:	4b50      	ldr	r3, [pc, #320]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	494d      	ldr	r1, [pc, #308]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d044      	beq.n	8008258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d107      	bne.n	80081e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d6:	4b47      	ldr	r3, [pc, #284]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d119      	bne.n	8008216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e07f      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d003      	beq.n	80081f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d107      	bne.n	8008206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e06f      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008206:	4b3b      	ldr	r3, [pc, #236]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e067      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008216:	4b37      	ldr	r3, [pc, #220]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f023 0203 	bic.w	r2, r3, #3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4934      	ldr	r1, [pc, #208]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008224:	4313      	orrs	r3, r2
 8008226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008228:	f7fd fcd8 	bl	8005bdc <HAL_GetTick>
 800822c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822e:	e00a      	b.n	8008246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008230:	f7fd fcd4 	bl	8005bdc <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	f241 3288 	movw	r2, #5000	; 0x1388
 800823e:	4293      	cmp	r3, r2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e04f      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008246:	4b2b      	ldr	r3, [pc, #172]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 020c 	and.w	r2, r3, #12
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	429a      	cmp	r2, r3
 8008256:	d1eb      	bne.n	8008230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008258:	4b25      	ldr	r3, [pc, #148]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d20c      	bcs.n	8008280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008266:	4b22      	ldr	r3, [pc, #136]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800826e:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d001      	beq.n	8008280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e032      	b.n	80082e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800828c:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4916      	ldr	r1, [pc, #88]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	490e      	ldr	r1, [pc, #56]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082be:	f000 f821 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 80082c2:	4601      	mov	r1, r0
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	091b      	lsrs	r3, r3, #4
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	5cd3      	ldrb	r3, [r2, r3]
 80082d2:	fa21 f303 	lsr.w	r3, r1, r3
 80082d6:	4a09      	ldr	r2, [pc, #36]	; (80082fc <HAL_RCC_ClockConfig+0x1c4>)
 80082d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <HAL_RCC_ClockConfig+0x1c8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fd fc38 	bl	8005b54 <HAL_InitTick>

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40023c00 	.word	0x40023c00
 80082f4:	40023800 	.word	0x40023800
 80082f8:	08017278 	.word	0x08017278
 80082fc:	20000000 	.word	0x20000000
 8008300:	20000004 	.word	0x20000004

08008304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800831a:	4b63      	ldr	r3, [pc, #396]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 030c 	and.w	r3, r3, #12
 8008322:	2b04      	cmp	r3, #4
 8008324:	d007      	beq.n	8008336 <HAL_RCC_GetSysClockFreq+0x32>
 8008326:	2b08      	cmp	r3, #8
 8008328:	d008      	beq.n	800833c <HAL_RCC_GetSysClockFreq+0x38>
 800832a:	2b00      	cmp	r3, #0
 800832c:	f040 80b4 	bne.w	8008498 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008330:	4b5e      	ldr	r3, [pc, #376]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008332:	60bb      	str	r3, [r7, #8]
       break;
 8008334:	e0b3      	b.n	800849e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008336:	4b5d      	ldr	r3, [pc, #372]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008338:	60bb      	str	r3, [r7, #8]
      break;
 800833a:	e0b0      	b.n	800849e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833c:	4b5a      	ldr	r3, [pc, #360]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008346:	4b58      	ldr	r3, [pc, #352]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04a      	beq.n	80083e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008352:	4b55      	ldr	r3, [pc, #340]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	f04f 0400 	mov.w	r4, #0
 800835c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	ea03 0501 	and.w	r5, r3, r1
 8008368:	ea04 0602 	and.w	r6, r4, r2
 800836c:	4629      	mov	r1, r5
 800836e:	4632      	mov	r2, r6
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	f04f 0400 	mov.w	r4, #0
 8008378:	0154      	lsls	r4, r2, #5
 800837a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800837e:	014b      	lsls	r3, r1, #5
 8008380:	4619      	mov	r1, r3
 8008382:	4622      	mov	r2, r4
 8008384:	1b49      	subs	r1, r1, r5
 8008386:	eb62 0206 	sbc.w	r2, r2, r6
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	f04f 0400 	mov.w	r4, #0
 8008392:	0194      	lsls	r4, r2, #6
 8008394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008398:	018b      	lsls	r3, r1, #6
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	eb64 0402 	sbc.w	r4, r4, r2
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	00e2      	lsls	r2, r4, #3
 80083aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083ae:	00d9      	lsls	r1, r3, #3
 80083b0:	460b      	mov	r3, r1
 80083b2:	4614      	mov	r4, r2
 80083b4:	195b      	adds	r3, r3, r5
 80083b6:	eb44 0406 	adc.w	r4, r4, r6
 80083ba:	f04f 0100 	mov.w	r1, #0
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	02a2      	lsls	r2, r4, #10
 80083c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80083c8:	0299      	lsls	r1, r3, #10
 80083ca:	460b      	mov	r3, r1
 80083cc:	4614      	mov	r4, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	4621      	mov	r1, r4
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f04f 0400 	mov.w	r4, #0
 80083d8:	461a      	mov	r2, r3
 80083da:	4623      	mov	r3, r4
 80083dc:	f7f8 fc6c 	bl	8000cb8 <__aeabi_uldivmod>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e049      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083e8:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	f04f 0400 	mov.w	r4, #0
 80083f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	ea03 0501 	and.w	r5, r3, r1
 80083fe:	ea04 0602 	and.w	r6, r4, r2
 8008402:	4629      	mov	r1, r5
 8008404:	4632      	mov	r2, r6
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	f04f 0400 	mov.w	r4, #0
 800840e:	0154      	lsls	r4, r2, #5
 8008410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008414:	014b      	lsls	r3, r1, #5
 8008416:	4619      	mov	r1, r3
 8008418:	4622      	mov	r2, r4
 800841a:	1b49      	subs	r1, r1, r5
 800841c:	eb62 0206 	sbc.w	r2, r2, r6
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	f04f 0400 	mov.w	r4, #0
 8008428:	0194      	lsls	r4, r2, #6
 800842a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800842e:	018b      	lsls	r3, r1, #6
 8008430:	1a5b      	subs	r3, r3, r1
 8008432:	eb64 0402 	sbc.w	r4, r4, r2
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	00e2      	lsls	r2, r4, #3
 8008440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008444:	00d9      	lsls	r1, r3, #3
 8008446:	460b      	mov	r3, r1
 8008448:	4614      	mov	r4, r2
 800844a:	195b      	adds	r3, r3, r5
 800844c:	eb44 0406 	adc.w	r4, r4, r6
 8008450:	f04f 0100 	mov.w	r1, #0
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	02a2      	lsls	r2, r4, #10
 800845a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800845e:	0299      	lsls	r1, r3, #10
 8008460:	460b      	mov	r3, r1
 8008462:	4614      	mov	r4, r2
 8008464:	4618      	mov	r0, r3
 8008466:	4621      	mov	r1, r4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f04f 0400 	mov.w	r4, #0
 800846e:	461a      	mov	r2, r3
 8008470:	4623      	mov	r3, r4
 8008472:	f7f8 fc21 	bl	8000cb8 <__aeabi_uldivmod>
 8008476:	4603      	mov	r3, r0
 8008478:	460c      	mov	r4, r1
 800847a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	0c1b      	lsrs	r3, r3, #16
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	3301      	adds	r3, #1
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	fbb2 f3f3 	udiv	r3, r2, r3
 8008494:	60bb      	str	r3, [r7, #8]
      break;
 8008496:	e002      	b.n	800849e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800849a:	60bb      	str	r3, [r7, #8]
      break;
 800849c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800849e:	68bb      	ldr	r3, [r7, #8]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a8:	40023800 	.word	0x40023800
 80084ac:	00f42400 	.word	0x00f42400

080084b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084b4:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084b6:	681b      	ldr	r3, [r3, #0]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000000 	.word	0x20000000

080084c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084cc:	f7ff fff0 	bl	80084b0 <HAL_RCC_GetHCLKFreq>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	0a9b      	lsrs	r3, r3, #10
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	4a03      	ldr	r2, [pc, #12]	; (80084ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80084de:	5cd3      	ldrb	r3, [r2, r3]
 80084e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40023800 	.word	0x40023800
 80084ec:	08017288 	.word	0x08017288

080084f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084f4:	f7ff ffdc 	bl	80084b0 <HAL_RCC_GetHCLKFreq>
 80084f8:	4601      	mov	r1, r0
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	0b5b      	lsrs	r3, r3, #13
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	4a03      	ldr	r2, [pc, #12]	; (8008514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008506:	5cd3      	ldrb	r3, [r2, r3]
 8008508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800850c:	4618      	mov	r0, r3
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40023800 	.word	0x40023800
 8008514:	08017288 	.word	0x08017288

08008518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008540:	4b66      	ldr	r3, [pc, #408]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008546:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	4963      	ldr	r1, [pc, #396]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008550:	4313      	orrs	r3, r2
 8008552:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008562:	4b5e      	ldr	r3, [pc, #376]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008568:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	495a      	ldr	r1, [pc, #360]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008572:	4313      	orrs	r3, r2
 8008574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10b      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008598:	2b00      	cmp	r3, #0
 800859a:	d075      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800859c:	4b50      	ldr	r3, [pc, #320]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085a2:	f7fd fb1b 	bl	8005bdc <HAL_GetTick>
 80085a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085a8:	e008      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085aa:	f7fd fb17 	bl	8005bdc <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e1dc      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085bc:	4b47      	ldr	r3, [pc, #284]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f0      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	019a      	lsls	r2, r3, #6
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	071b      	lsls	r3, r3, #28
 80085e0:	493e      	ldr	r1, [pc, #248]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01f      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085f4:	4b39      	ldr	r3, [pc, #228]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085fa:	0f1b      	lsrs	r3, r3, #28
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	019a      	lsls	r2, r3, #6
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	061b      	lsls	r3, r3, #24
 800860e:	431a      	orrs	r2, r3
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	071b      	lsls	r3, r3, #28
 8008614:	4931      	ldr	r1, [pc, #196]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008616:	4313      	orrs	r3, r2
 8008618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800861c:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008622:	f023 021f 	bic.w	r2, r3, #31
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	3b01      	subs	r3, #1
 800862c:	492b      	ldr	r1, [pc, #172]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00d      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	019a      	lsls	r2, r3, #6
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	061b      	lsls	r3, r3, #24
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	071b      	lsls	r3, r3, #28
 8008654:	4921      	ldr	r1, [pc, #132]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800865c:	4b20      	ldr	r3, [pc, #128]	; (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008662:	f7fd fabb 	bl	8005bdc <HAL_GetTick>
 8008666:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008668:	e008      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800866a:	f7fd fab7 	bl	8005bdc <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e17c      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800867c:	4b17      	ldr	r3, [pc, #92]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0f0      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d112      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10c      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80ce 	beq.w	800884a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80086b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086b6:	f040 80c8 	bne.w	800884a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086c0:	f7fd fa8c 	bl	8005bdc <HAL_GetTick>
 80086c4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086c6:	e00f      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80086c8:	f7fd fa88 	bl	8005bdc <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d908      	bls.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e14d      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80086da:	bf00      	nop
 80086dc:	40023800 	.word	0x40023800
 80086e0:	42470068 	.word	0x42470068
 80086e4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086e8:	4ba5      	ldr	r3, [pc, #660]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f4:	d0e8      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d02e      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008702:	4b9f      	ldr	r3, [pc, #636]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	3301      	adds	r3, #1
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008714:	4b9a      	ldr	r3, [pc, #616]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871a:	0f1b      	lsrs	r3, r3, #28
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	019a      	lsls	r2, r3, #6
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	085b      	lsrs	r3, r3, #1
 800872c:	3b01      	subs	r3, #1
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	061b      	lsls	r3, r3, #24
 8008738:	431a      	orrs	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	071b      	lsls	r3, r3, #28
 800873e:	4990      	ldr	r1, [pc, #576]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008746:	4b8e      	ldr	r3, [pc, #568]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800874c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	3b01      	subs	r3, #1
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	4989      	ldr	r1, [pc, #548]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d02c      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800876c:	4b84      	ldr	r3, [pc, #528]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800876e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	3301      	adds	r3, #1
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800877e:	4b80      	ldr	r3, [pc, #512]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	019a      	lsls	r2, r3, #6
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	085b      	lsrs	r3, r3, #1
 8008796:	3b01      	subs	r3, #1
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	431a      	orrs	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	061b      	lsls	r3, r3, #24
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	071b      	lsls	r3, r3, #28
 80087a8:	4975      	ldr	r1, [pc, #468]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80087b0:	4b73      	ldr	r3, [pc, #460]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	4970      	ldr	r1, [pc, #448]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d024      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80087d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087da:	d11f      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087dc:	4b68      	ldr	r3, [pc, #416]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e2:	0e1b      	lsrs	r3, r3, #24
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087ea:	4b65      	ldr	r3, [pc, #404]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	0f1b      	lsrs	r3, r3, #28
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	019a      	lsls	r2, r3, #6
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	3b01      	subs	r3, #1
 8008806:	041b      	lsls	r3, r3, #16
 8008808:	431a      	orrs	r2, r3
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	061b      	lsls	r3, r3, #24
 800880e:	431a      	orrs	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	071b      	lsls	r3, r3, #28
 8008814:	495a      	ldr	r1, [pc, #360]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800881c:	4b59      	ldr	r3, [pc, #356]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800881e:	2201      	movs	r2, #1
 8008820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008822:	f7fd f9db 	bl	8005bdc <HAL_GetTick>
 8008826:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008828:	e008      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800882a:	f7fd f9d7 	bl	8005bdc <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e09c      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800883c:	4b50      	ldr	r3, [pc, #320]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008848:	d1ef      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8083 	beq.w	800895e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008858:	2300      	movs	r3, #0
 800885a:	60bb      	str	r3, [r7, #8]
 800885c:	4b48      	ldr	r3, [pc, #288]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	4a47      	ldr	r2, [pc, #284]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008866:	6413      	str	r3, [r2, #64]	; 0x40
 8008868:	4b45      	ldr	r3, [pc, #276]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008874:	4b44      	ldr	r3, [pc, #272]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a43      	ldr	r2, [pc, #268]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008880:	f7fd f9ac 	bl	8005bdc <HAL_GetTick>
 8008884:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008886:	e008      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008888:	f7fd f9a8 	bl	8005bdc <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e06d      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800889a:	4b3b      	ldr	r3, [pc, #236]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088a6:	4b36      	ldr	r3, [pc, #216]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ae:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d02f      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d028      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088c4:	4b2e      	ldr	r3, [pc, #184]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088cc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088ce:	4b2f      	ldr	r3, [pc, #188]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088d4:	4b2d      	ldr	r3, [pc, #180]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80088da:	4a29      	ldr	r2, [pc, #164]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d114      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80088ec:	f7fd f976 	bl	8005bdc <HAL_GetTick>
 80088f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088f2:	e00a      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088f4:	f7fd f972 	bl	8005bdc <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e035      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800890a:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0ee      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800891e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008922:	d10d      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008924:	4b16      	ldr	r3, [pc, #88]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008938:	4911      	ldr	r1, [pc, #68]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800893a:	4313      	orrs	r3, r2
 800893c:	608b      	str	r3, [r1, #8]
 800893e:	e005      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4a0e      	ldr	r2, [pc, #56]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008946:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800894a:	6093      	str	r3, [r2, #8]
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800894e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008958:	4909      	ldr	r1, [pc, #36]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800895a:	4313      	orrs	r3, r2
 800895c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008972:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800
 8008984:	42470070 	.word	0x42470070
 8008988:	40007000 	.word	0x40007000
 800898c:	42470e40 	.word	0x42470e40
 8008990:	424711e0 	.word	0x424711e0

08008994 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d075      	beq.n	8008a98 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089ac:	4ba2      	ldr	r3, [pc, #648]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 030c 	and.w	r3, r3, #12
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d00c      	beq.n	80089d2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089b8:	4b9f      	ldr	r3, [pc, #636]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d112      	bne.n	80089ea <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089c4:	4b9c      	ldr	r3, [pc, #624]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d0:	d10b      	bne.n	80089ea <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d2:	4b99      	ldr	r3, [pc, #612]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d05b      	beq.n	8008a96 <HAL_RCC_OscConfig+0x102>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d157      	bne.n	8008a96 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e20b      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f2:	d106      	bne.n	8008a02 <HAL_RCC_OscConfig+0x6e>
 80089f4:	4b90      	ldr	r3, [pc, #576]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a8f      	ldr	r2, [pc, #572]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 80089fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e01d      	b.n	8008a3e <HAL_RCC_OscConfig+0xaa>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_OscConfig+0x92>
 8008a0c:	4b8a      	ldr	r3, [pc, #552]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a89      	ldr	r2, [pc, #548]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	4b87      	ldr	r3, [pc, #540]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a86      	ldr	r2, [pc, #536]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	e00b      	b.n	8008a3e <HAL_RCC_OscConfig+0xaa>
 8008a26:	4b84      	ldr	r3, [pc, #528]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a83      	ldr	r2, [pc, #524]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4b81      	ldr	r3, [pc, #516]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a80      	ldr	r2, [pc, #512]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d013      	beq.n	8008a6e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a46:	f7fd f8c9 	bl	8005bdc <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a4e:	f7fd f8c5 	bl	8005bdc <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b64      	cmp	r3, #100	; 0x64
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e1d0      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a60:	4b75      	ldr	r3, [pc, #468]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0xba>
 8008a6c:	e014      	b.n	8008a98 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6e:	f7fd f8b5 	bl	8005bdc <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a74:	e008      	b.n	8008a88 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a76:	f7fd f8b1 	bl	8005bdc <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b64      	cmp	r3, #100	; 0x64
 8008a82:	d901      	bls.n	8008a88 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e1bc      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a88:	4b6b      	ldr	r3, [pc, #428]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1f0      	bne.n	8008a76 <HAL_RCC_OscConfig+0xe2>
 8008a94:	e000      	b.n	8008a98 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d063      	beq.n	8008b6c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008aa4:	4b64      	ldr	r3, [pc, #400]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 030c 	and.w	r3, r3, #12
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ab0:	4b61      	ldr	r3, [pc, #388]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d11c      	bne.n	8008af6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008abc:	4b5e      	ldr	r3, [pc, #376]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d116      	bne.n	8008af6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ac8:	4b5b      	ldr	r3, [pc, #364]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x14c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e190      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ae0:	4b55      	ldr	r3, [pc, #340]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4952      	ldr	r1, [pc, #328]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008af4:	e03a      	b.n	8008b6c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d020      	beq.n	8008b40 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008afe:	4b4f      	ldr	r3, [pc, #316]	; (8008c3c <HAL_RCC_OscConfig+0x2a8>)
 8008b00:	2201      	movs	r2, #1
 8008b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b04:	f7fd f86a 	bl	8005bdc <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b0c:	f7fd f866 	bl	8005bdc <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e171      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b1e:	4b46      	ldr	r3, [pc, #280]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b2a:	4b43      	ldr	r3, [pc, #268]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	493f      	ldr	r1, [pc, #252]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]
 8008b3e:	e015      	b.n	8008b6c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b40:	4b3e      	ldr	r3, [pc, #248]	; (8008c3c <HAL_RCC_OscConfig+0x2a8>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b46:	f7fd f849 	bl	8005bdc <HAL_GetTick>
 8008b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b4c:	e008      	b.n	8008b60 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b4e:	f7fd f845 	bl	8005bdc <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e150      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b60:	4b35      	ldr	r3, [pc, #212]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f0      	bne.n	8008b4e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d030      	beq.n	8008bda <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d016      	beq.n	8008bae <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b80:	4b2f      	ldr	r3, [pc, #188]	; (8008c40 <HAL_RCC_OscConfig+0x2ac>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b86:	f7fd f829 	bl	8005bdc <HAL_GetTick>
 8008b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b8e:	f7fd f825 	bl	8005bdc <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e130      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ba0:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0f0      	beq.n	8008b8e <HAL_RCC_OscConfig+0x1fa>
 8008bac:	e015      	b.n	8008bda <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bae:	4b24      	ldr	r3, [pc, #144]	; (8008c40 <HAL_RCC_OscConfig+0x2ac>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb4:	f7fd f812 	bl	8005bdc <HAL_GetTick>
 8008bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bbc:	f7fd f80e 	bl	8005bdc <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e119      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0304 	and.w	r3, r3, #4
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 809f 	beq.w	8008d26 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bec:	4b12      	ldr	r3, [pc, #72]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10f      	bne.n	8008c18 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c06:	6413      	str	r3, [r2, #64]	; 0x40
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <HAL_RCC_OscConfig+0x2a4>)
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008c14:	2301      	movs	r3, #1
 8008c16:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <HAL_RCC_OscConfig+0x2b0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d120      	bne.n	8008c66 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <HAL_RCC_OscConfig+0x2b0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a06      	ldr	r2, [pc, #24]	; (8008c44 <HAL_RCC_OscConfig+0x2b0>)
 8008c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c30:	f7fc ffd4 	bl	8005bdc <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c36:	e010      	b.n	8008c5a <HAL_RCC_OscConfig+0x2c6>
 8008c38:	40023800 	.word	0x40023800
 8008c3c:	42470000 	.word	0x42470000
 8008c40:	42470e80 	.word	0x42470e80
 8008c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c48:	f7fc ffc8 	bl	8005bdc <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e0d3      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c5a:	4b6c      	ldr	r3, [pc, #432]	; (8008e0c <HAL_RCC_OscConfig+0x478>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d106      	bne.n	8008c7c <HAL_RCC_OscConfig+0x2e8>
 8008c6e:	4b68      	ldr	r3, [pc, #416]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	4a67      	ldr	r2, [pc, #412]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c74:	f043 0301 	orr.w	r3, r3, #1
 8008c78:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7a:	e01c      	b.n	8008cb6 <HAL_RCC_OscConfig+0x322>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b05      	cmp	r3, #5
 8008c82:	d10c      	bne.n	8008c9e <HAL_RCC_OscConfig+0x30a>
 8008c84:	4b62      	ldr	r3, [pc, #392]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c88:	4a61      	ldr	r2, [pc, #388]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c8a:	f043 0304 	orr.w	r3, r3, #4
 8008c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c90:	4b5f      	ldr	r3, [pc, #380]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c94:	4a5e      	ldr	r2, [pc, #376]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c9c:	e00b      	b.n	8008cb6 <HAL_RCC_OscConfig+0x322>
 8008c9e:	4b5c      	ldr	r3, [pc, #368]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	4a5b      	ldr	r2, [pc, #364]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8008caa:	4b59      	ldr	r3, [pc, #356]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cae:	4a58      	ldr	r2, [pc, #352]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008cb0:	f023 0304 	bic.w	r3, r3, #4
 8008cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d015      	beq.n	8008cea <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbe:	f7fc ff8d 	bl	8005bdc <HAL_GetTick>
 8008cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc6:	f7fc ff89 	bl	8005bdc <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e092      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cdc:	4b4c      	ldr	r3, [pc, #304]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0ee      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x332>
 8008ce8:	e014      	b.n	8008d14 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cea:	f7fc ff77 	bl	8005bdc <HAL_GetTick>
 8008cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cf0:	e00a      	b.n	8008d08 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf2:	f7fc ff73 	bl	8005bdc <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d901      	bls.n	8008d08 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e07c      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d08:	4b41      	ldr	r3, [pc, #260]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1ee      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d105      	bne.n	8008d26 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d1a:	4b3d      	ldr	r3, [pc, #244]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	4a3c      	ldr	r2, [pc, #240]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d068      	beq.n	8008e00 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d2e:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f003 030c 	and.w	r3, r3, #12
 8008d36:	2b08      	cmp	r3, #8
 8008d38:	d060      	beq.n	8008dfc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d145      	bne.n	8008dce <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d42:	4b34      	ldr	r3, [pc, #208]	; (8008e14 <HAL_RCC_OscConfig+0x480>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fc ff48 	bl	8005bdc <HAL_GetTick>
 8008d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d50:	f7fc ff44 	bl	8005bdc <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e04f      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d62:	4b2b      	ldr	r3, [pc, #172]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f0      	bne.n	8008d50 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69da      	ldr	r2, [r3, #28]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	019b      	lsls	r3, r3, #6
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	3b01      	subs	r3, #1
 8008d88:	041b      	lsls	r3, r3, #16
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	061b      	lsls	r3, r3, #24
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	071b      	lsls	r3, r3, #28
 8008d9a:	491d      	ldr	r1, [pc, #116]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008da0:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <HAL_RCC_OscConfig+0x480>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da6:	f7fc ff19 	bl	8005bdc <HAL_GetTick>
 8008daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dac:	e008      	b.n	8008dc0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dae:	f7fc ff15 	bl	8005bdc <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e020      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0f0      	beq.n	8008dae <HAL_RCC_OscConfig+0x41a>
 8008dcc:	e018      	b.n	8008e00 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dce:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <HAL_RCC_OscConfig+0x480>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fc ff02 	bl	8005bdc <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ddc:	f7fc fefe 	bl	8005bdc <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e009      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dee:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <HAL_RCC_OscConfig+0x47c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0x448>
 8008dfa:	e001      	b.n	8008e00 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40007000 	.word	0x40007000
 8008e10:	40023800 	.word	0x40023800
 8008e14:	42470060 	.word	0x42470060

08008e18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e022      	b.n	8008e70 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d105      	bne.n	8008e42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7fb fd5b 	bl	80048f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2203      	movs	r2, #3
 8008e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f814 	bl	8008e78 <HAL_SD_InitCard>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e00a      	b.n	8008e70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e78:	b5b0      	push	{r4, r5, r7, lr}
 8008e7a:	b08e      	sub	sp, #56	; 0x38
 8008e7c:	af04      	add	r7, sp, #16
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008e94:	2376      	movs	r3, #118	; 0x76
 8008e96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681d      	ldr	r5, [r3, #0]
 8008e9c:	466c      	mov	r4, sp
 8008e9e:	f107 0314 	add.w	r3, r7, #20
 8008ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f003 fa87 	bl	800c3c4 <SDIO_Init>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e031      	b.n	8008f2c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <HAL_SD_InitCard+0xbc>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f003 fabf 	bl	800c456 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008ed8:	4b16      	ldr	r3, [pc, #88]	; (8008f34 <HAL_SD_InitCard+0xbc>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 ffc6 	bl	8009e70 <SD_PowerON>
 8008ee4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e013      	b.n	8008f2c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fee5 	bl	8009cd4 <SD_InitCard>
 8008f0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	422580a0 	.word	0x422580a0

08008f38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08c      	sub	sp, #48	; 0x30
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d107      	bne.n	8008f60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0c7      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f040 80c0 	bne.w	80090ee <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	441a      	add	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d907      	bls.n	8008f92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e0ae      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2203      	movs	r2, #3
 8008f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008fb0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	4a50      	ldr	r2, [pc, #320]	; (80090f8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	4a4f      	ldr	r2, [pc, #316]	; (80090fc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3380      	adds	r3, #128	; 0x80
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	025b      	lsls	r3, r3, #9
 8008fdc:	089b      	lsrs	r3, r3, #2
 8008fde:	f7fd fbef 	bl	80067c0 <HAL_DMA_Start_IT>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d017      	beq.n	8009018 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008ff6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a40      	ldr	r2, [pc, #256]	; (8009100 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e06b      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009018:	4b3a      	ldr	r3, [pc, #232]	; (8009104 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009022:	2b01      	cmp	r3, #1
 8009024:	d002      	beq.n	800902c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	025b      	lsls	r3, r3, #9
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009034:	4618      	mov	r0, r3
 8009036:	f003 faa1 	bl	800c57c <SDMMC_CmdBlockLength>
 800903a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00f      	beq.n	8009062 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2e      	ldr	r2, [pc, #184]	; (8009100 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	431a      	orrs	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e046      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
 8009066:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	025b      	lsls	r3, r3, #9
 800906c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800906e:	2390      	movs	r3, #144	; 0x90
 8009070:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009072:	2302      	movs	r3, #2
 8009074:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009076:	2300      	movs	r3, #0
 8009078:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800907a:	2301      	movs	r3, #1
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f107 0210 	add.w	r2, r7, #16
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f003 fa4b 	bl	800c524 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d90a      	bls.n	80090aa <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2282      	movs	r2, #130	; 0x82
 8009098:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a0:	4618      	mov	r0, r3
 80090a2:	f003 faaf 	bl	800c604 <SDMMC_CmdReadMultiBlock>
 80090a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090a8:	e009      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2281      	movs	r2, #129	; 0x81
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b6:	4618      	mov	r0, r3
 80090b8:	f003 fa82 	bl	800c5c0 <SDMMC_CmdReadSingleBlock>
 80090bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d012      	beq.n	80090ea <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80090ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e002      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e000      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	; 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	08009ae3 	.word	0x08009ae3
 80090fc:	08009b55 	.word	0x08009b55
 8009100:	004005ff 	.word	0x004005ff
 8009104:	4225858c 	.word	0x4225858c

08009108 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08c      	sub	sp, #48	; 0x30
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d107      	bne.n	8009130 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0ca      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	f040 80c3 	bne.w	80092c4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	441a      	add	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914e:	429a      	cmp	r2, r3
 8009150:	d907      	bls.n	8009162 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e0b1      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2203      	movs	r2, #3
 8009166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 021a 	orr.w	r2, r2, #26
 8009180:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009186:	4a52      	ldr	r2, [pc, #328]	; (80092d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918e:	4a51      	ldr	r2, [pc, #324]	; (80092d4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009190:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	2200      	movs	r2, #0
 8009198:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d002      	beq.n	80091a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	025b      	lsls	r3, r3, #9
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091b0:	4618      	mov	r0, r3
 80091b2:	f003 f9e3 	bl	800c57c <SDMMC_CmdBlockLength>
 80091b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00f      	beq.n	80091de <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a45      	ldr	r2, [pc, #276]	; (80092d8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80091c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e073      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d90a      	bls.n	80091fa <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	22a0      	movs	r2, #160	; 0xa0
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f0:	4618      	mov	r0, r3
 80091f2:	f003 fa4b 	bl	800c68c <SDMMC_CmdWriteMultiBlock>
 80091f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80091f8:	e009      	b.n	800920e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2290      	movs	r2, #144	; 0x90
 80091fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009206:	4618      	mov	r0, r3
 8009208:	f003 fa1e 	bl	800c648 <SDMMC_CmdWriteSingleBlock>
 800920c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d012      	beq.n	800923a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a2f      	ldr	r2, [pc, #188]	; (80092d8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	431a      	orrs	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e045      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800923a:	4b28      	ldr	r3, [pc, #160]	; (80092dc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800923c:	2201      	movs	r2, #1
 800923e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3380      	adds	r3, #128	; 0x80
 800924c:	461a      	mov	r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	025b      	lsls	r3, r3, #9
 8009252:	089b      	lsrs	r3, r3, #2
 8009254:	f7fd fab4 	bl	80067c0 <HAL_DMA_Start_IT>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01a      	beq.n	8009294 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 021a 	bic.w	r2, r2, #26
 800926c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a19      	ldr	r2, [pc, #100]	; (80092d8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e018      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009294:	f04f 33ff 	mov.w	r3, #4294967295
 8009298:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	025b      	lsls	r3, r3, #9
 800929e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80092a0:	2390      	movs	r3, #144	; 0x90
 80092a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f107 0210 	add.w	r2, r7, #16
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f003 f932 	bl	800c524 <SDIO_ConfigData>

      return HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	e000      	b.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 80092c4:	2302      	movs	r3, #2
  }
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3730      	adds	r7, #48	; 0x30
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	08009ab9 	.word	0x08009ab9
 80092d4:	08009b55 	.word	0x08009b55
 80092d8:	004005ff 	.word	0x004005ff
 80092dc:	4225858c 	.word	0x4225858c

080092e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d008      	beq.n	800930e <HAL_SD_IRQHandler+0x2e>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 ffc8 	bl	800a29c <SD_Read_IT>
 800930c:	e155      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 808f 	beq.w	800943c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009336:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800933a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 0201 	bic.w	r2, r2, #1
 800934a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d039      	beq.n	80093ca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <HAL_SD_IRQHandler+0x8a>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	d011      	beq.n	800938e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f003 f9ae 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 8009374:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f91f 	bl	80095cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f240 523a 	movw	r2, #1338	; 0x53a
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d104      	bne.n	80093ba <HAL_SD_IRQHandler+0xda>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f003 fe0c 	bl	800cfd8 <HAL_SD_RxCpltCallback>
 80093c0:	e0fb      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f003 fdfe 	bl	800cfc4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80093c8:	e0f7      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80f2 	beq.w	80095ba <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d011      	beq.n	8009404 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f003 f973 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 80093ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8e4 	bl	80095cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	f040 80d5 	bne.w	80095ba <HAL_SD_IRQHandler+0x2da>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 80cf 	bne.w	80095ba <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0208 	bic.w	r2, r2, #8
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f003 fdc5 	bl	800cfc4 <HAL_SD_TxCpltCallback>
}
 800943a:	e0be      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d008      	beq.n	800945c <HAL_SD_IRQHandler+0x17c>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 ff72 	bl	800a33e <SD_Write_IT>
 800945a:	e0ae      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80a7 	beq.w	80095ba <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	f043 0202 	orr.w	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	f043 0208 	orr.w	r2, r3, #8
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d005      	beq.n	80094ba <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	f043 0220 	orr.w	r2, r3, #32
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	f043 0210 	orr.w	r2, r3, #16
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80094ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f003 f8ec 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 80094f8:	4602      	mov	r2, r0
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f855 	bl	80095cc <HAL_SD_ErrorCallback>
}
 8009522:	e04a      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952a:	2b00      	cmp	r3, #0
 800952c:	d045      	beq.n	80095ba <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <HAL_SD_IRQHandler+0x262>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d011      	beq.n	8009566 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009546:	4a1f      	ldr	r2, [pc, #124]	; (80095c4 <HAL_SD_IRQHandler+0x2e4>)
 8009548:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd f98e 	bl	8006870 <HAL_DMA_Abort_IT>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d02f      	beq.n	80095ba <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fb4a 	bl	8009bf8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009564:	e029      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <HAL_SD_IRQHandler+0x29a>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d011      	beq.n	800959e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	4a12      	ldr	r2, [pc, #72]	; (80095c8 <HAL_SD_IRQHandler+0x2e8>)
 8009580:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	4618      	mov	r0, r3
 8009588:	f7fd f972 	bl	8006870 <HAL_DMA_Abort_IT>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d013      	beq.n	80095ba <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fb65 	bl	8009c66 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800959c:	e00d      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f003 fcfc 	bl	800cfb0 <HAL_SD_AbortCallback>
}
 80095b8:	e7ff      	b.n	80095ba <HAL_SD_IRQHandler+0x2da>
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	08009bf9 	.word	0x08009bf9
 80095c8:	08009c67 	.word	0x08009c67

080095cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ee:	0f9b      	lsrs	r3, r3, #30
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fa:	0e9b      	lsrs	r3, r3, #26
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 030f 	and.w	r3, r3, #15
 8009602:	b2da      	uxtb	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960c:	0e1b      	lsrs	r3, r3, #24
 800960e:	b2db      	uxtb	r3, r3
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	b2da      	uxtb	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	b2da      	uxtb	r2, r3
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800962a:	0a1b      	lsrs	r3, r3, #8
 800962c:	b2da      	uxtb	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009640:	0d1b      	lsrs	r3, r3, #20
 8009642:	b29a      	uxth	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800964c:	0c1b      	lsrs	r3, r3, #16
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 030f 	and.w	r3, r3, #15
 8009654:	b2da      	uxtb	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965e:	0bdb      	lsrs	r3, r3, #15
 8009660:	b2db      	uxtb	r3, r3
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009670:	0b9b      	lsrs	r3, r3, #14
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	b2da      	uxtb	r2, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009682:	0b5b      	lsrs	r3, r3, #13
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009694:	0b1b      	lsrs	r3, r3, #12
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	b2da      	uxtb	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2200      	movs	r2, #0
 80096a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d163      	bne.n	8009778 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096b4:	009a      	lsls	r2, r3, #2
 80096b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80096ba:	4013      	ands	r3, r2
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80096c0:	0f92      	lsrs	r2, r2, #30
 80096c2:	431a      	orrs	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	0edb      	lsrs	r3, r3, #27
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0307 	and.w	r3, r3, #7
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096de:	0e1b      	lsrs	r3, r3, #24
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	0d5b      	lsrs	r3, r3, #21
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009702:	0c9b      	lsrs	r3, r3, #18
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	b2da      	uxtb	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	0bdb      	lsrs	r3, r3, #15
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	b2da      	uxtb	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	7e1b      	ldrb	r3, [r3, #24]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	3302      	adds	r3, #2
 8009738:	2201      	movs	r2, #1
 800973a:	fa02 f303 	lsl.w	r3, r2, r3
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009742:	fb02 f203 	mul.w	r2, r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	7a1b      	ldrb	r3, [r3, #8]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	2201      	movs	r2, #1
 8009756:	409a      	lsls	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009764:	0a52      	lsrs	r2, r2, #9
 8009766:	fb02 f203 	mul.w	r2, r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009774:	661a      	str	r2, [r3, #96]	; 0x60
 8009776:	e031      	b.n	80097dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977c:	2b01      	cmp	r3, #1
 800977e:	d11d      	bne.n	80097bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009784:	041b      	lsls	r3, r3, #16
 8009786:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	431a      	orrs	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	3301      	adds	r3, #1
 800979c:	029a      	lsls	r2, r3, #10
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	661a      	str	r2, [r3, #96]	; 0x60
 80097ba:	e00f      	b.n	80097dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a58      	ldr	r2, [pc, #352]	; (8009924 <HAL_SD_GetCardCSD+0x344>)
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e09d      	b.n	8009918 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	0b9b      	lsrs	r3, r3, #14
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f2:	09db      	lsrs	r3, r3, #7
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	b2da      	uxtb	r2, r3
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009814:	0fdb      	lsrs	r3, r3, #31
 8009816:	b2da      	uxtb	r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009820:	0f5b      	lsrs	r3, r3, #29
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	b2da      	uxtb	r2, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009832:	0e9b      	lsrs	r3, r3, #26
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	b2da      	uxtb	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009844:	0d9b      	lsrs	r3, r3, #22
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	b2da      	uxtb	r2, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	0d5b      	lsrs	r3, r3, #21
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	b2da      	uxtb	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	0bdb      	lsrs	r3, r3, #15
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	b2da      	uxtb	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989a:	0b9b      	lsrs	r3, r3, #14
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ae:	0b5b      	lsrs	r3, r3, #13
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	0b1b      	lsrs	r3, r3, #12
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	0a9b      	lsrs	r3, r3, #10
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	0a1b      	lsrs	r3, r3, #8
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009906:	b2da      	uxtb	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	004005ff 	.word	0x004005ff

08009928 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b08e      	sub	sp, #56	; 0x38
 8009984:	af04      	add	r7, sp, #16
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2203      	movs	r2, #3
 800998e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	2b03      	cmp	r3, #3
 8009998:	d02e      	beq.n	80099f8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a0:	d106      	bne.n	80099b0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
 80099ae:	e029      	b.n	8009a04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b6:	d10a      	bne.n	80099ce <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb0f 	bl	8009fdc <SD_WideBus_Enable>
 80099be:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
 80099cc:	e01a      	b.n	8009a04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fb4c 	bl	800a072 <SD_WideBus_Disable>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
 80099e8:	e00c      	b.n	8009a04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
 80099f6:	e005      	b.n	8009a04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a18      	ldr	r2, [pc, #96]	; (8009a74 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e024      	b.n	8009a6a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681d      	ldr	r5, [r3, #0]
 8009a46:	466c      	mov	r4, sp
 8009a48:	f107 0318 	add.w	r3, r7, #24
 8009a4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a54:	f107 030c 	add.w	r3, r7, #12
 8009a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f002 fcb2 	bl	800c3c4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3728      	adds	r7, #40	; 0x28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bdb0      	pop	{r4, r5, r7, pc}
 8009a72:	bf00      	nop
 8009a74:	004005ff 	.word	0x004005ff

08009a78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a84:	f107 030c 	add.w	r3, r7, #12
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa7e 	bl	8009f8c <SD_SendStatus>
 8009a90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d005      	beq.n	8009aa4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0a5b      	lsrs	r3, r3, #9
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009aae:	693b      	ldr	r3, [r7, #16]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ad4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	2b82      	cmp	r3, #130	; 0x82
 8009af6:	d111      	bne.n	8009b1c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f002 fde7 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 8009b02:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d008      	beq.n	8009b1c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	431a      	orrs	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fd58 	bl	80095cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0208 	bic.w	r2, r2, #8
 8009b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b34:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f003 fa47 	bl	800cfd8 <HAL_SD_RxCpltCallback>
#endif
}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7fd f830 	bl	8006bc8 <HAL_DMA_GetError>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d03e      	beq.n	8009bec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b74:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d002      	beq.n	8009b8a <SD_DMAError+0x36>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d12d      	bne.n	8009be6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a19      	ldr	r2, [pc, #100]	; (8009bf4 <SD_DMAError+0xa0>)
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009ba0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	f7ff ff62 	bl	8009a78 <HAL_SD_GetCardState>
 8009bb4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	d002      	beq.n	8009bc2 <SD_DMAError+0x6e>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d10a      	bne.n	8009bd8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f002 fd82 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f7ff fcf0 	bl	80095cc <HAL_SD_ErrorCallback>
#endif
  }
}
 8009bec:	bf00      	nop
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	004005ff 	.word	0x004005ff

08009bf8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7ff ff31 	bl	8009a78 <HAL_SD_GetCardState>
 8009c16:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	d002      	beq.n	8009c32 <SD_DMATxAbort+0x3a>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	d10a      	bne.n	8009c48 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f002 fd4a 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	431a      	orrs	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f003 f9ad 	bl	800cfb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009c56:	e002      	b.n	8009c5e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff fcb7 	bl	80095cc <HAL_SD_ErrorCallback>
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c72:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fefa 	bl	8009a78 <HAL_SD_GetCardState>
 8009c84:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b06      	cmp	r3, #6
 8009c98:	d002      	beq.n	8009ca0 <SD_DMARxAbort+0x3a>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	d10a      	bne.n	8009cb6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f002 fd13 	bl	800c6d0 <SDMMC_CmdStopTransfer>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f003 f976 	bl	800cfb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009cc4:	e002      	b.n	8009ccc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fc80 	bl	80095cc <HAL_SD_ErrorCallback>
}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009cd4:	b5b0      	push	{r4, r5, r7, lr}
 8009cd6:	b094      	sub	sp, #80	; 0x50
 8009cd8:	af04      	add	r7, sp, #16
 8009cda:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f002 fbc5 	bl	800c474 <SDIO_GetPowerState>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cf0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009cf4:	e0b7      	b.n	8009e66 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d02f      	beq.n	8009d5e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fdee 	bl	800c8e4 <SDMMC_CmdSendCID>
 8009d08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <SD_InitCard+0x40>
    {
      return errorstate;
 8009d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d12:	e0a8      	b.n	8009e66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2100      	movs	r1, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f002 fbef 	bl	800c4fe <SDIO_GetResponse>
 8009d20:	4602      	mov	r2, r0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2104      	movs	r1, #4
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f002 fbe6 	bl	800c4fe <SDIO_GetResponse>
 8009d32:	4602      	mov	r2, r0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2108      	movs	r1, #8
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f002 fbdd 	bl	800c4fe <SDIO_GetResponse>
 8009d44:	4602      	mov	r2, r0
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	210c      	movs	r1, #12
 8009d50:	4618      	mov	r0, r3
 8009d52:	f002 fbd4 	bl	800c4fe <SDIO_GetResponse>
 8009d56:	4602      	mov	r2, r0
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d00d      	beq.n	8009d82 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f107 020e 	add.w	r2, r7, #14
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f002 fdf4 	bl	800c95e <SDMMC_CmdSetRelAdd>
 8009d76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SD_InitCard+0xae>
    {
      return errorstate;
 8009d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d80:	e071      	b.n	8009e66 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d036      	beq.n	8009df8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f002 fdbe 	bl	800c920 <SDMMC_CmdSendCSD>
 8009da4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dae:	e05a      	b.n	8009e66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f002 fba1 	bl	800c4fe <SDIO_GetResponse>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f002 fb98 	bl	800c4fe <SDIO_GetResponse>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2108      	movs	r1, #8
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f002 fb8f 	bl	800c4fe <SDIO_GetResponse>
 8009de0:	4602      	mov	r2, r0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	210c      	movs	r1, #12
 8009dec:	4618      	mov	r0, r3
 8009dee:	f002 fb86 	bl	800c4fe <SDIO_GetResponse>
 8009df2:	4602      	mov	r2, r0
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2104      	movs	r1, #4
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 fb7d 	bl	800c4fe <SDIO_GetResponse>
 8009e04:	4603      	mov	r3, r0
 8009e06:	0d1a      	lsrs	r2, r3, #20
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e0c:	f107 0310 	add.w	r3, r7, #16
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fbe4 	bl	80095e0 <HAL_SD_GetCardCSD>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e22:	e020      	b.n	8009e66 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6819      	ldr	r1, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	041b      	lsls	r3, r3, #16
 8009e2e:	f04f 0400 	mov.w	r4, #0
 8009e32:	461a      	mov	r2, r3
 8009e34:	4623      	mov	r3, r4
 8009e36:	4608      	mov	r0, r1
 8009e38:	f002 fc6c 	bl	800c714 <SDMMC_CmdSelDesel>
 8009e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <SD_InitCard+0x174>
  {
    return errorstate;
 8009e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e46:	e00e      	b.n	8009e66 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681d      	ldr	r5, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	466c      	mov	r4, sp
 8009e50:	f103 0210 	add.w	r2, r3, #16
 8009e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f002 fab0 	bl	800c3c4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3740      	adds	r7, #64	; 0x40
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009e70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	2300      	movs	r3, #0
 8009e82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f002 fc66 	bl	800c75a <SDMMC_CmdGoIdleState>
 8009e8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	e072      	b.n	8009f80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f002 fc79 	bl	800c796 <SDMMC_CmdOperCond>
 8009ea4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00d      	beq.n	8009ec8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 fc4f 	bl	800c75a <SDMMC_CmdGoIdleState>
 8009ebc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	e05b      	b.n	8009f80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d137      	bne.n	8009f46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f002 fc79 	bl	800c7d4 <SDMMC_CmdAppCommand>
 8009ee2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d02d      	beq.n	8009f46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eee:	e047      	b.n	8009f80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 fc6c 	bl	800c7d4 <SDMMC_CmdAppCommand>
 8009efc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	e03b      	b.n	8009f80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	491e      	ldr	r1, [pc, #120]	; (8009f88 <SD_PowerON+0x118>)
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f002 fc82 	bl	800c818 <SDMMC_CmdAppOperCommand>
 8009f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f20:	e02e      	b.n	8009f80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f002 fae8 	bl	800c4fe <SDIO_GetResponse>
 8009f2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	0fdb      	lsrs	r3, r3, #31
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <SD_PowerON+0xcc>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <SD_PowerON+0xce>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	613b      	str	r3, [r7, #16]

    count++;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d802      	bhi.n	8009f56 <SD_PowerON+0xe6>
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0cc      	beq.n	8009ef0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d902      	bls.n	8009f66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f64:	e00c      	b.n	8009f80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44
 8009f76:	e002      	b.n	8009f7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	c1100000 	.word	0xc1100000

08009f8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fa0:	e018      	b.n	8009fd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f002 fcf6 	bl	800c9a0 <SDMMC_CmdSendStatus>
 8009fb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	e009      	b.n	8009fd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f002 fa99 	bl	800c4fe <SDIO_GetResponse>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 fa83 	bl	800c4fe <SDIO_GetResponse>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a002:	d102      	bne.n	800a00a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a008:	e02f      	b.n	800a06a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f879 	bl	800a108 <SD_FindSCR>
 800a016:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	e023      	b.n	800a06a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01c      	beq.n	800a066 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f002 fbcb 	bl	800c7d4 <SDMMC_CmdAppCommand>
 800a03e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	e00f      	b.n	800a06a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fc04 	bl	800c85e <SDMMC_CmdBusWidth>
 800a056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	e003      	b.n	800a06a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	e001      	b.n	800a06a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2100      	movs	r1, #0
 800a088:	4618      	mov	r0, r3
 800a08a:	f002 fa38 	bl	800c4fe <SDIO_GetResponse>
 800a08e:	4603      	mov	r3, r0
 800a090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a098:	d102      	bne.n	800a0a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a09a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a09e:	e02f      	b.n	800a100 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0a0:	f107 030c 	add.w	r3, r7, #12
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f82e 	bl	800a108 <SD_FindSCR>
 800a0ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	e023      	b.n	800a100 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01c      	beq.n	800a0fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f002 fb80 	bl	800c7d4 <SDMMC_CmdAppCommand>
 800a0d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	e00f      	b.n	800a100 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f002 fbb9 	bl	800c85e <SDMMC_CmdBusWidth>
 800a0ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	e003      	b.n	800a100 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e001      	b.n	800a100 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a108:	b590      	push	{r4, r7, lr}
 800a10a:	b08f      	sub	sp, #60	; 0x3c
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a112:	f7fb fd63 	bl	8005bdc <HAL_GetTick>
 800a116:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a11c:	2300      	movs	r3, #0
 800a11e:	60bb      	str	r3, [r7, #8]
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2108      	movs	r1, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f002 fa24 	bl	800c57c <SDMMC_CmdBlockLength>
 800a134:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	e0a9      	b.n	800a294 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a148:	041b      	lsls	r3, r3, #16
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f002 fb41 	bl	800c7d4 <SDMMC_CmdAppCommand>
 800a152:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	e09a      	b.n	800a294 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a164:	2308      	movs	r3, #8
 800a166:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a168:	2330      	movs	r3, #48	; 0x30
 800a16a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a16c:	2302      	movs	r3, #2
 800a16e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a170:	2300      	movs	r3, #0
 800a172:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a174:	2301      	movs	r3, #1
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f107 0210 	add.w	r2, r7, #16
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f002 f9ce 	bl	800c524 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f002 fb88 	bl	800c8a2 <SDMMC_CmdSendSCR>
 800a192:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	d022      	beq.n	800a1e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	e07a      	b.n	800a294 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00e      	beq.n	800a1ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6819      	ldr	r1, [r3, #0]
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	f107 0208 	add.w	r2, r7, #8
 800a1b8:	18d4      	adds	r4, r2, r3
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	f002 f92d 	bl	800c41a <SDIO_ReadFIFO>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	6023      	str	r3, [r4, #0]
      index++;
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1ca:	f7fb fd07 	bl	8005bdc <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d8:	d102      	bne.n	800a1e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1de:	e059      	b.n	800a294 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e6:	f240 432a 	movw	r3, #1066	; 0x42a
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0d6      	beq.n	800a19e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2208      	movs	r2, #8
 800a204:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a206:	2308      	movs	r3, #8
 800a208:	e044      	b.n	800a294 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2202      	movs	r2, #2
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a220:	2302      	movs	r3, #2
 800a222:	e037      	b.n	800a294 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2220      	movs	r2, #32
 800a238:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a23a:	2320      	movs	r3, #32
 800a23c:	e02a      	b.n	800a294 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f240 523a 	movw	r2, #1338	; 0x53a
 800a246:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	061a      	lsls	r2, r3, #24
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a254:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a25e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	0e1b      	lsrs	r3, r3, #24
 800a264:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	601a      	str	r2, [r3, #0]
    scr++;
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	3304      	adds	r3, #4
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	061a      	lsls	r2, r3, #24
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a27c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	0a1b      	lsrs	r3, r3, #8
 800a282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a286:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	0e1b      	lsrs	r3, r3, #24
 800a28c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	373c      	adds	r7, #60	; 0x3c
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd90      	pop	{r4, r7, pc}

0800a29c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d03f      	beq.n	800a336 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	e033      	b.n	800a324 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f002 f8aa 	bl	800c41a <SDIO_ReadFIFO>
 800a2c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	0c1b      	lsrs	r3, r3, #16
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	3b01      	subs	r3, #1
 800a306:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	0e1b      	lsrs	r3, r3, #24
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3301      	adds	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	2b07      	cmp	r3, #7
 800a328:	d9c8      	bls.n	800a2bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a336:	bf00      	nop
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d043      	beq.n	800a3e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e037      	b.n	800a3ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	021a      	lsls	r2, r3, #8
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3301      	adds	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3b01      	subs	r3, #1
 800a386:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	041a      	lsls	r2, r3, #16
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4313      	orrs	r3, r2
 800a392:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	061a      	lsls	r2, r3, #24
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f107 0208 	add.w	r2, r7, #8
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f002 f836 	bl	800c434 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2b07      	cmp	r3, #7
 800a3d2:	d9c4      	bls.n	800a35e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e056      	b.n	800a4a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7fa fb61 	bl	8004adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2202      	movs	r2, #2
 800a41e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a430:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	ea42 0103 	orr.w	r1, r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	0c1b      	lsrs	r3, r3, #16
 800a478:	f003 0104 	and.w	r1, r3, #4
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	69da      	ldr	r2, [r3, #28]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <HAL_SPI_Transmit+0x22>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e11e      	b.n	800a710 <HAL_SPI_Transmit+0x260>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4da:	f7fb fb7f 	bl	8005bdc <HAL_GetTick>
 800a4de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d002      	beq.n	800a4f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a4f4:	e103      	b.n	800a6fe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <HAL_SPI_Transmit+0x52>
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a506:	e0fa      	b.n	800a6fe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2203      	movs	r2, #3
 800a50c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	88fa      	ldrh	r2, [r7, #6]
 800a520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	88fa      	ldrh	r2, [r7, #6]
 800a526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a54e:	d107      	bne.n	800a560 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a55e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56a:	2b40      	cmp	r3, #64	; 0x40
 800a56c:	d007      	beq.n	800a57e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a57c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a586:	d14b      	bne.n	800a620 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_SPI_Transmit+0xe6>
 800a590:	8afb      	ldrh	r3, [r7, #22]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d13e      	bne.n	800a614 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	881a      	ldrh	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	1c9a      	adds	r2, r3, #2
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a5ba:	e02b      	b.n	800a614 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d112      	bne.n	800a5f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	881a      	ldrh	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	1c9a      	adds	r2, r3, #2
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800a5ee:	e011      	b.n	800a614 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5f0:	f7fb faf4 	bl	8005bdc <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d803      	bhi.n	800a608 <HAL_SPI_Transmit+0x158>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d102      	bne.n	800a60e <HAL_SPI_Transmit+0x15e>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d102      	bne.n	800a614 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a612:	e074      	b.n	800a6fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a618:	b29b      	uxth	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1ce      	bne.n	800a5bc <HAL_SPI_Transmit+0x10c>
 800a61e:	e04c      	b.n	800a6ba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <HAL_SPI_Transmit+0x17e>
 800a628:	8afb      	ldrh	r3, [r7, #22]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d140      	bne.n	800a6b0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	330c      	adds	r3, #12
 800a638:	7812      	ldrb	r2, [r2, #0]
 800a63a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a654:	e02c      	b.n	800a6b0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b02      	cmp	r3, #2
 800a662:	d113      	bne.n	800a68c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	330c      	adds	r3, #12
 800a66e:	7812      	ldrb	r2, [r2, #0]
 800a670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a680:	b29b      	uxth	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	86da      	strh	r2, [r3, #54]	; 0x36
 800a68a:	e011      	b.n	800a6b0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a68c:	f7fb faa6 	bl	8005bdc <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d803      	bhi.n	800a6a4 <HAL_SPI_Transmit+0x1f4>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d102      	bne.n	800a6aa <HAL_SPI_Transmit+0x1fa>
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a6ae:	e026      	b.n	800a6fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1cd      	bne.n	800a656 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 fba4 	bl	800ae0c <SPI_EndRxTxTransaction>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	613b      	str	r3, [r7, #16]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	613b      	str	r3, [r7, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	77fb      	strb	r3, [r7, #31]
 800a6fa:	e000      	b.n	800a6fe <HAL_SPI_Transmit+0x24e>
  }

error:
 800a6fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	4613      	mov	r3, r2
 800a726:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a734:	d112      	bne.n	800a75c <HAL_SPI_Receive+0x44>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10e      	bne.n	800a75c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2204      	movs	r2, #4
 800a742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4613      	mov	r3, r2
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	68b9      	ldr	r1, [r7, #8]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 f8e9 	bl	800a92a <HAL_SPI_TransmitReceive>
 800a758:	4603      	mov	r3, r0
 800a75a:	e0e2      	b.n	800a922 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a762:	2b01      	cmp	r3, #1
 800a764:	d101      	bne.n	800a76a <HAL_SPI_Receive+0x52>
 800a766:	2302      	movs	r3, #2
 800a768:	e0db      	b.n	800a922 <HAL_SPI_Receive+0x20a>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a772:	f7fb fa33 	bl	8005bdc <HAL_GetTick>
 800a776:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b01      	cmp	r3, #1
 800a782:	d002      	beq.n	800a78a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a784:	2302      	movs	r3, #2
 800a786:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a788:	e0c2      	b.n	800a910 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <HAL_SPI_Receive+0x7e>
 800a790:	88fb      	ldrh	r3, [r7, #6]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d102      	bne.n	800a79c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a79a:	e0b9      	b.n	800a910 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	88fa      	ldrh	r2, [r7, #6]
 800a7b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	88fa      	ldrh	r2, [r7, #6]
 800a7ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7e2:	d107      	bne.n	800a7f4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a7f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fe:	2b40      	cmp	r3, #64	; 0x40
 800a800:	d007      	beq.n	800a812 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a810:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d162      	bne.n	800a8e0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a81a:	e02e      	b.n	800a87a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b01      	cmp	r3, #1
 800a828:	d115      	bne.n	800a856 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f103 020c 	add.w	r2, r3, #12
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	3b01      	subs	r3, #1
 800a84e:	b29a      	uxth	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a854:	e011      	b.n	800a87a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a856:	f7fb f9c1 	bl	8005bdc <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d803      	bhi.n	800a86e <HAL_SPI_Receive+0x156>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86c:	d102      	bne.n	800a874 <HAL_SPI_Receive+0x15c>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a878:	e04a      	b.n	800a910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a87e:	b29b      	uxth	r3, r3
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1cb      	bne.n	800a81c <HAL_SPI_Receive+0x104>
 800a884:	e031      	b.n	800a8ea <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b01      	cmp	r3, #1
 800a892:	d113      	bne.n	800a8bc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89e:	b292      	uxth	r2, r2
 800a8a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a6:	1c9a      	adds	r2, r3, #2
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8ba:	e011      	b.n	800a8e0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8bc:	f7fb f98e 	bl	8005bdc <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d803      	bhi.n	800a8d4 <HAL_SPI_Receive+0x1bc>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d102      	bne.n	800a8da <HAL_SPI_Receive+0x1c2>
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d102      	bne.n	800a8e0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a8de:	e017      	b.n	800a910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1cd      	bne.n	800a886 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 fa27 	bl	800ad42 <SPI_EndRxTransaction>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	75fb      	strb	r3, [r7, #23]
 800a90c:	e000      	b.n	800a910 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a90e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b08c      	sub	sp, #48	; 0x30
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a938:	2301      	movs	r3, #1
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x26>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e18a      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x33c>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a958:	f7fb f940 	bl	8005bdc <HAL_GetTick>
 800a95c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a976:	2b01      	cmp	r3, #1
 800a978:	d00f      	beq.n	800a99a <HAL_SPI_TransmitReceive+0x70>
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a980:	d107      	bne.n	800a992 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d103      	bne.n	800a992 <HAL_SPI_TransmitReceive+0x68>
 800a98a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d003      	beq.n	800a99a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a992:	2302      	movs	r3, #2
 800a994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a998:	e15b      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <HAL_SPI_TransmitReceive+0x82>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <HAL_SPI_TransmitReceive+0x82>
 800a9a6:	887b      	ldrh	r3, [r7, #2]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a9b2:	e14e      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d003      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2205      	movs	r2, #5
 800a9c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	887a      	ldrh	r2, [r7, #2]
 800a9d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	887a      	ldrh	r2, [r7, #2]
 800a9de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	887a      	ldrh	r2, [r7, #2]
 800a9ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	887a      	ldrh	r2, [r7, #2]
 800a9f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	d007      	beq.n	800aa1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa24:	d178      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x10a>
 800aa2e:	8b7b      	ldrh	r3, [r7, #26]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d166      	bne.n	800ab02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa44:	1c9a      	adds	r2, r3, #2
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa58:	e053      	b.n	800ab02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d11b      	bne.n	800aaa0 <HAL_SPI_TransmitReceive+0x176>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d016      	beq.n	800aaa0 <HAL_SPI_TransmitReceive+0x176>
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d113      	bne.n	800aaa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	881a      	ldrh	r2, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa88:	1c9a      	adds	r2, r3, #2
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	3b01      	subs	r3, #1
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d119      	bne.n	800aae2 <HAL_SPI_TransmitReceive+0x1b8>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d014      	beq.n	800aae2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	b292      	uxth	r2, r2
 800aac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	1c9a      	adds	r2, r3, #2
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aade:	2301      	movs	r3, #1
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aae2:	f7fb f87b 	bl	8005bdc <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d807      	bhi.n	800ab02 <HAL_SPI_TransmitReceive+0x1d8>
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d003      	beq.n	800ab02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab00:	e0a7      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1a6      	bne.n	800aa5a <HAL_SPI_TransmitReceive+0x130>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1a1      	bne.n	800aa5a <HAL_SPI_TransmitReceive+0x130>
 800ab16:	e07c      	b.n	800ac12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <HAL_SPI_TransmitReceive+0x1fc>
 800ab20:	8b7b      	ldrh	r3, [r7, #26]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d16b      	bne.n	800abfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab4c:	e057      	b.n	800abfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d11c      	bne.n	800ab96 <HAL_SPI_TransmitReceive+0x26c>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d017      	beq.n	800ab96 <HAL_SPI_TransmitReceive+0x26c>
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d114      	bne.n	800ab96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d119      	bne.n	800abd8 <HAL_SPI_TransmitReceive+0x2ae>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d014      	beq.n	800abd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abd4:	2301      	movs	r3, #1
 800abd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800abd8:	f7fb f800 	bl	8005bdc <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d803      	bhi.n	800abf0 <HAL_SPI_TransmitReceive+0x2c6>
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abee:	d102      	bne.n	800abf6 <HAL_SPI_TransmitReceive+0x2cc>
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d103      	bne.n	800abfe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800abfc:	e029      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1a2      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x224>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d19d      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f000 f8f8 	bl	800ae0c <SPI_EndRxTxTransaction>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d006      	beq.n	800ac30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ac2e:	e010      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10b      	bne.n	800ac50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	e000      	b.n	800ac52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ac50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3730      	adds	r7, #48	; 0x30
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	603b      	str	r3, [r7, #0]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac7e:	e04c      	b.n	800ad1a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac86:	d048      	beq.n	800ad1a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ac88:	f7fa ffa8 	bl	8005bdc <HAL_GetTick>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d902      	bls.n	800ac9e <SPI_WaitFlagStateUntilTimeout+0x30>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d13d      	bne.n	800ad1a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800acac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acb6:	d111      	bne.n	800acdc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acc0:	d004      	beq.n	800accc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acca:	d107      	bne.n	800acdc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ace4:	d10f      	bne.n	800ad06 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e00f      	b.n	800ad3a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	4013      	ands	r3, r2
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	bf0c      	ite	eq
 800ad2a:	2301      	moveq	r3, #1
 800ad2c:	2300      	movne	r3, #0
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d1a3      	bne.n	800ac80 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b086      	sub	sp, #24
 800ad46:	af02      	add	r7, sp, #8
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad56:	d111      	bne.n	800ad7c <SPI_EndRxTransaction+0x3a>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad60:	d004      	beq.n	800ad6c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad6a:	d107      	bne.n	800ad7c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad84:	d12a      	bne.n	800addc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad8e:	d012      	beq.n	800adb6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2200      	movs	r2, #0
 800ad98:	2180      	movs	r1, #128	; 0x80
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff ff67 	bl	800ac6e <SPI_WaitFlagStateUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d02d      	beq.n	800ae02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adaa:	f043 0220 	orr.w	r2, r3, #32
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e026      	b.n	800ae04 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2200      	movs	r2, #0
 800adbe:	2101      	movs	r1, #1
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff ff54 	bl	800ac6e <SPI_WaitFlagStateUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01a      	beq.n	800ae02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add0:	f043 0220 	orr.w	r2, r3, #32
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e013      	b.n	800ae04 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2200      	movs	r2, #0
 800ade4:	2101      	movs	r1, #1
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7ff ff41 	bl	800ac6e <SPI_WaitFlagStateUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d007      	beq.n	800ae02 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	f043 0220 	orr.w	r2, r3, #32
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e000      	b.n	800ae04 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ae18:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <SPI_EndRxTxTransaction+0x7c>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a1b      	ldr	r2, [pc, #108]	; (800ae8c <SPI_EndRxTxTransaction+0x80>)
 800ae1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae22:	0d5b      	lsrs	r3, r3, #21
 800ae24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae28:	fb02 f303 	mul.w	r3, r2, r3
 800ae2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae36:	d112      	bne.n	800ae5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2180      	movs	r1, #128	; 0x80
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff ff13 	bl	800ac6e <SPI_WaitFlagStateUntilTimeout>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d016      	beq.n	800ae7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae52:	f043 0220 	orr.w	r2, r3, #32
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e00f      	b.n	800ae7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00a      	beq.n	800ae7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae74:	2b80      	cmp	r3, #128	; 0x80
 800ae76:	d0f2      	beq.n	800ae5e <SPI_EndRxTxTransaction+0x52>
 800ae78:	e000      	b.n	800ae7c <SPI_EndRxTxTransaction+0x70>
        break;
 800ae7a:	bf00      	nop
  }

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20000000 	.word	0x20000000
 800ae8c:	165e9f81 	.word	0x165e9f81

0800ae90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e01d      	b.n	800aede <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7f9 fecc 	bl	8004c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f000 fb56 	bl	800b580 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68da      	ldr	r2, [r3, #12]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f042 0201 	orr.w	r2, r2, #1
 800aefc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b06      	cmp	r3, #6
 800af0e:	d007      	beq.n	800af20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f042 0201 	orr.w	r2, r2, #1
 800af1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e01d      	b.n	800af7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d106      	bne.n	800af5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7f9 fe09 	bl	8004b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3304      	adds	r3, #4
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f000 fb07 	bl	800b580 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2201      	movs	r2, #1
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fd42 	bl	800ba20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a15      	ldr	r2, [pc, #84]	; (800aff8 <HAL_TIM_PWM_Start+0x74>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d004      	beq.n	800afb0 <HAL_TIM_PWM_Start+0x2c>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a14      	ldr	r2, [pc, #80]	; (800affc <HAL_TIM_PWM_Start+0x78>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d101      	bne.n	800afb4 <HAL_TIM_PWM_Start+0x30>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <HAL_TIM_PWM_Start+0x32>
 800afb4:	2300      	movs	r3, #0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0307 	and.w	r3, r3, #7
 800afd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b06      	cmp	r3, #6
 800afda:	d007      	beq.n	800afec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0201 	orr.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	40010000 	.word	0x40010000
 800affc:	40010400 	.word	0x40010400

0800b000 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e083      	b.n	800b11c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7f9 fea3 	bl	8004d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6812      	ldr	r2, [r2, #0]
 800b040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b044:	f023 0307 	bic.w	r3, r3, #7
 800b048:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3304      	adds	r3, #4
 800b052:	4619      	mov	r1, r3
 800b054:	4610      	mov	r0, r2
 800b056:	f000 fa93 	bl	800b580 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b082:	f023 0303 	bic.w	r3, r3, #3
 800b086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	4313      	orrs	r3, r2
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4313      	orrs	r3, r2
 800b098:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b0a0:	f023 030c 	bic.w	r3, r3, #12
 800b0a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	011a      	lsls	r2, r3, #4
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	031b      	lsls	r3, r3, #12
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b0de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b0e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <HAL_TIM_Encoder_Start+0x16>
 800b134:	2b04      	cmp	r3, #4
 800b136:	d008      	beq.n	800b14a <HAL_TIM_Encoder_Start+0x26>
 800b138:	e00f      	b.n	800b15a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2201      	movs	r2, #1
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fc6c 	bl	800ba20 <TIM_CCxChannelCmd>
      break;
 800b148:	e016      	b.n	800b178 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2201      	movs	r2, #1
 800b150:	2104      	movs	r1, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fc64 	bl	800ba20 <TIM_CCxChannelCmd>
      break;
 800b158:	e00e      	b.n	800b178 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fc5c 	bl	800ba20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2201      	movs	r2, #1
 800b16e:	2104      	movs	r1, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fc55 	bl	800ba20 <TIM_CCxChannelCmd>
      break;
 800b176:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	f003 0302 	and.w	r3, r3, #2
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d122      	bne.n	800b1ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d11b      	bne.n	800b1ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f06f 0202 	mvn.w	r2, #2
 800b1be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f9b5 	bl	800b544 <HAL_TIM_IC_CaptureCallback>
 800b1da:	e005      	b.n	800b1e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f9a7 	bl	800b530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f9b8 	bl	800b558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d122      	bne.n	800b242 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b04      	cmp	r3, #4
 800b208:	d11b      	bne.n	800b242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f06f 0204 	mvn.w	r2, #4
 800b212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f98b 	bl	800b544 <HAL_TIM_IC_CaptureCallback>
 800b22e:	e005      	b.n	800b23c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f97d 	bl	800b530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f98e 	bl	800b558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	f003 0308 	and.w	r3, r3, #8
 800b24c:	2b08      	cmp	r3, #8
 800b24e:	d122      	bne.n	800b296 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	f003 0308 	and.w	r3, r3, #8
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d11b      	bne.n	800b296 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f06f 0208 	mvn.w	r2, #8
 800b266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2204      	movs	r2, #4
 800b26c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f961 	bl	800b544 <HAL_TIM_IC_CaptureCallback>
 800b282:	e005      	b.n	800b290 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f953 	bl	800b530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f964 	bl	800b558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f003 0310 	and.w	r3, r3, #16
 800b2a0:	2b10      	cmp	r3, #16
 800b2a2:	d122      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	f003 0310 	and.w	r3, r3, #16
 800b2ae:	2b10      	cmp	r3, #16
 800b2b0:	d11b      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f06f 0210 	mvn.w	r2, #16
 800b2ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f937 	bl	800b544 <HAL_TIM_IC_CaptureCallback>
 800b2d6:	e005      	b.n	800b2e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f929 	bl	800b530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f93a 	bl	800b558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d10e      	bne.n	800b316 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	2b01      	cmp	r3, #1
 800b304:	d107      	bne.n	800b316 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f06f 0201 	mvn.w	r2, #1
 800b30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7f8 fa0d 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b320:	2b80      	cmp	r3, #128	; 0x80
 800b322:	d10e      	bne.n	800b342 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32e:	2b80      	cmp	r3, #128	; 0x80
 800b330:	d107      	bne.n	800b342 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fc6d 	bl	800bc1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b40      	cmp	r3, #64	; 0x40
 800b34e:	d10e      	bne.n	800b36e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35a:	2b40      	cmp	r3, #64	; 0x40
 800b35c:	d107      	bne.n	800b36e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f8ff 	bl	800b56c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f003 0320 	and.w	r3, r3, #32
 800b378:	2b20      	cmp	r3, #32
 800b37a:	d10e      	bne.n	800b39a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b20      	cmp	r3, #32
 800b388:	d107      	bne.n	800b39a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f06f 0220 	mvn.w	r2, #32
 800b392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fc37 	bl	800bc08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d101      	bne.n	800b3be <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e0b4      	b.n	800b528 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b0c      	cmp	r3, #12
 800b3d2:	f200 809f 	bhi.w	800b514 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b411 	.word	0x0800b411
 800b3e0:	0800b515 	.word	0x0800b515
 800b3e4:	0800b515 	.word	0x0800b515
 800b3e8:	0800b515 	.word	0x0800b515
 800b3ec:	0800b451 	.word	0x0800b451
 800b3f0:	0800b515 	.word	0x0800b515
 800b3f4:	0800b515 	.word	0x0800b515
 800b3f8:	0800b515 	.word	0x0800b515
 800b3fc:	0800b493 	.word	0x0800b493
 800b400:	0800b515 	.word	0x0800b515
 800b404:	0800b515 	.word	0x0800b515
 800b408:	0800b515 	.word	0x0800b515
 800b40c:	0800b4d3 	.word	0x0800b4d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68b9      	ldr	r1, [r7, #8]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f952 	bl	800b6c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	699a      	ldr	r2, [r3, #24]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0208 	orr.w	r2, r2, #8
 800b42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	699a      	ldr	r2, [r3, #24]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 0204 	bic.w	r2, r2, #4
 800b43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6999      	ldr	r1, [r3, #24]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	619a      	str	r2, [r3, #24]
      break;
 800b44e:	e062      	b.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f9a2 	bl	800b7a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6999      	ldr	r1, [r3, #24]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	021a      	lsls	r2, r3, #8
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	619a      	str	r2, [r3, #24]
      break;
 800b490:	e041      	b.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68b9      	ldr	r1, [r7, #8]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 f9f7 	bl	800b88c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	69da      	ldr	r2, [r3, #28]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0208 	orr.w	r2, r2, #8
 800b4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69da      	ldr	r2, [r3, #28]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 0204 	bic.w	r2, r2, #4
 800b4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69d9      	ldr	r1, [r3, #28]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	691a      	ldr	r2, [r3, #16]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	61da      	str	r2, [r3, #28]
      break;
 800b4d0:	e021      	b.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68b9      	ldr	r1, [r7, #8]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fa4b 	bl	800b974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69da      	ldr	r2, [r3, #28]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69d9      	ldr	r1, [r3, #28]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	021a      	lsls	r2, r3, #8
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	430a      	orrs	r2, r1
 800b510:	61da      	str	r2, [r3, #28]
      break;
 800b512:	e000      	b.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b514:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a40      	ldr	r2, [pc, #256]	; (800b694 <TIM_Base_SetConfig+0x114>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d013      	beq.n	800b5c0 <TIM_Base_SetConfig+0x40>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59e:	d00f      	beq.n	800b5c0 <TIM_Base_SetConfig+0x40>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a3d      	ldr	r2, [pc, #244]	; (800b698 <TIM_Base_SetConfig+0x118>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d00b      	beq.n	800b5c0 <TIM_Base_SetConfig+0x40>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a3c      	ldr	r2, [pc, #240]	; (800b69c <TIM_Base_SetConfig+0x11c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d007      	beq.n	800b5c0 <TIM_Base_SetConfig+0x40>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a3b      	ldr	r2, [pc, #236]	; (800b6a0 <TIM_Base_SetConfig+0x120>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d003      	beq.n	800b5c0 <TIM_Base_SetConfig+0x40>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a3a      	ldr	r2, [pc, #232]	; (800b6a4 <TIM_Base_SetConfig+0x124>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d108      	bne.n	800b5d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a2f      	ldr	r2, [pc, #188]	; (800b694 <TIM_Base_SetConfig+0x114>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d02b      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e0:	d027      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a2c      	ldr	r2, [pc, #176]	; (800b698 <TIM_Base_SetConfig+0x118>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d023      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a2b      	ldr	r2, [pc, #172]	; (800b69c <TIM_Base_SetConfig+0x11c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d01f      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a2a      	ldr	r2, [pc, #168]	; (800b6a0 <TIM_Base_SetConfig+0x120>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d01b      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a29      	ldr	r2, [pc, #164]	; (800b6a4 <TIM_Base_SetConfig+0x124>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d017      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a28      	ldr	r2, [pc, #160]	; (800b6a8 <TIM_Base_SetConfig+0x128>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a27      	ldr	r2, [pc, #156]	; (800b6ac <TIM_Base_SetConfig+0x12c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d00f      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a26      	ldr	r2, [pc, #152]	; (800b6b0 <TIM_Base_SetConfig+0x130>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00b      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a25      	ldr	r2, [pc, #148]	; (800b6b4 <TIM_Base_SetConfig+0x134>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d007      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a24      	ldr	r2, [pc, #144]	; (800b6b8 <TIM_Base_SetConfig+0x138>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d003      	beq.n	800b632 <TIM_Base_SetConfig+0xb2>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a23      	ldr	r2, [pc, #140]	; (800b6bc <TIM_Base_SetConfig+0x13c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d108      	bne.n	800b644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	689a      	ldr	r2, [r3, #8]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a0a      	ldr	r2, [pc, #40]	; (800b694 <TIM_Base_SetConfig+0x114>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d003      	beq.n	800b678 <TIM_Base_SetConfig+0xf8>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a0c      	ldr	r2, [pc, #48]	; (800b6a4 <TIM_Base_SetConfig+0x124>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d103      	bne.n	800b680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	691a      	ldr	r2, [r3, #16]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	615a      	str	r2, [r3, #20]
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	40010000 	.word	0x40010000
 800b698:	40000400 	.word	0x40000400
 800b69c:	40000800 	.word	0x40000800
 800b6a0:	40000c00 	.word	0x40000c00
 800b6a4:	40010400 	.word	0x40010400
 800b6a8:	40014000 	.word	0x40014000
 800b6ac:	40014400 	.word	0x40014400
 800b6b0:	40014800 	.word	0x40014800
 800b6b4:	40001800 	.word	0x40001800
 800b6b8:	40001c00 	.word	0x40001c00
 800b6bc:	40002000 	.word	0x40002000

0800b6c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	f023 0201 	bic.w	r2, r3, #1
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0303 	bic.w	r3, r3, #3
 800b6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f023 0302 	bic.w	r3, r3, #2
 800b708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	4313      	orrs	r3, r2
 800b712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a20      	ldr	r2, [pc, #128]	; (800b798 <TIM_OC1_SetConfig+0xd8>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d003      	beq.n	800b724 <TIM_OC1_SetConfig+0x64>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a1f      	ldr	r2, [pc, #124]	; (800b79c <TIM_OC1_SetConfig+0xdc>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d10c      	bne.n	800b73e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f023 0308 	bic.w	r3, r3, #8
 800b72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	4313      	orrs	r3, r2
 800b734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f023 0304 	bic.w	r3, r3, #4
 800b73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a15      	ldr	r2, [pc, #84]	; (800b798 <TIM_OC1_SetConfig+0xd8>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d003      	beq.n	800b74e <TIM_OC1_SetConfig+0x8e>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a14      	ldr	r2, [pc, #80]	; (800b79c <TIM_OC1_SetConfig+0xdc>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d111      	bne.n	800b772 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	4313      	orrs	r3, r2
 800b766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	4313      	orrs	r3, r2
 800b770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	621a      	str	r2, [r3, #32]
}
 800b78c:	bf00      	nop
 800b78e:	371c      	adds	r7, #28
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	40010000 	.word	0x40010000
 800b79c:	40010400 	.word	0x40010400

0800b7a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f023 0210 	bic.w	r2, r3, #16
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	021b      	lsls	r3, r3, #8
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f023 0320 	bic.w	r3, r3, #32
 800b7ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a22      	ldr	r2, [pc, #136]	; (800b884 <TIM_OC2_SetConfig+0xe4>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d003      	beq.n	800b808 <TIM_OC2_SetConfig+0x68>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a21      	ldr	r2, [pc, #132]	; (800b888 <TIM_OC2_SetConfig+0xe8>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d10d      	bne.n	800b824 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b80e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4313      	orrs	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a17      	ldr	r2, [pc, #92]	; (800b884 <TIM_OC2_SetConfig+0xe4>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d003      	beq.n	800b834 <TIM_OC2_SetConfig+0x94>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a16      	ldr	r2, [pc, #88]	; (800b888 <TIM_OC2_SetConfig+0xe8>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d113      	bne.n	800b85c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b83a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	4313      	orrs	r3, r2
 800b85a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	621a      	str	r2, [r3, #32]
}
 800b876:	bf00      	nop
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40010000 	.word	0x40010000
 800b888:	40010400 	.word	0x40010400

0800b88c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a21      	ldr	r2, [pc, #132]	; (800b96c <TIM_OC3_SetConfig+0xe0>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d003      	beq.n	800b8f2 <TIM_OC3_SetConfig+0x66>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a20      	ldr	r2, [pc, #128]	; (800b970 <TIM_OC3_SetConfig+0xe4>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d10d      	bne.n	800b90e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b90c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a16      	ldr	r2, [pc, #88]	; (800b96c <TIM_OC3_SetConfig+0xe0>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d003      	beq.n	800b91e <TIM_OC3_SetConfig+0x92>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a15      	ldr	r2, [pc, #84]	; (800b970 <TIM_OC3_SetConfig+0xe4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d113      	bne.n	800b946 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	621a      	str	r2, [r3, #32]
}
 800b960:	bf00      	nop
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	40010000 	.word	0x40010000
 800b970:	40010400 	.word	0x40010400

0800b974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b974:	b480      	push	{r7}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	021b      	lsls	r3, r3, #8
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	031b      	lsls	r3, r3, #12
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a12      	ldr	r2, [pc, #72]	; (800ba18 <TIM_OC4_SetConfig+0xa4>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d003      	beq.n	800b9dc <TIM_OC4_SetConfig+0x68>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <TIM_OC4_SetConfig+0xa8>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d109      	bne.n	800b9f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	019b      	lsls	r3, r3, #6
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	621a      	str	r2, [r3, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40010400 	.word	0x40010400

0800ba20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b087      	sub	sp, #28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 031f 	and.w	r3, r3, #31
 800ba32:	2201      	movs	r2, #1
 800ba34:	fa02 f303 	lsl.w	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	401a      	ands	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a1a      	ldr	r2, [r3, #32]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	fa01 f303 	lsl.w	r3, r1, r3
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	621a      	str	r2, [r3, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
	...

0800ba6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e05a      	b.n	800bb3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a21      	ldr	r2, [pc, #132]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d022      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad0:	d01d      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a1d      	ldr	r2, [pc, #116]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d018      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a1b      	ldr	r2, [pc, #108]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d013      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a1a      	ldr	r2, [pc, #104]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00e      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a18      	ldr	r2, [pc, #96]	; (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d009      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a17      	ldr	r2, [pc, #92]	; (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d004      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d10c      	bne.n	800bb28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40000400 	.word	0x40000400
 800bb50:	40000800 	.word	0x40000800
 800bb54:	40000c00 	.word	0x40000c00
 800bb58:	40010400 	.word	0x40010400
 800bb5c:	40014000 	.word	0x40014000
 800bb60:	40001800 	.word	0x40001800

0800bb64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e03d      	b.n	800bbfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e03f      	b.n	800bcc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7f9 f9b6 	bl	8004fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2224      	movs	r2, #36	; 0x24
 800bc60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f829 	bl	800bccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	691a      	ldr	r2, [r3, #16]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68da      	ldr	r2, [r3, #12]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68da      	ldr	r2, [r3, #12]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689a      	ldr	r2, [r3, #8]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bd0e:	f023 030c 	bic.w	r3, r3, #12
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	6812      	ldr	r2, [r2, #0]
 800bd16:	68f9      	ldr	r1, [r7, #12]
 800bd18:	430b      	orrs	r3, r1
 800bd1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	699a      	ldr	r2, [r3, #24]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd3a:	f040 818b 	bne.w	800c054 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4ac1      	ldr	r2, [pc, #772]	; (800c048 <UART_SetConfig+0x37c>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d005      	beq.n	800bd54 <UART_SetConfig+0x88>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4abf      	ldr	r2, [pc, #764]	; (800c04c <UART_SetConfig+0x380>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	f040 80bd 	bne.w	800bece <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd54:	f7fc fbcc 	bl	80084f0 <HAL_RCC_GetPCLK2Freq>
 800bd58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	461d      	mov	r5, r3
 800bd5e:	f04f 0600 	mov.w	r6, #0
 800bd62:	46a8      	mov	r8, r5
 800bd64:	46b1      	mov	r9, r6
 800bd66:	eb18 0308 	adds.w	r3, r8, r8
 800bd6a:	eb49 0409 	adc.w	r4, r9, r9
 800bd6e:	4698      	mov	r8, r3
 800bd70:	46a1      	mov	r9, r4
 800bd72:	eb18 0805 	adds.w	r8, r8, r5
 800bd76:	eb49 0906 	adc.w	r9, r9, r6
 800bd7a:	f04f 0100 	mov.w	r1, #0
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bd86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bd8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bd8e:	4688      	mov	r8, r1
 800bd90:	4691      	mov	r9, r2
 800bd92:	eb18 0005 	adds.w	r0, r8, r5
 800bd96:	eb49 0106 	adc.w	r1, r9, r6
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	461d      	mov	r5, r3
 800bda0:	f04f 0600 	mov.w	r6, #0
 800bda4:	196b      	adds	r3, r5, r5
 800bda6:	eb46 0406 	adc.w	r4, r6, r6
 800bdaa:	461a      	mov	r2, r3
 800bdac:	4623      	mov	r3, r4
 800bdae:	f7f4 ff83 	bl	8000cb8 <__aeabi_uldivmod>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	4ba5      	ldr	r3, [pc, #660]	; (800c050 <UART_SetConfig+0x384>)
 800bdba:	fba3 2302 	umull	r2, r3, r3, r2
 800bdbe:	095b      	lsrs	r3, r3, #5
 800bdc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	f04f 0600 	mov.w	r6, #0
 800bdcc:	46a9      	mov	r9, r5
 800bdce:	46b2      	mov	sl, r6
 800bdd0:	eb19 0309 	adds.w	r3, r9, r9
 800bdd4:	eb4a 040a 	adc.w	r4, sl, sl
 800bdd8:	4699      	mov	r9, r3
 800bdda:	46a2      	mov	sl, r4
 800bddc:	eb19 0905 	adds.w	r9, r9, r5
 800bde0:	eb4a 0a06 	adc.w	sl, sl, r6
 800bde4:	f04f 0100 	mov.w	r1, #0
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bdf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bdf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bdf8:	4689      	mov	r9, r1
 800bdfa:	4692      	mov	sl, r2
 800bdfc:	eb19 0005 	adds.w	r0, r9, r5
 800be00:	eb4a 0106 	adc.w	r1, sl, r6
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	461d      	mov	r5, r3
 800be0a:	f04f 0600 	mov.w	r6, #0
 800be0e:	196b      	adds	r3, r5, r5
 800be10:	eb46 0406 	adc.w	r4, r6, r6
 800be14:	461a      	mov	r2, r3
 800be16:	4623      	mov	r3, r4
 800be18:	f7f4 ff4e 	bl	8000cb8 <__aeabi_uldivmod>
 800be1c:	4603      	mov	r3, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	461a      	mov	r2, r3
 800be22:	4b8b      	ldr	r3, [pc, #556]	; (800c050 <UART_SetConfig+0x384>)
 800be24:	fba3 1302 	umull	r1, r3, r3, r2
 800be28:	095b      	lsrs	r3, r3, #5
 800be2a:	2164      	movs	r1, #100	; 0x64
 800be2c:	fb01 f303 	mul.w	r3, r1, r3
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	3332      	adds	r3, #50	; 0x32
 800be36:	4a86      	ldr	r2, [pc, #536]	; (800c050 <UART_SetConfig+0x384>)
 800be38:	fba2 2303 	umull	r2, r3, r2, r3
 800be3c:	095b      	lsrs	r3, r3, #5
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be44:	4498      	add	r8, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	461d      	mov	r5, r3
 800be4a:	f04f 0600 	mov.w	r6, #0
 800be4e:	46a9      	mov	r9, r5
 800be50:	46b2      	mov	sl, r6
 800be52:	eb19 0309 	adds.w	r3, r9, r9
 800be56:	eb4a 040a 	adc.w	r4, sl, sl
 800be5a:	4699      	mov	r9, r3
 800be5c:	46a2      	mov	sl, r4
 800be5e:	eb19 0905 	adds.w	r9, r9, r5
 800be62:	eb4a 0a06 	adc.w	sl, sl, r6
 800be66:	f04f 0100 	mov.w	r1, #0
 800be6a:	f04f 0200 	mov.w	r2, #0
 800be6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be7a:	4689      	mov	r9, r1
 800be7c:	4692      	mov	sl, r2
 800be7e:	eb19 0005 	adds.w	r0, r9, r5
 800be82:	eb4a 0106 	adc.w	r1, sl, r6
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	461d      	mov	r5, r3
 800be8c:	f04f 0600 	mov.w	r6, #0
 800be90:	196b      	adds	r3, r5, r5
 800be92:	eb46 0406 	adc.w	r4, r6, r6
 800be96:	461a      	mov	r2, r3
 800be98:	4623      	mov	r3, r4
 800be9a:	f7f4 ff0d 	bl	8000cb8 <__aeabi_uldivmod>
 800be9e:	4603      	mov	r3, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	461a      	mov	r2, r3
 800bea4:	4b6a      	ldr	r3, [pc, #424]	; (800c050 <UART_SetConfig+0x384>)
 800bea6:	fba3 1302 	umull	r1, r3, r3, r2
 800beaa:	095b      	lsrs	r3, r3, #5
 800beac:	2164      	movs	r1, #100	; 0x64
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	3332      	adds	r3, #50	; 0x32
 800beb8:	4a65      	ldr	r2, [pc, #404]	; (800c050 <UART_SetConfig+0x384>)
 800beba:	fba2 2303 	umull	r2, r3, r2, r3
 800bebe:	095b      	lsrs	r3, r3, #5
 800bec0:	f003 0207 	and.w	r2, r3, #7
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4442      	add	r2, r8
 800beca:	609a      	str	r2, [r3, #8]
 800becc:	e26f      	b.n	800c3ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bece:	f7fc fafb 	bl	80084c8 <HAL_RCC_GetPCLK1Freq>
 800bed2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	461d      	mov	r5, r3
 800bed8:	f04f 0600 	mov.w	r6, #0
 800bedc:	46a8      	mov	r8, r5
 800bede:	46b1      	mov	r9, r6
 800bee0:	eb18 0308 	adds.w	r3, r8, r8
 800bee4:	eb49 0409 	adc.w	r4, r9, r9
 800bee8:	4698      	mov	r8, r3
 800beea:	46a1      	mov	r9, r4
 800beec:	eb18 0805 	adds.w	r8, r8, r5
 800bef0:	eb49 0906 	adc.w	r9, r9, r6
 800bef4:	f04f 0100 	mov.w	r1, #0
 800bef8:	f04f 0200 	mov.w	r2, #0
 800befc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bf00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bf04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bf08:	4688      	mov	r8, r1
 800bf0a:	4691      	mov	r9, r2
 800bf0c:	eb18 0005 	adds.w	r0, r8, r5
 800bf10:	eb49 0106 	adc.w	r1, r9, r6
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	461d      	mov	r5, r3
 800bf1a:	f04f 0600 	mov.w	r6, #0
 800bf1e:	196b      	adds	r3, r5, r5
 800bf20:	eb46 0406 	adc.w	r4, r6, r6
 800bf24:	461a      	mov	r2, r3
 800bf26:	4623      	mov	r3, r4
 800bf28:	f7f4 fec6 	bl	8000cb8 <__aeabi_uldivmod>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b47      	ldr	r3, [pc, #284]	; (800c050 <UART_SetConfig+0x384>)
 800bf34:	fba3 2302 	umull	r2, r3, r3, r2
 800bf38:	095b      	lsrs	r3, r3, #5
 800bf3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	461d      	mov	r5, r3
 800bf42:	f04f 0600 	mov.w	r6, #0
 800bf46:	46a9      	mov	r9, r5
 800bf48:	46b2      	mov	sl, r6
 800bf4a:	eb19 0309 	adds.w	r3, r9, r9
 800bf4e:	eb4a 040a 	adc.w	r4, sl, sl
 800bf52:	4699      	mov	r9, r3
 800bf54:	46a2      	mov	sl, r4
 800bf56:	eb19 0905 	adds.w	r9, r9, r5
 800bf5a:	eb4a 0a06 	adc.w	sl, sl, r6
 800bf5e:	f04f 0100 	mov.w	r1, #0
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf72:	4689      	mov	r9, r1
 800bf74:	4692      	mov	sl, r2
 800bf76:	eb19 0005 	adds.w	r0, r9, r5
 800bf7a:	eb4a 0106 	adc.w	r1, sl, r6
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	461d      	mov	r5, r3
 800bf84:	f04f 0600 	mov.w	r6, #0
 800bf88:	196b      	adds	r3, r5, r5
 800bf8a:	eb46 0406 	adc.w	r4, r6, r6
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4623      	mov	r3, r4
 800bf92:	f7f4 fe91 	bl	8000cb8 <__aeabi_uldivmod>
 800bf96:	4603      	mov	r3, r0
 800bf98:	460c      	mov	r4, r1
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4b2c      	ldr	r3, [pc, #176]	; (800c050 <UART_SetConfig+0x384>)
 800bf9e:	fba3 1302 	umull	r1, r3, r3, r2
 800bfa2:	095b      	lsrs	r3, r3, #5
 800bfa4:	2164      	movs	r1, #100	; 0x64
 800bfa6:	fb01 f303 	mul.w	r3, r1, r3
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	3332      	adds	r3, #50	; 0x32
 800bfb0:	4a27      	ldr	r2, [pc, #156]	; (800c050 <UART_SetConfig+0x384>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	095b      	lsrs	r3, r3, #5
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bfbe:	4498      	add	r8, r3
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	461d      	mov	r5, r3
 800bfc4:	f04f 0600 	mov.w	r6, #0
 800bfc8:	46a9      	mov	r9, r5
 800bfca:	46b2      	mov	sl, r6
 800bfcc:	eb19 0309 	adds.w	r3, r9, r9
 800bfd0:	eb4a 040a 	adc.w	r4, sl, sl
 800bfd4:	4699      	mov	r9, r3
 800bfd6:	46a2      	mov	sl, r4
 800bfd8:	eb19 0905 	adds.w	r9, r9, r5
 800bfdc:	eb4a 0a06 	adc.w	sl, sl, r6
 800bfe0:	f04f 0100 	mov.w	r1, #0
 800bfe4:	f04f 0200 	mov.w	r2, #0
 800bfe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bff4:	4689      	mov	r9, r1
 800bff6:	4692      	mov	sl, r2
 800bff8:	eb19 0005 	adds.w	r0, r9, r5
 800bffc:	eb4a 0106 	adc.w	r1, sl, r6
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	461d      	mov	r5, r3
 800c006:	f04f 0600 	mov.w	r6, #0
 800c00a:	196b      	adds	r3, r5, r5
 800c00c:	eb46 0406 	adc.w	r4, r6, r6
 800c010:	461a      	mov	r2, r3
 800c012:	4623      	mov	r3, r4
 800c014:	f7f4 fe50 	bl	8000cb8 <__aeabi_uldivmod>
 800c018:	4603      	mov	r3, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <UART_SetConfig+0x384>)
 800c020:	fba3 1302 	umull	r1, r3, r3, r2
 800c024:	095b      	lsrs	r3, r3, #5
 800c026:	2164      	movs	r1, #100	; 0x64
 800c028:	fb01 f303 	mul.w	r3, r1, r3
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	3332      	adds	r3, #50	; 0x32
 800c032:	4a07      	ldr	r2, [pc, #28]	; (800c050 <UART_SetConfig+0x384>)
 800c034:	fba2 2303 	umull	r2, r3, r2, r3
 800c038:	095b      	lsrs	r3, r3, #5
 800c03a:	f003 0207 	and.w	r2, r3, #7
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4442      	add	r2, r8
 800c044:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c046:	e1b2      	b.n	800c3ae <UART_SetConfig+0x6e2>
 800c048:	40011000 	.word	0x40011000
 800c04c:	40011400 	.word	0x40011400
 800c050:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4ad7      	ldr	r2, [pc, #860]	; (800c3b8 <UART_SetConfig+0x6ec>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d005      	beq.n	800c06a <UART_SetConfig+0x39e>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4ad6      	ldr	r2, [pc, #856]	; (800c3bc <UART_SetConfig+0x6f0>)
 800c064:	4293      	cmp	r3, r2
 800c066:	f040 80d1 	bne.w	800c20c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c06a:	f7fc fa41 	bl	80084f0 <HAL_RCC_GetPCLK2Freq>
 800c06e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	469a      	mov	sl, r3
 800c074:	f04f 0b00 	mov.w	fp, #0
 800c078:	46d0      	mov	r8, sl
 800c07a:	46d9      	mov	r9, fp
 800c07c:	eb18 0308 	adds.w	r3, r8, r8
 800c080:	eb49 0409 	adc.w	r4, r9, r9
 800c084:	4698      	mov	r8, r3
 800c086:	46a1      	mov	r9, r4
 800c088:	eb18 080a 	adds.w	r8, r8, sl
 800c08c:	eb49 090b 	adc.w	r9, r9, fp
 800c090:	f04f 0100 	mov.w	r1, #0
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c09c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c0a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c0a4:	4688      	mov	r8, r1
 800c0a6:	4691      	mov	r9, r2
 800c0a8:	eb1a 0508 	adds.w	r5, sl, r8
 800c0ac:	eb4b 0609 	adc.w	r6, fp, r9
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	f04f 0300 	mov.w	r3, #0
 800c0be:	f04f 0400 	mov.w	r4, #0
 800c0c2:	0094      	lsls	r4, r2, #2
 800c0c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c0c8:	008b      	lsls	r3, r1, #2
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	4623      	mov	r3, r4
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	f7f4 fdf1 	bl	8000cb8 <__aeabi_uldivmod>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	460c      	mov	r4, r1
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4bb8      	ldr	r3, [pc, #736]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c0de:	fba3 2302 	umull	r2, r3, r3, r2
 800c0e2:	095b      	lsrs	r3, r3, #5
 800c0e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	469b      	mov	fp, r3
 800c0ec:	f04f 0c00 	mov.w	ip, #0
 800c0f0:	46d9      	mov	r9, fp
 800c0f2:	46e2      	mov	sl, ip
 800c0f4:	eb19 0309 	adds.w	r3, r9, r9
 800c0f8:	eb4a 040a 	adc.w	r4, sl, sl
 800c0fc:	4699      	mov	r9, r3
 800c0fe:	46a2      	mov	sl, r4
 800c100:	eb19 090b 	adds.w	r9, r9, fp
 800c104:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c108:	f04f 0100 	mov.w	r1, #0
 800c10c:	f04f 0200 	mov.w	r2, #0
 800c110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c11c:	4689      	mov	r9, r1
 800c11e:	4692      	mov	sl, r2
 800c120:	eb1b 0509 	adds.w	r5, fp, r9
 800c124:	eb4c 060a 	adc.w	r6, ip, sl
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	4619      	mov	r1, r3
 800c12e:	f04f 0200 	mov.w	r2, #0
 800c132:	f04f 0300 	mov.w	r3, #0
 800c136:	f04f 0400 	mov.w	r4, #0
 800c13a:	0094      	lsls	r4, r2, #2
 800c13c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c140:	008b      	lsls	r3, r1, #2
 800c142:	461a      	mov	r2, r3
 800c144:	4623      	mov	r3, r4
 800c146:	4628      	mov	r0, r5
 800c148:	4631      	mov	r1, r6
 800c14a:	f7f4 fdb5 	bl	8000cb8 <__aeabi_uldivmod>
 800c14e:	4603      	mov	r3, r0
 800c150:	460c      	mov	r4, r1
 800c152:	461a      	mov	r2, r3
 800c154:	4b9a      	ldr	r3, [pc, #616]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c156:	fba3 1302 	umull	r1, r3, r3, r2
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	2164      	movs	r1, #100	; 0x64
 800c15e:	fb01 f303 	mul.w	r3, r1, r3
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	011b      	lsls	r3, r3, #4
 800c166:	3332      	adds	r3, #50	; 0x32
 800c168:	4a95      	ldr	r2, [pc, #596]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c16a:	fba2 2303 	umull	r2, r3, r2, r3
 800c16e:	095b      	lsrs	r3, r3, #5
 800c170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c174:	4498      	add	r8, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	469b      	mov	fp, r3
 800c17a:	f04f 0c00 	mov.w	ip, #0
 800c17e:	46d9      	mov	r9, fp
 800c180:	46e2      	mov	sl, ip
 800c182:	eb19 0309 	adds.w	r3, r9, r9
 800c186:	eb4a 040a 	adc.w	r4, sl, sl
 800c18a:	4699      	mov	r9, r3
 800c18c:	46a2      	mov	sl, r4
 800c18e:	eb19 090b 	adds.w	r9, r9, fp
 800c192:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c196:	f04f 0100 	mov.w	r1, #0
 800c19a:	f04f 0200 	mov.w	r2, #0
 800c19e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c1a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c1aa:	4689      	mov	r9, r1
 800c1ac:	4692      	mov	sl, r2
 800c1ae:	eb1b 0509 	adds.w	r5, fp, r9
 800c1b2:	eb4c 060a 	adc.w	r6, ip, sl
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f04f 0200 	mov.w	r2, #0
 800c1c0:	f04f 0300 	mov.w	r3, #0
 800c1c4:	f04f 0400 	mov.w	r4, #0
 800c1c8:	0094      	lsls	r4, r2, #2
 800c1ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c1ce:	008b      	lsls	r3, r1, #2
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4623      	mov	r3, r4
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	f7f4 fd6e 	bl	8000cb8 <__aeabi_uldivmod>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	4b77      	ldr	r3, [pc, #476]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c1e4:	fba3 1302 	umull	r1, r3, r3, r2
 800c1e8:	095b      	lsrs	r3, r3, #5
 800c1ea:	2164      	movs	r1, #100	; 0x64
 800c1ec:	fb01 f303 	mul.w	r3, r1, r3
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	011b      	lsls	r3, r3, #4
 800c1f4:	3332      	adds	r3, #50	; 0x32
 800c1f6:	4a72      	ldr	r2, [pc, #456]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fc:	095b      	lsrs	r3, r3, #5
 800c1fe:	f003 020f 	and.w	r2, r3, #15
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4442      	add	r2, r8
 800c208:	609a      	str	r2, [r3, #8]
 800c20a:	e0d0      	b.n	800c3ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c20c:	f7fc f95c 	bl	80084c8 <HAL_RCC_GetPCLK1Freq>
 800c210:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	469a      	mov	sl, r3
 800c216:	f04f 0b00 	mov.w	fp, #0
 800c21a:	46d0      	mov	r8, sl
 800c21c:	46d9      	mov	r9, fp
 800c21e:	eb18 0308 	adds.w	r3, r8, r8
 800c222:	eb49 0409 	adc.w	r4, r9, r9
 800c226:	4698      	mov	r8, r3
 800c228:	46a1      	mov	r9, r4
 800c22a:	eb18 080a 	adds.w	r8, r8, sl
 800c22e:	eb49 090b 	adc.w	r9, r9, fp
 800c232:	f04f 0100 	mov.w	r1, #0
 800c236:	f04f 0200 	mov.w	r2, #0
 800c23a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c23e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c242:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c246:	4688      	mov	r8, r1
 800c248:	4691      	mov	r9, r2
 800c24a:	eb1a 0508 	adds.w	r5, sl, r8
 800c24e:	eb4b 0609 	adc.w	r6, fp, r9
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	4619      	mov	r1, r3
 800c258:	f04f 0200 	mov.w	r2, #0
 800c25c:	f04f 0300 	mov.w	r3, #0
 800c260:	f04f 0400 	mov.w	r4, #0
 800c264:	0094      	lsls	r4, r2, #2
 800c266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c26a:	008b      	lsls	r3, r1, #2
 800c26c:	461a      	mov	r2, r3
 800c26e:	4623      	mov	r3, r4
 800c270:	4628      	mov	r0, r5
 800c272:	4631      	mov	r1, r6
 800c274:	f7f4 fd20 	bl	8000cb8 <__aeabi_uldivmod>
 800c278:	4603      	mov	r3, r0
 800c27a:	460c      	mov	r4, r1
 800c27c:	461a      	mov	r2, r3
 800c27e:	4b50      	ldr	r3, [pc, #320]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c280:	fba3 2302 	umull	r2, r3, r3, r2
 800c284:	095b      	lsrs	r3, r3, #5
 800c286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	469b      	mov	fp, r3
 800c28e:	f04f 0c00 	mov.w	ip, #0
 800c292:	46d9      	mov	r9, fp
 800c294:	46e2      	mov	sl, ip
 800c296:	eb19 0309 	adds.w	r3, r9, r9
 800c29a:	eb4a 040a 	adc.w	r4, sl, sl
 800c29e:	4699      	mov	r9, r3
 800c2a0:	46a2      	mov	sl, r4
 800c2a2:	eb19 090b 	adds.w	r9, r9, fp
 800c2a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c2aa:	f04f 0100 	mov.w	r1, #0
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c2ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c2be:	4689      	mov	r9, r1
 800c2c0:	4692      	mov	sl, r2
 800c2c2:	eb1b 0509 	adds.w	r5, fp, r9
 800c2c6:	eb4c 060a 	adc.w	r6, ip, sl
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	f04f 0400 	mov.w	r4, #0
 800c2dc:	0094      	lsls	r4, r2, #2
 800c2de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c2e2:	008b      	lsls	r3, r1, #2
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4623      	mov	r3, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	f7f4 fce4 	bl	8000cb8 <__aeabi_uldivmod>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	4b32      	ldr	r3, [pc, #200]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c2f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2fc:	095b      	lsrs	r3, r3, #5
 800c2fe:	2164      	movs	r1, #100	; 0x64
 800c300:	fb01 f303 	mul.w	r3, r1, r3
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	3332      	adds	r3, #50	; 0x32
 800c30a:	4a2d      	ldr	r2, [pc, #180]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c30c:	fba2 2303 	umull	r2, r3, r2, r3
 800c310:	095b      	lsrs	r3, r3, #5
 800c312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c316:	4498      	add	r8, r3
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	469b      	mov	fp, r3
 800c31c:	f04f 0c00 	mov.w	ip, #0
 800c320:	46d9      	mov	r9, fp
 800c322:	46e2      	mov	sl, ip
 800c324:	eb19 0309 	adds.w	r3, r9, r9
 800c328:	eb4a 040a 	adc.w	r4, sl, sl
 800c32c:	4699      	mov	r9, r3
 800c32e:	46a2      	mov	sl, r4
 800c330:	eb19 090b 	adds.w	r9, r9, fp
 800c334:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c338:	f04f 0100 	mov.w	r1, #0
 800c33c:	f04f 0200 	mov.w	r2, #0
 800c340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c34c:	4689      	mov	r9, r1
 800c34e:	4692      	mov	sl, r2
 800c350:	eb1b 0509 	adds.w	r5, fp, r9
 800c354:	eb4c 060a 	adc.w	r6, ip, sl
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	4619      	mov	r1, r3
 800c35e:	f04f 0200 	mov.w	r2, #0
 800c362:	f04f 0300 	mov.w	r3, #0
 800c366:	f04f 0400 	mov.w	r4, #0
 800c36a:	0094      	lsls	r4, r2, #2
 800c36c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c370:	008b      	lsls	r3, r1, #2
 800c372:	461a      	mov	r2, r3
 800c374:	4623      	mov	r3, r4
 800c376:	4628      	mov	r0, r5
 800c378:	4631      	mov	r1, r6
 800c37a:	f7f4 fc9d 	bl	8000cb8 <__aeabi_uldivmod>
 800c37e:	4603      	mov	r3, r0
 800c380:	460c      	mov	r4, r1
 800c382:	461a      	mov	r2, r3
 800c384:	4b0e      	ldr	r3, [pc, #56]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c386:	fba3 1302 	umull	r1, r3, r3, r2
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	2164      	movs	r1, #100	; 0x64
 800c38e:	fb01 f303 	mul.w	r3, r1, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	3332      	adds	r3, #50	; 0x32
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <UART_SetConfig+0x6f4>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	f003 020f 	and.w	r2, r3, #15
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4442      	add	r2, r8
 800c3aa:	609a      	str	r2, [r3, #8]
}
 800c3ac:	e7ff      	b.n	800c3ae <UART_SetConfig+0x6e2>
 800c3ae:	bf00      	nop
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b8:	40011000 	.word	0x40011000
 800c3bc:	40011400 	.word	0x40011400
 800c3c0:	51eb851f 	.word	0x51eb851f

0800c3c4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	b480      	push	{r7}
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	f107 001c 	add.w	r0, r7, #28
 800c3d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c3da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c3de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c3e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c3e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c3ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c3ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c3fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	431a      	orrs	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	b004      	add	sp, #16
 800c418:	4770      	bx	lr

0800c41a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b083      	sub	sp, #12
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2203      	movs	r2, #3
 800c462:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c464:	2002      	movs	r0, #2
 800c466:	f7f9 fbc5 	bl	8005bf4 <HAL_Delay>
  
  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0303 	and.w	r3, r3, #3
}
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c4b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c4ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c4ca:	f023 030f 	bic.w	r3, r3, #15
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	b2db      	uxtb	r3, r3
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	370c      	adds	r7, #12
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c4fe:	b480      	push	{r7}
 800c500:	b085      	sub	sp, #20
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3314      	adds	r3, #20
 800c50c:	461a      	mov	r2, r3
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	4413      	add	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
}  
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c54a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c550:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c556:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c562:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	431a      	orrs	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c56e:	2300      	movs	r3, #0

}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c58a:	2310      	movs	r3, #16
 800c58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c58e:	2340      	movs	r3, #64	; 0x40
 800c590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c59c:	f107 0308 	add.w	r3, r7, #8
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff ff74 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ac:	2110      	movs	r1, #16
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa40 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c5ce:	2311      	movs	r3, #17
 800c5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5d2:	2340      	movs	r3, #64	; 0x40
 800c5d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ff52 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f0:	2111      	movs	r1, #17
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa1e 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5fa:	69fb      	ldr	r3, [r7, #28]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c612:	2312      	movs	r3, #18
 800c614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c624:	f107 0308 	add.w	r3, r7, #8
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff ff30 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c630:	f241 3288 	movw	r2, #5000	; 0x1388
 800c634:	2112      	movs	r1, #18
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f9fc 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63e:	69fb      	ldr	r3, [r7, #28]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3720      	adds	r7, #32
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c656:	2318      	movs	r3, #24
 800c658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c65a:	2340      	movs	r3, #64	; 0x40
 800c65c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff ff0e 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c674:	f241 3288 	movw	r2, #5000	; 0x1388
 800c678:	2118      	movs	r1, #24
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f9da 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c682:	69fb      	ldr	r3, [r7, #28]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3720      	adds	r7, #32
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c69a:	2319      	movs	r3, #25
 800c69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c69e:	2340      	movs	r3, #64	; 0x40
 800c6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6ac:	f107 0308 	add.w	r3, r7, #8
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff feec 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c6b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6bc:	2119      	movs	r1, #25
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f9b8 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c6c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3720      	adds	r7, #32
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c6dc:	230c      	movs	r3, #12
 800c6de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff fecb 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c6fa:	4a05      	ldr	r2, [pc, #20]	; (800c710 <SDMMC_CmdStopTransfer+0x40>)
 800c6fc:	210c      	movs	r1, #12
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f998 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c706:	69fb      	ldr	r3, [r7, #28]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	05f5e100 	.word	0x05f5e100

0800c714 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b08a      	sub	sp, #40	; 0x28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c724:	2307      	movs	r3, #7
 800c726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c728:	2340      	movs	r3, #64	; 0x40
 800c72a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c734:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c736:	f107 0310 	add.w	r3, r7, #16
 800c73a:	4619      	mov	r1, r3
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff fea7 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c742:	f241 3288 	movw	r2, #5000	; 0x1388
 800c746:	2107      	movs	r1, #7
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f973 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c74e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c752:	4618      	mov	r0, r3
 800c754:	3728      	adds	r7, #40	; 0x28
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b088      	sub	sp, #32
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c762:	2300      	movs	r3, #0
 800c764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c778:	f107 0308 	add.w	r3, r7, #8
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff fe86 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f92d 	bl	800c9e4 <SDMMC_GetCmdError>
 800c78a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3720      	adds	r7, #32
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b088      	sub	sp, #32
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c79e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c7a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7a8:	2340      	movs	r3, #64	; 0x40
 800c7aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7b6:	f107 0308 	add.w	r3, r7, #8
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff fe67 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fb16 	bl	800cdf4 <SDMMC_GetCmdResp7>
 800c7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3720      	adds	r7, #32
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c7e2:	2337      	movs	r3, #55	; 0x37
 800c7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7e6:	2340      	movs	r3, #64	; 0x40
 800c7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7f4:	f107 0308 	add.w	r3, r7, #8
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff fe48 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c800:	f241 3288 	movw	r2, #5000	; 0x1388
 800c804:	2137      	movs	r1, #55	; 0x37
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f914 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c80c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c80e:	69fb      	ldr	r3, [r7, #28]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3720      	adds	r7, #32
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c82e:	2329      	movs	r3, #41	; 0x29
 800c830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c832:	2340      	movs	r3, #64	; 0x40
 800c834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c836:	2300      	movs	r3, #0
 800c838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c83e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c840:	f107 0308 	add.w	r3, r7, #8
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff fe22 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fa23 	bl	800cc98 <SDMMC_GetCmdResp3>
 800c852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c854:	69fb      	ldr	r3, [r7, #28]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b088      	sub	sp, #32
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c86c:	2306      	movs	r3, #6
 800c86e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7ff fe03 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c88e:	2106      	movs	r1, #6
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f8cf 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c898:	69fb      	ldr	r3, [r7, #28]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3720      	adds	r7, #32
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b088      	sub	sp, #32
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c8ae:	2333      	movs	r3, #51	; 0x33
 800c8b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fde2 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d0:	2133      	movs	r1, #51	; 0x33
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f8ae 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8da:	69fb      	ldr	r3, [r7, #28]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c8f4:	23c0      	movs	r3, #192	; 0xc0
 800c8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c902:	f107 0308 	add.w	r3, r7, #8
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff fdc1 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f97c 	bl	800cc0c <SDMMC_GetCmdResp2>
 800c914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c916:	69fb      	ldr	r3, [r7, #28]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3720      	adds	r7, #32
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c92e:	2309      	movs	r3, #9
 800c930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c932:	23c0      	movs	r3, #192	; 0xc0
 800c934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c93e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c940:	f107 0308 	add.w	r3, r7, #8
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff fda2 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f95d 	bl	800cc0c <SDMMC_GetCmdResp2>
 800c952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c954:	69fb      	ldr	r3, [r7, #28]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b088      	sub	sp, #32
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c96c:	2303      	movs	r3, #3
 800c96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c97c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff fd83 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	2103      	movs	r1, #3
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f9bc 	bl	800cd0c <SDMMC_GetCmdResp6>
 800c994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c996:	69fb      	ldr	r3, [r7, #28]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3720      	adds	r7, #32
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c9ae:	230d      	movs	r3, #13
 800c9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9c0:	f107 0308 	add.w	r3, r7, #8
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff fd62 	bl	800c490 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9d0:	210d      	movs	r1, #13
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f82e 	bl	800ca34 <SDMMC_GetCmdResp1>
 800c9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9da:	69fb      	ldr	r3, [r7, #28]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c9e4:	b490      	push	{r4, r7}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <SDMMC_GetCmdError+0x48>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0f      	ldr	r2, [pc, #60]	; (800ca30 <SDMMC_GetCmdError+0x4c>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	0a5b      	lsrs	r3, r3, #9
 800c9f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca00:	4623      	mov	r3, r4
 800ca02:	1e5c      	subs	r4, r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca0c:	e009      	b.n	800ca22 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f2      	beq.n	800ca00 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	22c5      	movs	r2, #197	; 0xc5
 800ca1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bc90      	pop	{r4, r7}
 800ca2a:	4770      	bx	lr
 800ca2c:	20000000 	.word	0x20000000
 800ca30:	10624dd3 	.word	0x10624dd3

0800ca34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca34:	b590      	push	{r4, r7, lr}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca42:	4b6f      	ldr	r3, [pc, #444]	; (800cc00 <SDMMC_GetCmdResp1+0x1cc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a6f      	ldr	r2, [pc, #444]	; (800cc04 <SDMMC_GetCmdResp1+0x1d0>)
 800ca48:	fba2 2303 	umull	r2, r3, r2, r3
 800ca4c:	0a5b      	lsrs	r3, r3, #9
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca54:	4623      	mov	r3, r4
 800ca56:	1e5c      	subs	r4, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d102      	bne.n	800ca62 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca60:	e0c9      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca66:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0f0      	beq.n	800ca54 <SDMMC_GetCmdResp1+0x20>
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1eb      	bne.n	800ca54 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca80:	f003 0304 	and.w	r3, r3, #4
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d004      	beq.n	800ca92 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2204      	movs	r2, #4
 800ca8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca8e:	2304      	movs	r3, #4
 800ca90:	e0b1      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2201      	movs	r2, #1
 800caa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0a6      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	22c5      	movs	r2, #197	; 0xc5
 800caac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f7ff fd18 	bl	800c4e4 <SDIO_GetCommandResponse>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	4293      	cmp	r3, r2
 800cabc:	d001      	beq.n	800cac2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e099      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cac2:	2100      	movs	r1, #0
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff fd1a 	bl	800c4fe <SDIO_GetResponse>
 800caca:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	4b4e      	ldr	r3, [pc, #312]	; (800cc08 <SDMMC_GetCmdResp1+0x1d4>)
 800cad0:	4013      	ands	r3, r2
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e08d      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	da02      	bge.n	800cae6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cae4:	e087      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800caf0:	2340      	movs	r3, #64	; 0x40
 800caf2:	e080      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cafe:	2380      	movs	r3, #128	; 0x80
 800cb00:	e079      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb10:	e071      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb20:	e069      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb30:	e061      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb40:	e059      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb50:	e051      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb60:	e049      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb70:	e041      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb80:	e039      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cb8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb90:	e031      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cba0:	e029      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbb0:	e021      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbc0:	e019      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cbd0:	e011      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cbdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbe0:	e009      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f003 0308 	and.w	r3, r3, #8
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cbec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cbf0:	e001      	b.n	800cbf6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd90      	pop	{r4, r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20000000 	.word	0x20000000
 800cc04:	10624dd3 	.word	0x10624dd3
 800cc08:	fdffe008 	.word	0xfdffe008

0800cc0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cc0c:	b490      	push	{r4, r7}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc14:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <SDMMC_GetCmdResp2+0x84>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a1e      	ldr	r2, [pc, #120]	; (800cc94 <SDMMC_GetCmdResp2+0x88>)
 800cc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1e:	0a5b      	lsrs	r3, r3, #9
 800cc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc28:	4623      	mov	r3, r4
 800cc2a:	1e5c      	subs	r4, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc34:	e026      	b.n	800cc84 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0f0      	beq.n	800cc28 <SDMMC_GetCmdResp2+0x1c>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1eb      	bne.n	800cc28 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2204      	movs	r2, #4
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc62:	2304      	movs	r3, #4
 800cc64:	e00e      	b.n	800cc84 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e003      	b.n	800cc84 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	22c5      	movs	r2, #197	; 0xc5
 800cc80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bc90      	pop	{r4, r7}
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20000000 	.word	0x20000000
 800cc94:	10624dd3 	.word	0x10624dd3

0800cc98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cc98:	b490      	push	{r4, r7}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cca0:	4b18      	ldr	r3, [pc, #96]	; (800cd04 <SDMMC_GetCmdResp3+0x6c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a18      	ldr	r2, [pc, #96]	; (800cd08 <SDMMC_GetCmdResp3+0x70>)
 800cca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccaa:	0a5b      	lsrs	r3, r3, #9
 800ccac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccb4:	4623      	mov	r3, r4
 800ccb6:	1e5c      	subs	r4, r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccc0:	e01b      	b.n	800ccfa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0f0      	beq.n	800ccb4 <SDMMC_GetCmdResp3+0x1c>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1eb      	bne.n	800ccb4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d004      	beq.n	800ccf2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2204      	movs	r2, #4
 800ccec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccee:	2304      	movs	r3, #4
 800ccf0:	e003      	b.n	800ccfa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	22c5      	movs	r2, #197	; 0xc5
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bc90      	pop	{r4, r7}
 800cd02:	4770      	bx	lr
 800cd04:	20000000 	.word	0x20000000
 800cd08:	10624dd3 	.word	0x10624dd3

0800cd0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd0c:	b590      	push	{r4, r7, lr}
 800cd0e:	b087      	sub	sp, #28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	460b      	mov	r3, r1
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd1a:	4b34      	ldr	r3, [pc, #208]	; (800cdec <SDMMC_GetCmdResp6+0xe0>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a34      	ldr	r2, [pc, #208]	; (800cdf0 <SDMMC_GetCmdResp6+0xe4>)
 800cd20:	fba2 2303 	umull	r2, r3, r2, r3
 800cd24:	0a5b      	lsrs	r3, r3, #9
 800cd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd2a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd2e:	4623      	mov	r3, r4
 800cd30:	1e5c      	subs	r4, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d102      	bne.n	800cd3c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd3a:	e052      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd40:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0f0      	beq.n	800cd2e <SDMMC_GetCmdResp6+0x22>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1eb      	bne.n	800cd2e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5a:	f003 0304 	and.w	r3, r3, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d004      	beq.n	800cd6c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2204      	movs	r2, #4
 800cd66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd68:	2304      	movs	r3, #4
 800cd6a:	e03a      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e02f      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fbae 	bl	800c4e4 <SDIO_GetCommandResponse>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d001      	beq.n	800cd96 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e025      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	22c5      	movs	r2, #197	; 0xc5
 800cd9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f7ff fbad 	bl	800c4fe <SDIO_GetResponse>
 800cda4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d106      	bne.n	800cdbe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	0c1b      	lsrs	r3, r3, #16
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e011      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cdc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdcc:	e009      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cddc:	e001      	b.n	800cde2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd90      	pop	{r4, r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20000000 	.word	0x20000000
 800cdf0:	10624dd3 	.word	0x10624dd3

0800cdf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cdf4:	b490      	push	{r4, r7}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdfc:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <SDMMC_GetCmdResp7+0x90>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a21      	ldr	r2, [pc, #132]	; (800ce88 <SDMMC_GetCmdResp7+0x94>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	0a5b      	lsrs	r3, r3, #9
 800ce08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce10:	4623      	mov	r3, r4
 800ce12:	1e5c      	subs	r4, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce1c:	e02c      	b.n	800ce78 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f0      	beq.n	800ce10 <SDMMC_GetCmdResp7+0x1c>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1eb      	bne.n	800ce10 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2204      	movs	r2, #4
 800ce48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce4a:	2304      	movs	r3, #4
 800ce4c:	e014      	b.n	800ce78 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d004      	beq.n	800ce64 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e009      	b.n	800ce78 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2240      	movs	r2, #64	; 0x40
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ce76:	2300      	movs	r3, #0
  
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bc90      	pop	{r4, r7}
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000000 	.word	0x20000000
 800ce88:	10624dd3 	.word	0x10624dd3

0800ce8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ce90:	4904      	ldr	r1, [pc, #16]	; (800cea4 <MX_FATFS_Init+0x18>)
 800ce92:	4805      	ldr	r0, [pc, #20]	; (800cea8 <MX_FATFS_Init+0x1c>)
 800ce94:	f004 f874 	bl	8010f80 <FATFS_LinkDriver>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4b03      	ldr	r3, [pc, #12]	; (800ceac <MX_FATFS_Init+0x20>)
 800ce9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cea0:	bf00      	nop
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200161c4 	.word	0x200161c4
 800cea8:	08017298 	.word	0x08017298
 800ceac:	200161c0 	.word	0x200161c0

0800ceb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ceb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ceca:	f000 f896 	bl	800cffa <BSP_SD_IsDetected>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d001      	beq.n	800ced8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	e012      	b.n	800cefe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ced8:	480b      	ldr	r0, [pc, #44]	; (800cf08 <BSP_SD_Init+0x48>)
 800ceda:	f7fb ff9d 	bl	8008e18 <HAL_SD_Init>
 800cede:	4603      	mov	r3, r0
 800cee0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d109      	bne.n	800cefc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ceec:	4806      	ldr	r0, [pc, #24]	; (800cf08 <BSP_SD_Init+0x48>)
 800ceee:	f7fc fd47 	bl	8009980 <HAL_SD_ConfigWideBusOperation>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cefc:	79fb      	ldrb	r3, [r7, #7]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20016058 	.word	0x20016058

0800cf0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	68f9      	ldr	r1, [r7, #12]
 800cf22:	4806      	ldr	r0, [pc, #24]	; (800cf3c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cf24:	f7fc f808 	bl	8008f38 <HAL_SD_ReadBlocks_DMA>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d001      	beq.n	800cf32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20016058 	.word	0x20016058

0800cf40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	4806      	ldr	r0, [pc, #24]	; (800cf70 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cf58:	f7fc f8d6 	bl	8009108 <HAL_SD_WriteBlocks_DMA>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20016058 	.word	0x20016058

0800cf74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cf78:	4805      	ldr	r0, [pc, #20]	; (800cf90 <BSP_SD_GetCardState+0x1c>)
 800cf7a:	f7fc fd7d 	bl	8009a78 <HAL_SD_GetCardState>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b04      	cmp	r3, #4
 800cf82:	bf14      	ite	ne
 800cf84:	2301      	movne	r3, #1
 800cf86:	2300      	moveq	r3, #0
 800cf88:	b2db      	uxtb	r3, r3
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20016058 	.word	0x20016058

0800cf94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	4803      	ldr	r0, [pc, #12]	; (800cfac <BSP_SD_GetCardInfo+0x18>)
 800cfa0:	f7fc fcc2 	bl	8009928 <HAL_SD_GetCardInfo>
}
 800cfa4:	bf00      	nop
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	20016058 	.word	0x20016058

0800cfb0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cfb8:	f000 f818 	bl	800cfec <BSP_SD_AbortCallback>
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cfcc:	f000 f9a8 	bl	800d320 <BSP_SD_WriteCpltCallback>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cfe0:	f000 f9aa 	bl	800d338 <BSP_SD_ReadCpltCallback>
}
 800cfe4:	bf00      	nop
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cfec:	b480      	push	{r7}
 800cfee:	af00      	add	r7, sp, #0

}
 800cff0:	bf00      	nop
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d000:	2301      	movs	r3, #1
 800d002:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d004:	f000 f80c 	bl	800d020 <BSP_PlatformIsDetected>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d00e:	2300      	movs	r3, #0
 800d010:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	b2db      	uxtb	r3, r3
}
 800d016:	4618      	mov	r0, r3
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d026:	2301      	movs	r3, #1
 800d028:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d02a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d02e:	4806      	ldr	r0, [pc, #24]	; (800d048 <BSP_PlatformIsDetected+0x28>)
 800d030:	f7fa f85e 	bl	80070f0 <HAL_GPIO_ReadPin>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d03a:	2300      	movs	r3, #0
 800d03c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d03e:	79fb      	ldrb	r3, [r7, #7]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	40020000 	.word	0x40020000

0800d04c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d054:	f7f8 fdc2 	bl	8005bdc <HAL_GetTick>
 800d058:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d05a:	e006      	b.n	800d06a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d05c:	f7ff ff8a 	bl	800cf74 <BSP_SD_GetCardState>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d066:	2300      	movs	r3, #0
 800d068:	e009      	b.n	800d07e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d06a:	f7f8 fdb7 	bl	8005bdc <HAL_GetTick>
 800d06e:	4602      	mov	r2, r0
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d8f0      	bhi.n	800d05c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d07a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d092:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <SD_CheckStatus+0x38>)
 800d094:	2201      	movs	r2, #1
 800d096:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d098:	f7ff ff6c 	bl	800cf74 <BSP_SD_GetCardState>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d0a2:	4b07      	ldr	r3, [pc, #28]	; (800d0c0 <SD_CheckStatus+0x38>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	f023 0301 	bic.w	r3, r3, #1
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <SD_CheckStatus+0x38>)
 800d0b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d0b2:	4b03      	ldr	r3, [pc, #12]	; (800d0c0 <SD_CheckStatus+0x38>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	b2db      	uxtb	r3, r3
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	20000009 	.word	0x20000009

0800d0c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d0ce:	f7ff fef7 	bl	800cec0 <BSP_SD_Init>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d107      	bne.n	800d0e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7ff ffd4 	bl	800d088 <SD_CheckStatus>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <SD_initialize+0x34>)
 800d0e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d0e8:	4b03      	ldr	r3, [pc, #12]	; (800d0f8 <SD_initialize+0x34>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000009 	.word	0x20000009

0800d0fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ffbd 	bl	800d088 <SD_CheckStatus>
 800d10e:	4603      	mov	r3, r0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	4603      	mov	r3, r0
 800d126:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d12c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d130:	f7ff ff8c 	bl	800d04c <SD_CheckStatusWithTimeout>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	da01      	bge.n	800d13e <SD_read+0x26>
  {
    return res;
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	e03b      	b.n	800d1b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	6879      	ldr	r1, [r7, #4]
 800d142:	68b8      	ldr	r0, [r7, #8]
 800d144:	f7ff fee2 	bl	800cf0c <BSP_SD_ReadBlocks_DMA>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d132      	bne.n	800d1b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d14e:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <SD_read+0xa8>)
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d154:	f7f8 fd42 	bl	8005bdc <HAL_GetTick>
 800d158:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d15a:	bf00      	nop
 800d15c:	4b18      	ldr	r3, [pc, #96]	; (800d1c0 <SD_read+0xa8>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d108      	bne.n	800d176 <SD_read+0x5e>
 800d164:	f7f8 fd3a 	bl	8005bdc <HAL_GetTick>
 800d168:	4602      	mov	r2, r0
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d172:	4293      	cmp	r3, r2
 800d174:	d9f2      	bls.n	800d15c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d176:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <SD_read+0xa8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	75fb      	strb	r3, [r7, #23]
 800d182:	e017      	b.n	800d1b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d184:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <SD_read+0xa8>)
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d18a:	f7f8 fd27 	bl	8005bdc <HAL_GetTick>
 800d18e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d190:	e007      	b.n	800d1a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d192:	f7ff feef 	bl	800cf74 <BSP_SD_GetCardState>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d102      	bne.n	800d1a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d1a0:	e008      	b.n	800d1b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d1a2:	f7f8 fd1b 	bl	8005bdc <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d9ee      	bls.n	800d192 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200136f0 	.word	0x200136f0

0800d1c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60b9      	str	r1, [r7, #8]
 800d1cc:	607a      	str	r2, [r7, #4]
 800d1ce:	603b      	str	r3, [r7, #0]
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d1d8:	4b24      	ldr	r3, [pc, #144]	; (800d26c <SD_write+0xa8>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d1de:	f247 5030 	movw	r0, #30000	; 0x7530
 800d1e2:	f7ff ff33 	bl	800d04c <SD_CheckStatusWithTimeout>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	da01      	bge.n	800d1f0 <SD_write+0x2c>
  {
    return res;
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	e038      	b.n	800d262 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	68b8      	ldr	r0, [r7, #8]
 800d1f6:	f7ff fea3 	bl	800cf40 <BSP_SD_WriteBlocks_DMA>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d12f      	bne.n	800d260 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d200:	f7f8 fcec 	bl	8005bdc <HAL_GetTick>
 800d204:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d206:	bf00      	nop
 800d208:	4b18      	ldr	r3, [pc, #96]	; (800d26c <SD_write+0xa8>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d108      	bne.n	800d222 <SD_write+0x5e>
 800d210:	f7f8 fce4 	bl	8005bdc <HAL_GetTick>
 800d214:	4602      	mov	r2, r0
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d21e:	4293      	cmp	r3, r2
 800d220:	d9f2      	bls.n	800d208 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <SD_write+0xa8>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	75fb      	strb	r3, [r7, #23]
 800d22e:	e017      	b.n	800d260 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d230:	4b0e      	ldr	r3, [pc, #56]	; (800d26c <SD_write+0xa8>)
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d236:	f7f8 fcd1 	bl	8005bdc <HAL_GetTick>
 800d23a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d23c:	e007      	b.n	800d24e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d23e:	f7ff fe99 	bl	800cf74 <BSP_SD_GetCardState>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <SD_write+0x8a>
          {
            res = RES_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	75fb      	strb	r3, [r7, #23]
            break;
 800d24c:	e008      	b.n	800d260 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d24e:	f7f8 fcc5 	bl	8005bdc <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	f247 522f 	movw	r2, #29999	; 0x752f
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d9ee      	bls.n	800d23e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d260:	7dfb      	ldrb	r3, [r7, #23]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200136ec 	.word	0x200136ec

0800d270 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08c      	sub	sp, #48	; 0x30
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	603a      	str	r2, [r7, #0]
 800d27a:	71fb      	strb	r3, [r7, #7]
 800d27c:	460b      	mov	r3, r1
 800d27e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d286:	4b25      	ldr	r3, [pc, #148]	; (800d31c <SD_ioctl+0xac>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <SD_ioctl+0x28>
 800d294:	2303      	movs	r3, #3
 800d296:	e03c      	b.n	800d312 <SD_ioctl+0xa2>

  switch (cmd)
 800d298:	79bb      	ldrb	r3, [r7, #6]
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d834      	bhi.n	800d308 <SD_ioctl+0x98>
 800d29e:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <SD_ioctl+0x34>)
 800d2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a4:	0800d2b5 	.word	0x0800d2b5
 800d2a8:	0800d2bd 	.word	0x0800d2bd
 800d2ac:	0800d2d5 	.word	0x0800d2d5
 800d2b0:	0800d2ef 	.word	0x0800d2ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2ba:	e028      	b.n	800d30e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fe67 	bl	800cf94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2d2:	e01c      	b.n	800d30e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2d4:	f107 030c 	add.w	r3, r7, #12
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7ff fe5b 	bl	800cf94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2ec:	e00f      	b.n	800d30e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2ee:	f107 030c 	add.w	r3, r7, #12
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff fe4e 	bl	800cf94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	0a5a      	lsrs	r2, r3, #9
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d306:	e002      	b.n	800d30e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d308:	2304      	movs	r3, #4
 800d30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d312:	4618      	mov	r0, r3
 800d314:	3730      	adds	r7, #48	; 0x30
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20000009 	.word	0x20000009

0800d320 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d320:	b480      	push	{r7}
 800d322:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d324:	4b03      	ldr	r3, [pc, #12]	; (800d334 <BSP_SD_WriteCpltCallback+0x14>)
 800d326:	2201      	movs	r2, #1
 800d328:	601a      	str	r2, [r3, #0]
}
 800d32a:	bf00      	nop
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	200136ec 	.word	0x200136ec

0800d338 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d338:	b480      	push	{r7}
 800d33a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d33c:	4b03      	ldr	r3, [pc, #12]	; (800d34c <BSP_SD_ReadCpltCallback+0x14>)
 800d33e:	2201      	movs	r2, #1
 800d340:	601a      	str	r2, [r3, #0]
}
 800d342:	bf00      	nop
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	200136f0 	.word	0x200136f0

0800d350 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	4603      	mov	r3, r0
 800d358:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	4a08      	ldr	r2, [pc, #32]	; (800d380 <disk_status+0x30>)
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	79fa      	ldrb	r2, [r7, #7]
 800d368:	4905      	ldr	r1, [pc, #20]	; (800d380 <disk_status+0x30>)
 800d36a:	440a      	add	r2, r1
 800d36c:	7a12      	ldrb	r2, [r2, #8]
 800d36e:	4610      	mov	r0, r2
 800d370:	4798      	blx	r3
 800d372:	4603      	mov	r3, r0
 800d374:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d376:	7bfb      	ldrb	r3, [r7, #15]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	2001391c 	.word	0x2001391c

0800d384 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	4a0d      	ldr	r2, [pc, #52]	; (800d3cc <disk_initialize+0x48>)
 800d396:	5cd3      	ldrb	r3, [r2, r3]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d111      	bne.n	800d3c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	4a0b      	ldr	r2, [pc, #44]	; (800d3cc <disk_initialize+0x48>)
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <disk_initialize+0x48>)
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	79fa      	ldrb	r2, [r7, #7]
 800d3b2:	4906      	ldr	r1, [pc, #24]	; (800d3cc <disk_initialize+0x48>)
 800d3b4:	440a      	add	r2, r1
 800d3b6:	7a12      	ldrb	r2, [r2, #8]
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	4798      	blx	r3
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2001391c 	.word	0x2001391c

0800d3d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d3d0:	b590      	push	{r4, r7, lr}
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	603b      	str	r3, [r7, #0]
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
 800d3e2:	4a0a      	ldr	r2, [pc, #40]	; (800d40c <disk_read+0x3c>)
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	4413      	add	r3, r2
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	689c      	ldr	r4, [r3, #8]
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	4a07      	ldr	r2, [pc, #28]	; (800d40c <disk_read+0x3c>)
 800d3f0:	4413      	add	r3, r2
 800d3f2:	7a18      	ldrb	r0, [r3, #8]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	68b9      	ldr	r1, [r7, #8]
 800d3fa:	47a0      	blx	r4
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800d400:	7dfb      	ldrb	r3, [r7, #23]
}
 800d402:	4618      	mov	r0, r3
 800d404:	371c      	adds	r7, #28
 800d406:	46bd      	mov	sp, r7
 800d408:	bd90      	pop	{r4, r7, pc}
 800d40a:	bf00      	nop
 800d40c:	2001391c 	.word	0x2001391c

0800d410 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	603b      	str	r3, [r7, #0]
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <disk_write+0x3c>)
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4413      	add	r3, r2
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	68dc      	ldr	r4, [r3, #12]
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	4a07      	ldr	r2, [pc, #28]	; (800d44c <disk_write+0x3c>)
 800d430:	4413      	add	r3, r2
 800d432:	7a18      	ldrb	r0, [r3, #8]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	68b9      	ldr	r1, [r7, #8]
 800d43a:	47a0      	blx	r4
 800d43c:	4603      	mov	r3, r0
 800d43e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d440:	7dfb      	ldrb	r3, [r7, #23]
}
 800d442:	4618      	mov	r0, r3
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	bd90      	pop	{r4, r7, pc}
 800d44a:	bf00      	nop
 800d44c:	2001391c 	.word	0x2001391c

0800d450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	603a      	str	r2, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
 800d45c:	460b      	mov	r3, r1
 800d45e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	4a09      	ldr	r2, [pc, #36]	; (800d488 <disk_ioctl+0x38>)
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4413      	add	r3, r2
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	79fa      	ldrb	r2, [r7, #7]
 800d46e:	4906      	ldr	r1, [pc, #24]	; (800d488 <disk_ioctl+0x38>)
 800d470:	440a      	add	r2, r1
 800d472:	7a10      	ldrb	r0, [r2, #8]
 800d474:	79b9      	ldrb	r1, [r7, #6]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4798      	blx	r3
 800d47a:	4603      	mov	r3, r0
 800d47c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	2001391c 	.word	0x2001391c

0800d48c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3301      	adds	r3, #1
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d49c:	89fb      	ldrh	r3, [r7, #14]
 800d49e:	021b      	lsls	r3, r3, #8
 800d4a0:	b21a      	sxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b21b      	sxth	r3, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	b21b      	sxth	r3, r3
 800d4ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d4ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3303      	adds	r3, #3
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	021b      	lsls	r3, r3, #8
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	3202      	adds	r2, #2
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	7812      	ldrb	r2, [r2, #0]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	021b      	lsls	r3, r3, #8
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7812      	ldrb	r2, [r2, #0]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	887a      	ldrh	r2, [r7, #2]
 800d516:	b2d2      	uxtb	r2, r2
 800d518:	701a      	strb	r2, [r3, #0]
 800d51a:	887b      	ldrh	r3, [r7, #2]
 800d51c:	0a1b      	lsrs	r3, r3, #8
 800d51e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	607a      	str	r2, [r7, #4]
 800d526:	887a      	ldrh	r2, [r7, #2]
 800d528:	b2d2      	uxtb	r2, r2
 800d52a:	701a      	strb	r2, [r3, #0]
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	607a      	str	r2, [r7, #4]
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	b2d2      	uxtb	r2, r2
 800d55e:	701a      	strb	r2, [r3, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	0a1b      	lsrs	r3, r3, #8
 800d564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	b2d2      	uxtb	r2, r2
 800d570:	701a      	strb	r2, [r3, #0]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	0a1b      	lsrs	r3, r3, #8
 800d576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	607a      	str	r2, [r7, #4]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	701a      	strb	r2, [r3, #0]
}
 800d584:	bf00      	nop
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00d      	beq.n	800d5c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	1c53      	adds	r3, r2, #1
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	1c59      	adds	r1, r3, #1
 800d5b4:	6179      	str	r1, [r7, #20]
 800d5b6:	7812      	ldrb	r2, [r2, #0]
 800d5b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	607b      	str	r3, [r7, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f1      	bne.n	800d5aa <mem_cpy+0x1a>
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	371c      	adds	r7, #28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d5d2:	b480      	push	{r7}
 800d5d4:	b087      	sub	sp, #28
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	617a      	str	r2, [r7, #20]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	b2d2      	uxtb	r2, r2
 800d5ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1f3      	bne.n	800d5e2 <mem_set+0x10>
}
 800d5fa:	bf00      	nop
 800d5fc:	371c      	adds	r7, #28
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d606:	b480      	push	{r7}
 800d608:	b089      	sub	sp, #36	; 0x24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	61fb      	str	r3, [r7, #28]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	61fa      	str	r2, [r7, #28]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	4619      	mov	r1, r3
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	61ba      	str	r2, [r7, #24]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	1acb      	subs	r3, r1, r3
 800d632:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3b01      	subs	r3, #1
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <mem_cmp+0x40>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0eb      	beq.n	800d61e <mem_cmp+0x18>

	return r;
 800d646:	697b      	ldr	r3, [r7, #20]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3724      	adds	r7, #36	; 0x24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d65e:	e002      	b.n	800d666 <chk_chr+0x12>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	3301      	adds	r3, #1
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <chk_chr+0x26>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	4293      	cmp	r3, r2
 800d678:	d1f2      	bne.n	800d660 <chk_chr+0xc>
	return *str;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	781b      	ldrb	r3, [r3, #0]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
	...

0800d68c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d696:	2300      	movs	r3, #0
 800d698:	60bb      	str	r3, [r7, #8]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e029      	b.n	800d6f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d6a0:	4a27      	ldr	r2, [pc, #156]	; (800d740 <chk_lock+0xb4>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	4413      	add	r3, r2
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d01d      	beq.n	800d6ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6ae:	4a24      	ldr	r2, [pc, #144]	; (800d740 <chk_lock+0xb4>)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	011b      	lsls	r3, r3, #4
 800d6b4:	4413      	add	r3, r2
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d116      	bne.n	800d6ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d6c0:	4a1f      	ldr	r2, [pc, #124]	; (800d740 <chk_lock+0xb4>)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	011b      	lsls	r3, r3, #4
 800d6c6:	4413      	add	r3, r2
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d10c      	bne.n	800d6ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6d4:	4a1a      	ldr	r2, [pc, #104]	; (800d740 <chk_lock+0xb4>)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	4413      	add	r3, r2
 800d6dc:	3308      	adds	r3, #8
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d102      	bne.n	800d6ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6e8:	e007      	b.n	800d6fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d9d2      	bls.n	800d6a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d109      	bne.n	800d714 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <chk_lock+0x80>
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d101      	bne.n	800d710 <chk_lock+0x84>
 800d70c:	2300      	movs	r3, #0
 800d70e:	e010      	b.n	800d732 <chk_lock+0xa6>
 800d710:	2312      	movs	r3, #18
 800d712:	e00e      	b.n	800d732 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d108      	bne.n	800d72c <chk_lock+0xa0>
 800d71a:	4a09      	ldr	r2, [pc, #36]	; (800d740 <chk_lock+0xb4>)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	011b      	lsls	r3, r3, #4
 800d720:	4413      	add	r3, r2
 800d722:	330c      	adds	r3, #12
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d72a:	d101      	bne.n	800d730 <chk_lock+0xa4>
 800d72c:	2310      	movs	r3, #16
 800d72e:	e000      	b.n	800d732 <chk_lock+0xa6>
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	200136fc 	.word	0x200136fc

0800d744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d74a:	2300      	movs	r3, #0
 800d74c:	607b      	str	r3, [r7, #4]
 800d74e:	e002      	b.n	800d756 <enq_lock+0x12>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3301      	adds	r3, #1
 800d754:	607b      	str	r3, [r7, #4]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d806      	bhi.n	800d76a <enq_lock+0x26>
 800d75c:	4a09      	ldr	r2, [pc, #36]	; (800d784 <enq_lock+0x40>)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	4413      	add	r3, r2
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1f2      	bne.n	800d750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b02      	cmp	r3, #2
 800d76e:	bf14      	ite	ne
 800d770:	2301      	movne	r3, #1
 800d772:	2300      	moveq	r3, #0
 800d774:	b2db      	uxtb	r3, r3
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	200136fc 	.word	0x200136fc

0800d788 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e01f      	b.n	800d7d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d798:	4a41      	ldr	r2, [pc, #260]	; (800d8a0 <inc_lock+0x118>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	011b      	lsls	r3, r3, #4
 800d79e:	4413      	add	r3, r2
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d113      	bne.n	800d7d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d7aa:	4a3d      	ldr	r2, [pc, #244]	; (800d8a0 <inc_lock+0x118>)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	011b      	lsls	r3, r3, #4
 800d7b0:	4413      	add	r3, r2
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d109      	bne.n	800d7d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d7be:	4a38      	ldr	r2, [pc, #224]	; (800d8a0 <inc_lock+0x118>)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	011b      	lsls	r3, r3, #4
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d006      	beq.n	800d7e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d9dc      	bls.n	800d798 <inc_lock+0x10>
 800d7de:	e000      	b.n	800d7e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d7e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d132      	bne.n	800d84e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	e002      	b.n	800d7f4 <inc_lock+0x6c>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d806      	bhi.n	800d808 <inc_lock+0x80>
 800d7fa:	4a29      	ldr	r2, [pc, #164]	; (800d8a0 <inc_lock+0x118>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	4413      	add	r3, r2
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1f2      	bne.n	800d7ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d101      	bne.n	800d812 <inc_lock+0x8a>
 800d80e:	2300      	movs	r3, #0
 800d810:	e040      	b.n	800d894 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	4922      	ldr	r1, [pc, #136]	; (800d8a0 <inc_lock+0x118>)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	011b      	lsls	r3, r3, #4
 800d81c:	440b      	add	r3, r1
 800d81e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	491e      	ldr	r1, [pc, #120]	; (800d8a0 <inc_lock+0x118>)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	011b      	lsls	r3, r3, #4
 800d82a:	440b      	add	r3, r1
 800d82c:	3304      	adds	r3, #4
 800d82e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	695a      	ldr	r2, [r3, #20]
 800d834:	491a      	ldr	r1, [pc, #104]	; (800d8a0 <inc_lock+0x118>)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	011b      	lsls	r3, r3, #4
 800d83a:	440b      	add	r3, r1
 800d83c:	3308      	adds	r3, #8
 800d83e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d840:	4a17      	ldr	r2, [pc, #92]	; (800d8a0 <inc_lock+0x118>)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	011b      	lsls	r3, r3, #4
 800d846:	4413      	add	r3, r2
 800d848:	330c      	adds	r3, #12
 800d84a:	2200      	movs	r2, #0
 800d84c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d009      	beq.n	800d868 <inc_lock+0xe0>
 800d854:	4a12      	ldr	r2, [pc, #72]	; (800d8a0 <inc_lock+0x118>)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	011b      	lsls	r3, r3, #4
 800d85a:	4413      	add	r3, r2
 800d85c:	330c      	adds	r3, #12
 800d85e:	881b      	ldrh	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <inc_lock+0xe0>
 800d864:	2300      	movs	r3, #0
 800d866:	e015      	b.n	800d894 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d108      	bne.n	800d880 <inc_lock+0xf8>
 800d86e:	4a0c      	ldr	r2, [pc, #48]	; (800d8a0 <inc_lock+0x118>)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	4413      	add	r3, r2
 800d876:	330c      	adds	r3, #12
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	e001      	b.n	800d884 <inc_lock+0xfc>
 800d880:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d884:	4906      	ldr	r1, [pc, #24]	; (800d8a0 <inc_lock+0x118>)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	011b      	lsls	r3, r3, #4
 800d88a:	440b      	add	r3, r1
 800d88c:	330c      	adds	r3, #12
 800d88e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3301      	adds	r3, #1
}
 800d894:	4618      	mov	r0, r3
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200136fc 	.word	0x200136fc

0800d8a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d825      	bhi.n	800d904 <dec_lock+0x60>
		n = Files[i].ctr;
 800d8b8:	4a17      	ldr	r2, [pc, #92]	; (800d918 <dec_lock+0x74>)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	011b      	lsls	r3, r3, #4
 800d8be:	4413      	add	r3, r2
 800d8c0:	330c      	adds	r3, #12
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d8c6:	89fb      	ldrh	r3, [r7, #14]
 800d8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8cc:	d101      	bne.n	800d8d2 <dec_lock+0x2e>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d8d2:	89fb      	ldrh	r3, [r7, #14]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <dec_lock+0x3a>
 800d8d8:	89fb      	ldrh	r3, [r7, #14]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d8de:	4a0e      	ldr	r2, [pc, #56]	; (800d918 <dec_lock+0x74>)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	4413      	add	r3, r2
 800d8e6:	330c      	adds	r3, #12
 800d8e8:	89fa      	ldrh	r2, [r7, #14]
 800d8ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d8ec:	89fb      	ldrh	r3, [r7, #14]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d105      	bne.n	800d8fe <dec_lock+0x5a>
 800d8f2:	4a09      	ldr	r2, [pc, #36]	; (800d918 <dec_lock+0x74>)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	4413      	add	r3, r2
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	737b      	strb	r3, [r7, #13]
 800d902:	e001      	b.n	800d908 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d904:	2302      	movs	r3, #2
 800d906:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d908:	7b7b      	ldrb	r3, [r7, #13]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	200136fc 	.word	0x200136fc

0800d91c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e010      	b.n	800d94c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d92a:	4a0d      	ldr	r2, [pc, #52]	; (800d960 <clear_lock+0x44>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	4413      	add	r3, r2
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d105      	bne.n	800d946 <clear_lock+0x2a>
 800d93a:	4a09      	ldr	r2, [pc, #36]	; (800d960 <clear_lock+0x44>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	011b      	lsls	r3, r3, #4
 800d940:	4413      	add	r3, r2
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3301      	adds	r3, #1
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d9eb      	bls.n	800d92a <clear_lock+0xe>
	}
}
 800d952:	bf00      	nop
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	200136fc 	.word	0x200136fc

0800d964 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	78db      	ldrb	r3, [r3, #3]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d034      	beq.n	800d9e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7858      	ldrb	r0, [r3, #1]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d988:	2301      	movs	r3, #1
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	f7ff fd40 	bl	800d410 <disk_write>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d996:	2301      	movs	r3, #1
 800d998:	73fb      	strb	r3, [r7, #15]
 800d99a:	e022      	b.n	800d9e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d217      	bcs.n	800d9e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	789b      	ldrb	r3, [r3, #2]
 800d9b6:	613b      	str	r3, [r7, #16]
 800d9b8:	e010      	b.n	800d9dc <sync_window+0x78>
					wsect += fs->fsize;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7858      	ldrb	r0, [r3, #1]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	f7ff fd1d 	bl	800d410 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	613b      	str	r3, [r7, #16]
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d8eb      	bhi.n	800d9ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3718      	adds	r7, #24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d01b      	beq.n	800da3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff ffad 	bl	800d964 <sync_window>
 800da0a:	4603      	mov	r3, r0
 800da0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d113      	bne.n	800da3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7858      	ldrb	r0, [r3, #1]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da1e:	2301      	movs	r3, #1
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	f7ff fcd5 	bl	800d3d0 <disk_read>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da2c:	f04f 33ff 	mov.w	r3, #4294967295
 800da30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da32:	2301      	movs	r3, #1
 800da34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ff87 	bl	800d964 <sync_window>
 800da56:	4603      	mov	r3, r0
 800da58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d159      	bne.n	800db14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b03      	cmp	r3, #3
 800da66:	d149      	bne.n	800dafc <sync_fs+0xb4>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	791b      	ldrb	r3, [r3, #4]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d145      	bne.n	800dafc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	461a      	mov	r2, r3
 800da7c:	2100      	movs	r1, #0
 800da7e:	f7ff fda8 	bl	800d5d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	333c      	adds	r3, #60	; 0x3c
 800da86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800da8e:	4618      	mov	r0, r3
 800da90:	f7ff fd37 	bl	800d502 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	333c      	adds	r3, #60	; 0x3c
 800da98:	4921      	ldr	r1, [pc, #132]	; (800db20 <sync_fs+0xd8>)
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7ff fd4c 	bl	800d538 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	333c      	adds	r3, #60	; 0x3c
 800daa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800daa8:	491e      	ldr	r1, [pc, #120]	; (800db24 <sync_fs+0xdc>)
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fd44 	bl	800d538 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	333c      	adds	r3, #60	; 0x3c
 800dab4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	4619      	mov	r1, r3
 800dabe:	4610      	mov	r0, r2
 800dac0:	f7ff fd3a 	bl	800d538 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	333c      	adds	r3, #60	; 0x3c
 800dac8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	4619      	mov	r1, r3
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7ff fd30 	bl	800d538 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7858      	ldrb	r0, [r3, #1]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf0:	2301      	movs	r3, #1
 800daf2:	f7ff fc8d 	bl	800d410 <disk_write>
			fs->fsi_flag = 0;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	785b      	ldrb	r3, [r3, #1]
 800db00:	2200      	movs	r2, #0
 800db02:	2100      	movs	r1, #0
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff fca3 	bl	800d450 <disk_ioctl>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <sync_fs+0xcc>
 800db10:	2301      	movs	r3, #1
 800db12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db14:	7bfb      	ldrb	r3, [r7, #15]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	41615252 	.word	0x41615252
 800db24:	61417272 	.word	0x61417272

0800db28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	3b02      	subs	r3, #2
 800db36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a1b      	ldr	r3, [r3, #32]
 800db3c:	3b02      	subs	r3, #2
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	429a      	cmp	r2, r3
 800db42:	d301      	bcc.n	800db48 <clust2sect+0x20>
 800db44:	2300      	movs	r3, #0
 800db46:	e008      	b.n	800db5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	895b      	ldrh	r3, [r3, #10]
 800db4c:	461a      	mov	r2, r3
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	fb03 f202 	mul.w	r2, r3, r2
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db58:	4413      	add	r3, r2
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b086      	sub	sp, #24
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d904      	bls.n	800db86 <get_fat+0x20>
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	6a1b      	ldr	r3, [r3, #32]
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	429a      	cmp	r2, r3
 800db84:	d302      	bcc.n	800db8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800db86:	2301      	movs	r3, #1
 800db88:	617b      	str	r3, [r7, #20]
 800db8a:	e0b7      	b.n	800dcfc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800db8c:	f04f 33ff 	mov.w	r3, #4294967295
 800db90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d05a      	beq.n	800dc50 <get_fat+0xea>
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d07d      	beq.n	800dc9a <get_fat+0x134>
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	f040 80a2 	bne.w	800dce8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	085b      	lsrs	r3, r3, #1
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	4413      	add	r3, r2
 800dbb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbc2:	4413      	add	r3, r2
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6938      	ldr	r0, [r7, #16]
 800dbc8:	f7ff ff10 	bl	800d9ec <move_window>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f040 808d 	bne.w	800dcee <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	60fa      	str	r2, [r7, #12]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	8992      	ldrh	r2, [r2, #12]
 800dbde:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbe2:	fb02 f201 	mul.w	r2, r2, r1
 800dbe6:	1a9b      	subs	r3, r3, r2
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	4413      	add	r3, r2
 800dbec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	899b      	ldrh	r3, [r3, #12]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc02:	4413      	add	r3, r2
 800dc04:	4619      	mov	r1, r3
 800dc06:	6938      	ldr	r0, [r7, #16]
 800dc08:	f7ff fef0 	bl	800d9ec <move_window>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d16f      	bne.n	800dcf2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	899b      	ldrh	r3, [r3, #12]
 800dc16:	461a      	mov	r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc1e:	fb02 f201 	mul.w	r2, r2, r1
 800dc22:	1a9b      	subs	r3, r3, r2
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	4413      	add	r3, r2
 800dc28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc2c:	021b      	lsls	r3, r3, #8
 800dc2e:	461a      	mov	r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <get_fat+0xe0>
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	091b      	lsrs	r3, r3, #4
 800dc44:	e002      	b.n	800dc4c <get_fat+0xe6>
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc4c:	617b      	str	r3, [r7, #20]
			break;
 800dc4e:	e055      	b.n	800dcfc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	899b      	ldrh	r3, [r3, #12]
 800dc58:	085b      	lsrs	r3, r3, #1
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc64:	4413      	add	r3, r2
 800dc66:	4619      	mov	r1, r3
 800dc68:	6938      	ldr	r0, [r7, #16]
 800dc6a:	f7ff febf 	bl	800d9ec <move_window>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d140      	bne.n	800dcf6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	005b      	lsls	r3, r3, #1
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	8992      	ldrh	r2, [r2, #12]
 800dc82:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc86:	fb02 f200 	mul.w	r2, r2, r0
 800dc8a:	1a9b      	subs	r3, r3, r2
 800dc8c:	440b      	add	r3, r1
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff fbfc 	bl	800d48c <ld_word>
 800dc94:	4603      	mov	r3, r0
 800dc96:	617b      	str	r3, [r7, #20]
			break;
 800dc98:	e030      	b.n	800dcfc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	899b      	ldrh	r3, [r3, #12]
 800dca2:	089b      	lsrs	r3, r3, #2
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	4619      	mov	r1, r3
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcae:	4413      	add	r3, r2
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	6938      	ldr	r0, [r7, #16]
 800dcb4:	f7ff fe9a 	bl	800d9ec <move_window>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d11d      	bne.n	800dcfa <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	8992      	ldrh	r2, [r2, #12]
 800dccc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcd0:	fb02 f200 	mul.w	r2, r2, r0
 800dcd4:	1a9b      	subs	r3, r3, r2
 800dcd6:	440b      	add	r3, r1
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7ff fbef 	bl	800d4bc <ld_dword>
 800dcde:	4603      	mov	r3, r0
 800dce0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dce4:	617b      	str	r3, [r7, #20]
			break;
 800dce6:	e009      	b.n	800dcfc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dce8:	2301      	movs	r3, #1
 800dcea:	617b      	str	r3, [r7, #20]
 800dcec:	e006      	b.n	800dcfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcee:	bf00      	nop
 800dcf0:	e004      	b.n	800dcfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcf2:	bf00      	nop
 800dcf4:	e002      	b.n	800dcfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcf6:	bf00      	nop
 800dcf8:	e000      	b.n	800dcfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dcfa:	bf00      	nop
		}
	}

	return val;
 800dcfc:	697b      	ldr	r3, [r7, #20]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd06:	b590      	push	{r4, r7, lr}
 800dd08:	b089      	sub	sp, #36	; 0x24
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd12:	2302      	movs	r3, #2
 800dd14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	f240 8106 	bls.w	800df2a <put_fat+0x224>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6a1b      	ldr	r3, [r3, #32]
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	f080 8100 	bcs.w	800df2a <put_fat+0x224>
		switch (fs->fs_type) {
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	f000 8088 	beq.w	800de44 <put_fat+0x13e>
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	f000 80b0 	beq.w	800de9a <put_fat+0x194>
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	f040 80f5 	bne.w	800df2a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	61bb      	str	r3, [r7, #24]
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	085b      	lsrs	r3, r3, #1
 800dd48:	69ba      	ldr	r2, [r7, #24]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	4619      	mov	r1, r3
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd5e:	4413      	add	r3, r2
 800dd60:	4619      	mov	r1, r3
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff fe42 	bl	800d9ec <move_window>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd6c:	7ffb      	ldrb	r3, [r7, #31]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f040 80d4 	bne.w	800df1c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	61ba      	str	r2, [r7, #24]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	8992      	ldrh	r2, [r2, #12]
 800dd84:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd88:	fb02 f200 	mul.w	r2, r2, r0
 800dd8c:	1a9b      	subs	r3, r3, r2
 800dd8e:	440b      	add	r3, r1
 800dd90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00d      	beq.n	800ddb8 <put_fat+0xb2>
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	b25b      	sxtb	r3, r3
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	b25a      	sxtb	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	011b      	lsls	r3, r3, #4
 800ddae:	b25b      	sxtb	r3, r3
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	b25b      	sxtb	r3, r3
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	e001      	b.n	800ddbc <put_fat+0xb6>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	899b      	ldrh	r3, [r3, #12]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddd6:	4413      	add	r3, r2
 800ddd8:	4619      	mov	r1, r3
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7ff fe06 	bl	800d9ec <move_window>
 800dde0:	4603      	mov	r3, r0
 800dde2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dde4:	7ffb      	ldrb	r3, [r7, #31]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f040 809a 	bne.w	800df20 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	899b      	ldrh	r3, [r3, #12]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddfe:	fb02 f200 	mul.w	r2, r2, r0
 800de02:	1a9b      	subs	r3, r3, r2
 800de04:	440b      	add	r3, r1
 800de06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <put_fat+0x114>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	091b      	lsrs	r3, r3, #4
 800de16:	b2db      	uxtb	r3, r3
 800de18:	e00e      	b.n	800de38 <put_fat+0x132>
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	b25b      	sxtb	r3, r3
 800de20:	f023 030f 	bic.w	r3, r3, #15
 800de24:	b25a      	sxtb	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	0a1b      	lsrs	r3, r3, #8
 800de2a:	b25b      	sxtb	r3, r3
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	b25b      	sxtb	r3, r3
 800de32:	4313      	orrs	r3, r2
 800de34:	b25b      	sxtb	r3, r3
 800de36:	b2db      	uxtb	r3, r3
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2201      	movs	r2, #1
 800de40:	70da      	strb	r2, [r3, #3]
			break;
 800de42:	e072      	b.n	800df2a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	899b      	ldrh	r3, [r3, #12]
 800de4c:	085b      	lsrs	r3, r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	4619      	mov	r1, r3
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	fbb3 f3f1 	udiv	r3, r3, r1
 800de58:	4413      	add	r3, r2
 800de5a:	4619      	mov	r1, r3
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f7ff fdc5 	bl	800d9ec <move_window>
 800de62:	4603      	mov	r3, r0
 800de64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de66:	7ffb      	ldrb	r3, [r7, #31]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d15b      	bne.n	800df24 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	8992      	ldrh	r2, [r2, #12]
 800de7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de7e:	fb02 f200 	mul.w	r2, r2, r0
 800de82:	1a9b      	subs	r3, r3, r2
 800de84:	440b      	add	r3, r1
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	b292      	uxth	r2, r2
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff fb38 	bl	800d502 <st_word>
			fs->wflag = 1;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	70da      	strb	r2, [r3, #3]
			break;
 800de98:	e047      	b.n	800df2a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	899b      	ldrh	r3, [r3, #12]
 800dea2:	089b      	lsrs	r3, r3, #2
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	4619      	mov	r1, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800deae:	4413      	add	r3, r2
 800deb0:	4619      	mov	r1, r3
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff fd9a 	bl	800d9ec <move_window>
 800deb8:	4603      	mov	r3, r0
 800deba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800debc:	7ffb      	ldrb	r3, [r7, #31]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d132      	bne.n	800df28 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	8992      	ldrh	r2, [r2, #12]
 800ded6:	fbb3 f0f2 	udiv	r0, r3, r2
 800deda:	fb02 f200 	mul.w	r2, r2, r0
 800dede:	1a9b      	subs	r3, r3, r2
 800dee0:	440b      	add	r3, r1
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff faea 	bl	800d4bc <ld_dword>
 800dee8:	4603      	mov	r3, r0
 800deea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800deee:	4323      	orrs	r3, r4
 800def0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	8992      	ldrh	r2, [r2, #12]
 800df00:	fbb3 f0f2 	udiv	r0, r3, r2
 800df04:	fb02 f200 	mul.w	r2, r2, r0
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	440b      	add	r3, r1
 800df0c:	6879      	ldr	r1, [r7, #4]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7ff fb12 	bl	800d538 <st_dword>
			fs->wflag = 1;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	70da      	strb	r2, [r3, #3]
			break;
 800df1a:	e006      	b.n	800df2a <put_fat+0x224>
			if (res != FR_OK) break;
 800df1c:	bf00      	nop
 800df1e:	e004      	b.n	800df2a <put_fat+0x224>
			if (res != FR_OK) break;
 800df20:	bf00      	nop
 800df22:	e002      	b.n	800df2a <put_fat+0x224>
			if (res != FR_OK) break;
 800df24:	bf00      	nop
 800df26:	e000      	b.n	800df2a <put_fat+0x224>
			if (res != FR_OK) break;
 800df28:	bf00      	nop
		}
	}
	return res;
 800df2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3724      	adds	r7, #36	; 0x24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd90      	pop	{r4, r7, pc}

0800df34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d904      	bls.n	800df5a <remove_chain+0x26>
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	6a1b      	ldr	r3, [r3, #32]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	429a      	cmp	r2, r3
 800df58:	d301      	bcc.n	800df5e <remove_chain+0x2a>
 800df5a:	2302      	movs	r3, #2
 800df5c:	e04b      	b.n	800dff6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00c      	beq.n	800df7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800df64:	f04f 32ff 	mov.w	r2, #4294967295
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	69b8      	ldr	r0, [r7, #24]
 800df6c:	f7ff fecb 	bl	800dd06 <put_fat>
 800df70:	4603      	mov	r3, r0
 800df72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df74:	7ffb      	ldrb	r3, [r7, #31]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <remove_chain+0x4a>
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	e03b      	b.n	800dff6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800df7e:	68b9      	ldr	r1, [r7, #8]
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7ff fdf0 	bl	800db66 <get_fat>
 800df86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d031      	beq.n	800dff2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d101      	bne.n	800df98 <remove_chain+0x64>
 800df94:	2302      	movs	r3, #2
 800df96:	e02e      	b.n	800dff6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d101      	bne.n	800dfa4 <remove_chain+0x70>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e028      	b.n	800dff6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	68b9      	ldr	r1, [r7, #8]
 800dfa8:	69b8      	ldr	r0, [r7, #24]
 800dfaa:	f7ff feac 	bl	800dd06 <put_fat>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dfb2:	7ffb      	ldrb	r3, [r7, #31]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <remove_chain+0x88>
 800dfb8:	7ffb      	ldrb	r3, [r7, #31]
 800dfba:	e01c      	b.n	800dff6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	699a      	ldr	r2, [r3, #24]
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	3b02      	subs	r3, #2
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d20b      	bcs.n	800dfe2 <remove_chain+0xae>
			fs->free_clst++;
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	699b      	ldr	r3, [r3, #24]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	791b      	ldrb	r3, [r3, #4]
 800dfd8:	f043 0301 	orr.w	r3, r3, #1
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d3c6      	bcc.n	800df7e <remove_chain+0x4a>
 800dff0:	e000      	b.n	800dff4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dff2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3720      	adds	r7, #32
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b088      	sub	sp, #32
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10d      	bne.n	800e030 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d004      	beq.n	800e02a <create_chain+0x2c>
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	69ba      	ldr	r2, [r7, #24]
 800e026:	429a      	cmp	r2, r3
 800e028:	d31b      	bcc.n	800e062 <create_chain+0x64>
 800e02a:	2301      	movs	r3, #1
 800e02c:	61bb      	str	r3, [r7, #24]
 800e02e:	e018      	b.n	800e062 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7ff fd97 	bl	800db66 <get_fat>
 800e038:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d801      	bhi.n	800e044 <create_chain+0x46>
 800e040:	2301      	movs	r3, #1
 800e042:	e070      	b.n	800e126 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04a:	d101      	bne.n	800e050 <create_chain+0x52>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	e06a      	b.n	800e126 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d201      	bcs.n	800e05e <create_chain+0x60>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	e063      	b.n	800e126 <create_chain+0x128>
		scl = clst;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	3301      	adds	r3, #1
 800e06a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6a1b      	ldr	r3, [r3, #32]
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	429a      	cmp	r2, r3
 800e074:	d307      	bcc.n	800e086 <create_chain+0x88>
				ncl = 2;
 800e076:	2302      	movs	r3, #2
 800e078:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e07a:	69fa      	ldr	r2, [r7, #28]
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d901      	bls.n	800e086 <create_chain+0x88>
 800e082:	2300      	movs	r3, #0
 800e084:	e04f      	b.n	800e126 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e086:	69f9      	ldr	r1, [r7, #28]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff fd6c 	bl	800db66 <get_fat>
 800e08e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00e      	beq.n	800e0b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d003      	beq.n	800e0a4 <create_chain+0xa6>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a2:	d101      	bne.n	800e0a8 <create_chain+0xaa>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	e03e      	b.n	800e126 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e0a8:	69fa      	ldr	r2, [r7, #28]
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d1da      	bne.n	800e066 <create_chain+0x68>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e038      	b.n	800e126 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e0b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ba:	69f9      	ldr	r1, [r7, #28]
 800e0bc:	6938      	ldr	r0, [r7, #16]
 800e0be:	f7ff fe22 	bl	800dd06 <put_fat>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e0c6:	7dfb      	ldrb	r3, [r7, #23]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d109      	bne.n	800e0e0 <create_chain+0xe2>
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d006      	beq.n	800e0e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6938      	ldr	r0, [r7, #16]
 800e0d8:	f7ff fe15 	bl	800dd06 <put_fat>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e0e0:	7dfb      	ldrb	r3, [r7, #23]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d116      	bne.n	800e114 <create_chain+0x116>
		fs->last_clst = ncl;
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	699a      	ldr	r2, [r3, #24]
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	3b02      	subs	r3, #2
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d804      	bhi.n	800e104 <create_chain+0x106>
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	699b      	ldr	r3, [r3, #24]
 800e0fe:	1e5a      	subs	r2, r3, #1
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	791b      	ldrb	r3, [r3, #4]
 800e108:	f043 0301 	orr.w	r3, r3, #1
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	711a      	strb	r2, [r3, #4]
 800e112:	e007      	b.n	800e124 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d102      	bne.n	800e120 <create_chain+0x122>
 800e11a:	f04f 33ff 	mov.w	r3, #4294967295
 800e11e:	e000      	b.n	800e122 <create_chain+0x124>
 800e120:	2301      	movs	r3, #1
 800e122:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e124:	69fb      	ldr	r3, [r7, #28]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3720      	adds	r7, #32
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e12e:	b480      	push	{r7}
 800e130:	b087      	sub	sp, #28
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e142:	3304      	adds	r3, #4
 800e144:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	899b      	ldrh	r3, [r3, #12]
 800e14a:	461a      	mov	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	8952      	ldrh	r2, [r2, #10]
 800e156:	fbb3 f3f2 	udiv	r3, r3, r2
 800e15a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	1d1a      	adds	r2, r3, #4
 800e160:	613a      	str	r2, [r7, #16]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <clmt_clust+0x42>
 800e16c:	2300      	movs	r3, #0
 800e16e:	e010      	b.n	800e192 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	429a      	cmp	r2, r3
 800e176:	d307      	bcc.n	800e188 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	3304      	adds	r3, #4
 800e184:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e186:	e7e9      	b.n	800e15c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e188:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	4413      	add	r3, r2
}
 800e192:	4618      	mov	r0, r3
 800e194:	371c      	adds	r7, #28
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b086      	sub	sp, #24
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1b4:	d204      	bcs.n	800e1c0 <dir_sdi+0x22>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	f003 031f 	and.w	r3, r3, #31
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e1c0:	2302      	movs	r3, #2
 800e1c2:	e071      	b.n	800e2a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <dir_sdi+0x46>
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d902      	bls.n	800e1e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10c      	bne.n	800e204 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	095b      	lsrs	r3, r3, #5
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	8912      	ldrh	r2, [r2, #8]
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d301      	bcc.n	800e1fa <dir_sdi+0x5c>
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	e056      	b.n	800e2a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	61da      	str	r2, [r3, #28]
 800e202:	e02d      	b.n	800e260 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	895b      	ldrh	r3, [r3, #10]
 800e208:	461a      	mov	r2, r3
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	899b      	ldrh	r3, [r3, #12]
 800e20e:	fb03 f302 	mul.w	r3, r3, r2
 800e212:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e214:	e019      	b.n	800e24a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6979      	ldr	r1, [r7, #20]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fca3 	bl	800db66 <get_fat>
 800e220:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e228:	d101      	bne.n	800e22e <dir_sdi+0x90>
 800e22a:	2301      	movs	r3, #1
 800e22c:	e03c      	b.n	800e2a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d904      	bls.n	800e23e <dir_sdi+0xa0>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d301      	bcc.n	800e242 <dir_sdi+0xa4>
 800e23e:	2302      	movs	r3, #2
 800e240:	e032      	b.n	800e2a8 <dir_sdi+0x10a>
			ofs -= csz;
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d2e1      	bcs.n	800e216 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e252:	6979      	ldr	r1, [r7, #20]
 800e254:	6938      	ldr	r0, [r7, #16]
 800e256:	f7ff fc67 	bl	800db28 <clust2sect>
 800e25a:	4602      	mov	r2, r0
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d101      	bne.n	800e272 <dir_sdi+0xd4>
 800e26e:	2302      	movs	r3, #2
 800e270:	e01a      	b.n	800e2a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	69da      	ldr	r2, [r3, #28]
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	4619      	mov	r1, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e282:	441a      	add	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	899b      	ldrh	r3, [r3, #12]
 800e292:	461a      	mov	r2, r3
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	fbb3 f0f2 	udiv	r0, r3, r2
 800e29a:	fb02 f200 	mul.w	r2, r2, r0
 800e29e:	1a9b      	subs	r3, r3, r2
 800e2a0:	18ca      	adds	r2, r1, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	3320      	adds	r3, #32
 800e2c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	69db      	ldr	r3, [r3, #28]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <dir_next+0x28>
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e2d6:	d301      	bcc.n	800e2dc <dir_next+0x2c>
 800e2d8:	2304      	movs	r3, #4
 800e2da:	e0bb      	b.n	800e454 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	899b      	ldrh	r3, [r3, #12]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2e8:	fb02 f201 	mul.w	r2, r2, r1
 800e2ec:	1a9b      	subs	r3, r3, r2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f040 809d 	bne.w	800e42e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	69db      	ldr	r3, [r3, #28]
 800e2f8:	1c5a      	adds	r2, r3, #1
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10b      	bne.n	800e31e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	095b      	lsrs	r3, r3, #5
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	8912      	ldrh	r2, [r2, #8]
 800e30e:	4293      	cmp	r3, r2
 800e310:	f0c0 808d 	bcc.w	800e42e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	61da      	str	r2, [r3, #28]
 800e31a:	2304      	movs	r3, #4
 800e31c:	e09a      	b.n	800e454 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	899b      	ldrh	r3, [r3, #12]
 800e322:	461a      	mov	r2, r3
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	fbb3 f3f2 	udiv	r3, r3, r2
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	8952      	ldrh	r2, [r2, #10]
 800e32e:	3a01      	subs	r2, #1
 800e330:	4013      	ands	r3, r2
 800e332:	2b00      	cmp	r3, #0
 800e334:	d17b      	bne.n	800e42e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	4619      	mov	r1, r3
 800e33e:	4610      	mov	r0, r2
 800e340:	f7ff fc11 	bl	800db66 <get_fat>
 800e344:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d801      	bhi.n	800e350 <dir_next+0xa0>
 800e34c:	2302      	movs	r3, #2
 800e34e:	e081      	b.n	800e454 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d101      	bne.n	800e35c <dir_next+0xac>
 800e358:	2301      	movs	r3, #1
 800e35a:	e07b      	b.n	800e454 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6a1b      	ldr	r3, [r3, #32]
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	429a      	cmp	r2, r3
 800e364:	d359      	bcc.n	800e41a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d104      	bne.n	800e376 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	61da      	str	r2, [r3, #28]
 800e372:	2304      	movs	r3, #4
 800e374:	e06e      	b.n	800e454 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	4619      	mov	r1, r3
 800e37e:	4610      	mov	r0, r2
 800e380:	f7ff fe3d 	bl	800dffe <create_chain>
 800e384:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <dir_next+0xe0>
 800e38c:	2307      	movs	r3, #7
 800e38e:	e061      	b.n	800e454 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d101      	bne.n	800e39a <dir_next+0xea>
 800e396:	2302      	movs	r3, #2
 800e398:	e05c      	b.n	800e454 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a0:	d101      	bne.n	800e3a6 <dir_next+0xf6>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e056      	b.n	800e454 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fadc 	bl	800d964 <sync_window>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <dir_next+0x106>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e04e      	b.n	800e454 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	899b      	ldrh	r3, [r3, #12]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	f7ff f905 	bl	800d5d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	613b      	str	r3, [r7, #16]
 800e3cc:	6979      	ldr	r1, [r7, #20]
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7ff fbaa 	bl	800db28 <clust2sect>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3da:	e012      	b.n	800e402 <dir_next+0x152>
						fs->wflag = 1;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7ff fabe 	bl	800d964 <sync_window>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <dir_next+0x142>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e030      	b.n	800e454 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	613b      	str	r3, [r7, #16]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	639a      	str	r2, [r3, #56]	; 0x38
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	895b      	ldrh	r3, [r3, #10]
 800e406:	461a      	mov	r2, r3
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d3e6      	bcc.n	800e3dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	1ad2      	subs	r2, r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	697a      	ldr	r2, [r7, #20]
 800e41e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e420:	6979      	ldr	r1, [r7, #20]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7ff fb80 	bl	800db28 <clust2sect>
 800e428:	4602      	mov	r2, r0
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	461a      	mov	r2, r3
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	fbb3 f0f2 	udiv	r0, r3, r2
 800e446:	fb02 f200 	mul.w	r2, r2, r0
 800e44a:	1a9b      	subs	r3, r3, r2
 800e44c:	18ca      	adds	r2, r1, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e46c:	2100      	movs	r1, #0
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff fe95 	bl	800e19e <dir_sdi>
 800e474:	4603      	mov	r3, r0
 800e476:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e478:	7dfb      	ldrb	r3, [r7, #23]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d12b      	bne.n	800e4d6 <dir_alloc+0x7a>
		n = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	4619      	mov	r1, r3
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7ff faaf 	bl	800d9ec <move_window>
 800e48e:	4603      	mov	r3, r0
 800e490:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e492:	7dfb      	ldrb	r3, [r7, #23]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d11d      	bne.n	800e4d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2be5      	cmp	r3, #229	; 0xe5
 800e4a0:	d004      	beq.n	800e4ac <dir_alloc+0x50>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d107      	bne.n	800e4bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	613b      	str	r3, [r7, #16]
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d102      	bne.n	800e4c0 <dir_alloc+0x64>
 800e4ba:	e00c      	b.n	800e4d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e4bc:	2300      	movs	r3, #0
 800e4be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7ff fef4 	bl	800e2b0 <dir_next>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0d7      	beq.n	800e482 <dir_alloc+0x26>
 800e4d2:	e000      	b.n	800e4d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e4d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	d101      	bne.n	800e4e0 <dir_alloc+0x84>
 800e4dc:	2307      	movs	r3, #7
 800e4de:	75fb      	strb	r3, [r7, #23]
	return res;
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3718      	adds	r7, #24
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	331a      	adds	r3, #26
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fe ffc7 	bl	800d48c <ld_word>
 800e4fe:	4603      	mov	r3, r0
 800e500:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b03      	cmp	r3, #3
 800e508:	d109      	bne.n	800e51e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	3314      	adds	r3, #20
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe ffbc 	bl	800d48c <ld_word>
 800e514:	4603      	mov	r3, r0
 800e516:	041b      	lsls	r3, r3, #16
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e51e:	68fb      	ldr	r3, [r7, #12]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	331a      	adds	r3, #26
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	b292      	uxth	r2, r2
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe ffdf 	bl	800d502 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b03      	cmp	r3, #3
 800e54a:	d109      	bne.n	800e560 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	f103 0214 	add.w	r2, r3, #20
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	0c1b      	lsrs	r3, r3, #16
 800e556:	b29b      	uxth	r3, r3
 800e558:	4619      	mov	r1, r3
 800e55a:	4610      	mov	r0, r2
 800e55c:	f7fe ffd1 	bl	800d502 <st_word>
	}
}
 800e560:	bf00      	nop
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	331a      	adds	r3, #26
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe ff88 	bl	800d48c <ld_word>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <cmp_lfn+0x1e>
 800e582:	2300      	movs	r3, #0
 800e584:	e059      	b.n	800e63a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e58e:	1e5a      	subs	r2, r3, #1
 800e590:	4613      	mov	r3, r2
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e59c:	2301      	movs	r3, #1
 800e59e:	81fb      	strh	r3, [r7, #14]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	613b      	str	r3, [r7, #16]
 800e5a4:	e033      	b.n	800e60e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e5a6:	4a27      	ldr	r2, [pc, #156]	; (800e644 <cmp_lfn+0xdc>)
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fe ff69 	bl	800d48c <ld_word>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e5be:	89fb      	ldrh	r3, [r7, #14]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01a      	beq.n	800e5fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2bfe      	cmp	r3, #254	; 0xfe
 800e5c8:	d812      	bhi.n	800e5f0 <cmp_lfn+0x88>
 800e5ca:	89bb      	ldrh	r3, [r7, #12]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f002 fd23 	bl	8011018 <ff_wtoupper>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	461c      	mov	r4, r3
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	617a      	str	r2, [r7, #20]
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f002 fd17 	bl	8011018 <ff_wtoupper>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	429c      	cmp	r4, r3
 800e5ee:	d001      	beq.n	800e5f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	e022      	b.n	800e63a <cmp_lfn+0xd2>
			}
			wc = uc;
 800e5f4:	89bb      	ldrh	r3, [r7, #12]
 800e5f6:	81fb      	strh	r3, [r7, #14]
 800e5f8:	e006      	b.n	800e608 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e5fa:	89bb      	ldrh	r3, [r7, #12]
 800e5fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e600:	4293      	cmp	r3, r2
 800e602:	d001      	beq.n	800e608 <cmp_lfn+0xa0>
 800e604:	2300      	movs	r3, #0
 800e606:	e018      	b.n	800e63a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	3301      	adds	r3, #1
 800e60c:	613b      	str	r3, [r7, #16]
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	2b0c      	cmp	r3, #12
 800e612:	d9c8      	bls.n	800e5a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <cmp_lfn+0xd0>
 800e620:	89fb      	ldrh	r3, [r7, #14]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d008      	beq.n	800e638 <cmp_lfn+0xd0>
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	4413      	add	r3, r2
 800e62e:	881b      	ldrh	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <cmp_lfn+0xd0>
 800e634:	2300      	movs	r3, #0
 800e636:	e000      	b.n	800e63a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e638:	2301      	movs	r3, #1
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	371c      	adds	r7, #28
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd90      	pop	{r4, r7, pc}
 800e642:	bf00      	nop
 800e644:	0801732c 	.word	0x0801732c

0800e648 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	331a      	adds	r3, #26
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe ff18 	bl	800d48c <ld_word>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <pick_lfn+0x1e>
 800e662:	2300      	movs	r3, #0
 800e664:	e04d      	b.n	800e702 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e66e:	1e5a      	subs	r2, r3, #1
 800e670:	4613      	mov	r3, r2
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	4413      	add	r3, r2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4413      	add	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e67c:	2301      	movs	r3, #1
 800e67e:	81fb      	strh	r3, [r7, #14]
 800e680:	2300      	movs	r3, #0
 800e682:	613b      	str	r3, [r7, #16]
 800e684:	e028      	b.n	800e6d8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e686:	4a21      	ldr	r2, [pc, #132]	; (800e70c <pick_lfn+0xc4>)
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	4413      	add	r3, r2
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	4413      	add	r3, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe fef9 	bl	800d48c <ld_word>
 800e69a:	4603      	mov	r3, r0
 800e69c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e69e:	89fb      	ldrh	r3, [r7, #14]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00f      	beq.n	800e6c4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	2bfe      	cmp	r3, #254	; 0xfe
 800e6a8:	d901      	bls.n	800e6ae <pick_lfn+0x66>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e029      	b.n	800e702 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e6ae:	89bb      	ldrh	r3, [r7, #12]
 800e6b0:	81fb      	strh	r3, [r7, #14]
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	617a      	str	r2, [r7, #20]
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	89fa      	ldrh	r2, [r7, #14]
 800e6c0:	801a      	strh	r2, [r3, #0]
 800e6c2:	e006      	b.n	800e6d2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e6c4:	89bb      	ldrh	r3, [r7, #12]
 800e6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d001      	beq.n	800e6d2 <pick_lfn+0x8a>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e017      	b.n	800e702 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	613b      	str	r3, [r7, #16]
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2b0c      	cmp	r3, #12
 800e6dc:	d9d3      	bls.n	800e686 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2bfe      	cmp	r3, #254	; 0xfe
 800e6ee:	d901      	bls.n	800e6f4 <pick_lfn+0xac>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e006      	b.n	800e702 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e700:	2301      	movs	r3, #1
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	0801732c 	.word	0x0801732c

0800e710 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4611      	mov	r1, r2
 800e71c:	461a      	mov	r2, r3
 800e71e:	460b      	mov	r3, r1
 800e720:	71fb      	strb	r3, [r7, #7]
 800e722:	4613      	mov	r3, r2
 800e724:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	330d      	adds	r3, #13
 800e72a:	79ba      	ldrb	r2, [r7, #6]
 800e72c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	330b      	adds	r3, #11
 800e732:	220f      	movs	r2, #15
 800e734:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	330c      	adds	r3, #12
 800e73a:	2200      	movs	r2, #0
 800e73c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	331a      	adds	r3, #26
 800e742:	2100      	movs	r1, #0
 800e744:	4618      	mov	r0, r3
 800e746:	f7fe fedc 	bl	800d502 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	1e5a      	subs	r2, r3, #1
 800e74e:	4613      	mov	r3, r2
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	4413      	add	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	82fb      	strh	r3, [r7, #22]
 800e75e:	2300      	movs	r3, #0
 800e760:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e762:	8afb      	ldrh	r3, [r7, #22]
 800e764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e768:	4293      	cmp	r3, r2
 800e76a:	d007      	beq.n	800e77c <put_lfn+0x6c>
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	61fa      	str	r2, [r7, #28]
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4413      	add	r3, r2
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e77c:	4a17      	ldr	r2, [pc, #92]	; (800e7dc <put_lfn+0xcc>)
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	4413      	add	r3, r2
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	4413      	add	r3, r2
 800e78a:	8afa      	ldrh	r2, [r7, #22]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fe feb7 	bl	800d502 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e794:	8afb      	ldrh	r3, [r7, #22]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <put_lfn+0x90>
 800e79a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e79e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	61bb      	str	r3, [r7, #24]
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	2b0c      	cmp	r3, #12
 800e7aa:	d9da      	bls.n	800e762 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e7ac:	8afb      	ldrh	r3, [r7, #22]
 800e7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d006      	beq.n	800e7c4 <put_lfn+0xb4>
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	4413      	add	r3, r2
 800e7be:	881b      	ldrh	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d103      	bne.n	800e7cc <put_lfn+0xbc>
 800e7c4:	79fb      	ldrb	r3, [r7, #7]
 800e7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	79fa      	ldrb	r2, [r7, #7]
 800e7d0:	701a      	strb	r2, [r3, #0]
}
 800e7d2:	bf00      	nop
 800e7d4:	3720      	adds	r7, #32
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	0801732c 	.word	0x0801732c

0800e7e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08c      	sub	sp, #48	; 0x30
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e7ee:	220b      	movs	r2, #11
 800e7f0:	68b9      	ldr	r1, [r7, #8]
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7fe fecc 	bl	800d590 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b05      	cmp	r3, #5
 800e7fc:	d92b      	bls.n	800e856 <gen_numname+0x76>
		sr = seq;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e802:	e022      	b.n	800e84a <gen_numname+0x6a>
			wc = *lfn++;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	1c9a      	adds	r2, r3, #2
 800e808:	607a      	str	r2, [r7, #4]
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e80e:	2300      	movs	r3, #0
 800e810:	62bb      	str	r3, [r7, #40]	; 0x28
 800e812:	e017      	b.n	800e844 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	005a      	lsls	r2, r3, #1
 800e818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	4413      	add	r3, r2
 800e820:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e824:	085b      	lsrs	r3, r3, #1
 800e826:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d005      	beq.n	800e83e <gen_numname+0x5e>
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e838:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e83c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	3301      	adds	r3, #1
 800e842:	62bb      	str	r3, [r7, #40]	; 0x28
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	2b0f      	cmp	r3, #15
 800e848:	d9e4      	bls.n	800e814 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1d8      	bne.n	800e804 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e856:	2307      	movs	r3, #7
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	f003 030f 	and.w	r3, r3, #15
 800e862:	b2db      	uxtb	r3, r3
 800e864:	3330      	adds	r3, #48	; 0x30
 800e866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e86e:	2b39      	cmp	r3, #57	; 0x39
 800e870:	d904      	bls.n	800e87c <gen_numname+0x9c>
 800e872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e876:	3307      	adds	r3, #7
 800e878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	1e5a      	subs	r2, r3, #1
 800e880:	62ba      	str	r2, [r7, #40]	; 0x28
 800e882:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e886:	4413      	add	r3, r2
 800e888:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e88c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	091b      	lsrs	r3, r3, #4
 800e894:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1de      	bne.n	800e85a <gen_numname+0x7a>
	ns[i] = '~';
 800e89c:	f107 0214 	add.w	r2, r7, #20
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	4413      	add	r3, r2
 800e8a4:	227e      	movs	r2, #126	; 0x7e
 800e8a6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ac:	e002      	b.n	800e8b4 <gen_numname+0xd4>
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d205      	bcs.n	800e8c8 <gen_numname+0xe8>
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c0:	4413      	add	r3, r2
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b20      	cmp	r3, #32
 800e8c6:	d1f2      	bne.n	800e8ae <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	2b07      	cmp	r3, #7
 800e8cc:	d808      	bhi.n	800e8e0 <gen_numname+0x100>
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	1c5a      	adds	r2, r3, #1
 800e8d2:	62ba      	str	r2, [r7, #40]	; 0x28
 800e8d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e8d8:	4413      	add	r3, r2
 800e8da:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e8de:	e000      	b.n	800e8e2 <gen_numname+0x102>
 800e8e0:	2120      	movs	r1, #32
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	627a      	str	r2, [r7, #36]	; 0x24
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	460a      	mov	r2, r1
 800e8ee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	2b07      	cmp	r3, #7
 800e8f4:	d9e8      	bls.n	800e8c8 <gen_numname+0xe8>
}
 800e8f6:	bf00      	nop
 800e8f8:	3730      	adds	r7, #48	; 0x30
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e8fe:	b480      	push	{r7}
 800e900:	b085      	sub	sp, #20
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e90a:	230b      	movs	r3, #11
 800e90c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	b2da      	uxtb	r2, r3
 800e912:	0852      	lsrs	r2, r2, #1
 800e914:	01db      	lsls	r3, r3, #7
 800e916:	4313      	orrs	r3, r2
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	1c59      	adds	r1, r3, #1
 800e91e:	6079      	str	r1, [r7, #4]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	4413      	add	r3, r2
 800e924:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	3b01      	subs	r3, #1
 800e92a:	60bb      	str	r3, [r7, #8]
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1ed      	bne.n	800e90e <sum_sfn+0x10>
	return sum;
 800e932:	7bfb      	ldrb	r3, [r7, #15]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e94a:	2304      	movs	r3, #4
 800e94c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e954:	23ff      	movs	r3, #255	; 0xff
 800e956:	757b      	strb	r3, [r7, #21]
 800e958:	23ff      	movs	r3, #255	; 0xff
 800e95a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e95c:	e081      	b.n	800ea62 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	4619      	mov	r1, r3
 800e964:	6938      	ldr	r0, [r7, #16]
 800e966:	f7ff f841 	bl	800d9ec <move_window>
 800e96a:	4603      	mov	r3, r0
 800e96c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e96e:	7dfb      	ldrb	r3, [r7, #23]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d17c      	bne.n	800ea6e <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e97c:	7dbb      	ldrb	r3, [r7, #22]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e982:	2304      	movs	r3, #4
 800e984:	75fb      	strb	r3, [r7, #23]
 800e986:	e077      	b.n	800ea78 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a1b      	ldr	r3, [r3, #32]
 800e98c:	330b      	adds	r3, #11
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e994:	73fb      	strb	r3, [r7, #15]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	7bfa      	ldrb	r2, [r7, #15]
 800e99a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e99c:	7dbb      	ldrb	r3, [r7, #22]
 800e99e:	2be5      	cmp	r3, #229	; 0xe5
 800e9a0:	d00e      	beq.n	800e9c0 <dir_read+0x80>
 800e9a2:	7dbb      	ldrb	r3, [r7, #22]
 800e9a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a6:	d00b      	beq.n	800e9c0 <dir_read+0x80>
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	f023 0320 	bic.w	r3, r3, #32
 800e9ae:	2b08      	cmp	r3, #8
 800e9b0:	bf0c      	ite	eq
 800e9b2:	2301      	moveq	r3, #1
 800e9b4:	2300      	movne	r3, #0
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d002      	beq.n	800e9c6 <dir_read+0x86>
				ord = 0xFF;
 800e9c0:	23ff      	movs	r3, #255	; 0xff
 800e9c2:	757b      	strb	r3, [r7, #21]
 800e9c4:	e044      	b.n	800ea50 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
 800e9c8:	2b0f      	cmp	r3, #15
 800e9ca:	d12f      	bne.n	800ea2c <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e9cc:	7dbb      	ldrb	r3, [r7, #22]
 800e9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00d      	beq.n	800e9f2 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	7b5b      	ldrb	r3, [r3, #13]
 800e9dc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e9de:	7dbb      	ldrb	r3, [r7, #22]
 800e9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9e4:	75bb      	strb	r3, [r7, #22]
 800e9e6:	7dbb      	ldrb	r3, [r7, #22]
 800e9e8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	695a      	ldr	r2, [r3, #20]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e9f2:	7dba      	ldrb	r2, [r7, #22]
 800e9f4:	7d7b      	ldrb	r3, [r7, #21]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d115      	bne.n	800ea26 <dir_read+0xe6>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	330d      	adds	r3, #13
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	7d3a      	ldrb	r2, [r7, #20]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d10e      	bne.n	800ea26 <dir_read+0xe6>
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	691a      	ldr	r2, [r3, #16]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a1b      	ldr	r3, [r3, #32]
 800ea10:	4619      	mov	r1, r3
 800ea12:	4610      	mov	r0, r2
 800ea14:	f7ff fe18 	bl	800e648 <pick_lfn>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <dir_read+0xe6>
 800ea1e:	7d7b      	ldrb	r3, [r7, #21]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	e000      	b.n	800ea28 <dir_read+0xe8>
 800ea26:	23ff      	movs	r3, #255	; 0xff
 800ea28:	757b      	strb	r3, [r7, #21]
 800ea2a:	e011      	b.n	800ea50 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ea2c:	7d7b      	ldrb	r3, [r7, #21]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d109      	bne.n	800ea46 <dir_read+0x106>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7ff ff61 	bl	800e8fe <sum_sfn>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	461a      	mov	r2, r3
 800ea40:	7d3b      	ldrb	r3, [r7, #20]
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d015      	beq.n	800ea72 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800ea4e:	e010      	b.n	800ea72 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ea50:	2100      	movs	r1, #0
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7ff fc2c 	bl	800e2b0 <dir_next>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea5c:	7dfb      	ldrb	r3, [r7, #23]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d109      	bne.n	800ea76 <dir_read+0x136>
	while (dp->sect) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f47f af79 	bne.w	800e95e <dir_read+0x1e>
 800ea6c:	e004      	b.n	800ea78 <dir_read+0x138>
		if (res != FR_OK) break;
 800ea6e:	bf00      	nop
 800ea70:	e002      	b.n	800ea78 <dir_read+0x138>
					break;
 800ea72:	bf00      	nop
 800ea74:	e000      	b.n	800ea78 <dir_read+0x138>
		if (res != FR_OK) break;
 800ea76:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ea78:	7dfb      	ldrb	r3, [r7, #23]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <dir_read+0x144>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	61da      	str	r2, [r3, #28]
	return res;
 800ea84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b086      	sub	sp, #24
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff fb7d 	bl	800e19e <dir_sdi>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <dir_find+0x24>
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	e0a9      	b.n	800ec06 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eab2:	23ff      	movs	r3, #255	; 0xff
 800eab4:	753b      	strb	r3, [r7, #20]
 800eab6:	7d3b      	ldrb	r3, [r7, #20]
 800eab8:	757b      	strb	r3, [r7, #21]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f04f 32ff 	mov.w	r2, #4294967295
 800eac0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	4619      	mov	r1, r3
 800eac8:	6938      	ldr	r0, [r7, #16]
 800eaca:	f7fe ff8f 	bl	800d9ec <move_window>
 800eace:	4603      	mov	r3, r0
 800ead0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f040 8090 	bne.w	800ebfa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eae2:	7dbb      	ldrb	r3, [r7, #22]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <dir_find+0x60>
 800eae8:	2304      	movs	r3, #4
 800eaea:	75fb      	strb	r3, [r7, #23]
 800eaec:	e08a      	b.n	800ec04 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	330b      	adds	r3, #11
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eafa:	73fb      	strb	r3, [r7, #15]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	7bfa      	ldrb	r2, [r7, #15]
 800eb00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eb02:	7dbb      	ldrb	r3, [r7, #22]
 800eb04:	2be5      	cmp	r3, #229	; 0xe5
 800eb06:	d007      	beq.n	800eb18 <dir_find+0x8a>
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	f003 0308 	and.w	r3, r3, #8
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d009      	beq.n	800eb26 <dir_find+0x98>
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
 800eb14:	2b0f      	cmp	r3, #15
 800eb16:	d006      	beq.n	800eb26 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb18:	23ff      	movs	r3, #255	; 0xff
 800eb1a:	757b      	strb	r3, [r7, #21]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
 800eb24:	e05e      	b.n	800ebe4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	2b0f      	cmp	r3, #15
 800eb2a:	d136      	bne.n	800eb9a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d154      	bne.n	800ebe4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800eb3a:	7dbb      	ldrb	r3, [r7, #22]
 800eb3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00d      	beq.n	800eb60 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a1b      	ldr	r3, [r3, #32]
 800eb48:	7b5b      	ldrb	r3, [r3, #13]
 800eb4a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800eb4c:	7dbb      	ldrb	r3, [r7, #22]
 800eb4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb52:	75bb      	strb	r3, [r7, #22]
 800eb54:	7dbb      	ldrb	r3, [r7, #22]
 800eb56:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	695a      	ldr	r2, [r3, #20]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800eb60:	7dba      	ldrb	r2, [r7, #22]
 800eb62:	7d7b      	ldrb	r3, [r7, #21]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d115      	bne.n	800eb94 <dir_find+0x106>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	330d      	adds	r3, #13
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	7d3a      	ldrb	r2, [r7, #20]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d10e      	bne.n	800eb94 <dir_find+0x106>
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	691a      	ldr	r2, [r3, #16]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4610      	mov	r0, r2
 800eb82:	f7ff fcf1 	bl	800e568 <cmp_lfn>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <dir_find+0x106>
 800eb8c:	7d7b      	ldrb	r3, [r7, #21]
 800eb8e:	3b01      	subs	r3, #1
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	e000      	b.n	800eb96 <dir_find+0x108>
 800eb94:	23ff      	movs	r3, #255	; 0xff
 800eb96:	757b      	strb	r3, [r7, #21]
 800eb98:	e024      	b.n	800ebe4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb9a:	7d7b      	ldrb	r3, [r7, #21]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d109      	bne.n	800ebb4 <dir_find+0x126>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6a1b      	ldr	r3, [r3, #32]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff feaa 	bl	800e8fe <sum_sfn>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	461a      	mov	r2, r3
 800ebae:	7d3b      	ldrb	r3, [r7, #20]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d024      	beq.n	800ebfe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10a      	bne.n	800ebd8 <dir_find+0x14a>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6a18      	ldr	r0, [r3, #32]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3324      	adds	r3, #36	; 0x24
 800ebca:	220b      	movs	r2, #11
 800ebcc:	4619      	mov	r1, r3
 800ebce:	f7fe fd1a 	bl	800d606 <mem_cmp>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d014      	beq.n	800ec02 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ebd8:	23ff      	movs	r3, #255	; 0xff
 800ebda:	757b      	strb	r3, [r7, #21]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fb62 	bl	800e2b0 <dir_next>
 800ebec:	4603      	mov	r3, r0
 800ebee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f43f af65 	beq.w	800eac2 <dir_find+0x34>
 800ebf8:	e004      	b.n	800ec04 <dir_find+0x176>
		if (res != FR_OK) break;
 800ebfa:	bf00      	nop
 800ebfc:	e002      	b.n	800ec04 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ebfe:	bf00      	nop
 800ec00:	e000      	b.n	800ec04 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec02:	bf00      	nop

	return res;
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08c      	sub	sp, #48	; 0x30
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <dir_register+0x20>
 800ec2c:	2306      	movs	r3, #6
 800ec2e:	e0e0      	b.n	800edf2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ec30:	2300      	movs	r3, #0
 800ec32:	627b      	str	r3, [r7, #36]	; 0x24
 800ec34:	e002      	b.n	800ec3c <dir_register+0x2c>
 800ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec38:	3301      	adds	r3, #1
 800ec3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	691a      	ldr	r2, [r3, #16]
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1f4      	bne.n	800ec36 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ec52:	f107 030c 	add.w	r3, r7, #12
 800ec56:	220c      	movs	r2, #12
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe fc99 	bl	800d590 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d032      	beq.n	800ecce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2240      	movs	r2, #64	; 0x40
 800ec6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ec70:	2301      	movs	r3, #1
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec74:	e016      	b.n	800eca4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	691a      	ldr	r2, [r3, #16]
 800ec80:	f107 010c 	add.w	r1, r7, #12
 800ec84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec86:	f7ff fdab 	bl	800e7e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff feff 	bl	800ea8e <dir_find>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ec96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	3301      	adds	r3, #1
 800eca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	2b63      	cmp	r3, #99	; 0x63
 800eca8:	d9e5      	bls.n	800ec76 <dir_register+0x66>
 800ecaa:	e000      	b.n	800ecae <dir_register+0x9e>
			if (res != FR_OK) break;
 800ecac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ecae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb0:	2b64      	cmp	r3, #100	; 0x64
 800ecb2:	d101      	bne.n	800ecb8 <dir_register+0xa8>
 800ecb4:	2307      	movs	r3, #7
 800ecb6:	e09c      	b.n	800edf2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ecb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecbc:	2b04      	cmp	r3, #4
 800ecbe:	d002      	beq.n	800ecc6 <dir_register+0xb6>
 800ecc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc4:	e095      	b.n	800edf2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ecc6:	7dfa      	ldrb	r2, [r7, #23]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	f003 0302 	and.w	r3, r3, #2
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d007      	beq.n	800ece8 <dir_register+0xd8>
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	330c      	adds	r3, #12
 800ecdc:	4a47      	ldr	r2, [pc, #284]	; (800edfc <dir_register+0x1ec>)
 800ecde:	fba2 2303 	umull	r2, r3, r2, r3
 800ece2:	089b      	lsrs	r3, r3, #2
 800ece4:	3301      	adds	r3, #1
 800ece6:	e000      	b.n	800ecea <dir_register+0xda>
 800ece8:	2301      	movs	r3, #1
 800ecea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ecec:	6a39      	ldr	r1, [r7, #32]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff fbb4 	bl	800e45c <dir_alloc>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ecfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d148      	bne.n	800ed94 <dir_register+0x184>
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	3b01      	subs	r3, #1
 800ed06:	623b      	str	r3, [r7, #32]
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d042      	beq.n	800ed94 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	695a      	ldr	r2, [r3, #20]
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	015b      	lsls	r3, r3, #5
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	4619      	mov	r1, r3
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7ff fa3f 	bl	800e19e <dir_sdi>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ed26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d132      	bne.n	800ed94 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	3324      	adds	r3, #36	; 0x24
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff fde3 	bl	800e8fe <sum_sfn>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	69db      	ldr	r3, [r3, #28]
 800ed40:	4619      	mov	r1, r3
 800ed42:	69f8      	ldr	r0, [r7, #28]
 800ed44:	f7fe fe52 	bl	800d9ec <move_window>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ed4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d11d      	bne.n	800ed92 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	6918      	ldr	r0, [r3, #16]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6a19      	ldr	r1, [r3, #32]
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	7efb      	ldrb	r3, [r7, #27]
 800ed64:	f7ff fcd4 	bl	800e710 <put_lfn>
				fs->wflag = 1;
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ed6e:	2100      	movs	r1, #0
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7ff fa9d 	bl	800e2b0 <dir_next>
 800ed76:	4603      	mov	r3, r0
 800ed78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ed7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d107      	bne.n	800ed94 <dir_register+0x184>
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	3b01      	subs	r3, #1
 800ed88:	623b      	str	r3, [r7, #32]
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1d5      	bne.n	800ed3c <dir_register+0x12c>
 800ed90:	e000      	b.n	800ed94 <dir_register+0x184>
				if (res != FR_OK) break;
 800ed92:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ed94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d128      	bne.n	800edee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	4619      	mov	r1, r3
 800eda2:	69f8      	ldr	r0, [r7, #28]
 800eda4:	f7fe fe22 	bl	800d9ec <move_window>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800edae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d11b      	bne.n	800edee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	2220      	movs	r2, #32
 800edbc:	2100      	movs	r1, #0
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe fc07 	bl	800d5d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a18      	ldr	r0, [r3, #32]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	3324      	adds	r3, #36	; 0x24
 800edcc:	220b      	movs	r2, #11
 800edce:	4619      	mov	r1, r3
 800edd0:	f7fe fbde 	bl	800d590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	330c      	adds	r3, #12
 800ede0:	f002 0218 	and.w	r2, r2, #24
 800ede4:	b2d2      	uxtb	r2, r2
 800ede6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	2201      	movs	r2, #1
 800edec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800edee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3730      	adds	r7, #48	; 0x30
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	4ec4ec4f 	.word	0x4ec4ec4f

0800ee00 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	695b      	ldr	r3, [r3, #20]
 800ee12:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1c:	d007      	beq.n	800ee2e <dir_remove+0x2e>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff f9ba 	bl	800e19e <dir_sdi>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	e000      	b.n	800ee30 <dir_remove+0x30>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d128      	bne.n	800ee8a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6938      	ldr	r0, [r7, #16]
 800ee40:	f7fe fdd4 	bl	800d9ec <move_window>
 800ee44:	4603      	mov	r3, r0
 800ee46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d115      	bne.n	800ee7a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	22e5      	movs	r2, #229	; 0xe5
 800ee54:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d90b      	bls.n	800ee7e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800ee66:	2100      	movs	r1, #0
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff fa21 	bl	800e2b0 <dir_next>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0df      	beq.n	800ee38 <dir_remove+0x38>
 800ee78:	e002      	b.n	800ee80 <dir_remove+0x80>
			if (res != FR_OK) break;
 800ee7a:	bf00      	nop
 800ee7c:	e000      	b.n	800ee80 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ee7e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800ee80:	7dfb      	ldrb	r3, [r7, #23]
 800ee82:	2b04      	cmp	r3, #4
 800ee84:	d101      	bne.n	800ee8a <dir_remove+0x8a>
 800ee86:	2302      	movs	r3, #2
 800ee88:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ee8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3718      	adds	r7, #24
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b08a      	sub	sp, #40	; 0x28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	613b      	str	r3, [r7, #16]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	60fb      	str	r3, [r7, #12]
 800eeac:	2300      	movs	r3, #0
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	61ba      	str	r2, [r7, #24]
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	4413      	add	r3, r2
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec4:	2b1f      	cmp	r3, #31
 800eec6:	d940      	bls.n	800ef4a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeca:	2b2f      	cmp	r3, #47	; 0x2f
 800eecc:	d006      	beq.n	800eedc <create_name+0x48>
 800eece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eed0:	2b5c      	cmp	r3, #92	; 0x5c
 800eed2:	d110      	bne.n	800eef6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eed4:	e002      	b.n	800eedc <create_name+0x48>
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	3301      	adds	r3, #1
 800eeda:	61bb      	str	r3, [r7, #24]
 800eedc:	693a      	ldr	r2, [r7, #16]
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	4413      	add	r3, r2
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	2b2f      	cmp	r3, #47	; 0x2f
 800eee6:	d0f6      	beq.n	800eed6 <create_name+0x42>
 800eee8:	693a      	ldr	r2, [r7, #16]
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	4413      	add	r3, r2
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	2b5c      	cmp	r3, #92	; 0x5c
 800eef2:	d0f0      	beq.n	800eed6 <create_name+0x42>
			break;
 800eef4:	e02a      	b.n	800ef4c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2bfe      	cmp	r3, #254	; 0xfe
 800eefa:	d901      	bls.n	800ef00 <create_name+0x6c>
 800eefc:	2306      	movs	r3, #6
 800eefe:	e1c9      	b.n	800f294 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef08:	2101      	movs	r1, #1
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f002 f848 	bl	8010fa0 <ff_convert>
 800ef10:	4603      	mov	r3, r0
 800ef12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d101      	bne.n	800ef1e <create_name+0x8a>
 800ef1a:	2306      	movs	r3, #6
 800ef1c:	e1ba      	b.n	800f294 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ef1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef20:	2b7f      	cmp	r3, #127	; 0x7f
 800ef22:	d809      	bhi.n	800ef38 <create_name+0xa4>
 800ef24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef26:	4619      	mov	r1, r3
 800ef28:	48a5      	ldr	r0, [pc, #660]	; (800f1c0 <create_name+0x32c>)
 800ef2a:	f7fe fb93 	bl	800d654 <chk_chr>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <create_name+0xa4>
 800ef34:	2306      	movs	r3, #6
 800ef36:	e1ad      	b.n	800f294 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	617a      	str	r2, [r7, #20]
 800ef3e:	005b      	lsls	r3, r3, #1
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4413      	add	r3, r2
 800ef44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef46:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef48:	e7b4      	b.n	800eeb4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ef4a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	441a      	add	r2, r3
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ef56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef58:	2b1f      	cmp	r3, #31
 800ef5a:	d801      	bhi.n	800ef60 <create_name+0xcc>
 800ef5c:	2304      	movs	r3, #4
 800ef5e:	e000      	b.n	800ef62 <create_name+0xce>
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d109      	bne.n	800ef80 <create_name+0xec>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef72:	3b01      	subs	r3, #1
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	4413      	add	r3, r2
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef7e:	d016      	beq.n	800efae <create_name+0x11a>
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d14e      	bne.n	800f024 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	005b      	lsls	r3, r3, #1
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	2b2e      	cmp	r3, #46	; 0x2e
 800ef98:	d144      	bne.n	800f024 <create_name+0x190>
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efa0:	3b02      	subs	r3, #2
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	2b2e      	cmp	r3, #46	; 0x2e
 800efac:	d13a      	bne.n	800f024 <create_name+0x190>
		lfn[di] = 0;
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	4413      	add	r3, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800efba:	2300      	movs	r3, #0
 800efbc:	623b      	str	r3, [r7, #32]
 800efbe:	e00f      	b.n	800efe0 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800efc0:	6a3a      	ldr	r2, [r7, #32]
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d201      	bcs.n	800efcc <create_name+0x138>
 800efc8:	212e      	movs	r1, #46	; 0x2e
 800efca:	e000      	b.n	800efce <create_name+0x13a>
 800efcc:	2120      	movs	r1, #32
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	6a3b      	ldr	r3, [r7, #32]
 800efd2:	4413      	add	r3, r2
 800efd4:	3324      	adds	r3, #36	; 0x24
 800efd6:	460a      	mov	r2, r1
 800efd8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	3301      	adds	r3, #1
 800efde:	623b      	str	r3, [r7, #32]
 800efe0:	6a3b      	ldr	r3, [r7, #32]
 800efe2:	2b0a      	cmp	r3, #10
 800efe4:	d9ec      	bls.n	800efc0 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800efe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efea:	f043 0320 	orr.w	r3, r3, #32
 800efee:	b2d9      	uxtb	r1, r3
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	4413      	add	r3, r2
 800eff6:	3324      	adds	r3, #36	; 0x24
 800eff8:	460a      	mov	r2, r1
 800effa:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	e149      	b.n	800f294 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f006:	3b01      	subs	r3, #1
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f014:	2b20      	cmp	r3, #32
 800f016:	d002      	beq.n	800f01e <create_name+0x18a>
 800f018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f01a:	2b2e      	cmp	r3, #46	; 0x2e
 800f01c:	d106      	bne.n	800f02c <create_name+0x198>
		di--;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	3b01      	subs	r3, #1
 800f022:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1ea      	bne.n	800f000 <create_name+0x16c>
 800f02a:	e000      	b.n	800f02e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f02c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	4413      	add	r3, r2
 800f036:	2200      	movs	r2, #0
 800f038:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <create_name+0x1b0>
 800f040:	2306      	movs	r3, #6
 800f042:	e127      	b.n	800f294 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3324      	adds	r3, #36	; 0x24
 800f048:	220b      	movs	r2, #11
 800f04a:	2120      	movs	r1, #32
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe fac0 	bl	800d5d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f052:	2300      	movs	r3, #0
 800f054:	61bb      	str	r3, [r7, #24]
 800f056:	e002      	b.n	800f05e <create_name+0x1ca>
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	3301      	adds	r3, #1
 800f05c:	61bb      	str	r3, [r7, #24]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	4413      	add	r3, r2
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	2b20      	cmp	r3, #32
 800f06a:	d0f5      	beq.n	800f058 <create_name+0x1c4>
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	4413      	add	r3, r2
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	2b2e      	cmp	r3, #46	; 0x2e
 800f078:	d0ee      	beq.n	800f058 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d009      	beq.n	800f094 <create_name+0x200>
 800f080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f084:	f043 0303 	orr.w	r3, r3, #3
 800f088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f08c:	e002      	b.n	800f094 <create_name+0x200>
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	3b01      	subs	r3, #1
 800f092:	617b      	str	r3, [r7, #20]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d009      	beq.n	800f0ae <create_name+0x21a>
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ac:	d1ef      	bne.n	800f08e <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	623b      	str	r3, [r7, #32]
 800f0b8:	2308      	movs	r3, #8
 800f0ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	61ba      	str	r2, [r7, #24]
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f000 8096 	beq.w	800f200 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f0d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d6:	2b20      	cmp	r3, #32
 800f0d8:	d006      	beq.n	800f0e8 <create_name+0x254>
 800f0da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f0de:	d10a      	bne.n	800f0f6 <create_name+0x262>
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d006      	beq.n	800f0f6 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ec:	f043 0303 	orr.w	r3, r3, #3
 800f0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0f4:	e083      	b.n	800f1fe <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f0f6:	6a3a      	ldr	r2, [r7, #32]
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d203      	bcs.n	800f106 <create_name+0x272>
 800f0fe:	69ba      	ldr	r2, [r7, #24]
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	429a      	cmp	r2, r3
 800f104:	d123      	bne.n	800f14e <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	2b0b      	cmp	r3, #11
 800f10a:	d106      	bne.n	800f11a <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f110:	f043 0303 	orr.w	r3, r3, #3
 800f114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f118:	e075      	b.n	800f206 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f11a:	69ba      	ldr	r2, [r7, #24]
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d005      	beq.n	800f12e <create_name+0x29a>
 800f122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f126:	f043 0303 	orr.w	r3, r3, #3
 800f12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	429a      	cmp	r2, r3
 800f134:	d866      	bhi.n	800f204 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	61bb      	str	r3, [r7, #24]
 800f13a:	2308      	movs	r3, #8
 800f13c:	623b      	str	r3, [r7, #32]
 800f13e:	230b      	movs	r3, #11
 800f140:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f14c:	e057      	b.n	800f1fe <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f150:	2b7f      	cmp	r3, #127	; 0x7f
 800f152:	d914      	bls.n	800f17e <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f156:	2100      	movs	r1, #0
 800f158:	4618      	mov	r0, r3
 800f15a:	f001 ff21 	bl	8010fa0 <ff_convert>
 800f15e:	4603      	mov	r3, r0
 800f160:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f164:	2b00      	cmp	r3, #0
 800f166:	d004      	beq.n	800f172 <create_name+0x2de>
 800f168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f16a:	3b80      	subs	r3, #128	; 0x80
 800f16c:	4a15      	ldr	r2, [pc, #84]	; (800f1c4 <create_name+0x330>)
 800f16e:	5cd3      	ldrb	r3, [r2, r3]
 800f170:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f176:	f043 0302 	orr.w	r3, r3, #2
 800f17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f17e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f180:	2b00      	cmp	r3, #0
 800f182:	d007      	beq.n	800f194 <create_name+0x300>
 800f184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f186:	4619      	mov	r1, r3
 800f188:	480f      	ldr	r0, [pc, #60]	; (800f1c8 <create_name+0x334>)
 800f18a:	f7fe fa63 	bl	800d654 <chk_chr>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d008      	beq.n	800f1a6 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f194:	235f      	movs	r3, #95	; 0x5f
 800f196:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f19c:	f043 0303 	orr.w	r3, r3, #3
 800f1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1a4:	e021      	b.n	800f1ea <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1a8:	2b40      	cmp	r3, #64	; 0x40
 800f1aa:	d90f      	bls.n	800f1cc <create_name+0x338>
 800f1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ae:	2b5a      	cmp	r3, #90	; 0x5a
 800f1b0:	d80c      	bhi.n	800f1cc <create_name+0x338>
					b |= 2;
 800f1b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1b6:	f043 0302 	orr.w	r3, r3, #2
 800f1ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1be:	e014      	b.n	800f1ea <create_name+0x356>
 800f1c0:	08017224 	.word	0x08017224
 800f1c4:	080172ac 	.word	0x080172ac
 800f1c8:	08017230 	.word	0x08017230
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f1cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ce:	2b60      	cmp	r3, #96	; 0x60
 800f1d0:	d90b      	bls.n	800f1ea <create_name+0x356>
 800f1d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1d4:	2b7a      	cmp	r3, #122	; 0x7a
 800f1d6:	d808      	bhi.n	800f1ea <create_name+0x356>
						b |= 1; w -= 0x20;
 800f1d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1dc:	f043 0301 	orr.w	r3, r3, #1
 800f1e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1e6:	3b20      	subs	r3, #32
 800f1e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	623a      	str	r2, [r7, #32]
 800f1f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f1f2:	b2d1      	uxtb	r1, r2
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f1fe:	e75d      	b.n	800f0bc <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800f200:	bf00      	nop
 800f202:	e000      	b.n	800f206 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800f204:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f20c:	2be5      	cmp	r3, #229	; 0xe5
 800f20e:	d103      	bne.n	800f218 <create_name+0x384>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2205      	movs	r2, #5
 800f214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	2b08      	cmp	r3, #8
 800f21c:	d104      	bne.n	800f228 <create_name+0x394>
 800f21e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f22c:	f003 030c 	and.w	r3, r3, #12
 800f230:	2b0c      	cmp	r3, #12
 800f232:	d005      	beq.n	800f240 <create_name+0x3ac>
 800f234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f238:	f003 0303 	and.w	r3, r3, #3
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d105      	bne.n	800f24c <create_name+0x3b8>
 800f240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f244:	f043 0302 	orr.w	r3, r3, #2
 800f248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f250:	f003 0302 	and.w	r3, r3, #2
 800f254:	2b00      	cmp	r3, #0
 800f256:	d117      	bne.n	800f288 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	2b01      	cmp	r3, #1
 800f262:	d105      	bne.n	800f270 <create_name+0x3dc>
 800f264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f268:	f043 0310 	orr.w	r3, r3, #16
 800f26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f274:	f003 030c 	and.w	r3, r3, #12
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d105      	bne.n	800f288 <create_name+0x3f4>
 800f27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f280:	f043 0308 	orr.w	r3, r3, #8
 800f284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f28e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f292:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f294:	4618      	mov	r0, r3
 800f296:	3728      	adds	r7, #40	; 0x28
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	2b2f      	cmp	r3, #47	; 0x2f
 800f2b6:	d00b      	beq.n	800f2d0 <follow_path+0x34>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b5c      	cmp	r3, #92	; 0x5c
 800f2be:	d007      	beq.n	800f2d0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	69da      	ldr	r2, [r3, #28]
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	609a      	str	r2, [r3, #8]
 800f2c8:	e00d      	b.n	800f2e6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	603b      	str	r3, [r7, #0]
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b2f      	cmp	r3, #47	; 0x2f
 800f2d6:	d0f8      	beq.n	800f2ca <follow_path+0x2e>
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b5c      	cmp	r3, #92	; 0x5c
 800f2de:	d0f4      	beq.n	800f2ca <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	2b1f      	cmp	r3, #31
 800f2ec:	d80a      	bhi.n	800f304 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2280      	movs	r2, #128	; 0x80
 800f2f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7fe ff50 	bl	800e19e <dir_sdi>
 800f2fe:	4603      	mov	r3, r0
 800f300:	75fb      	strb	r3, [r7, #23]
 800f302:	e05b      	b.n	800f3bc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f304:	463b      	mov	r3, r7
 800f306:	4619      	mov	r1, r3
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7ff fdc3 	bl	800ee94 <create_name>
 800f30e:	4603      	mov	r3, r0
 800f310:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f312:	7dfb      	ldrb	r3, [r7, #23]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d14c      	bne.n	800f3b2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff fbb8 	bl	800ea8e <dir_find>
 800f31e:	4603      	mov	r3, r0
 800f320:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f328:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f32a:	7dfb      	ldrb	r3, [r7, #23]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d01b      	beq.n	800f368 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f330:	7dfb      	ldrb	r3, [r7, #23]
 800f332:	2b04      	cmp	r3, #4
 800f334:	d13f      	bne.n	800f3b6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f336:	7afb      	ldrb	r3, [r7, #11]
 800f338:	f003 0320 	and.w	r3, r3, #32
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00b      	beq.n	800f358 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	f003 0304 	and.w	r3, r3, #4
 800f346:	2b00      	cmp	r3, #0
 800f348:	d031      	beq.n	800f3ae <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2280      	movs	r2, #128	; 0x80
 800f34e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f356:	e02e      	b.n	800f3b6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f358:	7afb      	ldrb	r3, [r7, #11]
 800f35a:	f003 0304 	and.w	r3, r3, #4
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d129      	bne.n	800f3b6 <follow_path+0x11a>
 800f362:	2305      	movs	r3, #5
 800f364:	75fb      	strb	r3, [r7, #23]
				break;
 800f366:	e026      	b.n	800f3b6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f368:	7afb      	ldrb	r3, [r7, #11]
 800f36a:	f003 0304 	and.w	r3, r3, #4
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d123      	bne.n	800f3ba <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	799b      	ldrb	r3, [r3, #6]
 800f376:	f003 0310 	and.w	r3, r3, #16
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f37e:	2305      	movs	r3, #5
 800f380:	75fb      	strb	r3, [r7, #23]
 800f382:	e01b      	b.n	800f3bc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	695b      	ldr	r3, [r3, #20]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	8992      	ldrh	r2, [r2, #12]
 800f392:	fbb3 f0f2 	udiv	r0, r3, r2
 800f396:	fb02 f200 	mul.w	r2, r2, r0
 800f39a:	1a9b      	subs	r3, r3, r2
 800f39c:	440b      	add	r3, r1
 800f39e:	4619      	mov	r1, r3
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff f8a2 	bl	800e4ea <ld_clust>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	609a      	str	r2, [r3, #8]
 800f3ac:	e7aa      	b.n	800f304 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f3ae:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3b0:	e7a8      	b.n	800f304 <follow_path+0x68>
			if (res != FR_OK) break;
 800f3b2:	bf00      	nop
 800f3b4:	e002      	b.n	800f3bc <follow_path+0x120>
				break;
 800f3b6:	bf00      	nop
 800f3b8:	e000      	b.n	800f3bc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3ba:	bf00      	nop
			}
		}
	}

	return res;
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3718      	adds	r7, #24
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b087      	sub	sp, #28
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d031      	beq.n	800f440 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e002      	b.n	800f3ea <get_ldnumber+0x24>
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	617b      	str	r3, [r7, #20]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	2b1f      	cmp	r3, #31
 800f3f0:	d903      	bls.n	800f3fa <get_ldnumber+0x34>
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b3a      	cmp	r3, #58	; 0x3a
 800f3f8:	d1f4      	bne.n	800f3e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b3a      	cmp	r3, #58	; 0x3a
 800f400:	d11c      	bne.n	800f43c <get_ldnumber+0x76>
			tp = *path;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	60fa      	str	r2, [r7, #12]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	3b30      	subs	r3, #48	; 0x30
 800f412:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2b09      	cmp	r3, #9
 800f418:	d80e      	bhi.n	800f438 <get_ldnumber+0x72>
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d10a      	bne.n	800f438 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d107      	bne.n	800f438 <get_ldnumber+0x72>
					vol = (int)i;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	3301      	adds	r3, #1
 800f430:	617b      	str	r3, [r7, #20]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	e002      	b.n	800f442 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f43c:	2300      	movs	r3, #0
 800f43e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f440:	693b      	ldr	r3, [r7, #16]
}
 800f442:	4618      	mov	r0, r3
 800f444:	371c      	adds	r7, #28
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
	...

0800f450 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	70da      	strb	r2, [r3, #3]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f468:	6839      	ldr	r1, [r7, #0]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7fe fabe 	bl	800d9ec <move_window>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <check_fs+0x2a>
 800f476:	2304      	movs	r3, #4
 800f478:	e038      	b.n	800f4ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	333c      	adds	r3, #60	; 0x3c
 800f47e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe f802 	bl	800d48c <ld_word>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f490:	429a      	cmp	r2, r3
 800f492:	d001      	beq.n	800f498 <check_fs+0x48>
 800f494:	2303      	movs	r3, #3
 800f496:	e029      	b.n	800f4ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f49e:	2be9      	cmp	r3, #233	; 0xe9
 800f4a0:	d009      	beq.n	800f4b6 <check_fs+0x66>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4a8:	2beb      	cmp	r3, #235	; 0xeb
 800f4aa:	d11e      	bne.n	800f4ea <check_fs+0x9a>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4b2:	2b90      	cmp	r3, #144	; 0x90
 800f4b4:	d119      	bne.n	800f4ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	333c      	adds	r3, #60	; 0x3c
 800f4ba:	3336      	adds	r3, #54	; 0x36
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fd fffd 	bl	800d4bc <ld_dword>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4c8:	4a0a      	ldr	r2, [pc, #40]	; (800f4f4 <check_fs+0xa4>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d101      	bne.n	800f4d2 <check_fs+0x82>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	e00c      	b.n	800f4ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	333c      	adds	r3, #60	; 0x3c
 800f4d6:	3352      	adds	r3, #82	; 0x52
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fd ffef 	bl	800d4bc <ld_dword>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <check_fs+0xa8>)
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d101      	bne.n	800f4ea <check_fs+0x9a>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	e000      	b.n	800f4ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f4ea:	2302      	movs	r3, #2
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	00544146 	.word	0x00544146
 800f4f8:	33544146 	.word	0x33544146

0800f4fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b096      	sub	sp, #88	; 0x58
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	4613      	mov	r3, r2
 800f508:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	2200      	movs	r2, #0
 800f50e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7ff ff58 	bl	800f3c6 <get_ldnumber>
 800f516:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	da01      	bge.n	800f522 <find_volume+0x26>
 800f51e:	230b      	movs	r3, #11
 800f520:	e26b      	b.n	800f9fa <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f522:	4ab0      	ldr	r2, [pc, #704]	; (800f7e4 <find_volume+0x2e8>)
 800f524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <find_volume+0x3a>
 800f532:	230c      	movs	r3, #12
 800f534:	e261      	b.n	800f9fa <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f53a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f53c:	79fb      	ldrb	r3, [r7, #7]
 800f53e:	f023 0301 	bic.w	r3, r3, #1
 800f542:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d01a      	beq.n	800f582 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd fefd 	bl	800d350 <disk_status>
 800f556:	4603      	mov	r3, r0
 800f558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f55c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f560:	f003 0301 	and.w	r3, r3, #1
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10c      	bne.n	800f582 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f568:	79fb      	ldrb	r3, [r7, #7]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <find_volume+0x82>
 800f56e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f572:	f003 0304 	and.w	r3, r3, #4
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f57a:	230a      	movs	r3, #10
 800f57c:	e23d      	b.n	800f9fa <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800f57e:	2300      	movs	r3, #0
 800f580:	e23b      	b.n	800f9fa <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	2200      	movs	r2, #0
 800f586:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f592:	785b      	ldrb	r3, [r3, #1]
 800f594:	4618      	mov	r0, r3
 800f596:	f7fd fef5 	bl	800d384 <disk_initialize>
 800f59a:	4603      	mov	r3, r0
 800f59c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f5a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	e224      	b.n	800f9fa <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d007      	beq.n	800f5c6 <find_volume+0xca>
 800f5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5ba:	f003 0304 	and.w	r3, r3, #4
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d001      	beq.n	800f5c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f5c2:	230a      	movs	r3, #10
 800f5c4:	e219      	b.n	800f9fa <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	7858      	ldrb	r0, [r3, #1]
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5cc:	330c      	adds	r3, #12
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	2102      	movs	r1, #2
 800f5d2:	f7fd ff3d 	bl	800d450 <disk_ioctl>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d001      	beq.n	800f5e0 <find_volume+0xe4>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e20c      	b.n	800f9fa <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5e8:	d80d      	bhi.n	800f606 <find_volume+0x10a>
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	899b      	ldrh	r3, [r3, #12]
 800f5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5f2:	d308      	bcc.n	800f606 <find_volume+0x10a>
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f6:	899b      	ldrh	r3, [r3, #12]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	899b      	ldrh	r3, [r3, #12]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	4013      	ands	r3, r2
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <find_volume+0x10e>
 800f606:	2301      	movs	r3, #1
 800f608:	e1f7      	b.n	800f9fa <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f60e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f612:	f7ff ff1d 	bl	800f450 <check_fs>
 800f616:	4603      	mov	r3, r0
 800f618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f61c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f620:	2b02      	cmp	r3, #2
 800f622:	d14b      	bne.n	800f6bc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f624:	2300      	movs	r3, #0
 800f626:	643b      	str	r3, [r7, #64]	; 0x40
 800f628:	e01f      	b.n	800f66a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f632:	011b      	lsls	r3, r3, #4
 800f634:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f638:	4413      	add	r3, r2
 800f63a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63e:	3304      	adds	r3, #4
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d006      	beq.n	800f654 <find_volume+0x158>
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	3308      	adds	r3, #8
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fd ff36 	bl	800d4bc <ld_dword>
 800f650:	4602      	mov	r2, r0
 800f652:	e000      	b.n	800f656 <find_volume+0x15a>
 800f654:	2200      	movs	r2, #0
 800f656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f65e:	440b      	add	r3, r1
 800f660:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f666:	3301      	adds	r3, #1
 800f668:	643b      	str	r3, [r7, #64]	; 0x40
 800f66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d9dc      	bls.n	800f62a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f670:	2300      	movs	r3, #0
 800f672:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f676:	2b00      	cmp	r3, #0
 800f678:	d002      	beq.n	800f680 <find_volume+0x184>
 800f67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f67c:	3b01      	subs	r3, #1
 800f67e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f688:	4413      	add	r3, r2
 800f68a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f68e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f692:	2b00      	cmp	r3, #0
 800f694:	d005      	beq.n	800f6a2 <find_volume+0x1a6>
 800f696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f69a:	f7ff fed9 	bl	800f450 <check_fs>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	e000      	b.n	800f6a4 <find_volume+0x1a8>
 800f6a2:	2303      	movs	r3, #3
 800f6a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d905      	bls.n	800f6bc <find_volume+0x1c0>
 800f6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	643b      	str	r3, [r7, #64]	; 0x40
 800f6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b8:	2b03      	cmp	r3, #3
 800f6ba:	d9e1      	bls.n	800f680 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f6bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6c0:	2b04      	cmp	r3, #4
 800f6c2:	d101      	bne.n	800f6c8 <find_volume+0x1cc>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e198      	b.n	800f9fa <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d901      	bls.n	800f6d4 <find_volume+0x1d8>
 800f6d0:	230d      	movs	r3, #13
 800f6d2:	e192      	b.n	800f9fa <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	333c      	adds	r3, #60	; 0x3c
 800f6d8:	330b      	adds	r3, #11
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fd fed6 	bl	800d48c <ld_word>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	899b      	ldrh	r3, [r3, #12]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d001      	beq.n	800f6f0 <find_volume+0x1f4>
 800f6ec:	230d      	movs	r3, #13
 800f6ee:	e184      	b.n	800f9fa <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f2:	333c      	adds	r3, #60	; 0x3c
 800f6f4:	3316      	adds	r3, #22
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fd fec8 	bl	800d48c <ld_word>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f702:	2b00      	cmp	r3, #0
 800f704:	d106      	bne.n	800f714 <find_volume+0x218>
 800f706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f708:	333c      	adds	r3, #60	; 0x3c
 800f70a:	3324      	adds	r3, #36	; 0x24
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fd fed5 	bl	800d4bc <ld_dword>
 800f712:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f718:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f726:	789b      	ldrb	r3, [r3, #2]
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d005      	beq.n	800f738 <find_volume+0x23c>
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	789b      	ldrb	r3, [r3, #2]
 800f730:	2b02      	cmp	r3, #2
 800f732:	d001      	beq.n	800f738 <find_volume+0x23c>
 800f734:	230d      	movs	r3, #13
 800f736:	e160      	b.n	800f9fa <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	789b      	ldrb	r3, [r3, #2]
 800f73c:	461a      	mov	r2, r3
 800f73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f740:	fb02 f303 	mul.w	r3, r2, r3
 800f744:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f754:	895b      	ldrh	r3, [r3, #10]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d008      	beq.n	800f76c <find_volume+0x270>
 800f75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75c:	895b      	ldrh	r3, [r3, #10]
 800f75e:	461a      	mov	r2, r3
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	895b      	ldrh	r3, [r3, #10]
 800f764:	3b01      	subs	r3, #1
 800f766:	4013      	ands	r3, r2
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <find_volume+0x274>
 800f76c:	230d      	movs	r3, #13
 800f76e:	e144      	b.n	800f9fa <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f772:	333c      	adds	r3, #60	; 0x3c
 800f774:	3311      	adds	r3, #17
 800f776:	4618      	mov	r0, r3
 800f778:	f7fd fe88 	bl	800d48c <ld_word>
 800f77c:	4603      	mov	r3, r0
 800f77e:	461a      	mov	r2, r3
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	891b      	ldrh	r3, [r3, #8]
 800f788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f78a:	8992      	ldrh	r2, [r2, #12]
 800f78c:	0952      	lsrs	r2, r2, #5
 800f78e:	b292      	uxth	r2, r2
 800f790:	fbb3 f1f2 	udiv	r1, r3, r2
 800f794:	fb02 f201 	mul.w	r2, r2, r1
 800f798:	1a9b      	subs	r3, r3, r2
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d001      	beq.n	800f7a4 <find_volume+0x2a8>
 800f7a0:	230d      	movs	r3, #13
 800f7a2:	e12a      	b.n	800f9fa <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a6:	333c      	adds	r3, #60	; 0x3c
 800f7a8:	3313      	adds	r3, #19
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd fe6e 	bl	800d48c <ld_word>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d106      	bne.n	800f7c8 <find_volume+0x2cc>
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	333c      	adds	r3, #60	; 0x3c
 800f7be:	3320      	adds	r3, #32
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fd fe7b 	bl	800d4bc <ld_dword>
 800f7c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	333c      	adds	r3, #60	; 0x3c
 800f7cc:	330e      	adds	r3, #14
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd fe5c 	bl	800d48c <ld_word>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f7d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d104      	bne.n	800f7e8 <find_volume+0x2ec>
 800f7de:	230d      	movs	r3, #13
 800f7e0:	e10b      	b.n	800f9fa <find_volume+0x4fe>
 800f7e2:	bf00      	nop
 800f7e4:	200136f4 	.word	0x200136f4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f7e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ec:	4413      	add	r3, r2
 800f7ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7f0:	8911      	ldrh	r1, [r2, #8]
 800f7f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7f4:	8992      	ldrh	r2, [r2, #12]
 800f7f6:	0952      	lsrs	r2, r2, #5
 800f7f8:	b292      	uxth	r2, r2
 800f7fa:	fbb1 f2f2 	udiv	r2, r1, r2
 800f7fe:	b292      	uxth	r2, r2
 800f800:	4413      	add	r3, r2
 800f802:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	429a      	cmp	r2, r3
 800f80a:	d201      	bcs.n	800f810 <find_volume+0x314>
 800f80c:	230d      	movs	r3, #13
 800f80e:	e0f4      	b.n	800f9fa <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f818:	8952      	ldrh	r2, [r2, #10]
 800f81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f81e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <find_volume+0x32e>
 800f826:	230d      	movs	r3, #13
 800f828:	e0e7      	b.n	800f9fa <find_volume+0x4fe>
		fmt = FS_FAT32;
 800f82a:	2303      	movs	r3, #3
 800f82c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f836:	4293      	cmp	r3, r2
 800f838:	d802      	bhi.n	800f840 <find_volume+0x344>
 800f83a:	2302      	movs	r3, #2
 800f83c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f846:	4293      	cmp	r3, r2
 800f848:	d802      	bhi.n	800f850 <find_volume+0x354>
 800f84a:	2301      	movs	r3, #1
 800f84c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f852:	1c9a      	adds	r2, r3, #2
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f85c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f85e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f862:	441a      	add	r2, r3
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86c:	441a      	add	r2, r3
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f872:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f876:	2b03      	cmp	r3, #3
 800f878:	d11e      	bne.n	800f8b8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	333c      	adds	r3, #60	; 0x3c
 800f87e:	332a      	adds	r3, #42	; 0x2a
 800f880:	4618      	mov	r0, r3
 800f882:	f7fd fe03 	bl	800d48c <ld_word>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <find_volume+0x394>
 800f88c:	230d      	movs	r3, #13
 800f88e:	e0b4      	b.n	800f9fa <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	891b      	ldrh	r3, [r3, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d001      	beq.n	800f89c <find_volume+0x3a0>
 800f898:	230d      	movs	r3, #13
 800f89a:	e0ae      	b.n	800f9fa <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89e:	333c      	adds	r3, #60	; 0x3c
 800f8a0:	332c      	adds	r3, #44	; 0x2c
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fd fe0a 	bl	800d4bc <ld_dword>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f8b6:	e01f      	b.n	800f8f8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	891b      	ldrh	r3, [r3, #8]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d101      	bne.n	800f8c4 <find_volume+0x3c8>
 800f8c0:	230d      	movs	r3, #13
 800f8c2:	e09a      	b.n	800f9fa <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ca:	441a      	add	r2, r3
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d103      	bne.n	800f8e0 <find_volume+0x3e4>
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	e00a      	b.n	800f8f6 <find_volume+0x3fa>
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	6a1a      	ldr	r2, [r3, #32]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	005b      	lsls	r3, r3, #1
 800f8e8:	4413      	add	r3, r2
 800f8ea:	085a      	lsrs	r2, r3, #1
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	6a1b      	ldr	r3, [r3, #32]
 800f8f0:	f003 0301 	and.w	r3, r3, #1
 800f8f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f8f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	899b      	ldrh	r3, [r3, #12]
 800f900:	4619      	mov	r1, r3
 800f902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f904:	440b      	add	r3, r1
 800f906:	3b01      	subs	r3, #1
 800f908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f90a:	8989      	ldrh	r1, [r1, #12]
 800f90c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f910:	429a      	cmp	r2, r3
 800f912:	d201      	bcs.n	800f918 <find_volume+0x41c>
 800f914:	230d      	movs	r3, #13
 800f916:	e070      	b.n	800f9fa <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f04f 32ff 	mov.w	r2, #4294967295
 800f91e:	619a      	str	r2, [r3, #24]
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	699a      	ldr	r2, [r3, #24]
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	2280      	movs	r2, #128	; 0x80
 800f92c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f92e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f932:	2b03      	cmp	r3, #3
 800f934:	d149      	bne.n	800f9ca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f938:	333c      	adds	r3, #60	; 0x3c
 800f93a:	3330      	adds	r3, #48	; 0x30
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fd fda5 	bl	800d48c <ld_word>
 800f942:	4603      	mov	r3, r0
 800f944:	2b01      	cmp	r3, #1
 800f946:	d140      	bne.n	800f9ca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f94a:	3301      	adds	r3, #1
 800f94c:	4619      	mov	r1, r3
 800f94e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f950:	f7fe f84c 	bl	800d9ec <move_window>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d137      	bne.n	800f9ca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	2200      	movs	r2, #0
 800f95e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	333c      	adds	r3, #60	; 0x3c
 800f964:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd fd8f 	bl	800d48c <ld_word>
 800f96e:	4603      	mov	r3, r0
 800f970:	461a      	mov	r2, r3
 800f972:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f976:	429a      	cmp	r2, r3
 800f978:	d127      	bne.n	800f9ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	333c      	adds	r3, #60	; 0x3c
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fd fd9c 	bl	800d4bc <ld_dword>
 800f984:	4602      	mov	r2, r0
 800f986:	4b1f      	ldr	r3, [pc, #124]	; (800fa04 <find_volume+0x508>)
 800f988:	429a      	cmp	r2, r3
 800f98a:	d11e      	bne.n	800f9ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98e:	333c      	adds	r3, #60	; 0x3c
 800f990:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f994:	4618      	mov	r0, r3
 800f996:	f7fd fd91 	bl	800d4bc <ld_dword>
 800f99a:	4602      	mov	r2, r0
 800f99c:	4b1a      	ldr	r3, [pc, #104]	; (800fa08 <find_volume+0x50c>)
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d113      	bne.n	800f9ca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	333c      	adds	r3, #60	; 0x3c
 800f9a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fd fd86 	bl	800d4bc <ld_dword>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	333c      	adds	r3, #60	; 0x3c
 800f9ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fd fd7c 	bl	800d4bc <ld_dword>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f9d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f9d2:	4b0e      	ldr	r3, [pc, #56]	; (800fa0c <find_volume+0x510>)
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <find_volume+0x510>)
 800f9dc:	801a      	strh	r2, [r3, #0]
 800f9de:	4b0b      	ldr	r3, [pc, #44]	; (800fa0c <find_volume+0x510>)
 800f9e0:	881a      	ldrh	r2, [r3, #0]
 800f9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <find_volume+0x514>)
 800f9ea:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f9f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9f4:	f7fd ff92 	bl	800d91c <clear_lock>
#endif
	return FR_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3758      	adds	r7, #88	; 0x58
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	41615252 	.word	0x41615252
 800fa08:	61417272 	.word	0x61417272
 800fa0c:	200136f8 	.word	0x200136f8
 800fa10:	2001371c 	.word	0x2001371c

0800fa14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fa1e:	2309      	movs	r3, #9
 800fa20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01c      	beq.n	800fa62 <validate+0x4e>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d018      	beq.n	800fa62 <validate+0x4e>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d013      	beq.n	800fa62 <validate+0x4e>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	889a      	ldrh	r2, [r3, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	88db      	ldrh	r3, [r3, #6]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d10c      	bne.n	800fa62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	785b      	ldrb	r3, [r3, #1]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fd fc7e 	bl	800d350 <disk_status>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d101      	bne.n	800fa62 <validate+0x4e>
			res = FR_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d102      	bne.n	800fa6e <validate+0x5a>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	e000      	b.n	800fa70 <validate+0x5c>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	6013      	str	r3, [r2, #0]
	return res;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
	...

0800fa80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b088      	sub	sp, #32
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fa92:	f107 0310 	add.w	r3, r7, #16
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7ff fc95 	bl	800f3c6 <get_ldnumber>
 800fa9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	da01      	bge.n	800faa8 <f_mount+0x28>
 800faa4:	230b      	movs	r3, #11
 800faa6:	e02b      	b.n	800fb00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800faa8:	4a17      	ldr	r2, [pc, #92]	; (800fb08 <f_mount+0x88>)
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fab0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fab8:	69b8      	ldr	r0, [r7, #24]
 800faba:	f7fd ff2f 	bl	800d91c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	2200      	movs	r2, #0
 800fac2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d002      	beq.n	800fad0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	490d      	ldr	r1, [pc, #52]	; (800fb08 <f_mount+0x88>)
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d002      	beq.n	800fae6 <f_mount+0x66>
 800fae0:	79fb      	ldrb	r3, [r7, #7]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d001      	beq.n	800faea <f_mount+0x6a>
 800fae6:	2300      	movs	r3, #0
 800fae8:	e00a      	b.n	800fb00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800faea:	f107 010c 	add.w	r1, r7, #12
 800faee:	f107 0308 	add.w	r3, r7, #8
 800faf2:	2200      	movs	r2, #0
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fd01 	bl	800f4fc <find_volume>
 800fafa:	4603      	mov	r3, r0
 800fafc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	200136f4 	.word	0x200136f4

0800fb0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b09a      	sub	sp, #104	; 0x68
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <f_open+0x18>
 800fb20:	2309      	movs	r3, #9
 800fb22:	e1bb      	b.n	800fe9c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fb24:	79fb      	ldrb	r3, [r7, #7]
 800fb26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fb2c:	79fa      	ldrb	r2, [r7, #7]
 800fb2e:	f107 0114 	add.w	r1, r7, #20
 800fb32:	f107 0308 	add.w	r3, r7, #8
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff fce0 	bl	800f4fc <find_volume>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fb42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f040 819f 	bne.w	800fe8a <f_open+0x37e>
		dj.obj.fs = fs;
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	f107 0318 	add.w	r3, r7, #24
 800fb56:	4611      	mov	r1, r2
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7ff fb9f 	bl	800f29c <follow_path>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fb64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d11a      	bne.n	800fba2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fb6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fb70:	b25b      	sxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	da03      	bge.n	800fb7e <f_open+0x72>
				res = FR_INVALID_NAME;
 800fb76:	2306      	movs	r3, #6
 800fb78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb7c:	e011      	b.n	800fba2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	f023 0301 	bic.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bf14      	ite	ne
 800fb88:	2301      	movne	r3, #1
 800fb8a:	2300      	moveq	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	461a      	mov	r2, r3
 800fb90:	f107 0318 	add.w	r3, r7, #24
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd fd78 	bl	800d68c <chk_lock>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	f003 031c 	and.w	r3, r3, #28
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d07f      	beq.n	800fcac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fbac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d017      	beq.n	800fbe4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fbb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbb8:	2b04      	cmp	r3, #4
 800fbba:	d10e      	bne.n	800fbda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fbbc:	f7fd fdc2 	bl	800d744 <enq_lock>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d006      	beq.n	800fbd4 <f_open+0xc8>
 800fbc6:	f107 0318 	add.w	r3, r7, #24
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff f820 	bl	800ec10 <dir_register>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	e000      	b.n	800fbd6 <f_open+0xca>
 800fbd4:	2312      	movs	r3, #18
 800fbd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	f043 0308 	orr.w	r3, r3, #8
 800fbe0:	71fb      	strb	r3, [r7, #7]
 800fbe2:	e010      	b.n	800fc06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fbe4:	7fbb      	ldrb	r3, [r7, #30]
 800fbe6:	f003 0311 	and.w	r3, r3, #17
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d003      	beq.n	800fbf6 <f_open+0xea>
					res = FR_DENIED;
 800fbee:	2307      	movs	r3, #7
 800fbf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fbf4:	e007      	b.n	800fc06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	f003 0304 	and.w	r3, r3, #4
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <f_open+0xfa>
 800fc00:	2308      	movs	r3, #8
 800fc02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d168      	bne.n	800fce0 <f_open+0x1d4>
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	f003 0308 	and.w	r3, r3, #8
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d063      	beq.n	800fce0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fc18:	f7fd f94a 	bl	800ceb0 <get_fattime>
 800fc1c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc20:	330e      	adds	r3, #14
 800fc22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fd fc87 	bl	800d538 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2c:	3316      	adds	r3, #22
 800fc2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fc81 	bl	800d538 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	330b      	adds	r3, #11
 800fc3a:	2220      	movs	r2, #32
 800fc3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe fc50 	bl	800e4ea <ld_clust>
 800fc4a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc50:	2200      	movs	r2, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fc68 	bl	800e528 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	331c      	adds	r3, #28
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fd fc6a 	bl	800d538 <st_dword>
					fs->wflag = 1;
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	2201      	movs	r2, #1
 800fc68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fc6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d037      	beq.n	800fce0 <f_open+0x1d4>
						dw = fs->winsect;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc74:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fc76:	f107 0318 	add.w	r3, r7, #24
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe f958 	bl	800df34 <remove_chain>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fc8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d126      	bne.n	800fce0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fd fea8 	bl	800d9ec <move_window>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fca6:	3a01      	subs	r2, #1
 800fca8:	615a      	str	r2, [r3, #20]
 800fcaa:	e019      	b.n	800fce0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fcac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d115      	bne.n	800fce0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fcb4:	7fbb      	ldrb	r3, [r7, #30]
 800fcb6:	f003 0310 	and.w	r3, r3, #16
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fcbe:	2304      	movs	r3, #4
 800fcc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fcc4:	e00c      	b.n	800fce0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fcc6:	79fb      	ldrb	r3, [r7, #7]
 800fcc8:	f003 0302 	and.w	r3, r3, #2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d007      	beq.n	800fce0 <f_open+0x1d4>
 800fcd0:	7fbb      	ldrb	r3, [r7, #30]
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <f_open+0x1d4>
						res = FR_DENIED;
 800fcda:	2307      	movs	r3, #7
 800fcdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fce0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d128      	bne.n	800fd3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	f003 0308 	and.w	r3, r3, #8
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d003      	beq.n	800fcfa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcf8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fd02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd08:	79fb      	ldrb	r3, [r7, #7]
 800fd0a:	f023 0301 	bic.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	bf14      	ite	ne
 800fd12:	2301      	movne	r3, #1
 800fd14:	2300      	moveq	r3, #0
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	461a      	mov	r2, r3
 800fd1a:	f107 0318 	add.w	r3, r7, #24
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd fd31 	bl	800d788 <inc_lock>
 800fd26:	4602      	mov	r2, r0
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <f_open+0x22e>
 800fd34:	2302      	movs	r3, #2
 800fd36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fd3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f040 80a3 	bne.w	800fe8a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fe fbcd 	bl	800e4ea <ld_clust>
 800fd50:	4602      	mov	r2, r0
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	331c      	adds	r3, #28
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fd fbae 	bl	800d4bc <ld_dword>
 800fd60:	4602      	mov	r2, r0
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	88da      	ldrh	r2, [r3, #6]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	79fa      	ldrb	r2, [r7, #7]
 800fd7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3330      	adds	r3, #48	; 0x30
 800fd96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fd fc18 	bl	800d5d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	f003 0320 	and.w	r3, r3, #32
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d06e      	beq.n	800fe8a <f_open+0x37e>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d06a      	beq.n	800fe8a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	68da      	ldr	r2, [r3, #12]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	895b      	ldrh	r3, [r3, #10]
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	899b      	ldrh	r3, [r3, #12]
 800fdc6:	fb03 f302 	mul.w	r3, r3, r2
 800fdca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdd8:	e016      	b.n	800fe08 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fd fec1 	bl	800db66 <get_fat>
 800fde4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fde6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d802      	bhi.n	800fdf2 <f_open+0x2e6>
 800fdec:	2302      	movs	r3, #2
 800fdee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fdf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf8:	d102      	bne.n	800fe00 <f_open+0x2f4>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <f_open+0x30c>
 800fe10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d8e0      	bhi.n	800fdda <f_open+0x2ce>
				}
				fp->clust = clst;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fe1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d131      	bne.n	800fe8a <f_open+0x37e>
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	899b      	ldrh	r3, [r3, #12]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe32:	fb02 f201 	mul.w	r2, r2, r1
 800fe36:	1a9b      	subs	r3, r3, r2
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d026      	beq.n	800fe8a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fd fe71 	bl	800db28 <clust2sect>
 800fe46:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fe48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d103      	bne.n	800fe56 <f_open+0x34a>
						res = FR_INT_ERR;
 800fe4e:	2302      	movs	r3, #2
 800fe50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fe54:	e019      	b.n	800fe8a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	899b      	ldrh	r3, [r3, #12]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe64:	441a      	add	r2, r3
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	7858      	ldrb	r0, [r3, #1]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6a1a      	ldr	r2, [r3, #32]
 800fe78:	2301      	movs	r3, #1
 800fe7a:	f7fd faa9 	bl	800d3d0 <disk_read>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <f_open+0x37e>
 800fe84:	2301      	movs	r3, #1
 800fe86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fe8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d002      	beq.n	800fe98 <f_open+0x38c>
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fe98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3768      	adds	r7, #104	; 0x68
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08e      	sub	sp, #56	; 0x38
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f107 0214 	add.w	r2, r7, #20
 800fec2:	4611      	mov	r1, r2
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff fda5 	bl	800fa14 <validate>
 800feca:	4603      	mov	r3, r0
 800fecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d107      	bne.n	800fee8 <f_read+0x44>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	7d5b      	ldrb	r3, [r3, #21]
 800fedc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <f_read+0x4a>
 800fee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feec:	e135      	b.n	801015a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	7d1b      	ldrb	r3, [r3, #20]
 800fef2:	f003 0301 	and.w	r3, r3, #1
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <f_read+0x5a>
 800fefa:	2307      	movs	r3, #7
 800fefc:	e12d      	b.n	801015a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	68da      	ldr	r2, [r3, #12]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	699b      	ldr	r3, [r3, #24]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	6a3b      	ldr	r3, [r7, #32]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	f240 811e 	bls.w	8010150 <f_read+0x2ac>
 800ff14:	6a3b      	ldr	r3, [r7, #32]
 800ff16:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ff18:	e11a      	b.n	8010150 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	8992      	ldrh	r2, [r2, #12]
 800ff22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff26:	fb02 f201 	mul.w	r2, r2, r1
 800ff2a:	1a9b      	subs	r3, r3, r2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f040 80d5 	bne.w	80100dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	8992      	ldrh	r2, [r2, #12]
 800ff3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff3e:	697a      	ldr	r2, [r7, #20]
 800ff40:	8952      	ldrh	r2, [r2, #10]
 800ff42:	3a01      	subs	r2, #1
 800ff44:	4013      	ands	r3, r2
 800ff46:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d12f      	bne.n	800ffae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d103      	bne.n	800ff5e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ff5c:	e013      	b.n	800ff86 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d007      	beq.n	800ff76 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7fe f8de 	bl	800e12e <clmt_clust>
 800ff72:	6338      	str	r0, [r7, #48]	; 0x30
 800ff74:	e007      	b.n	800ff86 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	69db      	ldr	r3, [r3, #28]
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	4610      	mov	r0, r2
 800ff80:	f7fd fdf1 	bl	800db66 <get_fat>
 800ff84:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d804      	bhi.n	800ff96 <f_read+0xf2>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2202      	movs	r2, #2
 800ff90:	755a      	strb	r2, [r3, #21]
 800ff92:	2302      	movs	r3, #2
 800ff94:	e0e1      	b.n	801015a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff9c:	d104      	bne.n	800ffa8 <f_read+0x104>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	755a      	strb	r2, [r3, #21]
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e0d8      	b.n	801015a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	69db      	ldr	r3, [r3, #28]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f7fd fdb6 	bl	800db28 <clust2sect>
 800ffbc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d104      	bne.n	800ffce <f_read+0x12a>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	755a      	strb	r2, [r3, #21]
 800ffca:	2302      	movs	r3, #2
 800ffcc:	e0c5      	b.n	801015a <f_read+0x2b6>
			sect += csect;
 800ffce:	69ba      	ldr	r2, [r7, #24]
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	899b      	ldrh	r3, [r3, #12]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffe2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ffe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d041      	beq.n	801006e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ffea:	69fa      	ldr	r2, [r7, #28]
 800ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffee:	4413      	add	r3, r2
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	8952      	ldrh	r2, [r2, #10]
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d905      	bls.n	8010004 <f_read+0x160>
					cc = fs->csize - csect;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	895b      	ldrh	r3, [r3, #10]
 800fffc:	461a      	mov	r2, r3
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	7858      	ldrb	r0, [r3, #1]
 8010008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000a:	69ba      	ldr	r2, [r7, #24]
 801000c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801000e:	f7fd f9df 	bl	800d3d0 <disk_read>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <f_read+0x17e>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2201      	movs	r2, #1
 801001c:	755a      	strb	r2, [r3, #21]
 801001e:	2301      	movs	r3, #1
 8010020:	e09b      	b.n	801015a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	b25b      	sxtb	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	da18      	bge.n	801005e <f_read+0x1ba>
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6a1a      	ldr	r2, [r3, #32]
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010036:	429a      	cmp	r2, r3
 8010038:	d911      	bls.n	801005e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6a1a      	ldr	r2, [r3, #32]
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	8992      	ldrh	r2, [r2, #12]
 8010046:	fb02 f303 	mul.w	r3, r2, r3
 801004a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801004c:	18d0      	adds	r0, r2, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	899b      	ldrh	r3, [r3, #12]
 8010058:	461a      	mov	r2, r3
 801005a:	f7fd fa99 	bl	800d590 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	899b      	ldrh	r3, [r3, #12]
 8010062:	461a      	mov	r2, r3
 8010064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010066:	fb02 f303 	mul.w	r3, r2, r3
 801006a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801006c:	e05c      	b.n	8010128 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	69ba      	ldr	r2, [r7, #24]
 8010074:	429a      	cmp	r2, r3
 8010076:	d02e      	beq.n	80100d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	7d1b      	ldrb	r3, [r3, #20]
 801007c:	b25b      	sxtb	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	da18      	bge.n	80100b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	7858      	ldrb	r0, [r3, #1]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6a1a      	ldr	r2, [r3, #32]
 8010090:	2301      	movs	r3, #1
 8010092:	f7fd f9bd 	bl	800d410 <disk_write>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d004      	beq.n	80100a6 <f_read+0x202>
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2201      	movs	r2, #1
 80100a0:	755a      	strb	r2, [r3, #21]
 80100a2:	2301      	movs	r3, #1
 80100a4:	e059      	b.n	801015a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	7d1b      	ldrb	r3, [r3, #20]
 80100aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	7858      	ldrb	r0, [r3, #1]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100be:	2301      	movs	r3, #1
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	f7fd f985 	bl	800d3d0 <disk_read>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d004      	beq.n	80100d6 <f_read+0x232>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2201      	movs	r2, #1
 80100d0:	755a      	strb	r2, [r3, #21]
 80100d2:	2301      	movs	r3, #1
 80100d4:	e041      	b.n	801015a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	69ba      	ldr	r2, [r7, #24]
 80100da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	899b      	ldrh	r3, [r3, #12]
 80100e0:	4618      	mov	r0, r3
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	699b      	ldr	r3, [r3, #24]
 80100e6:	697a      	ldr	r2, [r7, #20]
 80100e8:	8992      	ldrh	r2, [r2, #12]
 80100ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80100ee:	fb02 f201 	mul.w	r2, r2, r1
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	1ac3      	subs	r3, r0, r3
 80100f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80100f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d901      	bls.n	8010104 <f_read+0x260>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	699b      	ldr	r3, [r3, #24]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	8992      	ldrh	r2, [r2, #12]
 8010112:	fbb3 f0f2 	udiv	r0, r3, r2
 8010116:	fb02 f200 	mul.w	r2, r2, r0
 801011a:	1a9b      	subs	r3, r3, r2
 801011c:	440b      	add	r3, r1
 801011e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010120:	4619      	mov	r1, r3
 8010122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010124:	f7fd fa34 	bl	800d590 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	4413      	add	r3, r2
 801012e:	627b      	str	r3, [r7, #36]	; 0x24
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	699a      	ldr	r2, [r3, #24]
 8010134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010136:	441a      	add	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	619a      	str	r2, [r3, #24]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	441a      	add	r2, r3
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	601a      	str	r2, [r3, #0]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f47f aee1 	bne.w	800ff1a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3738      	adds	r7, #56	; 0x38
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b08c      	sub	sp, #48	; 0x30
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	607a      	str	r2, [r7, #4]
 801016e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2200      	movs	r2, #0
 8010178:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f107 0210 	add.w	r2, r7, #16
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff fc46 	bl	800fa14 <validate>
 8010188:	4603      	mov	r3, r0
 801018a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801018e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010192:	2b00      	cmp	r3, #0
 8010194:	d107      	bne.n	80101a6 <f_write+0x44>
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	7d5b      	ldrb	r3, [r3, #21]
 801019a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801019e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <f_write+0x4a>
 80101a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101aa:	e16a      	b.n	8010482 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
 80101b0:	f003 0302 	and.w	r3, r3, #2
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <f_write+0x5a>
 80101b8:	2307      	movs	r3, #7
 80101ba:	e162      	b.n	8010482 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	699a      	ldr	r2, [r3, #24]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	441a      	add	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	f080 814c 	bcs.w	8010466 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	43db      	mvns	r3, r3
 80101d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80101d6:	e146      	b.n	8010466 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	699b      	ldr	r3, [r3, #24]
 80101dc:	693a      	ldr	r2, [r7, #16]
 80101de:	8992      	ldrh	r2, [r2, #12]
 80101e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80101e4:	fb02 f201 	mul.w	r2, r2, r1
 80101e8:	1a9b      	subs	r3, r3, r2
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f040 80f1 	bne.w	80103d2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	8992      	ldrh	r2, [r2, #12]
 80101f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	8952      	ldrh	r2, [r2, #10]
 8010200:	3a01      	subs	r2, #1
 8010202:	4013      	ands	r3, r2
 8010204:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d143      	bne.n	8010294 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	699b      	ldr	r3, [r3, #24]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10c      	bne.n	801022e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021c:	2b00      	cmp	r3, #0
 801021e:	d11a      	bne.n	8010256 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f7fd feea 	bl	800dffe <create_chain>
 801022a:	62b8      	str	r0, [r7, #40]	; 0x28
 801022c:	e013      	b.n	8010256 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010232:	2b00      	cmp	r3, #0
 8010234:	d007      	beq.n	8010246 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	4619      	mov	r1, r3
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7fd ff76 	bl	800e12e <clmt_clust>
 8010242:	62b8      	str	r0, [r7, #40]	; 0x28
 8010244:	e007      	b.n	8010256 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	69db      	ldr	r3, [r3, #28]
 801024c:	4619      	mov	r1, r3
 801024e:	4610      	mov	r0, r2
 8010250:	f7fd fed5 	bl	800dffe <create_chain>
 8010254:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 8109 	beq.w	8010470 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010260:	2b01      	cmp	r3, #1
 8010262:	d104      	bne.n	801026e <f_write+0x10c>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2202      	movs	r2, #2
 8010268:	755a      	strb	r2, [r3, #21]
 801026a:	2302      	movs	r3, #2
 801026c:	e109      	b.n	8010482 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010274:	d104      	bne.n	8010280 <f_write+0x11e>
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	755a      	strb	r2, [r3, #21]
 801027c:	2301      	movs	r3, #1
 801027e:	e100      	b.n	8010482 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010284:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d102      	bne.n	8010294 <f_write+0x132>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010292:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	7d1b      	ldrb	r3, [r3, #20]
 8010298:	b25b      	sxtb	r3, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	da18      	bge.n	80102d0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	7858      	ldrb	r0, [r3, #1]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6a1a      	ldr	r2, [r3, #32]
 80102ac:	2301      	movs	r3, #1
 80102ae:	f7fd f8af 	bl	800d410 <disk_write>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <f_write+0x160>
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2201      	movs	r2, #1
 80102bc:	755a      	strb	r2, [r3, #21]
 80102be:	2301      	movs	r3, #1
 80102c0:	e0df      	b.n	8010482 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80102d0:	693a      	ldr	r2, [r7, #16]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	69db      	ldr	r3, [r3, #28]
 80102d6:	4619      	mov	r1, r3
 80102d8:	4610      	mov	r0, r2
 80102da:	f7fd fc25 	bl	800db28 <clust2sect>
 80102de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d104      	bne.n	80102f0 <f_write+0x18e>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2202      	movs	r2, #2
 80102ea:	755a      	strb	r2, [r3, #21]
 80102ec:	2302      	movs	r3, #2
 80102ee:	e0c8      	b.n	8010482 <f_write+0x320>
			sect += csect;
 80102f0:	697a      	ldr	r2, [r7, #20]
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	4413      	add	r3, r2
 80102f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	899b      	ldrh	r3, [r3, #12]
 80102fc:	461a      	mov	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	fbb3 f3f2 	udiv	r3, r3, r2
 8010304:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d043      	beq.n	8010394 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801030c:	69ba      	ldr	r2, [r7, #24]
 801030e:	6a3b      	ldr	r3, [r7, #32]
 8010310:	4413      	add	r3, r2
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	8952      	ldrh	r2, [r2, #10]
 8010316:	4293      	cmp	r3, r2
 8010318:	d905      	bls.n	8010326 <f_write+0x1c4>
					cc = fs->csize - csect;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	895b      	ldrh	r3, [r3, #10]
 801031e:	461a      	mov	r2, r3
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	7858      	ldrb	r0, [r3, #1]
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	697a      	ldr	r2, [r7, #20]
 801032e:	69f9      	ldr	r1, [r7, #28]
 8010330:	f7fd f86e 	bl	800d410 <disk_write>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d004      	beq.n	8010344 <f_write+0x1e2>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2201      	movs	r2, #1
 801033e:	755a      	strb	r2, [r3, #21]
 8010340:	2301      	movs	r3, #1
 8010342:	e09e      	b.n	8010482 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	6a1a      	ldr	r2, [r3, #32]
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	6a3a      	ldr	r2, [r7, #32]
 801034e:	429a      	cmp	r2, r3
 8010350:	d918      	bls.n	8010384 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6a1a      	ldr	r2, [r3, #32]
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	8992      	ldrh	r2, [r2, #12]
 8010364:	fb02 f303 	mul.w	r3, r2, r3
 8010368:	69fa      	ldr	r2, [r7, #28]
 801036a:	18d1      	adds	r1, r2, r3
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	899b      	ldrh	r3, [r3, #12]
 8010370:	461a      	mov	r2, r3
 8010372:	f7fd f90d 	bl	800d590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	7d1b      	ldrb	r3, [r3, #20]
 801037a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801037e:	b2da      	uxtb	r2, r3
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	899b      	ldrh	r3, [r3, #12]
 8010388:	461a      	mov	r2, r3
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	fb02 f303 	mul.w	r3, r2, r3
 8010390:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010392:	e04b      	b.n	801042c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6a1b      	ldr	r3, [r3, #32]
 8010398:	697a      	ldr	r2, [r7, #20]
 801039a:	429a      	cmp	r2, r3
 801039c:	d016      	beq.n	80103cc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	699a      	ldr	r2, [r3, #24]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d210      	bcs.n	80103cc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	7858      	ldrb	r0, [r3, #1]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103b4:	2301      	movs	r3, #1
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	f7fd f80a 	bl	800d3d0 <disk_read>
 80103bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d004      	beq.n	80103cc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2201      	movs	r2, #1
 80103c6:	755a      	strb	r2, [r3, #21]
 80103c8:	2301      	movs	r3, #1
 80103ca:	e05a      	b.n	8010482 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	899b      	ldrh	r3, [r3, #12]
 80103d6:	4618      	mov	r0, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	699b      	ldr	r3, [r3, #24]
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	8992      	ldrh	r2, [r2, #12]
 80103e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80103e4:	fb02 f201 	mul.w	r2, r2, r1
 80103e8:	1a9b      	subs	r3, r3, r2
 80103ea:	1ac3      	subs	r3, r0, r3
 80103ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80103ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d901      	bls.n	80103fa <f_write+0x298>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	699b      	ldr	r3, [r3, #24]
 8010404:	693a      	ldr	r2, [r7, #16]
 8010406:	8992      	ldrh	r2, [r2, #12]
 8010408:	fbb3 f0f2 	udiv	r0, r3, r2
 801040c:	fb02 f200 	mul.w	r2, r2, r0
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	440b      	add	r3, r1
 8010414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010416:	69f9      	ldr	r1, [r7, #28]
 8010418:	4618      	mov	r0, r3
 801041a:	f7fd f8b9 	bl	800d590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	7d1b      	ldrb	r3, [r3, #20]
 8010422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010426:	b2da      	uxtb	r2, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801042c:	69fa      	ldr	r2, [r7, #28]
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	4413      	add	r3, r2
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	699a      	ldr	r2, [r3, #24]
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	441a      	add	r2, r3
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	619a      	str	r2, [r3, #24]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	68da      	ldr	r2, [r3, #12]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	699b      	ldr	r3, [r3, #24]
 8010448:	429a      	cmp	r2, r3
 801044a:	bf38      	it	cc
 801044c:	461a      	movcc	r2, r3
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	60da      	str	r2, [r3, #12]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010458:	441a      	add	r2, r3
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	f47f aeb5 	bne.w	80101d8 <f_write+0x76>
 801046e:	e000      	b.n	8010472 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010470:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	7d1b      	ldrb	r3, [r3, #20]
 8010476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801047a:	b2da      	uxtb	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3730      	adds	r7, #48	; 0x30
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b086      	sub	sp, #24
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f107 0208 	add.w	r2, r7, #8
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff faba 	bl	800fa14 <validate>
 80104a0:	4603      	mov	r3, r0
 80104a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104a4:	7dfb      	ldrb	r3, [r7, #23]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d168      	bne.n	801057c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	7d1b      	ldrb	r3, [r3, #20]
 80104ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d062      	beq.n	801057c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7d1b      	ldrb	r3, [r3, #20]
 80104ba:	b25b      	sxtb	r3, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	da15      	bge.n	80104ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	7858      	ldrb	r0, [r3, #1]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6a1a      	ldr	r2, [r3, #32]
 80104ce:	2301      	movs	r3, #1
 80104d0:	f7fc ff9e 	bl	800d410 <disk_write>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <f_sync+0x54>
 80104da:	2301      	movs	r3, #1
 80104dc:	e04f      	b.n	801057e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7d1b      	ldrb	r3, [r3, #20]
 80104e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80104ec:	f7fc fce0 	bl	800ceb0 <get_fattime>
 80104f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f8:	4619      	mov	r1, r3
 80104fa:	4610      	mov	r0, r2
 80104fc:	f7fd fa76 	bl	800d9ec <move_window>
 8010500:	4603      	mov	r3, r0
 8010502:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010504:	7dfb      	ldrb	r3, [r7, #23]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d138      	bne.n	801057c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801050e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	330b      	adds	r3, #11
 8010514:	781a      	ldrb	r2, [r3, #0]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	330b      	adds	r3, #11
 801051a:	f042 0220 	orr.w	r2, r2, #32
 801051e:	b2d2      	uxtb	r2, r2
 8010520:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6818      	ldr	r0, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	689b      	ldr	r3, [r3, #8]
 801052a:	461a      	mov	r2, r3
 801052c:	68f9      	ldr	r1, [r7, #12]
 801052e:	f7fd fffb 	bl	800e528 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f103 021c 	add.w	r2, r3, #28
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	4619      	mov	r1, r3
 801053e:	4610      	mov	r0, r2
 8010540:	f7fc fffa 	bl	800d538 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	3316      	adds	r3, #22
 8010548:	6939      	ldr	r1, [r7, #16]
 801054a:	4618      	mov	r0, r3
 801054c:	f7fc fff4 	bl	800d538 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	3312      	adds	r3, #18
 8010554:	2100      	movs	r1, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f7fc ffd3 	bl	800d502 <st_word>
					fs->wflag = 1;
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	2201      	movs	r2, #1
 8010560:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	4618      	mov	r0, r3
 8010566:	f7fd fa6f 	bl	800da48 <sync_fs>
 801056a:	4603      	mov	r3, r0
 801056c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	7d1b      	ldrb	r3, [r3, #20]
 8010572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010576:	b2da      	uxtb	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801057c:	7dfb      	ldrb	r3, [r7, #23]
}
 801057e:	4618      	mov	r0, r3
 8010580:	3718      	adds	r7, #24
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b084      	sub	sp, #16
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff ff7b 	bl	801048a <f_sync>
 8010594:	4603      	mov	r3, r0
 8010596:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d118      	bne.n	80105d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f107 0208 	add.w	r2, r7, #8
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7ff fa34 	bl	800fa14 <validate>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d10c      	bne.n	80105d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fd f972 	bl	800d8a4 <dec_lock>
 80105c0:	4603      	mov	r3, r0
 80105c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d102      	bne.n	80105d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80105da:	b590      	push	{r4, r7, lr}
 80105dc:	b093      	sub	sp, #76	; 0x4c
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80105e2:	f107 010c 	add.w	r1, r7, #12
 80105e6:	1d3b      	adds	r3, r7, #4
 80105e8:	2200      	movs	r2, #0
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fe ff86 	bl	800f4fc <find_volume>
 80105f0:	4603      	mov	r3, r0
 80105f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80105f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d131      	bne.n	8010662 <f_chdir+0x88>
		dj.obj.fs = fs;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	f107 0310 	add.w	r3, r7, #16
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fe46 	bl	800f29c <follow_path>
 8010610:	4603      	mov	r3, r0
 8010612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010616:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801061a:	2b00      	cmp	r3, #0
 801061c:	d11a      	bne.n	8010654 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801061e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010622:	b25b      	sxtb	r3, r3
 8010624:	2b00      	cmp	r3, #0
 8010626:	da03      	bge.n	8010630 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	69ba      	ldr	r2, [r7, #24]
 801062c:	61da      	str	r2, [r3, #28]
 801062e:	e011      	b.n	8010654 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010630:	7dbb      	ldrb	r3, [r7, #22]
 8010632:	f003 0310 	and.w	r3, r3, #16
 8010636:	2b00      	cmp	r3, #0
 8010638:	d009      	beq.n	801064e <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801063e:	68fc      	ldr	r4, [r7, #12]
 8010640:	4611      	mov	r1, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7fd ff51 	bl	800e4ea <ld_clust>
 8010648:	4603      	mov	r3, r0
 801064a:	61e3      	str	r3, [r4, #28]
 801064c:	e002      	b.n	8010654 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801064e:	2305      	movs	r3, #5
 8010650:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010654:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010658:	2b04      	cmp	r3, #4
 801065a:	d102      	bne.n	8010662 <f_chdir+0x88>
 801065c:	2305      	movs	r3, #5
 801065e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010662:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010666:	4618      	mov	r0, r3
 8010668:	374c      	adds	r7, #76	; 0x4c
 801066a:	46bd      	mov	sp, r7
 801066c:	bd90      	pop	{r4, r7, pc}

0801066e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b090      	sub	sp, #64	; 0x40
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f107 0208 	add.w	r2, r7, #8
 801067e:	4611      	mov	r1, r2
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff f9c7 	bl	800fa14 <validate>
 8010686:	4603      	mov	r3, r0
 8010688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801068c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010690:	2b00      	cmp	r3, #0
 8010692:	d103      	bne.n	801069c <f_lseek+0x2e>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	7d5b      	ldrb	r3, [r3, #21]
 8010698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801069c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d002      	beq.n	80106aa <f_lseek+0x3c>
 80106a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106a8:	e201      	b.n	8010aae <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 80d9 	beq.w	8010866 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ba:	d15a      	bne.n	8010772 <f_lseek+0x104>
			tbl = fp->cltbl;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	1d1a      	adds	r2, r3, #4
 80106c6:	627a      	str	r2, [r7, #36]	; 0x24
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	617b      	str	r3, [r7, #20]
 80106cc:	2302      	movs	r3, #2
 80106ce:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80106d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d03a      	beq.n	8010752 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80106dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106de:	613b      	str	r3, [r7, #16]
 80106e0:	2300      	movs	r3, #0
 80106e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	3302      	adds	r3, #2
 80106e8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80106ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ec:	60fb      	str	r3, [r7, #12]
 80106ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f0:	3301      	adds	r3, #1
 80106f2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fd fa34 	bl	800db66 <get_fat>
 80106fe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	2b01      	cmp	r3, #1
 8010704:	d804      	bhi.n	8010710 <f_lseek+0xa2>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2202      	movs	r2, #2
 801070a:	755a      	strb	r2, [r3, #21]
 801070c:	2302      	movs	r3, #2
 801070e:	e1ce      	b.n	8010aae <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010716:	d104      	bne.n	8010722 <f_lseek+0xb4>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2201      	movs	r2, #1
 801071c:	755a      	strb	r2, [r3, #21]
 801071e:	2301      	movs	r3, #1
 8010720:	e1c5      	b.n	8010aae <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	3301      	adds	r3, #1
 8010726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010728:	429a      	cmp	r2, r3
 801072a:	d0de      	beq.n	80106ea <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801072c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	429a      	cmp	r2, r3
 8010732:	d809      	bhi.n	8010748 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010736:	1d1a      	adds	r2, r3, #4
 8010738:	627a      	str	r2, [r7, #36]	; 0x24
 801073a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801073c:	601a      	str	r2, [r3, #0]
 801073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010740:	1d1a      	adds	r2, r3, #4
 8010742:	627a      	str	r2, [r7, #36]	; 0x24
 8010744:	693a      	ldr	r2, [r7, #16]
 8010746:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801074e:	429a      	cmp	r2, r3
 8010750:	d3c4      	bcc.n	80106dc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010758:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801075a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	429a      	cmp	r2, r3
 8010760:	d803      	bhi.n	801076a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	2200      	movs	r2, #0
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	e19f      	b.n	8010aaa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801076a:	2311      	movs	r3, #17
 801076c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010770:	e19b      	b.n	8010aaa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	683a      	ldr	r2, [r7, #0]
 8010778:	429a      	cmp	r2, r3
 801077a:	d902      	bls.n	8010782 <f_lseek+0x114>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	683a      	ldr	r2, [r7, #0]
 8010786:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 818d 	beq.w	8010aaa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	3b01      	subs	r3, #1
 8010794:	4619      	mov	r1, r3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7fd fcc9 	bl	800e12e <clmt_clust>
 801079c:	4602      	mov	r2, r0
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	69db      	ldr	r3, [r3, #28]
 80107a8:	4619      	mov	r1, r3
 80107aa:	4610      	mov	r0, r2
 80107ac:	f7fd f9bc 	bl	800db28 <clust2sect>
 80107b0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d104      	bne.n	80107c2 <f_lseek+0x154>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2202      	movs	r2, #2
 80107bc:	755a      	strb	r2, [r3, #21]
 80107be:	2302      	movs	r3, #2
 80107c0:	e175      	b.n	8010aae <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	3b01      	subs	r3, #1
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	8992      	ldrh	r2, [r2, #12]
 80107ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	8952      	ldrh	r2, [r2, #10]
 80107d2:	3a01      	subs	r2, #1
 80107d4:	4013      	ands	r3, r2
 80107d6:	69ba      	ldr	r2, [r7, #24]
 80107d8:	4413      	add	r3, r2
 80107da:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	8992      	ldrh	r2, [r2, #12]
 80107e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80107e8:	fb02 f201 	mul.w	r2, r2, r1
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f000 815b 	beq.w	8010aaa <f_lseek+0x43c>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	69ba      	ldr	r2, [r7, #24]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	f000 8155 	beq.w	8010aaa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	7d1b      	ldrb	r3, [r3, #20]
 8010804:	b25b      	sxtb	r3, r3
 8010806:	2b00      	cmp	r3, #0
 8010808:	da18      	bge.n	801083c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	7858      	ldrb	r0, [r3, #1]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6a1a      	ldr	r2, [r3, #32]
 8010818:	2301      	movs	r3, #1
 801081a:	f7fc fdf9 	bl	800d410 <disk_write>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <f_lseek+0x1c0>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	755a      	strb	r2, [r3, #21]
 801082a:	2301      	movs	r3, #1
 801082c:	e13f      	b.n	8010aae <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7d1b      	ldrb	r3, [r3, #20]
 8010832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010836:	b2da      	uxtb	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	7858      	ldrb	r0, [r3, #1]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010846:	2301      	movs	r3, #1
 8010848:	69ba      	ldr	r2, [r7, #24]
 801084a:	f7fc fdc1 	bl	800d3d0 <disk_read>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d004      	beq.n	801085e <f_lseek+0x1f0>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	755a      	strb	r2, [r3, #21]
 801085a:	2301      	movs	r3, #1
 801085c:	e127      	b.n	8010aae <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	69ba      	ldr	r2, [r7, #24]
 8010862:	621a      	str	r2, [r3, #32]
 8010864:	e121      	b.n	8010aaa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	429a      	cmp	r2, r3
 801086e:	d908      	bls.n	8010882 <f_lseek+0x214>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7d1b      	ldrb	r3, [r3, #20]
 8010874:	f003 0302 	and.w	r3, r3, #2
 8010878:	2b00      	cmp	r3, #0
 801087a:	d102      	bne.n	8010882 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010888:	2300      	movs	r3, #0
 801088a:	637b      	str	r3, [r7, #52]	; 0x34
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010890:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	f000 80b5 	beq.w	8010a04 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	895b      	ldrh	r3, [r3, #10]
 801089e:	461a      	mov	r2, r3
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	899b      	ldrh	r3, [r3, #12]
 80108a4:	fb03 f302 	mul.w	r3, r3, r2
 80108a8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d01b      	beq.n	80108e8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	1e5a      	subs	r2, r3, #1
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	1e59      	subs	r1, r3, #1
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d30f      	bcc.n	80108e8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80108c8:	6a3b      	ldr	r3, [r7, #32]
 80108ca:	1e5a      	subs	r2, r3, #1
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	425b      	negs	r3, r3
 80108d0:	401a      	ands	r2, r3
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	683a      	ldr	r2, [r7, #0]
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	69db      	ldr	r3, [r3, #28]
 80108e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80108e6:	e022      	b.n	801092e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80108ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d119      	bne.n	8010928 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2100      	movs	r1, #0
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fd fb80 	bl	800dffe <create_chain>
 80108fe:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010902:	2b01      	cmp	r3, #1
 8010904:	d104      	bne.n	8010910 <f_lseek+0x2a2>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2202      	movs	r2, #2
 801090a:	755a      	strb	r2, [r3, #21]
 801090c:	2302      	movs	r3, #2
 801090e:	e0ce      	b.n	8010aae <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010916:	d104      	bne.n	8010922 <f_lseek+0x2b4>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	755a      	strb	r2, [r3, #21]
 801091e:	2301      	movs	r3, #1
 8010920:	e0c5      	b.n	8010aae <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010926:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801092c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	2b00      	cmp	r3, #0
 8010932:	d067      	beq.n	8010a04 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010934:	e03a      	b.n	80109ac <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010936:	683a      	ldr	r2, [r7, #0]
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	603b      	str	r3, [r7, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	699a      	ldr	r2, [r3, #24]
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	441a      	add	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7d1b      	ldrb	r3, [r3, #20]
 801094e:	f003 0302 	and.w	r3, r3, #2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00b      	beq.n	801096e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801095a:	4618      	mov	r0, r3
 801095c:	f7fd fb4f 	bl	800dffe <create_chain>
 8010960:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010964:	2b00      	cmp	r3, #0
 8010966:	d108      	bne.n	801097a <f_lseek+0x30c>
							ofs = 0; break;
 8010968:	2300      	movs	r3, #0
 801096a:	603b      	str	r3, [r7, #0]
 801096c:	e022      	b.n	80109b4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010972:	4618      	mov	r0, r3
 8010974:	f7fd f8f7 	bl	800db66 <get_fat>
 8010978:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010980:	d104      	bne.n	801098c <f_lseek+0x31e>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	755a      	strb	r2, [r3, #21]
 8010988:	2301      	movs	r3, #1
 801098a:	e090      	b.n	8010aae <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	2b01      	cmp	r3, #1
 8010990:	d904      	bls.n	801099c <f_lseek+0x32e>
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010998:	429a      	cmp	r2, r3
 801099a:	d304      	bcc.n	80109a6 <f_lseek+0x338>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2202      	movs	r2, #2
 80109a0:	755a      	strb	r2, [r3, #21]
 80109a2:	2302      	movs	r3, #2
 80109a4:	e083      	b.n	8010aae <f_lseek+0x440>
					fp->clust = clst;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109aa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d8c0      	bhi.n	8010936 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	699a      	ldr	r2, [r3, #24]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	441a      	add	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	899b      	ldrh	r3, [r3, #12]
 80109c4:	461a      	mov	r2, r3
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80109cc:	fb02 f201 	mul.w	r2, r2, r1
 80109d0:	1a9b      	subs	r3, r3, r2
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d016      	beq.n	8010a04 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fd f8a4 	bl	800db28 <clust2sect>
 80109e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80109e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d104      	bne.n	80109f2 <f_lseek+0x384>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2202      	movs	r2, #2
 80109ec:	755a      	strb	r2, [r3, #21]
 80109ee:	2302      	movs	r3, #2
 80109f0:	e05d      	b.n	8010aae <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	899b      	ldrh	r3, [r3, #12]
 80109f6:	461a      	mov	r2, r3
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80109fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a00:	4413      	add	r3, r2
 8010a02:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	699a      	ldr	r2, [r3, #24]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d90a      	bls.n	8010a26 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	699a      	ldr	r2, [r3, #24]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	8992      	ldrh	r2, [r2, #12]
 8010a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a32:	fb02 f201 	mul.w	r2, r2, r1
 8010a36:	1a9b      	subs	r3, r3, r2
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d036      	beq.n	8010aaa <f_lseek+0x43c>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d031      	beq.n	8010aaa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	b25b      	sxtb	r3, r3
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	da18      	bge.n	8010a82 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	7858      	ldrb	r0, [r3, #1]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6a1a      	ldr	r2, [r3, #32]
 8010a5e:	2301      	movs	r3, #1
 8010a60:	f7fc fcd6 	bl	800d410 <disk_write>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d004      	beq.n	8010a74 <f_lseek+0x406>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	755a      	strb	r2, [r3, #21]
 8010a70:	2301      	movs	r3, #1
 8010a72:	e01c      	b.n	8010aae <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	7d1b      	ldrb	r3, [r3, #20]
 8010a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a7c:	b2da      	uxtb	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	7858      	ldrb	r0, [r3, #1]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a90:	f7fc fc9e 	bl	800d3d0 <disk_read>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d004      	beq.n	8010aa4 <f_lseek+0x436>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	755a      	strb	r2, [r3, #21]
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	e004      	b.n	8010aae <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aa8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3740      	adds	r7, #64	; 0x40
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b0a0      	sub	sp, #128	; 0x80
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010ac2:	f107 010c 	add.w	r1, r7, #12
 8010ac6:	1d3b      	adds	r3, r7, #4
 8010ac8:	2202      	movs	r2, #2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fd16 	bl	800f4fc <find_volume>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8010ada:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f040 80a4 	bne.w	8010c2c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fbd5 	bl	800f29c <follow_path>
 8010af2:	4603      	mov	r3, r0
 8010af4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010af8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d108      	bne.n	8010b12 <f_unlink+0x5c>
 8010b00:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010b04:	f003 0320 	and.w	r3, r3, #32
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d002      	beq.n	8010b12 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010b0c:	2306      	movs	r3, #6
 8010b0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010b12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d108      	bne.n	8010b2c <f_unlink+0x76>
 8010b1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b1e:	2102      	movs	r1, #2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fc fdb3 	bl	800d68c <chk_lock>
 8010b26:	4603      	mov	r3, r0
 8010b28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010b2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d17b      	bne.n	8010c2c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010b34:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010b38:	b25b      	sxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	da03      	bge.n	8010b46 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010b3e:	2306      	movs	r3, #6
 8010b40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010b44:	e008      	b.n	8010b58 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010b46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d002      	beq.n	8010b58 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010b52:	2307      	movs	r3, #7
 8010b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8010b58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d13d      	bne.n	8010bdc <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b64:	4611      	mov	r1, r2
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fd fcbf 	bl	800e4ea <ld_clust>
 8010b6c:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010b6e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010b72:	f003 0310 	and.w	r3, r3, #16
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d030      	beq.n	8010bdc <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	69db      	ldr	r3, [r3, #28]
 8010b7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d103      	bne.n	8010b8c <f_unlink+0xd6>
						res = FR_DENIED;
 8010b84:	2307      	movs	r3, #7
 8010b86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010b8a:	e027      	b.n	8010bdc <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b92:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010b94:	f107 0310 	add.w	r3, r7, #16
 8010b98:	2100      	movs	r1, #0
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fd faff 	bl	800e19e <dir_sdi>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8010ba6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d116      	bne.n	8010bdc <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010bae:	f107 0310 	add.w	r3, r7, #16
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fd fec3 	bl	800e940 <dir_read>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010bc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d102      	bne.n	8010bce <f_unlink+0x118>
 8010bc8:	2307      	movs	r3, #7
 8010bca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010bce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010bd2:	2b04      	cmp	r3, #4
 8010bd4:	d102      	bne.n	8010bdc <f_unlink+0x126>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010bdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d123      	bne.n	8010c2c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010be4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fe f909 	bl	800ee00 <dir_remove>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010bf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d10c      	bne.n	8010c16 <f_unlink+0x160>
 8010bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d009      	beq.n	8010c16 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010c02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c06:	2200      	movs	r2, #0
 8010c08:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fd f992 	bl	800df34 <remove_chain>
 8010c10:	4603      	mov	r3, r0
 8010c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010c16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <f_unlink+0x176>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fc ff11 	bl	800da48 <sync_fs>
 8010c26:	4603      	mov	r3, r0
 8010c28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010c2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3780      	adds	r7, #128	; 0x80
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b098      	sub	sp, #96	; 0x60
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010c40:	f107 010c 	add.w	r1, r7, #12
 8010c44:	1d3b      	adds	r3, r7, #4
 8010c46:	2202      	movs	r2, #2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fe fc57 	bl	800f4fc <find_volume>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8010c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f040 80ff 	bne.w	8010e60 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	f107 0310 	add.w	r3, r7, #16
 8010c68:	4611      	mov	r1, r2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fe fb16 	bl	800f29c <follow_path>
 8010c70:	4603      	mov	r3, r0
 8010c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d102      	bne.n	8010c84 <f_mkdir+0x4c>
 8010c7e:	2308      	movs	r3, #8
 8010c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c88:	2b04      	cmp	r3, #4
 8010c8a:	d108      	bne.n	8010c9e <f_mkdir+0x66>
 8010c8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c90:	f003 0320 	and.w	r3, r3, #32
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8010c98:	2306      	movs	r3, #6
 8010c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ca2:	2b04      	cmp	r3, #4
 8010ca4:	f040 80dc 	bne.w	8010e60 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010ca8:	f107 0310 	add.w	r3, r7, #16
 8010cac:	2100      	movs	r1, #0
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fd f9a5 	bl	800dffe <create_chain>
 8010cb4:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	895b      	ldrh	r3, [r3, #10]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	899b      	ldrh	r3, [r3, #12]
 8010cc0:	fb03 f302 	mul.w	r3, r3, r2
 8010cc4:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d102      	bne.n	8010cd8 <f_mkdir+0xa0>
 8010cd2:	2307      	movs	r3, #7
 8010cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d102      	bne.n	8010ce4 <f_mkdir+0xac>
 8010cde:	2302      	movs	r3, #2
 8010ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cea:	d102      	bne.n	8010cf2 <f_mkdir+0xba>
 8010cec:	2301      	movs	r3, #1
 8010cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d106      	bne.n	8010d08 <f_mkdir+0xd0>
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fc fe31 	bl	800d964 <sync_window>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8010d08:	f7fc f8d2 	bl	800ceb0 <get_fattime>
 8010d0c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d16c      	bne.n	8010df0 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fc ff04 	bl	800db28 <clust2sect>
 8010d20:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	333c      	adds	r3, #60	; 0x3c
 8010d26:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	899b      	ldrh	r3, [r3, #12]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	2100      	movs	r1, #0
 8010d30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d32:	f7fc fc4e 	bl	800d5d2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010d36:	220b      	movs	r2, #11
 8010d38:	2120      	movs	r1, #32
 8010d3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d3c:	f7fc fc49 	bl	800d5d2 <mem_set>
					dir[DIR_Name] = '.';
 8010d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d42:	222e      	movs	r2, #46	; 0x2e
 8010d44:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d48:	330b      	adds	r3, #11
 8010d4a:	2210      	movs	r2, #16
 8010d4c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d50:	3316      	adds	r3, #22
 8010d52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fc fbef 	bl	800d538 <st_dword>
					st_clust(fs, dir, dcl);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fd fbe1 	bl	800e528 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d68:	3320      	adds	r3, #32
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fc fc0e 	bl	800d590 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d76:	3321      	adds	r3, #33	; 0x21
 8010d78:	222e      	movs	r2, #46	; 0x2e
 8010d7a:	701a      	strb	r2, [r3, #0]
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d106      	bne.n	8010d96 <f_mkdir+0x15e>
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d101      	bne.n	8010d96 <f_mkdir+0x15e>
 8010d92:	2300      	movs	r3, #0
 8010d94:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d9a:	3320      	adds	r3, #32
 8010d9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d9e:	4619      	mov	r1, r3
 8010da0:	f7fd fbc2 	bl	800e528 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	895b      	ldrh	r3, [r3, #10]
 8010da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010daa:	e01c      	b.n	8010de6 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8010dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	657a      	str	r2, [r7, #84]	; 0x54
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2201      	movs	r2, #1
 8010dba:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fc fdd0 	bl	800d964 <sync_window>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10d      	bne.n	8010dee <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	899b      	ldrh	r3, [r3, #12]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	2100      	movs	r1, #0
 8010dda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010ddc:	f7fc fbf9 	bl	800d5d2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010de2:	3b01      	subs	r3, #1
 8010de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8010de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d1df      	bne.n	8010dac <f_mkdir+0x174>
 8010dec:	e000      	b.n	8010df0 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010dee:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d107      	bne.n	8010e08 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010df8:	f107 0310 	add.w	r3, r7, #16
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fd ff07 	bl	800ec10 <dir_register>
 8010e02:	4603      	mov	r3, r0
 8010e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010e08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d120      	bne.n	8010e52 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e12:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e16:	3316      	adds	r3, #22
 8010e18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fc fb8c 	bl	800d538 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fd fb7e 	bl	800e528 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2e:	330b      	adds	r3, #11
 8010e30:	2210      	movs	r2, #16
 8010e32:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2201      	movs	r2, #1
 8010e38:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d10e      	bne.n	8010e60 <f_mkdir+0x228>
					res = sync_fs(fs);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fc fdff 	bl	800da48 <sync_fs>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010e50:	e006      	b.n	8010e60 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010e52:	f107 0310 	add.w	r3, r7, #16
 8010e56:	2200      	movs	r2, #0
 8010e58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fd f86a 	bl	800df34 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3760      	adds	r7, #96	; 0x60
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b088      	sub	sp, #32
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010e80:	e01b      	b.n	8010eba <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010e82:	f107 0310 	add.w	r3, r7, #16
 8010e86:	f107 0114 	add.w	r1, r7, #20
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7ff f809 	bl	800fea4 <f_read>
		if (rc != 1) break;
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d116      	bne.n	8010ec6 <f_gets+0x5a>
		c = s[0];
 8010e98:	7d3b      	ldrb	r3, [r7, #20]
 8010e9a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010e9c:	7dfb      	ldrb	r3, [r7, #23]
 8010e9e:	2b0d      	cmp	r3, #13
 8010ea0:	d100      	bne.n	8010ea4 <f_gets+0x38>
 8010ea2:	e00a      	b.n	8010eba <f_gets+0x4e>
		*p++ = c;
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	1c5a      	adds	r2, r3, #1
 8010ea8:	61ba      	str	r2, [r7, #24]
 8010eaa:	7dfa      	ldrb	r2, [r7, #23]
 8010eac:	701a      	strb	r2, [r3, #0]
		n++;
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010eb4:	7dfb      	ldrb	r3, [r7, #23]
 8010eb6:	2b0a      	cmp	r3, #10
 8010eb8:	d007      	beq.n	8010eca <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	3b01      	subs	r3, #1
 8010ebe:	69fa      	ldr	r2, [r7, #28]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	dbde      	blt.n	8010e82 <f_gets+0x16>
 8010ec4:	e002      	b.n	8010ecc <f_gets+0x60>
		if (rc != 1) break;
 8010ec6:	bf00      	nop
 8010ec8:	e000      	b.n	8010ecc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010eca:	bf00      	nop
	}
	*p = 0;
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <f_gets+0x70>
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	e000      	b.n	8010ede <f_gets+0x72>
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3720      	adds	r7, #32
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
	...

08010ee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b087      	sub	sp, #28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010efe:	4b1f      	ldr	r3, [pc, #124]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f00:	7a5b      	ldrb	r3, [r3, #9]
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d131      	bne.n	8010f6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010f08:	4b1c      	ldr	r3, [pc, #112]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f0a:	7a5b      	ldrb	r3, [r3, #9]
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4b1a      	ldr	r3, [pc, #104]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f12:	2100      	movs	r1, #0
 8010f14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010f16:	4b19      	ldr	r3, [pc, #100]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f18:	7a5b      	ldrb	r3, [r3, #9]
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	4a17      	ldr	r2, [pc, #92]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f1e:	009b      	lsls	r3, r3, #2
 8010f20:	4413      	add	r3, r2
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010f26:	4b15      	ldr	r3, [pc, #84]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f28:	7a5b      	ldrb	r3, [r3, #9]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	4b13      	ldr	r3, [pc, #76]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f30:	4413      	add	r3, r2
 8010f32:	79fa      	ldrb	r2, [r7, #7]
 8010f34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010f36:	4b11      	ldr	r3, [pc, #68]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f38:	7a5b      	ldrb	r3, [r3, #9]
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	1c5a      	adds	r2, r3, #1
 8010f3e:	b2d1      	uxtb	r1, r2
 8010f40:	4a0e      	ldr	r2, [pc, #56]	; (8010f7c <FATFS_LinkDriverEx+0x94>)
 8010f42:	7251      	strb	r1, [r2, #9]
 8010f44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010f46:	7dbb      	ldrb	r3, [r7, #22]
 8010f48:	3330      	adds	r3, #48	; 0x30
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	3301      	adds	r3, #1
 8010f54:	223a      	movs	r2, #58	; 0x3a
 8010f56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	3302      	adds	r3, #2
 8010f5c:	222f      	movs	r2, #47	; 0x2f
 8010f5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	3303      	adds	r3, #3
 8010f64:	2200      	movs	r2, #0
 8010f66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	371c      	adds	r7, #28
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	2001391c 	.word	0x2001391c

08010f80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff ffaa 	bl	8010ee8 <FATFS_LinkDriverEx>
 8010f94:	4603      	mov	r3, r0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
	...

08010fa0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010fac:	88fb      	ldrh	r3, [r7, #6]
 8010fae:	2b7f      	cmp	r3, #127	; 0x7f
 8010fb0:	d802      	bhi.n	8010fb8 <ff_convert+0x18>
		c = chr;
 8010fb2:	88fb      	ldrh	r3, [r7, #6]
 8010fb4:	81fb      	strh	r3, [r7, #14]
 8010fb6:	e025      	b.n	8011004 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00b      	beq.n	8010fd6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010fbe:	88fb      	ldrh	r3, [r7, #6]
 8010fc0:	2bff      	cmp	r3, #255	; 0xff
 8010fc2:	d805      	bhi.n	8010fd0 <ff_convert+0x30>
 8010fc4:	88fb      	ldrh	r3, [r7, #6]
 8010fc6:	3b80      	subs	r3, #128	; 0x80
 8010fc8:	4a12      	ldr	r2, [pc, #72]	; (8011014 <ff_convert+0x74>)
 8010fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fce:	e000      	b.n	8010fd2 <ff_convert+0x32>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	81fb      	strh	r3, [r7, #14]
 8010fd4:	e016      	b.n	8011004 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	81fb      	strh	r3, [r7, #14]
 8010fda:	e009      	b.n	8010ff0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010fdc:	89fb      	ldrh	r3, [r7, #14]
 8010fde:	4a0d      	ldr	r2, [pc, #52]	; (8011014 <ff_convert+0x74>)
 8010fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fe4:	88fa      	ldrh	r2, [r7, #6]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d006      	beq.n	8010ff8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010fea:	89fb      	ldrh	r3, [r7, #14]
 8010fec:	3301      	adds	r3, #1
 8010fee:	81fb      	strh	r3, [r7, #14]
 8010ff0:	89fb      	ldrh	r3, [r7, #14]
 8010ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8010ff4:	d9f2      	bls.n	8010fdc <ff_convert+0x3c>
 8010ff6:	e000      	b.n	8010ffa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010ff8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010ffa:	89fb      	ldrh	r3, [r7, #14]
 8010ffc:	3380      	adds	r3, #128	; 0x80
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	b2db      	uxtb	r3, r3
 8011002:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011004:	89fb      	ldrh	r3, [r7, #14]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3714      	adds	r7, #20
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	0801733c 	.word	0x0801733c

08011018 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011018:	b480      	push	{r7}
 801101a:	b087      	sub	sp, #28
 801101c:	af00      	add	r7, sp, #0
 801101e:	4603      	mov	r3, r0
 8011020:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011022:	88fb      	ldrh	r3, [r7, #6]
 8011024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011028:	d201      	bcs.n	801102e <ff_wtoupper+0x16>
 801102a:	4b3e      	ldr	r3, [pc, #248]	; (8011124 <ff_wtoupper+0x10c>)
 801102c:	e000      	b.n	8011030 <ff_wtoupper+0x18>
 801102e:	4b3e      	ldr	r3, [pc, #248]	; (8011128 <ff_wtoupper+0x110>)
 8011030:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	1c9a      	adds	r2, r3, #2
 8011036:	617a      	str	r2, [r7, #20]
 8011038:	881b      	ldrh	r3, [r3, #0]
 801103a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801103c:	8a7b      	ldrh	r3, [r7, #18]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d068      	beq.n	8011114 <ff_wtoupper+0xfc>
 8011042:	88fa      	ldrh	r2, [r7, #6]
 8011044:	8a7b      	ldrh	r3, [r7, #18]
 8011046:	429a      	cmp	r2, r3
 8011048:	d364      	bcc.n	8011114 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	1c9a      	adds	r2, r3, #2
 801104e:	617a      	str	r2, [r7, #20]
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	823b      	strh	r3, [r7, #16]
 8011054:	8a3b      	ldrh	r3, [r7, #16]
 8011056:	0a1b      	lsrs	r3, r3, #8
 8011058:	81fb      	strh	r3, [r7, #14]
 801105a:	8a3b      	ldrh	r3, [r7, #16]
 801105c:	b2db      	uxtb	r3, r3
 801105e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011060:	88fa      	ldrh	r2, [r7, #6]
 8011062:	8a79      	ldrh	r1, [r7, #18]
 8011064:	8a3b      	ldrh	r3, [r7, #16]
 8011066:	440b      	add	r3, r1
 8011068:	429a      	cmp	r2, r3
 801106a:	da49      	bge.n	8011100 <ff_wtoupper+0xe8>
			switch (cmd) {
 801106c:	89fb      	ldrh	r3, [r7, #14]
 801106e:	2b08      	cmp	r3, #8
 8011070:	d84f      	bhi.n	8011112 <ff_wtoupper+0xfa>
 8011072:	a201      	add	r2, pc, #4	; (adr r2, 8011078 <ff_wtoupper+0x60>)
 8011074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011078:	0801109d 	.word	0x0801109d
 801107c:	080110af 	.word	0x080110af
 8011080:	080110c5 	.word	0x080110c5
 8011084:	080110cd 	.word	0x080110cd
 8011088:	080110d5 	.word	0x080110d5
 801108c:	080110dd 	.word	0x080110dd
 8011090:	080110e5 	.word	0x080110e5
 8011094:	080110ed 	.word	0x080110ed
 8011098:	080110f5 	.word	0x080110f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801109c:	88fa      	ldrh	r2, [r7, #6]
 801109e:	8a7b      	ldrh	r3, [r7, #18]
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	697a      	ldr	r2, [r7, #20]
 80110a6:	4413      	add	r3, r2
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	80fb      	strh	r3, [r7, #6]
 80110ac:	e027      	b.n	80110fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80110ae:	88fa      	ldrh	r2, [r7, #6]
 80110b0:	8a7b      	ldrh	r3, [r7, #18]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	88fa      	ldrh	r2, [r7, #6]
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	80fb      	strh	r3, [r7, #6]
 80110c2:	e01c      	b.n	80110fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80110c4:	88fb      	ldrh	r3, [r7, #6]
 80110c6:	3b10      	subs	r3, #16
 80110c8:	80fb      	strh	r3, [r7, #6]
 80110ca:	e018      	b.n	80110fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80110cc:	88fb      	ldrh	r3, [r7, #6]
 80110ce:	3b20      	subs	r3, #32
 80110d0:	80fb      	strh	r3, [r7, #6]
 80110d2:	e014      	b.n	80110fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80110d4:	88fb      	ldrh	r3, [r7, #6]
 80110d6:	3b30      	subs	r3, #48	; 0x30
 80110d8:	80fb      	strh	r3, [r7, #6]
 80110da:	e010      	b.n	80110fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80110dc:	88fb      	ldrh	r3, [r7, #6]
 80110de:	3b1a      	subs	r3, #26
 80110e0:	80fb      	strh	r3, [r7, #6]
 80110e2:	e00c      	b.n	80110fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80110e4:	88fb      	ldrh	r3, [r7, #6]
 80110e6:	3308      	adds	r3, #8
 80110e8:	80fb      	strh	r3, [r7, #6]
 80110ea:	e008      	b.n	80110fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80110ec:	88fb      	ldrh	r3, [r7, #6]
 80110ee:	3b50      	subs	r3, #80	; 0x50
 80110f0:	80fb      	strh	r3, [r7, #6]
 80110f2:	e004      	b.n	80110fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80110f4:	88fb      	ldrh	r3, [r7, #6]
 80110f6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80110fa:	80fb      	strh	r3, [r7, #6]
 80110fc:	bf00      	nop
			}
			break;
 80110fe:	e008      	b.n	8011112 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011100:	89fb      	ldrh	r3, [r7, #14]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d195      	bne.n	8011032 <ff_wtoupper+0x1a>
 8011106:	8a3b      	ldrh	r3, [r7, #16]
 8011108:	005b      	lsls	r3, r3, #1
 801110a:	697a      	ldr	r2, [r7, #20]
 801110c:	4413      	add	r3, r2
 801110e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011110:	e78f      	b.n	8011032 <ff_wtoupper+0x1a>
			break;
 8011112:	bf00      	nop
	}

	return chr;
 8011114:	88fb      	ldrh	r3, [r7, #6]
}
 8011116:	4618      	mov	r0, r3
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	0801743c 	.word	0x0801743c
 8011128:	08017630 	.word	0x08017630
 801112c:	00000000 	.word	0x00000000

08011130 <cos>:
 8011130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011132:	ec51 0b10 	vmov	r0, r1, d0
 8011136:	4a1e      	ldr	r2, [pc, #120]	; (80111b0 <cos+0x80>)
 8011138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801113c:	4293      	cmp	r3, r2
 801113e:	dc06      	bgt.n	801114e <cos+0x1e>
 8011140:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80111a8 <cos+0x78>
 8011144:	f000 fa74 	bl	8011630 <__kernel_cos>
 8011148:	ec51 0b10 	vmov	r0, r1, d0
 801114c:	e007      	b.n	801115e <cos+0x2e>
 801114e:	4a19      	ldr	r2, [pc, #100]	; (80111b4 <cos+0x84>)
 8011150:	4293      	cmp	r3, r2
 8011152:	dd09      	ble.n	8011168 <cos+0x38>
 8011154:	ee10 2a10 	vmov	r2, s0
 8011158:	460b      	mov	r3, r1
 801115a:	f7ef f8ad 	bl	80002b8 <__aeabi_dsub>
 801115e:	ec41 0b10 	vmov	d0, r0, r1
 8011162:	b005      	add	sp, #20
 8011164:	f85d fb04 	ldr.w	pc, [sp], #4
 8011168:	4668      	mov	r0, sp
 801116a:	f000 f86d 	bl	8011248 <__ieee754_rem_pio2>
 801116e:	f000 0003 	and.w	r0, r0, #3
 8011172:	2801      	cmp	r0, #1
 8011174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011178:	ed9d 0b00 	vldr	d0, [sp]
 801117c:	d007      	beq.n	801118e <cos+0x5e>
 801117e:	2802      	cmp	r0, #2
 8011180:	d00e      	beq.n	80111a0 <cos+0x70>
 8011182:	2800      	cmp	r0, #0
 8011184:	d0de      	beq.n	8011144 <cos+0x14>
 8011186:	2001      	movs	r0, #1
 8011188:	f000 fe5a 	bl	8011e40 <__kernel_sin>
 801118c:	e7dc      	b.n	8011148 <cos+0x18>
 801118e:	f000 fe57 	bl	8011e40 <__kernel_sin>
 8011192:	ec53 2b10 	vmov	r2, r3, d0
 8011196:	ee10 0a10 	vmov	r0, s0
 801119a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801119e:	e7de      	b.n	801115e <cos+0x2e>
 80111a0:	f000 fa46 	bl	8011630 <__kernel_cos>
 80111a4:	e7f5      	b.n	8011192 <cos+0x62>
 80111a6:	bf00      	nop
	...
 80111b0:	3fe921fb 	.word	0x3fe921fb
 80111b4:	7fefffff 	.word	0x7fefffff

080111b8 <sin>:
 80111b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ba:	ec51 0b10 	vmov	r0, r1, d0
 80111be:	4a20      	ldr	r2, [pc, #128]	; (8011240 <sin+0x88>)
 80111c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111c4:	4293      	cmp	r3, r2
 80111c6:	dc07      	bgt.n	80111d8 <sin+0x20>
 80111c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011238 <sin+0x80>
 80111cc:	2000      	movs	r0, #0
 80111ce:	f000 fe37 	bl	8011e40 <__kernel_sin>
 80111d2:	ec51 0b10 	vmov	r0, r1, d0
 80111d6:	e007      	b.n	80111e8 <sin+0x30>
 80111d8:	4a1a      	ldr	r2, [pc, #104]	; (8011244 <sin+0x8c>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	dd09      	ble.n	80111f2 <sin+0x3a>
 80111de:	ee10 2a10 	vmov	r2, s0
 80111e2:	460b      	mov	r3, r1
 80111e4:	f7ef f868 	bl	80002b8 <__aeabi_dsub>
 80111e8:	ec41 0b10 	vmov	d0, r0, r1
 80111ec:	b005      	add	sp, #20
 80111ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80111f2:	4668      	mov	r0, sp
 80111f4:	f000 f828 	bl	8011248 <__ieee754_rem_pio2>
 80111f8:	f000 0003 	and.w	r0, r0, #3
 80111fc:	2801      	cmp	r0, #1
 80111fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011202:	ed9d 0b00 	vldr	d0, [sp]
 8011206:	d004      	beq.n	8011212 <sin+0x5a>
 8011208:	2802      	cmp	r0, #2
 801120a:	d005      	beq.n	8011218 <sin+0x60>
 801120c:	b970      	cbnz	r0, 801122c <sin+0x74>
 801120e:	2001      	movs	r0, #1
 8011210:	e7dd      	b.n	80111ce <sin+0x16>
 8011212:	f000 fa0d 	bl	8011630 <__kernel_cos>
 8011216:	e7dc      	b.n	80111d2 <sin+0x1a>
 8011218:	2001      	movs	r0, #1
 801121a:	f000 fe11 	bl	8011e40 <__kernel_sin>
 801121e:	ec53 2b10 	vmov	r2, r3, d0
 8011222:	ee10 0a10 	vmov	r0, s0
 8011226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801122a:	e7dd      	b.n	80111e8 <sin+0x30>
 801122c:	f000 fa00 	bl	8011630 <__kernel_cos>
 8011230:	e7f5      	b.n	801121e <sin+0x66>
 8011232:	bf00      	nop
 8011234:	f3af 8000 	nop.w
	...
 8011240:	3fe921fb 	.word	0x3fe921fb
 8011244:	7fefffff 	.word	0x7fefffff

08011248 <__ieee754_rem_pio2>:
 8011248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	ec57 6b10 	vmov	r6, r7, d0
 8011250:	4bc3      	ldr	r3, [pc, #780]	; (8011560 <__ieee754_rem_pio2+0x318>)
 8011252:	b08d      	sub	sp, #52	; 0x34
 8011254:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011258:	4598      	cmp	r8, r3
 801125a:	4604      	mov	r4, r0
 801125c:	9704      	str	r7, [sp, #16]
 801125e:	dc07      	bgt.n	8011270 <__ieee754_rem_pio2+0x28>
 8011260:	2200      	movs	r2, #0
 8011262:	2300      	movs	r3, #0
 8011264:	ed84 0b00 	vstr	d0, [r4]
 8011268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801126c:	2500      	movs	r5, #0
 801126e:	e027      	b.n	80112c0 <__ieee754_rem_pio2+0x78>
 8011270:	4bbc      	ldr	r3, [pc, #752]	; (8011564 <__ieee754_rem_pio2+0x31c>)
 8011272:	4598      	cmp	r8, r3
 8011274:	dc75      	bgt.n	8011362 <__ieee754_rem_pio2+0x11a>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	4dbb      	ldr	r5, [pc, #748]	; (8011568 <__ieee754_rem_pio2+0x320>)
 801127a:	2b00      	cmp	r3, #0
 801127c:	ee10 0a10 	vmov	r0, s0
 8011280:	a3a9      	add	r3, pc, #676	; (adr r3, 8011528 <__ieee754_rem_pio2+0x2e0>)
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	4639      	mov	r1, r7
 8011288:	dd36      	ble.n	80112f8 <__ieee754_rem_pio2+0xb0>
 801128a:	f7ef f815 	bl	80002b8 <__aeabi_dsub>
 801128e:	45a8      	cmp	r8, r5
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	d018      	beq.n	80112c8 <__ieee754_rem_pio2+0x80>
 8011296:	a3a6      	add	r3, pc, #664	; (adr r3, 8011530 <__ieee754_rem_pio2+0x2e8>)
 8011298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129c:	f7ef f80c 	bl	80002b8 <__aeabi_dsub>
 80112a0:	4602      	mov	r2, r0
 80112a2:	460b      	mov	r3, r1
 80112a4:	e9c4 2300 	strd	r2, r3, [r4]
 80112a8:	4630      	mov	r0, r6
 80112aa:	4639      	mov	r1, r7
 80112ac:	f7ef f804 	bl	80002b8 <__aeabi_dsub>
 80112b0:	a39f      	add	r3, pc, #636	; (adr r3, 8011530 <__ieee754_rem_pio2+0x2e8>)
 80112b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b6:	f7ee ffff 	bl	80002b8 <__aeabi_dsub>
 80112ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112be:	2501      	movs	r5, #1
 80112c0:	4628      	mov	r0, r5
 80112c2:	b00d      	add	sp, #52	; 0x34
 80112c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c8:	a39b      	add	r3, pc, #620	; (adr r3, 8011538 <__ieee754_rem_pio2+0x2f0>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	f7ee fff3 	bl	80002b8 <__aeabi_dsub>
 80112d2:	a39b      	add	r3, pc, #620	; (adr r3, 8011540 <__ieee754_rem_pio2+0x2f8>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	4606      	mov	r6, r0
 80112da:	460f      	mov	r7, r1
 80112dc:	f7ee ffec 	bl	80002b8 <__aeabi_dsub>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	e9c4 2300 	strd	r2, r3, [r4]
 80112e8:	4630      	mov	r0, r6
 80112ea:	4639      	mov	r1, r7
 80112ec:	f7ee ffe4 	bl	80002b8 <__aeabi_dsub>
 80112f0:	a393      	add	r3, pc, #588	; (adr r3, 8011540 <__ieee754_rem_pio2+0x2f8>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	e7de      	b.n	80112b6 <__ieee754_rem_pio2+0x6e>
 80112f8:	f7ee ffe0 	bl	80002bc <__adddf3>
 80112fc:	45a8      	cmp	r8, r5
 80112fe:	4606      	mov	r6, r0
 8011300:	460f      	mov	r7, r1
 8011302:	d016      	beq.n	8011332 <__ieee754_rem_pio2+0xea>
 8011304:	a38a      	add	r3, pc, #552	; (adr r3, 8011530 <__ieee754_rem_pio2+0x2e8>)
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f7ee ffd7 	bl	80002bc <__adddf3>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	e9c4 2300 	strd	r2, r3, [r4]
 8011316:	4630      	mov	r0, r6
 8011318:	4639      	mov	r1, r7
 801131a:	f7ee ffcd 	bl	80002b8 <__aeabi_dsub>
 801131e:	a384      	add	r3, pc, #528	; (adr r3, 8011530 <__ieee754_rem_pio2+0x2e8>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ee ffca 	bl	80002bc <__adddf3>
 8011328:	f04f 35ff 	mov.w	r5, #4294967295
 801132c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011330:	e7c6      	b.n	80112c0 <__ieee754_rem_pio2+0x78>
 8011332:	a381      	add	r3, pc, #516	; (adr r3, 8011538 <__ieee754_rem_pio2+0x2f0>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	f7ee ffc0 	bl	80002bc <__adddf3>
 801133c:	a380      	add	r3, pc, #512	; (adr r3, 8011540 <__ieee754_rem_pio2+0x2f8>)
 801133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011342:	4606      	mov	r6, r0
 8011344:	460f      	mov	r7, r1
 8011346:	f7ee ffb9 	bl	80002bc <__adddf3>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	e9c4 2300 	strd	r2, r3, [r4]
 8011352:	4630      	mov	r0, r6
 8011354:	4639      	mov	r1, r7
 8011356:	f7ee ffaf 	bl	80002b8 <__aeabi_dsub>
 801135a:	a379      	add	r3, pc, #484	; (adr r3, 8011540 <__ieee754_rem_pio2+0x2f8>)
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	e7e0      	b.n	8011324 <__ieee754_rem_pio2+0xdc>
 8011362:	4b82      	ldr	r3, [pc, #520]	; (801156c <__ieee754_rem_pio2+0x324>)
 8011364:	4598      	cmp	r8, r3
 8011366:	f300 80d0 	bgt.w	801150a <__ieee754_rem_pio2+0x2c2>
 801136a:	f000 fe23 	bl	8011fb4 <fabs>
 801136e:	ec57 6b10 	vmov	r6, r7, d0
 8011372:	ee10 0a10 	vmov	r0, s0
 8011376:	a374      	add	r3, pc, #464	; (adr r3, 8011548 <__ieee754_rem_pio2+0x300>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	4639      	mov	r1, r7
 801137e:	f7ef f953 	bl	8000628 <__aeabi_dmul>
 8011382:	2200      	movs	r2, #0
 8011384:	4b7a      	ldr	r3, [pc, #488]	; (8011570 <__ieee754_rem_pio2+0x328>)
 8011386:	f7ee ff99 	bl	80002bc <__adddf3>
 801138a:	f7ef fbfd 	bl	8000b88 <__aeabi_d2iz>
 801138e:	4605      	mov	r5, r0
 8011390:	f7ef f8e0 	bl	8000554 <__aeabi_i2d>
 8011394:	a364      	add	r3, pc, #400	; (adr r3, 8011528 <__ieee754_rem_pio2+0x2e0>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801139e:	f7ef f943 	bl	8000628 <__aeabi_dmul>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ee ff85 	bl	80002b8 <__aeabi_dsub>
 80113ae:	a360      	add	r3, pc, #384	; (adr r3, 8011530 <__ieee754_rem_pio2+0x2e8>)
 80113b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b4:	4682      	mov	sl, r0
 80113b6:	468b      	mov	fp, r1
 80113b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113bc:	f7ef f934 	bl	8000628 <__aeabi_dmul>
 80113c0:	2d1f      	cmp	r5, #31
 80113c2:	4606      	mov	r6, r0
 80113c4:	460f      	mov	r7, r1
 80113c6:	dc0c      	bgt.n	80113e2 <__ieee754_rem_pio2+0x19a>
 80113c8:	1e6a      	subs	r2, r5, #1
 80113ca:	4b6a      	ldr	r3, [pc, #424]	; (8011574 <__ieee754_rem_pio2+0x32c>)
 80113cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113d0:	4543      	cmp	r3, r8
 80113d2:	d006      	beq.n	80113e2 <__ieee754_rem_pio2+0x19a>
 80113d4:	4632      	mov	r2, r6
 80113d6:	463b      	mov	r3, r7
 80113d8:	4650      	mov	r0, sl
 80113da:	4659      	mov	r1, fp
 80113dc:	f7ee ff6c 	bl	80002b8 <__aeabi_dsub>
 80113e0:	e00e      	b.n	8011400 <__ieee754_rem_pio2+0x1b8>
 80113e2:	4632      	mov	r2, r6
 80113e4:	463b      	mov	r3, r7
 80113e6:	4650      	mov	r0, sl
 80113e8:	4659      	mov	r1, fp
 80113ea:	f7ee ff65 	bl	80002b8 <__aeabi_dsub>
 80113ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80113f2:	9305      	str	r3, [sp, #20]
 80113f4:	9a05      	ldr	r2, [sp, #20]
 80113f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113fa:	1ad3      	subs	r3, r2, r3
 80113fc:	2b10      	cmp	r3, #16
 80113fe:	dc02      	bgt.n	8011406 <__ieee754_rem_pio2+0x1be>
 8011400:	e9c4 0100 	strd	r0, r1, [r4]
 8011404:	e039      	b.n	801147a <__ieee754_rem_pio2+0x232>
 8011406:	a34c      	add	r3, pc, #304	; (adr r3, 8011538 <__ieee754_rem_pio2+0x2f0>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011410:	f7ef f90a 	bl	8000628 <__aeabi_dmul>
 8011414:	4606      	mov	r6, r0
 8011416:	460f      	mov	r7, r1
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4650      	mov	r0, sl
 801141e:	4659      	mov	r1, fp
 8011420:	f7ee ff4a 	bl	80002b8 <__aeabi_dsub>
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	4650      	mov	r0, sl
 801142e:	4659      	mov	r1, fp
 8011430:	f7ee ff42 	bl	80002b8 <__aeabi_dsub>
 8011434:	4632      	mov	r2, r6
 8011436:	463b      	mov	r3, r7
 8011438:	f7ee ff3e 	bl	80002b8 <__aeabi_dsub>
 801143c:	a340      	add	r3, pc, #256	; (adr r3, 8011540 <__ieee754_rem_pio2+0x2f8>)
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	4606      	mov	r6, r0
 8011444:	460f      	mov	r7, r1
 8011446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801144a:	f7ef f8ed 	bl	8000628 <__aeabi_dmul>
 801144e:	4632      	mov	r2, r6
 8011450:	463b      	mov	r3, r7
 8011452:	f7ee ff31 	bl	80002b8 <__aeabi_dsub>
 8011456:	4602      	mov	r2, r0
 8011458:	460b      	mov	r3, r1
 801145a:	4606      	mov	r6, r0
 801145c:	460f      	mov	r7, r1
 801145e:	4640      	mov	r0, r8
 8011460:	4649      	mov	r1, r9
 8011462:	f7ee ff29 	bl	80002b8 <__aeabi_dsub>
 8011466:	9a05      	ldr	r2, [sp, #20]
 8011468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	2b31      	cmp	r3, #49	; 0x31
 8011470:	dc20      	bgt.n	80114b4 <__ieee754_rem_pio2+0x26c>
 8011472:	e9c4 0100 	strd	r0, r1, [r4]
 8011476:	46c2      	mov	sl, r8
 8011478:	46cb      	mov	fp, r9
 801147a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801147e:	4650      	mov	r0, sl
 8011480:	4642      	mov	r2, r8
 8011482:	464b      	mov	r3, r9
 8011484:	4659      	mov	r1, fp
 8011486:	f7ee ff17 	bl	80002b8 <__aeabi_dsub>
 801148a:	463b      	mov	r3, r7
 801148c:	4632      	mov	r2, r6
 801148e:	f7ee ff13 	bl	80002b8 <__aeabi_dsub>
 8011492:	9b04      	ldr	r3, [sp, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801149a:	f6bf af11 	bge.w	80112c0 <__ieee754_rem_pio2+0x78>
 801149e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80114a2:	6063      	str	r3, [r4, #4]
 80114a4:	f8c4 8000 	str.w	r8, [r4]
 80114a8:	60a0      	str	r0, [r4, #8]
 80114aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114ae:	60e3      	str	r3, [r4, #12]
 80114b0:	426d      	negs	r5, r5
 80114b2:	e705      	b.n	80112c0 <__ieee754_rem_pio2+0x78>
 80114b4:	a326      	add	r3, pc, #152	; (adr r3, 8011550 <__ieee754_rem_pio2+0x308>)
 80114b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114be:	f7ef f8b3 	bl	8000628 <__aeabi_dmul>
 80114c2:	4606      	mov	r6, r0
 80114c4:	460f      	mov	r7, r1
 80114c6:	4602      	mov	r2, r0
 80114c8:	460b      	mov	r3, r1
 80114ca:	4640      	mov	r0, r8
 80114cc:	4649      	mov	r1, r9
 80114ce:	f7ee fef3 	bl	80002b8 <__aeabi_dsub>
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	4682      	mov	sl, r0
 80114d8:	468b      	mov	fp, r1
 80114da:	4640      	mov	r0, r8
 80114dc:	4649      	mov	r1, r9
 80114de:	f7ee feeb 	bl	80002b8 <__aeabi_dsub>
 80114e2:	4632      	mov	r2, r6
 80114e4:	463b      	mov	r3, r7
 80114e6:	f7ee fee7 	bl	80002b8 <__aeabi_dsub>
 80114ea:	a31b      	add	r3, pc, #108	; (adr r3, 8011558 <__ieee754_rem_pio2+0x310>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	4606      	mov	r6, r0
 80114f2:	460f      	mov	r7, r1
 80114f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114f8:	f7ef f896 	bl	8000628 <__aeabi_dmul>
 80114fc:	4632      	mov	r2, r6
 80114fe:	463b      	mov	r3, r7
 8011500:	f7ee feda 	bl	80002b8 <__aeabi_dsub>
 8011504:	4606      	mov	r6, r0
 8011506:	460f      	mov	r7, r1
 8011508:	e764      	b.n	80113d4 <__ieee754_rem_pio2+0x18c>
 801150a:	4b1b      	ldr	r3, [pc, #108]	; (8011578 <__ieee754_rem_pio2+0x330>)
 801150c:	4598      	cmp	r8, r3
 801150e:	dd35      	ble.n	801157c <__ieee754_rem_pio2+0x334>
 8011510:	ee10 2a10 	vmov	r2, s0
 8011514:	463b      	mov	r3, r7
 8011516:	4630      	mov	r0, r6
 8011518:	4639      	mov	r1, r7
 801151a:	f7ee fecd 	bl	80002b8 <__aeabi_dsub>
 801151e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011522:	e9c4 0100 	strd	r0, r1, [r4]
 8011526:	e6a1      	b.n	801126c <__ieee754_rem_pio2+0x24>
 8011528:	54400000 	.word	0x54400000
 801152c:	3ff921fb 	.word	0x3ff921fb
 8011530:	1a626331 	.word	0x1a626331
 8011534:	3dd0b461 	.word	0x3dd0b461
 8011538:	1a600000 	.word	0x1a600000
 801153c:	3dd0b461 	.word	0x3dd0b461
 8011540:	2e037073 	.word	0x2e037073
 8011544:	3ba3198a 	.word	0x3ba3198a
 8011548:	6dc9c883 	.word	0x6dc9c883
 801154c:	3fe45f30 	.word	0x3fe45f30
 8011550:	2e000000 	.word	0x2e000000
 8011554:	3ba3198a 	.word	0x3ba3198a
 8011558:	252049c1 	.word	0x252049c1
 801155c:	397b839a 	.word	0x397b839a
 8011560:	3fe921fb 	.word	0x3fe921fb
 8011564:	4002d97b 	.word	0x4002d97b
 8011568:	3ff921fb 	.word	0x3ff921fb
 801156c:	413921fb 	.word	0x413921fb
 8011570:	3fe00000 	.word	0x3fe00000
 8011574:	080176ec 	.word	0x080176ec
 8011578:	7fefffff 	.word	0x7fefffff
 801157c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011580:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011584:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011588:	4630      	mov	r0, r6
 801158a:	460f      	mov	r7, r1
 801158c:	f7ef fafc 	bl	8000b88 <__aeabi_d2iz>
 8011590:	f7ee ffe0 	bl	8000554 <__aeabi_i2d>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	4630      	mov	r0, r6
 801159a:	4639      	mov	r1, r7
 801159c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115a0:	f7ee fe8a 	bl	80002b8 <__aeabi_dsub>
 80115a4:	2200      	movs	r2, #0
 80115a6:	4b1f      	ldr	r3, [pc, #124]	; (8011624 <__ieee754_rem_pio2+0x3dc>)
 80115a8:	f7ef f83e 	bl	8000628 <__aeabi_dmul>
 80115ac:	460f      	mov	r7, r1
 80115ae:	4606      	mov	r6, r0
 80115b0:	f7ef faea 	bl	8000b88 <__aeabi_d2iz>
 80115b4:	f7ee ffce 	bl	8000554 <__aeabi_i2d>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	4630      	mov	r0, r6
 80115be:	4639      	mov	r1, r7
 80115c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80115c4:	f7ee fe78 	bl	80002b8 <__aeabi_dsub>
 80115c8:	2200      	movs	r2, #0
 80115ca:	4b16      	ldr	r3, [pc, #88]	; (8011624 <__ieee754_rem_pio2+0x3dc>)
 80115cc:	f7ef f82c 	bl	8000628 <__aeabi_dmul>
 80115d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80115d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80115d8:	f04f 0803 	mov.w	r8, #3
 80115dc:	2600      	movs	r6, #0
 80115de:	2700      	movs	r7, #0
 80115e0:	4632      	mov	r2, r6
 80115e2:	463b      	mov	r3, r7
 80115e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80115e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80115ec:	f7ef fa84 	bl	8000af8 <__aeabi_dcmpeq>
 80115f0:	b9b0      	cbnz	r0, 8011620 <__ieee754_rem_pio2+0x3d8>
 80115f2:	4b0d      	ldr	r3, [pc, #52]	; (8011628 <__ieee754_rem_pio2+0x3e0>)
 80115f4:	9301      	str	r3, [sp, #4]
 80115f6:	2302      	movs	r3, #2
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	462a      	mov	r2, r5
 80115fc:	4643      	mov	r3, r8
 80115fe:	4621      	mov	r1, r4
 8011600:	a806      	add	r0, sp, #24
 8011602:	f000 f8dd 	bl	80117c0 <__kernel_rem_pio2>
 8011606:	9b04      	ldr	r3, [sp, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	4605      	mov	r5, r0
 801160c:	f6bf ae58 	bge.w	80112c0 <__ieee754_rem_pio2+0x78>
 8011610:	6863      	ldr	r3, [r4, #4]
 8011612:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011616:	6063      	str	r3, [r4, #4]
 8011618:	68e3      	ldr	r3, [r4, #12]
 801161a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801161e:	e746      	b.n	80114ae <__ieee754_rem_pio2+0x266>
 8011620:	46d0      	mov	r8, sl
 8011622:	e7dd      	b.n	80115e0 <__ieee754_rem_pio2+0x398>
 8011624:	41700000 	.word	0x41700000
 8011628:	0801776c 	.word	0x0801776c
 801162c:	00000000 	.word	0x00000000

08011630 <__kernel_cos>:
 8011630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	ec59 8b10 	vmov	r8, r9, d0
 8011638:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801163c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011640:	ed2d 8b02 	vpush	{d8}
 8011644:	eeb0 8a41 	vmov.f32	s16, s2
 8011648:	eef0 8a61 	vmov.f32	s17, s3
 801164c:	da07      	bge.n	801165e <__kernel_cos+0x2e>
 801164e:	ee10 0a10 	vmov	r0, s0
 8011652:	4649      	mov	r1, r9
 8011654:	f7ef fa98 	bl	8000b88 <__aeabi_d2iz>
 8011658:	2800      	cmp	r0, #0
 801165a:	f000 8089 	beq.w	8011770 <__kernel_cos+0x140>
 801165e:	4642      	mov	r2, r8
 8011660:	464b      	mov	r3, r9
 8011662:	4640      	mov	r0, r8
 8011664:	4649      	mov	r1, r9
 8011666:	f7ee ffdf 	bl	8000628 <__aeabi_dmul>
 801166a:	2200      	movs	r2, #0
 801166c:	4b4e      	ldr	r3, [pc, #312]	; (80117a8 <__kernel_cos+0x178>)
 801166e:	4604      	mov	r4, r0
 8011670:	460d      	mov	r5, r1
 8011672:	f7ee ffd9 	bl	8000628 <__aeabi_dmul>
 8011676:	a340      	add	r3, pc, #256	; (adr r3, 8011778 <__kernel_cos+0x148>)
 8011678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167c:	4682      	mov	sl, r0
 801167e:	468b      	mov	fp, r1
 8011680:	4620      	mov	r0, r4
 8011682:	4629      	mov	r1, r5
 8011684:	f7ee ffd0 	bl	8000628 <__aeabi_dmul>
 8011688:	a33d      	add	r3, pc, #244	; (adr r3, 8011780 <__kernel_cos+0x150>)
 801168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168e:	f7ee fe15 	bl	80002bc <__adddf3>
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	f7ee ffc7 	bl	8000628 <__aeabi_dmul>
 801169a:	a33b      	add	r3, pc, #236	; (adr r3, 8011788 <__kernel_cos+0x158>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	f7ee fe0a 	bl	80002b8 <__aeabi_dsub>
 80116a4:	4622      	mov	r2, r4
 80116a6:	462b      	mov	r3, r5
 80116a8:	f7ee ffbe 	bl	8000628 <__aeabi_dmul>
 80116ac:	a338      	add	r3, pc, #224	; (adr r3, 8011790 <__kernel_cos+0x160>)
 80116ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b2:	f7ee fe03 	bl	80002bc <__adddf3>
 80116b6:	4622      	mov	r2, r4
 80116b8:	462b      	mov	r3, r5
 80116ba:	f7ee ffb5 	bl	8000628 <__aeabi_dmul>
 80116be:	a336      	add	r3, pc, #216	; (adr r3, 8011798 <__kernel_cos+0x168>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f7ee fdf8 	bl	80002b8 <__aeabi_dsub>
 80116c8:	4622      	mov	r2, r4
 80116ca:	462b      	mov	r3, r5
 80116cc:	f7ee ffac 	bl	8000628 <__aeabi_dmul>
 80116d0:	a333      	add	r3, pc, #204	; (adr r3, 80117a0 <__kernel_cos+0x170>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	f7ee fdf1 	bl	80002bc <__adddf3>
 80116da:	4622      	mov	r2, r4
 80116dc:	462b      	mov	r3, r5
 80116de:	f7ee ffa3 	bl	8000628 <__aeabi_dmul>
 80116e2:	4622      	mov	r2, r4
 80116e4:	462b      	mov	r3, r5
 80116e6:	f7ee ff9f 	bl	8000628 <__aeabi_dmul>
 80116ea:	ec53 2b18 	vmov	r2, r3, d8
 80116ee:	4604      	mov	r4, r0
 80116f0:	460d      	mov	r5, r1
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee ff97 	bl	8000628 <__aeabi_dmul>
 80116fa:	460b      	mov	r3, r1
 80116fc:	4602      	mov	r2, r0
 80116fe:	4629      	mov	r1, r5
 8011700:	4620      	mov	r0, r4
 8011702:	f7ee fdd9 	bl	80002b8 <__aeabi_dsub>
 8011706:	4b29      	ldr	r3, [pc, #164]	; (80117ac <__kernel_cos+0x17c>)
 8011708:	429e      	cmp	r6, r3
 801170a:	4680      	mov	r8, r0
 801170c:	4689      	mov	r9, r1
 801170e:	dc11      	bgt.n	8011734 <__kernel_cos+0x104>
 8011710:	4602      	mov	r2, r0
 8011712:	460b      	mov	r3, r1
 8011714:	4650      	mov	r0, sl
 8011716:	4659      	mov	r1, fp
 8011718:	f7ee fdce 	bl	80002b8 <__aeabi_dsub>
 801171c:	460b      	mov	r3, r1
 801171e:	4924      	ldr	r1, [pc, #144]	; (80117b0 <__kernel_cos+0x180>)
 8011720:	4602      	mov	r2, r0
 8011722:	2000      	movs	r0, #0
 8011724:	f7ee fdc8 	bl	80002b8 <__aeabi_dsub>
 8011728:	ecbd 8b02 	vpop	{d8}
 801172c:	ec41 0b10 	vmov	d0, r0, r1
 8011730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011734:	4b1f      	ldr	r3, [pc, #124]	; (80117b4 <__kernel_cos+0x184>)
 8011736:	491e      	ldr	r1, [pc, #120]	; (80117b0 <__kernel_cos+0x180>)
 8011738:	429e      	cmp	r6, r3
 801173a:	bfcc      	ite	gt
 801173c:	4d1e      	ldrgt	r5, [pc, #120]	; (80117b8 <__kernel_cos+0x188>)
 801173e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011742:	2400      	movs	r4, #0
 8011744:	4622      	mov	r2, r4
 8011746:	462b      	mov	r3, r5
 8011748:	2000      	movs	r0, #0
 801174a:	f7ee fdb5 	bl	80002b8 <__aeabi_dsub>
 801174e:	4622      	mov	r2, r4
 8011750:	4606      	mov	r6, r0
 8011752:	460f      	mov	r7, r1
 8011754:	462b      	mov	r3, r5
 8011756:	4650      	mov	r0, sl
 8011758:	4659      	mov	r1, fp
 801175a:	f7ee fdad 	bl	80002b8 <__aeabi_dsub>
 801175e:	4642      	mov	r2, r8
 8011760:	464b      	mov	r3, r9
 8011762:	f7ee fda9 	bl	80002b8 <__aeabi_dsub>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4630      	mov	r0, r6
 801176c:	4639      	mov	r1, r7
 801176e:	e7d9      	b.n	8011724 <__kernel_cos+0xf4>
 8011770:	2000      	movs	r0, #0
 8011772:	490f      	ldr	r1, [pc, #60]	; (80117b0 <__kernel_cos+0x180>)
 8011774:	e7d8      	b.n	8011728 <__kernel_cos+0xf8>
 8011776:	bf00      	nop
 8011778:	be8838d4 	.word	0xbe8838d4
 801177c:	bda8fae9 	.word	0xbda8fae9
 8011780:	bdb4b1c4 	.word	0xbdb4b1c4
 8011784:	3e21ee9e 	.word	0x3e21ee9e
 8011788:	809c52ad 	.word	0x809c52ad
 801178c:	3e927e4f 	.word	0x3e927e4f
 8011790:	19cb1590 	.word	0x19cb1590
 8011794:	3efa01a0 	.word	0x3efa01a0
 8011798:	16c15177 	.word	0x16c15177
 801179c:	3f56c16c 	.word	0x3f56c16c
 80117a0:	5555554c 	.word	0x5555554c
 80117a4:	3fa55555 	.word	0x3fa55555
 80117a8:	3fe00000 	.word	0x3fe00000
 80117ac:	3fd33332 	.word	0x3fd33332
 80117b0:	3ff00000 	.word	0x3ff00000
 80117b4:	3fe90000 	.word	0x3fe90000
 80117b8:	3fd20000 	.word	0x3fd20000
 80117bc:	00000000 	.word	0x00000000

080117c0 <__kernel_rem_pio2>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	ed2d 8b02 	vpush	{d8}
 80117c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80117cc:	1ed4      	subs	r4, r2, #3
 80117ce:	9308      	str	r3, [sp, #32]
 80117d0:	9101      	str	r1, [sp, #4]
 80117d2:	4bc5      	ldr	r3, [pc, #788]	; (8011ae8 <__kernel_rem_pio2+0x328>)
 80117d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80117d6:	9009      	str	r0, [sp, #36]	; 0x24
 80117d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	9b08      	ldr	r3, [sp, #32]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	9307      	str	r3, [sp, #28]
 80117e4:	2318      	movs	r3, #24
 80117e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80117ea:	f06f 0317 	mvn.w	r3, #23
 80117ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80117f2:	fb04 3303 	mla	r3, r4, r3, r3
 80117f6:	eb03 0a02 	add.w	sl, r3, r2
 80117fa:	9b04      	ldr	r3, [sp, #16]
 80117fc:	9a07      	ldr	r2, [sp, #28]
 80117fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011ad8 <__kernel_rem_pio2+0x318>
 8011802:	eb03 0802 	add.w	r8, r3, r2
 8011806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011808:	1aa7      	subs	r7, r4, r2
 801180a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801180e:	ae22      	add	r6, sp, #136	; 0x88
 8011810:	2500      	movs	r5, #0
 8011812:	4545      	cmp	r5, r8
 8011814:	dd13      	ble.n	801183e <__kernel_rem_pio2+0x7e>
 8011816:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011ad8 <__kernel_rem_pio2+0x318>
 801181a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801181e:	2600      	movs	r6, #0
 8011820:	9b04      	ldr	r3, [sp, #16]
 8011822:	429e      	cmp	r6, r3
 8011824:	dc32      	bgt.n	801188c <__kernel_rem_pio2+0xcc>
 8011826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011828:	9302      	str	r3, [sp, #8]
 801182a:	9b08      	ldr	r3, [sp, #32]
 801182c:	199d      	adds	r5, r3, r6
 801182e:	ab22      	add	r3, sp, #136	; 0x88
 8011830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011834:	9306      	str	r3, [sp, #24]
 8011836:	ec59 8b18 	vmov	r8, r9, d8
 801183a:	2700      	movs	r7, #0
 801183c:	e01f      	b.n	801187e <__kernel_rem_pio2+0xbe>
 801183e:	42ef      	cmn	r7, r5
 8011840:	d407      	bmi.n	8011852 <__kernel_rem_pio2+0x92>
 8011842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011846:	f7ee fe85 	bl	8000554 <__aeabi_i2d>
 801184a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801184e:	3501      	adds	r5, #1
 8011850:	e7df      	b.n	8011812 <__kernel_rem_pio2+0x52>
 8011852:	ec51 0b18 	vmov	r0, r1, d8
 8011856:	e7f8      	b.n	801184a <__kernel_rem_pio2+0x8a>
 8011858:	9906      	ldr	r1, [sp, #24]
 801185a:	9d02      	ldr	r5, [sp, #8]
 801185c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011860:	9106      	str	r1, [sp, #24]
 8011862:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011866:	9502      	str	r5, [sp, #8]
 8011868:	f7ee fede 	bl	8000628 <__aeabi_dmul>
 801186c:	4602      	mov	r2, r0
 801186e:	460b      	mov	r3, r1
 8011870:	4640      	mov	r0, r8
 8011872:	4649      	mov	r1, r9
 8011874:	f7ee fd22 	bl	80002bc <__adddf3>
 8011878:	3701      	adds	r7, #1
 801187a:	4680      	mov	r8, r0
 801187c:	4689      	mov	r9, r1
 801187e:	9b07      	ldr	r3, [sp, #28]
 8011880:	429f      	cmp	r7, r3
 8011882:	dde9      	ble.n	8011858 <__kernel_rem_pio2+0x98>
 8011884:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011888:	3601      	adds	r6, #1
 801188a:	e7c9      	b.n	8011820 <__kernel_rem_pio2+0x60>
 801188c:	9b04      	ldr	r3, [sp, #16]
 801188e:	aa0e      	add	r2, sp, #56	; 0x38
 8011890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011894:	930c      	str	r3, [sp, #48]	; 0x30
 8011896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801189c:	9c04      	ldr	r4, [sp, #16]
 801189e:	930b      	str	r3, [sp, #44]	; 0x2c
 80118a0:	ab9a      	add	r3, sp, #616	; 0x268
 80118a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80118a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80118b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80118b6:	ab9a      	add	r3, sp, #616	; 0x268
 80118b8:	445b      	add	r3, fp
 80118ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80118be:	2500      	movs	r5, #0
 80118c0:	1b63      	subs	r3, r4, r5
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	dc78      	bgt.n	80119b8 <__kernel_rem_pio2+0x1f8>
 80118c6:	4650      	mov	r0, sl
 80118c8:	ec49 8b10 	vmov	d0, r8, r9
 80118cc:	f000 fc00 	bl	80120d0 <scalbn>
 80118d0:	ec57 6b10 	vmov	r6, r7, d0
 80118d4:	2200      	movs	r2, #0
 80118d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80118da:	ee10 0a10 	vmov	r0, s0
 80118de:	4639      	mov	r1, r7
 80118e0:	f7ee fea2 	bl	8000628 <__aeabi_dmul>
 80118e4:	ec41 0b10 	vmov	d0, r0, r1
 80118e8:	f000 fb6e 	bl	8011fc8 <floor>
 80118ec:	2200      	movs	r2, #0
 80118ee:	ec51 0b10 	vmov	r0, r1, d0
 80118f2:	4b7e      	ldr	r3, [pc, #504]	; (8011aec <__kernel_rem_pio2+0x32c>)
 80118f4:	f7ee fe98 	bl	8000628 <__aeabi_dmul>
 80118f8:	4602      	mov	r2, r0
 80118fa:	460b      	mov	r3, r1
 80118fc:	4630      	mov	r0, r6
 80118fe:	4639      	mov	r1, r7
 8011900:	f7ee fcda 	bl	80002b8 <__aeabi_dsub>
 8011904:	460f      	mov	r7, r1
 8011906:	4606      	mov	r6, r0
 8011908:	f7ef f93e 	bl	8000b88 <__aeabi_d2iz>
 801190c:	9006      	str	r0, [sp, #24]
 801190e:	f7ee fe21 	bl	8000554 <__aeabi_i2d>
 8011912:	4602      	mov	r2, r0
 8011914:	460b      	mov	r3, r1
 8011916:	4630      	mov	r0, r6
 8011918:	4639      	mov	r1, r7
 801191a:	f7ee fccd 	bl	80002b8 <__aeabi_dsub>
 801191e:	f1ba 0f00 	cmp.w	sl, #0
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	dd6c      	ble.n	8011a02 <__kernel_rem_pio2+0x242>
 8011928:	1e62      	subs	r2, r4, #1
 801192a:	ab0e      	add	r3, sp, #56	; 0x38
 801192c:	f1ca 0118 	rsb	r1, sl, #24
 8011930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011934:	9d06      	ldr	r5, [sp, #24]
 8011936:	fa40 f301 	asr.w	r3, r0, r1
 801193a:	441d      	add	r5, r3
 801193c:	408b      	lsls	r3, r1
 801193e:	1ac0      	subs	r0, r0, r3
 8011940:	ab0e      	add	r3, sp, #56	; 0x38
 8011942:	9506      	str	r5, [sp, #24]
 8011944:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011948:	f1ca 0317 	rsb	r3, sl, #23
 801194c:	fa40 f303 	asr.w	r3, r0, r3
 8011950:	9302      	str	r3, [sp, #8]
 8011952:	9b02      	ldr	r3, [sp, #8]
 8011954:	2b00      	cmp	r3, #0
 8011956:	dd62      	ble.n	8011a1e <__kernel_rem_pio2+0x25e>
 8011958:	9b06      	ldr	r3, [sp, #24]
 801195a:	2200      	movs	r2, #0
 801195c:	3301      	adds	r3, #1
 801195e:	9306      	str	r3, [sp, #24]
 8011960:	4615      	mov	r5, r2
 8011962:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011966:	4294      	cmp	r4, r2
 8011968:	f300 8095 	bgt.w	8011a96 <__kernel_rem_pio2+0x2d6>
 801196c:	f1ba 0f00 	cmp.w	sl, #0
 8011970:	dd07      	ble.n	8011982 <__kernel_rem_pio2+0x1c2>
 8011972:	f1ba 0f01 	cmp.w	sl, #1
 8011976:	f000 80a2 	beq.w	8011abe <__kernel_rem_pio2+0x2fe>
 801197a:	f1ba 0f02 	cmp.w	sl, #2
 801197e:	f000 80c1 	beq.w	8011b04 <__kernel_rem_pio2+0x344>
 8011982:	9b02      	ldr	r3, [sp, #8]
 8011984:	2b02      	cmp	r3, #2
 8011986:	d14a      	bne.n	8011a1e <__kernel_rem_pio2+0x25e>
 8011988:	4632      	mov	r2, r6
 801198a:	463b      	mov	r3, r7
 801198c:	2000      	movs	r0, #0
 801198e:	4958      	ldr	r1, [pc, #352]	; (8011af0 <__kernel_rem_pio2+0x330>)
 8011990:	f7ee fc92 	bl	80002b8 <__aeabi_dsub>
 8011994:	4606      	mov	r6, r0
 8011996:	460f      	mov	r7, r1
 8011998:	2d00      	cmp	r5, #0
 801199a:	d040      	beq.n	8011a1e <__kernel_rem_pio2+0x25e>
 801199c:	4650      	mov	r0, sl
 801199e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011ae0 <__kernel_rem_pio2+0x320>
 80119a2:	f000 fb95 	bl	80120d0 <scalbn>
 80119a6:	4630      	mov	r0, r6
 80119a8:	4639      	mov	r1, r7
 80119aa:	ec53 2b10 	vmov	r2, r3, d0
 80119ae:	f7ee fc83 	bl	80002b8 <__aeabi_dsub>
 80119b2:	4606      	mov	r6, r0
 80119b4:	460f      	mov	r7, r1
 80119b6:	e032      	b.n	8011a1e <__kernel_rem_pio2+0x25e>
 80119b8:	2200      	movs	r2, #0
 80119ba:	4b4e      	ldr	r3, [pc, #312]	; (8011af4 <__kernel_rem_pio2+0x334>)
 80119bc:	4640      	mov	r0, r8
 80119be:	4649      	mov	r1, r9
 80119c0:	f7ee fe32 	bl	8000628 <__aeabi_dmul>
 80119c4:	f7ef f8e0 	bl	8000b88 <__aeabi_d2iz>
 80119c8:	f7ee fdc4 	bl	8000554 <__aeabi_i2d>
 80119cc:	2200      	movs	r2, #0
 80119ce:	4b4a      	ldr	r3, [pc, #296]	; (8011af8 <__kernel_rem_pio2+0x338>)
 80119d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119d4:	f7ee fe28 	bl	8000628 <__aeabi_dmul>
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	4640      	mov	r0, r8
 80119de:	4649      	mov	r1, r9
 80119e0:	f7ee fc6a 	bl	80002b8 <__aeabi_dsub>
 80119e4:	f7ef f8d0 	bl	8000b88 <__aeabi_d2iz>
 80119e8:	ab0e      	add	r3, sp, #56	; 0x38
 80119ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80119ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80119f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119f6:	f7ee fc61 	bl	80002bc <__adddf3>
 80119fa:	3501      	adds	r5, #1
 80119fc:	4680      	mov	r8, r0
 80119fe:	4689      	mov	r9, r1
 8011a00:	e75e      	b.n	80118c0 <__kernel_rem_pio2+0x100>
 8011a02:	d105      	bne.n	8011a10 <__kernel_rem_pio2+0x250>
 8011a04:	1e63      	subs	r3, r4, #1
 8011a06:	aa0e      	add	r2, sp, #56	; 0x38
 8011a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a0c:	15c3      	asrs	r3, r0, #23
 8011a0e:	e79f      	b.n	8011950 <__kernel_rem_pio2+0x190>
 8011a10:	2200      	movs	r2, #0
 8011a12:	4b3a      	ldr	r3, [pc, #232]	; (8011afc <__kernel_rem_pio2+0x33c>)
 8011a14:	f7ef f88e 	bl	8000b34 <__aeabi_dcmpge>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d139      	bne.n	8011a90 <__kernel_rem_pio2+0x2d0>
 8011a1c:	9002      	str	r0, [sp, #8]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	2300      	movs	r3, #0
 8011a22:	4630      	mov	r0, r6
 8011a24:	4639      	mov	r1, r7
 8011a26:	f7ef f867 	bl	8000af8 <__aeabi_dcmpeq>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f000 80c7 	beq.w	8011bbe <__kernel_rem_pio2+0x3fe>
 8011a30:	1e65      	subs	r5, r4, #1
 8011a32:	462b      	mov	r3, r5
 8011a34:	2200      	movs	r2, #0
 8011a36:	9904      	ldr	r1, [sp, #16]
 8011a38:	428b      	cmp	r3, r1
 8011a3a:	da6a      	bge.n	8011b12 <__kernel_rem_pio2+0x352>
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	f000 8088 	beq.w	8011b52 <__kernel_rem_pio2+0x392>
 8011a42:	ab0e      	add	r3, sp, #56	; 0x38
 8011a44:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 80b4 	beq.w	8011bba <__kernel_rem_pio2+0x3fa>
 8011a52:	4650      	mov	r0, sl
 8011a54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011ae0 <__kernel_rem_pio2+0x320>
 8011a58:	f000 fb3a 	bl	80120d0 <scalbn>
 8011a5c:	00ec      	lsls	r4, r5, #3
 8011a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011a60:	191e      	adds	r6, r3, r4
 8011a62:	ec59 8b10 	vmov	r8, r9, d0
 8011a66:	f106 0a08 	add.w	sl, r6, #8
 8011a6a:	462f      	mov	r7, r5
 8011a6c:	2f00      	cmp	r7, #0
 8011a6e:	f280 80df 	bge.w	8011c30 <__kernel_rem_pio2+0x470>
 8011a72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011ad8 <__kernel_rem_pio2+0x318>
 8011a76:	f04f 0a00 	mov.w	sl, #0
 8011a7a:	eba5 030a 	sub.w	r3, r5, sl
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f2c0 810a 	blt.w	8011c98 <__kernel_rem_pio2+0x4d8>
 8011a84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011b00 <__kernel_rem_pio2+0x340>
 8011a88:	ec59 8b18 	vmov	r8, r9, d8
 8011a8c:	2700      	movs	r7, #0
 8011a8e:	e0f5      	b.n	8011c7c <__kernel_rem_pio2+0x4bc>
 8011a90:	2302      	movs	r3, #2
 8011a92:	9302      	str	r3, [sp, #8]
 8011a94:	e760      	b.n	8011958 <__kernel_rem_pio2+0x198>
 8011a96:	ab0e      	add	r3, sp, #56	; 0x38
 8011a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a9c:	b94d      	cbnz	r5, 8011ab2 <__kernel_rem_pio2+0x2f2>
 8011a9e:	b12b      	cbz	r3, 8011aac <__kernel_rem_pio2+0x2ec>
 8011aa0:	a80e      	add	r0, sp, #56	; 0x38
 8011aa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011aa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011aaa:	2301      	movs	r3, #1
 8011aac:	3201      	adds	r2, #1
 8011aae:	461d      	mov	r5, r3
 8011ab0:	e759      	b.n	8011966 <__kernel_rem_pio2+0x1a6>
 8011ab2:	a80e      	add	r0, sp, #56	; 0x38
 8011ab4:	1acb      	subs	r3, r1, r3
 8011ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011aba:	462b      	mov	r3, r5
 8011abc:	e7f6      	b.n	8011aac <__kernel_rem_pio2+0x2ec>
 8011abe:	1e62      	subs	r2, r4, #1
 8011ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8011ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011aca:	a90e      	add	r1, sp, #56	; 0x38
 8011acc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011ad0:	e757      	b.n	8011982 <__kernel_rem_pio2+0x1c2>
 8011ad2:	bf00      	nop
 8011ad4:	f3af 8000 	nop.w
	...
 8011ae4:	3ff00000 	.word	0x3ff00000
 8011ae8:	080178b8 	.word	0x080178b8
 8011aec:	40200000 	.word	0x40200000
 8011af0:	3ff00000 	.word	0x3ff00000
 8011af4:	3e700000 	.word	0x3e700000
 8011af8:	41700000 	.word	0x41700000
 8011afc:	3fe00000 	.word	0x3fe00000
 8011b00:	08017878 	.word	0x08017878
 8011b04:	1e62      	subs	r2, r4, #1
 8011b06:	ab0e      	add	r3, sp, #56	; 0x38
 8011b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b10:	e7db      	b.n	8011aca <__kernel_rem_pio2+0x30a>
 8011b12:	a90e      	add	r1, sp, #56	; 0x38
 8011b14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	430a      	orrs	r2, r1
 8011b1c:	e78b      	b.n	8011a36 <__kernel_rem_pio2+0x276>
 8011b1e:	3301      	adds	r3, #1
 8011b20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011b24:	2900      	cmp	r1, #0
 8011b26:	d0fa      	beq.n	8011b1e <__kernel_rem_pio2+0x35e>
 8011b28:	9a08      	ldr	r2, [sp, #32]
 8011b2a:	4422      	add	r2, r4
 8011b2c:	00d2      	lsls	r2, r2, #3
 8011b2e:	a922      	add	r1, sp, #136	; 0x88
 8011b30:	18e3      	adds	r3, r4, r3
 8011b32:	9206      	str	r2, [sp, #24]
 8011b34:	440a      	add	r2, r1
 8011b36:	9302      	str	r3, [sp, #8]
 8011b38:	f10b 0108 	add.w	r1, fp, #8
 8011b3c:	f102 0308 	add.w	r3, r2, #8
 8011b40:	1c66      	adds	r6, r4, #1
 8011b42:	910a      	str	r1, [sp, #40]	; 0x28
 8011b44:	2500      	movs	r5, #0
 8011b46:	930d      	str	r3, [sp, #52]	; 0x34
 8011b48:	9b02      	ldr	r3, [sp, #8]
 8011b4a:	42b3      	cmp	r3, r6
 8011b4c:	da04      	bge.n	8011b58 <__kernel_rem_pio2+0x398>
 8011b4e:	461c      	mov	r4, r3
 8011b50:	e6a6      	b.n	80118a0 <__kernel_rem_pio2+0xe0>
 8011b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b54:	2301      	movs	r3, #1
 8011b56:	e7e3      	b.n	8011b20 <__kernel_rem_pio2+0x360>
 8011b58:	9b06      	ldr	r3, [sp, #24]
 8011b5a:	18ef      	adds	r7, r5, r3
 8011b5c:	ab22      	add	r3, sp, #136	; 0x88
 8011b5e:	441f      	add	r7, r3
 8011b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011b66:	f7ee fcf5 	bl	8000554 <__aeabi_i2d>
 8011b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b6c:	461c      	mov	r4, r3
 8011b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b70:	e9c7 0100 	strd	r0, r1, [r7]
 8011b74:	eb03 0b05 	add.w	fp, r3, r5
 8011b78:	2700      	movs	r7, #0
 8011b7a:	f04f 0800 	mov.w	r8, #0
 8011b7e:	f04f 0900 	mov.w	r9, #0
 8011b82:	9b07      	ldr	r3, [sp, #28]
 8011b84:	429f      	cmp	r7, r3
 8011b86:	dd08      	ble.n	8011b9a <__kernel_rem_pio2+0x3da>
 8011b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8011b8c:	18eb      	adds	r3, r5, r3
 8011b8e:	4413      	add	r3, r2
 8011b90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011b94:	3601      	adds	r6, #1
 8011b96:	3508      	adds	r5, #8
 8011b98:	e7d6      	b.n	8011b48 <__kernel_rem_pio2+0x388>
 8011b9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011b9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011ba2:	f7ee fd41 	bl	8000628 <__aeabi_dmul>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4640      	mov	r0, r8
 8011bac:	4649      	mov	r1, r9
 8011bae:	f7ee fb85 	bl	80002bc <__adddf3>
 8011bb2:	3701      	adds	r7, #1
 8011bb4:	4680      	mov	r8, r0
 8011bb6:	4689      	mov	r9, r1
 8011bb8:	e7e3      	b.n	8011b82 <__kernel_rem_pio2+0x3c2>
 8011bba:	3d01      	subs	r5, #1
 8011bbc:	e741      	b.n	8011a42 <__kernel_rem_pio2+0x282>
 8011bbe:	f1ca 0000 	rsb	r0, sl, #0
 8011bc2:	ec47 6b10 	vmov	d0, r6, r7
 8011bc6:	f000 fa83 	bl	80120d0 <scalbn>
 8011bca:	ec57 6b10 	vmov	r6, r7, d0
 8011bce:	2200      	movs	r2, #0
 8011bd0:	4b99      	ldr	r3, [pc, #612]	; (8011e38 <__kernel_rem_pio2+0x678>)
 8011bd2:	ee10 0a10 	vmov	r0, s0
 8011bd6:	4639      	mov	r1, r7
 8011bd8:	f7ee ffac 	bl	8000b34 <__aeabi_dcmpge>
 8011bdc:	b1f8      	cbz	r0, 8011c1e <__kernel_rem_pio2+0x45e>
 8011bde:	2200      	movs	r2, #0
 8011be0:	4b96      	ldr	r3, [pc, #600]	; (8011e3c <__kernel_rem_pio2+0x67c>)
 8011be2:	4630      	mov	r0, r6
 8011be4:	4639      	mov	r1, r7
 8011be6:	f7ee fd1f 	bl	8000628 <__aeabi_dmul>
 8011bea:	f7ee ffcd 	bl	8000b88 <__aeabi_d2iz>
 8011bee:	4680      	mov	r8, r0
 8011bf0:	f7ee fcb0 	bl	8000554 <__aeabi_i2d>
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	4b90      	ldr	r3, [pc, #576]	; (8011e38 <__kernel_rem_pio2+0x678>)
 8011bf8:	f7ee fd16 	bl	8000628 <__aeabi_dmul>
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	4602      	mov	r2, r0
 8011c00:	4639      	mov	r1, r7
 8011c02:	4630      	mov	r0, r6
 8011c04:	f7ee fb58 	bl	80002b8 <__aeabi_dsub>
 8011c08:	f7ee ffbe 	bl	8000b88 <__aeabi_d2iz>
 8011c0c:	1c65      	adds	r5, r4, #1
 8011c0e:	ab0e      	add	r3, sp, #56	; 0x38
 8011c10:	f10a 0a18 	add.w	sl, sl, #24
 8011c14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c1c:	e719      	b.n	8011a52 <__kernel_rem_pio2+0x292>
 8011c1e:	4630      	mov	r0, r6
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee ffb1 	bl	8000b88 <__aeabi_d2iz>
 8011c26:	ab0e      	add	r3, sp, #56	; 0x38
 8011c28:	4625      	mov	r5, r4
 8011c2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c2e:	e710      	b.n	8011a52 <__kernel_rem_pio2+0x292>
 8011c30:	ab0e      	add	r3, sp, #56	; 0x38
 8011c32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011c36:	f7ee fc8d 	bl	8000554 <__aeabi_i2d>
 8011c3a:	4642      	mov	r2, r8
 8011c3c:	464b      	mov	r3, r9
 8011c3e:	f7ee fcf3 	bl	8000628 <__aeabi_dmul>
 8011c42:	2200      	movs	r2, #0
 8011c44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011c48:	4b7c      	ldr	r3, [pc, #496]	; (8011e3c <__kernel_rem_pio2+0x67c>)
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	4649      	mov	r1, r9
 8011c4e:	f7ee fceb 	bl	8000628 <__aeabi_dmul>
 8011c52:	3f01      	subs	r7, #1
 8011c54:	4680      	mov	r8, r0
 8011c56:	4689      	mov	r9, r1
 8011c58:	e708      	b.n	8011a6c <__kernel_rem_pio2+0x2ac>
 8011c5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011c66:	f7ee fcdf 	bl	8000628 <__aeabi_dmul>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	4640      	mov	r0, r8
 8011c70:	4649      	mov	r1, r9
 8011c72:	f7ee fb23 	bl	80002bc <__adddf3>
 8011c76:	3701      	adds	r7, #1
 8011c78:	4680      	mov	r8, r0
 8011c7a:	4689      	mov	r9, r1
 8011c7c:	9b04      	ldr	r3, [sp, #16]
 8011c7e:	429f      	cmp	r7, r3
 8011c80:	dc01      	bgt.n	8011c86 <__kernel_rem_pio2+0x4c6>
 8011c82:	45ba      	cmp	sl, r7
 8011c84:	dae9      	bge.n	8011c5a <__kernel_rem_pio2+0x49a>
 8011c86:	ab4a      	add	r3, sp, #296	; 0x128
 8011c88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c8c:	e9c3 8900 	strd	r8, r9, [r3]
 8011c90:	f10a 0a01 	add.w	sl, sl, #1
 8011c94:	3e08      	subs	r6, #8
 8011c96:	e6f0      	b.n	8011a7a <__kernel_rem_pio2+0x2ba>
 8011c98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011c9a:	2b03      	cmp	r3, #3
 8011c9c:	d85b      	bhi.n	8011d56 <__kernel_rem_pio2+0x596>
 8011c9e:	e8df f003 	tbb	[pc, r3]
 8011ca2:	264a      	.short	0x264a
 8011ca4:	0226      	.short	0x0226
 8011ca6:	ab9a      	add	r3, sp, #616	; 0x268
 8011ca8:	441c      	add	r4, r3
 8011caa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011cae:	46a2      	mov	sl, r4
 8011cb0:	46ab      	mov	fp, r5
 8011cb2:	f1bb 0f00 	cmp.w	fp, #0
 8011cb6:	dc6c      	bgt.n	8011d92 <__kernel_rem_pio2+0x5d2>
 8011cb8:	46a2      	mov	sl, r4
 8011cba:	46ab      	mov	fp, r5
 8011cbc:	f1bb 0f01 	cmp.w	fp, #1
 8011cc0:	f300 8086 	bgt.w	8011dd0 <__kernel_rem_pio2+0x610>
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	2100      	movs	r1, #0
 8011cc8:	2d01      	cmp	r5, #1
 8011cca:	f300 80a0 	bgt.w	8011e0e <__kernel_rem_pio2+0x64e>
 8011cce:	9b02      	ldr	r3, [sp, #8]
 8011cd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011cd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f040 809e 	bne.w	8011e1a <__kernel_rem_pio2+0x65a>
 8011cde:	9b01      	ldr	r3, [sp, #4]
 8011ce0:	e9c3 7800 	strd	r7, r8, [r3]
 8011ce4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011ce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011cec:	e033      	b.n	8011d56 <__kernel_rem_pio2+0x596>
 8011cee:	3408      	adds	r4, #8
 8011cf0:	ab4a      	add	r3, sp, #296	; 0x128
 8011cf2:	441c      	add	r4, r3
 8011cf4:	462e      	mov	r6, r5
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	2e00      	cmp	r6, #0
 8011cfc:	da3a      	bge.n	8011d74 <__kernel_rem_pio2+0x5b4>
 8011cfe:	9b02      	ldr	r3, [sp, #8]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d03d      	beq.n	8011d80 <__kernel_rem_pio2+0x5c0>
 8011d04:	4602      	mov	r2, r0
 8011d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d0a:	9c01      	ldr	r4, [sp, #4]
 8011d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8011d10:	4602      	mov	r2, r0
 8011d12:	460b      	mov	r3, r1
 8011d14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011d18:	f7ee face 	bl	80002b8 <__aeabi_dsub>
 8011d1c:	ae4c      	add	r6, sp, #304	; 0x130
 8011d1e:	2401      	movs	r4, #1
 8011d20:	42a5      	cmp	r5, r4
 8011d22:	da30      	bge.n	8011d86 <__kernel_rem_pio2+0x5c6>
 8011d24:	9b02      	ldr	r3, [sp, #8]
 8011d26:	b113      	cbz	r3, 8011d2e <__kernel_rem_pio2+0x56e>
 8011d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	9b01      	ldr	r3, [sp, #4]
 8011d30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d34:	e00f      	b.n	8011d56 <__kernel_rem_pio2+0x596>
 8011d36:	ab9a      	add	r3, sp, #616	; 0x268
 8011d38:	441c      	add	r4, r3
 8011d3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d3e:	2000      	movs	r0, #0
 8011d40:	2100      	movs	r1, #0
 8011d42:	2d00      	cmp	r5, #0
 8011d44:	da10      	bge.n	8011d68 <__kernel_rem_pio2+0x5a8>
 8011d46:	9b02      	ldr	r3, [sp, #8]
 8011d48:	b113      	cbz	r3, 8011d50 <__kernel_rem_pio2+0x590>
 8011d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d4e:	4619      	mov	r1, r3
 8011d50:	9b01      	ldr	r3, [sp, #4]
 8011d52:	e9c3 0100 	strd	r0, r1, [r3]
 8011d56:	9b06      	ldr	r3, [sp, #24]
 8011d58:	f003 0007 	and.w	r0, r3, #7
 8011d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011d60:	ecbd 8b02 	vpop	{d8}
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d6c:	f7ee faa6 	bl	80002bc <__adddf3>
 8011d70:	3d01      	subs	r5, #1
 8011d72:	e7e6      	b.n	8011d42 <__kernel_rem_pio2+0x582>
 8011d74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d78:	f7ee faa0 	bl	80002bc <__adddf3>
 8011d7c:	3e01      	subs	r6, #1
 8011d7e:	e7bc      	b.n	8011cfa <__kernel_rem_pio2+0x53a>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	e7c1      	b.n	8011d0a <__kernel_rem_pio2+0x54a>
 8011d86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011d8a:	f7ee fa97 	bl	80002bc <__adddf3>
 8011d8e:	3401      	adds	r4, #1
 8011d90:	e7c6      	b.n	8011d20 <__kernel_rem_pio2+0x560>
 8011d92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011d96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	ec53 2b17 	vmov	r2, r3, d7
 8011da0:	4649      	mov	r1, r9
 8011da2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011da6:	f7ee fa89 	bl	80002bc <__adddf3>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	4606      	mov	r6, r0
 8011db0:	460f      	mov	r7, r1
 8011db2:	4640      	mov	r0, r8
 8011db4:	4649      	mov	r1, r9
 8011db6:	f7ee fa7f 	bl	80002b8 <__aeabi_dsub>
 8011dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dbe:	f7ee fa7d 	bl	80002bc <__adddf3>
 8011dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011dc6:	e9ca 0100 	strd	r0, r1, [sl]
 8011dca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011dce:	e770      	b.n	8011cb2 <__kernel_rem_pio2+0x4f2>
 8011dd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011dd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011dd8:	4630      	mov	r0, r6
 8011dda:	ec53 2b17 	vmov	r2, r3, d7
 8011dde:	4639      	mov	r1, r7
 8011de0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011de4:	f7ee fa6a 	bl	80002bc <__adddf3>
 8011de8:	4602      	mov	r2, r0
 8011dea:	460b      	mov	r3, r1
 8011dec:	4680      	mov	r8, r0
 8011dee:	4689      	mov	r9, r1
 8011df0:	4630      	mov	r0, r6
 8011df2:	4639      	mov	r1, r7
 8011df4:	f7ee fa60 	bl	80002b8 <__aeabi_dsub>
 8011df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dfc:	f7ee fa5e 	bl	80002bc <__adddf3>
 8011e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e04:	e9ca 0100 	strd	r0, r1, [sl]
 8011e08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011e0c:	e756      	b.n	8011cbc <__kernel_rem_pio2+0x4fc>
 8011e0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e12:	f7ee fa53 	bl	80002bc <__adddf3>
 8011e16:	3d01      	subs	r5, #1
 8011e18:	e756      	b.n	8011cc8 <__kernel_rem_pio2+0x508>
 8011e1a:	9b01      	ldr	r3, [sp, #4]
 8011e1c:	9a01      	ldr	r2, [sp, #4]
 8011e1e:	601f      	str	r7, [r3, #0]
 8011e20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011e24:	605c      	str	r4, [r3, #4]
 8011e26:	609d      	str	r5, [r3, #8]
 8011e28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011e2c:	60d3      	str	r3, [r2, #12]
 8011e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e32:	6110      	str	r0, [r2, #16]
 8011e34:	6153      	str	r3, [r2, #20]
 8011e36:	e78e      	b.n	8011d56 <__kernel_rem_pio2+0x596>
 8011e38:	41700000 	.word	0x41700000
 8011e3c:	3e700000 	.word	0x3e700000

08011e40 <__kernel_sin>:
 8011e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	ec55 4b10 	vmov	r4, r5, d0
 8011e48:	b085      	sub	sp, #20
 8011e4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e52:	ed8d 1b00 	vstr	d1, [sp]
 8011e56:	9002      	str	r0, [sp, #8]
 8011e58:	da06      	bge.n	8011e68 <__kernel_sin+0x28>
 8011e5a:	ee10 0a10 	vmov	r0, s0
 8011e5e:	4629      	mov	r1, r5
 8011e60:	f7ee fe92 	bl	8000b88 <__aeabi_d2iz>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d051      	beq.n	8011f0c <__kernel_sin+0xcc>
 8011e68:	4622      	mov	r2, r4
 8011e6a:	462b      	mov	r3, r5
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	4629      	mov	r1, r5
 8011e70:	f7ee fbda 	bl	8000628 <__aeabi_dmul>
 8011e74:	4682      	mov	sl, r0
 8011e76:	468b      	mov	fp, r1
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	4629      	mov	r1, r5
 8011e80:	f7ee fbd2 	bl	8000628 <__aeabi_dmul>
 8011e84:	a341      	add	r3, pc, #260	; (adr r3, 8011f8c <__kernel_sin+0x14c>)
 8011e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8a:	4680      	mov	r8, r0
 8011e8c:	4689      	mov	r9, r1
 8011e8e:	4650      	mov	r0, sl
 8011e90:	4659      	mov	r1, fp
 8011e92:	f7ee fbc9 	bl	8000628 <__aeabi_dmul>
 8011e96:	a33f      	add	r3, pc, #252	; (adr r3, 8011f94 <__kernel_sin+0x154>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	f7ee fa0c 	bl	80002b8 <__aeabi_dsub>
 8011ea0:	4652      	mov	r2, sl
 8011ea2:	465b      	mov	r3, fp
 8011ea4:	f7ee fbc0 	bl	8000628 <__aeabi_dmul>
 8011ea8:	a33c      	add	r3, pc, #240	; (adr r3, 8011f9c <__kernel_sin+0x15c>)
 8011eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eae:	f7ee fa05 	bl	80002bc <__adddf3>
 8011eb2:	4652      	mov	r2, sl
 8011eb4:	465b      	mov	r3, fp
 8011eb6:	f7ee fbb7 	bl	8000628 <__aeabi_dmul>
 8011eba:	a33a      	add	r3, pc, #232	; (adr r3, 8011fa4 <__kernel_sin+0x164>)
 8011ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec0:	f7ee f9fa 	bl	80002b8 <__aeabi_dsub>
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	465b      	mov	r3, fp
 8011ec8:	f7ee fbae 	bl	8000628 <__aeabi_dmul>
 8011ecc:	a337      	add	r3, pc, #220	; (adr r3, 8011fac <__kernel_sin+0x16c>)
 8011ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed2:	f7ee f9f3 	bl	80002bc <__adddf3>
 8011ed6:	9b02      	ldr	r3, [sp, #8]
 8011ed8:	4606      	mov	r6, r0
 8011eda:	460f      	mov	r7, r1
 8011edc:	b9db      	cbnz	r3, 8011f16 <__kernel_sin+0xd6>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	4650      	mov	r0, sl
 8011ee4:	4659      	mov	r1, fp
 8011ee6:	f7ee fb9f 	bl	8000628 <__aeabi_dmul>
 8011eea:	a325      	add	r3, pc, #148	; (adr r3, 8011f80 <__kernel_sin+0x140>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	f7ee f9e2 	bl	80002b8 <__aeabi_dsub>
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	464b      	mov	r3, r9
 8011ef8:	f7ee fb96 	bl	8000628 <__aeabi_dmul>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	4620      	mov	r0, r4
 8011f02:	4629      	mov	r1, r5
 8011f04:	f7ee f9da 	bl	80002bc <__adddf3>
 8011f08:	4604      	mov	r4, r0
 8011f0a:	460d      	mov	r5, r1
 8011f0c:	ec45 4b10 	vmov	d0, r4, r5
 8011f10:	b005      	add	sp, #20
 8011f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f16:	2200      	movs	r2, #0
 8011f18:	4b1b      	ldr	r3, [pc, #108]	; (8011f88 <__kernel_sin+0x148>)
 8011f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f1e:	f7ee fb83 	bl	8000628 <__aeabi_dmul>
 8011f22:	4632      	mov	r2, r6
 8011f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f28:	463b      	mov	r3, r7
 8011f2a:	4640      	mov	r0, r8
 8011f2c:	4649      	mov	r1, r9
 8011f2e:	f7ee fb7b 	bl	8000628 <__aeabi_dmul>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f3a:	f7ee f9bd 	bl	80002b8 <__aeabi_dsub>
 8011f3e:	4652      	mov	r2, sl
 8011f40:	465b      	mov	r3, fp
 8011f42:	f7ee fb71 	bl	8000628 <__aeabi_dmul>
 8011f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f4a:	f7ee f9b5 	bl	80002b8 <__aeabi_dsub>
 8011f4e:	a30c      	add	r3, pc, #48	; (adr r3, 8011f80 <__kernel_sin+0x140>)
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	4606      	mov	r6, r0
 8011f56:	460f      	mov	r7, r1
 8011f58:	4640      	mov	r0, r8
 8011f5a:	4649      	mov	r1, r9
 8011f5c:	f7ee fb64 	bl	8000628 <__aeabi_dmul>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7ee f9a8 	bl	80002bc <__adddf3>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4620      	mov	r0, r4
 8011f72:	4629      	mov	r1, r5
 8011f74:	f7ee f9a0 	bl	80002b8 <__aeabi_dsub>
 8011f78:	e7c6      	b.n	8011f08 <__kernel_sin+0xc8>
 8011f7a:	bf00      	nop
 8011f7c:	f3af 8000 	nop.w
 8011f80:	55555549 	.word	0x55555549
 8011f84:	3fc55555 	.word	0x3fc55555
 8011f88:	3fe00000 	.word	0x3fe00000
 8011f8c:	5acfd57c 	.word	0x5acfd57c
 8011f90:	3de5d93a 	.word	0x3de5d93a
 8011f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8011f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8011f9c:	57b1fe7d 	.word	0x57b1fe7d
 8011fa0:	3ec71de3 	.word	0x3ec71de3
 8011fa4:	19c161d5 	.word	0x19c161d5
 8011fa8:	3f2a01a0 	.word	0x3f2a01a0
 8011fac:	1110f8a6 	.word	0x1110f8a6
 8011fb0:	3f811111 	.word	0x3f811111

08011fb4 <fabs>:
 8011fb4:	ec51 0b10 	vmov	r0, r1, d0
 8011fb8:	ee10 2a10 	vmov	r2, s0
 8011fbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011fc0:	ec43 2b10 	vmov	d0, r2, r3
 8011fc4:	4770      	bx	lr
	...

08011fc8 <floor>:
 8011fc8:	ec51 0b10 	vmov	r0, r1, d0
 8011fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011fd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011fd8:	2e13      	cmp	r6, #19
 8011fda:	460c      	mov	r4, r1
 8011fdc:	ee10 5a10 	vmov	r5, s0
 8011fe0:	4680      	mov	r8, r0
 8011fe2:	dc34      	bgt.n	801204e <floor+0x86>
 8011fe4:	2e00      	cmp	r6, #0
 8011fe6:	da16      	bge.n	8012016 <floor+0x4e>
 8011fe8:	a335      	add	r3, pc, #212	; (adr r3, 80120c0 <floor+0xf8>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f965 	bl	80002bc <__adddf3>
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	f7ee fda7 	bl	8000b48 <__aeabi_dcmpgt>
 8011ffa:	b148      	cbz	r0, 8012010 <floor+0x48>
 8011ffc:	2c00      	cmp	r4, #0
 8011ffe:	da59      	bge.n	80120b4 <floor+0xec>
 8012000:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012004:	4a30      	ldr	r2, [pc, #192]	; (80120c8 <floor+0x100>)
 8012006:	432b      	orrs	r3, r5
 8012008:	2500      	movs	r5, #0
 801200a:	42ab      	cmp	r3, r5
 801200c:	bf18      	it	ne
 801200e:	4614      	movne	r4, r2
 8012010:	4621      	mov	r1, r4
 8012012:	4628      	mov	r0, r5
 8012014:	e025      	b.n	8012062 <floor+0x9a>
 8012016:	4f2d      	ldr	r7, [pc, #180]	; (80120cc <floor+0x104>)
 8012018:	4137      	asrs	r7, r6
 801201a:	ea01 0307 	and.w	r3, r1, r7
 801201e:	4303      	orrs	r3, r0
 8012020:	d01f      	beq.n	8012062 <floor+0x9a>
 8012022:	a327      	add	r3, pc, #156	; (adr r3, 80120c0 <floor+0xf8>)
 8012024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012028:	f7ee f948 	bl	80002bc <__adddf3>
 801202c:	2200      	movs	r2, #0
 801202e:	2300      	movs	r3, #0
 8012030:	f7ee fd8a 	bl	8000b48 <__aeabi_dcmpgt>
 8012034:	2800      	cmp	r0, #0
 8012036:	d0eb      	beq.n	8012010 <floor+0x48>
 8012038:	2c00      	cmp	r4, #0
 801203a:	bfbe      	ittt	lt
 801203c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012040:	fa43 f606 	asrlt.w	r6, r3, r6
 8012044:	19a4      	addlt	r4, r4, r6
 8012046:	ea24 0407 	bic.w	r4, r4, r7
 801204a:	2500      	movs	r5, #0
 801204c:	e7e0      	b.n	8012010 <floor+0x48>
 801204e:	2e33      	cmp	r6, #51	; 0x33
 8012050:	dd0b      	ble.n	801206a <floor+0xa2>
 8012052:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012056:	d104      	bne.n	8012062 <floor+0x9a>
 8012058:	ee10 2a10 	vmov	r2, s0
 801205c:	460b      	mov	r3, r1
 801205e:	f7ee f92d 	bl	80002bc <__adddf3>
 8012062:	ec41 0b10 	vmov	d0, r0, r1
 8012066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801206e:	f04f 33ff 	mov.w	r3, #4294967295
 8012072:	fa23 f707 	lsr.w	r7, r3, r7
 8012076:	4207      	tst	r7, r0
 8012078:	d0f3      	beq.n	8012062 <floor+0x9a>
 801207a:	a311      	add	r3, pc, #68	; (adr r3, 80120c0 <floor+0xf8>)
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f7ee f91c 	bl	80002bc <__adddf3>
 8012084:	2200      	movs	r2, #0
 8012086:	2300      	movs	r3, #0
 8012088:	f7ee fd5e 	bl	8000b48 <__aeabi_dcmpgt>
 801208c:	2800      	cmp	r0, #0
 801208e:	d0bf      	beq.n	8012010 <floor+0x48>
 8012090:	2c00      	cmp	r4, #0
 8012092:	da02      	bge.n	801209a <floor+0xd2>
 8012094:	2e14      	cmp	r6, #20
 8012096:	d103      	bne.n	80120a0 <floor+0xd8>
 8012098:	3401      	adds	r4, #1
 801209a:	ea25 0507 	bic.w	r5, r5, r7
 801209e:	e7b7      	b.n	8012010 <floor+0x48>
 80120a0:	2301      	movs	r3, #1
 80120a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80120a6:	fa03 f606 	lsl.w	r6, r3, r6
 80120aa:	4435      	add	r5, r6
 80120ac:	4545      	cmp	r5, r8
 80120ae:	bf38      	it	cc
 80120b0:	18e4      	addcc	r4, r4, r3
 80120b2:	e7f2      	b.n	801209a <floor+0xd2>
 80120b4:	2500      	movs	r5, #0
 80120b6:	462c      	mov	r4, r5
 80120b8:	e7aa      	b.n	8012010 <floor+0x48>
 80120ba:	bf00      	nop
 80120bc:	f3af 8000 	nop.w
 80120c0:	8800759c 	.word	0x8800759c
 80120c4:	7e37e43c 	.word	0x7e37e43c
 80120c8:	bff00000 	.word	0xbff00000
 80120cc:	000fffff 	.word	0x000fffff

080120d0 <scalbn>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	ec55 4b10 	vmov	r4, r5, d0
 80120d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80120da:	4606      	mov	r6, r0
 80120dc:	462b      	mov	r3, r5
 80120de:	b9aa      	cbnz	r2, 801210c <scalbn+0x3c>
 80120e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80120e4:	4323      	orrs	r3, r4
 80120e6:	d03b      	beq.n	8012160 <scalbn+0x90>
 80120e8:	4b31      	ldr	r3, [pc, #196]	; (80121b0 <scalbn+0xe0>)
 80120ea:	4629      	mov	r1, r5
 80120ec:	2200      	movs	r2, #0
 80120ee:	ee10 0a10 	vmov	r0, s0
 80120f2:	f7ee fa99 	bl	8000628 <__aeabi_dmul>
 80120f6:	4b2f      	ldr	r3, [pc, #188]	; (80121b4 <scalbn+0xe4>)
 80120f8:	429e      	cmp	r6, r3
 80120fa:	4604      	mov	r4, r0
 80120fc:	460d      	mov	r5, r1
 80120fe:	da12      	bge.n	8012126 <scalbn+0x56>
 8012100:	a327      	add	r3, pc, #156	; (adr r3, 80121a0 <scalbn+0xd0>)
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7ee fa8f 	bl	8000628 <__aeabi_dmul>
 801210a:	e009      	b.n	8012120 <scalbn+0x50>
 801210c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012110:	428a      	cmp	r2, r1
 8012112:	d10c      	bne.n	801212e <scalbn+0x5e>
 8012114:	ee10 2a10 	vmov	r2, s0
 8012118:	4620      	mov	r0, r4
 801211a:	4629      	mov	r1, r5
 801211c:	f7ee f8ce 	bl	80002bc <__adddf3>
 8012120:	4604      	mov	r4, r0
 8012122:	460d      	mov	r5, r1
 8012124:	e01c      	b.n	8012160 <scalbn+0x90>
 8012126:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801212a:	460b      	mov	r3, r1
 801212c:	3a36      	subs	r2, #54	; 0x36
 801212e:	4432      	add	r2, r6
 8012130:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012134:	428a      	cmp	r2, r1
 8012136:	dd0b      	ble.n	8012150 <scalbn+0x80>
 8012138:	ec45 4b11 	vmov	d1, r4, r5
 801213c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80121a8 <scalbn+0xd8>
 8012140:	f000 f83c 	bl	80121bc <copysign>
 8012144:	a318      	add	r3, pc, #96	; (adr r3, 80121a8 <scalbn+0xd8>)
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	ec51 0b10 	vmov	r0, r1, d0
 801214e:	e7da      	b.n	8012106 <scalbn+0x36>
 8012150:	2a00      	cmp	r2, #0
 8012152:	dd08      	ble.n	8012166 <scalbn+0x96>
 8012154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801215c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012160:	ec45 4b10 	vmov	d0, r4, r5
 8012164:	bd70      	pop	{r4, r5, r6, pc}
 8012166:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801216a:	da0d      	bge.n	8012188 <scalbn+0xb8>
 801216c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012170:	429e      	cmp	r6, r3
 8012172:	ec45 4b11 	vmov	d1, r4, r5
 8012176:	dce1      	bgt.n	801213c <scalbn+0x6c>
 8012178:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80121a0 <scalbn+0xd0>
 801217c:	f000 f81e 	bl	80121bc <copysign>
 8012180:	a307      	add	r3, pc, #28	; (adr r3, 80121a0 <scalbn+0xd0>)
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	e7e0      	b.n	801214a <scalbn+0x7a>
 8012188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801218c:	3236      	adds	r2, #54	; 0x36
 801218e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012196:	4620      	mov	r0, r4
 8012198:	4629      	mov	r1, r5
 801219a:	2200      	movs	r2, #0
 801219c:	4b06      	ldr	r3, [pc, #24]	; (80121b8 <scalbn+0xe8>)
 801219e:	e7b2      	b.n	8012106 <scalbn+0x36>
 80121a0:	c2f8f359 	.word	0xc2f8f359
 80121a4:	01a56e1f 	.word	0x01a56e1f
 80121a8:	8800759c 	.word	0x8800759c
 80121ac:	7e37e43c 	.word	0x7e37e43c
 80121b0:	43500000 	.word	0x43500000
 80121b4:	ffff3cb0 	.word	0xffff3cb0
 80121b8:	3c900000 	.word	0x3c900000

080121bc <copysign>:
 80121bc:	ec51 0b10 	vmov	r0, r1, d0
 80121c0:	ee11 0a90 	vmov	r0, s3
 80121c4:	ee10 2a10 	vmov	r2, s0
 80121c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80121cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80121d0:	ea41 0300 	orr.w	r3, r1, r0
 80121d4:	ec43 2b10 	vmov	d0, r2, r3
 80121d8:	4770      	bx	lr
	...

080121dc <__errno>:
 80121dc:	4b01      	ldr	r3, [pc, #4]	; (80121e4 <__errno+0x8>)
 80121de:	6818      	ldr	r0, [r3, #0]
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	2000000c 	.word	0x2000000c

080121e8 <__libc_init_array>:
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	4e0d      	ldr	r6, [pc, #52]	; (8012220 <__libc_init_array+0x38>)
 80121ec:	4c0d      	ldr	r4, [pc, #52]	; (8012224 <__libc_init_array+0x3c>)
 80121ee:	1ba4      	subs	r4, r4, r6
 80121f0:	10a4      	asrs	r4, r4, #2
 80121f2:	2500      	movs	r5, #0
 80121f4:	42a5      	cmp	r5, r4
 80121f6:	d109      	bne.n	801220c <__libc_init_array+0x24>
 80121f8:	4e0b      	ldr	r6, [pc, #44]	; (8012228 <__libc_init_array+0x40>)
 80121fa:	4c0c      	ldr	r4, [pc, #48]	; (801222c <__libc_init_array+0x44>)
 80121fc:	f004 ff36 	bl	801706c <_init>
 8012200:	1ba4      	subs	r4, r4, r6
 8012202:	10a4      	asrs	r4, r4, #2
 8012204:	2500      	movs	r5, #0
 8012206:	42a5      	cmp	r5, r4
 8012208:	d105      	bne.n	8012216 <__libc_init_array+0x2e>
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012210:	4798      	blx	r3
 8012212:	3501      	adds	r5, #1
 8012214:	e7ee      	b.n	80121f4 <__libc_init_array+0xc>
 8012216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801221a:	4798      	blx	r3
 801221c:	3501      	adds	r5, #1
 801221e:	e7f2      	b.n	8012206 <__libc_init_array+0x1e>
 8012220:	08017c0c 	.word	0x08017c0c
 8012224:	08017c0c 	.word	0x08017c0c
 8012228:	08017c0c 	.word	0x08017c0c
 801222c:	08017c14 	.word	0x08017c14

08012230 <memset>:
 8012230:	4402      	add	r2, r0
 8012232:	4603      	mov	r3, r0
 8012234:	4293      	cmp	r3, r2
 8012236:	d100      	bne.n	801223a <memset+0xa>
 8012238:	4770      	bx	lr
 801223a:	f803 1b01 	strb.w	r1, [r3], #1
 801223e:	e7f9      	b.n	8012234 <memset+0x4>

08012240 <__cvt>:
 8012240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012244:	ec55 4b10 	vmov	r4, r5, d0
 8012248:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801224a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801224e:	2d00      	cmp	r5, #0
 8012250:	460e      	mov	r6, r1
 8012252:	4691      	mov	r9, r2
 8012254:	4619      	mov	r1, r3
 8012256:	bfb8      	it	lt
 8012258:	4622      	movlt	r2, r4
 801225a:	462b      	mov	r3, r5
 801225c:	f027 0720 	bic.w	r7, r7, #32
 8012260:	bfbb      	ittet	lt
 8012262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012266:	461d      	movlt	r5, r3
 8012268:	2300      	movge	r3, #0
 801226a:	232d      	movlt	r3, #45	; 0x2d
 801226c:	bfb8      	it	lt
 801226e:	4614      	movlt	r4, r2
 8012270:	2f46      	cmp	r7, #70	; 0x46
 8012272:	700b      	strb	r3, [r1, #0]
 8012274:	d004      	beq.n	8012280 <__cvt+0x40>
 8012276:	2f45      	cmp	r7, #69	; 0x45
 8012278:	d100      	bne.n	801227c <__cvt+0x3c>
 801227a:	3601      	adds	r6, #1
 801227c:	2102      	movs	r1, #2
 801227e:	e000      	b.n	8012282 <__cvt+0x42>
 8012280:	2103      	movs	r1, #3
 8012282:	ab03      	add	r3, sp, #12
 8012284:	9301      	str	r3, [sp, #4]
 8012286:	ab02      	add	r3, sp, #8
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4632      	mov	r2, r6
 801228c:	4653      	mov	r3, sl
 801228e:	ec45 4b10 	vmov	d0, r4, r5
 8012292:	f001 ffb1 	bl	80141f8 <_dtoa_r>
 8012296:	2f47      	cmp	r7, #71	; 0x47
 8012298:	4680      	mov	r8, r0
 801229a:	d102      	bne.n	80122a2 <__cvt+0x62>
 801229c:	f019 0f01 	tst.w	r9, #1
 80122a0:	d026      	beq.n	80122f0 <__cvt+0xb0>
 80122a2:	2f46      	cmp	r7, #70	; 0x46
 80122a4:	eb08 0906 	add.w	r9, r8, r6
 80122a8:	d111      	bne.n	80122ce <__cvt+0x8e>
 80122aa:	f898 3000 	ldrb.w	r3, [r8]
 80122ae:	2b30      	cmp	r3, #48	; 0x30
 80122b0:	d10a      	bne.n	80122c8 <__cvt+0x88>
 80122b2:	2200      	movs	r2, #0
 80122b4:	2300      	movs	r3, #0
 80122b6:	4620      	mov	r0, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	f7ee fc1d 	bl	8000af8 <__aeabi_dcmpeq>
 80122be:	b918      	cbnz	r0, 80122c8 <__cvt+0x88>
 80122c0:	f1c6 0601 	rsb	r6, r6, #1
 80122c4:	f8ca 6000 	str.w	r6, [sl]
 80122c8:	f8da 3000 	ldr.w	r3, [sl]
 80122cc:	4499      	add	r9, r3
 80122ce:	2200      	movs	r2, #0
 80122d0:	2300      	movs	r3, #0
 80122d2:	4620      	mov	r0, r4
 80122d4:	4629      	mov	r1, r5
 80122d6:	f7ee fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80122da:	b938      	cbnz	r0, 80122ec <__cvt+0xac>
 80122dc:	2230      	movs	r2, #48	; 0x30
 80122de:	9b03      	ldr	r3, [sp, #12]
 80122e0:	454b      	cmp	r3, r9
 80122e2:	d205      	bcs.n	80122f0 <__cvt+0xb0>
 80122e4:	1c59      	adds	r1, r3, #1
 80122e6:	9103      	str	r1, [sp, #12]
 80122e8:	701a      	strb	r2, [r3, #0]
 80122ea:	e7f8      	b.n	80122de <__cvt+0x9e>
 80122ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80122f0:	9b03      	ldr	r3, [sp, #12]
 80122f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122f4:	eba3 0308 	sub.w	r3, r3, r8
 80122f8:	4640      	mov	r0, r8
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	b004      	add	sp, #16
 80122fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012302 <__exponent>:
 8012302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012304:	2900      	cmp	r1, #0
 8012306:	4604      	mov	r4, r0
 8012308:	bfba      	itte	lt
 801230a:	4249      	neglt	r1, r1
 801230c:	232d      	movlt	r3, #45	; 0x2d
 801230e:	232b      	movge	r3, #43	; 0x2b
 8012310:	2909      	cmp	r1, #9
 8012312:	f804 2b02 	strb.w	r2, [r4], #2
 8012316:	7043      	strb	r3, [r0, #1]
 8012318:	dd20      	ble.n	801235c <__exponent+0x5a>
 801231a:	f10d 0307 	add.w	r3, sp, #7
 801231e:	461f      	mov	r7, r3
 8012320:	260a      	movs	r6, #10
 8012322:	fb91 f5f6 	sdiv	r5, r1, r6
 8012326:	fb06 1115 	mls	r1, r6, r5, r1
 801232a:	3130      	adds	r1, #48	; 0x30
 801232c:	2d09      	cmp	r5, #9
 801232e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012332:	f103 32ff 	add.w	r2, r3, #4294967295
 8012336:	4629      	mov	r1, r5
 8012338:	dc09      	bgt.n	801234e <__exponent+0x4c>
 801233a:	3130      	adds	r1, #48	; 0x30
 801233c:	3b02      	subs	r3, #2
 801233e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012342:	42bb      	cmp	r3, r7
 8012344:	4622      	mov	r2, r4
 8012346:	d304      	bcc.n	8012352 <__exponent+0x50>
 8012348:	1a10      	subs	r0, r2, r0
 801234a:	b003      	add	sp, #12
 801234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801234e:	4613      	mov	r3, r2
 8012350:	e7e7      	b.n	8012322 <__exponent+0x20>
 8012352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012356:	f804 2b01 	strb.w	r2, [r4], #1
 801235a:	e7f2      	b.n	8012342 <__exponent+0x40>
 801235c:	2330      	movs	r3, #48	; 0x30
 801235e:	4419      	add	r1, r3
 8012360:	7083      	strb	r3, [r0, #2]
 8012362:	1d02      	adds	r2, r0, #4
 8012364:	70c1      	strb	r1, [r0, #3]
 8012366:	e7ef      	b.n	8012348 <__exponent+0x46>

08012368 <_printf_float>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	b08d      	sub	sp, #52	; 0x34
 801236e:	460c      	mov	r4, r1
 8012370:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012374:	4616      	mov	r6, r2
 8012376:	461f      	mov	r7, r3
 8012378:	4605      	mov	r5, r0
 801237a:	f003 f9a9 	bl	80156d0 <_localeconv_r>
 801237e:	6803      	ldr	r3, [r0, #0]
 8012380:	9304      	str	r3, [sp, #16]
 8012382:	4618      	mov	r0, r3
 8012384:	f7ed ff3c 	bl	8000200 <strlen>
 8012388:	2300      	movs	r3, #0
 801238a:	930a      	str	r3, [sp, #40]	; 0x28
 801238c:	f8d8 3000 	ldr.w	r3, [r8]
 8012390:	9005      	str	r0, [sp, #20]
 8012392:	3307      	adds	r3, #7
 8012394:	f023 0307 	bic.w	r3, r3, #7
 8012398:	f103 0208 	add.w	r2, r3, #8
 801239c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80123a0:	f8d4 b000 	ldr.w	fp, [r4]
 80123a4:	f8c8 2000 	str.w	r2, [r8]
 80123a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123b8:	9307      	str	r3, [sp, #28]
 80123ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80123be:	f04f 32ff 	mov.w	r2, #4294967295
 80123c2:	4ba7      	ldr	r3, [pc, #668]	; (8012660 <_printf_float+0x2f8>)
 80123c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123c8:	f7ee fbc8 	bl	8000b5c <__aeabi_dcmpun>
 80123cc:	bb70      	cbnz	r0, 801242c <_printf_float+0xc4>
 80123ce:	f04f 32ff 	mov.w	r2, #4294967295
 80123d2:	4ba3      	ldr	r3, [pc, #652]	; (8012660 <_printf_float+0x2f8>)
 80123d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123d8:	f7ee fba2 	bl	8000b20 <__aeabi_dcmple>
 80123dc:	bb30      	cbnz	r0, 801242c <_printf_float+0xc4>
 80123de:	2200      	movs	r2, #0
 80123e0:	2300      	movs	r3, #0
 80123e2:	4640      	mov	r0, r8
 80123e4:	4649      	mov	r1, r9
 80123e6:	f7ee fb91 	bl	8000b0c <__aeabi_dcmplt>
 80123ea:	b110      	cbz	r0, 80123f2 <_printf_float+0x8a>
 80123ec:	232d      	movs	r3, #45	; 0x2d
 80123ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123f2:	4a9c      	ldr	r2, [pc, #624]	; (8012664 <_printf_float+0x2fc>)
 80123f4:	4b9c      	ldr	r3, [pc, #624]	; (8012668 <_printf_float+0x300>)
 80123f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80123fa:	bf8c      	ite	hi
 80123fc:	4690      	movhi	r8, r2
 80123fe:	4698      	movls	r8, r3
 8012400:	2303      	movs	r3, #3
 8012402:	f02b 0204 	bic.w	r2, fp, #4
 8012406:	6123      	str	r3, [r4, #16]
 8012408:	6022      	str	r2, [r4, #0]
 801240a:	f04f 0900 	mov.w	r9, #0
 801240e:	9700      	str	r7, [sp, #0]
 8012410:	4633      	mov	r3, r6
 8012412:	aa0b      	add	r2, sp, #44	; 0x2c
 8012414:	4621      	mov	r1, r4
 8012416:	4628      	mov	r0, r5
 8012418:	f000 f9e6 	bl	80127e8 <_printf_common>
 801241c:	3001      	adds	r0, #1
 801241e:	f040 808d 	bne.w	801253c <_printf_float+0x1d4>
 8012422:	f04f 30ff 	mov.w	r0, #4294967295
 8012426:	b00d      	add	sp, #52	; 0x34
 8012428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242c:	4642      	mov	r2, r8
 801242e:	464b      	mov	r3, r9
 8012430:	4640      	mov	r0, r8
 8012432:	4649      	mov	r1, r9
 8012434:	f7ee fb92 	bl	8000b5c <__aeabi_dcmpun>
 8012438:	b110      	cbz	r0, 8012440 <_printf_float+0xd8>
 801243a:	4a8c      	ldr	r2, [pc, #560]	; (801266c <_printf_float+0x304>)
 801243c:	4b8c      	ldr	r3, [pc, #560]	; (8012670 <_printf_float+0x308>)
 801243e:	e7da      	b.n	80123f6 <_printf_float+0x8e>
 8012440:	6861      	ldr	r1, [r4, #4]
 8012442:	1c4b      	adds	r3, r1, #1
 8012444:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012448:	a80a      	add	r0, sp, #40	; 0x28
 801244a:	d13e      	bne.n	80124ca <_printf_float+0x162>
 801244c:	2306      	movs	r3, #6
 801244e:	6063      	str	r3, [r4, #4]
 8012450:	2300      	movs	r3, #0
 8012452:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012456:	ab09      	add	r3, sp, #36	; 0x24
 8012458:	9300      	str	r3, [sp, #0]
 801245a:	ec49 8b10 	vmov	d0, r8, r9
 801245e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012462:	6022      	str	r2, [r4, #0]
 8012464:	f8cd a004 	str.w	sl, [sp, #4]
 8012468:	6861      	ldr	r1, [r4, #4]
 801246a:	4628      	mov	r0, r5
 801246c:	f7ff fee8 	bl	8012240 <__cvt>
 8012470:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012474:	2b47      	cmp	r3, #71	; 0x47
 8012476:	4680      	mov	r8, r0
 8012478:	d109      	bne.n	801248e <_printf_float+0x126>
 801247a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247c:	1cd8      	adds	r0, r3, #3
 801247e:	db02      	blt.n	8012486 <_printf_float+0x11e>
 8012480:	6862      	ldr	r2, [r4, #4]
 8012482:	4293      	cmp	r3, r2
 8012484:	dd47      	ble.n	8012516 <_printf_float+0x1ae>
 8012486:	f1aa 0a02 	sub.w	sl, sl, #2
 801248a:	fa5f fa8a 	uxtb.w	sl, sl
 801248e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012494:	d824      	bhi.n	80124e0 <_printf_float+0x178>
 8012496:	3901      	subs	r1, #1
 8012498:	4652      	mov	r2, sl
 801249a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801249e:	9109      	str	r1, [sp, #36]	; 0x24
 80124a0:	f7ff ff2f 	bl	8012302 <__exponent>
 80124a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124a6:	1813      	adds	r3, r2, r0
 80124a8:	2a01      	cmp	r2, #1
 80124aa:	4681      	mov	r9, r0
 80124ac:	6123      	str	r3, [r4, #16]
 80124ae:	dc02      	bgt.n	80124b6 <_printf_float+0x14e>
 80124b0:	6822      	ldr	r2, [r4, #0]
 80124b2:	07d1      	lsls	r1, r2, #31
 80124b4:	d501      	bpl.n	80124ba <_printf_float+0x152>
 80124b6:	3301      	adds	r3, #1
 80124b8:	6123      	str	r3, [r4, #16]
 80124ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d0a5      	beq.n	801240e <_printf_float+0xa6>
 80124c2:	232d      	movs	r3, #45	; 0x2d
 80124c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124c8:	e7a1      	b.n	801240e <_printf_float+0xa6>
 80124ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80124ce:	f000 8177 	beq.w	80127c0 <_printf_float+0x458>
 80124d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80124d6:	d1bb      	bne.n	8012450 <_printf_float+0xe8>
 80124d8:	2900      	cmp	r1, #0
 80124da:	d1b9      	bne.n	8012450 <_printf_float+0xe8>
 80124dc:	2301      	movs	r3, #1
 80124de:	e7b6      	b.n	801244e <_printf_float+0xe6>
 80124e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80124e4:	d119      	bne.n	801251a <_printf_float+0x1b2>
 80124e6:	2900      	cmp	r1, #0
 80124e8:	6863      	ldr	r3, [r4, #4]
 80124ea:	dd0c      	ble.n	8012506 <_printf_float+0x19e>
 80124ec:	6121      	str	r1, [r4, #16]
 80124ee:	b913      	cbnz	r3, 80124f6 <_printf_float+0x18e>
 80124f0:	6822      	ldr	r2, [r4, #0]
 80124f2:	07d2      	lsls	r2, r2, #31
 80124f4:	d502      	bpl.n	80124fc <_printf_float+0x194>
 80124f6:	3301      	adds	r3, #1
 80124f8:	440b      	add	r3, r1
 80124fa:	6123      	str	r3, [r4, #16]
 80124fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8012500:	f04f 0900 	mov.w	r9, #0
 8012504:	e7d9      	b.n	80124ba <_printf_float+0x152>
 8012506:	b913      	cbnz	r3, 801250e <_printf_float+0x1a6>
 8012508:	6822      	ldr	r2, [r4, #0]
 801250a:	07d0      	lsls	r0, r2, #31
 801250c:	d501      	bpl.n	8012512 <_printf_float+0x1aa>
 801250e:	3302      	adds	r3, #2
 8012510:	e7f3      	b.n	80124fa <_printf_float+0x192>
 8012512:	2301      	movs	r3, #1
 8012514:	e7f1      	b.n	80124fa <_printf_float+0x192>
 8012516:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801251a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801251e:	4293      	cmp	r3, r2
 8012520:	db05      	blt.n	801252e <_printf_float+0x1c6>
 8012522:	6822      	ldr	r2, [r4, #0]
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	07d1      	lsls	r1, r2, #31
 8012528:	d5e8      	bpl.n	80124fc <_printf_float+0x194>
 801252a:	3301      	adds	r3, #1
 801252c:	e7e5      	b.n	80124fa <_printf_float+0x192>
 801252e:	2b00      	cmp	r3, #0
 8012530:	bfd4      	ite	le
 8012532:	f1c3 0302 	rsble	r3, r3, #2
 8012536:	2301      	movgt	r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	e7de      	b.n	80124fa <_printf_float+0x192>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	055a      	lsls	r2, r3, #21
 8012540:	d407      	bmi.n	8012552 <_printf_float+0x1ea>
 8012542:	6923      	ldr	r3, [r4, #16]
 8012544:	4642      	mov	r2, r8
 8012546:	4631      	mov	r1, r6
 8012548:	4628      	mov	r0, r5
 801254a:	47b8      	blx	r7
 801254c:	3001      	adds	r0, #1
 801254e:	d12b      	bne.n	80125a8 <_printf_float+0x240>
 8012550:	e767      	b.n	8012422 <_printf_float+0xba>
 8012552:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012556:	f240 80dc 	bls.w	8012712 <_printf_float+0x3aa>
 801255a:	2200      	movs	r2, #0
 801255c:	2300      	movs	r3, #0
 801255e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012562:	f7ee fac9 	bl	8000af8 <__aeabi_dcmpeq>
 8012566:	2800      	cmp	r0, #0
 8012568:	d033      	beq.n	80125d2 <_printf_float+0x26a>
 801256a:	2301      	movs	r3, #1
 801256c:	4a41      	ldr	r2, [pc, #260]	; (8012674 <_printf_float+0x30c>)
 801256e:	4631      	mov	r1, r6
 8012570:	4628      	mov	r0, r5
 8012572:	47b8      	blx	r7
 8012574:	3001      	adds	r0, #1
 8012576:	f43f af54 	beq.w	8012422 <_printf_float+0xba>
 801257a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801257e:	429a      	cmp	r2, r3
 8012580:	db02      	blt.n	8012588 <_printf_float+0x220>
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	07d8      	lsls	r0, r3, #31
 8012586:	d50f      	bpl.n	80125a8 <_printf_float+0x240>
 8012588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801258c:	4631      	mov	r1, r6
 801258e:	4628      	mov	r0, r5
 8012590:	47b8      	blx	r7
 8012592:	3001      	adds	r0, #1
 8012594:	f43f af45 	beq.w	8012422 <_printf_float+0xba>
 8012598:	f04f 0800 	mov.w	r8, #0
 801259c:	f104 091a 	add.w	r9, r4, #26
 80125a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125a2:	3b01      	subs	r3, #1
 80125a4:	4543      	cmp	r3, r8
 80125a6:	dc09      	bgt.n	80125bc <_printf_float+0x254>
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	079b      	lsls	r3, r3, #30
 80125ac:	f100 8103 	bmi.w	80127b6 <_printf_float+0x44e>
 80125b0:	68e0      	ldr	r0, [r4, #12]
 80125b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125b4:	4298      	cmp	r0, r3
 80125b6:	bfb8      	it	lt
 80125b8:	4618      	movlt	r0, r3
 80125ba:	e734      	b.n	8012426 <_printf_float+0xbe>
 80125bc:	2301      	movs	r3, #1
 80125be:	464a      	mov	r2, r9
 80125c0:	4631      	mov	r1, r6
 80125c2:	4628      	mov	r0, r5
 80125c4:	47b8      	blx	r7
 80125c6:	3001      	adds	r0, #1
 80125c8:	f43f af2b 	beq.w	8012422 <_printf_float+0xba>
 80125cc:	f108 0801 	add.w	r8, r8, #1
 80125d0:	e7e6      	b.n	80125a0 <_printf_float+0x238>
 80125d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	dc2b      	bgt.n	8012630 <_printf_float+0x2c8>
 80125d8:	2301      	movs	r3, #1
 80125da:	4a26      	ldr	r2, [pc, #152]	; (8012674 <_printf_float+0x30c>)
 80125dc:	4631      	mov	r1, r6
 80125de:	4628      	mov	r0, r5
 80125e0:	47b8      	blx	r7
 80125e2:	3001      	adds	r0, #1
 80125e4:	f43f af1d 	beq.w	8012422 <_printf_float+0xba>
 80125e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ea:	b923      	cbnz	r3, 80125f6 <_printf_float+0x28e>
 80125ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ee:	b913      	cbnz	r3, 80125f6 <_printf_float+0x28e>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	07d9      	lsls	r1, r3, #31
 80125f4:	d5d8      	bpl.n	80125a8 <_printf_float+0x240>
 80125f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125fa:	4631      	mov	r1, r6
 80125fc:	4628      	mov	r0, r5
 80125fe:	47b8      	blx	r7
 8012600:	3001      	adds	r0, #1
 8012602:	f43f af0e 	beq.w	8012422 <_printf_float+0xba>
 8012606:	f04f 0900 	mov.w	r9, #0
 801260a:	f104 0a1a 	add.w	sl, r4, #26
 801260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012610:	425b      	negs	r3, r3
 8012612:	454b      	cmp	r3, r9
 8012614:	dc01      	bgt.n	801261a <_printf_float+0x2b2>
 8012616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012618:	e794      	b.n	8012544 <_printf_float+0x1dc>
 801261a:	2301      	movs	r3, #1
 801261c:	4652      	mov	r2, sl
 801261e:	4631      	mov	r1, r6
 8012620:	4628      	mov	r0, r5
 8012622:	47b8      	blx	r7
 8012624:	3001      	adds	r0, #1
 8012626:	f43f aefc 	beq.w	8012422 <_printf_float+0xba>
 801262a:	f109 0901 	add.w	r9, r9, #1
 801262e:	e7ee      	b.n	801260e <_printf_float+0x2a6>
 8012630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012634:	429a      	cmp	r2, r3
 8012636:	bfa8      	it	ge
 8012638:	461a      	movge	r2, r3
 801263a:	2a00      	cmp	r2, #0
 801263c:	4691      	mov	r9, r2
 801263e:	dd07      	ble.n	8012650 <_printf_float+0x2e8>
 8012640:	4613      	mov	r3, r2
 8012642:	4631      	mov	r1, r6
 8012644:	4642      	mov	r2, r8
 8012646:	4628      	mov	r0, r5
 8012648:	47b8      	blx	r7
 801264a:	3001      	adds	r0, #1
 801264c:	f43f aee9 	beq.w	8012422 <_printf_float+0xba>
 8012650:	f104 031a 	add.w	r3, r4, #26
 8012654:	f04f 0b00 	mov.w	fp, #0
 8012658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801265c:	9306      	str	r3, [sp, #24]
 801265e:	e015      	b.n	801268c <_printf_float+0x324>
 8012660:	7fefffff 	.word	0x7fefffff
 8012664:	080178d0 	.word	0x080178d0
 8012668:	080178cc 	.word	0x080178cc
 801266c:	080178d8 	.word	0x080178d8
 8012670:	080178d4 	.word	0x080178d4
 8012674:	08017afb 	.word	0x08017afb
 8012678:	2301      	movs	r3, #1
 801267a:	9a06      	ldr	r2, [sp, #24]
 801267c:	4631      	mov	r1, r6
 801267e:	4628      	mov	r0, r5
 8012680:	47b8      	blx	r7
 8012682:	3001      	adds	r0, #1
 8012684:	f43f aecd 	beq.w	8012422 <_printf_float+0xba>
 8012688:	f10b 0b01 	add.w	fp, fp, #1
 801268c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012690:	ebaa 0309 	sub.w	r3, sl, r9
 8012694:	455b      	cmp	r3, fp
 8012696:	dcef      	bgt.n	8012678 <_printf_float+0x310>
 8012698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801269c:	429a      	cmp	r2, r3
 801269e:	44d0      	add	r8, sl
 80126a0:	db15      	blt.n	80126ce <_printf_float+0x366>
 80126a2:	6823      	ldr	r3, [r4, #0]
 80126a4:	07da      	lsls	r2, r3, #31
 80126a6:	d412      	bmi.n	80126ce <_printf_float+0x366>
 80126a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126ac:	eba3 020a 	sub.w	r2, r3, sl
 80126b0:	eba3 0a01 	sub.w	sl, r3, r1
 80126b4:	4592      	cmp	sl, r2
 80126b6:	bfa8      	it	ge
 80126b8:	4692      	movge	sl, r2
 80126ba:	f1ba 0f00 	cmp.w	sl, #0
 80126be:	dc0e      	bgt.n	80126de <_printf_float+0x376>
 80126c0:	f04f 0800 	mov.w	r8, #0
 80126c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126c8:	f104 091a 	add.w	r9, r4, #26
 80126cc:	e019      	b.n	8012702 <_printf_float+0x39a>
 80126ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126d2:	4631      	mov	r1, r6
 80126d4:	4628      	mov	r0, r5
 80126d6:	47b8      	blx	r7
 80126d8:	3001      	adds	r0, #1
 80126da:	d1e5      	bne.n	80126a8 <_printf_float+0x340>
 80126dc:	e6a1      	b.n	8012422 <_printf_float+0xba>
 80126de:	4653      	mov	r3, sl
 80126e0:	4642      	mov	r2, r8
 80126e2:	4631      	mov	r1, r6
 80126e4:	4628      	mov	r0, r5
 80126e6:	47b8      	blx	r7
 80126e8:	3001      	adds	r0, #1
 80126ea:	d1e9      	bne.n	80126c0 <_printf_float+0x358>
 80126ec:	e699      	b.n	8012422 <_printf_float+0xba>
 80126ee:	2301      	movs	r3, #1
 80126f0:	464a      	mov	r2, r9
 80126f2:	4631      	mov	r1, r6
 80126f4:	4628      	mov	r0, r5
 80126f6:	47b8      	blx	r7
 80126f8:	3001      	adds	r0, #1
 80126fa:	f43f ae92 	beq.w	8012422 <_printf_float+0xba>
 80126fe:	f108 0801 	add.w	r8, r8, #1
 8012702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012706:	1a9b      	subs	r3, r3, r2
 8012708:	eba3 030a 	sub.w	r3, r3, sl
 801270c:	4543      	cmp	r3, r8
 801270e:	dcee      	bgt.n	80126ee <_printf_float+0x386>
 8012710:	e74a      	b.n	80125a8 <_printf_float+0x240>
 8012712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012714:	2a01      	cmp	r2, #1
 8012716:	dc01      	bgt.n	801271c <_printf_float+0x3b4>
 8012718:	07db      	lsls	r3, r3, #31
 801271a:	d53a      	bpl.n	8012792 <_printf_float+0x42a>
 801271c:	2301      	movs	r3, #1
 801271e:	4642      	mov	r2, r8
 8012720:	4631      	mov	r1, r6
 8012722:	4628      	mov	r0, r5
 8012724:	47b8      	blx	r7
 8012726:	3001      	adds	r0, #1
 8012728:	f43f ae7b 	beq.w	8012422 <_printf_float+0xba>
 801272c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012730:	4631      	mov	r1, r6
 8012732:	4628      	mov	r0, r5
 8012734:	47b8      	blx	r7
 8012736:	3001      	adds	r0, #1
 8012738:	f108 0801 	add.w	r8, r8, #1
 801273c:	f43f ae71 	beq.w	8012422 <_printf_float+0xba>
 8012740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012742:	2200      	movs	r2, #0
 8012744:	f103 3aff 	add.w	sl, r3, #4294967295
 8012748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801274c:	2300      	movs	r3, #0
 801274e:	f7ee f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 8012752:	b9c8      	cbnz	r0, 8012788 <_printf_float+0x420>
 8012754:	4653      	mov	r3, sl
 8012756:	4642      	mov	r2, r8
 8012758:	4631      	mov	r1, r6
 801275a:	4628      	mov	r0, r5
 801275c:	47b8      	blx	r7
 801275e:	3001      	adds	r0, #1
 8012760:	d10e      	bne.n	8012780 <_printf_float+0x418>
 8012762:	e65e      	b.n	8012422 <_printf_float+0xba>
 8012764:	2301      	movs	r3, #1
 8012766:	4652      	mov	r2, sl
 8012768:	4631      	mov	r1, r6
 801276a:	4628      	mov	r0, r5
 801276c:	47b8      	blx	r7
 801276e:	3001      	adds	r0, #1
 8012770:	f43f ae57 	beq.w	8012422 <_printf_float+0xba>
 8012774:	f108 0801 	add.w	r8, r8, #1
 8012778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801277a:	3b01      	subs	r3, #1
 801277c:	4543      	cmp	r3, r8
 801277e:	dcf1      	bgt.n	8012764 <_printf_float+0x3fc>
 8012780:	464b      	mov	r3, r9
 8012782:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012786:	e6de      	b.n	8012546 <_printf_float+0x1de>
 8012788:	f04f 0800 	mov.w	r8, #0
 801278c:	f104 0a1a 	add.w	sl, r4, #26
 8012790:	e7f2      	b.n	8012778 <_printf_float+0x410>
 8012792:	2301      	movs	r3, #1
 8012794:	e7df      	b.n	8012756 <_printf_float+0x3ee>
 8012796:	2301      	movs	r3, #1
 8012798:	464a      	mov	r2, r9
 801279a:	4631      	mov	r1, r6
 801279c:	4628      	mov	r0, r5
 801279e:	47b8      	blx	r7
 80127a0:	3001      	adds	r0, #1
 80127a2:	f43f ae3e 	beq.w	8012422 <_printf_float+0xba>
 80127a6:	f108 0801 	add.w	r8, r8, #1
 80127aa:	68e3      	ldr	r3, [r4, #12]
 80127ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127ae:	1a9b      	subs	r3, r3, r2
 80127b0:	4543      	cmp	r3, r8
 80127b2:	dcf0      	bgt.n	8012796 <_printf_float+0x42e>
 80127b4:	e6fc      	b.n	80125b0 <_printf_float+0x248>
 80127b6:	f04f 0800 	mov.w	r8, #0
 80127ba:	f104 0919 	add.w	r9, r4, #25
 80127be:	e7f4      	b.n	80127aa <_printf_float+0x442>
 80127c0:	2900      	cmp	r1, #0
 80127c2:	f43f ae8b 	beq.w	80124dc <_printf_float+0x174>
 80127c6:	2300      	movs	r3, #0
 80127c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80127cc:	ab09      	add	r3, sp, #36	; 0x24
 80127ce:	9300      	str	r3, [sp, #0]
 80127d0:	ec49 8b10 	vmov	d0, r8, r9
 80127d4:	6022      	str	r2, [r4, #0]
 80127d6:	f8cd a004 	str.w	sl, [sp, #4]
 80127da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127de:	4628      	mov	r0, r5
 80127e0:	f7ff fd2e 	bl	8012240 <__cvt>
 80127e4:	4680      	mov	r8, r0
 80127e6:	e648      	b.n	801247a <_printf_float+0x112>

080127e8 <_printf_common>:
 80127e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ec:	4691      	mov	r9, r2
 80127ee:	461f      	mov	r7, r3
 80127f0:	688a      	ldr	r2, [r1, #8]
 80127f2:	690b      	ldr	r3, [r1, #16]
 80127f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127f8:	4293      	cmp	r3, r2
 80127fa:	bfb8      	it	lt
 80127fc:	4613      	movlt	r3, r2
 80127fe:	f8c9 3000 	str.w	r3, [r9]
 8012802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012806:	4606      	mov	r6, r0
 8012808:	460c      	mov	r4, r1
 801280a:	b112      	cbz	r2, 8012812 <_printf_common+0x2a>
 801280c:	3301      	adds	r3, #1
 801280e:	f8c9 3000 	str.w	r3, [r9]
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	0699      	lsls	r1, r3, #26
 8012816:	bf42      	ittt	mi
 8012818:	f8d9 3000 	ldrmi.w	r3, [r9]
 801281c:	3302      	addmi	r3, #2
 801281e:	f8c9 3000 	strmi.w	r3, [r9]
 8012822:	6825      	ldr	r5, [r4, #0]
 8012824:	f015 0506 	ands.w	r5, r5, #6
 8012828:	d107      	bne.n	801283a <_printf_common+0x52>
 801282a:	f104 0a19 	add.w	sl, r4, #25
 801282e:	68e3      	ldr	r3, [r4, #12]
 8012830:	f8d9 2000 	ldr.w	r2, [r9]
 8012834:	1a9b      	subs	r3, r3, r2
 8012836:	42ab      	cmp	r3, r5
 8012838:	dc28      	bgt.n	801288c <_printf_common+0xa4>
 801283a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801283e:	6822      	ldr	r2, [r4, #0]
 8012840:	3300      	adds	r3, #0
 8012842:	bf18      	it	ne
 8012844:	2301      	movne	r3, #1
 8012846:	0692      	lsls	r2, r2, #26
 8012848:	d42d      	bmi.n	80128a6 <_printf_common+0xbe>
 801284a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801284e:	4639      	mov	r1, r7
 8012850:	4630      	mov	r0, r6
 8012852:	47c0      	blx	r8
 8012854:	3001      	adds	r0, #1
 8012856:	d020      	beq.n	801289a <_printf_common+0xb2>
 8012858:	6823      	ldr	r3, [r4, #0]
 801285a:	68e5      	ldr	r5, [r4, #12]
 801285c:	f8d9 2000 	ldr.w	r2, [r9]
 8012860:	f003 0306 	and.w	r3, r3, #6
 8012864:	2b04      	cmp	r3, #4
 8012866:	bf08      	it	eq
 8012868:	1aad      	subeq	r5, r5, r2
 801286a:	68a3      	ldr	r3, [r4, #8]
 801286c:	6922      	ldr	r2, [r4, #16]
 801286e:	bf0c      	ite	eq
 8012870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012874:	2500      	movne	r5, #0
 8012876:	4293      	cmp	r3, r2
 8012878:	bfc4      	itt	gt
 801287a:	1a9b      	subgt	r3, r3, r2
 801287c:	18ed      	addgt	r5, r5, r3
 801287e:	f04f 0900 	mov.w	r9, #0
 8012882:	341a      	adds	r4, #26
 8012884:	454d      	cmp	r5, r9
 8012886:	d11a      	bne.n	80128be <_printf_common+0xd6>
 8012888:	2000      	movs	r0, #0
 801288a:	e008      	b.n	801289e <_printf_common+0xb6>
 801288c:	2301      	movs	r3, #1
 801288e:	4652      	mov	r2, sl
 8012890:	4639      	mov	r1, r7
 8012892:	4630      	mov	r0, r6
 8012894:	47c0      	blx	r8
 8012896:	3001      	adds	r0, #1
 8012898:	d103      	bne.n	80128a2 <_printf_common+0xba>
 801289a:	f04f 30ff 	mov.w	r0, #4294967295
 801289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128a2:	3501      	adds	r5, #1
 80128a4:	e7c3      	b.n	801282e <_printf_common+0x46>
 80128a6:	18e1      	adds	r1, r4, r3
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	2030      	movs	r0, #48	; 0x30
 80128ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128b0:	4422      	add	r2, r4
 80128b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128ba:	3302      	adds	r3, #2
 80128bc:	e7c5      	b.n	801284a <_printf_common+0x62>
 80128be:	2301      	movs	r3, #1
 80128c0:	4622      	mov	r2, r4
 80128c2:	4639      	mov	r1, r7
 80128c4:	4630      	mov	r0, r6
 80128c6:	47c0      	blx	r8
 80128c8:	3001      	adds	r0, #1
 80128ca:	d0e6      	beq.n	801289a <_printf_common+0xb2>
 80128cc:	f109 0901 	add.w	r9, r9, #1
 80128d0:	e7d8      	b.n	8012884 <_printf_common+0x9c>
	...

080128d4 <_printf_i>:
 80128d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80128dc:	460c      	mov	r4, r1
 80128de:	7e09      	ldrb	r1, [r1, #24]
 80128e0:	b085      	sub	sp, #20
 80128e2:	296e      	cmp	r1, #110	; 0x6e
 80128e4:	4617      	mov	r7, r2
 80128e6:	4606      	mov	r6, r0
 80128e8:	4698      	mov	r8, r3
 80128ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128ec:	f000 80b3 	beq.w	8012a56 <_printf_i+0x182>
 80128f0:	d822      	bhi.n	8012938 <_printf_i+0x64>
 80128f2:	2963      	cmp	r1, #99	; 0x63
 80128f4:	d036      	beq.n	8012964 <_printf_i+0x90>
 80128f6:	d80a      	bhi.n	801290e <_printf_i+0x3a>
 80128f8:	2900      	cmp	r1, #0
 80128fa:	f000 80b9 	beq.w	8012a70 <_printf_i+0x19c>
 80128fe:	2958      	cmp	r1, #88	; 0x58
 8012900:	f000 8083 	beq.w	8012a0a <_printf_i+0x136>
 8012904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012908:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801290c:	e032      	b.n	8012974 <_printf_i+0xa0>
 801290e:	2964      	cmp	r1, #100	; 0x64
 8012910:	d001      	beq.n	8012916 <_printf_i+0x42>
 8012912:	2969      	cmp	r1, #105	; 0x69
 8012914:	d1f6      	bne.n	8012904 <_printf_i+0x30>
 8012916:	6820      	ldr	r0, [r4, #0]
 8012918:	6813      	ldr	r3, [r2, #0]
 801291a:	0605      	lsls	r5, r0, #24
 801291c:	f103 0104 	add.w	r1, r3, #4
 8012920:	d52a      	bpl.n	8012978 <_printf_i+0xa4>
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	6011      	str	r1, [r2, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	da03      	bge.n	8012932 <_printf_i+0x5e>
 801292a:	222d      	movs	r2, #45	; 0x2d
 801292c:	425b      	negs	r3, r3
 801292e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012932:	486f      	ldr	r0, [pc, #444]	; (8012af0 <_printf_i+0x21c>)
 8012934:	220a      	movs	r2, #10
 8012936:	e039      	b.n	80129ac <_printf_i+0xd8>
 8012938:	2973      	cmp	r1, #115	; 0x73
 801293a:	f000 809d 	beq.w	8012a78 <_printf_i+0x1a4>
 801293e:	d808      	bhi.n	8012952 <_printf_i+0x7e>
 8012940:	296f      	cmp	r1, #111	; 0x6f
 8012942:	d020      	beq.n	8012986 <_printf_i+0xb2>
 8012944:	2970      	cmp	r1, #112	; 0x70
 8012946:	d1dd      	bne.n	8012904 <_printf_i+0x30>
 8012948:	6823      	ldr	r3, [r4, #0]
 801294a:	f043 0320 	orr.w	r3, r3, #32
 801294e:	6023      	str	r3, [r4, #0]
 8012950:	e003      	b.n	801295a <_printf_i+0x86>
 8012952:	2975      	cmp	r1, #117	; 0x75
 8012954:	d017      	beq.n	8012986 <_printf_i+0xb2>
 8012956:	2978      	cmp	r1, #120	; 0x78
 8012958:	d1d4      	bne.n	8012904 <_printf_i+0x30>
 801295a:	2378      	movs	r3, #120	; 0x78
 801295c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012960:	4864      	ldr	r0, [pc, #400]	; (8012af4 <_printf_i+0x220>)
 8012962:	e055      	b.n	8012a10 <_printf_i+0x13c>
 8012964:	6813      	ldr	r3, [r2, #0]
 8012966:	1d19      	adds	r1, r3, #4
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	6011      	str	r1, [r2, #0]
 801296c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012974:	2301      	movs	r3, #1
 8012976:	e08c      	b.n	8012a92 <_printf_i+0x1be>
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	6011      	str	r1, [r2, #0]
 801297c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012980:	bf18      	it	ne
 8012982:	b21b      	sxthne	r3, r3
 8012984:	e7cf      	b.n	8012926 <_printf_i+0x52>
 8012986:	6813      	ldr	r3, [r2, #0]
 8012988:	6825      	ldr	r5, [r4, #0]
 801298a:	1d18      	adds	r0, r3, #4
 801298c:	6010      	str	r0, [r2, #0]
 801298e:	0628      	lsls	r0, r5, #24
 8012990:	d501      	bpl.n	8012996 <_printf_i+0xc2>
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	e002      	b.n	801299c <_printf_i+0xc8>
 8012996:	0668      	lsls	r0, r5, #25
 8012998:	d5fb      	bpl.n	8012992 <_printf_i+0xbe>
 801299a:	881b      	ldrh	r3, [r3, #0]
 801299c:	4854      	ldr	r0, [pc, #336]	; (8012af0 <_printf_i+0x21c>)
 801299e:	296f      	cmp	r1, #111	; 0x6f
 80129a0:	bf14      	ite	ne
 80129a2:	220a      	movne	r2, #10
 80129a4:	2208      	moveq	r2, #8
 80129a6:	2100      	movs	r1, #0
 80129a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129ac:	6865      	ldr	r5, [r4, #4]
 80129ae:	60a5      	str	r5, [r4, #8]
 80129b0:	2d00      	cmp	r5, #0
 80129b2:	f2c0 8095 	blt.w	8012ae0 <_printf_i+0x20c>
 80129b6:	6821      	ldr	r1, [r4, #0]
 80129b8:	f021 0104 	bic.w	r1, r1, #4
 80129bc:	6021      	str	r1, [r4, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d13d      	bne.n	8012a3e <_printf_i+0x16a>
 80129c2:	2d00      	cmp	r5, #0
 80129c4:	f040 808e 	bne.w	8012ae4 <_printf_i+0x210>
 80129c8:	4665      	mov	r5, ip
 80129ca:	2a08      	cmp	r2, #8
 80129cc:	d10b      	bne.n	80129e6 <_printf_i+0x112>
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	07db      	lsls	r3, r3, #31
 80129d2:	d508      	bpl.n	80129e6 <_printf_i+0x112>
 80129d4:	6923      	ldr	r3, [r4, #16]
 80129d6:	6862      	ldr	r2, [r4, #4]
 80129d8:	429a      	cmp	r2, r3
 80129da:	bfde      	ittt	le
 80129dc:	2330      	movle	r3, #48	; 0x30
 80129de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129e6:	ebac 0305 	sub.w	r3, ip, r5
 80129ea:	6123      	str	r3, [r4, #16]
 80129ec:	f8cd 8000 	str.w	r8, [sp]
 80129f0:	463b      	mov	r3, r7
 80129f2:	aa03      	add	r2, sp, #12
 80129f4:	4621      	mov	r1, r4
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7ff fef6 	bl	80127e8 <_printf_common>
 80129fc:	3001      	adds	r0, #1
 80129fe:	d14d      	bne.n	8012a9c <_printf_i+0x1c8>
 8012a00:	f04f 30ff 	mov.w	r0, #4294967295
 8012a04:	b005      	add	sp, #20
 8012a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a0a:	4839      	ldr	r0, [pc, #228]	; (8012af0 <_printf_i+0x21c>)
 8012a0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012a10:	6813      	ldr	r3, [r2, #0]
 8012a12:	6821      	ldr	r1, [r4, #0]
 8012a14:	1d1d      	adds	r5, r3, #4
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	6015      	str	r5, [r2, #0]
 8012a1a:	060a      	lsls	r2, r1, #24
 8012a1c:	d50b      	bpl.n	8012a36 <_printf_i+0x162>
 8012a1e:	07ca      	lsls	r2, r1, #31
 8012a20:	bf44      	itt	mi
 8012a22:	f041 0120 	orrmi.w	r1, r1, #32
 8012a26:	6021      	strmi	r1, [r4, #0]
 8012a28:	b91b      	cbnz	r3, 8012a32 <_printf_i+0x15e>
 8012a2a:	6822      	ldr	r2, [r4, #0]
 8012a2c:	f022 0220 	bic.w	r2, r2, #32
 8012a30:	6022      	str	r2, [r4, #0]
 8012a32:	2210      	movs	r2, #16
 8012a34:	e7b7      	b.n	80129a6 <_printf_i+0xd2>
 8012a36:	064d      	lsls	r5, r1, #25
 8012a38:	bf48      	it	mi
 8012a3a:	b29b      	uxthmi	r3, r3
 8012a3c:	e7ef      	b.n	8012a1e <_printf_i+0x14a>
 8012a3e:	4665      	mov	r5, ip
 8012a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a44:	fb02 3311 	mls	r3, r2, r1, r3
 8012a48:	5cc3      	ldrb	r3, [r0, r3]
 8012a4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a4e:	460b      	mov	r3, r1
 8012a50:	2900      	cmp	r1, #0
 8012a52:	d1f5      	bne.n	8012a40 <_printf_i+0x16c>
 8012a54:	e7b9      	b.n	80129ca <_printf_i+0xf6>
 8012a56:	6813      	ldr	r3, [r2, #0]
 8012a58:	6825      	ldr	r5, [r4, #0]
 8012a5a:	6961      	ldr	r1, [r4, #20]
 8012a5c:	1d18      	adds	r0, r3, #4
 8012a5e:	6010      	str	r0, [r2, #0]
 8012a60:	0628      	lsls	r0, r5, #24
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	d501      	bpl.n	8012a6a <_printf_i+0x196>
 8012a66:	6019      	str	r1, [r3, #0]
 8012a68:	e002      	b.n	8012a70 <_printf_i+0x19c>
 8012a6a:	066a      	lsls	r2, r5, #25
 8012a6c:	d5fb      	bpl.n	8012a66 <_printf_i+0x192>
 8012a6e:	8019      	strh	r1, [r3, #0]
 8012a70:	2300      	movs	r3, #0
 8012a72:	6123      	str	r3, [r4, #16]
 8012a74:	4665      	mov	r5, ip
 8012a76:	e7b9      	b.n	80129ec <_printf_i+0x118>
 8012a78:	6813      	ldr	r3, [r2, #0]
 8012a7a:	1d19      	adds	r1, r3, #4
 8012a7c:	6011      	str	r1, [r2, #0]
 8012a7e:	681d      	ldr	r5, [r3, #0]
 8012a80:	6862      	ldr	r2, [r4, #4]
 8012a82:	2100      	movs	r1, #0
 8012a84:	4628      	mov	r0, r5
 8012a86:	f7ed fbc3 	bl	8000210 <memchr>
 8012a8a:	b108      	cbz	r0, 8012a90 <_printf_i+0x1bc>
 8012a8c:	1b40      	subs	r0, r0, r5
 8012a8e:	6060      	str	r0, [r4, #4]
 8012a90:	6863      	ldr	r3, [r4, #4]
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	2300      	movs	r3, #0
 8012a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a9a:	e7a7      	b.n	80129ec <_printf_i+0x118>
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	462a      	mov	r2, r5
 8012aa0:	4639      	mov	r1, r7
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	47c0      	blx	r8
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	d0aa      	beq.n	8012a00 <_printf_i+0x12c>
 8012aaa:	6823      	ldr	r3, [r4, #0]
 8012aac:	079b      	lsls	r3, r3, #30
 8012aae:	d413      	bmi.n	8012ad8 <_printf_i+0x204>
 8012ab0:	68e0      	ldr	r0, [r4, #12]
 8012ab2:	9b03      	ldr	r3, [sp, #12]
 8012ab4:	4298      	cmp	r0, r3
 8012ab6:	bfb8      	it	lt
 8012ab8:	4618      	movlt	r0, r3
 8012aba:	e7a3      	b.n	8012a04 <_printf_i+0x130>
 8012abc:	2301      	movs	r3, #1
 8012abe:	464a      	mov	r2, r9
 8012ac0:	4639      	mov	r1, r7
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	47c0      	blx	r8
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	d09a      	beq.n	8012a00 <_printf_i+0x12c>
 8012aca:	3501      	adds	r5, #1
 8012acc:	68e3      	ldr	r3, [r4, #12]
 8012ace:	9a03      	ldr	r2, [sp, #12]
 8012ad0:	1a9b      	subs	r3, r3, r2
 8012ad2:	42ab      	cmp	r3, r5
 8012ad4:	dcf2      	bgt.n	8012abc <_printf_i+0x1e8>
 8012ad6:	e7eb      	b.n	8012ab0 <_printf_i+0x1dc>
 8012ad8:	2500      	movs	r5, #0
 8012ada:	f104 0919 	add.w	r9, r4, #25
 8012ade:	e7f5      	b.n	8012acc <_printf_i+0x1f8>
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d1ac      	bne.n	8012a3e <_printf_i+0x16a>
 8012ae4:	7803      	ldrb	r3, [r0, #0]
 8012ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aee:	e76c      	b.n	80129ca <_printf_i+0xf6>
 8012af0:	080178dc 	.word	0x080178dc
 8012af4:	080178ed 	.word	0x080178ed

08012af8 <_scanf_float>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	469a      	mov	sl, r3
 8012afe:	688b      	ldr	r3, [r1, #8]
 8012b00:	4616      	mov	r6, r2
 8012b02:	1e5a      	subs	r2, r3, #1
 8012b04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b08:	b087      	sub	sp, #28
 8012b0a:	bf83      	ittte	hi
 8012b0c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012b10:	189b      	addhi	r3, r3, r2
 8012b12:	9301      	strhi	r3, [sp, #4]
 8012b14:	2300      	movls	r3, #0
 8012b16:	bf86      	itte	hi
 8012b18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012b1c:	608b      	strhi	r3, [r1, #8]
 8012b1e:	9301      	strls	r3, [sp, #4]
 8012b20:	680b      	ldr	r3, [r1, #0]
 8012b22:	4688      	mov	r8, r1
 8012b24:	f04f 0b00 	mov.w	fp, #0
 8012b28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012b2c:	f848 3b1c 	str.w	r3, [r8], #28
 8012b30:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012b34:	4607      	mov	r7, r0
 8012b36:	460c      	mov	r4, r1
 8012b38:	4645      	mov	r5, r8
 8012b3a:	465a      	mov	r2, fp
 8012b3c:	46d9      	mov	r9, fp
 8012b3e:	f8cd b008 	str.w	fp, [sp, #8]
 8012b42:	68a1      	ldr	r1, [r4, #8]
 8012b44:	b181      	cbz	r1, 8012b68 <_scanf_float+0x70>
 8012b46:	6833      	ldr	r3, [r6, #0]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	2b49      	cmp	r3, #73	; 0x49
 8012b4c:	d071      	beq.n	8012c32 <_scanf_float+0x13a>
 8012b4e:	d84d      	bhi.n	8012bec <_scanf_float+0xf4>
 8012b50:	2b39      	cmp	r3, #57	; 0x39
 8012b52:	d840      	bhi.n	8012bd6 <_scanf_float+0xde>
 8012b54:	2b31      	cmp	r3, #49	; 0x31
 8012b56:	f080 8088 	bcs.w	8012c6a <_scanf_float+0x172>
 8012b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8012b5c:	f000 8090 	beq.w	8012c80 <_scanf_float+0x188>
 8012b60:	d815      	bhi.n	8012b8e <_scanf_float+0x96>
 8012b62:	2b2b      	cmp	r3, #43	; 0x2b
 8012b64:	f000 808c 	beq.w	8012c80 <_scanf_float+0x188>
 8012b68:	f1b9 0f00 	cmp.w	r9, #0
 8012b6c:	d003      	beq.n	8012b76 <_scanf_float+0x7e>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	3a01      	subs	r2, #1
 8012b78:	2a01      	cmp	r2, #1
 8012b7a:	f200 80ea 	bhi.w	8012d52 <_scanf_float+0x25a>
 8012b7e:	4545      	cmp	r5, r8
 8012b80:	f200 80dc 	bhi.w	8012d3c <_scanf_float+0x244>
 8012b84:	2601      	movs	r6, #1
 8012b86:	4630      	mov	r0, r6
 8012b88:	b007      	add	sp, #28
 8012b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8012b90:	f000 809f 	beq.w	8012cd2 <_scanf_float+0x1da>
 8012b94:	2b30      	cmp	r3, #48	; 0x30
 8012b96:	d1e7      	bne.n	8012b68 <_scanf_float+0x70>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012b9e:	d064      	beq.n	8012c6a <_scanf_float+0x172>
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012ba6:	6020      	str	r0, [r4, #0]
 8012ba8:	f109 0901 	add.w	r9, r9, #1
 8012bac:	b11b      	cbz	r3, 8012bb6 <_scanf_float+0xbe>
 8012bae:	3b01      	subs	r3, #1
 8012bb0:	3101      	adds	r1, #1
 8012bb2:	9301      	str	r3, [sp, #4]
 8012bb4:	60a1      	str	r1, [r4, #8]
 8012bb6:	68a3      	ldr	r3, [r4, #8]
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	60a3      	str	r3, [r4, #8]
 8012bbc:	6923      	ldr	r3, [r4, #16]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	6123      	str	r3, [r4, #16]
 8012bc2:	6873      	ldr	r3, [r6, #4]
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	6073      	str	r3, [r6, #4]
 8012bca:	f340 80ac 	ble.w	8012d26 <_scanf_float+0x22e>
 8012bce:	6833      	ldr	r3, [r6, #0]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	6033      	str	r3, [r6, #0]
 8012bd4:	e7b5      	b.n	8012b42 <_scanf_float+0x4a>
 8012bd6:	2b45      	cmp	r3, #69	; 0x45
 8012bd8:	f000 8085 	beq.w	8012ce6 <_scanf_float+0x1ee>
 8012bdc:	2b46      	cmp	r3, #70	; 0x46
 8012bde:	d06a      	beq.n	8012cb6 <_scanf_float+0x1be>
 8012be0:	2b41      	cmp	r3, #65	; 0x41
 8012be2:	d1c1      	bne.n	8012b68 <_scanf_float+0x70>
 8012be4:	2a01      	cmp	r2, #1
 8012be6:	d1bf      	bne.n	8012b68 <_scanf_float+0x70>
 8012be8:	2202      	movs	r2, #2
 8012bea:	e046      	b.n	8012c7a <_scanf_float+0x182>
 8012bec:	2b65      	cmp	r3, #101	; 0x65
 8012bee:	d07a      	beq.n	8012ce6 <_scanf_float+0x1ee>
 8012bf0:	d818      	bhi.n	8012c24 <_scanf_float+0x12c>
 8012bf2:	2b54      	cmp	r3, #84	; 0x54
 8012bf4:	d066      	beq.n	8012cc4 <_scanf_float+0x1cc>
 8012bf6:	d811      	bhi.n	8012c1c <_scanf_float+0x124>
 8012bf8:	2b4e      	cmp	r3, #78	; 0x4e
 8012bfa:	d1b5      	bne.n	8012b68 <_scanf_float+0x70>
 8012bfc:	2a00      	cmp	r2, #0
 8012bfe:	d146      	bne.n	8012c8e <_scanf_float+0x196>
 8012c00:	f1b9 0f00 	cmp.w	r9, #0
 8012c04:	d145      	bne.n	8012c92 <_scanf_float+0x19a>
 8012c06:	6821      	ldr	r1, [r4, #0]
 8012c08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c10:	d13f      	bne.n	8012c92 <_scanf_float+0x19a>
 8012c12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c16:	6021      	str	r1, [r4, #0]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	e02e      	b.n	8012c7a <_scanf_float+0x182>
 8012c1c:	2b59      	cmp	r3, #89	; 0x59
 8012c1e:	d01e      	beq.n	8012c5e <_scanf_float+0x166>
 8012c20:	2b61      	cmp	r3, #97	; 0x61
 8012c22:	e7de      	b.n	8012be2 <_scanf_float+0xea>
 8012c24:	2b6e      	cmp	r3, #110	; 0x6e
 8012c26:	d0e9      	beq.n	8012bfc <_scanf_float+0x104>
 8012c28:	d815      	bhi.n	8012c56 <_scanf_float+0x15e>
 8012c2a:	2b66      	cmp	r3, #102	; 0x66
 8012c2c:	d043      	beq.n	8012cb6 <_scanf_float+0x1be>
 8012c2e:	2b69      	cmp	r3, #105	; 0x69
 8012c30:	d19a      	bne.n	8012b68 <_scanf_float+0x70>
 8012c32:	f1bb 0f00 	cmp.w	fp, #0
 8012c36:	d138      	bne.n	8012caa <_scanf_float+0x1b2>
 8012c38:	f1b9 0f00 	cmp.w	r9, #0
 8012c3c:	d197      	bne.n	8012b6e <_scanf_float+0x76>
 8012c3e:	6821      	ldr	r1, [r4, #0]
 8012c40:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c48:	d195      	bne.n	8012b76 <_scanf_float+0x7e>
 8012c4a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c4e:	6021      	str	r1, [r4, #0]
 8012c50:	f04f 0b01 	mov.w	fp, #1
 8012c54:	e011      	b.n	8012c7a <_scanf_float+0x182>
 8012c56:	2b74      	cmp	r3, #116	; 0x74
 8012c58:	d034      	beq.n	8012cc4 <_scanf_float+0x1cc>
 8012c5a:	2b79      	cmp	r3, #121	; 0x79
 8012c5c:	d184      	bne.n	8012b68 <_scanf_float+0x70>
 8012c5e:	f1bb 0f07 	cmp.w	fp, #7
 8012c62:	d181      	bne.n	8012b68 <_scanf_float+0x70>
 8012c64:	f04f 0b08 	mov.w	fp, #8
 8012c68:	e007      	b.n	8012c7a <_scanf_float+0x182>
 8012c6a:	eb12 0f0b 	cmn.w	r2, fp
 8012c6e:	f47f af7b 	bne.w	8012b68 <_scanf_float+0x70>
 8012c72:	6821      	ldr	r1, [r4, #0]
 8012c74:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012c78:	6021      	str	r1, [r4, #0]
 8012c7a:	702b      	strb	r3, [r5, #0]
 8012c7c:	3501      	adds	r5, #1
 8012c7e:	e79a      	b.n	8012bb6 <_scanf_float+0xbe>
 8012c80:	6821      	ldr	r1, [r4, #0]
 8012c82:	0608      	lsls	r0, r1, #24
 8012c84:	f57f af70 	bpl.w	8012b68 <_scanf_float+0x70>
 8012c88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c8c:	e7f4      	b.n	8012c78 <_scanf_float+0x180>
 8012c8e:	2a02      	cmp	r2, #2
 8012c90:	d047      	beq.n	8012d22 <_scanf_float+0x22a>
 8012c92:	f1bb 0f01 	cmp.w	fp, #1
 8012c96:	d003      	beq.n	8012ca0 <_scanf_float+0x1a8>
 8012c98:	f1bb 0f04 	cmp.w	fp, #4
 8012c9c:	f47f af64 	bne.w	8012b68 <_scanf_float+0x70>
 8012ca0:	f10b 0b01 	add.w	fp, fp, #1
 8012ca4:	fa5f fb8b 	uxtb.w	fp, fp
 8012ca8:	e7e7      	b.n	8012c7a <_scanf_float+0x182>
 8012caa:	f1bb 0f03 	cmp.w	fp, #3
 8012cae:	d0f7      	beq.n	8012ca0 <_scanf_float+0x1a8>
 8012cb0:	f1bb 0f05 	cmp.w	fp, #5
 8012cb4:	e7f2      	b.n	8012c9c <_scanf_float+0x1a4>
 8012cb6:	f1bb 0f02 	cmp.w	fp, #2
 8012cba:	f47f af55 	bne.w	8012b68 <_scanf_float+0x70>
 8012cbe:	f04f 0b03 	mov.w	fp, #3
 8012cc2:	e7da      	b.n	8012c7a <_scanf_float+0x182>
 8012cc4:	f1bb 0f06 	cmp.w	fp, #6
 8012cc8:	f47f af4e 	bne.w	8012b68 <_scanf_float+0x70>
 8012ccc:	f04f 0b07 	mov.w	fp, #7
 8012cd0:	e7d3      	b.n	8012c7a <_scanf_float+0x182>
 8012cd2:	6821      	ldr	r1, [r4, #0]
 8012cd4:	0588      	lsls	r0, r1, #22
 8012cd6:	f57f af47 	bpl.w	8012b68 <_scanf_float+0x70>
 8012cda:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012cde:	6021      	str	r1, [r4, #0]
 8012ce0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ce4:	e7c9      	b.n	8012c7a <_scanf_float+0x182>
 8012ce6:	6821      	ldr	r1, [r4, #0]
 8012ce8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012cec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012cf0:	d006      	beq.n	8012d00 <_scanf_float+0x208>
 8012cf2:	0548      	lsls	r0, r1, #21
 8012cf4:	f57f af38 	bpl.w	8012b68 <_scanf_float+0x70>
 8012cf8:	f1b9 0f00 	cmp.w	r9, #0
 8012cfc:	f43f af3b 	beq.w	8012b76 <_scanf_float+0x7e>
 8012d00:	0588      	lsls	r0, r1, #22
 8012d02:	bf58      	it	pl
 8012d04:	9802      	ldrpl	r0, [sp, #8]
 8012d06:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d0a:	bf58      	it	pl
 8012d0c:	eba9 0000 	subpl.w	r0, r9, r0
 8012d10:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012d14:	bf58      	it	pl
 8012d16:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012d1a:	6021      	str	r1, [r4, #0]
 8012d1c:	f04f 0900 	mov.w	r9, #0
 8012d20:	e7ab      	b.n	8012c7a <_scanf_float+0x182>
 8012d22:	2203      	movs	r2, #3
 8012d24:	e7a9      	b.n	8012c7a <_scanf_float+0x182>
 8012d26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012d2a:	9205      	str	r2, [sp, #20]
 8012d2c:	4631      	mov	r1, r6
 8012d2e:	4638      	mov	r0, r7
 8012d30:	4798      	blx	r3
 8012d32:	9a05      	ldr	r2, [sp, #20]
 8012d34:	2800      	cmp	r0, #0
 8012d36:	f43f af04 	beq.w	8012b42 <_scanf_float+0x4a>
 8012d3a:	e715      	b.n	8012b68 <_scanf_float+0x70>
 8012d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012d44:	4632      	mov	r2, r6
 8012d46:	4638      	mov	r0, r7
 8012d48:	4798      	blx	r3
 8012d4a:	6923      	ldr	r3, [r4, #16]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	6123      	str	r3, [r4, #16]
 8012d50:	e715      	b.n	8012b7e <_scanf_float+0x86>
 8012d52:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012d56:	2b06      	cmp	r3, #6
 8012d58:	d80a      	bhi.n	8012d70 <_scanf_float+0x278>
 8012d5a:	f1bb 0f02 	cmp.w	fp, #2
 8012d5e:	d968      	bls.n	8012e32 <_scanf_float+0x33a>
 8012d60:	f1ab 0b03 	sub.w	fp, fp, #3
 8012d64:	fa5f fb8b 	uxtb.w	fp, fp
 8012d68:	eba5 0b0b 	sub.w	fp, r5, fp
 8012d6c:	455d      	cmp	r5, fp
 8012d6e:	d14b      	bne.n	8012e08 <_scanf_float+0x310>
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	05da      	lsls	r2, r3, #23
 8012d74:	d51f      	bpl.n	8012db6 <_scanf_float+0x2be>
 8012d76:	055b      	lsls	r3, r3, #21
 8012d78:	d468      	bmi.n	8012e4c <_scanf_float+0x354>
 8012d7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012d7e:	6923      	ldr	r3, [r4, #16]
 8012d80:	2965      	cmp	r1, #101	; 0x65
 8012d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d86:	f105 3bff 	add.w	fp, r5, #4294967295
 8012d8a:	6123      	str	r3, [r4, #16]
 8012d8c:	d00d      	beq.n	8012daa <_scanf_float+0x2b2>
 8012d8e:	2945      	cmp	r1, #69	; 0x45
 8012d90:	d00b      	beq.n	8012daa <_scanf_float+0x2b2>
 8012d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d96:	4632      	mov	r2, r6
 8012d98:	4638      	mov	r0, r7
 8012d9a:	4798      	blx	r3
 8012d9c:	6923      	ldr	r3, [r4, #16]
 8012d9e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012da2:	3b01      	subs	r3, #1
 8012da4:	f1a5 0b02 	sub.w	fp, r5, #2
 8012da8:	6123      	str	r3, [r4, #16]
 8012daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dae:	4632      	mov	r2, r6
 8012db0:	4638      	mov	r0, r7
 8012db2:	4798      	blx	r3
 8012db4:	465d      	mov	r5, fp
 8012db6:	6826      	ldr	r6, [r4, #0]
 8012db8:	f016 0610 	ands.w	r6, r6, #16
 8012dbc:	d17a      	bne.n	8012eb4 <_scanf_float+0x3bc>
 8012dbe:	702e      	strb	r6, [r5, #0]
 8012dc0:	6823      	ldr	r3, [r4, #0]
 8012dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012dca:	d142      	bne.n	8012e52 <_scanf_float+0x35a>
 8012dcc:	9b02      	ldr	r3, [sp, #8]
 8012dce:	eba9 0303 	sub.w	r3, r9, r3
 8012dd2:	425a      	negs	r2, r3
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d149      	bne.n	8012e6c <_scanf_float+0x374>
 8012dd8:	2200      	movs	r2, #0
 8012dda:	4641      	mov	r1, r8
 8012ddc:	4638      	mov	r0, r7
 8012dde:	f000 ffdf 	bl	8013da0 <_strtod_r>
 8012de2:	6825      	ldr	r5, [r4, #0]
 8012de4:	f8da 3000 	ldr.w	r3, [sl]
 8012de8:	f015 0f02 	tst.w	r5, #2
 8012dec:	f103 0204 	add.w	r2, r3, #4
 8012df0:	ec59 8b10 	vmov	r8, r9, d0
 8012df4:	f8ca 2000 	str.w	r2, [sl]
 8012df8:	d043      	beq.n	8012e82 <_scanf_float+0x38a>
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	e9c3 8900 	strd	r8, r9, [r3]
 8012e00:	68e3      	ldr	r3, [r4, #12]
 8012e02:	3301      	adds	r3, #1
 8012e04:	60e3      	str	r3, [r4, #12]
 8012e06:	e6be      	b.n	8012b86 <_scanf_float+0x8e>
 8012e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e10:	4632      	mov	r2, r6
 8012e12:	4638      	mov	r0, r7
 8012e14:	4798      	blx	r3
 8012e16:	6923      	ldr	r3, [r4, #16]
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	6123      	str	r3, [r4, #16]
 8012e1c:	e7a6      	b.n	8012d6c <_scanf_float+0x274>
 8012e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e22:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e26:	4632      	mov	r2, r6
 8012e28:	4638      	mov	r0, r7
 8012e2a:	4798      	blx	r3
 8012e2c:	6923      	ldr	r3, [r4, #16]
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	6123      	str	r3, [r4, #16]
 8012e32:	4545      	cmp	r5, r8
 8012e34:	d8f3      	bhi.n	8012e1e <_scanf_float+0x326>
 8012e36:	e6a5      	b.n	8012b84 <_scanf_float+0x8c>
 8012e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e40:	4632      	mov	r2, r6
 8012e42:	4638      	mov	r0, r7
 8012e44:	4798      	blx	r3
 8012e46:	6923      	ldr	r3, [r4, #16]
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	6123      	str	r3, [r4, #16]
 8012e4c:	4545      	cmp	r5, r8
 8012e4e:	d8f3      	bhi.n	8012e38 <_scanf_float+0x340>
 8012e50:	e698      	b.n	8012b84 <_scanf_float+0x8c>
 8012e52:	9b03      	ldr	r3, [sp, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d0bf      	beq.n	8012dd8 <_scanf_float+0x2e0>
 8012e58:	9904      	ldr	r1, [sp, #16]
 8012e5a:	230a      	movs	r3, #10
 8012e5c:	4632      	mov	r2, r6
 8012e5e:	3101      	adds	r1, #1
 8012e60:	4638      	mov	r0, r7
 8012e62:	f001 f829 	bl	8013eb8 <_strtol_r>
 8012e66:	9b03      	ldr	r3, [sp, #12]
 8012e68:	9d04      	ldr	r5, [sp, #16]
 8012e6a:	1ac2      	subs	r2, r0, r3
 8012e6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012e70:	429d      	cmp	r5, r3
 8012e72:	bf28      	it	cs
 8012e74:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012e78:	490f      	ldr	r1, [pc, #60]	; (8012eb8 <_scanf_float+0x3c0>)
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f000 f8e8 	bl	8013050 <siprintf>
 8012e80:	e7aa      	b.n	8012dd8 <_scanf_float+0x2e0>
 8012e82:	f015 0504 	ands.w	r5, r5, #4
 8012e86:	d1b8      	bne.n	8012dfa <_scanf_float+0x302>
 8012e88:	681f      	ldr	r7, [r3, #0]
 8012e8a:	ee10 2a10 	vmov	r2, s0
 8012e8e:	464b      	mov	r3, r9
 8012e90:	ee10 0a10 	vmov	r0, s0
 8012e94:	4649      	mov	r1, r9
 8012e96:	f7ed fe61 	bl	8000b5c <__aeabi_dcmpun>
 8012e9a:	b128      	cbz	r0, 8012ea8 <_scanf_float+0x3b0>
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	f000 f89d 	bl	8012fdc <nanf>
 8012ea2:	ed87 0a00 	vstr	s0, [r7]
 8012ea6:	e7ab      	b.n	8012e00 <_scanf_float+0x308>
 8012ea8:	4640      	mov	r0, r8
 8012eaa:	4649      	mov	r1, r9
 8012eac:	f7ed feb4 	bl	8000c18 <__aeabi_d2f>
 8012eb0:	6038      	str	r0, [r7, #0]
 8012eb2:	e7a5      	b.n	8012e00 <_scanf_float+0x308>
 8012eb4:	2600      	movs	r6, #0
 8012eb6:	e666      	b.n	8012b86 <_scanf_float+0x8e>
 8012eb8:	080178fe 	.word	0x080178fe

08012ebc <iprintf>:
 8012ebc:	b40f      	push	{r0, r1, r2, r3}
 8012ebe:	4b0a      	ldr	r3, [pc, #40]	; (8012ee8 <iprintf+0x2c>)
 8012ec0:	b513      	push	{r0, r1, r4, lr}
 8012ec2:	681c      	ldr	r4, [r3, #0]
 8012ec4:	b124      	cbz	r4, 8012ed0 <iprintf+0x14>
 8012ec6:	69a3      	ldr	r3, [r4, #24]
 8012ec8:	b913      	cbnz	r3, 8012ed0 <iprintf+0x14>
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f002 f83c 	bl	8014f48 <__sinit>
 8012ed0:	ab05      	add	r3, sp, #20
 8012ed2:	9a04      	ldr	r2, [sp, #16]
 8012ed4:	68a1      	ldr	r1, [r4, #8]
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f003 fc7d 	bl	80167d8 <_vfiprintf_r>
 8012ede:	b002      	add	sp, #8
 8012ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ee4:	b004      	add	sp, #16
 8012ee6:	4770      	bx	lr
 8012ee8:	2000000c 	.word	0x2000000c

08012eec <putchar>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	4b08      	ldr	r3, [pc, #32]	; (8012f10 <putchar+0x24>)
 8012ef0:	681c      	ldr	r4, [r3, #0]
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	b124      	cbz	r4, 8012f00 <putchar+0x14>
 8012ef6:	69a3      	ldr	r3, [r4, #24]
 8012ef8:	b913      	cbnz	r3, 8012f00 <putchar+0x14>
 8012efa:	4620      	mov	r0, r4
 8012efc:	f002 f824 	bl	8014f48 <__sinit>
 8012f00:	68a2      	ldr	r2, [r4, #8]
 8012f02:	4629      	mov	r1, r5
 8012f04:	4620      	mov	r0, r4
 8012f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f0a:	f003 bed3 	b.w	8016cb4 <_putc_r>
 8012f0e:	bf00      	nop
 8012f10:	2000000c 	.word	0x2000000c

08012f14 <_puts_r>:
 8012f14:	b570      	push	{r4, r5, r6, lr}
 8012f16:	460e      	mov	r6, r1
 8012f18:	4605      	mov	r5, r0
 8012f1a:	b118      	cbz	r0, 8012f24 <_puts_r+0x10>
 8012f1c:	6983      	ldr	r3, [r0, #24]
 8012f1e:	b90b      	cbnz	r3, 8012f24 <_puts_r+0x10>
 8012f20:	f002 f812 	bl	8014f48 <__sinit>
 8012f24:	69ab      	ldr	r3, [r5, #24]
 8012f26:	68ac      	ldr	r4, [r5, #8]
 8012f28:	b913      	cbnz	r3, 8012f30 <_puts_r+0x1c>
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f002 f80c 	bl	8014f48 <__sinit>
 8012f30:	4b23      	ldr	r3, [pc, #140]	; (8012fc0 <_puts_r+0xac>)
 8012f32:	429c      	cmp	r4, r3
 8012f34:	d117      	bne.n	8012f66 <_puts_r+0x52>
 8012f36:	686c      	ldr	r4, [r5, #4]
 8012f38:	89a3      	ldrh	r3, [r4, #12]
 8012f3a:	071b      	lsls	r3, r3, #28
 8012f3c:	d51d      	bpl.n	8012f7a <_puts_r+0x66>
 8012f3e:	6923      	ldr	r3, [r4, #16]
 8012f40:	b1db      	cbz	r3, 8012f7a <_puts_r+0x66>
 8012f42:	3e01      	subs	r6, #1
 8012f44:	68a3      	ldr	r3, [r4, #8]
 8012f46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	60a3      	str	r3, [r4, #8]
 8012f4e:	b9e9      	cbnz	r1, 8012f8c <_puts_r+0x78>
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	da2e      	bge.n	8012fb2 <_puts_r+0x9e>
 8012f54:	4622      	mov	r2, r4
 8012f56:	210a      	movs	r1, #10
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f000 ffdf 	bl	8013f1c <__swbuf_r>
 8012f5e:	3001      	adds	r0, #1
 8012f60:	d011      	beq.n	8012f86 <_puts_r+0x72>
 8012f62:	200a      	movs	r0, #10
 8012f64:	e011      	b.n	8012f8a <_puts_r+0x76>
 8012f66:	4b17      	ldr	r3, [pc, #92]	; (8012fc4 <_puts_r+0xb0>)
 8012f68:	429c      	cmp	r4, r3
 8012f6a:	d101      	bne.n	8012f70 <_puts_r+0x5c>
 8012f6c:	68ac      	ldr	r4, [r5, #8]
 8012f6e:	e7e3      	b.n	8012f38 <_puts_r+0x24>
 8012f70:	4b15      	ldr	r3, [pc, #84]	; (8012fc8 <_puts_r+0xb4>)
 8012f72:	429c      	cmp	r4, r3
 8012f74:	bf08      	it	eq
 8012f76:	68ec      	ldreq	r4, [r5, #12]
 8012f78:	e7de      	b.n	8012f38 <_puts_r+0x24>
 8012f7a:	4621      	mov	r1, r4
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f001 f831 	bl	8013fe4 <__swsetup_r>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d0dd      	beq.n	8012f42 <_puts_r+0x2e>
 8012f86:	f04f 30ff 	mov.w	r0, #4294967295
 8012f8a:	bd70      	pop	{r4, r5, r6, pc}
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	da04      	bge.n	8012f9a <_puts_r+0x86>
 8012f90:	69a2      	ldr	r2, [r4, #24]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	dc06      	bgt.n	8012fa4 <_puts_r+0x90>
 8012f96:	290a      	cmp	r1, #10
 8012f98:	d004      	beq.n	8012fa4 <_puts_r+0x90>
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	1c5a      	adds	r2, r3, #1
 8012f9e:	6022      	str	r2, [r4, #0]
 8012fa0:	7019      	strb	r1, [r3, #0]
 8012fa2:	e7cf      	b.n	8012f44 <_puts_r+0x30>
 8012fa4:	4622      	mov	r2, r4
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f000 ffb8 	bl	8013f1c <__swbuf_r>
 8012fac:	3001      	adds	r0, #1
 8012fae:	d1c9      	bne.n	8012f44 <_puts_r+0x30>
 8012fb0:	e7e9      	b.n	8012f86 <_puts_r+0x72>
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	200a      	movs	r0, #10
 8012fb6:	1c5a      	adds	r2, r3, #1
 8012fb8:	6022      	str	r2, [r4, #0]
 8012fba:	7018      	strb	r0, [r3, #0]
 8012fbc:	e7e5      	b.n	8012f8a <_puts_r+0x76>
 8012fbe:	bf00      	nop
 8012fc0:	08017988 	.word	0x08017988
 8012fc4:	080179a8 	.word	0x080179a8
 8012fc8:	08017968 	.word	0x08017968

08012fcc <puts>:
 8012fcc:	4b02      	ldr	r3, [pc, #8]	; (8012fd8 <puts+0xc>)
 8012fce:	4601      	mov	r1, r0
 8012fd0:	6818      	ldr	r0, [r3, #0]
 8012fd2:	f7ff bf9f 	b.w	8012f14 <_puts_r>
 8012fd6:	bf00      	nop
 8012fd8:	2000000c 	.word	0x2000000c

08012fdc <nanf>:
 8012fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012fe4 <nanf+0x8>
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	7fc00000 	.word	0x7fc00000

08012fe8 <sniprintf>:
 8012fe8:	b40c      	push	{r2, r3}
 8012fea:	b530      	push	{r4, r5, lr}
 8012fec:	4b17      	ldr	r3, [pc, #92]	; (801304c <sniprintf+0x64>)
 8012fee:	1e0c      	subs	r4, r1, #0
 8012ff0:	b09d      	sub	sp, #116	; 0x74
 8012ff2:	681d      	ldr	r5, [r3, #0]
 8012ff4:	da08      	bge.n	8013008 <sniprintf+0x20>
 8012ff6:	238b      	movs	r3, #139	; 0x8b
 8012ff8:	602b      	str	r3, [r5, #0]
 8012ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8012ffe:	b01d      	add	sp, #116	; 0x74
 8013000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013004:	b002      	add	sp, #8
 8013006:	4770      	bx	lr
 8013008:	f44f 7302 	mov.w	r3, #520	; 0x208
 801300c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013010:	bf14      	ite	ne
 8013012:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013016:	4623      	moveq	r3, r4
 8013018:	9304      	str	r3, [sp, #16]
 801301a:	9307      	str	r3, [sp, #28]
 801301c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013020:	9002      	str	r0, [sp, #8]
 8013022:	9006      	str	r0, [sp, #24]
 8013024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801302a:	ab21      	add	r3, sp, #132	; 0x84
 801302c:	a902      	add	r1, sp, #8
 801302e:	4628      	mov	r0, r5
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	f003 f905 	bl	8016240 <_svfiprintf_r>
 8013036:	1c43      	adds	r3, r0, #1
 8013038:	bfbc      	itt	lt
 801303a:	238b      	movlt	r3, #139	; 0x8b
 801303c:	602b      	strlt	r3, [r5, #0]
 801303e:	2c00      	cmp	r4, #0
 8013040:	d0dd      	beq.n	8012ffe <sniprintf+0x16>
 8013042:	9b02      	ldr	r3, [sp, #8]
 8013044:	2200      	movs	r2, #0
 8013046:	701a      	strb	r2, [r3, #0]
 8013048:	e7d9      	b.n	8012ffe <sniprintf+0x16>
 801304a:	bf00      	nop
 801304c:	2000000c 	.word	0x2000000c

08013050 <siprintf>:
 8013050:	b40e      	push	{r1, r2, r3}
 8013052:	b500      	push	{lr}
 8013054:	b09c      	sub	sp, #112	; 0x70
 8013056:	ab1d      	add	r3, sp, #116	; 0x74
 8013058:	9002      	str	r0, [sp, #8]
 801305a:	9006      	str	r0, [sp, #24]
 801305c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013060:	4809      	ldr	r0, [pc, #36]	; (8013088 <siprintf+0x38>)
 8013062:	9107      	str	r1, [sp, #28]
 8013064:	9104      	str	r1, [sp, #16]
 8013066:	4909      	ldr	r1, [pc, #36]	; (801308c <siprintf+0x3c>)
 8013068:	f853 2b04 	ldr.w	r2, [r3], #4
 801306c:	9105      	str	r1, [sp, #20]
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	a902      	add	r1, sp, #8
 8013074:	f003 f8e4 	bl	8016240 <_svfiprintf_r>
 8013078:	9b02      	ldr	r3, [sp, #8]
 801307a:	2200      	movs	r2, #0
 801307c:	701a      	strb	r2, [r3, #0]
 801307e:	b01c      	add	sp, #112	; 0x70
 8013080:	f85d eb04 	ldr.w	lr, [sp], #4
 8013084:	b003      	add	sp, #12
 8013086:	4770      	bx	lr
 8013088:	2000000c 	.word	0x2000000c
 801308c:	ffff0208 	.word	0xffff0208

08013090 <siscanf>:
 8013090:	b40e      	push	{r1, r2, r3}
 8013092:	b530      	push	{r4, r5, lr}
 8013094:	b09c      	sub	sp, #112	; 0x70
 8013096:	ac1f      	add	r4, sp, #124	; 0x7c
 8013098:	f44f 7201 	mov.w	r2, #516	; 0x204
 801309c:	f854 5b04 	ldr.w	r5, [r4], #4
 80130a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80130a4:	9002      	str	r0, [sp, #8]
 80130a6:	9006      	str	r0, [sp, #24]
 80130a8:	f7ed f8aa 	bl	8000200 <strlen>
 80130ac:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <siscanf+0x4c>)
 80130ae:	9003      	str	r0, [sp, #12]
 80130b0:	9007      	str	r0, [sp, #28]
 80130b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80130b4:	480a      	ldr	r0, [pc, #40]	; (80130e0 <siscanf+0x50>)
 80130b6:	9401      	str	r4, [sp, #4]
 80130b8:	2300      	movs	r3, #0
 80130ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80130bc:	9314      	str	r3, [sp, #80]	; 0x50
 80130be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80130c6:	462a      	mov	r2, r5
 80130c8:	4623      	mov	r3, r4
 80130ca:	a902      	add	r1, sp, #8
 80130cc:	6800      	ldr	r0, [r0, #0]
 80130ce:	f003 fa09 	bl	80164e4 <__ssvfiscanf_r>
 80130d2:	b01c      	add	sp, #112	; 0x70
 80130d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130d8:	b003      	add	sp, #12
 80130da:	4770      	bx	lr
 80130dc:	08013107 	.word	0x08013107
 80130e0:	2000000c 	.word	0x2000000c

080130e4 <__sread>:
 80130e4:	b510      	push	{r4, lr}
 80130e6:	460c      	mov	r4, r1
 80130e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ec:	f003 fe18 	bl	8016d20 <_read_r>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	bfab      	itete	ge
 80130f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130f6:	89a3      	ldrhlt	r3, [r4, #12]
 80130f8:	181b      	addge	r3, r3, r0
 80130fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130fe:	bfac      	ite	ge
 8013100:	6563      	strge	r3, [r4, #84]	; 0x54
 8013102:	81a3      	strhlt	r3, [r4, #12]
 8013104:	bd10      	pop	{r4, pc}

08013106 <__seofread>:
 8013106:	2000      	movs	r0, #0
 8013108:	4770      	bx	lr

0801310a <__swrite>:
 801310a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801310e:	461f      	mov	r7, r3
 8013110:	898b      	ldrh	r3, [r1, #12]
 8013112:	05db      	lsls	r3, r3, #23
 8013114:	4605      	mov	r5, r0
 8013116:	460c      	mov	r4, r1
 8013118:	4616      	mov	r6, r2
 801311a:	d505      	bpl.n	8013128 <__swrite+0x1e>
 801311c:	2302      	movs	r3, #2
 801311e:	2200      	movs	r2, #0
 8013120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013124:	f002 fae2 	bl	80156ec <_lseek_r>
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801312e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013132:	81a3      	strh	r3, [r4, #12]
 8013134:	4632      	mov	r2, r6
 8013136:	463b      	mov	r3, r7
 8013138:	4628      	mov	r0, r5
 801313a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801313e:	f000 bf3f 	b.w	8013fc0 <_write_r>

08013142 <__sseek>:
 8013142:	b510      	push	{r4, lr}
 8013144:	460c      	mov	r4, r1
 8013146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801314a:	f002 facf 	bl	80156ec <_lseek_r>
 801314e:	1c43      	adds	r3, r0, #1
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	bf15      	itete	ne
 8013154:	6560      	strne	r0, [r4, #84]	; 0x54
 8013156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801315a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801315e:	81a3      	strheq	r3, [r4, #12]
 8013160:	bf18      	it	ne
 8013162:	81a3      	strhne	r3, [r4, #12]
 8013164:	bd10      	pop	{r4, pc}

08013166 <__sclose>:
 8013166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801316a:	f000 bfa9 	b.w	80140c0 <_close_r>

0801316e <strcpy>:
 801316e:	4603      	mov	r3, r0
 8013170:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013174:	f803 2b01 	strb.w	r2, [r3], #1
 8013178:	2a00      	cmp	r2, #0
 801317a:	d1f9      	bne.n	8013170 <strcpy+0x2>
 801317c:	4770      	bx	lr

0801317e <sulp>:
 801317e:	b570      	push	{r4, r5, r6, lr}
 8013180:	4604      	mov	r4, r0
 8013182:	460d      	mov	r5, r1
 8013184:	ec45 4b10 	vmov	d0, r4, r5
 8013188:	4616      	mov	r6, r2
 801318a:	f002 fe15 	bl	8015db8 <__ulp>
 801318e:	ec51 0b10 	vmov	r0, r1, d0
 8013192:	b17e      	cbz	r6, 80131b4 <sulp+0x36>
 8013194:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013198:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801319c:	2b00      	cmp	r3, #0
 801319e:	dd09      	ble.n	80131b4 <sulp+0x36>
 80131a0:	051b      	lsls	r3, r3, #20
 80131a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80131a6:	2400      	movs	r4, #0
 80131a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80131ac:	4622      	mov	r2, r4
 80131ae:	462b      	mov	r3, r5
 80131b0:	f7ed fa3a 	bl	8000628 <__aeabi_dmul>
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080131b8 <_strtod_l>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	461f      	mov	r7, r3
 80131be:	b0a1      	sub	sp, #132	; 0x84
 80131c0:	2300      	movs	r3, #0
 80131c2:	4681      	mov	r9, r0
 80131c4:	4638      	mov	r0, r7
 80131c6:	460e      	mov	r6, r1
 80131c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80131ca:	931c      	str	r3, [sp, #112]	; 0x70
 80131cc:	f002 fa7e 	bl	80156cc <__localeconv_l>
 80131d0:	4680      	mov	r8, r0
 80131d2:	6800      	ldr	r0, [r0, #0]
 80131d4:	f7ed f814 	bl	8000200 <strlen>
 80131d8:	f04f 0a00 	mov.w	sl, #0
 80131dc:	4604      	mov	r4, r0
 80131de:	f04f 0b00 	mov.w	fp, #0
 80131e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80131e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131e6:	781a      	ldrb	r2, [r3, #0]
 80131e8:	2a0d      	cmp	r2, #13
 80131ea:	d832      	bhi.n	8013252 <_strtod_l+0x9a>
 80131ec:	2a09      	cmp	r2, #9
 80131ee:	d236      	bcs.n	801325e <_strtod_l+0xa6>
 80131f0:	2a00      	cmp	r2, #0
 80131f2:	d03e      	beq.n	8013272 <_strtod_l+0xba>
 80131f4:	2300      	movs	r3, #0
 80131f6:	930d      	str	r3, [sp, #52]	; 0x34
 80131f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80131fa:	782b      	ldrb	r3, [r5, #0]
 80131fc:	2b30      	cmp	r3, #48	; 0x30
 80131fe:	f040 80ac 	bne.w	801335a <_strtod_l+0x1a2>
 8013202:	786b      	ldrb	r3, [r5, #1]
 8013204:	2b58      	cmp	r3, #88	; 0x58
 8013206:	d001      	beq.n	801320c <_strtod_l+0x54>
 8013208:	2b78      	cmp	r3, #120	; 0x78
 801320a:	d167      	bne.n	80132dc <_strtod_l+0x124>
 801320c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801320e:	9301      	str	r3, [sp, #4]
 8013210:	ab1c      	add	r3, sp, #112	; 0x70
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	9702      	str	r7, [sp, #8]
 8013216:	ab1d      	add	r3, sp, #116	; 0x74
 8013218:	4a88      	ldr	r2, [pc, #544]	; (801343c <_strtod_l+0x284>)
 801321a:	a91b      	add	r1, sp, #108	; 0x6c
 801321c:	4648      	mov	r0, r9
 801321e:	f001 ff6c 	bl	80150fa <__gethex>
 8013222:	f010 0407 	ands.w	r4, r0, #7
 8013226:	4606      	mov	r6, r0
 8013228:	d005      	beq.n	8013236 <_strtod_l+0x7e>
 801322a:	2c06      	cmp	r4, #6
 801322c:	d12b      	bne.n	8013286 <_strtod_l+0xce>
 801322e:	3501      	adds	r5, #1
 8013230:	2300      	movs	r3, #0
 8013232:	951b      	str	r5, [sp, #108]	; 0x6c
 8013234:	930d      	str	r3, [sp, #52]	; 0x34
 8013236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013238:	2b00      	cmp	r3, #0
 801323a:	f040 859a 	bne.w	8013d72 <_strtod_l+0xbba>
 801323e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013240:	b1e3      	cbz	r3, 801327c <_strtod_l+0xc4>
 8013242:	4652      	mov	r2, sl
 8013244:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013248:	ec43 2b10 	vmov	d0, r2, r3
 801324c:	b021      	add	sp, #132	; 0x84
 801324e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013252:	2a2b      	cmp	r2, #43	; 0x2b
 8013254:	d015      	beq.n	8013282 <_strtod_l+0xca>
 8013256:	2a2d      	cmp	r2, #45	; 0x2d
 8013258:	d004      	beq.n	8013264 <_strtod_l+0xac>
 801325a:	2a20      	cmp	r2, #32
 801325c:	d1ca      	bne.n	80131f4 <_strtod_l+0x3c>
 801325e:	3301      	adds	r3, #1
 8013260:	931b      	str	r3, [sp, #108]	; 0x6c
 8013262:	e7bf      	b.n	80131e4 <_strtod_l+0x2c>
 8013264:	2201      	movs	r2, #1
 8013266:	920d      	str	r2, [sp, #52]	; 0x34
 8013268:	1c5a      	adds	r2, r3, #1
 801326a:	921b      	str	r2, [sp, #108]	; 0x6c
 801326c:	785b      	ldrb	r3, [r3, #1]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d1c2      	bne.n	80131f8 <_strtod_l+0x40>
 8013272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013274:	961b      	str	r6, [sp, #108]	; 0x6c
 8013276:	2b00      	cmp	r3, #0
 8013278:	f040 8579 	bne.w	8013d6e <_strtod_l+0xbb6>
 801327c:	4652      	mov	r2, sl
 801327e:	465b      	mov	r3, fp
 8013280:	e7e2      	b.n	8013248 <_strtod_l+0x90>
 8013282:	2200      	movs	r2, #0
 8013284:	e7ef      	b.n	8013266 <_strtod_l+0xae>
 8013286:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013288:	b13a      	cbz	r2, 801329a <_strtod_l+0xe2>
 801328a:	2135      	movs	r1, #53	; 0x35
 801328c:	a81e      	add	r0, sp, #120	; 0x78
 801328e:	f002 fe8b 	bl	8015fa8 <__copybits>
 8013292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013294:	4648      	mov	r0, r9
 8013296:	f002 faf8 	bl	801588a <_Bfree>
 801329a:	3c01      	subs	r4, #1
 801329c:	2c04      	cmp	r4, #4
 801329e:	d806      	bhi.n	80132ae <_strtod_l+0xf6>
 80132a0:	e8df f004 	tbb	[pc, r4]
 80132a4:	1714030a 	.word	0x1714030a
 80132a8:	0a          	.byte	0x0a
 80132a9:	00          	.byte	0x00
 80132aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80132ae:	0730      	lsls	r0, r6, #28
 80132b0:	d5c1      	bpl.n	8013236 <_strtod_l+0x7e>
 80132b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80132b6:	e7be      	b.n	8013236 <_strtod_l+0x7e>
 80132b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80132bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80132be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80132c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80132c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80132ca:	e7f0      	b.n	80132ae <_strtod_l+0xf6>
 80132cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013440 <_strtod_l+0x288>
 80132d0:	e7ed      	b.n	80132ae <_strtod_l+0xf6>
 80132d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80132d6:	f04f 3aff 	mov.w	sl, #4294967295
 80132da:	e7e8      	b.n	80132ae <_strtod_l+0xf6>
 80132dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80132e2:	785b      	ldrb	r3, [r3, #1]
 80132e4:	2b30      	cmp	r3, #48	; 0x30
 80132e6:	d0f9      	beq.n	80132dc <_strtod_l+0x124>
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d0a4      	beq.n	8013236 <_strtod_l+0x7e>
 80132ec:	2301      	movs	r3, #1
 80132ee:	2500      	movs	r5, #0
 80132f0:	9306      	str	r3, [sp, #24]
 80132f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132f4:	9308      	str	r3, [sp, #32]
 80132f6:	9507      	str	r5, [sp, #28]
 80132f8:	9505      	str	r5, [sp, #20]
 80132fa:	220a      	movs	r2, #10
 80132fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80132fe:	7807      	ldrb	r7, [r0, #0]
 8013300:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013304:	b2d9      	uxtb	r1, r3
 8013306:	2909      	cmp	r1, #9
 8013308:	d929      	bls.n	801335e <_strtod_l+0x1a6>
 801330a:	4622      	mov	r2, r4
 801330c:	f8d8 1000 	ldr.w	r1, [r8]
 8013310:	f003 fd5a 	bl	8016dc8 <strncmp>
 8013314:	2800      	cmp	r0, #0
 8013316:	d031      	beq.n	801337c <_strtod_l+0x1c4>
 8013318:	2000      	movs	r0, #0
 801331a:	9c05      	ldr	r4, [sp, #20]
 801331c:	9004      	str	r0, [sp, #16]
 801331e:	463b      	mov	r3, r7
 8013320:	4602      	mov	r2, r0
 8013322:	2b65      	cmp	r3, #101	; 0x65
 8013324:	d001      	beq.n	801332a <_strtod_l+0x172>
 8013326:	2b45      	cmp	r3, #69	; 0x45
 8013328:	d114      	bne.n	8013354 <_strtod_l+0x19c>
 801332a:	b924      	cbnz	r4, 8013336 <_strtod_l+0x17e>
 801332c:	b910      	cbnz	r0, 8013334 <_strtod_l+0x17c>
 801332e:	9b06      	ldr	r3, [sp, #24]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d09e      	beq.n	8013272 <_strtod_l+0xba>
 8013334:	2400      	movs	r4, #0
 8013336:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013338:	1c73      	adds	r3, r6, #1
 801333a:	931b      	str	r3, [sp, #108]	; 0x6c
 801333c:	7873      	ldrb	r3, [r6, #1]
 801333e:	2b2b      	cmp	r3, #43	; 0x2b
 8013340:	d078      	beq.n	8013434 <_strtod_l+0x27c>
 8013342:	2b2d      	cmp	r3, #45	; 0x2d
 8013344:	d070      	beq.n	8013428 <_strtod_l+0x270>
 8013346:	f04f 0c00 	mov.w	ip, #0
 801334a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801334e:	2f09      	cmp	r7, #9
 8013350:	d97c      	bls.n	801344c <_strtod_l+0x294>
 8013352:	961b      	str	r6, [sp, #108]	; 0x6c
 8013354:	f04f 0e00 	mov.w	lr, #0
 8013358:	e09a      	b.n	8013490 <_strtod_l+0x2d8>
 801335a:	2300      	movs	r3, #0
 801335c:	e7c7      	b.n	80132ee <_strtod_l+0x136>
 801335e:	9905      	ldr	r1, [sp, #20]
 8013360:	2908      	cmp	r1, #8
 8013362:	bfdd      	ittte	le
 8013364:	9907      	ldrle	r1, [sp, #28]
 8013366:	fb02 3301 	mlale	r3, r2, r1, r3
 801336a:	9307      	strle	r3, [sp, #28]
 801336c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013370:	9b05      	ldr	r3, [sp, #20]
 8013372:	3001      	adds	r0, #1
 8013374:	3301      	adds	r3, #1
 8013376:	9305      	str	r3, [sp, #20]
 8013378:	901b      	str	r0, [sp, #108]	; 0x6c
 801337a:	e7bf      	b.n	80132fc <_strtod_l+0x144>
 801337c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801337e:	191a      	adds	r2, r3, r4
 8013380:	921b      	str	r2, [sp, #108]	; 0x6c
 8013382:	9a05      	ldr	r2, [sp, #20]
 8013384:	5d1b      	ldrb	r3, [r3, r4]
 8013386:	2a00      	cmp	r2, #0
 8013388:	d037      	beq.n	80133fa <_strtod_l+0x242>
 801338a:	9c05      	ldr	r4, [sp, #20]
 801338c:	4602      	mov	r2, r0
 801338e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013392:	2909      	cmp	r1, #9
 8013394:	d913      	bls.n	80133be <_strtod_l+0x206>
 8013396:	2101      	movs	r1, #1
 8013398:	9104      	str	r1, [sp, #16]
 801339a:	e7c2      	b.n	8013322 <_strtod_l+0x16a>
 801339c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801339e:	1c5a      	adds	r2, r3, #1
 80133a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80133a2:	785b      	ldrb	r3, [r3, #1]
 80133a4:	3001      	adds	r0, #1
 80133a6:	2b30      	cmp	r3, #48	; 0x30
 80133a8:	d0f8      	beq.n	801339c <_strtod_l+0x1e4>
 80133aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80133ae:	2a08      	cmp	r2, #8
 80133b0:	f200 84e4 	bhi.w	8013d7c <_strtod_l+0xbc4>
 80133b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80133b6:	9208      	str	r2, [sp, #32]
 80133b8:	4602      	mov	r2, r0
 80133ba:	2000      	movs	r0, #0
 80133bc:	4604      	mov	r4, r0
 80133be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80133c2:	f100 0101 	add.w	r1, r0, #1
 80133c6:	d012      	beq.n	80133ee <_strtod_l+0x236>
 80133c8:	440a      	add	r2, r1
 80133ca:	eb00 0c04 	add.w	ip, r0, r4
 80133ce:	4621      	mov	r1, r4
 80133d0:	270a      	movs	r7, #10
 80133d2:	458c      	cmp	ip, r1
 80133d4:	d113      	bne.n	80133fe <_strtod_l+0x246>
 80133d6:	1821      	adds	r1, r4, r0
 80133d8:	2908      	cmp	r1, #8
 80133da:	f104 0401 	add.w	r4, r4, #1
 80133de:	4404      	add	r4, r0
 80133e0:	dc19      	bgt.n	8013416 <_strtod_l+0x25e>
 80133e2:	9b07      	ldr	r3, [sp, #28]
 80133e4:	210a      	movs	r1, #10
 80133e6:	fb01 e303 	mla	r3, r1, r3, lr
 80133ea:	9307      	str	r3, [sp, #28]
 80133ec:	2100      	movs	r1, #0
 80133ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133f0:	1c58      	adds	r0, r3, #1
 80133f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80133f4:	785b      	ldrb	r3, [r3, #1]
 80133f6:	4608      	mov	r0, r1
 80133f8:	e7c9      	b.n	801338e <_strtod_l+0x1d6>
 80133fa:	9805      	ldr	r0, [sp, #20]
 80133fc:	e7d3      	b.n	80133a6 <_strtod_l+0x1ee>
 80133fe:	2908      	cmp	r1, #8
 8013400:	f101 0101 	add.w	r1, r1, #1
 8013404:	dc03      	bgt.n	801340e <_strtod_l+0x256>
 8013406:	9b07      	ldr	r3, [sp, #28]
 8013408:	437b      	muls	r3, r7
 801340a:	9307      	str	r3, [sp, #28]
 801340c:	e7e1      	b.n	80133d2 <_strtod_l+0x21a>
 801340e:	2910      	cmp	r1, #16
 8013410:	bfd8      	it	le
 8013412:	437d      	mulle	r5, r7
 8013414:	e7dd      	b.n	80133d2 <_strtod_l+0x21a>
 8013416:	2c10      	cmp	r4, #16
 8013418:	bfdc      	itt	le
 801341a:	210a      	movle	r1, #10
 801341c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013420:	e7e4      	b.n	80133ec <_strtod_l+0x234>
 8013422:	2301      	movs	r3, #1
 8013424:	9304      	str	r3, [sp, #16]
 8013426:	e781      	b.n	801332c <_strtod_l+0x174>
 8013428:	f04f 0c01 	mov.w	ip, #1
 801342c:	1cb3      	adds	r3, r6, #2
 801342e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013430:	78b3      	ldrb	r3, [r6, #2]
 8013432:	e78a      	b.n	801334a <_strtod_l+0x192>
 8013434:	f04f 0c00 	mov.w	ip, #0
 8013438:	e7f8      	b.n	801342c <_strtod_l+0x274>
 801343a:	bf00      	nop
 801343c:	08017904 	.word	0x08017904
 8013440:	7ff00000 	.word	0x7ff00000
 8013444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013446:	1c5f      	adds	r7, r3, #1
 8013448:	971b      	str	r7, [sp, #108]	; 0x6c
 801344a:	785b      	ldrb	r3, [r3, #1]
 801344c:	2b30      	cmp	r3, #48	; 0x30
 801344e:	d0f9      	beq.n	8013444 <_strtod_l+0x28c>
 8013450:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013454:	2f08      	cmp	r7, #8
 8013456:	f63f af7d 	bhi.w	8013354 <_strtod_l+0x19c>
 801345a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801345e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013460:	930a      	str	r3, [sp, #40]	; 0x28
 8013462:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013464:	1c5f      	adds	r7, r3, #1
 8013466:	971b      	str	r7, [sp, #108]	; 0x6c
 8013468:	785b      	ldrb	r3, [r3, #1]
 801346a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801346e:	f1b8 0f09 	cmp.w	r8, #9
 8013472:	d937      	bls.n	80134e4 <_strtod_l+0x32c>
 8013474:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013476:	1a7f      	subs	r7, r7, r1
 8013478:	2f08      	cmp	r7, #8
 801347a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801347e:	dc37      	bgt.n	80134f0 <_strtod_l+0x338>
 8013480:	45be      	cmp	lr, r7
 8013482:	bfa8      	it	ge
 8013484:	46be      	movge	lr, r7
 8013486:	f1bc 0f00 	cmp.w	ip, #0
 801348a:	d001      	beq.n	8013490 <_strtod_l+0x2d8>
 801348c:	f1ce 0e00 	rsb	lr, lr, #0
 8013490:	2c00      	cmp	r4, #0
 8013492:	d151      	bne.n	8013538 <_strtod_l+0x380>
 8013494:	2800      	cmp	r0, #0
 8013496:	f47f aece 	bne.w	8013236 <_strtod_l+0x7e>
 801349a:	9a06      	ldr	r2, [sp, #24]
 801349c:	2a00      	cmp	r2, #0
 801349e:	f47f aeca 	bne.w	8013236 <_strtod_l+0x7e>
 80134a2:	9a04      	ldr	r2, [sp, #16]
 80134a4:	2a00      	cmp	r2, #0
 80134a6:	f47f aee4 	bne.w	8013272 <_strtod_l+0xba>
 80134aa:	2b4e      	cmp	r3, #78	; 0x4e
 80134ac:	d027      	beq.n	80134fe <_strtod_l+0x346>
 80134ae:	dc21      	bgt.n	80134f4 <_strtod_l+0x33c>
 80134b0:	2b49      	cmp	r3, #73	; 0x49
 80134b2:	f47f aede 	bne.w	8013272 <_strtod_l+0xba>
 80134b6:	49a0      	ldr	r1, [pc, #640]	; (8013738 <_strtod_l+0x580>)
 80134b8:	a81b      	add	r0, sp, #108	; 0x6c
 80134ba:	f002 f851 	bl	8015560 <__match>
 80134be:	2800      	cmp	r0, #0
 80134c0:	f43f aed7 	beq.w	8013272 <_strtod_l+0xba>
 80134c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134c6:	499d      	ldr	r1, [pc, #628]	; (801373c <_strtod_l+0x584>)
 80134c8:	3b01      	subs	r3, #1
 80134ca:	a81b      	add	r0, sp, #108	; 0x6c
 80134cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80134ce:	f002 f847 	bl	8015560 <__match>
 80134d2:	b910      	cbnz	r0, 80134da <_strtod_l+0x322>
 80134d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134d6:	3301      	adds	r3, #1
 80134d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80134da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013750 <_strtod_l+0x598>
 80134de:	f04f 0a00 	mov.w	sl, #0
 80134e2:	e6a8      	b.n	8013236 <_strtod_l+0x7e>
 80134e4:	210a      	movs	r1, #10
 80134e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80134ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80134ee:	e7b8      	b.n	8013462 <_strtod_l+0x2aa>
 80134f0:	46be      	mov	lr, r7
 80134f2:	e7c8      	b.n	8013486 <_strtod_l+0x2ce>
 80134f4:	2b69      	cmp	r3, #105	; 0x69
 80134f6:	d0de      	beq.n	80134b6 <_strtod_l+0x2fe>
 80134f8:	2b6e      	cmp	r3, #110	; 0x6e
 80134fa:	f47f aeba 	bne.w	8013272 <_strtod_l+0xba>
 80134fe:	4990      	ldr	r1, [pc, #576]	; (8013740 <_strtod_l+0x588>)
 8013500:	a81b      	add	r0, sp, #108	; 0x6c
 8013502:	f002 f82d 	bl	8015560 <__match>
 8013506:	2800      	cmp	r0, #0
 8013508:	f43f aeb3 	beq.w	8013272 <_strtod_l+0xba>
 801350c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	2b28      	cmp	r3, #40	; 0x28
 8013512:	d10e      	bne.n	8013532 <_strtod_l+0x37a>
 8013514:	aa1e      	add	r2, sp, #120	; 0x78
 8013516:	498b      	ldr	r1, [pc, #556]	; (8013744 <_strtod_l+0x58c>)
 8013518:	a81b      	add	r0, sp, #108	; 0x6c
 801351a:	f002 f835 	bl	8015588 <__hexnan>
 801351e:	2805      	cmp	r0, #5
 8013520:	d107      	bne.n	8013532 <_strtod_l+0x37a>
 8013522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013524:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013528:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801352c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013530:	e681      	b.n	8013236 <_strtod_l+0x7e>
 8013532:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013758 <_strtod_l+0x5a0>
 8013536:	e7d2      	b.n	80134de <_strtod_l+0x326>
 8013538:	ebae 0302 	sub.w	r3, lr, r2
 801353c:	9306      	str	r3, [sp, #24]
 801353e:	9b05      	ldr	r3, [sp, #20]
 8013540:	9807      	ldr	r0, [sp, #28]
 8013542:	2b00      	cmp	r3, #0
 8013544:	bf08      	it	eq
 8013546:	4623      	moveq	r3, r4
 8013548:	2c10      	cmp	r4, #16
 801354a:	9305      	str	r3, [sp, #20]
 801354c:	46a0      	mov	r8, r4
 801354e:	bfa8      	it	ge
 8013550:	f04f 0810 	movge.w	r8, #16
 8013554:	f7ec ffee 	bl	8000534 <__aeabi_ui2d>
 8013558:	2c09      	cmp	r4, #9
 801355a:	4682      	mov	sl, r0
 801355c:	468b      	mov	fp, r1
 801355e:	dc13      	bgt.n	8013588 <_strtod_l+0x3d0>
 8013560:	9b06      	ldr	r3, [sp, #24]
 8013562:	2b00      	cmp	r3, #0
 8013564:	f43f ae67 	beq.w	8013236 <_strtod_l+0x7e>
 8013568:	9b06      	ldr	r3, [sp, #24]
 801356a:	dd7a      	ble.n	8013662 <_strtod_l+0x4aa>
 801356c:	2b16      	cmp	r3, #22
 801356e:	dc61      	bgt.n	8013634 <_strtod_l+0x47c>
 8013570:	4a75      	ldr	r2, [pc, #468]	; (8013748 <_strtod_l+0x590>)
 8013572:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013576:	e9de 0100 	ldrd	r0, r1, [lr]
 801357a:	4652      	mov	r2, sl
 801357c:	465b      	mov	r3, fp
 801357e:	f7ed f853 	bl	8000628 <__aeabi_dmul>
 8013582:	4682      	mov	sl, r0
 8013584:	468b      	mov	fp, r1
 8013586:	e656      	b.n	8013236 <_strtod_l+0x7e>
 8013588:	4b6f      	ldr	r3, [pc, #444]	; (8013748 <_strtod_l+0x590>)
 801358a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801358e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013592:	f7ed f849 	bl	8000628 <__aeabi_dmul>
 8013596:	4606      	mov	r6, r0
 8013598:	4628      	mov	r0, r5
 801359a:	460f      	mov	r7, r1
 801359c:	f7ec ffca 	bl	8000534 <__aeabi_ui2d>
 80135a0:	4602      	mov	r2, r0
 80135a2:	460b      	mov	r3, r1
 80135a4:	4630      	mov	r0, r6
 80135a6:	4639      	mov	r1, r7
 80135a8:	f7ec fe88 	bl	80002bc <__adddf3>
 80135ac:	2c0f      	cmp	r4, #15
 80135ae:	4682      	mov	sl, r0
 80135b0:	468b      	mov	fp, r1
 80135b2:	ddd5      	ble.n	8013560 <_strtod_l+0x3a8>
 80135b4:	9b06      	ldr	r3, [sp, #24]
 80135b6:	eba4 0808 	sub.w	r8, r4, r8
 80135ba:	4498      	add	r8, r3
 80135bc:	f1b8 0f00 	cmp.w	r8, #0
 80135c0:	f340 8096 	ble.w	80136f0 <_strtod_l+0x538>
 80135c4:	f018 030f 	ands.w	r3, r8, #15
 80135c8:	d00a      	beq.n	80135e0 <_strtod_l+0x428>
 80135ca:	495f      	ldr	r1, [pc, #380]	; (8013748 <_strtod_l+0x590>)
 80135cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80135d0:	4652      	mov	r2, sl
 80135d2:	465b      	mov	r3, fp
 80135d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135d8:	f7ed f826 	bl	8000628 <__aeabi_dmul>
 80135dc:	4682      	mov	sl, r0
 80135de:	468b      	mov	fp, r1
 80135e0:	f038 080f 	bics.w	r8, r8, #15
 80135e4:	d073      	beq.n	80136ce <_strtod_l+0x516>
 80135e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80135ea:	dd47      	ble.n	801367c <_strtod_l+0x4c4>
 80135ec:	2400      	movs	r4, #0
 80135ee:	46a0      	mov	r8, r4
 80135f0:	9407      	str	r4, [sp, #28]
 80135f2:	9405      	str	r4, [sp, #20]
 80135f4:	2322      	movs	r3, #34	; 0x22
 80135f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013750 <_strtod_l+0x598>
 80135fa:	f8c9 3000 	str.w	r3, [r9]
 80135fe:	f04f 0a00 	mov.w	sl, #0
 8013602:	9b07      	ldr	r3, [sp, #28]
 8013604:	2b00      	cmp	r3, #0
 8013606:	f43f ae16 	beq.w	8013236 <_strtod_l+0x7e>
 801360a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801360c:	4648      	mov	r0, r9
 801360e:	f002 f93c 	bl	801588a <_Bfree>
 8013612:	9905      	ldr	r1, [sp, #20]
 8013614:	4648      	mov	r0, r9
 8013616:	f002 f938 	bl	801588a <_Bfree>
 801361a:	4641      	mov	r1, r8
 801361c:	4648      	mov	r0, r9
 801361e:	f002 f934 	bl	801588a <_Bfree>
 8013622:	9907      	ldr	r1, [sp, #28]
 8013624:	4648      	mov	r0, r9
 8013626:	f002 f930 	bl	801588a <_Bfree>
 801362a:	4621      	mov	r1, r4
 801362c:	4648      	mov	r0, r9
 801362e:	f002 f92c 	bl	801588a <_Bfree>
 8013632:	e600      	b.n	8013236 <_strtod_l+0x7e>
 8013634:	9a06      	ldr	r2, [sp, #24]
 8013636:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801363a:	4293      	cmp	r3, r2
 801363c:	dbba      	blt.n	80135b4 <_strtod_l+0x3fc>
 801363e:	4d42      	ldr	r5, [pc, #264]	; (8013748 <_strtod_l+0x590>)
 8013640:	f1c4 040f 	rsb	r4, r4, #15
 8013644:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013648:	4652      	mov	r2, sl
 801364a:	465b      	mov	r3, fp
 801364c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013650:	f7ec ffea 	bl	8000628 <__aeabi_dmul>
 8013654:	9b06      	ldr	r3, [sp, #24]
 8013656:	1b1c      	subs	r4, r3, r4
 8013658:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801365c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013660:	e78d      	b.n	801357e <_strtod_l+0x3c6>
 8013662:	f113 0f16 	cmn.w	r3, #22
 8013666:	dba5      	blt.n	80135b4 <_strtod_l+0x3fc>
 8013668:	4a37      	ldr	r2, [pc, #220]	; (8013748 <_strtod_l+0x590>)
 801366a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801366e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013672:	4650      	mov	r0, sl
 8013674:	4659      	mov	r1, fp
 8013676:	f7ed f901 	bl	800087c <__aeabi_ddiv>
 801367a:	e782      	b.n	8013582 <_strtod_l+0x3ca>
 801367c:	2300      	movs	r3, #0
 801367e:	4e33      	ldr	r6, [pc, #204]	; (801374c <_strtod_l+0x594>)
 8013680:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013684:	4650      	mov	r0, sl
 8013686:	4659      	mov	r1, fp
 8013688:	461d      	mov	r5, r3
 801368a:	f1b8 0f01 	cmp.w	r8, #1
 801368e:	dc21      	bgt.n	80136d4 <_strtod_l+0x51c>
 8013690:	b10b      	cbz	r3, 8013696 <_strtod_l+0x4de>
 8013692:	4682      	mov	sl, r0
 8013694:	468b      	mov	fp, r1
 8013696:	4b2d      	ldr	r3, [pc, #180]	; (801374c <_strtod_l+0x594>)
 8013698:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801369c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80136a0:	4652      	mov	r2, sl
 80136a2:	465b      	mov	r3, fp
 80136a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80136a8:	f7ec ffbe 	bl	8000628 <__aeabi_dmul>
 80136ac:	4b28      	ldr	r3, [pc, #160]	; (8013750 <_strtod_l+0x598>)
 80136ae:	460a      	mov	r2, r1
 80136b0:	400b      	ands	r3, r1
 80136b2:	4928      	ldr	r1, [pc, #160]	; (8013754 <_strtod_l+0x59c>)
 80136b4:	428b      	cmp	r3, r1
 80136b6:	4682      	mov	sl, r0
 80136b8:	d898      	bhi.n	80135ec <_strtod_l+0x434>
 80136ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80136be:	428b      	cmp	r3, r1
 80136c0:	bf86      	itte	hi
 80136c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801375c <_strtod_l+0x5a4>
 80136c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80136ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80136ce:	2300      	movs	r3, #0
 80136d0:	9304      	str	r3, [sp, #16]
 80136d2:	e077      	b.n	80137c4 <_strtod_l+0x60c>
 80136d4:	f018 0f01 	tst.w	r8, #1
 80136d8:	d006      	beq.n	80136e8 <_strtod_l+0x530>
 80136da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80136de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e2:	f7ec ffa1 	bl	8000628 <__aeabi_dmul>
 80136e6:	2301      	movs	r3, #1
 80136e8:	3501      	adds	r5, #1
 80136ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80136ee:	e7cc      	b.n	801368a <_strtod_l+0x4d2>
 80136f0:	d0ed      	beq.n	80136ce <_strtod_l+0x516>
 80136f2:	f1c8 0800 	rsb	r8, r8, #0
 80136f6:	f018 020f 	ands.w	r2, r8, #15
 80136fa:	d00a      	beq.n	8013712 <_strtod_l+0x55a>
 80136fc:	4b12      	ldr	r3, [pc, #72]	; (8013748 <_strtod_l+0x590>)
 80136fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013702:	4650      	mov	r0, sl
 8013704:	4659      	mov	r1, fp
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	f7ed f8b7 	bl	800087c <__aeabi_ddiv>
 801370e:	4682      	mov	sl, r0
 8013710:	468b      	mov	fp, r1
 8013712:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013716:	d0da      	beq.n	80136ce <_strtod_l+0x516>
 8013718:	f1b8 0f1f 	cmp.w	r8, #31
 801371c:	dd20      	ble.n	8013760 <_strtod_l+0x5a8>
 801371e:	2400      	movs	r4, #0
 8013720:	46a0      	mov	r8, r4
 8013722:	9407      	str	r4, [sp, #28]
 8013724:	9405      	str	r4, [sp, #20]
 8013726:	2322      	movs	r3, #34	; 0x22
 8013728:	f04f 0a00 	mov.w	sl, #0
 801372c:	f04f 0b00 	mov.w	fp, #0
 8013730:	f8c9 3000 	str.w	r3, [r9]
 8013734:	e765      	b.n	8013602 <_strtod_l+0x44a>
 8013736:	bf00      	nop
 8013738:	080178d1 	.word	0x080178d1
 801373c:	0801795b 	.word	0x0801795b
 8013740:	080178d9 	.word	0x080178d9
 8013744:	08017918 	.word	0x08017918
 8013748:	08017a00 	.word	0x08017a00
 801374c:	080179d8 	.word	0x080179d8
 8013750:	7ff00000 	.word	0x7ff00000
 8013754:	7ca00000 	.word	0x7ca00000
 8013758:	fff80000 	.word	0xfff80000
 801375c:	7fefffff 	.word	0x7fefffff
 8013760:	f018 0310 	ands.w	r3, r8, #16
 8013764:	bf18      	it	ne
 8013766:	236a      	movne	r3, #106	; 0x6a
 8013768:	4da0      	ldr	r5, [pc, #640]	; (80139ec <_strtod_l+0x834>)
 801376a:	9304      	str	r3, [sp, #16]
 801376c:	4650      	mov	r0, sl
 801376e:	4659      	mov	r1, fp
 8013770:	2300      	movs	r3, #0
 8013772:	f1b8 0f00 	cmp.w	r8, #0
 8013776:	f300 810a 	bgt.w	801398e <_strtod_l+0x7d6>
 801377a:	b10b      	cbz	r3, 8013780 <_strtod_l+0x5c8>
 801377c:	4682      	mov	sl, r0
 801377e:	468b      	mov	fp, r1
 8013780:	9b04      	ldr	r3, [sp, #16]
 8013782:	b1bb      	cbz	r3, 80137b4 <_strtod_l+0x5fc>
 8013784:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013788:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801378c:	2b00      	cmp	r3, #0
 801378e:	4659      	mov	r1, fp
 8013790:	dd10      	ble.n	80137b4 <_strtod_l+0x5fc>
 8013792:	2b1f      	cmp	r3, #31
 8013794:	f340 8107 	ble.w	80139a6 <_strtod_l+0x7ee>
 8013798:	2b34      	cmp	r3, #52	; 0x34
 801379a:	bfde      	ittt	le
 801379c:	3b20      	suble	r3, #32
 801379e:	f04f 32ff 	movle.w	r2, #4294967295
 80137a2:	fa02 f303 	lslle.w	r3, r2, r3
 80137a6:	f04f 0a00 	mov.w	sl, #0
 80137aa:	bfcc      	ite	gt
 80137ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80137b0:	ea03 0b01 	andle.w	fp, r3, r1
 80137b4:	2200      	movs	r2, #0
 80137b6:	2300      	movs	r3, #0
 80137b8:	4650      	mov	r0, sl
 80137ba:	4659      	mov	r1, fp
 80137bc:	f7ed f99c 	bl	8000af8 <__aeabi_dcmpeq>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d1ac      	bne.n	801371e <_strtod_l+0x566>
 80137c4:	9b07      	ldr	r3, [sp, #28]
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	9a05      	ldr	r2, [sp, #20]
 80137ca:	9908      	ldr	r1, [sp, #32]
 80137cc:	4623      	mov	r3, r4
 80137ce:	4648      	mov	r0, r9
 80137d0:	f002 f8ad 	bl	801592e <__s2b>
 80137d4:	9007      	str	r0, [sp, #28]
 80137d6:	2800      	cmp	r0, #0
 80137d8:	f43f af08 	beq.w	80135ec <_strtod_l+0x434>
 80137dc:	9a06      	ldr	r2, [sp, #24]
 80137de:	9b06      	ldr	r3, [sp, #24]
 80137e0:	2a00      	cmp	r2, #0
 80137e2:	f1c3 0300 	rsb	r3, r3, #0
 80137e6:	bfa8      	it	ge
 80137e8:	2300      	movge	r3, #0
 80137ea:	930e      	str	r3, [sp, #56]	; 0x38
 80137ec:	2400      	movs	r4, #0
 80137ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80137f2:	9316      	str	r3, [sp, #88]	; 0x58
 80137f4:	46a0      	mov	r8, r4
 80137f6:	9b07      	ldr	r3, [sp, #28]
 80137f8:	4648      	mov	r0, r9
 80137fa:	6859      	ldr	r1, [r3, #4]
 80137fc:	f002 f811 	bl	8015822 <_Balloc>
 8013800:	9005      	str	r0, [sp, #20]
 8013802:	2800      	cmp	r0, #0
 8013804:	f43f aef6 	beq.w	80135f4 <_strtod_l+0x43c>
 8013808:	9b07      	ldr	r3, [sp, #28]
 801380a:	691a      	ldr	r2, [r3, #16]
 801380c:	3202      	adds	r2, #2
 801380e:	f103 010c 	add.w	r1, r3, #12
 8013812:	0092      	lsls	r2, r2, #2
 8013814:	300c      	adds	r0, #12
 8013816:	f001 fff9 	bl	801580c <memcpy>
 801381a:	aa1e      	add	r2, sp, #120	; 0x78
 801381c:	a91d      	add	r1, sp, #116	; 0x74
 801381e:	ec4b ab10 	vmov	d0, sl, fp
 8013822:	4648      	mov	r0, r9
 8013824:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013828:	f002 fb3c 	bl	8015ea4 <__d2b>
 801382c:	901c      	str	r0, [sp, #112]	; 0x70
 801382e:	2800      	cmp	r0, #0
 8013830:	f43f aee0 	beq.w	80135f4 <_strtod_l+0x43c>
 8013834:	2101      	movs	r1, #1
 8013836:	4648      	mov	r0, r9
 8013838:	f002 f905 	bl	8015a46 <__i2b>
 801383c:	4680      	mov	r8, r0
 801383e:	2800      	cmp	r0, #0
 8013840:	f43f aed8 	beq.w	80135f4 <_strtod_l+0x43c>
 8013844:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013846:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013848:	2e00      	cmp	r6, #0
 801384a:	bfab      	itete	ge
 801384c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801384e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013850:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013852:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013854:	bfac      	ite	ge
 8013856:	18f7      	addge	r7, r6, r3
 8013858:	1b9d      	sublt	r5, r3, r6
 801385a:	9b04      	ldr	r3, [sp, #16]
 801385c:	1af6      	subs	r6, r6, r3
 801385e:	4416      	add	r6, r2
 8013860:	4b63      	ldr	r3, [pc, #396]	; (80139f0 <_strtod_l+0x838>)
 8013862:	3e01      	subs	r6, #1
 8013864:	429e      	cmp	r6, r3
 8013866:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801386a:	f280 80af 	bge.w	80139cc <_strtod_l+0x814>
 801386e:	1b9b      	subs	r3, r3, r6
 8013870:	2b1f      	cmp	r3, #31
 8013872:	eba2 0203 	sub.w	r2, r2, r3
 8013876:	f04f 0101 	mov.w	r1, #1
 801387a:	f300 809b 	bgt.w	80139b4 <_strtod_l+0x7fc>
 801387e:	fa01 f303 	lsl.w	r3, r1, r3
 8013882:	930f      	str	r3, [sp, #60]	; 0x3c
 8013884:	2300      	movs	r3, #0
 8013886:	930a      	str	r3, [sp, #40]	; 0x28
 8013888:	18be      	adds	r6, r7, r2
 801388a:	9b04      	ldr	r3, [sp, #16]
 801388c:	42b7      	cmp	r7, r6
 801388e:	4415      	add	r5, r2
 8013890:	441d      	add	r5, r3
 8013892:	463b      	mov	r3, r7
 8013894:	bfa8      	it	ge
 8013896:	4633      	movge	r3, r6
 8013898:	42ab      	cmp	r3, r5
 801389a:	bfa8      	it	ge
 801389c:	462b      	movge	r3, r5
 801389e:	2b00      	cmp	r3, #0
 80138a0:	bfc2      	ittt	gt
 80138a2:	1af6      	subgt	r6, r6, r3
 80138a4:	1aed      	subgt	r5, r5, r3
 80138a6:	1aff      	subgt	r7, r7, r3
 80138a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138aa:	b1bb      	cbz	r3, 80138dc <_strtod_l+0x724>
 80138ac:	4641      	mov	r1, r8
 80138ae:	461a      	mov	r2, r3
 80138b0:	4648      	mov	r0, r9
 80138b2:	f002 f967 	bl	8015b84 <__pow5mult>
 80138b6:	4680      	mov	r8, r0
 80138b8:	2800      	cmp	r0, #0
 80138ba:	f43f ae9b 	beq.w	80135f4 <_strtod_l+0x43c>
 80138be:	4601      	mov	r1, r0
 80138c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80138c2:	4648      	mov	r0, r9
 80138c4:	f002 f8c8 	bl	8015a58 <__multiply>
 80138c8:	900c      	str	r0, [sp, #48]	; 0x30
 80138ca:	2800      	cmp	r0, #0
 80138cc:	f43f ae92 	beq.w	80135f4 <_strtod_l+0x43c>
 80138d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80138d2:	4648      	mov	r0, r9
 80138d4:	f001 ffd9 	bl	801588a <_Bfree>
 80138d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138da:	931c      	str	r3, [sp, #112]	; 0x70
 80138dc:	2e00      	cmp	r6, #0
 80138de:	dc7a      	bgt.n	80139d6 <_strtod_l+0x81e>
 80138e0:	9b06      	ldr	r3, [sp, #24]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	dd08      	ble.n	80138f8 <_strtod_l+0x740>
 80138e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80138e8:	9905      	ldr	r1, [sp, #20]
 80138ea:	4648      	mov	r0, r9
 80138ec:	f002 f94a 	bl	8015b84 <__pow5mult>
 80138f0:	9005      	str	r0, [sp, #20]
 80138f2:	2800      	cmp	r0, #0
 80138f4:	f43f ae7e 	beq.w	80135f4 <_strtod_l+0x43c>
 80138f8:	2d00      	cmp	r5, #0
 80138fa:	dd08      	ble.n	801390e <_strtod_l+0x756>
 80138fc:	462a      	mov	r2, r5
 80138fe:	9905      	ldr	r1, [sp, #20]
 8013900:	4648      	mov	r0, r9
 8013902:	f002 f98d 	bl	8015c20 <__lshift>
 8013906:	9005      	str	r0, [sp, #20]
 8013908:	2800      	cmp	r0, #0
 801390a:	f43f ae73 	beq.w	80135f4 <_strtod_l+0x43c>
 801390e:	2f00      	cmp	r7, #0
 8013910:	dd08      	ble.n	8013924 <_strtod_l+0x76c>
 8013912:	4641      	mov	r1, r8
 8013914:	463a      	mov	r2, r7
 8013916:	4648      	mov	r0, r9
 8013918:	f002 f982 	bl	8015c20 <__lshift>
 801391c:	4680      	mov	r8, r0
 801391e:	2800      	cmp	r0, #0
 8013920:	f43f ae68 	beq.w	80135f4 <_strtod_l+0x43c>
 8013924:	9a05      	ldr	r2, [sp, #20]
 8013926:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013928:	4648      	mov	r0, r9
 801392a:	f002 f9e7 	bl	8015cfc <__mdiff>
 801392e:	4604      	mov	r4, r0
 8013930:	2800      	cmp	r0, #0
 8013932:	f43f ae5f 	beq.w	80135f4 <_strtod_l+0x43c>
 8013936:	68c3      	ldr	r3, [r0, #12]
 8013938:	930c      	str	r3, [sp, #48]	; 0x30
 801393a:	2300      	movs	r3, #0
 801393c:	60c3      	str	r3, [r0, #12]
 801393e:	4641      	mov	r1, r8
 8013940:	f002 f9c2 	bl	8015cc8 <__mcmp>
 8013944:	2800      	cmp	r0, #0
 8013946:	da55      	bge.n	80139f4 <_strtod_l+0x83c>
 8013948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801394a:	b9e3      	cbnz	r3, 8013986 <_strtod_l+0x7ce>
 801394c:	f1ba 0f00 	cmp.w	sl, #0
 8013950:	d119      	bne.n	8013986 <_strtod_l+0x7ce>
 8013952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013956:	b9b3      	cbnz	r3, 8013986 <_strtod_l+0x7ce>
 8013958:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801395c:	0d1b      	lsrs	r3, r3, #20
 801395e:	051b      	lsls	r3, r3, #20
 8013960:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013964:	d90f      	bls.n	8013986 <_strtod_l+0x7ce>
 8013966:	6963      	ldr	r3, [r4, #20]
 8013968:	b913      	cbnz	r3, 8013970 <_strtod_l+0x7b8>
 801396a:	6923      	ldr	r3, [r4, #16]
 801396c:	2b01      	cmp	r3, #1
 801396e:	dd0a      	ble.n	8013986 <_strtod_l+0x7ce>
 8013970:	4621      	mov	r1, r4
 8013972:	2201      	movs	r2, #1
 8013974:	4648      	mov	r0, r9
 8013976:	f002 f953 	bl	8015c20 <__lshift>
 801397a:	4641      	mov	r1, r8
 801397c:	4604      	mov	r4, r0
 801397e:	f002 f9a3 	bl	8015cc8 <__mcmp>
 8013982:	2800      	cmp	r0, #0
 8013984:	dc67      	bgt.n	8013a56 <_strtod_l+0x89e>
 8013986:	9b04      	ldr	r3, [sp, #16]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d171      	bne.n	8013a70 <_strtod_l+0x8b8>
 801398c:	e63d      	b.n	801360a <_strtod_l+0x452>
 801398e:	f018 0f01 	tst.w	r8, #1
 8013992:	d004      	beq.n	801399e <_strtod_l+0x7e6>
 8013994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013998:	f7ec fe46 	bl	8000628 <__aeabi_dmul>
 801399c:	2301      	movs	r3, #1
 801399e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80139a2:	3508      	adds	r5, #8
 80139a4:	e6e5      	b.n	8013772 <_strtod_l+0x5ba>
 80139a6:	f04f 32ff 	mov.w	r2, #4294967295
 80139aa:	fa02 f303 	lsl.w	r3, r2, r3
 80139ae:	ea03 0a0a 	and.w	sl, r3, sl
 80139b2:	e6ff      	b.n	80137b4 <_strtod_l+0x5fc>
 80139b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80139b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80139bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80139c0:	36e2      	adds	r6, #226	; 0xe2
 80139c2:	fa01 f306 	lsl.w	r3, r1, r6
 80139c6:	930a      	str	r3, [sp, #40]	; 0x28
 80139c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80139ca:	e75d      	b.n	8013888 <_strtod_l+0x6d0>
 80139cc:	2300      	movs	r3, #0
 80139ce:	930a      	str	r3, [sp, #40]	; 0x28
 80139d0:	2301      	movs	r3, #1
 80139d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80139d4:	e758      	b.n	8013888 <_strtod_l+0x6d0>
 80139d6:	4632      	mov	r2, r6
 80139d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80139da:	4648      	mov	r0, r9
 80139dc:	f002 f920 	bl	8015c20 <__lshift>
 80139e0:	901c      	str	r0, [sp, #112]	; 0x70
 80139e2:	2800      	cmp	r0, #0
 80139e4:	f47f af7c 	bne.w	80138e0 <_strtod_l+0x728>
 80139e8:	e604      	b.n	80135f4 <_strtod_l+0x43c>
 80139ea:	bf00      	nop
 80139ec:	08017930 	.word	0x08017930
 80139f0:	fffffc02 	.word	0xfffffc02
 80139f4:	465d      	mov	r5, fp
 80139f6:	f040 8086 	bne.w	8013b06 <_strtod_l+0x94e>
 80139fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a00:	b32a      	cbz	r2, 8013a4e <_strtod_l+0x896>
 8013a02:	4aaf      	ldr	r2, [pc, #700]	; (8013cc0 <_strtod_l+0xb08>)
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d153      	bne.n	8013ab0 <_strtod_l+0x8f8>
 8013a08:	9b04      	ldr	r3, [sp, #16]
 8013a0a:	4650      	mov	r0, sl
 8013a0c:	b1d3      	cbz	r3, 8013a44 <_strtod_l+0x88c>
 8013a0e:	4aad      	ldr	r2, [pc, #692]	; (8013cc4 <_strtod_l+0xb0c>)
 8013a10:	402a      	ands	r2, r5
 8013a12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013a16:	f04f 31ff 	mov.w	r1, #4294967295
 8013a1a:	d816      	bhi.n	8013a4a <_strtod_l+0x892>
 8013a1c:	0d12      	lsrs	r2, r2, #20
 8013a1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013a22:	fa01 f303 	lsl.w	r3, r1, r3
 8013a26:	4298      	cmp	r0, r3
 8013a28:	d142      	bne.n	8013ab0 <_strtod_l+0x8f8>
 8013a2a:	4ba7      	ldr	r3, [pc, #668]	; (8013cc8 <_strtod_l+0xb10>)
 8013a2c:	429d      	cmp	r5, r3
 8013a2e:	d102      	bne.n	8013a36 <_strtod_l+0x87e>
 8013a30:	3001      	adds	r0, #1
 8013a32:	f43f addf 	beq.w	80135f4 <_strtod_l+0x43c>
 8013a36:	4ba3      	ldr	r3, [pc, #652]	; (8013cc4 <_strtod_l+0xb0c>)
 8013a38:	402b      	ands	r3, r5
 8013a3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013a3e:	f04f 0a00 	mov.w	sl, #0
 8013a42:	e7a0      	b.n	8013986 <_strtod_l+0x7ce>
 8013a44:	f04f 33ff 	mov.w	r3, #4294967295
 8013a48:	e7ed      	b.n	8013a26 <_strtod_l+0x86e>
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	e7eb      	b.n	8013a26 <_strtod_l+0x86e>
 8013a4e:	bb7b      	cbnz	r3, 8013ab0 <_strtod_l+0x8f8>
 8013a50:	f1ba 0f00 	cmp.w	sl, #0
 8013a54:	d12c      	bne.n	8013ab0 <_strtod_l+0x8f8>
 8013a56:	9904      	ldr	r1, [sp, #16]
 8013a58:	4a9a      	ldr	r2, [pc, #616]	; (8013cc4 <_strtod_l+0xb0c>)
 8013a5a:	465b      	mov	r3, fp
 8013a5c:	b1f1      	cbz	r1, 8013a9c <_strtod_l+0x8e4>
 8013a5e:	ea02 010b 	and.w	r1, r2, fp
 8013a62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013a66:	dc19      	bgt.n	8013a9c <_strtod_l+0x8e4>
 8013a68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013a6c:	f77f ae5b 	ble.w	8013726 <_strtod_l+0x56e>
 8013a70:	4a96      	ldr	r2, [pc, #600]	; (8013ccc <_strtod_l+0xb14>)
 8013a72:	2300      	movs	r3, #0
 8013a74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013a78:	4650      	mov	r0, sl
 8013a7a:	4659      	mov	r1, fp
 8013a7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013a80:	f7ec fdd2 	bl	8000628 <__aeabi_dmul>
 8013a84:	4682      	mov	sl, r0
 8013a86:	468b      	mov	fp, r1
 8013a88:	2900      	cmp	r1, #0
 8013a8a:	f47f adbe 	bne.w	801360a <_strtod_l+0x452>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	f47f adbb 	bne.w	801360a <_strtod_l+0x452>
 8013a94:	2322      	movs	r3, #34	; 0x22
 8013a96:	f8c9 3000 	str.w	r3, [r9]
 8013a9a:	e5b6      	b.n	801360a <_strtod_l+0x452>
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013aa2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013aa6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013aaa:	f04f 3aff 	mov.w	sl, #4294967295
 8013aae:	e76a      	b.n	8013986 <_strtod_l+0x7ce>
 8013ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab2:	b193      	cbz	r3, 8013ada <_strtod_l+0x922>
 8013ab4:	422b      	tst	r3, r5
 8013ab6:	f43f af66 	beq.w	8013986 <_strtod_l+0x7ce>
 8013aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013abc:	9a04      	ldr	r2, [sp, #16]
 8013abe:	4650      	mov	r0, sl
 8013ac0:	4659      	mov	r1, fp
 8013ac2:	b173      	cbz	r3, 8013ae2 <_strtod_l+0x92a>
 8013ac4:	f7ff fb5b 	bl	801317e <sulp>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	460b      	mov	r3, r1
 8013acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013ad0:	f7ec fbf4 	bl	80002bc <__adddf3>
 8013ad4:	4682      	mov	sl, r0
 8013ad6:	468b      	mov	fp, r1
 8013ad8:	e755      	b.n	8013986 <_strtod_l+0x7ce>
 8013ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013adc:	ea13 0f0a 	tst.w	r3, sl
 8013ae0:	e7e9      	b.n	8013ab6 <_strtod_l+0x8fe>
 8013ae2:	f7ff fb4c 	bl	801317e <sulp>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	460b      	mov	r3, r1
 8013aea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013aee:	f7ec fbe3 	bl	80002b8 <__aeabi_dsub>
 8013af2:	2200      	movs	r2, #0
 8013af4:	2300      	movs	r3, #0
 8013af6:	4682      	mov	sl, r0
 8013af8:	468b      	mov	fp, r1
 8013afa:	f7ec fffd 	bl	8000af8 <__aeabi_dcmpeq>
 8013afe:	2800      	cmp	r0, #0
 8013b00:	f47f ae11 	bne.w	8013726 <_strtod_l+0x56e>
 8013b04:	e73f      	b.n	8013986 <_strtod_l+0x7ce>
 8013b06:	4641      	mov	r1, r8
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f002 fa1a 	bl	8015f42 <__ratio>
 8013b0e:	ec57 6b10 	vmov	r6, r7, d0
 8013b12:	2200      	movs	r2, #0
 8013b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013b18:	ee10 0a10 	vmov	r0, s0
 8013b1c:	4639      	mov	r1, r7
 8013b1e:	f7ec ffff 	bl	8000b20 <__aeabi_dcmple>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d077      	beq.n	8013c16 <_strtod_l+0xa5e>
 8013b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d04a      	beq.n	8013bc2 <_strtod_l+0xa0a>
 8013b2c:	4b68      	ldr	r3, [pc, #416]	; (8013cd0 <_strtod_l+0xb18>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013b34:	4f66      	ldr	r7, [pc, #408]	; (8013cd0 <_strtod_l+0xb18>)
 8013b36:	2600      	movs	r6, #0
 8013b38:	4b62      	ldr	r3, [pc, #392]	; (8013cc4 <_strtod_l+0xb0c>)
 8013b3a:	402b      	ands	r3, r5
 8013b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b40:	4b64      	ldr	r3, [pc, #400]	; (8013cd4 <_strtod_l+0xb1c>)
 8013b42:	429a      	cmp	r2, r3
 8013b44:	f040 80ce 	bne.w	8013ce4 <_strtod_l+0xb2c>
 8013b48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013b54:	ec4b ab10 	vmov	d0, sl, fp
 8013b58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013b5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b60:	f002 f92a 	bl	8015db8 <__ulp>
 8013b64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b68:	ec53 2b10 	vmov	r2, r3, d0
 8013b6c:	f7ec fd5c 	bl	8000628 <__aeabi_dmul>
 8013b70:	4652      	mov	r2, sl
 8013b72:	465b      	mov	r3, fp
 8013b74:	f7ec fba2 	bl	80002bc <__adddf3>
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4952      	ldr	r1, [pc, #328]	; (8013cc4 <_strtod_l+0xb0c>)
 8013b7c:	4a56      	ldr	r2, [pc, #344]	; (8013cd8 <_strtod_l+0xb20>)
 8013b7e:	4019      	ands	r1, r3
 8013b80:	4291      	cmp	r1, r2
 8013b82:	4682      	mov	sl, r0
 8013b84:	d95b      	bls.n	8013c3e <_strtod_l+0xa86>
 8013b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d103      	bne.n	8013b98 <_strtod_l+0x9e0>
 8013b90:	9b08      	ldr	r3, [sp, #32]
 8013b92:	3301      	adds	r3, #1
 8013b94:	f43f ad2e 	beq.w	80135f4 <_strtod_l+0x43c>
 8013b98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013cc8 <_strtod_l+0xb10>
 8013b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8013ba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ba2:	4648      	mov	r0, r9
 8013ba4:	f001 fe71 	bl	801588a <_Bfree>
 8013ba8:	9905      	ldr	r1, [sp, #20]
 8013baa:	4648      	mov	r0, r9
 8013bac:	f001 fe6d 	bl	801588a <_Bfree>
 8013bb0:	4641      	mov	r1, r8
 8013bb2:	4648      	mov	r0, r9
 8013bb4:	f001 fe69 	bl	801588a <_Bfree>
 8013bb8:	4621      	mov	r1, r4
 8013bba:	4648      	mov	r0, r9
 8013bbc:	f001 fe65 	bl	801588a <_Bfree>
 8013bc0:	e619      	b.n	80137f6 <_strtod_l+0x63e>
 8013bc2:	f1ba 0f00 	cmp.w	sl, #0
 8013bc6:	d11a      	bne.n	8013bfe <_strtod_l+0xa46>
 8013bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bcc:	b9eb      	cbnz	r3, 8013c0a <_strtod_l+0xa52>
 8013bce:	2200      	movs	r2, #0
 8013bd0:	4b3f      	ldr	r3, [pc, #252]	; (8013cd0 <_strtod_l+0xb18>)
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	4639      	mov	r1, r7
 8013bd6:	f7ec ff99 	bl	8000b0c <__aeabi_dcmplt>
 8013bda:	b9c8      	cbnz	r0, 8013c10 <_strtod_l+0xa58>
 8013bdc:	4630      	mov	r0, r6
 8013bde:	4639      	mov	r1, r7
 8013be0:	2200      	movs	r2, #0
 8013be2:	4b3e      	ldr	r3, [pc, #248]	; (8013cdc <_strtod_l+0xb24>)
 8013be4:	f7ec fd20 	bl	8000628 <__aeabi_dmul>
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013bf0:	9618      	str	r6, [sp, #96]	; 0x60
 8013bf2:	9319      	str	r3, [sp, #100]	; 0x64
 8013bf4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013bf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013bfc:	e79c      	b.n	8013b38 <_strtod_l+0x980>
 8013bfe:	f1ba 0f01 	cmp.w	sl, #1
 8013c02:	d102      	bne.n	8013c0a <_strtod_l+0xa52>
 8013c04:	2d00      	cmp	r5, #0
 8013c06:	f43f ad8e 	beq.w	8013726 <_strtod_l+0x56e>
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	4b34      	ldr	r3, [pc, #208]	; (8013ce0 <_strtod_l+0xb28>)
 8013c0e:	e78f      	b.n	8013b30 <_strtod_l+0x978>
 8013c10:	2600      	movs	r6, #0
 8013c12:	4f32      	ldr	r7, [pc, #200]	; (8013cdc <_strtod_l+0xb24>)
 8013c14:	e7ea      	b.n	8013bec <_strtod_l+0xa34>
 8013c16:	4b31      	ldr	r3, [pc, #196]	; (8013cdc <_strtod_l+0xb24>)
 8013c18:	4630      	mov	r0, r6
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f7ec fd03 	bl	8000628 <__aeabi_dmul>
 8013c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c24:	4606      	mov	r6, r0
 8013c26:	460f      	mov	r7, r1
 8013c28:	b933      	cbnz	r3, 8013c38 <_strtod_l+0xa80>
 8013c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c2e:	9010      	str	r0, [sp, #64]	; 0x40
 8013c30:	9311      	str	r3, [sp, #68]	; 0x44
 8013c32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c36:	e7df      	b.n	8013bf8 <_strtod_l+0xa40>
 8013c38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013c3c:	e7f9      	b.n	8013c32 <_strtod_l+0xa7a>
 8013c3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013c42:	9b04      	ldr	r3, [sp, #16]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1ab      	bne.n	8013ba0 <_strtod_l+0x9e8>
 8013c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c4c:	0d1b      	lsrs	r3, r3, #20
 8013c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c50:	051b      	lsls	r3, r3, #20
 8013c52:	429a      	cmp	r2, r3
 8013c54:	465d      	mov	r5, fp
 8013c56:	d1a3      	bne.n	8013ba0 <_strtod_l+0x9e8>
 8013c58:	4639      	mov	r1, r7
 8013c5a:	4630      	mov	r0, r6
 8013c5c:	f7ec ff94 	bl	8000b88 <__aeabi_d2iz>
 8013c60:	f7ec fc78 	bl	8000554 <__aeabi_i2d>
 8013c64:	460b      	mov	r3, r1
 8013c66:	4602      	mov	r2, r0
 8013c68:	4639      	mov	r1, r7
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f7ec fb24 	bl	80002b8 <__aeabi_dsub>
 8013c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c72:	4606      	mov	r6, r0
 8013c74:	460f      	mov	r7, r1
 8013c76:	b933      	cbnz	r3, 8013c86 <_strtod_l+0xace>
 8013c78:	f1ba 0f00 	cmp.w	sl, #0
 8013c7c:	d103      	bne.n	8013c86 <_strtod_l+0xace>
 8013c7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013c82:	2d00      	cmp	r5, #0
 8013c84:	d06d      	beq.n	8013d62 <_strtod_l+0xbaa>
 8013c86:	a30a      	add	r3, pc, #40	; (adr r3, 8013cb0 <_strtod_l+0xaf8>)
 8013c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	4639      	mov	r1, r7
 8013c90:	f7ec ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	f47f acb8 	bne.w	801360a <_strtod_l+0x452>
 8013c9a:	a307      	add	r3, pc, #28	; (adr r3, 8013cb8 <_strtod_l+0xb00>)
 8013c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	4639      	mov	r1, r7
 8013ca4:	f7ec ff50 	bl	8000b48 <__aeabi_dcmpgt>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	f43f af79 	beq.w	8013ba0 <_strtod_l+0x9e8>
 8013cae:	e4ac      	b.n	801360a <_strtod_l+0x452>
 8013cb0:	94a03595 	.word	0x94a03595
 8013cb4:	3fdfffff 	.word	0x3fdfffff
 8013cb8:	35afe535 	.word	0x35afe535
 8013cbc:	3fe00000 	.word	0x3fe00000
 8013cc0:	000fffff 	.word	0x000fffff
 8013cc4:	7ff00000 	.word	0x7ff00000
 8013cc8:	7fefffff 	.word	0x7fefffff
 8013ccc:	39500000 	.word	0x39500000
 8013cd0:	3ff00000 	.word	0x3ff00000
 8013cd4:	7fe00000 	.word	0x7fe00000
 8013cd8:	7c9fffff 	.word	0x7c9fffff
 8013cdc:	3fe00000 	.word	0x3fe00000
 8013ce0:	bff00000 	.word	0xbff00000
 8013ce4:	9b04      	ldr	r3, [sp, #16]
 8013ce6:	b333      	cbz	r3, 8013d36 <_strtod_l+0xb7e>
 8013ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013cee:	d822      	bhi.n	8013d36 <_strtod_l+0xb7e>
 8013cf0:	a327      	add	r3, pc, #156	; (adr r3, 8013d90 <_strtod_l+0xbd8>)
 8013cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	f7ec ff11 	bl	8000b20 <__aeabi_dcmple>
 8013cfe:	b1a0      	cbz	r0, 8013d2a <_strtod_l+0xb72>
 8013d00:	4639      	mov	r1, r7
 8013d02:	4630      	mov	r0, r6
 8013d04:	f7ec ff68 	bl	8000bd8 <__aeabi_d2uiz>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	bf08      	it	eq
 8013d0c:	2001      	moveq	r0, #1
 8013d0e:	f7ec fc11 	bl	8000534 <__aeabi_ui2d>
 8013d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d14:	4606      	mov	r6, r0
 8013d16:	460f      	mov	r7, r1
 8013d18:	bb03      	cbnz	r3, 8013d5c <_strtod_l+0xba4>
 8013d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8013d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013d26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013d32:	1a9b      	subs	r3, r3, r2
 8013d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013d3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013d3e:	f002 f83b 	bl	8015db8 <__ulp>
 8013d42:	4650      	mov	r0, sl
 8013d44:	ec53 2b10 	vmov	r2, r3, d0
 8013d48:	4659      	mov	r1, fp
 8013d4a:	f7ec fc6d 	bl	8000628 <__aeabi_dmul>
 8013d4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d52:	f7ec fab3 	bl	80002bc <__adddf3>
 8013d56:	4682      	mov	sl, r0
 8013d58:	468b      	mov	fp, r1
 8013d5a:	e772      	b.n	8013c42 <_strtod_l+0xa8a>
 8013d5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013d60:	e7df      	b.n	8013d22 <_strtod_l+0xb6a>
 8013d62:	a30d      	add	r3, pc, #52	; (adr r3, 8013d98 <_strtod_l+0xbe0>)
 8013d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d68:	f7ec fed0 	bl	8000b0c <__aeabi_dcmplt>
 8013d6c:	e79c      	b.n	8013ca8 <_strtod_l+0xaf0>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	930d      	str	r3, [sp, #52]	; 0x34
 8013d72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	f7ff ba61 	b.w	801323e <_strtod_l+0x86>
 8013d7c:	2b65      	cmp	r3, #101	; 0x65
 8013d7e:	f04f 0200 	mov.w	r2, #0
 8013d82:	f43f ab4e 	beq.w	8013422 <_strtod_l+0x26a>
 8013d86:	2101      	movs	r1, #1
 8013d88:	4614      	mov	r4, r2
 8013d8a:	9104      	str	r1, [sp, #16]
 8013d8c:	f7ff bacb 	b.w	8013326 <_strtod_l+0x16e>
 8013d90:	ffc00000 	.word	0xffc00000
 8013d94:	41dfffff 	.word	0x41dfffff
 8013d98:	94a03595 	.word	0x94a03595
 8013d9c:	3fcfffff 	.word	0x3fcfffff

08013da0 <_strtod_r>:
 8013da0:	4b05      	ldr	r3, [pc, #20]	; (8013db8 <_strtod_r+0x18>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	b410      	push	{r4}
 8013da6:	6a1b      	ldr	r3, [r3, #32]
 8013da8:	4c04      	ldr	r4, [pc, #16]	; (8013dbc <_strtod_r+0x1c>)
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	bf08      	it	eq
 8013dae:	4623      	moveq	r3, r4
 8013db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013db4:	f7ff ba00 	b.w	80131b8 <_strtod_l>
 8013db8:	2000000c 	.word	0x2000000c
 8013dbc:	20000070 	.word	0x20000070

08013dc0 <_strtol_l.isra.0>:
 8013dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	4689      	mov	r9, r1
 8013dc8:	4692      	mov	sl, r2
 8013dca:	461e      	mov	r6, r3
 8013dcc:	460f      	mov	r7, r1
 8013dce:	463d      	mov	r5, r7
 8013dd0:	9808      	ldr	r0, [sp, #32]
 8013dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dd6:	f001 fc67 	bl	80156a8 <__locale_ctype_ptr_l>
 8013dda:	4420      	add	r0, r4
 8013ddc:	7843      	ldrb	r3, [r0, #1]
 8013dde:	f013 0308 	ands.w	r3, r3, #8
 8013de2:	d132      	bne.n	8013e4a <_strtol_l.isra.0+0x8a>
 8013de4:	2c2d      	cmp	r4, #45	; 0x2d
 8013de6:	d132      	bne.n	8013e4e <_strtol_l.isra.0+0x8e>
 8013de8:	787c      	ldrb	r4, [r7, #1]
 8013dea:	1cbd      	adds	r5, r7, #2
 8013dec:	2201      	movs	r2, #1
 8013dee:	2e00      	cmp	r6, #0
 8013df0:	d05d      	beq.n	8013eae <_strtol_l.isra.0+0xee>
 8013df2:	2e10      	cmp	r6, #16
 8013df4:	d109      	bne.n	8013e0a <_strtol_l.isra.0+0x4a>
 8013df6:	2c30      	cmp	r4, #48	; 0x30
 8013df8:	d107      	bne.n	8013e0a <_strtol_l.isra.0+0x4a>
 8013dfa:	782b      	ldrb	r3, [r5, #0]
 8013dfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013e00:	2b58      	cmp	r3, #88	; 0x58
 8013e02:	d14f      	bne.n	8013ea4 <_strtol_l.isra.0+0xe4>
 8013e04:	786c      	ldrb	r4, [r5, #1]
 8013e06:	2610      	movs	r6, #16
 8013e08:	3502      	adds	r5, #2
 8013e0a:	2a00      	cmp	r2, #0
 8013e0c:	bf14      	ite	ne
 8013e0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013e12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013e16:	2700      	movs	r7, #0
 8013e18:	fbb1 fcf6 	udiv	ip, r1, r6
 8013e1c:	4638      	mov	r0, r7
 8013e1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013e22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013e26:	2b09      	cmp	r3, #9
 8013e28:	d817      	bhi.n	8013e5a <_strtol_l.isra.0+0x9a>
 8013e2a:	461c      	mov	r4, r3
 8013e2c:	42a6      	cmp	r6, r4
 8013e2e:	dd23      	ble.n	8013e78 <_strtol_l.isra.0+0xb8>
 8013e30:	1c7b      	adds	r3, r7, #1
 8013e32:	d007      	beq.n	8013e44 <_strtol_l.isra.0+0x84>
 8013e34:	4584      	cmp	ip, r0
 8013e36:	d31c      	bcc.n	8013e72 <_strtol_l.isra.0+0xb2>
 8013e38:	d101      	bne.n	8013e3e <_strtol_l.isra.0+0x7e>
 8013e3a:	45a6      	cmp	lr, r4
 8013e3c:	db19      	blt.n	8013e72 <_strtol_l.isra.0+0xb2>
 8013e3e:	fb00 4006 	mla	r0, r0, r6, r4
 8013e42:	2701      	movs	r7, #1
 8013e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e48:	e7eb      	b.n	8013e22 <_strtol_l.isra.0+0x62>
 8013e4a:	462f      	mov	r7, r5
 8013e4c:	e7bf      	b.n	8013dce <_strtol_l.isra.0+0xe>
 8013e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8013e50:	bf04      	itt	eq
 8013e52:	1cbd      	addeq	r5, r7, #2
 8013e54:	787c      	ldrbeq	r4, [r7, #1]
 8013e56:	461a      	mov	r2, r3
 8013e58:	e7c9      	b.n	8013dee <_strtol_l.isra.0+0x2e>
 8013e5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013e5e:	2b19      	cmp	r3, #25
 8013e60:	d801      	bhi.n	8013e66 <_strtol_l.isra.0+0xa6>
 8013e62:	3c37      	subs	r4, #55	; 0x37
 8013e64:	e7e2      	b.n	8013e2c <_strtol_l.isra.0+0x6c>
 8013e66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013e6a:	2b19      	cmp	r3, #25
 8013e6c:	d804      	bhi.n	8013e78 <_strtol_l.isra.0+0xb8>
 8013e6e:	3c57      	subs	r4, #87	; 0x57
 8013e70:	e7dc      	b.n	8013e2c <_strtol_l.isra.0+0x6c>
 8013e72:	f04f 37ff 	mov.w	r7, #4294967295
 8013e76:	e7e5      	b.n	8013e44 <_strtol_l.isra.0+0x84>
 8013e78:	1c7b      	adds	r3, r7, #1
 8013e7a:	d108      	bne.n	8013e8e <_strtol_l.isra.0+0xce>
 8013e7c:	2322      	movs	r3, #34	; 0x22
 8013e7e:	f8c8 3000 	str.w	r3, [r8]
 8013e82:	4608      	mov	r0, r1
 8013e84:	f1ba 0f00 	cmp.w	sl, #0
 8013e88:	d107      	bne.n	8013e9a <_strtol_l.isra.0+0xda>
 8013e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e8e:	b102      	cbz	r2, 8013e92 <_strtol_l.isra.0+0xd2>
 8013e90:	4240      	negs	r0, r0
 8013e92:	f1ba 0f00 	cmp.w	sl, #0
 8013e96:	d0f8      	beq.n	8013e8a <_strtol_l.isra.0+0xca>
 8013e98:	b10f      	cbz	r7, 8013e9e <_strtol_l.isra.0+0xde>
 8013e9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8013e9e:	f8ca 9000 	str.w	r9, [sl]
 8013ea2:	e7f2      	b.n	8013e8a <_strtol_l.isra.0+0xca>
 8013ea4:	2430      	movs	r4, #48	; 0x30
 8013ea6:	2e00      	cmp	r6, #0
 8013ea8:	d1af      	bne.n	8013e0a <_strtol_l.isra.0+0x4a>
 8013eaa:	2608      	movs	r6, #8
 8013eac:	e7ad      	b.n	8013e0a <_strtol_l.isra.0+0x4a>
 8013eae:	2c30      	cmp	r4, #48	; 0x30
 8013eb0:	d0a3      	beq.n	8013dfa <_strtol_l.isra.0+0x3a>
 8013eb2:	260a      	movs	r6, #10
 8013eb4:	e7a9      	b.n	8013e0a <_strtol_l.isra.0+0x4a>
	...

08013eb8 <_strtol_r>:
 8013eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013eba:	4c06      	ldr	r4, [pc, #24]	; (8013ed4 <_strtol_r+0x1c>)
 8013ebc:	4d06      	ldr	r5, [pc, #24]	; (8013ed8 <_strtol_r+0x20>)
 8013ebe:	6824      	ldr	r4, [r4, #0]
 8013ec0:	6a24      	ldr	r4, [r4, #32]
 8013ec2:	2c00      	cmp	r4, #0
 8013ec4:	bf08      	it	eq
 8013ec6:	462c      	moveq	r4, r5
 8013ec8:	9400      	str	r4, [sp, #0]
 8013eca:	f7ff ff79 	bl	8013dc0 <_strtol_l.isra.0>
 8013ece:	b003      	add	sp, #12
 8013ed0:	bd30      	pop	{r4, r5, pc}
 8013ed2:	bf00      	nop
 8013ed4:	2000000c 	.word	0x2000000c
 8013ed8:	20000070 	.word	0x20000070

08013edc <_vsiprintf_r>:
 8013edc:	b500      	push	{lr}
 8013ede:	b09b      	sub	sp, #108	; 0x6c
 8013ee0:	9100      	str	r1, [sp, #0]
 8013ee2:	9104      	str	r1, [sp, #16]
 8013ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ee8:	9105      	str	r1, [sp, #20]
 8013eea:	9102      	str	r1, [sp, #8]
 8013eec:	4905      	ldr	r1, [pc, #20]	; (8013f04 <_vsiprintf_r+0x28>)
 8013eee:	9103      	str	r1, [sp, #12]
 8013ef0:	4669      	mov	r1, sp
 8013ef2:	f002 f9a5 	bl	8016240 <_svfiprintf_r>
 8013ef6:	9b00      	ldr	r3, [sp, #0]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	701a      	strb	r2, [r3, #0]
 8013efc:	b01b      	add	sp, #108	; 0x6c
 8013efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f02:	bf00      	nop
 8013f04:	ffff0208 	.word	0xffff0208

08013f08 <vsiprintf>:
 8013f08:	4613      	mov	r3, r2
 8013f0a:	460a      	mov	r2, r1
 8013f0c:	4601      	mov	r1, r0
 8013f0e:	4802      	ldr	r0, [pc, #8]	; (8013f18 <vsiprintf+0x10>)
 8013f10:	6800      	ldr	r0, [r0, #0]
 8013f12:	f7ff bfe3 	b.w	8013edc <_vsiprintf_r>
 8013f16:	bf00      	nop
 8013f18:	2000000c 	.word	0x2000000c

08013f1c <__swbuf_r>:
 8013f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1e:	460e      	mov	r6, r1
 8013f20:	4614      	mov	r4, r2
 8013f22:	4605      	mov	r5, r0
 8013f24:	b118      	cbz	r0, 8013f2e <__swbuf_r+0x12>
 8013f26:	6983      	ldr	r3, [r0, #24]
 8013f28:	b90b      	cbnz	r3, 8013f2e <__swbuf_r+0x12>
 8013f2a:	f001 f80d 	bl	8014f48 <__sinit>
 8013f2e:	4b21      	ldr	r3, [pc, #132]	; (8013fb4 <__swbuf_r+0x98>)
 8013f30:	429c      	cmp	r4, r3
 8013f32:	d12a      	bne.n	8013f8a <__swbuf_r+0x6e>
 8013f34:	686c      	ldr	r4, [r5, #4]
 8013f36:	69a3      	ldr	r3, [r4, #24]
 8013f38:	60a3      	str	r3, [r4, #8]
 8013f3a:	89a3      	ldrh	r3, [r4, #12]
 8013f3c:	071a      	lsls	r2, r3, #28
 8013f3e:	d52e      	bpl.n	8013f9e <__swbuf_r+0x82>
 8013f40:	6923      	ldr	r3, [r4, #16]
 8013f42:	b363      	cbz	r3, 8013f9e <__swbuf_r+0x82>
 8013f44:	6923      	ldr	r3, [r4, #16]
 8013f46:	6820      	ldr	r0, [r4, #0]
 8013f48:	1ac0      	subs	r0, r0, r3
 8013f4a:	6963      	ldr	r3, [r4, #20]
 8013f4c:	b2f6      	uxtb	r6, r6
 8013f4e:	4283      	cmp	r3, r0
 8013f50:	4637      	mov	r7, r6
 8013f52:	dc04      	bgt.n	8013f5e <__swbuf_r+0x42>
 8013f54:	4621      	mov	r1, r4
 8013f56:	4628      	mov	r0, r5
 8013f58:	f000 ff8c 	bl	8014e74 <_fflush_r>
 8013f5c:	bb28      	cbnz	r0, 8013faa <__swbuf_r+0x8e>
 8013f5e:	68a3      	ldr	r3, [r4, #8]
 8013f60:	3b01      	subs	r3, #1
 8013f62:	60a3      	str	r3, [r4, #8]
 8013f64:	6823      	ldr	r3, [r4, #0]
 8013f66:	1c5a      	adds	r2, r3, #1
 8013f68:	6022      	str	r2, [r4, #0]
 8013f6a:	701e      	strb	r6, [r3, #0]
 8013f6c:	6963      	ldr	r3, [r4, #20]
 8013f6e:	3001      	adds	r0, #1
 8013f70:	4283      	cmp	r3, r0
 8013f72:	d004      	beq.n	8013f7e <__swbuf_r+0x62>
 8013f74:	89a3      	ldrh	r3, [r4, #12]
 8013f76:	07db      	lsls	r3, r3, #31
 8013f78:	d519      	bpl.n	8013fae <__swbuf_r+0x92>
 8013f7a:	2e0a      	cmp	r6, #10
 8013f7c:	d117      	bne.n	8013fae <__swbuf_r+0x92>
 8013f7e:	4621      	mov	r1, r4
 8013f80:	4628      	mov	r0, r5
 8013f82:	f000 ff77 	bl	8014e74 <_fflush_r>
 8013f86:	b190      	cbz	r0, 8013fae <__swbuf_r+0x92>
 8013f88:	e00f      	b.n	8013faa <__swbuf_r+0x8e>
 8013f8a:	4b0b      	ldr	r3, [pc, #44]	; (8013fb8 <__swbuf_r+0x9c>)
 8013f8c:	429c      	cmp	r4, r3
 8013f8e:	d101      	bne.n	8013f94 <__swbuf_r+0x78>
 8013f90:	68ac      	ldr	r4, [r5, #8]
 8013f92:	e7d0      	b.n	8013f36 <__swbuf_r+0x1a>
 8013f94:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <__swbuf_r+0xa0>)
 8013f96:	429c      	cmp	r4, r3
 8013f98:	bf08      	it	eq
 8013f9a:	68ec      	ldreq	r4, [r5, #12]
 8013f9c:	e7cb      	b.n	8013f36 <__swbuf_r+0x1a>
 8013f9e:	4621      	mov	r1, r4
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	f000 f81f 	bl	8013fe4 <__swsetup_r>
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	d0cc      	beq.n	8013f44 <__swbuf_r+0x28>
 8013faa:	f04f 37ff 	mov.w	r7, #4294967295
 8013fae:	4638      	mov	r0, r7
 8013fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	08017988 	.word	0x08017988
 8013fb8:	080179a8 	.word	0x080179a8
 8013fbc:	08017968 	.word	0x08017968

08013fc0 <_write_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4c07      	ldr	r4, [pc, #28]	; (8013fe0 <_write_r+0x20>)
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	4608      	mov	r0, r1
 8013fc8:	4611      	mov	r1, r2
 8013fca:	2200      	movs	r2, #0
 8013fcc:	6022      	str	r2, [r4, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f7ef fb84 	bl	80036dc <_write>
 8013fd4:	1c43      	adds	r3, r0, #1
 8013fd6:	d102      	bne.n	8013fde <_write_r+0x1e>
 8013fd8:	6823      	ldr	r3, [r4, #0]
 8013fda:	b103      	cbz	r3, 8013fde <_write_r+0x1e>
 8013fdc:	602b      	str	r3, [r5, #0]
 8013fde:	bd38      	pop	{r3, r4, r5, pc}
 8013fe0:	20018234 	.word	0x20018234

08013fe4 <__swsetup_r>:
 8013fe4:	4b32      	ldr	r3, [pc, #200]	; (80140b0 <__swsetup_r+0xcc>)
 8013fe6:	b570      	push	{r4, r5, r6, lr}
 8013fe8:	681d      	ldr	r5, [r3, #0]
 8013fea:	4606      	mov	r6, r0
 8013fec:	460c      	mov	r4, r1
 8013fee:	b125      	cbz	r5, 8013ffa <__swsetup_r+0x16>
 8013ff0:	69ab      	ldr	r3, [r5, #24]
 8013ff2:	b913      	cbnz	r3, 8013ffa <__swsetup_r+0x16>
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f000 ffa7 	bl	8014f48 <__sinit>
 8013ffa:	4b2e      	ldr	r3, [pc, #184]	; (80140b4 <__swsetup_r+0xd0>)
 8013ffc:	429c      	cmp	r4, r3
 8013ffe:	d10f      	bne.n	8014020 <__swsetup_r+0x3c>
 8014000:	686c      	ldr	r4, [r5, #4]
 8014002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014006:	b29a      	uxth	r2, r3
 8014008:	0715      	lsls	r5, r2, #28
 801400a:	d42c      	bmi.n	8014066 <__swsetup_r+0x82>
 801400c:	06d0      	lsls	r0, r2, #27
 801400e:	d411      	bmi.n	8014034 <__swsetup_r+0x50>
 8014010:	2209      	movs	r2, #9
 8014012:	6032      	str	r2, [r6, #0]
 8014014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014018:	81a3      	strh	r3, [r4, #12]
 801401a:	f04f 30ff 	mov.w	r0, #4294967295
 801401e:	e03e      	b.n	801409e <__swsetup_r+0xba>
 8014020:	4b25      	ldr	r3, [pc, #148]	; (80140b8 <__swsetup_r+0xd4>)
 8014022:	429c      	cmp	r4, r3
 8014024:	d101      	bne.n	801402a <__swsetup_r+0x46>
 8014026:	68ac      	ldr	r4, [r5, #8]
 8014028:	e7eb      	b.n	8014002 <__swsetup_r+0x1e>
 801402a:	4b24      	ldr	r3, [pc, #144]	; (80140bc <__swsetup_r+0xd8>)
 801402c:	429c      	cmp	r4, r3
 801402e:	bf08      	it	eq
 8014030:	68ec      	ldreq	r4, [r5, #12]
 8014032:	e7e6      	b.n	8014002 <__swsetup_r+0x1e>
 8014034:	0751      	lsls	r1, r2, #29
 8014036:	d512      	bpl.n	801405e <__swsetup_r+0x7a>
 8014038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801403a:	b141      	cbz	r1, 801404e <__swsetup_r+0x6a>
 801403c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014040:	4299      	cmp	r1, r3
 8014042:	d002      	beq.n	801404a <__swsetup_r+0x66>
 8014044:	4630      	mov	r0, r6
 8014046:	f001 fff9 	bl	801603c <_free_r>
 801404a:	2300      	movs	r3, #0
 801404c:	6363      	str	r3, [r4, #52]	; 0x34
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014054:	81a3      	strh	r3, [r4, #12]
 8014056:	2300      	movs	r3, #0
 8014058:	6063      	str	r3, [r4, #4]
 801405a:	6923      	ldr	r3, [r4, #16]
 801405c:	6023      	str	r3, [r4, #0]
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	f043 0308 	orr.w	r3, r3, #8
 8014064:	81a3      	strh	r3, [r4, #12]
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	b94b      	cbnz	r3, 801407e <__swsetup_r+0x9a>
 801406a:	89a3      	ldrh	r3, [r4, #12]
 801406c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014074:	d003      	beq.n	801407e <__swsetup_r+0x9a>
 8014076:	4621      	mov	r1, r4
 8014078:	4630      	mov	r0, r6
 801407a:	f001 fb6d 	bl	8015758 <__smakebuf_r>
 801407e:	89a2      	ldrh	r2, [r4, #12]
 8014080:	f012 0301 	ands.w	r3, r2, #1
 8014084:	d00c      	beq.n	80140a0 <__swsetup_r+0xbc>
 8014086:	2300      	movs	r3, #0
 8014088:	60a3      	str	r3, [r4, #8]
 801408a:	6963      	ldr	r3, [r4, #20]
 801408c:	425b      	negs	r3, r3
 801408e:	61a3      	str	r3, [r4, #24]
 8014090:	6923      	ldr	r3, [r4, #16]
 8014092:	b953      	cbnz	r3, 80140aa <__swsetup_r+0xc6>
 8014094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014098:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801409c:	d1ba      	bne.n	8014014 <__swsetup_r+0x30>
 801409e:	bd70      	pop	{r4, r5, r6, pc}
 80140a0:	0792      	lsls	r2, r2, #30
 80140a2:	bf58      	it	pl
 80140a4:	6963      	ldrpl	r3, [r4, #20]
 80140a6:	60a3      	str	r3, [r4, #8]
 80140a8:	e7f2      	b.n	8014090 <__swsetup_r+0xac>
 80140aa:	2000      	movs	r0, #0
 80140ac:	e7f7      	b.n	801409e <__swsetup_r+0xba>
 80140ae:	bf00      	nop
 80140b0:	2000000c 	.word	0x2000000c
 80140b4:	08017988 	.word	0x08017988
 80140b8:	080179a8 	.word	0x080179a8
 80140bc:	08017968 	.word	0x08017968

080140c0 <_close_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4c06      	ldr	r4, [pc, #24]	; (80140dc <_close_r+0x1c>)
 80140c4:	2300      	movs	r3, #0
 80140c6:	4605      	mov	r5, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	6023      	str	r3, [r4, #0]
 80140cc:	f7f1 f865 	bl	800519a <_close>
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d102      	bne.n	80140da <_close_r+0x1a>
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	b103      	cbz	r3, 80140da <_close_r+0x1a>
 80140d8:	602b      	str	r3, [r5, #0]
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	20018234 	.word	0x20018234

080140e0 <quorem>:
 80140e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e4:	6903      	ldr	r3, [r0, #16]
 80140e6:	690c      	ldr	r4, [r1, #16]
 80140e8:	42a3      	cmp	r3, r4
 80140ea:	4680      	mov	r8, r0
 80140ec:	f2c0 8082 	blt.w	80141f4 <quorem+0x114>
 80140f0:	3c01      	subs	r4, #1
 80140f2:	f101 0714 	add.w	r7, r1, #20
 80140f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80140fa:	f100 0614 	add.w	r6, r0, #20
 80140fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014102:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014106:	eb06 030c 	add.w	r3, r6, ip
 801410a:	3501      	adds	r5, #1
 801410c:	eb07 090c 	add.w	r9, r7, ip
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	fbb0 f5f5 	udiv	r5, r0, r5
 8014116:	b395      	cbz	r5, 801417e <quorem+0x9e>
 8014118:	f04f 0a00 	mov.w	sl, #0
 801411c:	4638      	mov	r0, r7
 801411e:	46b6      	mov	lr, r6
 8014120:	46d3      	mov	fp, sl
 8014122:	f850 2b04 	ldr.w	r2, [r0], #4
 8014126:	b293      	uxth	r3, r2
 8014128:	fb05 a303 	mla	r3, r5, r3, sl
 801412c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014130:	b29b      	uxth	r3, r3
 8014132:	ebab 0303 	sub.w	r3, fp, r3
 8014136:	0c12      	lsrs	r2, r2, #16
 8014138:	f8de b000 	ldr.w	fp, [lr]
 801413c:	fb05 a202 	mla	r2, r5, r2, sl
 8014140:	fa13 f38b 	uxtah	r3, r3, fp
 8014144:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014148:	fa1f fb82 	uxth.w	fp, r2
 801414c:	f8de 2000 	ldr.w	r2, [lr]
 8014150:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014158:	b29b      	uxth	r3, r3
 801415a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801415e:	4581      	cmp	r9, r0
 8014160:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014164:	f84e 3b04 	str.w	r3, [lr], #4
 8014168:	d2db      	bcs.n	8014122 <quorem+0x42>
 801416a:	f856 300c 	ldr.w	r3, [r6, ip]
 801416e:	b933      	cbnz	r3, 801417e <quorem+0x9e>
 8014170:	9b01      	ldr	r3, [sp, #4]
 8014172:	3b04      	subs	r3, #4
 8014174:	429e      	cmp	r6, r3
 8014176:	461a      	mov	r2, r3
 8014178:	d330      	bcc.n	80141dc <quorem+0xfc>
 801417a:	f8c8 4010 	str.w	r4, [r8, #16]
 801417e:	4640      	mov	r0, r8
 8014180:	f001 fda2 	bl	8015cc8 <__mcmp>
 8014184:	2800      	cmp	r0, #0
 8014186:	db25      	blt.n	80141d4 <quorem+0xf4>
 8014188:	3501      	adds	r5, #1
 801418a:	4630      	mov	r0, r6
 801418c:	f04f 0c00 	mov.w	ip, #0
 8014190:	f857 2b04 	ldr.w	r2, [r7], #4
 8014194:	f8d0 e000 	ldr.w	lr, [r0]
 8014198:	b293      	uxth	r3, r2
 801419a:	ebac 0303 	sub.w	r3, ip, r3
 801419e:	0c12      	lsrs	r2, r2, #16
 80141a0:	fa13 f38e 	uxtah	r3, r3, lr
 80141a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80141a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141b2:	45b9      	cmp	r9, r7
 80141b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80141b8:	f840 3b04 	str.w	r3, [r0], #4
 80141bc:	d2e8      	bcs.n	8014190 <quorem+0xb0>
 80141be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80141c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80141c6:	b92a      	cbnz	r2, 80141d4 <quorem+0xf4>
 80141c8:	3b04      	subs	r3, #4
 80141ca:	429e      	cmp	r6, r3
 80141cc:	461a      	mov	r2, r3
 80141ce:	d30b      	bcc.n	80141e8 <quorem+0x108>
 80141d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80141d4:	4628      	mov	r0, r5
 80141d6:	b003      	add	sp, #12
 80141d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141dc:	6812      	ldr	r2, [r2, #0]
 80141de:	3b04      	subs	r3, #4
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	d1ca      	bne.n	801417a <quorem+0x9a>
 80141e4:	3c01      	subs	r4, #1
 80141e6:	e7c5      	b.n	8014174 <quorem+0x94>
 80141e8:	6812      	ldr	r2, [r2, #0]
 80141ea:	3b04      	subs	r3, #4
 80141ec:	2a00      	cmp	r2, #0
 80141ee:	d1ef      	bne.n	80141d0 <quorem+0xf0>
 80141f0:	3c01      	subs	r4, #1
 80141f2:	e7ea      	b.n	80141ca <quorem+0xea>
 80141f4:	2000      	movs	r0, #0
 80141f6:	e7ee      	b.n	80141d6 <quorem+0xf6>

080141f8 <_dtoa_r>:
 80141f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fc:	ec57 6b10 	vmov	r6, r7, d0
 8014200:	b097      	sub	sp, #92	; 0x5c
 8014202:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014204:	9106      	str	r1, [sp, #24]
 8014206:	4604      	mov	r4, r0
 8014208:	920b      	str	r2, [sp, #44]	; 0x2c
 801420a:	9312      	str	r3, [sp, #72]	; 0x48
 801420c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014210:	e9cd 6700 	strd	r6, r7, [sp]
 8014214:	b93d      	cbnz	r5, 8014226 <_dtoa_r+0x2e>
 8014216:	2010      	movs	r0, #16
 8014218:	f001 fade 	bl	80157d8 <malloc>
 801421c:	6260      	str	r0, [r4, #36]	; 0x24
 801421e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014222:	6005      	str	r5, [r0, #0]
 8014224:	60c5      	str	r5, [r0, #12]
 8014226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014228:	6819      	ldr	r1, [r3, #0]
 801422a:	b151      	cbz	r1, 8014242 <_dtoa_r+0x4a>
 801422c:	685a      	ldr	r2, [r3, #4]
 801422e:	604a      	str	r2, [r1, #4]
 8014230:	2301      	movs	r3, #1
 8014232:	4093      	lsls	r3, r2
 8014234:	608b      	str	r3, [r1, #8]
 8014236:	4620      	mov	r0, r4
 8014238:	f001 fb27 	bl	801588a <_Bfree>
 801423c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801423e:	2200      	movs	r2, #0
 8014240:	601a      	str	r2, [r3, #0]
 8014242:	1e3b      	subs	r3, r7, #0
 8014244:	bfbb      	ittet	lt
 8014246:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801424a:	9301      	strlt	r3, [sp, #4]
 801424c:	2300      	movge	r3, #0
 801424e:	2201      	movlt	r2, #1
 8014250:	bfac      	ite	ge
 8014252:	f8c8 3000 	strge.w	r3, [r8]
 8014256:	f8c8 2000 	strlt.w	r2, [r8]
 801425a:	4baf      	ldr	r3, [pc, #700]	; (8014518 <_dtoa_r+0x320>)
 801425c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014260:	ea33 0308 	bics.w	r3, r3, r8
 8014264:	d114      	bne.n	8014290 <_dtoa_r+0x98>
 8014266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014268:	f242 730f 	movw	r3, #9999	; 0x270f
 801426c:	6013      	str	r3, [r2, #0]
 801426e:	9b00      	ldr	r3, [sp, #0]
 8014270:	b923      	cbnz	r3, 801427c <_dtoa_r+0x84>
 8014272:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014276:	2800      	cmp	r0, #0
 8014278:	f000 8542 	beq.w	8014d00 <_dtoa_r+0xb08>
 801427c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801427e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801452c <_dtoa_r+0x334>
 8014282:	2b00      	cmp	r3, #0
 8014284:	f000 8544 	beq.w	8014d10 <_dtoa_r+0xb18>
 8014288:	f10b 0303 	add.w	r3, fp, #3
 801428c:	f000 bd3e 	b.w	8014d0c <_dtoa_r+0xb14>
 8014290:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014294:	2200      	movs	r2, #0
 8014296:	2300      	movs	r3, #0
 8014298:	4630      	mov	r0, r6
 801429a:	4639      	mov	r1, r7
 801429c:	f7ec fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 80142a0:	4681      	mov	r9, r0
 80142a2:	b168      	cbz	r0, 80142c0 <_dtoa_r+0xc8>
 80142a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142a6:	2301      	movs	r3, #1
 80142a8:	6013      	str	r3, [r2, #0]
 80142aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	f000 8524 	beq.w	8014cfa <_dtoa_r+0xb02>
 80142b2:	4b9a      	ldr	r3, [pc, #616]	; (801451c <_dtoa_r+0x324>)
 80142b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80142ba:	6013      	str	r3, [r2, #0]
 80142bc:	f000 bd28 	b.w	8014d10 <_dtoa_r+0xb18>
 80142c0:	aa14      	add	r2, sp, #80	; 0x50
 80142c2:	a915      	add	r1, sp, #84	; 0x54
 80142c4:	ec47 6b10 	vmov	d0, r6, r7
 80142c8:	4620      	mov	r0, r4
 80142ca:	f001 fdeb 	bl	8015ea4 <__d2b>
 80142ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80142d2:	9004      	str	r0, [sp, #16]
 80142d4:	2d00      	cmp	r5, #0
 80142d6:	d07c      	beq.n	80143d2 <_dtoa_r+0x1da>
 80142d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80142dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80142e0:	46b2      	mov	sl, r6
 80142e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80142e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80142ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80142ee:	2200      	movs	r2, #0
 80142f0:	4b8b      	ldr	r3, [pc, #556]	; (8014520 <_dtoa_r+0x328>)
 80142f2:	4650      	mov	r0, sl
 80142f4:	4659      	mov	r1, fp
 80142f6:	f7eb ffdf 	bl	80002b8 <__aeabi_dsub>
 80142fa:	a381      	add	r3, pc, #516	; (adr r3, 8014500 <_dtoa_r+0x308>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	f7ec f992 	bl	8000628 <__aeabi_dmul>
 8014304:	a380      	add	r3, pc, #512	; (adr r3, 8014508 <_dtoa_r+0x310>)
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	f7eb ffd7 	bl	80002bc <__adddf3>
 801430e:	4606      	mov	r6, r0
 8014310:	4628      	mov	r0, r5
 8014312:	460f      	mov	r7, r1
 8014314:	f7ec f91e 	bl	8000554 <__aeabi_i2d>
 8014318:	a37d      	add	r3, pc, #500	; (adr r3, 8014510 <_dtoa_r+0x318>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	f7ec f983 	bl	8000628 <__aeabi_dmul>
 8014322:	4602      	mov	r2, r0
 8014324:	460b      	mov	r3, r1
 8014326:	4630      	mov	r0, r6
 8014328:	4639      	mov	r1, r7
 801432a:	f7eb ffc7 	bl	80002bc <__adddf3>
 801432e:	4606      	mov	r6, r0
 8014330:	460f      	mov	r7, r1
 8014332:	f7ec fc29 	bl	8000b88 <__aeabi_d2iz>
 8014336:	2200      	movs	r2, #0
 8014338:	4682      	mov	sl, r0
 801433a:	2300      	movs	r3, #0
 801433c:	4630      	mov	r0, r6
 801433e:	4639      	mov	r1, r7
 8014340:	f7ec fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8014344:	b148      	cbz	r0, 801435a <_dtoa_r+0x162>
 8014346:	4650      	mov	r0, sl
 8014348:	f7ec f904 	bl	8000554 <__aeabi_i2d>
 801434c:	4632      	mov	r2, r6
 801434e:	463b      	mov	r3, r7
 8014350:	f7ec fbd2 	bl	8000af8 <__aeabi_dcmpeq>
 8014354:	b908      	cbnz	r0, 801435a <_dtoa_r+0x162>
 8014356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801435a:	f1ba 0f16 	cmp.w	sl, #22
 801435e:	d859      	bhi.n	8014414 <_dtoa_r+0x21c>
 8014360:	4970      	ldr	r1, [pc, #448]	; (8014524 <_dtoa_r+0x32c>)
 8014362:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014366:	e9dd 2300 	ldrd	r2, r3, [sp]
 801436a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801436e:	f7ec fbeb 	bl	8000b48 <__aeabi_dcmpgt>
 8014372:	2800      	cmp	r0, #0
 8014374:	d050      	beq.n	8014418 <_dtoa_r+0x220>
 8014376:	f10a 3aff 	add.w	sl, sl, #4294967295
 801437a:	2300      	movs	r3, #0
 801437c:	930f      	str	r3, [sp, #60]	; 0x3c
 801437e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014380:	1b5d      	subs	r5, r3, r5
 8014382:	f1b5 0801 	subs.w	r8, r5, #1
 8014386:	bf49      	itett	mi
 8014388:	f1c5 0301 	rsbmi	r3, r5, #1
 801438c:	2300      	movpl	r3, #0
 801438e:	9305      	strmi	r3, [sp, #20]
 8014390:	f04f 0800 	movmi.w	r8, #0
 8014394:	bf58      	it	pl
 8014396:	9305      	strpl	r3, [sp, #20]
 8014398:	f1ba 0f00 	cmp.w	sl, #0
 801439c:	db3e      	blt.n	801441c <_dtoa_r+0x224>
 801439e:	2300      	movs	r3, #0
 80143a0:	44d0      	add	r8, sl
 80143a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80143a6:	9307      	str	r3, [sp, #28]
 80143a8:	9b06      	ldr	r3, [sp, #24]
 80143aa:	2b09      	cmp	r3, #9
 80143ac:	f200 8090 	bhi.w	80144d0 <_dtoa_r+0x2d8>
 80143b0:	2b05      	cmp	r3, #5
 80143b2:	bfc4      	itt	gt
 80143b4:	3b04      	subgt	r3, #4
 80143b6:	9306      	strgt	r3, [sp, #24]
 80143b8:	9b06      	ldr	r3, [sp, #24]
 80143ba:	f1a3 0302 	sub.w	r3, r3, #2
 80143be:	bfcc      	ite	gt
 80143c0:	2500      	movgt	r5, #0
 80143c2:	2501      	movle	r5, #1
 80143c4:	2b03      	cmp	r3, #3
 80143c6:	f200 808f 	bhi.w	80144e8 <_dtoa_r+0x2f0>
 80143ca:	e8df f003 	tbb	[pc, r3]
 80143ce:	7f7d      	.short	0x7f7d
 80143d0:	7131      	.short	0x7131
 80143d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80143d6:	441d      	add	r5, r3
 80143d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80143dc:	2820      	cmp	r0, #32
 80143de:	dd13      	ble.n	8014408 <_dtoa_r+0x210>
 80143e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80143e4:	9b00      	ldr	r3, [sp, #0]
 80143e6:	fa08 f800 	lsl.w	r8, r8, r0
 80143ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80143ee:	fa23 f000 	lsr.w	r0, r3, r0
 80143f2:	ea48 0000 	orr.w	r0, r8, r0
 80143f6:	f7ec f89d 	bl	8000534 <__aeabi_ui2d>
 80143fa:	2301      	movs	r3, #1
 80143fc:	4682      	mov	sl, r0
 80143fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014402:	3d01      	subs	r5, #1
 8014404:	9313      	str	r3, [sp, #76]	; 0x4c
 8014406:	e772      	b.n	80142ee <_dtoa_r+0xf6>
 8014408:	9b00      	ldr	r3, [sp, #0]
 801440a:	f1c0 0020 	rsb	r0, r0, #32
 801440e:	fa03 f000 	lsl.w	r0, r3, r0
 8014412:	e7f0      	b.n	80143f6 <_dtoa_r+0x1fe>
 8014414:	2301      	movs	r3, #1
 8014416:	e7b1      	b.n	801437c <_dtoa_r+0x184>
 8014418:	900f      	str	r0, [sp, #60]	; 0x3c
 801441a:	e7b0      	b.n	801437e <_dtoa_r+0x186>
 801441c:	9b05      	ldr	r3, [sp, #20]
 801441e:	eba3 030a 	sub.w	r3, r3, sl
 8014422:	9305      	str	r3, [sp, #20]
 8014424:	f1ca 0300 	rsb	r3, sl, #0
 8014428:	9307      	str	r3, [sp, #28]
 801442a:	2300      	movs	r3, #0
 801442c:	930e      	str	r3, [sp, #56]	; 0x38
 801442e:	e7bb      	b.n	80143a8 <_dtoa_r+0x1b0>
 8014430:	2301      	movs	r3, #1
 8014432:	930a      	str	r3, [sp, #40]	; 0x28
 8014434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014436:	2b00      	cmp	r3, #0
 8014438:	dd59      	ble.n	80144ee <_dtoa_r+0x2f6>
 801443a:	9302      	str	r3, [sp, #8]
 801443c:	4699      	mov	r9, r3
 801443e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014440:	2200      	movs	r2, #0
 8014442:	6072      	str	r2, [r6, #4]
 8014444:	2204      	movs	r2, #4
 8014446:	f102 0014 	add.w	r0, r2, #20
 801444a:	4298      	cmp	r0, r3
 801444c:	6871      	ldr	r1, [r6, #4]
 801444e:	d953      	bls.n	80144f8 <_dtoa_r+0x300>
 8014450:	4620      	mov	r0, r4
 8014452:	f001 f9e6 	bl	8015822 <_Balloc>
 8014456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014458:	6030      	str	r0, [r6, #0]
 801445a:	f1b9 0f0e 	cmp.w	r9, #14
 801445e:	f8d3 b000 	ldr.w	fp, [r3]
 8014462:	f200 80e6 	bhi.w	8014632 <_dtoa_r+0x43a>
 8014466:	2d00      	cmp	r5, #0
 8014468:	f000 80e3 	beq.w	8014632 <_dtoa_r+0x43a>
 801446c:	ed9d 7b00 	vldr	d7, [sp]
 8014470:	f1ba 0f00 	cmp.w	sl, #0
 8014474:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014478:	dd74      	ble.n	8014564 <_dtoa_r+0x36c>
 801447a:	4a2a      	ldr	r2, [pc, #168]	; (8014524 <_dtoa_r+0x32c>)
 801447c:	f00a 030f 	and.w	r3, sl, #15
 8014480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014484:	ed93 7b00 	vldr	d7, [r3]
 8014488:	ea4f 162a 	mov.w	r6, sl, asr #4
 801448c:	06f0      	lsls	r0, r6, #27
 801448e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014492:	d565      	bpl.n	8014560 <_dtoa_r+0x368>
 8014494:	4b24      	ldr	r3, [pc, #144]	; (8014528 <_dtoa_r+0x330>)
 8014496:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801449a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801449e:	f7ec f9ed 	bl	800087c <__aeabi_ddiv>
 80144a2:	e9cd 0100 	strd	r0, r1, [sp]
 80144a6:	f006 060f 	and.w	r6, r6, #15
 80144aa:	2503      	movs	r5, #3
 80144ac:	4f1e      	ldr	r7, [pc, #120]	; (8014528 <_dtoa_r+0x330>)
 80144ae:	e04c      	b.n	801454a <_dtoa_r+0x352>
 80144b0:	2301      	movs	r3, #1
 80144b2:	930a      	str	r3, [sp, #40]	; 0x28
 80144b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144b6:	4453      	add	r3, sl
 80144b8:	f103 0901 	add.w	r9, r3, #1
 80144bc:	9302      	str	r3, [sp, #8]
 80144be:	464b      	mov	r3, r9
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	bfb8      	it	lt
 80144c4:	2301      	movlt	r3, #1
 80144c6:	e7ba      	b.n	801443e <_dtoa_r+0x246>
 80144c8:	2300      	movs	r3, #0
 80144ca:	e7b2      	b.n	8014432 <_dtoa_r+0x23a>
 80144cc:	2300      	movs	r3, #0
 80144ce:	e7f0      	b.n	80144b2 <_dtoa_r+0x2ba>
 80144d0:	2501      	movs	r5, #1
 80144d2:	2300      	movs	r3, #0
 80144d4:	9306      	str	r3, [sp, #24]
 80144d6:	950a      	str	r5, [sp, #40]	; 0x28
 80144d8:	f04f 33ff 	mov.w	r3, #4294967295
 80144dc:	9302      	str	r3, [sp, #8]
 80144de:	4699      	mov	r9, r3
 80144e0:	2200      	movs	r2, #0
 80144e2:	2312      	movs	r3, #18
 80144e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80144e6:	e7aa      	b.n	801443e <_dtoa_r+0x246>
 80144e8:	2301      	movs	r3, #1
 80144ea:	930a      	str	r3, [sp, #40]	; 0x28
 80144ec:	e7f4      	b.n	80144d8 <_dtoa_r+0x2e0>
 80144ee:	2301      	movs	r3, #1
 80144f0:	9302      	str	r3, [sp, #8]
 80144f2:	4699      	mov	r9, r3
 80144f4:	461a      	mov	r2, r3
 80144f6:	e7f5      	b.n	80144e4 <_dtoa_r+0x2ec>
 80144f8:	3101      	adds	r1, #1
 80144fa:	6071      	str	r1, [r6, #4]
 80144fc:	0052      	lsls	r2, r2, #1
 80144fe:	e7a2      	b.n	8014446 <_dtoa_r+0x24e>
 8014500:	636f4361 	.word	0x636f4361
 8014504:	3fd287a7 	.word	0x3fd287a7
 8014508:	8b60c8b3 	.word	0x8b60c8b3
 801450c:	3fc68a28 	.word	0x3fc68a28
 8014510:	509f79fb 	.word	0x509f79fb
 8014514:	3fd34413 	.word	0x3fd34413
 8014518:	7ff00000 	.word	0x7ff00000
 801451c:	08017afc 	.word	0x08017afc
 8014520:	3ff80000 	.word	0x3ff80000
 8014524:	08017a00 	.word	0x08017a00
 8014528:	080179d8 	.word	0x080179d8
 801452c:	08017961 	.word	0x08017961
 8014530:	07f1      	lsls	r1, r6, #31
 8014532:	d508      	bpl.n	8014546 <_dtoa_r+0x34e>
 8014534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014538:	e9d7 2300 	ldrd	r2, r3, [r7]
 801453c:	f7ec f874 	bl	8000628 <__aeabi_dmul>
 8014540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014544:	3501      	adds	r5, #1
 8014546:	1076      	asrs	r6, r6, #1
 8014548:	3708      	adds	r7, #8
 801454a:	2e00      	cmp	r6, #0
 801454c:	d1f0      	bne.n	8014530 <_dtoa_r+0x338>
 801454e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014556:	f7ec f991 	bl	800087c <__aeabi_ddiv>
 801455a:	e9cd 0100 	strd	r0, r1, [sp]
 801455e:	e01a      	b.n	8014596 <_dtoa_r+0x39e>
 8014560:	2502      	movs	r5, #2
 8014562:	e7a3      	b.n	80144ac <_dtoa_r+0x2b4>
 8014564:	f000 80a0 	beq.w	80146a8 <_dtoa_r+0x4b0>
 8014568:	f1ca 0600 	rsb	r6, sl, #0
 801456c:	4b9f      	ldr	r3, [pc, #636]	; (80147ec <_dtoa_r+0x5f4>)
 801456e:	4fa0      	ldr	r7, [pc, #640]	; (80147f0 <_dtoa_r+0x5f8>)
 8014570:	f006 020f 	and.w	r2, r6, #15
 8014574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014580:	f7ec f852 	bl	8000628 <__aeabi_dmul>
 8014584:	e9cd 0100 	strd	r0, r1, [sp]
 8014588:	1136      	asrs	r6, r6, #4
 801458a:	2300      	movs	r3, #0
 801458c:	2502      	movs	r5, #2
 801458e:	2e00      	cmp	r6, #0
 8014590:	d17f      	bne.n	8014692 <_dtoa_r+0x49a>
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1e1      	bne.n	801455a <_dtoa_r+0x362>
 8014596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014598:	2b00      	cmp	r3, #0
 801459a:	f000 8087 	beq.w	80146ac <_dtoa_r+0x4b4>
 801459e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80145a2:	2200      	movs	r2, #0
 80145a4:	4b93      	ldr	r3, [pc, #588]	; (80147f4 <_dtoa_r+0x5fc>)
 80145a6:	4630      	mov	r0, r6
 80145a8:	4639      	mov	r1, r7
 80145aa:	f7ec faaf 	bl	8000b0c <__aeabi_dcmplt>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d07c      	beq.n	80146ac <_dtoa_r+0x4b4>
 80145b2:	f1b9 0f00 	cmp.w	r9, #0
 80145b6:	d079      	beq.n	80146ac <_dtoa_r+0x4b4>
 80145b8:	9b02      	ldr	r3, [sp, #8]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	dd35      	ble.n	801462a <_dtoa_r+0x432>
 80145be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80145c2:	9308      	str	r3, [sp, #32]
 80145c4:	4639      	mov	r1, r7
 80145c6:	2200      	movs	r2, #0
 80145c8:	4b8b      	ldr	r3, [pc, #556]	; (80147f8 <_dtoa_r+0x600>)
 80145ca:	4630      	mov	r0, r6
 80145cc:	f7ec f82c 	bl	8000628 <__aeabi_dmul>
 80145d0:	e9cd 0100 	strd	r0, r1, [sp]
 80145d4:	9f02      	ldr	r7, [sp, #8]
 80145d6:	3501      	adds	r5, #1
 80145d8:	4628      	mov	r0, r5
 80145da:	f7eb ffbb 	bl	8000554 <__aeabi_i2d>
 80145de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145e2:	f7ec f821 	bl	8000628 <__aeabi_dmul>
 80145e6:	2200      	movs	r2, #0
 80145e8:	4b84      	ldr	r3, [pc, #528]	; (80147fc <_dtoa_r+0x604>)
 80145ea:	f7eb fe67 	bl	80002bc <__adddf3>
 80145ee:	4605      	mov	r5, r0
 80145f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80145f4:	2f00      	cmp	r7, #0
 80145f6:	d15d      	bne.n	80146b4 <_dtoa_r+0x4bc>
 80145f8:	2200      	movs	r2, #0
 80145fa:	4b81      	ldr	r3, [pc, #516]	; (8014800 <_dtoa_r+0x608>)
 80145fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014600:	f7eb fe5a 	bl	80002b8 <__aeabi_dsub>
 8014604:	462a      	mov	r2, r5
 8014606:	4633      	mov	r3, r6
 8014608:	e9cd 0100 	strd	r0, r1, [sp]
 801460c:	f7ec fa9c 	bl	8000b48 <__aeabi_dcmpgt>
 8014610:	2800      	cmp	r0, #0
 8014612:	f040 8288 	bne.w	8014b26 <_dtoa_r+0x92e>
 8014616:	462a      	mov	r2, r5
 8014618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801461c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014620:	f7ec fa74 	bl	8000b0c <__aeabi_dcmplt>
 8014624:	2800      	cmp	r0, #0
 8014626:	f040 827c 	bne.w	8014b22 <_dtoa_r+0x92a>
 801462a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801462e:	e9cd 2300 	strd	r2, r3, [sp]
 8014632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014634:	2b00      	cmp	r3, #0
 8014636:	f2c0 8150 	blt.w	80148da <_dtoa_r+0x6e2>
 801463a:	f1ba 0f0e 	cmp.w	sl, #14
 801463e:	f300 814c 	bgt.w	80148da <_dtoa_r+0x6e2>
 8014642:	4b6a      	ldr	r3, [pc, #424]	; (80147ec <_dtoa_r+0x5f4>)
 8014644:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014648:	ed93 7b00 	vldr	d7, [r3]
 801464c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801464e:	2b00      	cmp	r3, #0
 8014650:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014654:	f280 80d8 	bge.w	8014808 <_dtoa_r+0x610>
 8014658:	f1b9 0f00 	cmp.w	r9, #0
 801465c:	f300 80d4 	bgt.w	8014808 <_dtoa_r+0x610>
 8014660:	f040 825e 	bne.w	8014b20 <_dtoa_r+0x928>
 8014664:	2200      	movs	r2, #0
 8014666:	4b66      	ldr	r3, [pc, #408]	; (8014800 <_dtoa_r+0x608>)
 8014668:	ec51 0b17 	vmov	r0, r1, d7
 801466c:	f7eb ffdc 	bl	8000628 <__aeabi_dmul>
 8014670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014674:	f7ec fa5e 	bl	8000b34 <__aeabi_dcmpge>
 8014678:	464f      	mov	r7, r9
 801467a:	464e      	mov	r6, r9
 801467c:	2800      	cmp	r0, #0
 801467e:	f040 8234 	bne.w	8014aea <_dtoa_r+0x8f2>
 8014682:	2331      	movs	r3, #49	; 0x31
 8014684:	f10b 0501 	add.w	r5, fp, #1
 8014688:	f88b 3000 	strb.w	r3, [fp]
 801468c:	f10a 0a01 	add.w	sl, sl, #1
 8014690:	e22f      	b.n	8014af2 <_dtoa_r+0x8fa>
 8014692:	07f2      	lsls	r2, r6, #31
 8014694:	d505      	bpl.n	80146a2 <_dtoa_r+0x4aa>
 8014696:	e9d7 2300 	ldrd	r2, r3, [r7]
 801469a:	f7eb ffc5 	bl	8000628 <__aeabi_dmul>
 801469e:	3501      	adds	r5, #1
 80146a0:	2301      	movs	r3, #1
 80146a2:	1076      	asrs	r6, r6, #1
 80146a4:	3708      	adds	r7, #8
 80146a6:	e772      	b.n	801458e <_dtoa_r+0x396>
 80146a8:	2502      	movs	r5, #2
 80146aa:	e774      	b.n	8014596 <_dtoa_r+0x39e>
 80146ac:	f8cd a020 	str.w	sl, [sp, #32]
 80146b0:	464f      	mov	r7, r9
 80146b2:	e791      	b.n	80145d8 <_dtoa_r+0x3e0>
 80146b4:	4b4d      	ldr	r3, [pc, #308]	; (80147ec <_dtoa_r+0x5f4>)
 80146b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80146ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80146be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d047      	beq.n	8014754 <_dtoa_r+0x55c>
 80146c4:	4602      	mov	r2, r0
 80146c6:	460b      	mov	r3, r1
 80146c8:	2000      	movs	r0, #0
 80146ca:	494e      	ldr	r1, [pc, #312]	; (8014804 <_dtoa_r+0x60c>)
 80146cc:	f7ec f8d6 	bl	800087c <__aeabi_ddiv>
 80146d0:	462a      	mov	r2, r5
 80146d2:	4633      	mov	r3, r6
 80146d4:	f7eb fdf0 	bl	80002b8 <__aeabi_dsub>
 80146d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80146dc:	465d      	mov	r5, fp
 80146de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146e2:	f7ec fa51 	bl	8000b88 <__aeabi_d2iz>
 80146e6:	4606      	mov	r6, r0
 80146e8:	f7eb ff34 	bl	8000554 <__aeabi_i2d>
 80146ec:	4602      	mov	r2, r0
 80146ee:	460b      	mov	r3, r1
 80146f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146f4:	f7eb fde0 	bl	80002b8 <__aeabi_dsub>
 80146f8:	3630      	adds	r6, #48	; 0x30
 80146fa:	f805 6b01 	strb.w	r6, [r5], #1
 80146fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014702:	e9cd 0100 	strd	r0, r1, [sp]
 8014706:	f7ec fa01 	bl	8000b0c <__aeabi_dcmplt>
 801470a:	2800      	cmp	r0, #0
 801470c:	d163      	bne.n	80147d6 <_dtoa_r+0x5de>
 801470e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014712:	2000      	movs	r0, #0
 8014714:	4937      	ldr	r1, [pc, #220]	; (80147f4 <_dtoa_r+0x5fc>)
 8014716:	f7eb fdcf 	bl	80002b8 <__aeabi_dsub>
 801471a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801471e:	f7ec f9f5 	bl	8000b0c <__aeabi_dcmplt>
 8014722:	2800      	cmp	r0, #0
 8014724:	f040 80b7 	bne.w	8014896 <_dtoa_r+0x69e>
 8014728:	eba5 030b 	sub.w	r3, r5, fp
 801472c:	429f      	cmp	r7, r3
 801472e:	f77f af7c 	ble.w	801462a <_dtoa_r+0x432>
 8014732:	2200      	movs	r2, #0
 8014734:	4b30      	ldr	r3, [pc, #192]	; (80147f8 <_dtoa_r+0x600>)
 8014736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801473a:	f7eb ff75 	bl	8000628 <__aeabi_dmul>
 801473e:	2200      	movs	r2, #0
 8014740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014744:	4b2c      	ldr	r3, [pc, #176]	; (80147f8 <_dtoa_r+0x600>)
 8014746:	e9dd 0100 	ldrd	r0, r1, [sp]
 801474a:	f7eb ff6d 	bl	8000628 <__aeabi_dmul>
 801474e:	e9cd 0100 	strd	r0, r1, [sp]
 8014752:	e7c4      	b.n	80146de <_dtoa_r+0x4e6>
 8014754:	462a      	mov	r2, r5
 8014756:	4633      	mov	r3, r6
 8014758:	f7eb ff66 	bl	8000628 <__aeabi_dmul>
 801475c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014760:	eb0b 0507 	add.w	r5, fp, r7
 8014764:	465e      	mov	r6, fp
 8014766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801476a:	f7ec fa0d 	bl	8000b88 <__aeabi_d2iz>
 801476e:	4607      	mov	r7, r0
 8014770:	f7eb fef0 	bl	8000554 <__aeabi_i2d>
 8014774:	3730      	adds	r7, #48	; 0x30
 8014776:	4602      	mov	r2, r0
 8014778:	460b      	mov	r3, r1
 801477a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801477e:	f7eb fd9b 	bl	80002b8 <__aeabi_dsub>
 8014782:	f806 7b01 	strb.w	r7, [r6], #1
 8014786:	42ae      	cmp	r6, r5
 8014788:	e9cd 0100 	strd	r0, r1, [sp]
 801478c:	f04f 0200 	mov.w	r2, #0
 8014790:	d126      	bne.n	80147e0 <_dtoa_r+0x5e8>
 8014792:	4b1c      	ldr	r3, [pc, #112]	; (8014804 <_dtoa_r+0x60c>)
 8014794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014798:	f7eb fd90 	bl	80002bc <__adddf3>
 801479c:	4602      	mov	r2, r0
 801479e:	460b      	mov	r3, r1
 80147a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147a4:	f7ec f9d0 	bl	8000b48 <__aeabi_dcmpgt>
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d174      	bne.n	8014896 <_dtoa_r+0x69e>
 80147ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147b0:	2000      	movs	r0, #0
 80147b2:	4914      	ldr	r1, [pc, #80]	; (8014804 <_dtoa_r+0x60c>)
 80147b4:	f7eb fd80 	bl	80002b8 <__aeabi_dsub>
 80147b8:	4602      	mov	r2, r0
 80147ba:	460b      	mov	r3, r1
 80147bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147c0:	f7ec f9a4 	bl	8000b0c <__aeabi_dcmplt>
 80147c4:	2800      	cmp	r0, #0
 80147c6:	f43f af30 	beq.w	801462a <_dtoa_r+0x432>
 80147ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80147ce:	2b30      	cmp	r3, #48	; 0x30
 80147d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80147d4:	d002      	beq.n	80147dc <_dtoa_r+0x5e4>
 80147d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80147da:	e04a      	b.n	8014872 <_dtoa_r+0x67a>
 80147dc:	4615      	mov	r5, r2
 80147de:	e7f4      	b.n	80147ca <_dtoa_r+0x5d2>
 80147e0:	4b05      	ldr	r3, [pc, #20]	; (80147f8 <_dtoa_r+0x600>)
 80147e2:	f7eb ff21 	bl	8000628 <__aeabi_dmul>
 80147e6:	e9cd 0100 	strd	r0, r1, [sp]
 80147ea:	e7bc      	b.n	8014766 <_dtoa_r+0x56e>
 80147ec:	08017a00 	.word	0x08017a00
 80147f0:	080179d8 	.word	0x080179d8
 80147f4:	3ff00000 	.word	0x3ff00000
 80147f8:	40240000 	.word	0x40240000
 80147fc:	401c0000 	.word	0x401c0000
 8014800:	40140000 	.word	0x40140000
 8014804:	3fe00000 	.word	0x3fe00000
 8014808:	e9dd 6700 	ldrd	r6, r7, [sp]
 801480c:	465d      	mov	r5, fp
 801480e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014812:	4630      	mov	r0, r6
 8014814:	4639      	mov	r1, r7
 8014816:	f7ec f831 	bl	800087c <__aeabi_ddiv>
 801481a:	f7ec f9b5 	bl	8000b88 <__aeabi_d2iz>
 801481e:	4680      	mov	r8, r0
 8014820:	f7eb fe98 	bl	8000554 <__aeabi_i2d>
 8014824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014828:	f7eb fefe 	bl	8000628 <__aeabi_dmul>
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	4630      	mov	r0, r6
 8014832:	4639      	mov	r1, r7
 8014834:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014838:	f7eb fd3e 	bl	80002b8 <__aeabi_dsub>
 801483c:	f805 6b01 	strb.w	r6, [r5], #1
 8014840:	eba5 060b 	sub.w	r6, r5, fp
 8014844:	45b1      	cmp	r9, r6
 8014846:	4602      	mov	r2, r0
 8014848:	460b      	mov	r3, r1
 801484a:	d139      	bne.n	80148c0 <_dtoa_r+0x6c8>
 801484c:	f7eb fd36 	bl	80002bc <__adddf3>
 8014850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014854:	4606      	mov	r6, r0
 8014856:	460f      	mov	r7, r1
 8014858:	f7ec f976 	bl	8000b48 <__aeabi_dcmpgt>
 801485c:	b9c8      	cbnz	r0, 8014892 <_dtoa_r+0x69a>
 801485e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	f7ec f947 	bl	8000af8 <__aeabi_dcmpeq>
 801486a:	b110      	cbz	r0, 8014872 <_dtoa_r+0x67a>
 801486c:	f018 0f01 	tst.w	r8, #1
 8014870:	d10f      	bne.n	8014892 <_dtoa_r+0x69a>
 8014872:	9904      	ldr	r1, [sp, #16]
 8014874:	4620      	mov	r0, r4
 8014876:	f001 f808 	bl	801588a <_Bfree>
 801487a:	2300      	movs	r3, #0
 801487c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801487e:	702b      	strb	r3, [r5, #0]
 8014880:	f10a 0301 	add.w	r3, sl, #1
 8014884:	6013      	str	r3, [r2, #0]
 8014886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014888:	2b00      	cmp	r3, #0
 801488a:	f000 8241 	beq.w	8014d10 <_dtoa_r+0xb18>
 801488e:	601d      	str	r5, [r3, #0]
 8014890:	e23e      	b.n	8014d10 <_dtoa_r+0xb18>
 8014892:	f8cd a020 	str.w	sl, [sp, #32]
 8014896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801489a:	2a39      	cmp	r2, #57	; 0x39
 801489c:	f105 33ff 	add.w	r3, r5, #4294967295
 80148a0:	d108      	bne.n	80148b4 <_dtoa_r+0x6bc>
 80148a2:	459b      	cmp	fp, r3
 80148a4:	d10a      	bne.n	80148bc <_dtoa_r+0x6c4>
 80148a6:	9b08      	ldr	r3, [sp, #32]
 80148a8:	3301      	adds	r3, #1
 80148aa:	9308      	str	r3, [sp, #32]
 80148ac:	2330      	movs	r3, #48	; 0x30
 80148ae:	f88b 3000 	strb.w	r3, [fp]
 80148b2:	465b      	mov	r3, fp
 80148b4:	781a      	ldrb	r2, [r3, #0]
 80148b6:	3201      	adds	r2, #1
 80148b8:	701a      	strb	r2, [r3, #0]
 80148ba:	e78c      	b.n	80147d6 <_dtoa_r+0x5de>
 80148bc:	461d      	mov	r5, r3
 80148be:	e7ea      	b.n	8014896 <_dtoa_r+0x69e>
 80148c0:	2200      	movs	r2, #0
 80148c2:	4b9b      	ldr	r3, [pc, #620]	; (8014b30 <_dtoa_r+0x938>)
 80148c4:	f7eb feb0 	bl	8000628 <__aeabi_dmul>
 80148c8:	2200      	movs	r2, #0
 80148ca:	2300      	movs	r3, #0
 80148cc:	4606      	mov	r6, r0
 80148ce:	460f      	mov	r7, r1
 80148d0:	f7ec f912 	bl	8000af8 <__aeabi_dcmpeq>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d09a      	beq.n	801480e <_dtoa_r+0x616>
 80148d8:	e7cb      	b.n	8014872 <_dtoa_r+0x67a>
 80148da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148dc:	2a00      	cmp	r2, #0
 80148de:	f000 808b 	beq.w	80149f8 <_dtoa_r+0x800>
 80148e2:	9a06      	ldr	r2, [sp, #24]
 80148e4:	2a01      	cmp	r2, #1
 80148e6:	dc6e      	bgt.n	80149c6 <_dtoa_r+0x7ce>
 80148e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80148ea:	2a00      	cmp	r2, #0
 80148ec:	d067      	beq.n	80149be <_dtoa_r+0x7c6>
 80148ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80148f2:	9f07      	ldr	r7, [sp, #28]
 80148f4:	9d05      	ldr	r5, [sp, #20]
 80148f6:	9a05      	ldr	r2, [sp, #20]
 80148f8:	2101      	movs	r1, #1
 80148fa:	441a      	add	r2, r3
 80148fc:	4620      	mov	r0, r4
 80148fe:	9205      	str	r2, [sp, #20]
 8014900:	4498      	add	r8, r3
 8014902:	f001 f8a0 	bl	8015a46 <__i2b>
 8014906:	4606      	mov	r6, r0
 8014908:	2d00      	cmp	r5, #0
 801490a:	dd0c      	ble.n	8014926 <_dtoa_r+0x72e>
 801490c:	f1b8 0f00 	cmp.w	r8, #0
 8014910:	dd09      	ble.n	8014926 <_dtoa_r+0x72e>
 8014912:	4545      	cmp	r5, r8
 8014914:	9a05      	ldr	r2, [sp, #20]
 8014916:	462b      	mov	r3, r5
 8014918:	bfa8      	it	ge
 801491a:	4643      	movge	r3, r8
 801491c:	1ad2      	subs	r2, r2, r3
 801491e:	9205      	str	r2, [sp, #20]
 8014920:	1aed      	subs	r5, r5, r3
 8014922:	eba8 0803 	sub.w	r8, r8, r3
 8014926:	9b07      	ldr	r3, [sp, #28]
 8014928:	b1eb      	cbz	r3, 8014966 <_dtoa_r+0x76e>
 801492a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801492c:	2b00      	cmp	r3, #0
 801492e:	d067      	beq.n	8014a00 <_dtoa_r+0x808>
 8014930:	b18f      	cbz	r7, 8014956 <_dtoa_r+0x75e>
 8014932:	4631      	mov	r1, r6
 8014934:	463a      	mov	r2, r7
 8014936:	4620      	mov	r0, r4
 8014938:	f001 f924 	bl	8015b84 <__pow5mult>
 801493c:	9a04      	ldr	r2, [sp, #16]
 801493e:	4601      	mov	r1, r0
 8014940:	4606      	mov	r6, r0
 8014942:	4620      	mov	r0, r4
 8014944:	f001 f888 	bl	8015a58 <__multiply>
 8014948:	9904      	ldr	r1, [sp, #16]
 801494a:	9008      	str	r0, [sp, #32]
 801494c:	4620      	mov	r0, r4
 801494e:	f000 ff9c 	bl	801588a <_Bfree>
 8014952:	9b08      	ldr	r3, [sp, #32]
 8014954:	9304      	str	r3, [sp, #16]
 8014956:	9b07      	ldr	r3, [sp, #28]
 8014958:	1bda      	subs	r2, r3, r7
 801495a:	d004      	beq.n	8014966 <_dtoa_r+0x76e>
 801495c:	9904      	ldr	r1, [sp, #16]
 801495e:	4620      	mov	r0, r4
 8014960:	f001 f910 	bl	8015b84 <__pow5mult>
 8014964:	9004      	str	r0, [sp, #16]
 8014966:	2101      	movs	r1, #1
 8014968:	4620      	mov	r0, r4
 801496a:	f001 f86c 	bl	8015a46 <__i2b>
 801496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014970:	4607      	mov	r7, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	f000 81d0 	beq.w	8014d18 <_dtoa_r+0xb20>
 8014978:	461a      	mov	r2, r3
 801497a:	4601      	mov	r1, r0
 801497c:	4620      	mov	r0, r4
 801497e:	f001 f901 	bl	8015b84 <__pow5mult>
 8014982:	9b06      	ldr	r3, [sp, #24]
 8014984:	2b01      	cmp	r3, #1
 8014986:	4607      	mov	r7, r0
 8014988:	dc40      	bgt.n	8014a0c <_dtoa_r+0x814>
 801498a:	9b00      	ldr	r3, [sp, #0]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d139      	bne.n	8014a04 <_dtoa_r+0x80c>
 8014990:	9b01      	ldr	r3, [sp, #4]
 8014992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014996:	2b00      	cmp	r3, #0
 8014998:	d136      	bne.n	8014a08 <_dtoa_r+0x810>
 801499a:	9b01      	ldr	r3, [sp, #4]
 801499c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149a0:	0d1b      	lsrs	r3, r3, #20
 80149a2:	051b      	lsls	r3, r3, #20
 80149a4:	b12b      	cbz	r3, 80149b2 <_dtoa_r+0x7ba>
 80149a6:	9b05      	ldr	r3, [sp, #20]
 80149a8:	3301      	adds	r3, #1
 80149aa:	9305      	str	r3, [sp, #20]
 80149ac:	f108 0801 	add.w	r8, r8, #1
 80149b0:	2301      	movs	r3, #1
 80149b2:	9307      	str	r3, [sp, #28]
 80149b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d12a      	bne.n	8014a10 <_dtoa_r+0x818>
 80149ba:	2001      	movs	r0, #1
 80149bc:	e030      	b.n	8014a20 <_dtoa_r+0x828>
 80149be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80149c4:	e795      	b.n	80148f2 <_dtoa_r+0x6fa>
 80149c6:	9b07      	ldr	r3, [sp, #28]
 80149c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80149cc:	42bb      	cmp	r3, r7
 80149ce:	bfbf      	itttt	lt
 80149d0:	9b07      	ldrlt	r3, [sp, #28]
 80149d2:	9707      	strlt	r7, [sp, #28]
 80149d4:	1afa      	sublt	r2, r7, r3
 80149d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80149d8:	bfbb      	ittet	lt
 80149da:	189b      	addlt	r3, r3, r2
 80149dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80149de:	1bdf      	subge	r7, r3, r7
 80149e0:	2700      	movlt	r7, #0
 80149e2:	f1b9 0f00 	cmp.w	r9, #0
 80149e6:	bfb5      	itete	lt
 80149e8:	9b05      	ldrlt	r3, [sp, #20]
 80149ea:	9d05      	ldrge	r5, [sp, #20]
 80149ec:	eba3 0509 	sublt.w	r5, r3, r9
 80149f0:	464b      	movge	r3, r9
 80149f2:	bfb8      	it	lt
 80149f4:	2300      	movlt	r3, #0
 80149f6:	e77e      	b.n	80148f6 <_dtoa_r+0x6fe>
 80149f8:	9f07      	ldr	r7, [sp, #28]
 80149fa:	9d05      	ldr	r5, [sp, #20]
 80149fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80149fe:	e783      	b.n	8014908 <_dtoa_r+0x710>
 8014a00:	9a07      	ldr	r2, [sp, #28]
 8014a02:	e7ab      	b.n	801495c <_dtoa_r+0x764>
 8014a04:	2300      	movs	r3, #0
 8014a06:	e7d4      	b.n	80149b2 <_dtoa_r+0x7ba>
 8014a08:	9b00      	ldr	r3, [sp, #0]
 8014a0a:	e7d2      	b.n	80149b2 <_dtoa_r+0x7ba>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	9307      	str	r3, [sp, #28]
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a16:	6918      	ldr	r0, [r3, #16]
 8014a18:	f000 ffc7 	bl	80159aa <__hi0bits>
 8014a1c:	f1c0 0020 	rsb	r0, r0, #32
 8014a20:	4440      	add	r0, r8
 8014a22:	f010 001f 	ands.w	r0, r0, #31
 8014a26:	d047      	beq.n	8014ab8 <_dtoa_r+0x8c0>
 8014a28:	f1c0 0320 	rsb	r3, r0, #32
 8014a2c:	2b04      	cmp	r3, #4
 8014a2e:	dd3b      	ble.n	8014aa8 <_dtoa_r+0x8b0>
 8014a30:	9b05      	ldr	r3, [sp, #20]
 8014a32:	f1c0 001c 	rsb	r0, r0, #28
 8014a36:	4403      	add	r3, r0
 8014a38:	9305      	str	r3, [sp, #20]
 8014a3a:	4405      	add	r5, r0
 8014a3c:	4480      	add	r8, r0
 8014a3e:	9b05      	ldr	r3, [sp, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	dd05      	ble.n	8014a50 <_dtoa_r+0x858>
 8014a44:	461a      	mov	r2, r3
 8014a46:	9904      	ldr	r1, [sp, #16]
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f001 f8e9 	bl	8015c20 <__lshift>
 8014a4e:	9004      	str	r0, [sp, #16]
 8014a50:	f1b8 0f00 	cmp.w	r8, #0
 8014a54:	dd05      	ble.n	8014a62 <_dtoa_r+0x86a>
 8014a56:	4639      	mov	r1, r7
 8014a58:	4642      	mov	r2, r8
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f001 f8e0 	bl	8015c20 <__lshift>
 8014a60:	4607      	mov	r7, r0
 8014a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a64:	b353      	cbz	r3, 8014abc <_dtoa_r+0x8c4>
 8014a66:	4639      	mov	r1, r7
 8014a68:	9804      	ldr	r0, [sp, #16]
 8014a6a:	f001 f92d 	bl	8015cc8 <__mcmp>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	da24      	bge.n	8014abc <_dtoa_r+0x8c4>
 8014a72:	2300      	movs	r3, #0
 8014a74:	220a      	movs	r2, #10
 8014a76:	9904      	ldr	r1, [sp, #16]
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f000 ff1d 	bl	80158b8 <__multadd>
 8014a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a80:	9004      	str	r0, [sp, #16]
 8014a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	f000 814d 	beq.w	8014d26 <_dtoa_r+0xb2e>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4631      	mov	r1, r6
 8014a90:	220a      	movs	r2, #10
 8014a92:	4620      	mov	r0, r4
 8014a94:	f000 ff10 	bl	80158b8 <__multadd>
 8014a98:	9b02      	ldr	r3, [sp, #8]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	4606      	mov	r6, r0
 8014a9e:	dc4f      	bgt.n	8014b40 <_dtoa_r+0x948>
 8014aa0:	9b06      	ldr	r3, [sp, #24]
 8014aa2:	2b02      	cmp	r3, #2
 8014aa4:	dd4c      	ble.n	8014b40 <_dtoa_r+0x948>
 8014aa6:	e011      	b.n	8014acc <_dtoa_r+0x8d4>
 8014aa8:	d0c9      	beq.n	8014a3e <_dtoa_r+0x846>
 8014aaa:	9a05      	ldr	r2, [sp, #20]
 8014aac:	331c      	adds	r3, #28
 8014aae:	441a      	add	r2, r3
 8014ab0:	9205      	str	r2, [sp, #20]
 8014ab2:	441d      	add	r5, r3
 8014ab4:	4498      	add	r8, r3
 8014ab6:	e7c2      	b.n	8014a3e <_dtoa_r+0x846>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	e7f6      	b.n	8014aaa <_dtoa_r+0x8b2>
 8014abc:	f1b9 0f00 	cmp.w	r9, #0
 8014ac0:	dc38      	bgt.n	8014b34 <_dtoa_r+0x93c>
 8014ac2:	9b06      	ldr	r3, [sp, #24]
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	dd35      	ble.n	8014b34 <_dtoa_r+0x93c>
 8014ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8014acc:	9b02      	ldr	r3, [sp, #8]
 8014ace:	b963      	cbnz	r3, 8014aea <_dtoa_r+0x8f2>
 8014ad0:	4639      	mov	r1, r7
 8014ad2:	2205      	movs	r2, #5
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f000 feef 	bl	80158b8 <__multadd>
 8014ada:	4601      	mov	r1, r0
 8014adc:	4607      	mov	r7, r0
 8014ade:	9804      	ldr	r0, [sp, #16]
 8014ae0:	f001 f8f2 	bl	8015cc8 <__mcmp>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	f73f adcc 	bgt.w	8014682 <_dtoa_r+0x48a>
 8014aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aec:	465d      	mov	r5, fp
 8014aee:	ea6f 0a03 	mvn.w	sl, r3
 8014af2:	f04f 0900 	mov.w	r9, #0
 8014af6:	4639      	mov	r1, r7
 8014af8:	4620      	mov	r0, r4
 8014afa:	f000 fec6 	bl	801588a <_Bfree>
 8014afe:	2e00      	cmp	r6, #0
 8014b00:	f43f aeb7 	beq.w	8014872 <_dtoa_r+0x67a>
 8014b04:	f1b9 0f00 	cmp.w	r9, #0
 8014b08:	d005      	beq.n	8014b16 <_dtoa_r+0x91e>
 8014b0a:	45b1      	cmp	r9, r6
 8014b0c:	d003      	beq.n	8014b16 <_dtoa_r+0x91e>
 8014b0e:	4649      	mov	r1, r9
 8014b10:	4620      	mov	r0, r4
 8014b12:	f000 feba 	bl	801588a <_Bfree>
 8014b16:	4631      	mov	r1, r6
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f000 feb6 	bl	801588a <_Bfree>
 8014b1e:	e6a8      	b.n	8014872 <_dtoa_r+0x67a>
 8014b20:	2700      	movs	r7, #0
 8014b22:	463e      	mov	r6, r7
 8014b24:	e7e1      	b.n	8014aea <_dtoa_r+0x8f2>
 8014b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014b2a:	463e      	mov	r6, r7
 8014b2c:	e5a9      	b.n	8014682 <_dtoa_r+0x48a>
 8014b2e:	bf00      	nop
 8014b30:	40240000 	.word	0x40240000
 8014b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b36:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f000 80fa 	beq.w	8014d34 <_dtoa_r+0xb3c>
 8014b40:	2d00      	cmp	r5, #0
 8014b42:	dd05      	ble.n	8014b50 <_dtoa_r+0x958>
 8014b44:	4631      	mov	r1, r6
 8014b46:	462a      	mov	r2, r5
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f001 f869 	bl	8015c20 <__lshift>
 8014b4e:	4606      	mov	r6, r0
 8014b50:	9b07      	ldr	r3, [sp, #28]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d04c      	beq.n	8014bf0 <_dtoa_r+0x9f8>
 8014b56:	6871      	ldr	r1, [r6, #4]
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f000 fe62 	bl	8015822 <_Balloc>
 8014b5e:	6932      	ldr	r2, [r6, #16]
 8014b60:	3202      	adds	r2, #2
 8014b62:	4605      	mov	r5, r0
 8014b64:	0092      	lsls	r2, r2, #2
 8014b66:	f106 010c 	add.w	r1, r6, #12
 8014b6a:	300c      	adds	r0, #12
 8014b6c:	f000 fe4e 	bl	801580c <memcpy>
 8014b70:	2201      	movs	r2, #1
 8014b72:	4629      	mov	r1, r5
 8014b74:	4620      	mov	r0, r4
 8014b76:	f001 f853 	bl	8015c20 <__lshift>
 8014b7a:	9b00      	ldr	r3, [sp, #0]
 8014b7c:	f8cd b014 	str.w	fp, [sp, #20]
 8014b80:	f003 0301 	and.w	r3, r3, #1
 8014b84:	46b1      	mov	r9, r6
 8014b86:	9307      	str	r3, [sp, #28]
 8014b88:	4606      	mov	r6, r0
 8014b8a:	4639      	mov	r1, r7
 8014b8c:	9804      	ldr	r0, [sp, #16]
 8014b8e:	f7ff faa7 	bl	80140e0 <quorem>
 8014b92:	4649      	mov	r1, r9
 8014b94:	4605      	mov	r5, r0
 8014b96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014b9a:	9804      	ldr	r0, [sp, #16]
 8014b9c:	f001 f894 	bl	8015cc8 <__mcmp>
 8014ba0:	4632      	mov	r2, r6
 8014ba2:	9000      	str	r0, [sp, #0]
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f001 f8a8 	bl	8015cfc <__mdiff>
 8014bac:	68c3      	ldr	r3, [r0, #12]
 8014bae:	4602      	mov	r2, r0
 8014bb0:	bb03      	cbnz	r3, 8014bf4 <_dtoa_r+0x9fc>
 8014bb2:	4601      	mov	r1, r0
 8014bb4:	9008      	str	r0, [sp, #32]
 8014bb6:	9804      	ldr	r0, [sp, #16]
 8014bb8:	f001 f886 	bl	8015cc8 <__mcmp>
 8014bbc:	9a08      	ldr	r2, [sp, #32]
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	4611      	mov	r1, r2
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	9308      	str	r3, [sp, #32]
 8014bc6:	f000 fe60 	bl	801588a <_Bfree>
 8014bca:	9b08      	ldr	r3, [sp, #32]
 8014bcc:	b9a3      	cbnz	r3, 8014bf8 <_dtoa_r+0xa00>
 8014bce:	9a06      	ldr	r2, [sp, #24]
 8014bd0:	b992      	cbnz	r2, 8014bf8 <_dtoa_r+0xa00>
 8014bd2:	9a07      	ldr	r2, [sp, #28]
 8014bd4:	b982      	cbnz	r2, 8014bf8 <_dtoa_r+0xa00>
 8014bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014bda:	d029      	beq.n	8014c30 <_dtoa_r+0xa38>
 8014bdc:	9b00      	ldr	r3, [sp, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	dd01      	ble.n	8014be6 <_dtoa_r+0x9ee>
 8014be2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014be6:	9b05      	ldr	r3, [sp, #20]
 8014be8:	1c5d      	adds	r5, r3, #1
 8014bea:	f883 8000 	strb.w	r8, [r3]
 8014bee:	e782      	b.n	8014af6 <_dtoa_r+0x8fe>
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	e7c2      	b.n	8014b7a <_dtoa_r+0x982>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e7e3      	b.n	8014bc0 <_dtoa_r+0x9c8>
 8014bf8:	9a00      	ldr	r2, [sp, #0]
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	db04      	blt.n	8014c08 <_dtoa_r+0xa10>
 8014bfe:	d125      	bne.n	8014c4c <_dtoa_r+0xa54>
 8014c00:	9a06      	ldr	r2, [sp, #24]
 8014c02:	bb1a      	cbnz	r2, 8014c4c <_dtoa_r+0xa54>
 8014c04:	9a07      	ldr	r2, [sp, #28]
 8014c06:	bb0a      	cbnz	r2, 8014c4c <_dtoa_r+0xa54>
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	ddec      	ble.n	8014be6 <_dtoa_r+0x9ee>
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	9904      	ldr	r1, [sp, #16]
 8014c10:	4620      	mov	r0, r4
 8014c12:	f001 f805 	bl	8015c20 <__lshift>
 8014c16:	4639      	mov	r1, r7
 8014c18:	9004      	str	r0, [sp, #16]
 8014c1a:	f001 f855 	bl	8015cc8 <__mcmp>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	dc03      	bgt.n	8014c2a <_dtoa_r+0xa32>
 8014c22:	d1e0      	bne.n	8014be6 <_dtoa_r+0x9ee>
 8014c24:	f018 0f01 	tst.w	r8, #1
 8014c28:	d0dd      	beq.n	8014be6 <_dtoa_r+0x9ee>
 8014c2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c2e:	d1d8      	bne.n	8014be2 <_dtoa_r+0x9ea>
 8014c30:	9b05      	ldr	r3, [sp, #20]
 8014c32:	9a05      	ldr	r2, [sp, #20]
 8014c34:	1c5d      	adds	r5, r3, #1
 8014c36:	2339      	movs	r3, #57	; 0x39
 8014c38:	7013      	strb	r3, [r2, #0]
 8014c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c3e:	2b39      	cmp	r3, #57	; 0x39
 8014c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8014c44:	d04f      	beq.n	8014ce6 <_dtoa_r+0xaee>
 8014c46:	3301      	adds	r3, #1
 8014c48:	7013      	strb	r3, [r2, #0]
 8014c4a:	e754      	b.n	8014af6 <_dtoa_r+0x8fe>
 8014c4c:	9a05      	ldr	r2, [sp, #20]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	f102 0501 	add.w	r5, r2, #1
 8014c54:	dd06      	ble.n	8014c64 <_dtoa_r+0xa6c>
 8014c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c5a:	d0e9      	beq.n	8014c30 <_dtoa_r+0xa38>
 8014c5c:	f108 0801 	add.w	r8, r8, #1
 8014c60:	9b05      	ldr	r3, [sp, #20]
 8014c62:	e7c2      	b.n	8014bea <_dtoa_r+0x9f2>
 8014c64:	9a02      	ldr	r2, [sp, #8]
 8014c66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014c6a:	eba5 030b 	sub.w	r3, r5, fp
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d021      	beq.n	8014cb6 <_dtoa_r+0xabe>
 8014c72:	2300      	movs	r3, #0
 8014c74:	220a      	movs	r2, #10
 8014c76:	9904      	ldr	r1, [sp, #16]
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f000 fe1d 	bl	80158b8 <__multadd>
 8014c7e:	45b1      	cmp	r9, r6
 8014c80:	9004      	str	r0, [sp, #16]
 8014c82:	f04f 0300 	mov.w	r3, #0
 8014c86:	f04f 020a 	mov.w	r2, #10
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	d105      	bne.n	8014c9c <_dtoa_r+0xaa4>
 8014c90:	f000 fe12 	bl	80158b8 <__multadd>
 8014c94:	4681      	mov	r9, r0
 8014c96:	4606      	mov	r6, r0
 8014c98:	9505      	str	r5, [sp, #20]
 8014c9a:	e776      	b.n	8014b8a <_dtoa_r+0x992>
 8014c9c:	f000 fe0c 	bl	80158b8 <__multadd>
 8014ca0:	4631      	mov	r1, r6
 8014ca2:	4681      	mov	r9, r0
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	220a      	movs	r2, #10
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f000 fe05 	bl	80158b8 <__multadd>
 8014cae:	4606      	mov	r6, r0
 8014cb0:	e7f2      	b.n	8014c98 <_dtoa_r+0xaa0>
 8014cb2:	f04f 0900 	mov.w	r9, #0
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	9904      	ldr	r1, [sp, #16]
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f000 ffb0 	bl	8015c20 <__lshift>
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	9004      	str	r0, [sp, #16]
 8014cc4:	f001 f800 	bl	8015cc8 <__mcmp>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	dcb6      	bgt.n	8014c3a <_dtoa_r+0xa42>
 8014ccc:	d102      	bne.n	8014cd4 <_dtoa_r+0xadc>
 8014cce:	f018 0f01 	tst.w	r8, #1
 8014cd2:	d1b2      	bne.n	8014c3a <_dtoa_r+0xa42>
 8014cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014cd8:	2b30      	cmp	r3, #48	; 0x30
 8014cda:	f105 32ff 	add.w	r2, r5, #4294967295
 8014cde:	f47f af0a 	bne.w	8014af6 <_dtoa_r+0x8fe>
 8014ce2:	4615      	mov	r5, r2
 8014ce4:	e7f6      	b.n	8014cd4 <_dtoa_r+0xadc>
 8014ce6:	4593      	cmp	fp, r2
 8014ce8:	d105      	bne.n	8014cf6 <_dtoa_r+0xafe>
 8014cea:	2331      	movs	r3, #49	; 0x31
 8014cec:	f10a 0a01 	add.w	sl, sl, #1
 8014cf0:	f88b 3000 	strb.w	r3, [fp]
 8014cf4:	e6ff      	b.n	8014af6 <_dtoa_r+0x8fe>
 8014cf6:	4615      	mov	r5, r2
 8014cf8:	e79f      	b.n	8014c3a <_dtoa_r+0xa42>
 8014cfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014d60 <_dtoa_r+0xb68>
 8014cfe:	e007      	b.n	8014d10 <_dtoa_r+0xb18>
 8014d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014d64 <_dtoa_r+0xb6c>
 8014d06:	b11b      	cbz	r3, 8014d10 <_dtoa_r+0xb18>
 8014d08:	f10b 0308 	add.w	r3, fp, #8
 8014d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d0e:	6013      	str	r3, [r2, #0]
 8014d10:	4658      	mov	r0, fp
 8014d12:	b017      	add	sp, #92	; 0x5c
 8014d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d18:	9b06      	ldr	r3, [sp, #24]
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	f77f ae35 	ble.w	801498a <_dtoa_r+0x792>
 8014d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d22:	9307      	str	r3, [sp, #28]
 8014d24:	e649      	b.n	80149ba <_dtoa_r+0x7c2>
 8014d26:	9b02      	ldr	r3, [sp, #8]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	dc03      	bgt.n	8014d34 <_dtoa_r+0xb3c>
 8014d2c:	9b06      	ldr	r3, [sp, #24]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	f73f aecc 	bgt.w	8014acc <_dtoa_r+0x8d4>
 8014d34:	465d      	mov	r5, fp
 8014d36:	4639      	mov	r1, r7
 8014d38:	9804      	ldr	r0, [sp, #16]
 8014d3a:	f7ff f9d1 	bl	80140e0 <quorem>
 8014d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014d42:	f805 8b01 	strb.w	r8, [r5], #1
 8014d46:	9a02      	ldr	r2, [sp, #8]
 8014d48:	eba5 030b 	sub.w	r3, r5, fp
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	ddb0      	ble.n	8014cb2 <_dtoa_r+0xaba>
 8014d50:	2300      	movs	r3, #0
 8014d52:	220a      	movs	r2, #10
 8014d54:	9904      	ldr	r1, [sp, #16]
 8014d56:	4620      	mov	r0, r4
 8014d58:	f000 fdae 	bl	80158b8 <__multadd>
 8014d5c:	9004      	str	r0, [sp, #16]
 8014d5e:	e7ea      	b.n	8014d36 <_dtoa_r+0xb3e>
 8014d60:	08017afb 	.word	0x08017afb
 8014d64:	08017958 	.word	0x08017958

08014d68 <__sflush_r>:
 8014d68:	898a      	ldrh	r2, [r1, #12]
 8014d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d6e:	4605      	mov	r5, r0
 8014d70:	0710      	lsls	r0, r2, #28
 8014d72:	460c      	mov	r4, r1
 8014d74:	d458      	bmi.n	8014e28 <__sflush_r+0xc0>
 8014d76:	684b      	ldr	r3, [r1, #4]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	dc05      	bgt.n	8014d88 <__sflush_r+0x20>
 8014d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	dc02      	bgt.n	8014d88 <__sflush_r+0x20>
 8014d82:	2000      	movs	r0, #0
 8014d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d8a:	2e00      	cmp	r6, #0
 8014d8c:	d0f9      	beq.n	8014d82 <__sflush_r+0x1a>
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014d94:	682f      	ldr	r7, [r5, #0]
 8014d96:	6a21      	ldr	r1, [r4, #32]
 8014d98:	602b      	str	r3, [r5, #0]
 8014d9a:	d032      	beq.n	8014e02 <__sflush_r+0x9a>
 8014d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d9e:	89a3      	ldrh	r3, [r4, #12]
 8014da0:	075a      	lsls	r2, r3, #29
 8014da2:	d505      	bpl.n	8014db0 <__sflush_r+0x48>
 8014da4:	6863      	ldr	r3, [r4, #4]
 8014da6:	1ac0      	subs	r0, r0, r3
 8014da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014daa:	b10b      	cbz	r3, 8014db0 <__sflush_r+0x48>
 8014dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dae:	1ac0      	subs	r0, r0, r3
 8014db0:	2300      	movs	r3, #0
 8014db2:	4602      	mov	r2, r0
 8014db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014db6:	6a21      	ldr	r1, [r4, #32]
 8014db8:	4628      	mov	r0, r5
 8014dba:	47b0      	blx	r6
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	89a3      	ldrh	r3, [r4, #12]
 8014dc0:	d106      	bne.n	8014dd0 <__sflush_r+0x68>
 8014dc2:	6829      	ldr	r1, [r5, #0]
 8014dc4:	291d      	cmp	r1, #29
 8014dc6:	d848      	bhi.n	8014e5a <__sflush_r+0xf2>
 8014dc8:	4a29      	ldr	r2, [pc, #164]	; (8014e70 <__sflush_r+0x108>)
 8014dca:	40ca      	lsrs	r2, r1
 8014dcc:	07d6      	lsls	r6, r2, #31
 8014dce:	d544      	bpl.n	8014e5a <__sflush_r+0xf2>
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	6062      	str	r2, [r4, #4]
 8014dd4:	04d9      	lsls	r1, r3, #19
 8014dd6:	6922      	ldr	r2, [r4, #16]
 8014dd8:	6022      	str	r2, [r4, #0]
 8014dda:	d504      	bpl.n	8014de6 <__sflush_r+0x7e>
 8014ddc:	1c42      	adds	r2, r0, #1
 8014dde:	d101      	bne.n	8014de4 <__sflush_r+0x7c>
 8014de0:	682b      	ldr	r3, [r5, #0]
 8014de2:	b903      	cbnz	r3, 8014de6 <__sflush_r+0x7e>
 8014de4:	6560      	str	r0, [r4, #84]	; 0x54
 8014de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014de8:	602f      	str	r7, [r5, #0]
 8014dea:	2900      	cmp	r1, #0
 8014dec:	d0c9      	beq.n	8014d82 <__sflush_r+0x1a>
 8014dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014df2:	4299      	cmp	r1, r3
 8014df4:	d002      	beq.n	8014dfc <__sflush_r+0x94>
 8014df6:	4628      	mov	r0, r5
 8014df8:	f001 f920 	bl	801603c <_free_r>
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8014e00:	e7c0      	b.n	8014d84 <__sflush_r+0x1c>
 8014e02:	2301      	movs	r3, #1
 8014e04:	4628      	mov	r0, r5
 8014e06:	47b0      	blx	r6
 8014e08:	1c41      	adds	r1, r0, #1
 8014e0a:	d1c8      	bne.n	8014d9e <__sflush_r+0x36>
 8014e0c:	682b      	ldr	r3, [r5, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d0c5      	beq.n	8014d9e <__sflush_r+0x36>
 8014e12:	2b1d      	cmp	r3, #29
 8014e14:	d001      	beq.n	8014e1a <__sflush_r+0xb2>
 8014e16:	2b16      	cmp	r3, #22
 8014e18:	d101      	bne.n	8014e1e <__sflush_r+0xb6>
 8014e1a:	602f      	str	r7, [r5, #0]
 8014e1c:	e7b1      	b.n	8014d82 <__sflush_r+0x1a>
 8014e1e:	89a3      	ldrh	r3, [r4, #12]
 8014e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e24:	81a3      	strh	r3, [r4, #12]
 8014e26:	e7ad      	b.n	8014d84 <__sflush_r+0x1c>
 8014e28:	690f      	ldr	r7, [r1, #16]
 8014e2a:	2f00      	cmp	r7, #0
 8014e2c:	d0a9      	beq.n	8014d82 <__sflush_r+0x1a>
 8014e2e:	0793      	lsls	r3, r2, #30
 8014e30:	680e      	ldr	r6, [r1, #0]
 8014e32:	bf08      	it	eq
 8014e34:	694b      	ldreq	r3, [r1, #20]
 8014e36:	600f      	str	r7, [r1, #0]
 8014e38:	bf18      	it	ne
 8014e3a:	2300      	movne	r3, #0
 8014e3c:	eba6 0807 	sub.w	r8, r6, r7
 8014e40:	608b      	str	r3, [r1, #8]
 8014e42:	f1b8 0f00 	cmp.w	r8, #0
 8014e46:	dd9c      	ble.n	8014d82 <__sflush_r+0x1a>
 8014e48:	4643      	mov	r3, r8
 8014e4a:	463a      	mov	r2, r7
 8014e4c:	6a21      	ldr	r1, [r4, #32]
 8014e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e50:	4628      	mov	r0, r5
 8014e52:	47b0      	blx	r6
 8014e54:	2800      	cmp	r0, #0
 8014e56:	dc06      	bgt.n	8014e66 <__sflush_r+0xfe>
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e5e:	81a3      	strh	r3, [r4, #12]
 8014e60:	f04f 30ff 	mov.w	r0, #4294967295
 8014e64:	e78e      	b.n	8014d84 <__sflush_r+0x1c>
 8014e66:	4407      	add	r7, r0
 8014e68:	eba8 0800 	sub.w	r8, r8, r0
 8014e6c:	e7e9      	b.n	8014e42 <__sflush_r+0xda>
 8014e6e:	bf00      	nop
 8014e70:	20400001 	.word	0x20400001

08014e74 <_fflush_r>:
 8014e74:	b538      	push	{r3, r4, r5, lr}
 8014e76:	690b      	ldr	r3, [r1, #16]
 8014e78:	4605      	mov	r5, r0
 8014e7a:	460c      	mov	r4, r1
 8014e7c:	b1db      	cbz	r3, 8014eb6 <_fflush_r+0x42>
 8014e7e:	b118      	cbz	r0, 8014e88 <_fflush_r+0x14>
 8014e80:	6983      	ldr	r3, [r0, #24]
 8014e82:	b90b      	cbnz	r3, 8014e88 <_fflush_r+0x14>
 8014e84:	f000 f860 	bl	8014f48 <__sinit>
 8014e88:	4b0c      	ldr	r3, [pc, #48]	; (8014ebc <_fflush_r+0x48>)
 8014e8a:	429c      	cmp	r4, r3
 8014e8c:	d109      	bne.n	8014ea2 <_fflush_r+0x2e>
 8014e8e:	686c      	ldr	r4, [r5, #4]
 8014e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e94:	b17b      	cbz	r3, 8014eb6 <_fflush_r+0x42>
 8014e96:	4621      	mov	r1, r4
 8014e98:	4628      	mov	r0, r5
 8014e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e9e:	f7ff bf63 	b.w	8014d68 <__sflush_r>
 8014ea2:	4b07      	ldr	r3, [pc, #28]	; (8014ec0 <_fflush_r+0x4c>)
 8014ea4:	429c      	cmp	r4, r3
 8014ea6:	d101      	bne.n	8014eac <_fflush_r+0x38>
 8014ea8:	68ac      	ldr	r4, [r5, #8]
 8014eaa:	e7f1      	b.n	8014e90 <_fflush_r+0x1c>
 8014eac:	4b05      	ldr	r3, [pc, #20]	; (8014ec4 <_fflush_r+0x50>)
 8014eae:	429c      	cmp	r4, r3
 8014eb0:	bf08      	it	eq
 8014eb2:	68ec      	ldreq	r4, [r5, #12]
 8014eb4:	e7ec      	b.n	8014e90 <_fflush_r+0x1c>
 8014eb6:	2000      	movs	r0, #0
 8014eb8:	bd38      	pop	{r3, r4, r5, pc}
 8014eba:	bf00      	nop
 8014ebc:	08017988 	.word	0x08017988
 8014ec0:	080179a8 	.word	0x080179a8
 8014ec4:	08017968 	.word	0x08017968

08014ec8 <std>:
 8014ec8:	2300      	movs	r3, #0
 8014eca:	b510      	push	{r4, lr}
 8014ecc:	4604      	mov	r4, r0
 8014ece:	e9c0 3300 	strd	r3, r3, [r0]
 8014ed2:	6083      	str	r3, [r0, #8]
 8014ed4:	8181      	strh	r1, [r0, #12]
 8014ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8014ed8:	81c2      	strh	r2, [r0, #14]
 8014eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ede:	6183      	str	r3, [r0, #24]
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	2208      	movs	r2, #8
 8014ee4:	305c      	adds	r0, #92	; 0x5c
 8014ee6:	f7fd f9a3 	bl	8012230 <memset>
 8014eea:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <std+0x38>)
 8014eec:	6263      	str	r3, [r4, #36]	; 0x24
 8014eee:	4b05      	ldr	r3, [pc, #20]	; (8014f04 <std+0x3c>)
 8014ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014ef2:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <std+0x40>)
 8014ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014ef6:	4b05      	ldr	r3, [pc, #20]	; (8014f0c <std+0x44>)
 8014ef8:	6224      	str	r4, [r4, #32]
 8014efa:	6323      	str	r3, [r4, #48]	; 0x30
 8014efc:	bd10      	pop	{r4, pc}
 8014efe:	bf00      	nop
 8014f00:	080130e5 	.word	0x080130e5
 8014f04:	0801310b 	.word	0x0801310b
 8014f08:	08013143 	.word	0x08013143
 8014f0c:	08013167 	.word	0x08013167

08014f10 <_cleanup_r>:
 8014f10:	4901      	ldr	r1, [pc, #4]	; (8014f18 <_cleanup_r+0x8>)
 8014f12:	f000 b885 	b.w	8015020 <_fwalk_reent>
 8014f16:	bf00      	nop
 8014f18:	08014e75 	.word	0x08014e75

08014f1c <__sfmoreglue>:
 8014f1c:	b570      	push	{r4, r5, r6, lr}
 8014f1e:	1e4a      	subs	r2, r1, #1
 8014f20:	2568      	movs	r5, #104	; 0x68
 8014f22:	4355      	muls	r5, r2
 8014f24:	460e      	mov	r6, r1
 8014f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f2a:	f001 f8d5 	bl	80160d8 <_malloc_r>
 8014f2e:	4604      	mov	r4, r0
 8014f30:	b140      	cbz	r0, 8014f44 <__sfmoreglue+0x28>
 8014f32:	2100      	movs	r1, #0
 8014f34:	e9c0 1600 	strd	r1, r6, [r0]
 8014f38:	300c      	adds	r0, #12
 8014f3a:	60a0      	str	r0, [r4, #8]
 8014f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f40:	f7fd f976 	bl	8012230 <memset>
 8014f44:	4620      	mov	r0, r4
 8014f46:	bd70      	pop	{r4, r5, r6, pc}

08014f48 <__sinit>:
 8014f48:	6983      	ldr	r3, [r0, #24]
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	bb33      	cbnz	r3, 8014f9e <__sinit+0x56>
 8014f50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014f54:	6503      	str	r3, [r0, #80]	; 0x50
 8014f56:	4b12      	ldr	r3, [pc, #72]	; (8014fa0 <__sinit+0x58>)
 8014f58:	4a12      	ldr	r2, [pc, #72]	; (8014fa4 <__sinit+0x5c>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	6282      	str	r2, [r0, #40]	; 0x28
 8014f5e:	4298      	cmp	r0, r3
 8014f60:	bf04      	itt	eq
 8014f62:	2301      	moveq	r3, #1
 8014f64:	6183      	streq	r3, [r0, #24]
 8014f66:	f000 f81f 	bl	8014fa8 <__sfp>
 8014f6a:	6060      	str	r0, [r4, #4]
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	f000 f81b 	bl	8014fa8 <__sfp>
 8014f72:	60a0      	str	r0, [r4, #8]
 8014f74:	4620      	mov	r0, r4
 8014f76:	f000 f817 	bl	8014fa8 <__sfp>
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	60e0      	str	r0, [r4, #12]
 8014f7e:	2104      	movs	r1, #4
 8014f80:	6860      	ldr	r0, [r4, #4]
 8014f82:	f7ff ffa1 	bl	8014ec8 <std>
 8014f86:	2201      	movs	r2, #1
 8014f88:	2109      	movs	r1, #9
 8014f8a:	68a0      	ldr	r0, [r4, #8]
 8014f8c:	f7ff ff9c 	bl	8014ec8 <std>
 8014f90:	2202      	movs	r2, #2
 8014f92:	2112      	movs	r1, #18
 8014f94:	68e0      	ldr	r0, [r4, #12]
 8014f96:	f7ff ff97 	bl	8014ec8 <std>
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	61a3      	str	r3, [r4, #24]
 8014f9e:	bd10      	pop	{r4, pc}
 8014fa0:	080178c8 	.word	0x080178c8
 8014fa4:	08014f11 	.word	0x08014f11

08014fa8 <__sfp>:
 8014fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014faa:	4b1b      	ldr	r3, [pc, #108]	; (8015018 <__sfp+0x70>)
 8014fac:	681e      	ldr	r6, [r3, #0]
 8014fae:	69b3      	ldr	r3, [r6, #24]
 8014fb0:	4607      	mov	r7, r0
 8014fb2:	b913      	cbnz	r3, 8014fba <__sfp+0x12>
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f7ff ffc7 	bl	8014f48 <__sinit>
 8014fba:	3648      	adds	r6, #72	; 0x48
 8014fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014fc0:	3b01      	subs	r3, #1
 8014fc2:	d503      	bpl.n	8014fcc <__sfp+0x24>
 8014fc4:	6833      	ldr	r3, [r6, #0]
 8014fc6:	b133      	cbz	r3, 8014fd6 <__sfp+0x2e>
 8014fc8:	6836      	ldr	r6, [r6, #0]
 8014fca:	e7f7      	b.n	8014fbc <__sfp+0x14>
 8014fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014fd0:	b16d      	cbz	r5, 8014fee <__sfp+0x46>
 8014fd2:	3468      	adds	r4, #104	; 0x68
 8014fd4:	e7f4      	b.n	8014fc0 <__sfp+0x18>
 8014fd6:	2104      	movs	r1, #4
 8014fd8:	4638      	mov	r0, r7
 8014fda:	f7ff ff9f 	bl	8014f1c <__sfmoreglue>
 8014fde:	6030      	str	r0, [r6, #0]
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d1f1      	bne.n	8014fc8 <__sfp+0x20>
 8014fe4:	230c      	movs	r3, #12
 8014fe6:	603b      	str	r3, [r7, #0]
 8014fe8:	4604      	mov	r4, r0
 8014fea:	4620      	mov	r0, r4
 8014fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fee:	4b0b      	ldr	r3, [pc, #44]	; (801501c <__sfp+0x74>)
 8014ff0:	6665      	str	r5, [r4, #100]	; 0x64
 8014ff2:	e9c4 5500 	strd	r5, r5, [r4]
 8014ff6:	60a5      	str	r5, [r4, #8]
 8014ff8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014ffc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015000:	2208      	movs	r2, #8
 8015002:	4629      	mov	r1, r5
 8015004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015008:	f7fd f912 	bl	8012230 <memset>
 801500c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015014:	e7e9      	b.n	8014fea <__sfp+0x42>
 8015016:	bf00      	nop
 8015018:	080178c8 	.word	0x080178c8
 801501c:	ffff0001 	.word	0xffff0001

08015020 <_fwalk_reent>:
 8015020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015024:	4680      	mov	r8, r0
 8015026:	4689      	mov	r9, r1
 8015028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801502c:	2600      	movs	r6, #0
 801502e:	b914      	cbnz	r4, 8015036 <_fwalk_reent+0x16>
 8015030:	4630      	mov	r0, r6
 8015032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015036:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801503a:	3f01      	subs	r7, #1
 801503c:	d501      	bpl.n	8015042 <_fwalk_reent+0x22>
 801503e:	6824      	ldr	r4, [r4, #0]
 8015040:	e7f5      	b.n	801502e <_fwalk_reent+0xe>
 8015042:	89ab      	ldrh	r3, [r5, #12]
 8015044:	2b01      	cmp	r3, #1
 8015046:	d907      	bls.n	8015058 <_fwalk_reent+0x38>
 8015048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801504c:	3301      	adds	r3, #1
 801504e:	d003      	beq.n	8015058 <_fwalk_reent+0x38>
 8015050:	4629      	mov	r1, r5
 8015052:	4640      	mov	r0, r8
 8015054:	47c8      	blx	r9
 8015056:	4306      	orrs	r6, r0
 8015058:	3568      	adds	r5, #104	; 0x68
 801505a:	e7ee      	b.n	801503a <_fwalk_reent+0x1a>

0801505c <rshift>:
 801505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505e:	6906      	ldr	r6, [r0, #16]
 8015060:	114b      	asrs	r3, r1, #5
 8015062:	429e      	cmp	r6, r3
 8015064:	f100 0414 	add.w	r4, r0, #20
 8015068:	dd30      	ble.n	80150cc <rshift+0x70>
 801506a:	f011 011f 	ands.w	r1, r1, #31
 801506e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015072:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015076:	d108      	bne.n	801508a <rshift+0x2e>
 8015078:	4621      	mov	r1, r4
 801507a:	42b2      	cmp	r2, r6
 801507c:	460b      	mov	r3, r1
 801507e:	d211      	bcs.n	80150a4 <rshift+0x48>
 8015080:	f852 3b04 	ldr.w	r3, [r2], #4
 8015084:	f841 3b04 	str.w	r3, [r1], #4
 8015088:	e7f7      	b.n	801507a <rshift+0x1e>
 801508a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801508e:	f1c1 0c20 	rsb	ip, r1, #32
 8015092:	40cd      	lsrs	r5, r1
 8015094:	3204      	adds	r2, #4
 8015096:	4623      	mov	r3, r4
 8015098:	42b2      	cmp	r2, r6
 801509a:	4617      	mov	r7, r2
 801509c:	d30c      	bcc.n	80150b8 <rshift+0x5c>
 801509e:	601d      	str	r5, [r3, #0]
 80150a0:	b105      	cbz	r5, 80150a4 <rshift+0x48>
 80150a2:	3304      	adds	r3, #4
 80150a4:	1b1a      	subs	r2, r3, r4
 80150a6:	42a3      	cmp	r3, r4
 80150a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80150ac:	bf08      	it	eq
 80150ae:	2300      	moveq	r3, #0
 80150b0:	6102      	str	r2, [r0, #16]
 80150b2:	bf08      	it	eq
 80150b4:	6143      	streq	r3, [r0, #20]
 80150b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b8:	683f      	ldr	r7, [r7, #0]
 80150ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80150be:	433d      	orrs	r5, r7
 80150c0:	f843 5b04 	str.w	r5, [r3], #4
 80150c4:	f852 5b04 	ldr.w	r5, [r2], #4
 80150c8:	40cd      	lsrs	r5, r1
 80150ca:	e7e5      	b.n	8015098 <rshift+0x3c>
 80150cc:	4623      	mov	r3, r4
 80150ce:	e7e9      	b.n	80150a4 <rshift+0x48>

080150d0 <__hexdig_fun>:
 80150d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80150d4:	2b09      	cmp	r3, #9
 80150d6:	d802      	bhi.n	80150de <__hexdig_fun+0xe>
 80150d8:	3820      	subs	r0, #32
 80150da:	b2c0      	uxtb	r0, r0
 80150dc:	4770      	bx	lr
 80150de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80150e2:	2b05      	cmp	r3, #5
 80150e4:	d801      	bhi.n	80150ea <__hexdig_fun+0x1a>
 80150e6:	3847      	subs	r0, #71	; 0x47
 80150e8:	e7f7      	b.n	80150da <__hexdig_fun+0xa>
 80150ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80150ee:	2b05      	cmp	r3, #5
 80150f0:	d801      	bhi.n	80150f6 <__hexdig_fun+0x26>
 80150f2:	3827      	subs	r0, #39	; 0x27
 80150f4:	e7f1      	b.n	80150da <__hexdig_fun+0xa>
 80150f6:	2000      	movs	r0, #0
 80150f8:	4770      	bx	lr

080150fa <__gethex>:
 80150fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fe:	b08b      	sub	sp, #44	; 0x2c
 8015100:	468a      	mov	sl, r1
 8015102:	9002      	str	r0, [sp, #8]
 8015104:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015106:	9306      	str	r3, [sp, #24]
 8015108:	4690      	mov	r8, r2
 801510a:	f000 fadf 	bl	80156cc <__localeconv_l>
 801510e:	6803      	ldr	r3, [r0, #0]
 8015110:	9303      	str	r3, [sp, #12]
 8015112:	4618      	mov	r0, r3
 8015114:	f7eb f874 	bl	8000200 <strlen>
 8015118:	9b03      	ldr	r3, [sp, #12]
 801511a:	9001      	str	r0, [sp, #4]
 801511c:	4403      	add	r3, r0
 801511e:	f04f 0b00 	mov.w	fp, #0
 8015122:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015126:	9307      	str	r3, [sp, #28]
 8015128:	f8da 3000 	ldr.w	r3, [sl]
 801512c:	3302      	adds	r3, #2
 801512e:	461f      	mov	r7, r3
 8015130:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015134:	2830      	cmp	r0, #48	; 0x30
 8015136:	d06c      	beq.n	8015212 <__gethex+0x118>
 8015138:	f7ff ffca 	bl	80150d0 <__hexdig_fun>
 801513c:	4604      	mov	r4, r0
 801513e:	2800      	cmp	r0, #0
 8015140:	d16a      	bne.n	8015218 <__gethex+0x11e>
 8015142:	9a01      	ldr	r2, [sp, #4]
 8015144:	9903      	ldr	r1, [sp, #12]
 8015146:	4638      	mov	r0, r7
 8015148:	f001 fe3e 	bl	8016dc8 <strncmp>
 801514c:	2800      	cmp	r0, #0
 801514e:	d166      	bne.n	801521e <__gethex+0x124>
 8015150:	9b01      	ldr	r3, [sp, #4]
 8015152:	5cf8      	ldrb	r0, [r7, r3]
 8015154:	18fe      	adds	r6, r7, r3
 8015156:	f7ff ffbb 	bl	80150d0 <__hexdig_fun>
 801515a:	2800      	cmp	r0, #0
 801515c:	d062      	beq.n	8015224 <__gethex+0x12a>
 801515e:	4633      	mov	r3, r6
 8015160:	7818      	ldrb	r0, [r3, #0]
 8015162:	2830      	cmp	r0, #48	; 0x30
 8015164:	461f      	mov	r7, r3
 8015166:	f103 0301 	add.w	r3, r3, #1
 801516a:	d0f9      	beq.n	8015160 <__gethex+0x66>
 801516c:	f7ff ffb0 	bl	80150d0 <__hexdig_fun>
 8015170:	fab0 f580 	clz	r5, r0
 8015174:	096d      	lsrs	r5, r5, #5
 8015176:	4634      	mov	r4, r6
 8015178:	f04f 0b01 	mov.w	fp, #1
 801517c:	463a      	mov	r2, r7
 801517e:	4616      	mov	r6, r2
 8015180:	3201      	adds	r2, #1
 8015182:	7830      	ldrb	r0, [r6, #0]
 8015184:	f7ff ffa4 	bl	80150d0 <__hexdig_fun>
 8015188:	2800      	cmp	r0, #0
 801518a:	d1f8      	bne.n	801517e <__gethex+0x84>
 801518c:	9a01      	ldr	r2, [sp, #4]
 801518e:	9903      	ldr	r1, [sp, #12]
 8015190:	4630      	mov	r0, r6
 8015192:	f001 fe19 	bl	8016dc8 <strncmp>
 8015196:	b950      	cbnz	r0, 80151ae <__gethex+0xb4>
 8015198:	b954      	cbnz	r4, 80151b0 <__gethex+0xb6>
 801519a:	9b01      	ldr	r3, [sp, #4]
 801519c:	18f4      	adds	r4, r6, r3
 801519e:	4622      	mov	r2, r4
 80151a0:	4616      	mov	r6, r2
 80151a2:	3201      	adds	r2, #1
 80151a4:	7830      	ldrb	r0, [r6, #0]
 80151a6:	f7ff ff93 	bl	80150d0 <__hexdig_fun>
 80151aa:	2800      	cmp	r0, #0
 80151ac:	d1f8      	bne.n	80151a0 <__gethex+0xa6>
 80151ae:	b10c      	cbz	r4, 80151b4 <__gethex+0xba>
 80151b0:	1ba4      	subs	r4, r4, r6
 80151b2:	00a4      	lsls	r4, r4, #2
 80151b4:	7833      	ldrb	r3, [r6, #0]
 80151b6:	2b50      	cmp	r3, #80	; 0x50
 80151b8:	d001      	beq.n	80151be <__gethex+0xc4>
 80151ba:	2b70      	cmp	r3, #112	; 0x70
 80151bc:	d140      	bne.n	8015240 <__gethex+0x146>
 80151be:	7873      	ldrb	r3, [r6, #1]
 80151c0:	2b2b      	cmp	r3, #43	; 0x2b
 80151c2:	d031      	beq.n	8015228 <__gethex+0x12e>
 80151c4:	2b2d      	cmp	r3, #45	; 0x2d
 80151c6:	d033      	beq.n	8015230 <__gethex+0x136>
 80151c8:	1c71      	adds	r1, r6, #1
 80151ca:	f04f 0900 	mov.w	r9, #0
 80151ce:	7808      	ldrb	r0, [r1, #0]
 80151d0:	f7ff ff7e 	bl	80150d0 <__hexdig_fun>
 80151d4:	1e43      	subs	r3, r0, #1
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	2b18      	cmp	r3, #24
 80151da:	d831      	bhi.n	8015240 <__gethex+0x146>
 80151dc:	f1a0 0210 	sub.w	r2, r0, #16
 80151e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80151e4:	f7ff ff74 	bl	80150d0 <__hexdig_fun>
 80151e8:	1e43      	subs	r3, r0, #1
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b18      	cmp	r3, #24
 80151ee:	d922      	bls.n	8015236 <__gethex+0x13c>
 80151f0:	f1b9 0f00 	cmp.w	r9, #0
 80151f4:	d000      	beq.n	80151f8 <__gethex+0xfe>
 80151f6:	4252      	negs	r2, r2
 80151f8:	4414      	add	r4, r2
 80151fa:	f8ca 1000 	str.w	r1, [sl]
 80151fe:	b30d      	cbz	r5, 8015244 <__gethex+0x14a>
 8015200:	f1bb 0f00 	cmp.w	fp, #0
 8015204:	bf0c      	ite	eq
 8015206:	2706      	moveq	r7, #6
 8015208:	2700      	movne	r7, #0
 801520a:	4638      	mov	r0, r7
 801520c:	b00b      	add	sp, #44	; 0x2c
 801520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015212:	f10b 0b01 	add.w	fp, fp, #1
 8015216:	e78a      	b.n	801512e <__gethex+0x34>
 8015218:	2500      	movs	r5, #0
 801521a:	462c      	mov	r4, r5
 801521c:	e7ae      	b.n	801517c <__gethex+0x82>
 801521e:	463e      	mov	r6, r7
 8015220:	2501      	movs	r5, #1
 8015222:	e7c7      	b.n	80151b4 <__gethex+0xba>
 8015224:	4604      	mov	r4, r0
 8015226:	e7fb      	b.n	8015220 <__gethex+0x126>
 8015228:	f04f 0900 	mov.w	r9, #0
 801522c:	1cb1      	adds	r1, r6, #2
 801522e:	e7ce      	b.n	80151ce <__gethex+0xd4>
 8015230:	f04f 0901 	mov.w	r9, #1
 8015234:	e7fa      	b.n	801522c <__gethex+0x132>
 8015236:	230a      	movs	r3, #10
 8015238:	fb03 0202 	mla	r2, r3, r2, r0
 801523c:	3a10      	subs	r2, #16
 801523e:	e7cf      	b.n	80151e0 <__gethex+0xe6>
 8015240:	4631      	mov	r1, r6
 8015242:	e7da      	b.n	80151fa <__gethex+0x100>
 8015244:	1bf3      	subs	r3, r6, r7
 8015246:	3b01      	subs	r3, #1
 8015248:	4629      	mov	r1, r5
 801524a:	2b07      	cmp	r3, #7
 801524c:	dc49      	bgt.n	80152e2 <__gethex+0x1e8>
 801524e:	9802      	ldr	r0, [sp, #8]
 8015250:	f000 fae7 	bl	8015822 <_Balloc>
 8015254:	9b01      	ldr	r3, [sp, #4]
 8015256:	f100 0914 	add.w	r9, r0, #20
 801525a:	f04f 0b00 	mov.w	fp, #0
 801525e:	f1c3 0301 	rsb	r3, r3, #1
 8015262:	4605      	mov	r5, r0
 8015264:	f8cd 9010 	str.w	r9, [sp, #16]
 8015268:	46da      	mov	sl, fp
 801526a:	9308      	str	r3, [sp, #32]
 801526c:	42b7      	cmp	r7, r6
 801526e:	d33b      	bcc.n	80152e8 <__gethex+0x1ee>
 8015270:	9804      	ldr	r0, [sp, #16]
 8015272:	f840 ab04 	str.w	sl, [r0], #4
 8015276:	eba0 0009 	sub.w	r0, r0, r9
 801527a:	1080      	asrs	r0, r0, #2
 801527c:	6128      	str	r0, [r5, #16]
 801527e:	0147      	lsls	r7, r0, #5
 8015280:	4650      	mov	r0, sl
 8015282:	f000 fb92 	bl	80159aa <__hi0bits>
 8015286:	f8d8 6000 	ldr.w	r6, [r8]
 801528a:	1a3f      	subs	r7, r7, r0
 801528c:	42b7      	cmp	r7, r6
 801528e:	dd64      	ble.n	801535a <__gethex+0x260>
 8015290:	1bbf      	subs	r7, r7, r6
 8015292:	4639      	mov	r1, r7
 8015294:	4628      	mov	r0, r5
 8015296:	f000 fea1 	bl	8015fdc <__any_on>
 801529a:	4682      	mov	sl, r0
 801529c:	b178      	cbz	r0, 80152be <__gethex+0x1c4>
 801529e:	1e7b      	subs	r3, r7, #1
 80152a0:	1159      	asrs	r1, r3, #5
 80152a2:	f003 021f 	and.w	r2, r3, #31
 80152a6:	f04f 0a01 	mov.w	sl, #1
 80152aa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80152ae:	fa0a f202 	lsl.w	r2, sl, r2
 80152b2:	420a      	tst	r2, r1
 80152b4:	d003      	beq.n	80152be <__gethex+0x1c4>
 80152b6:	4553      	cmp	r3, sl
 80152b8:	dc46      	bgt.n	8015348 <__gethex+0x24e>
 80152ba:	f04f 0a02 	mov.w	sl, #2
 80152be:	4639      	mov	r1, r7
 80152c0:	4628      	mov	r0, r5
 80152c2:	f7ff fecb 	bl	801505c <rshift>
 80152c6:	443c      	add	r4, r7
 80152c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152cc:	42a3      	cmp	r3, r4
 80152ce:	da52      	bge.n	8015376 <__gethex+0x27c>
 80152d0:	4629      	mov	r1, r5
 80152d2:	9802      	ldr	r0, [sp, #8]
 80152d4:	f000 fad9 	bl	801588a <_Bfree>
 80152d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152da:	2300      	movs	r3, #0
 80152dc:	6013      	str	r3, [r2, #0]
 80152de:	27a3      	movs	r7, #163	; 0xa3
 80152e0:	e793      	b.n	801520a <__gethex+0x110>
 80152e2:	3101      	adds	r1, #1
 80152e4:	105b      	asrs	r3, r3, #1
 80152e6:	e7b0      	b.n	801524a <__gethex+0x150>
 80152e8:	1e73      	subs	r3, r6, #1
 80152ea:	9305      	str	r3, [sp, #20]
 80152ec:	9a07      	ldr	r2, [sp, #28]
 80152ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80152f2:	4293      	cmp	r3, r2
 80152f4:	d018      	beq.n	8015328 <__gethex+0x22e>
 80152f6:	f1bb 0f20 	cmp.w	fp, #32
 80152fa:	d107      	bne.n	801530c <__gethex+0x212>
 80152fc:	9b04      	ldr	r3, [sp, #16]
 80152fe:	f8c3 a000 	str.w	sl, [r3]
 8015302:	3304      	adds	r3, #4
 8015304:	f04f 0a00 	mov.w	sl, #0
 8015308:	9304      	str	r3, [sp, #16]
 801530a:	46d3      	mov	fp, sl
 801530c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015310:	f7ff fede 	bl	80150d0 <__hexdig_fun>
 8015314:	f000 000f 	and.w	r0, r0, #15
 8015318:	fa00 f00b 	lsl.w	r0, r0, fp
 801531c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015320:	f10b 0b04 	add.w	fp, fp, #4
 8015324:	9b05      	ldr	r3, [sp, #20]
 8015326:	e00d      	b.n	8015344 <__gethex+0x24a>
 8015328:	9b05      	ldr	r3, [sp, #20]
 801532a:	9a08      	ldr	r2, [sp, #32]
 801532c:	4413      	add	r3, r2
 801532e:	42bb      	cmp	r3, r7
 8015330:	d3e1      	bcc.n	80152f6 <__gethex+0x1fc>
 8015332:	4618      	mov	r0, r3
 8015334:	9a01      	ldr	r2, [sp, #4]
 8015336:	9903      	ldr	r1, [sp, #12]
 8015338:	9309      	str	r3, [sp, #36]	; 0x24
 801533a:	f001 fd45 	bl	8016dc8 <strncmp>
 801533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015340:	2800      	cmp	r0, #0
 8015342:	d1d8      	bne.n	80152f6 <__gethex+0x1fc>
 8015344:	461e      	mov	r6, r3
 8015346:	e791      	b.n	801526c <__gethex+0x172>
 8015348:	1eb9      	subs	r1, r7, #2
 801534a:	4628      	mov	r0, r5
 801534c:	f000 fe46 	bl	8015fdc <__any_on>
 8015350:	2800      	cmp	r0, #0
 8015352:	d0b2      	beq.n	80152ba <__gethex+0x1c0>
 8015354:	f04f 0a03 	mov.w	sl, #3
 8015358:	e7b1      	b.n	80152be <__gethex+0x1c4>
 801535a:	da09      	bge.n	8015370 <__gethex+0x276>
 801535c:	1bf7      	subs	r7, r6, r7
 801535e:	4629      	mov	r1, r5
 8015360:	463a      	mov	r2, r7
 8015362:	9802      	ldr	r0, [sp, #8]
 8015364:	f000 fc5c 	bl	8015c20 <__lshift>
 8015368:	1be4      	subs	r4, r4, r7
 801536a:	4605      	mov	r5, r0
 801536c:	f100 0914 	add.w	r9, r0, #20
 8015370:	f04f 0a00 	mov.w	sl, #0
 8015374:	e7a8      	b.n	80152c8 <__gethex+0x1ce>
 8015376:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801537a:	42a0      	cmp	r0, r4
 801537c:	dd6a      	ble.n	8015454 <__gethex+0x35a>
 801537e:	1b04      	subs	r4, r0, r4
 8015380:	42a6      	cmp	r6, r4
 8015382:	dc2e      	bgt.n	80153e2 <__gethex+0x2e8>
 8015384:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015388:	2b02      	cmp	r3, #2
 801538a:	d022      	beq.n	80153d2 <__gethex+0x2d8>
 801538c:	2b03      	cmp	r3, #3
 801538e:	d024      	beq.n	80153da <__gethex+0x2e0>
 8015390:	2b01      	cmp	r3, #1
 8015392:	d115      	bne.n	80153c0 <__gethex+0x2c6>
 8015394:	42a6      	cmp	r6, r4
 8015396:	d113      	bne.n	80153c0 <__gethex+0x2c6>
 8015398:	2e01      	cmp	r6, #1
 801539a:	dc0b      	bgt.n	80153b4 <__gethex+0x2ba>
 801539c:	9a06      	ldr	r2, [sp, #24]
 801539e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80153a2:	6013      	str	r3, [r2, #0]
 80153a4:	2301      	movs	r3, #1
 80153a6:	612b      	str	r3, [r5, #16]
 80153a8:	f8c9 3000 	str.w	r3, [r9]
 80153ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153ae:	2762      	movs	r7, #98	; 0x62
 80153b0:	601d      	str	r5, [r3, #0]
 80153b2:	e72a      	b.n	801520a <__gethex+0x110>
 80153b4:	1e71      	subs	r1, r6, #1
 80153b6:	4628      	mov	r0, r5
 80153b8:	f000 fe10 	bl	8015fdc <__any_on>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d1ed      	bne.n	801539c <__gethex+0x2a2>
 80153c0:	4629      	mov	r1, r5
 80153c2:	9802      	ldr	r0, [sp, #8]
 80153c4:	f000 fa61 	bl	801588a <_Bfree>
 80153c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153ca:	2300      	movs	r3, #0
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	2750      	movs	r7, #80	; 0x50
 80153d0:	e71b      	b.n	801520a <__gethex+0x110>
 80153d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d0e1      	beq.n	801539c <__gethex+0x2a2>
 80153d8:	e7f2      	b.n	80153c0 <__gethex+0x2c6>
 80153da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d1dd      	bne.n	801539c <__gethex+0x2a2>
 80153e0:	e7ee      	b.n	80153c0 <__gethex+0x2c6>
 80153e2:	1e67      	subs	r7, r4, #1
 80153e4:	f1ba 0f00 	cmp.w	sl, #0
 80153e8:	d131      	bne.n	801544e <__gethex+0x354>
 80153ea:	b127      	cbz	r7, 80153f6 <__gethex+0x2fc>
 80153ec:	4639      	mov	r1, r7
 80153ee:	4628      	mov	r0, r5
 80153f0:	f000 fdf4 	bl	8015fdc <__any_on>
 80153f4:	4682      	mov	sl, r0
 80153f6:	117a      	asrs	r2, r7, #5
 80153f8:	2301      	movs	r3, #1
 80153fa:	f007 071f 	and.w	r7, r7, #31
 80153fe:	fa03 f707 	lsl.w	r7, r3, r7
 8015402:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015406:	4621      	mov	r1, r4
 8015408:	421f      	tst	r7, r3
 801540a:	4628      	mov	r0, r5
 801540c:	bf18      	it	ne
 801540e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015412:	1b36      	subs	r6, r6, r4
 8015414:	f7ff fe22 	bl	801505c <rshift>
 8015418:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801541c:	2702      	movs	r7, #2
 801541e:	f1ba 0f00 	cmp.w	sl, #0
 8015422:	d048      	beq.n	80154b6 <__gethex+0x3bc>
 8015424:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015428:	2b02      	cmp	r3, #2
 801542a:	d015      	beq.n	8015458 <__gethex+0x35e>
 801542c:	2b03      	cmp	r3, #3
 801542e:	d017      	beq.n	8015460 <__gethex+0x366>
 8015430:	2b01      	cmp	r3, #1
 8015432:	d109      	bne.n	8015448 <__gethex+0x34e>
 8015434:	f01a 0f02 	tst.w	sl, #2
 8015438:	d006      	beq.n	8015448 <__gethex+0x34e>
 801543a:	f8d9 3000 	ldr.w	r3, [r9]
 801543e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015442:	f01a 0f01 	tst.w	sl, #1
 8015446:	d10e      	bne.n	8015466 <__gethex+0x36c>
 8015448:	f047 0710 	orr.w	r7, r7, #16
 801544c:	e033      	b.n	80154b6 <__gethex+0x3bc>
 801544e:	f04f 0a01 	mov.w	sl, #1
 8015452:	e7d0      	b.n	80153f6 <__gethex+0x2fc>
 8015454:	2701      	movs	r7, #1
 8015456:	e7e2      	b.n	801541e <__gethex+0x324>
 8015458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801545a:	f1c3 0301 	rsb	r3, r3, #1
 801545e:	9315      	str	r3, [sp, #84]	; 0x54
 8015460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0f0      	beq.n	8015448 <__gethex+0x34e>
 8015466:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801546a:	f105 0314 	add.w	r3, r5, #20
 801546e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015472:	eb03 010a 	add.w	r1, r3, sl
 8015476:	f04f 0c00 	mov.w	ip, #0
 801547a:	4618      	mov	r0, r3
 801547c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015480:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015484:	d01c      	beq.n	80154c0 <__gethex+0x3c6>
 8015486:	3201      	adds	r2, #1
 8015488:	6002      	str	r2, [r0, #0]
 801548a:	2f02      	cmp	r7, #2
 801548c:	f105 0314 	add.w	r3, r5, #20
 8015490:	d138      	bne.n	8015504 <__gethex+0x40a>
 8015492:	f8d8 2000 	ldr.w	r2, [r8]
 8015496:	3a01      	subs	r2, #1
 8015498:	42b2      	cmp	r2, r6
 801549a:	d10a      	bne.n	80154b2 <__gethex+0x3b8>
 801549c:	1171      	asrs	r1, r6, #5
 801549e:	2201      	movs	r2, #1
 80154a0:	f006 061f 	and.w	r6, r6, #31
 80154a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80154a8:	fa02 f606 	lsl.w	r6, r2, r6
 80154ac:	421e      	tst	r6, r3
 80154ae:	bf18      	it	ne
 80154b0:	4617      	movne	r7, r2
 80154b2:	f047 0720 	orr.w	r7, r7, #32
 80154b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154b8:	601d      	str	r5, [r3, #0]
 80154ba:	9b06      	ldr	r3, [sp, #24]
 80154bc:	601c      	str	r4, [r3, #0]
 80154be:	e6a4      	b.n	801520a <__gethex+0x110>
 80154c0:	4299      	cmp	r1, r3
 80154c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80154c6:	d8d8      	bhi.n	801547a <__gethex+0x380>
 80154c8:	68ab      	ldr	r3, [r5, #8]
 80154ca:	4599      	cmp	r9, r3
 80154cc:	db12      	blt.n	80154f4 <__gethex+0x3fa>
 80154ce:	6869      	ldr	r1, [r5, #4]
 80154d0:	9802      	ldr	r0, [sp, #8]
 80154d2:	3101      	adds	r1, #1
 80154d4:	f000 f9a5 	bl	8015822 <_Balloc>
 80154d8:	692a      	ldr	r2, [r5, #16]
 80154da:	3202      	adds	r2, #2
 80154dc:	f105 010c 	add.w	r1, r5, #12
 80154e0:	4683      	mov	fp, r0
 80154e2:	0092      	lsls	r2, r2, #2
 80154e4:	300c      	adds	r0, #12
 80154e6:	f000 f991 	bl	801580c <memcpy>
 80154ea:	4629      	mov	r1, r5
 80154ec:	9802      	ldr	r0, [sp, #8]
 80154ee:	f000 f9cc 	bl	801588a <_Bfree>
 80154f2:	465d      	mov	r5, fp
 80154f4:	692b      	ldr	r3, [r5, #16]
 80154f6:	1c5a      	adds	r2, r3, #1
 80154f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80154fc:	612a      	str	r2, [r5, #16]
 80154fe:	2201      	movs	r2, #1
 8015500:	615a      	str	r2, [r3, #20]
 8015502:	e7c2      	b.n	801548a <__gethex+0x390>
 8015504:	692a      	ldr	r2, [r5, #16]
 8015506:	454a      	cmp	r2, r9
 8015508:	dd0b      	ble.n	8015522 <__gethex+0x428>
 801550a:	2101      	movs	r1, #1
 801550c:	4628      	mov	r0, r5
 801550e:	f7ff fda5 	bl	801505c <rshift>
 8015512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015516:	3401      	adds	r4, #1
 8015518:	42a3      	cmp	r3, r4
 801551a:	f6ff aed9 	blt.w	80152d0 <__gethex+0x1d6>
 801551e:	2701      	movs	r7, #1
 8015520:	e7c7      	b.n	80154b2 <__gethex+0x3b8>
 8015522:	f016 061f 	ands.w	r6, r6, #31
 8015526:	d0fa      	beq.n	801551e <__gethex+0x424>
 8015528:	449a      	add	sl, r3
 801552a:	f1c6 0620 	rsb	r6, r6, #32
 801552e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015532:	f000 fa3a 	bl	80159aa <__hi0bits>
 8015536:	42b0      	cmp	r0, r6
 8015538:	dbe7      	blt.n	801550a <__gethex+0x410>
 801553a:	e7f0      	b.n	801551e <__gethex+0x424>

0801553c <L_shift>:
 801553c:	f1c2 0208 	rsb	r2, r2, #8
 8015540:	0092      	lsls	r2, r2, #2
 8015542:	b570      	push	{r4, r5, r6, lr}
 8015544:	f1c2 0620 	rsb	r6, r2, #32
 8015548:	6843      	ldr	r3, [r0, #4]
 801554a:	6804      	ldr	r4, [r0, #0]
 801554c:	fa03 f506 	lsl.w	r5, r3, r6
 8015550:	432c      	orrs	r4, r5
 8015552:	40d3      	lsrs	r3, r2
 8015554:	6004      	str	r4, [r0, #0]
 8015556:	f840 3f04 	str.w	r3, [r0, #4]!
 801555a:	4288      	cmp	r0, r1
 801555c:	d3f4      	bcc.n	8015548 <L_shift+0xc>
 801555e:	bd70      	pop	{r4, r5, r6, pc}

08015560 <__match>:
 8015560:	b530      	push	{r4, r5, lr}
 8015562:	6803      	ldr	r3, [r0, #0]
 8015564:	3301      	adds	r3, #1
 8015566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801556a:	b914      	cbnz	r4, 8015572 <__match+0x12>
 801556c:	6003      	str	r3, [r0, #0]
 801556e:	2001      	movs	r0, #1
 8015570:	bd30      	pop	{r4, r5, pc}
 8015572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015576:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801557a:	2d19      	cmp	r5, #25
 801557c:	bf98      	it	ls
 801557e:	3220      	addls	r2, #32
 8015580:	42a2      	cmp	r2, r4
 8015582:	d0f0      	beq.n	8015566 <__match+0x6>
 8015584:	2000      	movs	r0, #0
 8015586:	e7f3      	b.n	8015570 <__match+0x10>

08015588 <__hexnan>:
 8015588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558c:	680b      	ldr	r3, [r1, #0]
 801558e:	6801      	ldr	r1, [r0, #0]
 8015590:	115f      	asrs	r7, r3, #5
 8015592:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015596:	f013 031f 	ands.w	r3, r3, #31
 801559a:	b087      	sub	sp, #28
 801559c:	bf18      	it	ne
 801559e:	3704      	addne	r7, #4
 80155a0:	2500      	movs	r5, #0
 80155a2:	1f3e      	subs	r6, r7, #4
 80155a4:	4682      	mov	sl, r0
 80155a6:	4690      	mov	r8, r2
 80155a8:	9301      	str	r3, [sp, #4]
 80155aa:	f847 5c04 	str.w	r5, [r7, #-4]
 80155ae:	46b1      	mov	r9, r6
 80155b0:	4634      	mov	r4, r6
 80155b2:	9502      	str	r5, [sp, #8]
 80155b4:	46ab      	mov	fp, r5
 80155b6:	784a      	ldrb	r2, [r1, #1]
 80155b8:	1c4b      	adds	r3, r1, #1
 80155ba:	9303      	str	r3, [sp, #12]
 80155bc:	b342      	cbz	r2, 8015610 <__hexnan+0x88>
 80155be:	4610      	mov	r0, r2
 80155c0:	9105      	str	r1, [sp, #20]
 80155c2:	9204      	str	r2, [sp, #16]
 80155c4:	f7ff fd84 	bl	80150d0 <__hexdig_fun>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d143      	bne.n	8015654 <__hexnan+0xcc>
 80155cc:	9a04      	ldr	r2, [sp, #16]
 80155ce:	9905      	ldr	r1, [sp, #20]
 80155d0:	2a20      	cmp	r2, #32
 80155d2:	d818      	bhi.n	8015606 <__hexnan+0x7e>
 80155d4:	9b02      	ldr	r3, [sp, #8]
 80155d6:	459b      	cmp	fp, r3
 80155d8:	dd13      	ble.n	8015602 <__hexnan+0x7a>
 80155da:	454c      	cmp	r4, r9
 80155dc:	d206      	bcs.n	80155ec <__hexnan+0x64>
 80155de:	2d07      	cmp	r5, #7
 80155e0:	dc04      	bgt.n	80155ec <__hexnan+0x64>
 80155e2:	462a      	mov	r2, r5
 80155e4:	4649      	mov	r1, r9
 80155e6:	4620      	mov	r0, r4
 80155e8:	f7ff ffa8 	bl	801553c <L_shift>
 80155ec:	4544      	cmp	r4, r8
 80155ee:	d944      	bls.n	801567a <__hexnan+0xf2>
 80155f0:	2300      	movs	r3, #0
 80155f2:	f1a4 0904 	sub.w	r9, r4, #4
 80155f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80155fa:	f8cd b008 	str.w	fp, [sp, #8]
 80155fe:	464c      	mov	r4, r9
 8015600:	461d      	mov	r5, r3
 8015602:	9903      	ldr	r1, [sp, #12]
 8015604:	e7d7      	b.n	80155b6 <__hexnan+0x2e>
 8015606:	2a29      	cmp	r2, #41	; 0x29
 8015608:	d14a      	bne.n	80156a0 <__hexnan+0x118>
 801560a:	3102      	adds	r1, #2
 801560c:	f8ca 1000 	str.w	r1, [sl]
 8015610:	f1bb 0f00 	cmp.w	fp, #0
 8015614:	d044      	beq.n	80156a0 <__hexnan+0x118>
 8015616:	454c      	cmp	r4, r9
 8015618:	d206      	bcs.n	8015628 <__hexnan+0xa0>
 801561a:	2d07      	cmp	r5, #7
 801561c:	dc04      	bgt.n	8015628 <__hexnan+0xa0>
 801561e:	462a      	mov	r2, r5
 8015620:	4649      	mov	r1, r9
 8015622:	4620      	mov	r0, r4
 8015624:	f7ff ff8a 	bl	801553c <L_shift>
 8015628:	4544      	cmp	r4, r8
 801562a:	d928      	bls.n	801567e <__hexnan+0xf6>
 801562c:	4643      	mov	r3, r8
 801562e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015632:	f843 2b04 	str.w	r2, [r3], #4
 8015636:	42a6      	cmp	r6, r4
 8015638:	d2f9      	bcs.n	801562e <__hexnan+0xa6>
 801563a:	2200      	movs	r2, #0
 801563c:	f843 2b04 	str.w	r2, [r3], #4
 8015640:	429e      	cmp	r6, r3
 8015642:	d2fb      	bcs.n	801563c <__hexnan+0xb4>
 8015644:	6833      	ldr	r3, [r6, #0]
 8015646:	b91b      	cbnz	r3, 8015650 <__hexnan+0xc8>
 8015648:	4546      	cmp	r6, r8
 801564a:	d127      	bne.n	801569c <__hexnan+0x114>
 801564c:	2301      	movs	r3, #1
 801564e:	6033      	str	r3, [r6, #0]
 8015650:	2005      	movs	r0, #5
 8015652:	e026      	b.n	80156a2 <__hexnan+0x11a>
 8015654:	3501      	adds	r5, #1
 8015656:	2d08      	cmp	r5, #8
 8015658:	f10b 0b01 	add.w	fp, fp, #1
 801565c:	dd06      	ble.n	801566c <__hexnan+0xe4>
 801565e:	4544      	cmp	r4, r8
 8015660:	d9cf      	bls.n	8015602 <__hexnan+0x7a>
 8015662:	2300      	movs	r3, #0
 8015664:	f844 3c04 	str.w	r3, [r4, #-4]
 8015668:	2501      	movs	r5, #1
 801566a:	3c04      	subs	r4, #4
 801566c:	6822      	ldr	r2, [r4, #0]
 801566e:	f000 000f 	and.w	r0, r0, #15
 8015672:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015676:	6020      	str	r0, [r4, #0]
 8015678:	e7c3      	b.n	8015602 <__hexnan+0x7a>
 801567a:	2508      	movs	r5, #8
 801567c:	e7c1      	b.n	8015602 <__hexnan+0x7a>
 801567e:	9b01      	ldr	r3, [sp, #4]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d0df      	beq.n	8015644 <__hexnan+0xbc>
 8015684:	f04f 32ff 	mov.w	r2, #4294967295
 8015688:	f1c3 0320 	rsb	r3, r3, #32
 801568c:	fa22 f303 	lsr.w	r3, r2, r3
 8015690:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015694:	401a      	ands	r2, r3
 8015696:	f847 2c04 	str.w	r2, [r7, #-4]
 801569a:	e7d3      	b.n	8015644 <__hexnan+0xbc>
 801569c:	3e04      	subs	r6, #4
 801569e:	e7d1      	b.n	8015644 <__hexnan+0xbc>
 80156a0:	2004      	movs	r0, #4
 80156a2:	b007      	add	sp, #28
 80156a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156a8 <__locale_ctype_ptr_l>:
 80156a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80156ac:	4770      	bx	lr
	...

080156b0 <__locale_ctype_ptr>:
 80156b0:	4b04      	ldr	r3, [pc, #16]	; (80156c4 <__locale_ctype_ptr+0x14>)
 80156b2:	4a05      	ldr	r2, [pc, #20]	; (80156c8 <__locale_ctype_ptr+0x18>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6a1b      	ldr	r3, [r3, #32]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	bf08      	it	eq
 80156bc:	4613      	moveq	r3, r2
 80156be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80156c2:	4770      	bx	lr
 80156c4:	2000000c 	.word	0x2000000c
 80156c8:	20000070 	.word	0x20000070

080156cc <__localeconv_l>:
 80156cc:	30f0      	adds	r0, #240	; 0xf0
 80156ce:	4770      	bx	lr

080156d0 <_localeconv_r>:
 80156d0:	4b04      	ldr	r3, [pc, #16]	; (80156e4 <_localeconv_r+0x14>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	6a18      	ldr	r0, [r3, #32]
 80156d6:	4b04      	ldr	r3, [pc, #16]	; (80156e8 <_localeconv_r+0x18>)
 80156d8:	2800      	cmp	r0, #0
 80156da:	bf08      	it	eq
 80156dc:	4618      	moveq	r0, r3
 80156de:	30f0      	adds	r0, #240	; 0xf0
 80156e0:	4770      	bx	lr
 80156e2:	bf00      	nop
 80156e4:	2000000c 	.word	0x2000000c
 80156e8:	20000070 	.word	0x20000070

080156ec <_lseek_r>:
 80156ec:	b538      	push	{r3, r4, r5, lr}
 80156ee:	4c07      	ldr	r4, [pc, #28]	; (801570c <_lseek_r+0x20>)
 80156f0:	4605      	mov	r5, r0
 80156f2:	4608      	mov	r0, r1
 80156f4:	4611      	mov	r1, r2
 80156f6:	2200      	movs	r2, #0
 80156f8:	6022      	str	r2, [r4, #0]
 80156fa:	461a      	mov	r2, r3
 80156fc:	f7ef fd74 	bl	80051e8 <_lseek>
 8015700:	1c43      	adds	r3, r0, #1
 8015702:	d102      	bne.n	801570a <_lseek_r+0x1e>
 8015704:	6823      	ldr	r3, [r4, #0]
 8015706:	b103      	cbz	r3, 801570a <_lseek_r+0x1e>
 8015708:	602b      	str	r3, [r5, #0]
 801570a:	bd38      	pop	{r3, r4, r5, pc}
 801570c:	20018234 	.word	0x20018234

08015710 <__swhatbuf_r>:
 8015710:	b570      	push	{r4, r5, r6, lr}
 8015712:	460e      	mov	r6, r1
 8015714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015718:	2900      	cmp	r1, #0
 801571a:	b096      	sub	sp, #88	; 0x58
 801571c:	4614      	mov	r4, r2
 801571e:	461d      	mov	r5, r3
 8015720:	da07      	bge.n	8015732 <__swhatbuf_r+0x22>
 8015722:	2300      	movs	r3, #0
 8015724:	602b      	str	r3, [r5, #0]
 8015726:	89b3      	ldrh	r3, [r6, #12]
 8015728:	061a      	lsls	r2, r3, #24
 801572a:	d410      	bmi.n	801574e <__swhatbuf_r+0x3e>
 801572c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015730:	e00e      	b.n	8015750 <__swhatbuf_r+0x40>
 8015732:	466a      	mov	r2, sp
 8015734:	f001 fc2e 	bl	8016f94 <_fstat_r>
 8015738:	2800      	cmp	r0, #0
 801573a:	dbf2      	blt.n	8015722 <__swhatbuf_r+0x12>
 801573c:	9a01      	ldr	r2, [sp, #4]
 801573e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015746:	425a      	negs	r2, r3
 8015748:	415a      	adcs	r2, r3
 801574a:	602a      	str	r2, [r5, #0]
 801574c:	e7ee      	b.n	801572c <__swhatbuf_r+0x1c>
 801574e:	2340      	movs	r3, #64	; 0x40
 8015750:	2000      	movs	r0, #0
 8015752:	6023      	str	r3, [r4, #0]
 8015754:	b016      	add	sp, #88	; 0x58
 8015756:	bd70      	pop	{r4, r5, r6, pc}

08015758 <__smakebuf_r>:
 8015758:	898b      	ldrh	r3, [r1, #12]
 801575a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801575c:	079d      	lsls	r5, r3, #30
 801575e:	4606      	mov	r6, r0
 8015760:	460c      	mov	r4, r1
 8015762:	d507      	bpl.n	8015774 <__smakebuf_r+0x1c>
 8015764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015768:	6023      	str	r3, [r4, #0]
 801576a:	6123      	str	r3, [r4, #16]
 801576c:	2301      	movs	r3, #1
 801576e:	6163      	str	r3, [r4, #20]
 8015770:	b002      	add	sp, #8
 8015772:	bd70      	pop	{r4, r5, r6, pc}
 8015774:	ab01      	add	r3, sp, #4
 8015776:	466a      	mov	r2, sp
 8015778:	f7ff ffca 	bl	8015710 <__swhatbuf_r>
 801577c:	9900      	ldr	r1, [sp, #0]
 801577e:	4605      	mov	r5, r0
 8015780:	4630      	mov	r0, r6
 8015782:	f000 fca9 	bl	80160d8 <_malloc_r>
 8015786:	b948      	cbnz	r0, 801579c <__smakebuf_r+0x44>
 8015788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801578c:	059a      	lsls	r2, r3, #22
 801578e:	d4ef      	bmi.n	8015770 <__smakebuf_r+0x18>
 8015790:	f023 0303 	bic.w	r3, r3, #3
 8015794:	f043 0302 	orr.w	r3, r3, #2
 8015798:	81a3      	strh	r3, [r4, #12]
 801579a:	e7e3      	b.n	8015764 <__smakebuf_r+0xc>
 801579c:	4b0d      	ldr	r3, [pc, #52]	; (80157d4 <__smakebuf_r+0x7c>)
 801579e:	62b3      	str	r3, [r6, #40]	; 0x28
 80157a0:	89a3      	ldrh	r3, [r4, #12]
 80157a2:	6020      	str	r0, [r4, #0]
 80157a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157a8:	81a3      	strh	r3, [r4, #12]
 80157aa:	9b00      	ldr	r3, [sp, #0]
 80157ac:	6163      	str	r3, [r4, #20]
 80157ae:	9b01      	ldr	r3, [sp, #4]
 80157b0:	6120      	str	r0, [r4, #16]
 80157b2:	b15b      	cbz	r3, 80157cc <__smakebuf_r+0x74>
 80157b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157b8:	4630      	mov	r0, r6
 80157ba:	f001 fbfd 	bl	8016fb8 <_isatty_r>
 80157be:	b128      	cbz	r0, 80157cc <__smakebuf_r+0x74>
 80157c0:	89a3      	ldrh	r3, [r4, #12]
 80157c2:	f023 0303 	bic.w	r3, r3, #3
 80157c6:	f043 0301 	orr.w	r3, r3, #1
 80157ca:	81a3      	strh	r3, [r4, #12]
 80157cc:	89a3      	ldrh	r3, [r4, #12]
 80157ce:	431d      	orrs	r5, r3
 80157d0:	81a5      	strh	r5, [r4, #12]
 80157d2:	e7cd      	b.n	8015770 <__smakebuf_r+0x18>
 80157d4:	08014f11 	.word	0x08014f11

080157d8 <malloc>:
 80157d8:	4b02      	ldr	r3, [pc, #8]	; (80157e4 <malloc+0xc>)
 80157da:	4601      	mov	r1, r0
 80157dc:	6818      	ldr	r0, [r3, #0]
 80157de:	f000 bc7b 	b.w	80160d8 <_malloc_r>
 80157e2:	bf00      	nop
 80157e4:	2000000c 	.word	0x2000000c

080157e8 <__ascii_mbtowc>:
 80157e8:	b082      	sub	sp, #8
 80157ea:	b901      	cbnz	r1, 80157ee <__ascii_mbtowc+0x6>
 80157ec:	a901      	add	r1, sp, #4
 80157ee:	b142      	cbz	r2, 8015802 <__ascii_mbtowc+0x1a>
 80157f0:	b14b      	cbz	r3, 8015806 <__ascii_mbtowc+0x1e>
 80157f2:	7813      	ldrb	r3, [r2, #0]
 80157f4:	600b      	str	r3, [r1, #0]
 80157f6:	7812      	ldrb	r2, [r2, #0]
 80157f8:	1c10      	adds	r0, r2, #0
 80157fa:	bf18      	it	ne
 80157fc:	2001      	movne	r0, #1
 80157fe:	b002      	add	sp, #8
 8015800:	4770      	bx	lr
 8015802:	4610      	mov	r0, r2
 8015804:	e7fb      	b.n	80157fe <__ascii_mbtowc+0x16>
 8015806:	f06f 0001 	mvn.w	r0, #1
 801580a:	e7f8      	b.n	80157fe <__ascii_mbtowc+0x16>

0801580c <memcpy>:
 801580c:	b510      	push	{r4, lr}
 801580e:	1e43      	subs	r3, r0, #1
 8015810:	440a      	add	r2, r1
 8015812:	4291      	cmp	r1, r2
 8015814:	d100      	bne.n	8015818 <memcpy+0xc>
 8015816:	bd10      	pop	{r4, pc}
 8015818:	f811 4b01 	ldrb.w	r4, [r1], #1
 801581c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015820:	e7f7      	b.n	8015812 <memcpy+0x6>

08015822 <_Balloc>:
 8015822:	b570      	push	{r4, r5, r6, lr}
 8015824:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015826:	4604      	mov	r4, r0
 8015828:	460e      	mov	r6, r1
 801582a:	b93d      	cbnz	r5, 801583c <_Balloc+0x1a>
 801582c:	2010      	movs	r0, #16
 801582e:	f7ff ffd3 	bl	80157d8 <malloc>
 8015832:	6260      	str	r0, [r4, #36]	; 0x24
 8015834:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015838:	6005      	str	r5, [r0, #0]
 801583a:	60c5      	str	r5, [r0, #12]
 801583c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801583e:	68eb      	ldr	r3, [r5, #12]
 8015840:	b183      	cbz	r3, 8015864 <_Balloc+0x42>
 8015842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801584a:	b9b8      	cbnz	r0, 801587c <_Balloc+0x5a>
 801584c:	2101      	movs	r1, #1
 801584e:	fa01 f506 	lsl.w	r5, r1, r6
 8015852:	1d6a      	adds	r2, r5, #5
 8015854:	0092      	lsls	r2, r2, #2
 8015856:	4620      	mov	r0, r4
 8015858:	f000 fbe1 	bl	801601e <_calloc_r>
 801585c:	b160      	cbz	r0, 8015878 <_Balloc+0x56>
 801585e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015862:	e00e      	b.n	8015882 <_Balloc+0x60>
 8015864:	2221      	movs	r2, #33	; 0x21
 8015866:	2104      	movs	r1, #4
 8015868:	4620      	mov	r0, r4
 801586a:	f000 fbd8 	bl	801601e <_calloc_r>
 801586e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015870:	60e8      	str	r0, [r5, #12]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d1e4      	bne.n	8015842 <_Balloc+0x20>
 8015878:	2000      	movs	r0, #0
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	6802      	ldr	r2, [r0, #0]
 801587e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015882:	2300      	movs	r3, #0
 8015884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015888:	e7f7      	b.n	801587a <_Balloc+0x58>

0801588a <_Bfree>:
 801588a:	b570      	push	{r4, r5, r6, lr}
 801588c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801588e:	4606      	mov	r6, r0
 8015890:	460d      	mov	r5, r1
 8015892:	b93c      	cbnz	r4, 80158a4 <_Bfree+0x1a>
 8015894:	2010      	movs	r0, #16
 8015896:	f7ff ff9f 	bl	80157d8 <malloc>
 801589a:	6270      	str	r0, [r6, #36]	; 0x24
 801589c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80158a0:	6004      	str	r4, [r0, #0]
 80158a2:	60c4      	str	r4, [r0, #12]
 80158a4:	b13d      	cbz	r5, 80158b6 <_Bfree+0x2c>
 80158a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80158a8:	686a      	ldr	r2, [r5, #4]
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80158b0:	6029      	str	r1, [r5, #0]
 80158b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80158b6:	bd70      	pop	{r4, r5, r6, pc}

080158b8 <__multadd>:
 80158b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158bc:	690d      	ldr	r5, [r1, #16]
 80158be:	461f      	mov	r7, r3
 80158c0:	4606      	mov	r6, r0
 80158c2:	460c      	mov	r4, r1
 80158c4:	f101 0c14 	add.w	ip, r1, #20
 80158c8:	2300      	movs	r3, #0
 80158ca:	f8dc 0000 	ldr.w	r0, [ip]
 80158ce:	b281      	uxth	r1, r0
 80158d0:	fb02 7101 	mla	r1, r2, r1, r7
 80158d4:	0c0f      	lsrs	r7, r1, #16
 80158d6:	0c00      	lsrs	r0, r0, #16
 80158d8:	fb02 7000 	mla	r0, r2, r0, r7
 80158dc:	b289      	uxth	r1, r1
 80158de:	3301      	adds	r3, #1
 80158e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80158e4:	429d      	cmp	r5, r3
 80158e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80158ea:	f84c 1b04 	str.w	r1, [ip], #4
 80158ee:	dcec      	bgt.n	80158ca <__multadd+0x12>
 80158f0:	b1d7      	cbz	r7, 8015928 <__multadd+0x70>
 80158f2:	68a3      	ldr	r3, [r4, #8]
 80158f4:	42ab      	cmp	r3, r5
 80158f6:	dc12      	bgt.n	801591e <__multadd+0x66>
 80158f8:	6861      	ldr	r1, [r4, #4]
 80158fa:	4630      	mov	r0, r6
 80158fc:	3101      	adds	r1, #1
 80158fe:	f7ff ff90 	bl	8015822 <_Balloc>
 8015902:	6922      	ldr	r2, [r4, #16]
 8015904:	3202      	adds	r2, #2
 8015906:	f104 010c 	add.w	r1, r4, #12
 801590a:	4680      	mov	r8, r0
 801590c:	0092      	lsls	r2, r2, #2
 801590e:	300c      	adds	r0, #12
 8015910:	f7ff ff7c 	bl	801580c <memcpy>
 8015914:	4621      	mov	r1, r4
 8015916:	4630      	mov	r0, r6
 8015918:	f7ff ffb7 	bl	801588a <_Bfree>
 801591c:	4644      	mov	r4, r8
 801591e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015922:	3501      	adds	r5, #1
 8015924:	615f      	str	r7, [r3, #20]
 8015926:	6125      	str	r5, [r4, #16]
 8015928:	4620      	mov	r0, r4
 801592a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801592e <__s2b>:
 801592e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015932:	460c      	mov	r4, r1
 8015934:	4615      	mov	r5, r2
 8015936:	461f      	mov	r7, r3
 8015938:	2209      	movs	r2, #9
 801593a:	3308      	adds	r3, #8
 801593c:	4606      	mov	r6, r0
 801593e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015942:	2100      	movs	r1, #0
 8015944:	2201      	movs	r2, #1
 8015946:	429a      	cmp	r2, r3
 8015948:	db20      	blt.n	801598c <__s2b+0x5e>
 801594a:	4630      	mov	r0, r6
 801594c:	f7ff ff69 	bl	8015822 <_Balloc>
 8015950:	9b08      	ldr	r3, [sp, #32]
 8015952:	6143      	str	r3, [r0, #20]
 8015954:	2d09      	cmp	r5, #9
 8015956:	f04f 0301 	mov.w	r3, #1
 801595a:	6103      	str	r3, [r0, #16]
 801595c:	dd19      	ble.n	8015992 <__s2b+0x64>
 801595e:	f104 0809 	add.w	r8, r4, #9
 8015962:	46c1      	mov	r9, r8
 8015964:	442c      	add	r4, r5
 8015966:	f819 3b01 	ldrb.w	r3, [r9], #1
 801596a:	4601      	mov	r1, r0
 801596c:	3b30      	subs	r3, #48	; 0x30
 801596e:	220a      	movs	r2, #10
 8015970:	4630      	mov	r0, r6
 8015972:	f7ff ffa1 	bl	80158b8 <__multadd>
 8015976:	45a1      	cmp	r9, r4
 8015978:	d1f5      	bne.n	8015966 <__s2b+0x38>
 801597a:	eb08 0405 	add.w	r4, r8, r5
 801597e:	3c08      	subs	r4, #8
 8015980:	1b2d      	subs	r5, r5, r4
 8015982:	1963      	adds	r3, r4, r5
 8015984:	42bb      	cmp	r3, r7
 8015986:	db07      	blt.n	8015998 <__s2b+0x6a>
 8015988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801598c:	0052      	lsls	r2, r2, #1
 801598e:	3101      	adds	r1, #1
 8015990:	e7d9      	b.n	8015946 <__s2b+0x18>
 8015992:	340a      	adds	r4, #10
 8015994:	2509      	movs	r5, #9
 8015996:	e7f3      	b.n	8015980 <__s2b+0x52>
 8015998:	f814 3b01 	ldrb.w	r3, [r4], #1
 801599c:	4601      	mov	r1, r0
 801599e:	3b30      	subs	r3, #48	; 0x30
 80159a0:	220a      	movs	r2, #10
 80159a2:	4630      	mov	r0, r6
 80159a4:	f7ff ff88 	bl	80158b8 <__multadd>
 80159a8:	e7eb      	b.n	8015982 <__s2b+0x54>

080159aa <__hi0bits>:
 80159aa:	0c02      	lsrs	r2, r0, #16
 80159ac:	0412      	lsls	r2, r2, #16
 80159ae:	4603      	mov	r3, r0
 80159b0:	b9b2      	cbnz	r2, 80159e0 <__hi0bits+0x36>
 80159b2:	0403      	lsls	r3, r0, #16
 80159b4:	2010      	movs	r0, #16
 80159b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80159ba:	bf04      	itt	eq
 80159bc:	021b      	lsleq	r3, r3, #8
 80159be:	3008      	addeq	r0, #8
 80159c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80159c4:	bf04      	itt	eq
 80159c6:	011b      	lsleq	r3, r3, #4
 80159c8:	3004      	addeq	r0, #4
 80159ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80159ce:	bf04      	itt	eq
 80159d0:	009b      	lsleq	r3, r3, #2
 80159d2:	3002      	addeq	r0, #2
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	db06      	blt.n	80159e6 <__hi0bits+0x3c>
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	d503      	bpl.n	80159e4 <__hi0bits+0x3a>
 80159dc:	3001      	adds	r0, #1
 80159de:	4770      	bx	lr
 80159e0:	2000      	movs	r0, #0
 80159e2:	e7e8      	b.n	80159b6 <__hi0bits+0xc>
 80159e4:	2020      	movs	r0, #32
 80159e6:	4770      	bx	lr

080159e8 <__lo0bits>:
 80159e8:	6803      	ldr	r3, [r0, #0]
 80159ea:	f013 0207 	ands.w	r2, r3, #7
 80159ee:	4601      	mov	r1, r0
 80159f0:	d00b      	beq.n	8015a0a <__lo0bits+0x22>
 80159f2:	07da      	lsls	r2, r3, #31
 80159f4:	d423      	bmi.n	8015a3e <__lo0bits+0x56>
 80159f6:	0798      	lsls	r0, r3, #30
 80159f8:	bf49      	itett	mi
 80159fa:	085b      	lsrmi	r3, r3, #1
 80159fc:	089b      	lsrpl	r3, r3, #2
 80159fe:	2001      	movmi	r0, #1
 8015a00:	600b      	strmi	r3, [r1, #0]
 8015a02:	bf5c      	itt	pl
 8015a04:	600b      	strpl	r3, [r1, #0]
 8015a06:	2002      	movpl	r0, #2
 8015a08:	4770      	bx	lr
 8015a0a:	b298      	uxth	r0, r3
 8015a0c:	b9a8      	cbnz	r0, 8015a3a <__lo0bits+0x52>
 8015a0e:	0c1b      	lsrs	r3, r3, #16
 8015a10:	2010      	movs	r0, #16
 8015a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015a16:	bf04      	itt	eq
 8015a18:	0a1b      	lsreq	r3, r3, #8
 8015a1a:	3008      	addeq	r0, #8
 8015a1c:	071a      	lsls	r2, r3, #28
 8015a1e:	bf04      	itt	eq
 8015a20:	091b      	lsreq	r3, r3, #4
 8015a22:	3004      	addeq	r0, #4
 8015a24:	079a      	lsls	r2, r3, #30
 8015a26:	bf04      	itt	eq
 8015a28:	089b      	lsreq	r3, r3, #2
 8015a2a:	3002      	addeq	r0, #2
 8015a2c:	07da      	lsls	r2, r3, #31
 8015a2e:	d402      	bmi.n	8015a36 <__lo0bits+0x4e>
 8015a30:	085b      	lsrs	r3, r3, #1
 8015a32:	d006      	beq.n	8015a42 <__lo0bits+0x5a>
 8015a34:	3001      	adds	r0, #1
 8015a36:	600b      	str	r3, [r1, #0]
 8015a38:	4770      	bx	lr
 8015a3a:	4610      	mov	r0, r2
 8015a3c:	e7e9      	b.n	8015a12 <__lo0bits+0x2a>
 8015a3e:	2000      	movs	r0, #0
 8015a40:	4770      	bx	lr
 8015a42:	2020      	movs	r0, #32
 8015a44:	4770      	bx	lr

08015a46 <__i2b>:
 8015a46:	b510      	push	{r4, lr}
 8015a48:	460c      	mov	r4, r1
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	f7ff fee9 	bl	8015822 <_Balloc>
 8015a50:	2201      	movs	r2, #1
 8015a52:	6144      	str	r4, [r0, #20]
 8015a54:	6102      	str	r2, [r0, #16]
 8015a56:	bd10      	pop	{r4, pc}

08015a58 <__multiply>:
 8015a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	4614      	mov	r4, r2
 8015a5e:	690a      	ldr	r2, [r1, #16]
 8015a60:	6923      	ldr	r3, [r4, #16]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	bfb8      	it	lt
 8015a66:	460b      	movlt	r3, r1
 8015a68:	4688      	mov	r8, r1
 8015a6a:	bfbc      	itt	lt
 8015a6c:	46a0      	movlt	r8, r4
 8015a6e:	461c      	movlt	r4, r3
 8015a70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015a74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015a78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015a80:	eb07 0609 	add.w	r6, r7, r9
 8015a84:	42b3      	cmp	r3, r6
 8015a86:	bfb8      	it	lt
 8015a88:	3101      	addlt	r1, #1
 8015a8a:	f7ff feca 	bl	8015822 <_Balloc>
 8015a8e:	f100 0514 	add.w	r5, r0, #20
 8015a92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015a96:	462b      	mov	r3, r5
 8015a98:	2200      	movs	r2, #0
 8015a9a:	4573      	cmp	r3, lr
 8015a9c:	d316      	bcc.n	8015acc <__multiply+0x74>
 8015a9e:	f104 0214 	add.w	r2, r4, #20
 8015aa2:	f108 0114 	add.w	r1, r8, #20
 8015aa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015aaa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015aae:	9300      	str	r3, [sp, #0]
 8015ab0:	9b00      	ldr	r3, [sp, #0]
 8015ab2:	9201      	str	r2, [sp, #4]
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d80c      	bhi.n	8015ad2 <__multiply+0x7a>
 8015ab8:	2e00      	cmp	r6, #0
 8015aba:	dd03      	ble.n	8015ac4 <__multiply+0x6c>
 8015abc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d05d      	beq.n	8015b80 <__multiply+0x128>
 8015ac4:	6106      	str	r6, [r0, #16]
 8015ac6:	b003      	add	sp, #12
 8015ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015acc:	f843 2b04 	str.w	r2, [r3], #4
 8015ad0:	e7e3      	b.n	8015a9a <__multiply+0x42>
 8015ad2:	f8b2 b000 	ldrh.w	fp, [r2]
 8015ad6:	f1bb 0f00 	cmp.w	fp, #0
 8015ada:	d023      	beq.n	8015b24 <__multiply+0xcc>
 8015adc:	4689      	mov	r9, r1
 8015ade:	46ac      	mov	ip, r5
 8015ae0:	f04f 0800 	mov.w	r8, #0
 8015ae4:	f859 4b04 	ldr.w	r4, [r9], #4
 8015ae8:	f8dc a000 	ldr.w	sl, [ip]
 8015aec:	b2a3      	uxth	r3, r4
 8015aee:	fa1f fa8a 	uxth.w	sl, sl
 8015af2:	fb0b a303 	mla	r3, fp, r3, sl
 8015af6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015afa:	f8dc 4000 	ldr.w	r4, [ip]
 8015afe:	4443      	add	r3, r8
 8015b00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015b04:	fb0b 840a 	mla	r4, fp, sl, r8
 8015b08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015b0c:	46e2      	mov	sl, ip
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015b14:	454f      	cmp	r7, r9
 8015b16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015b1a:	f84a 3b04 	str.w	r3, [sl], #4
 8015b1e:	d82b      	bhi.n	8015b78 <__multiply+0x120>
 8015b20:	f8cc 8004 	str.w	r8, [ip, #4]
 8015b24:	9b01      	ldr	r3, [sp, #4]
 8015b26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015b2a:	3204      	adds	r2, #4
 8015b2c:	f1ba 0f00 	cmp.w	sl, #0
 8015b30:	d020      	beq.n	8015b74 <__multiply+0x11c>
 8015b32:	682b      	ldr	r3, [r5, #0]
 8015b34:	4689      	mov	r9, r1
 8015b36:	46a8      	mov	r8, r5
 8015b38:	f04f 0b00 	mov.w	fp, #0
 8015b3c:	f8b9 c000 	ldrh.w	ip, [r9]
 8015b40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015b44:	fb0a 440c 	mla	r4, sl, ip, r4
 8015b48:	445c      	add	r4, fp
 8015b4a:	46c4      	mov	ip, r8
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015b52:	f84c 3b04 	str.w	r3, [ip], #4
 8015b56:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015b5e:	0c1b      	lsrs	r3, r3, #16
 8015b60:	fb0a b303 	mla	r3, sl, r3, fp
 8015b64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015b68:	454f      	cmp	r7, r9
 8015b6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015b6e:	d805      	bhi.n	8015b7c <__multiply+0x124>
 8015b70:	f8c8 3004 	str.w	r3, [r8, #4]
 8015b74:	3504      	adds	r5, #4
 8015b76:	e79b      	b.n	8015ab0 <__multiply+0x58>
 8015b78:	46d4      	mov	ip, sl
 8015b7a:	e7b3      	b.n	8015ae4 <__multiply+0x8c>
 8015b7c:	46e0      	mov	r8, ip
 8015b7e:	e7dd      	b.n	8015b3c <__multiply+0xe4>
 8015b80:	3e01      	subs	r6, #1
 8015b82:	e799      	b.n	8015ab8 <__multiply+0x60>

08015b84 <__pow5mult>:
 8015b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b88:	4615      	mov	r5, r2
 8015b8a:	f012 0203 	ands.w	r2, r2, #3
 8015b8e:	4606      	mov	r6, r0
 8015b90:	460f      	mov	r7, r1
 8015b92:	d007      	beq.n	8015ba4 <__pow5mult+0x20>
 8015b94:	3a01      	subs	r2, #1
 8015b96:	4c21      	ldr	r4, [pc, #132]	; (8015c1c <__pow5mult+0x98>)
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b9e:	f7ff fe8b 	bl	80158b8 <__multadd>
 8015ba2:	4607      	mov	r7, r0
 8015ba4:	10ad      	asrs	r5, r5, #2
 8015ba6:	d035      	beq.n	8015c14 <__pow5mult+0x90>
 8015ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015baa:	b93c      	cbnz	r4, 8015bbc <__pow5mult+0x38>
 8015bac:	2010      	movs	r0, #16
 8015bae:	f7ff fe13 	bl	80157d8 <malloc>
 8015bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8015bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015bb8:	6004      	str	r4, [r0, #0]
 8015bba:	60c4      	str	r4, [r0, #12]
 8015bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015bc4:	b94c      	cbnz	r4, 8015bda <__pow5mult+0x56>
 8015bc6:	f240 2171 	movw	r1, #625	; 0x271
 8015bca:	4630      	mov	r0, r6
 8015bcc:	f7ff ff3b 	bl	8015a46 <__i2b>
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	6003      	str	r3, [r0, #0]
 8015bda:	f04f 0800 	mov.w	r8, #0
 8015bde:	07eb      	lsls	r3, r5, #31
 8015be0:	d50a      	bpl.n	8015bf8 <__pow5mult+0x74>
 8015be2:	4639      	mov	r1, r7
 8015be4:	4622      	mov	r2, r4
 8015be6:	4630      	mov	r0, r6
 8015be8:	f7ff ff36 	bl	8015a58 <__multiply>
 8015bec:	4639      	mov	r1, r7
 8015bee:	4681      	mov	r9, r0
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f7ff fe4a 	bl	801588a <_Bfree>
 8015bf6:	464f      	mov	r7, r9
 8015bf8:	106d      	asrs	r5, r5, #1
 8015bfa:	d00b      	beq.n	8015c14 <__pow5mult+0x90>
 8015bfc:	6820      	ldr	r0, [r4, #0]
 8015bfe:	b938      	cbnz	r0, 8015c10 <__pow5mult+0x8c>
 8015c00:	4622      	mov	r2, r4
 8015c02:	4621      	mov	r1, r4
 8015c04:	4630      	mov	r0, r6
 8015c06:	f7ff ff27 	bl	8015a58 <__multiply>
 8015c0a:	6020      	str	r0, [r4, #0]
 8015c0c:	f8c0 8000 	str.w	r8, [r0]
 8015c10:	4604      	mov	r4, r0
 8015c12:	e7e4      	b.n	8015bde <__pow5mult+0x5a>
 8015c14:	4638      	mov	r0, r7
 8015c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c1a:	bf00      	nop
 8015c1c:	08017ac8 	.word	0x08017ac8

08015c20 <__lshift>:
 8015c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c24:	460c      	mov	r4, r1
 8015c26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c2a:	6923      	ldr	r3, [r4, #16]
 8015c2c:	6849      	ldr	r1, [r1, #4]
 8015c2e:	eb0a 0903 	add.w	r9, sl, r3
 8015c32:	68a3      	ldr	r3, [r4, #8]
 8015c34:	4607      	mov	r7, r0
 8015c36:	4616      	mov	r6, r2
 8015c38:	f109 0501 	add.w	r5, r9, #1
 8015c3c:	42ab      	cmp	r3, r5
 8015c3e:	db32      	blt.n	8015ca6 <__lshift+0x86>
 8015c40:	4638      	mov	r0, r7
 8015c42:	f7ff fdee 	bl	8015822 <_Balloc>
 8015c46:	2300      	movs	r3, #0
 8015c48:	4680      	mov	r8, r0
 8015c4a:	f100 0114 	add.w	r1, r0, #20
 8015c4e:	461a      	mov	r2, r3
 8015c50:	4553      	cmp	r3, sl
 8015c52:	db2b      	blt.n	8015cac <__lshift+0x8c>
 8015c54:	6920      	ldr	r0, [r4, #16]
 8015c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c5a:	f104 0314 	add.w	r3, r4, #20
 8015c5e:	f016 021f 	ands.w	r2, r6, #31
 8015c62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c6a:	d025      	beq.n	8015cb8 <__lshift+0x98>
 8015c6c:	f1c2 0e20 	rsb	lr, r2, #32
 8015c70:	2000      	movs	r0, #0
 8015c72:	681e      	ldr	r6, [r3, #0]
 8015c74:	468a      	mov	sl, r1
 8015c76:	4096      	lsls	r6, r2
 8015c78:	4330      	orrs	r0, r6
 8015c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8015c7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015c82:	459c      	cmp	ip, r3
 8015c84:	fa20 f00e 	lsr.w	r0, r0, lr
 8015c88:	d814      	bhi.n	8015cb4 <__lshift+0x94>
 8015c8a:	6048      	str	r0, [r1, #4]
 8015c8c:	b108      	cbz	r0, 8015c92 <__lshift+0x72>
 8015c8e:	f109 0502 	add.w	r5, r9, #2
 8015c92:	3d01      	subs	r5, #1
 8015c94:	4638      	mov	r0, r7
 8015c96:	f8c8 5010 	str.w	r5, [r8, #16]
 8015c9a:	4621      	mov	r1, r4
 8015c9c:	f7ff fdf5 	bl	801588a <_Bfree>
 8015ca0:	4640      	mov	r0, r8
 8015ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca6:	3101      	adds	r1, #1
 8015ca8:	005b      	lsls	r3, r3, #1
 8015caa:	e7c7      	b.n	8015c3c <__lshift+0x1c>
 8015cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	e7cd      	b.n	8015c50 <__lshift+0x30>
 8015cb4:	4651      	mov	r1, sl
 8015cb6:	e7dc      	b.n	8015c72 <__lshift+0x52>
 8015cb8:	3904      	subs	r1, #4
 8015cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8015cc2:	459c      	cmp	ip, r3
 8015cc4:	d8f9      	bhi.n	8015cba <__lshift+0x9a>
 8015cc6:	e7e4      	b.n	8015c92 <__lshift+0x72>

08015cc8 <__mcmp>:
 8015cc8:	6903      	ldr	r3, [r0, #16]
 8015cca:	690a      	ldr	r2, [r1, #16]
 8015ccc:	1a9b      	subs	r3, r3, r2
 8015cce:	b530      	push	{r4, r5, lr}
 8015cd0:	d10c      	bne.n	8015cec <__mcmp+0x24>
 8015cd2:	0092      	lsls	r2, r2, #2
 8015cd4:	3014      	adds	r0, #20
 8015cd6:	3114      	adds	r1, #20
 8015cd8:	1884      	adds	r4, r0, r2
 8015cda:	4411      	add	r1, r2
 8015cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ce4:	4295      	cmp	r5, r2
 8015ce6:	d003      	beq.n	8015cf0 <__mcmp+0x28>
 8015ce8:	d305      	bcc.n	8015cf6 <__mcmp+0x2e>
 8015cea:	2301      	movs	r3, #1
 8015cec:	4618      	mov	r0, r3
 8015cee:	bd30      	pop	{r4, r5, pc}
 8015cf0:	42a0      	cmp	r0, r4
 8015cf2:	d3f3      	bcc.n	8015cdc <__mcmp+0x14>
 8015cf4:	e7fa      	b.n	8015cec <__mcmp+0x24>
 8015cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cfa:	e7f7      	b.n	8015cec <__mcmp+0x24>

08015cfc <__mdiff>:
 8015cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d00:	460d      	mov	r5, r1
 8015d02:	4607      	mov	r7, r0
 8015d04:	4611      	mov	r1, r2
 8015d06:	4628      	mov	r0, r5
 8015d08:	4614      	mov	r4, r2
 8015d0a:	f7ff ffdd 	bl	8015cc8 <__mcmp>
 8015d0e:	1e06      	subs	r6, r0, #0
 8015d10:	d108      	bne.n	8015d24 <__mdiff+0x28>
 8015d12:	4631      	mov	r1, r6
 8015d14:	4638      	mov	r0, r7
 8015d16:	f7ff fd84 	bl	8015822 <_Balloc>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d24:	bfa4      	itt	ge
 8015d26:	4623      	movge	r3, r4
 8015d28:	462c      	movge	r4, r5
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	6861      	ldr	r1, [r4, #4]
 8015d2e:	bfa6      	itte	ge
 8015d30:	461d      	movge	r5, r3
 8015d32:	2600      	movge	r6, #0
 8015d34:	2601      	movlt	r6, #1
 8015d36:	f7ff fd74 	bl	8015822 <_Balloc>
 8015d3a:	692b      	ldr	r3, [r5, #16]
 8015d3c:	60c6      	str	r6, [r0, #12]
 8015d3e:	6926      	ldr	r6, [r4, #16]
 8015d40:	f105 0914 	add.w	r9, r5, #20
 8015d44:	f104 0214 	add.w	r2, r4, #20
 8015d48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015d4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015d50:	f100 0514 	add.w	r5, r0, #20
 8015d54:	f04f 0e00 	mov.w	lr, #0
 8015d58:	f852 ab04 	ldr.w	sl, [r2], #4
 8015d5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015d60:	fa1e f18a 	uxtah	r1, lr, sl
 8015d64:	b2a3      	uxth	r3, r4
 8015d66:	1ac9      	subs	r1, r1, r3
 8015d68:	0c23      	lsrs	r3, r4, #16
 8015d6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015d6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015d72:	b289      	uxth	r1, r1
 8015d74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015d78:	45c8      	cmp	r8, r9
 8015d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015d7e:	4694      	mov	ip, r2
 8015d80:	f845 3b04 	str.w	r3, [r5], #4
 8015d84:	d8e8      	bhi.n	8015d58 <__mdiff+0x5c>
 8015d86:	45bc      	cmp	ip, r7
 8015d88:	d304      	bcc.n	8015d94 <__mdiff+0x98>
 8015d8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015d8e:	b183      	cbz	r3, 8015db2 <__mdiff+0xb6>
 8015d90:	6106      	str	r6, [r0, #16]
 8015d92:	e7c5      	b.n	8015d20 <__mdiff+0x24>
 8015d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015d98:	fa1e f381 	uxtah	r3, lr, r1
 8015d9c:	141a      	asrs	r2, r3, #16
 8015d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015da8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015dac:	f845 3b04 	str.w	r3, [r5], #4
 8015db0:	e7e9      	b.n	8015d86 <__mdiff+0x8a>
 8015db2:	3e01      	subs	r6, #1
 8015db4:	e7e9      	b.n	8015d8a <__mdiff+0x8e>
	...

08015db8 <__ulp>:
 8015db8:	4b12      	ldr	r3, [pc, #72]	; (8015e04 <__ulp+0x4c>)
 8015dba:	ee10 2a90 	vmov	r2, s1
 8015dbe:	401a      	ands	r2, r3
 8015dc0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	dd04      	ble.n	8015dd2 <__ulp+0x1a>
 8015dc8:	2000      	movs	r0, #0
 8015dca:	4619      	mov	r1, r3
 8015dcc:	ec41 0b10 	vmov	d0, r0, r1
 8015dd0:	4770      	bx	lr
 8015dd2:	425b      	negs	r3, r3
 8015dd4:	151b      	asrs	r3, r3, #20
 8015dd6:	2b13      	cmp	r3, #19
 8015dd8:	f04f 0000 	mov.w	r0, #0
 8015ddc:	f04f 0100 	mov.w	r1, #0
 8015de0:	dc04      	bgt.n	8015dec <__ulp+0x34>
 8015de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015de6:	fa42 f103 	asr.w	r1, r2, r3
 8015dea:	e7ef      	b.n	8015dcc <__ulp+0x14>
 8015dec:	3b14      	subs	r3, #20
 8015dee:	2b1e      	cmp	r3, #30
 8015df0:	f04f 0201 	mov.w	r2, #1
 8015df4:	bfda      	itte	le
 8015df6:	f1c3 031f 	rsble	r3, r3, #31
 8015dfa:	fa02 f303 	lslle.w	r3, r2, r3
 8015dfe:	4613      	movgt	r3, r2
 8015e00:	4618      	mov	r0, r3
 8015e02:	e7e3      	b.n	8015dcc <__ulp+0x14>
 8015e04:	7ff00000 	.word	0x7ff00000

08015e08 <__b2d>:
 8015e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e0a:	6905      	ldr	r5, [r0, #16]
 8015e0c:	f100 0714 	add.w	r7, r0, #20
 8015e10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015e14:	1f2e      	subs	r6, r5, #4
 8015e16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015e1a:	4620      	mov	r0, r4
 8015e1c:	f7ff fdc5 	bl	80159aa <__hi0bits>
 8015e20:	f1c0 0320 	rsb	r3, r0, #32
 8015e24:	280a      	cmp	r0, #10
 8015e26:	600b      	str	r3, [r1, #0]
 8015e28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015ea0 <__b2d+0x98>
 8015e2c:	dc14      	bgt.n	8015e58 <__b2d+0x50>
 8015e2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015e32:	fa24 f10e 	lsr.w	r1, r4, lr
 8015e36:	42b7      	cmp	r7, r6
 8015e38:	ea41 030c 	orr.w	r3, r1, ip
 8015e3c:	bf34      	ite	cc
 8015e3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015e42:	2100      	movcs	r1, #0
 8015e44:	3015      	adds	r0, #21
 8015e46:	fa04 f000 	lsl.w	r0, r4, r0
 8015e4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8015e4e:	ea40 0201 	orr.w	r2, r0, r1
 8015e52:	ec43 2b10 	vmov	d0, r2, r3
 8015e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e58:	42b7      	cmp	r7, r6
 8015e5a:	bf3a      	itte	cc
 8015e5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015e60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015e64:	2100      	movcs	r1, #0
 8015e66:	380b      	subs	r0, #11
 8015e68:	d015      	beq.n	8015e96 <__b2d+0x8e>
 8015e6a:	4084      	lsls	r4, r0
 8015e6c:	f1c0 0520 	rsb	r5, r0, #32
 8015e70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015e74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015e78:	42be      	cmp	r6, r7
 8015e7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8015e7e:	ea44 030c 	orr.w	r3, r4, ip
 8015e82:	bf8c      	ite	hi
 8015e84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015e88:	2400      	movls	r4, #0
 8015e8a:	fa01 f000 	lsl.w	r0, r1, r0
 8015e8e:	40ec      	lsrs	r4, r5
 8015e90:	ea40 0204 	orr.w	r2, r0, r4
 8015e94:	e7dd      	b.n	8015e52 <__b2d+0x4a>
 8015e96:	ea44 030c 	orr.w	r3, r4, ip
 8015e9a:	460a      	mov	r2, r1
 8015e9c:	e7d9      	b.n	8015e52 <__b2d+0x4a>
 8015e9e:	bf00      	nop
 8015ea0:	3ff00000 	.word	0x3ff00000

08015ea4 <__d2b>:
 8015ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ea8:	460e      	mov	r6, r1
 8015eaa:	2101      	movs	r1, #1
 8015eac:	ec59 8b10 	vmov	r8, r9, d0
 8015eb0:	4615      	mov	r5, r2
 8015eb2:	f7ff fcb6 	bl	8015822 <_Balloc>
 8015eb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015eba:	4607      	mov	r7, r0
 8015ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015ec0:	bb34      	cbnz	r4, 8015f10 <__d2b+0x6c>
 8015ec2:	9301      	str	r3, [sp, #4]
 8015ec4:	f1b8 0300 	subs.w	r3, r8, #0
 8015ec8:	d027      	beq.n	8015f1a <__d2b+0x76>
 8015eca:	a802      	add	r0, sp, #8
 8015ecc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015ed0:	f7ff fd8a 	bl	80159e8 <__lo0bits>
 8015ed4:	9900      	ldr	r1, [sp, #0]
 8015ed6:	b1f0      	cbz	r0, 8015f16 <__d2b+0x72>
 8015ed8:	9a01      	ldr	r2, [sp, #4]
 8015eda:	f1c0 0320 	rsb	r3, r0, #32
 8015ede:	fa02 f303 	lsl.w	r3, r2, r3
 8015ee2:	430b      	orrs	r3, r1
 8015ee4:	40c2      	lsrs	r2, r0
 8015ee6:	617b      	str	r3, [r7, #20]
 8015ee8:	9201      	str	r2, [sp, #4]
 8015eea:	9b01      	ldr	r3, [sp, #4]
 8015eec:	61bb      	str	r3, [r7, #24]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	bf14      	ite	ne
 8015ef2:	2102      	movne	r1, #2
 8015ef4:	2101      	moveq	r1, #1
 8015ef6:	6139      	str	r1, [r7, #16]
 8015ef8:	b1c4      	cbz	r4, 8015f2c <__d2b+0x88>
 8015efa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015efe:	4404      	add	r4, r0
 8015f00:	6034      	str	r4, [r6, #0]
 8015f02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015f06:	6028      	str	r0, [r5, #0]
 8015f08:	4638      	mov	r0, r7
 8015f0a:	b003      	add	sp, #12
 8015f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f14:	e7d5      	b.n	8015ec2 <__d2b+0x1e>
 8015f16:	6179      	str	r1, [r7, #20]
 8015f18:	e7e7      	b.n	8015eea <__d2b+0x46>
 8015f1a:	a801      	add	r0, sp, #4
 8015f1c:	f7ff fd64 	bl	80159e8 <__lo0bits>
 8015f20:	9b01      	ldr	r3, [sp, #4]
 8015f22:	617b      	str	r3, [r7, #20]
 8015f24:	2101      	movs	r1, #1
 8015f26:	6139      	str	r1, [r7, #16]
 8015f28:	3020      	adds	r0, #32
 8015f2a:	e7e5      	b.n	8015ef8 <__d2b+0x54>
 8015f2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015f34:	6030      	str	r0, [r6, #0]
 8015f36:	6918      	ldr	r0, [r3, #16]
 8015f38:	f7ff fd37 	bl	80159aa <__hi0bits>
 8015f3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015f40:	e7e1      	b.n	8015f06 <__d2b+0x62>

08015f42 <__ratio>:
 8015f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f46:	4688      	mov	r8, r1
 8015f48:	4669      	mov	r1, sp
 8015f4a:	4681      	mov	r9, r0
 8015f4c:	f7ff ff5c 	bl	8015e08 <__b2d>
 8015f50:	a901      	add	r1, sp, #4
 8015f52:	4640      	mov	r0, r8
 8015f54:	ec57 6b10 	vmov	r6, r7, d0
 8015f58:	f7ff ff56 	bl	8015e08 <__b2d>
 8015f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015f64:	eba3 0c02 	sub.w	ip, r3, r2
 8015f68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015f6c:	1a9b      	subs	r3, r3, r2
 8015f6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015f72:	ec5b ab10 	vmov	sl, fp, d0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	bfce      	itee	gt
 8015f7a:	463a      	movgt	r2, r7
 8015f7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015f80:	465a      	movle	r2, fp
 8015f82:	4659      	mov	r1, fp
 8015f84:	463d      	mov	r5, r7
 8015f86:	bfd4      	ite	le
 8015f88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015f8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015f90:	4630      	mov	r0, r6
 8015f92:	ee10 2a10 	vmov	r2, s0
 8015f96:	460b      	mov	r3, r1
 8015f98:	4629      	mov	r1, r5
 8015f9a:	f7ea fc6f 	bl	800087c <__aeabi_ddiv>
 8015f9e:	ec41 0b10 	vmov	d0, r0, r1
 8015fa2:	b003      	add	sp, #12
 8015fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015fa8 <__copybits>:
 8015fa8:	3901      	subs	r1, #1
 8015faa:	b510      	push	{r4, lr}
 8015fac:	1149      	asrs	r1, r1, #5
 8015fae:	6914      	ldr	r4, [r2, #16]
 8015fb0:	3101      	adds	r1, #1
 8015fb2:	f102 0314 	add.w	r3, r2, #20
 8015fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015fbe:	42a3      	cmp	r3, r4
 8015fc0:	4602      	mov	r2, r0
 8015fc2:	d303      	bcc.n	8015fcc <__copybits+0x24>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	428a      	cmp	r2, r1
 8015fc8:	d305      	bcc.n	8015fd6 <__copybits+0x2e>
 8015fca:	bd10      	pop	{r4, pc}
 8015fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fd0:	f840 2b04 	str.w	r2, [r0], #4
 8015fd4:	e7f3      	b.n	8015fbe <__copybits+0x16>
 8015fd6:	f842 3b04 	str.w	r3, [r2], #4
 8015fda:	e7f4      	b.n	8015fc6 <__copybits+0x1e>

08015fdc <__any_on>:
 8015fdc:	f100 0214 	add.w	r2, r0, #20
 8015fe0:	6900      	ldr	r0, [r0, #16]
 8015fe2:	114b      	asrs	r3, r1, #5
 8015fe4:	4298      	cmp	r0, r3
 8015fe6:	b510      	push	{r4, lr}
 8015fe8:	db11      	blt.n	801600e <__any_on+0x32>
 8015fea:	dd0a      	ble.n	8016002 <__any_on+0x26>
 8015fec:	f011 011f 	ands.w	r1, r1, #31
 8015ff0:	d007      	beq.n	8016002 <__any_on+0x26>
 8015ff2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015ff6:	fa24 f001 	lsr.w	r0, r4, r1
 8015ffa:	fa00 f101 	lsl.w	r1, r0, r1
 8015ffe:	428c      	cmp	r4, r1
 8016000:	d10b      	bne.n	801601a <__any_on+0x3e>
 8016002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016006:	4293      	cmp	r3, r2
 8016008:	d803      	bhi.n	8016012 <__any_on+0x36>
 801600a:	2000      	movs	r0, #0
 801600c:	bd10      	pop	{r4, pc}
 801600e:	4603      	mov	r3, r0
 8016010:	e7f7      	b.n	8016002 <__any_on+0x26>
 8016012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016016:	2900      	cmp	r1, #0
 8016018:	d0f5      	beq.n	8016006 <__any_on+0x2a>
 801601a:	2001      	movs	r0, #1
 801601c:	e7f6      	b.n	801600c <__any_on+0x30>

0801601e <_calloc_r>:
 801601e:	b538      	push	{r3, r4, r5, lr}
 8016020:	fb02 f401 	mul.w	r4, r2, r1
 8016024:	4621      	mov	r1, r4
 8016026:	f000 f857 	bl	80160d8 <_malloc_r>
 801602a:	4605      	mov	r5, r0
 801602c:	b118      	cbz	r0, 8016036 <_calloc_r+0x18>
 801602e:	4622      	mov	r2, r4
 8016030:	2100      	movs	r1, #0
 8016032:	f7fc f8fd 	bl	8012230 <memset>
 8016036:	4628      	mov	r0, r5
 8016038:	bd38      	pop	{r3, r4, r5, pc}
	...

0801603c <_free_r>:
 801603c:	b538      	push	{r3, r4, r5, lr}
 801603e:	4605      	mov	r5, r0
 8016040:	2900      	cmp	r1, #0
 8016042:	d045      	beq.n	80160d0 <_free_r+0x94>
 8016044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016048:	1f0c      	subs	r4, r1, #4
 801604a:	2b00      	cmp	r3, #0
 801604c:	bfb8      	it	lt
 801604e:	18e4      	addlt	r4, r4, r3
 8016050:	f000 ffdb 	bl	801700a <__malloc_lock>
 8016054:	4a1f      	ldr	r2, [pc, #124]	; (80160d4 <_free_r+0x98>)
 8016056:	6813      	ldr	r3, [r2, #0]
 8016058:	4610      	mov	r0, r2
 801605a:	b933      	cbnz	r3, 801606a <_free_r+0x2e>
 801605c:	6063      	str	r3, [r4, #4]
 801605e:	6014      	str	r4, [r2, #0]
 8016060:	4628      	mov	r0, r5
 8016062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016066:	f000 bfd1 	b.w	801700c <__malloc_unlock>
 801606a:	42a3      	cmp	r3, r4
 801606c:	d90c      	bls.n	8016088 <_free_r+0x4c>
 801606e:	6821      	ldr	r1, [r4, #0]
 8016070:	1862      	adds	r2, r4, r1
 8016072:	4293      	cmp	r3, r2
 8016074:	bf04      	itt	eq
 8016076:	681a      	ldreq	r2, [r3, #0]
 8016078:	685b      	ldreq	r3, [r3, #4]
 801607a:	6063      	str	r3, [r4, #4]
 801607c:	bf04      	itt	eq
 801607e:	1852      	addeq	r2, r2, r1
 8016080:	6022      	streq	r2, [r4, #0]
 8016082:	6004      	str	r4, [r0, #0]
 8016084:	e7ec      	b.n	8016060 <_free_r+0x24>
 8016086:	4613      	mov	r3, r2
 8016088:	685a      	ldr	r2, [r3, #4]
 801608a:	b10a      	cbz	r2, 8016090 <_free_r+0x54>
 801608c:	42a2      	cmp	r2, r4
 801608e:	d9fa      	bls.n	8016086 <_free_r+0x4a>
 8016090:	6819      	ldr	r1, [r3, #0]
 8016092:	1858      	adds	r0, r3, r1
 8016094:	42a0      	cmp	r0, r4
 8016096:	d10b      	bne.n	80160b0 <_free_r+0x74>
 8016098:	6820      	ldr	r0, [r4, #0]
 801609a:	4401      	add	r1, r0
 801609c:	1858      	adds	r0, r3, r1
 801609e:	4282      	cmp	r2, r0
 80160a0:	6019      	str	r1, [r3, #0]
 80160a2:	d1dd      	bne.n	8016060 <_free_r+0x24>
 80160a4:	6810      	ldr	r0, [r2, #0]
 80160a6:	6852      	ldr	r2, [r2, #4]
 80160a8:	605a      	str	r2, [r3, #4]
 80160aa:	4401      	add	r1, r0
 80160ac:	6019      	str	r1, [r3, #0]
 80160ae:	e7d7      	b.n	8016060 <_free_r+0x24>
 80160b0:	d902      	bls.n	80160b8 <_free_r+0x7c>
 80160b2:	230c      	movs	r3, #12
 80160b4:	602b      	str	r3, [r5, #0]
 80160b6:	e7d3      	b.n	8016060 <_free_r+0x24>
 80160b8:	6820      	ldr	r0, [r4, #0]
 80160ba:	1821      	adds	r1, r4, r0
 80160bc:	428a      	cmp	r2, r1
 80160be:	bf04      	itt	eq
 80160c0:	6811      	ldreq	r1, [r2, #0]
 80160c2:	6852      	ldreq	r2, [r2, #4]
 80160c4:	6062      	str	r2, [r4, #4]
 80160c6:	bf04      	itt	eq
 80160c8:	1809      	addeq	r1, r1, r0
 80160ca:	6021      	streq	r1, [r4, #0]
 80160cc:	605c      	str	r4, [r3, #4]
 80160ce:	e7c7      	b.n	8016060 <_free_r+0x24>
 80160d0:	bd38      	pop	{r3, r4, r5, pc}
 80160d2:	bf00      	nop
 80160d4:	20013928 	.word	0x20013928

080160d8 <_malloc_r>:
 80160d8:	b570      	push	{r4, r5, r6, lr}
 80160da:	1ccd      	adds	r5, r1, #3
 80160dc:	f025 0503 	bic.w	r5, r5, #3
 80160e0:	3508      	adds	r5, #8
 80160e2:	2d0c      	cmp	r5, #12
 80160e4:	bf38      	it	cc
 80160e6:	250c      	movcc	r5, #12
 80160e8:	2d00      	cmp	r5, #0
 80160ea:	4606      	mov	r6, r0
 80160ec:	db01      	blt.n	80160f2 <_malloc_r+0x1a>
 80160ee:	42a9      	cmp	r1, r5
 80160f0:	d903      	bls.n	80160fa <_malloc_r+0x22>
 80160f2:	230c      	movs	r3, #12
 80160f4:	6033      	str	r3, [r6, #0]
 80160f6:	2000      	movs	r0, #0
 80160f8:	bd70      	pop	{r4, r5, r6, pc}
 80160fa:	f000 ff86 	bl	801700a <__malloc_lock>
 80160fe:	4a21      	ldr	r2, [pc, #132]	; (8016184 <_malloc_r+0xac>)
 8016100:	6814      	ldr	r4, [r2, #0]
 8016102:	4621      	mov	r1, r4
 8016104:	b991      	cbnz	r1, 801612c <_malloc_r+0x54>
 8016106:	4c20      	ldr	r4, [pc, #128]	; (8016188 <_malloc_r+0xb0>)
 8016108:	6823      	ldr	r3, [r4, #0]
 801610a:	b91b      	cbnz	r3, 8016114 <_malloc_r+0x3c>
 801610c:	4630      	mov	r0, r6
 801610e:	f000 fe19 	bl	8016d44 <_sbrk_r>
 8016112:	6020      	str	r0, [r4, #0]
 8016114:	4629      	mov	r1, r5
 8016116:	4630      	mov	r0, r6
 8016118:	f000 fe14 	bl	8016d44 <_sbrk_r>
 801611c:	1c43      	adds	r3, r0, #1
 801611e:	d124      	bne.n	801616a <_malloc_r+0x92>
 8016120:	230c      	movs	r3, #12
 8016122:	6033      	str	r3, [r6, #0]
 8016124:	4630      	mov	r0, r6
 8016126:	f000 ff71 	bl	801700c <__malloc_unlock>
 801612a:	e7e4      	b.n	80160f6 <_malloc_r+0x1e>
 801612c:	680b      	ldr	r3, [r1, #0]
 801612e:	1b5b      	subs	r3, r3, r5
 8016130:	d418      	bmi.n	8016164 <_malloc_r+0x8c>
 8016132:	2b0b      	cmp	r3, #11
 8016134:	d90f      	bls.n	8016156 <_malloc_r+0x7e>
 8016136:	600b      	str	r3, [r1, #0]
 8016138:	50cd      	str	r5, [r1, r3]
 801613a:	18cc      	adds	r4, r1, r3
 801613c:	4630      	mov	r0, r6
 801613e:	f000 ff65 	bl	801700c <__malloc_unlock>
 8016142:	f104 000b 	add.w	r0, r4, #11
 8016146:	1d23      	adds	r3, r4, #4
 8016148:	f020 0007 	bic.w	r0, r0, #7
 801614c:	1ac3      	subs	r3, r0, r3
 801614e:	d0d3      	beq.n	80160f8 <_malloc_r+0x20>
 8016150:	425a      	negs	r2, r3
 8016152:	50e2      	str	r2, [r4, r3]
 8016154:	e7d0      	b.n	80160f8 <_malloc_r+0x20>
 8016156:	428c      	cmp	r4, r1
 8016158:	684b      	ldr	r3, [r1, #4]
 801615a:	bf16      	itet	ne
 801615c:	6063      	strne	r3, [r4, #4]
 801615e:	6013      	streq	r3, [r2, #0]
 8016160:	460c      	movne	r4, r1
 8016162:	e7eb      	b.n	801613c <_malloc_r+0x64>
 8016164:	460c      	mov	r4, r1
 8016166:	6849      	ldr	r1, [r1, #4]
 8016168:	e7cc      	b.n	8016104 <_malloc_r+0x2c>
 801616a:	1cc4      	adds	r4, r0, #3
 801616c:	f024 0403 	bic.w	r4, r4, #3
 8016170:	42a0      	cmp	r0, r4
 8016172:	d005      	beq.n	8016180 <_malloc_r+0xa8>
 8016174:	1a21      	subs	r1, r4, r0
 8016176:	4630      	mov	r0, r6
 8016178:	f000 fde4 	bl	8016d44 <_sbrk_r>
 801617c:	3001      	adds	r0, #1
 801617e:	d0cf      	beq.n	8016120 <_malloc_r+0x48>
 8016180:	6025      	str	r5, [r4, #0]
 8016182:	e7db      	b.n	801613c <_malloc_r+0x64>
 8016184:	20013928 	.word	0x20013928
 8016188:	2001392c 	.word	0x2001392c

0801618c <__ssputs_r>:
 801618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016190:	688e      	ldr	r6, [r1, #8]
 8016192:	429e      	cmp	r6, r3
 8016194:	4682      	mov	sl, r0
 8016196:	460c      	mov	r4, r1
 8016198:	4690      	mov	r8, r2
 801619a:	4699      	mov	r9, r3
 801619c:	d837      	bhi.n	801620e <__ssputs_r+0x82>
 801619e:	898a      	ldrh	r2, [r1, #12]
 80161a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80161a4:	d031      	beq.n	801620a <__ssputs_r+0x7e>
 80161a6:	6825      	ldr	r5, [r4, #0]
 80161a8:	6909      	ldr	r1, [r1, #16]
 80161aa:	1a6f      	subs	r7, r5, r1
 80161ac:	6965      	ldr	r5, [r4, #20]
 80161ae:	2302      	movs	r3, #2
 80161b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80161b8:	f109 0301 	add.w	r3, r9, #1
 80161bc:	443b      	add	r3, r7
 80161be:	429d      	cmp	r5, r3
 80161c0:	bf38      	it	cc
 80161c2:	461d      	movcc	r5, r3
 80161c4:	0553      	lsls	r3, r2, #21
 80161c6:	d530      	bpl.n	801622a <__ssputs_r+0x9e>
 80161c8:	4629      	mov	r1, r5
 80161ca:	f7ff ff85 	bl	80160d8 <_malloc_r>
 80161ce:	4606      	mov	r6, r0
 80161d0:	b950      	cbnz	r0, 80161e8 <__ssputs_r+0x5c>
 80161d2:	230c      	movs	r3, #12
 80161d4:	f8ca 3000 	str.w	r3, [sl]
 80161d8:	89a3      	ldrh	r3, [r4, #12]
 80161da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161de:	81a3      	strh	r3, [r4, #12]
 80161e0:	f04f 30ff 	mov.w	r0, #4294967295
 80161e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e8:	463a      	mov	r2, r7
 80161ea:	6921      	ldr	r1, [r4, #16]
 80161ec:	f7ff fb0e 	bl	801580c <memcpy>
 80161f0:	89a3      	ldrh	r3, [r4, #12]
 80161f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80161f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161fa:	81a3      	strh	r3, [r4, #12]
 80161fc:	6126      	str	r6, [r4, #16]
 80161fe:	6165      	str	r5, [r4, #20]
 8016200:	443e      	add	r6, r7
 8016202:	1bed      	subs	r5, r5, r7
 8016204:	6026      	str	r6, [r4, #0]
 8016206:	60a5      	str	r5, [r4, #8]
 8016208:	464e      	mov	r6, r9
 801620a:	454e      	cmp	r6, r9
 801620c:	d900      	bls.n	8016210 <__ssputs_r+0x84>
 801620e:	464e      	mov	r6, r9
 8016210:	4632      	mov	r2, r6
 8016212:	4641      	mov	r1, r8
 8016214:	6820      	ldr	r0, [r4, #0]
 8016216:	f000 fedf 	bl	8016fd8 <memmove>
 801621a:	68a3      	ldr	r3, [r4, #8]
 801621c:	1b9b      	subs	r3, r3, r6
 801621e:	60a3      	str	r3, [r4, #8]
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	441e      	add	r6, r3
 8016224:	6026      	str	r6, [r4, #0]
 8016226:	2000      	movs	r0, #0
 8016228:	e7dc      	b.n	80161e4 <__ssputs_r+0x58>
 801622a:	462a      	mov	r2, r5
 801622c:	f000 feef 	bl	801700e <_realloc_r>
 8016230:	4606      	mov	r6, r0
 8016232:	2800      	cmp	r0, #0
 8016234:	d1e2      	bne.n	80161fc <__ssputs_r+0x70>
 8016236:	6921      	ldr	r1, [r4, #16]
 8016238:	4650      	mov	r0, sl
 801623a:	f7ff feff 	bl	801603c <_free_r>
 801623e:	e7c8      	b.n	80161d2 <__ssputs_r+0x46>

08016240 <_svfiprintf_r>:
 8016240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016244:	461d      	mov	r5, r3
 8016246:	898b      	ldrh	r3, [r1, #12]
 8016248:	061f      	lsls	r7, r3, #24
 801624a:	b09d      	sub	sp, #116	; 0x74
 801624c:	4680      	mov	r8, r0
 801624e:	460c      	mov	r4, r1
 8016250:	4616      	mov	r6, r2
 8016252:	d50f      	bpl.n	8016274 <_svfiprintf_r+0x34>
 8016254:	690b      	ldr	r3, [r1, #16]
 8016256:	b96b      	cbnz	r3, 8016274 <_svfiprintf_r+0x34>
 8016258:	2140      	movs	r1, #64	; 0x40
 801625a:	f7ff ff3d 	bl	80160d8 <_malloc_r>
 801625e:	6020      	str	r0, [r4, #0]
 8016260:	6120      	str	r0, [r4, #16]
 8016262:	b928      	cbnz	r0, 8016270 <_svfiprintf_r+0x30>
 8016264:	230c      	movs	r3, #12
 8016266:	f8c8 3000 	str.w	r3, [r8]
 801626a:	f04f 30ff 	mov.w	r0, #4294967295
 801626e:	e0c8      	b.n	8016402 <_svfiprintf_r+0x1c2>
 8016270:	2340      	movs	r3, #64	; 0x40
 8016272:	6163      	str	r3, [r4, #20]
 8016274:	2300      	movs	r3, #0
 8016276:	9309      	str	r3, [sp, #36]	; 0x24
 8016278:	2320      	movs	r3, #32
 801627a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801627e:	2330      	movs	r3, #48	; 0x30
 8016280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016284:	9503      	str	r5, [sp, #12]
 8016286:	f04f 0b01 	mov.w	fp, #1
 801628a:	4637      	mov	r7, r6
 801628c:	463d      	mov	r5, r7
 801628e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016292:	b10b      	cbz	r3, 8016298 <_svfiprintf_r+0x58>
 8016294:	2b25      	cmp	r3, #37	; 0x25
 8016296:	d13e      	bne.n	8016316 <_svfiprintf_r+0xd6>
 8016298:	ebb7 0a06 	subs.w	sl, r7, r6
 801629c:	d00b      	beq.n	80162b6 <_svfiprintf_r+0x76>
 801629e:	4653      	mov	r3, sl
 80162a0:	4632      	mov	r2, r6
 80162a2:	4621      	mov	r1, r4
 80162a4:	4640      	mov	r0, r8
 80162a6:	f7ff ff71 	bl	801618c <__ssputs_r>
 80162aa:	3001      	adds	r0, #1
 80162ac:	f000 80a4 	beq.w	80163f8 <_svfiprintf_r+0x1b8>
 80162b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b2:	4453      	add	r3, sl
 80162b4:	9309      	str	r3, [sp, #36]	; 0x24
 80162b6:	783b      	ldrb	r3, [r7, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f000 809d 	beq.w	80163f8 <_svfiprintf_r+0x1b8>
 80162be:	2300      	movs	r3, #0
 80162c0:	f04f 32ff 	mov.w	r2, #4294967295
 80162c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162c8:	9304      	str	r3, [sp, #16]
 80162ca:	9307      	str	r3, [sp, #28]
 80162cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162d0:	931a      	str	r3, [sp, #104]	; 0x68
 80162d2:	462f      	mov	r7, r5
 80162d4:	2205      	movs	r2, #5
 80162d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80162da:	4850      	ldr	r0, [pc, #320]	; (801641c <_svfiprintf_r+0x1dc>)
 80162dc:	f7e9 ff98 	bl	8000210 <memchr>
 80162e0:	9b04      	ldr	r3, [sp, #16]
 80162e2:	b9d0      	cbnz	r0, 801631a <_svfiprintf_r+0xda>
 80162e4:	06d9      	lsls	r1, r3, #27
 80162e6:	bf44      	itt	mi
 80162e8:	2220      	movmi	r2, #32
 80162ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162ee:	071a      	lsls	r2, r3, #28
 80162f0:	bf44      	itt	mi
 80162f2:	222b      	movmi	r2, #43	; 0x2b
 80162f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162f8:	782a      	ldrb	r2, [r5, #0]
 80162fa:	2a2a      	cmp	r2, #42	; 0x2a
 80162fc:	d015      	beq.n	801632a <_svfiprintf_r+0xea>
 80162fe:	9a07      	ldr	r2, [sp, #28]
 8016300:	462f      	mov	r7, r5
 8016302:	2000      	movs	r0, #0
 8016304:	250a      	movs	r5, #10
 8016306:	4639      	mov	r1, r7
 8016308:	f811 3b01 	ldrb.w	r3, [r1], #1
 801630c:	3b30      	subs	r3, #48	; 0x30
 801630e:	2b09      	cmp	r3, #9
 8016310:	d94d      	bls.n	80163ae <_svfiprintf_r+0x16e>
 8016312:	b1b8      	cbz	r0, 8016344 <_svfiprintf_r+0x104>
 8016314:	e00f      	b.n	8016336 <_svfiprintf_r+0xf6>
 8016316:	462f      	mov	r7, r5
 8016318:	e7b8      	b.n	801628c <_svfiprintf_r+0x4c>
 801631a:	4a40      	ldr	r2, [pc, #256]	; (801641c <_svfiprintf_r+0x1dc>)
 801631c:	1a80      	subs	r0, r0, r2
 801631e:	fa0b f000 	lsl.w	r0, fp, r0
 8016322:	4318      	orrs	r0, r3
 8016324:	9004      	str	r0, [sp, #16]
 8016326:	463d      	mov	r5, r7
 8016328:	e7d3      	b.n	80162d2 <_svfiprintf_r+0x92>
 801632a:	9a03      	ldr	r2, [sp, #12]
 801632c:	1d11      	adds	r1, r2, #4
 801632e:	6812      	ldr	r2, [r2, #0]
 8016330:	9103      	str	r1, [sp, #12]
 8016332:	2a00      	cmp	r2, #0
 8016334:	db01      	blt.n	801633a <_svfiprintf_r+0xfa>
 8016336:	9207      	str	r2, [sp, #28]
 8016338:	e004      	b.n	8016344 <_svfiprintf_r+0x104>
 801633a:	4252      	negs	r2, r2
 801633c:	f043 0302 	orr.w	r3, r3, #2
 8016340:	9207      	str	r2, [sp, #28]
 8016342:	9304      	str	r3, [sp, #16]
 8016344:	783b      	ldrb	r3, [r7, #0]
 8016346:	2b2e      	cmp	r3, #46	; 0x2e
 8016348:	d10c      	bne.n	8016364 <_svfiprintf_r+0x124>
 801634a:	787b      	ldrb	r3, [r7, #1]
 801634c:	2b2a      	cmp	r3, #42	; 0x2a
 801634e:	d133      	bne.n	80163b8 <_svfiprintf_r+0x178>
 8016350:	9b03      	ldr	r3, [sp, #12]
 8016352:	1d1a      	adds	r2, r3, #4
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	9203      	str	r2, [sp, #12]
 8016358:	2b00      	cmp	r3, #0
 801635a:	bfb8      	it	lt
 801635c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016360:	3702      	adds	r7, #2
 8016362:	9305      	str	r3, [sp, #20]
 8016364:	4d2e      	ldr	r5, [pc, #184]	; (8016420 <_svfiprintf_r+0x1e0>)
 8016366:	7839      	ldrb	r1, [r7, #0]
 8016368:	2203      	movs	r2, #3
 801636a:	4628      	mov	r0, r5
 801636c:	f7e9 ff50 	bl	8000210 <memchr>
 8016370:	b138      	cbz	r0, 8016382 <_svfiprintf_r+0x142>
 8016372:	2340      	movs	r3, #64	; 0x40
 8016374:	1b40      	subs	r0, r0, r5
 8016376:	fa03 f000 	lsl.w	r0, r3, r0
 801637a:	9b04      	ldr	r3, [sp, #16]
 801637c:	4303      	orrs	r3, r0
 801637e:	3701      	adds	r7, #1
 8016380:	9304      	str	r3, [sp, #16]
 8016382:	7839      	ldrb	r1, [r7, #0]
 8016384:	4827      	ldr	r0, [pc, #156]	; (8016424 <_svfiprintf_r+0x1e4>)
 8016386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801638a:	2206      	movs	r2, #6
 801638c:	1c7e      	adds	r6, r7, #1
 801638e:	f7e9 ff3f 	bl	8000210 <memchr>
 8016392:	2800      	cmp	r0, #0
 8016394:	d038      	beq.n	8016408 <_svfiprintf_r+0x1c8>
 8016396:	4b24      	ldr	r3, [pc, #144]	; (8016428 <_svfiprintf_r+0x1e8>)
 8016398:	bb13      	cbnz	r3, 80163e0 <_svfiprintf_r+0x1a0>
 801639a:	9b03      	ldr	r3, [sp, #12]
 801639c:	3307      	adds	r3, #7
 801639e:	f023 0307 	bic.w	r3, r3, #7
 80163a2:	3308      	adds	r3, #8
 80163a4:	9303      	str	r3, [sp, #12]
 80163a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a8:	444b      	add	r3, r9
 80163aa:	9309      	str	r3, [sp, #36]	; 0x24
 80163ac:	e76d      	b.n	801628a <_svfiprintf_r+0x4a>
 80163ae:	fb05 3202 	mla	r2, r5, r2, r3
 80163b2:	2001      	movs	r0, #1
 80163b4:	460f      	mov	r7, r1
 80163b6:	e7a6      	b.n	8016306 <_svfiprintf_r+0xc6>
 80163b8:	2300      	movs	r3, #0
 80163ba:	3701      	adds	r7, #1
 80163bc:	9305      	str	r3, [sp, #20]
 80163be:	4619      	mov	r1, r3
 80163c0:	250a      	movs	r5, #10
 80163c2:	4638      	mov	r0, r7
 80163c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c8:	3a30      	subs	r2, #48	; 0x30
 80163ca:	2a09      	cmp	r2, #9
 80163cc:	d903      	bls.n	80163d6 <_svfiprintf_r+0x196>
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d0c8      	beq.n	8016364 <_svfiprintf_r+0x124>
 80163d2:	9105      	str	r1, [sp, #20]
 80163d4:	e7c6      	b.n	8016364 <_svfiprintf_r+0x124>
 80163d6:	fb05 2101 	mla	r1, r5, r1, r2
 80163da:	2301      	movs	r3, #1
 80163dc:	4607      	mov	r7, r0
 80163de:	e7f0      	b.n	80163c2 <_svfiprintf_r+0x182>
 80163e0:	ab03      	add	r3, sp, #12
 80163e2:	9300      	str	r3, [sp, #0]
 80163e4:	4622      	mov	r2, r4
 80163e6:	4b11      	ldr	r3, [pc, #68]	; (801642c <_svfiprintf_r+0x1ec>)
 80163e8:	a904      	add	r1, sp, #16
 80163ea:	4640      	mov	r0, r8
 80163ec:	f7fb ffbc 	bl	8012368 <_printf_float>
 80163f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80163f4:	4681      	mov	r9, r0
 80163f6:	d1d6      	bne.n	80163a6 <_svfiprintf_r+0x166>
 80163f8:	89a3      	ldrh	r3, [r4, #12]
 80163fa:	065b      	lsls	r3, r3, #25
 80163fc:	f53f af35 	bmi.w	801626a <_svfiprintf_r+0x2a>
 8016400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016402:	b01d      	add	sp, #116	; 0x74
 8016404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016408:	ab03      	add	r3, sp, #12
 801640a:	9300      	str	r3, [sp, #0]
 801640c:	4622      	mov	r2, r4
 801640e:	4b07      	ldr	r3, [pc, #28]	; (801642c <_svfiprintf_r+0x1ec>)
 8016410:	a904      	add	r1, sp, #16
 8016412:	4640      	mov	r0, r8
 8016414:	f7fc fa5e 	bl	80128d4 <_printf_i>
 8016418:	e7ea      	b.n	80163f0 <_svfiprintf_r+0x1b0>
 801641a:	bf00      	nop
 801641c:	08017ad4 	.word	0x08017ad4
 8016420:	08017ada 	.word	0x08017ada
 8016424:	08017ade 	.word	0x08017ade
 8016428:	08012369 	.word	0x08012369
 801642c:	0801618d 	.word	0x0801618d

08016430 <_sungetc_r>:
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	1c4b      	adds	r3, r1, #1
 8016434:	4614      	mov	r4, r2
 8016436:	d103      	bne.n	8016440 <_sungetc_r+0x10>
 8016438:	f04f 35ff 	mov.w	r5, #4294967295
 801643c:	4628      	mov	r0, r5
 801643e:	bd38      	pop	{r3, r4, r5, pc}
 8016440:	8993      	ldrh	r3, [r2, #12]
 8016442:	f023 0320 	bic.w	r3, r3, #32
 8016446:	8193      	strh	r3, [r2, #12]
 8016448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801644a:	6852      	ldr	r2, [r2, #4]
 801644c:	b2cd      	uxtb	r5, r1
 801644e:	b18b      	cbz	r3, 8016474 <_sungetc_r+0x44>
 8016450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016452:	4293      	cmp	r3, r2
 8016454:	dd08      	ble.n	8016468 <_sungetc_r+0x38>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	1e5a      	subs	r2, r3, #1
 801645a:	6022      	str	r2, [r4, #0]
 801645c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016460:	6863      	ldr	r3, [r4, #4]
 8016462:	3301      	adds	r3, #1
 8016464:	6063      	str	r3, [r4, #4]
 8016466:	e7e9      	b.n	801643c <_sungetc_r+0xc>
 8016468:	4621      	mov	r1, r4
 801646a:	f000 fd4b 	bl	8016f04 <__submore>
 801646e:	2800      	cmp	r0, #0
 8016470:	d0f1      	beq.n	8016456 <_sungetc_r+0x26>
 8016472:	e7e1      	b.n	8016438 <_sungetc_r+0x8>
 8016474:	6921      	ldr	r1, [r4, #16]
 8016476:	6823      	ldr	r3, [r4, #0]
 8016478:	b151      	cbz	r1, 8016490 <_sungetc_r+0x60>
 801647a:	4299      	cmp	r1, r3
 801647c:	d208      	bcs.n	8016490 <_sungetc_r+0x60>
 801647e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016482:	42a9      	cmp	r1, r5
 8016484:	d104      	bne.n	8016490 <_sungetc_r+0x60>
 8016486:	3b01      	subs	r3, #1
 8016488:	3201      	adds	r2, #1
 801648a:	6023      	str	r3, [r4, #0]
 801648c:	6062      	str	r2, [r4, #4]
 801648e:	e7d5      	b.n	801643c <_sungetc_r+0xc>
 8016490:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016498:	6363      	str	r3, [r4, #52]	; 0x34
 801649a:	2303      	movs	r3, #3
 801649c:	63a3      	str	r3, [r4, #56]	; 0x38
 801649e:	4623      	mov	r3, r4
 80164a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	2301      	movs	r3, #1
 80164a8:	e7dc      	b.n	8016464 <_sungetc_r+0x34>

080164aa <__ssrefill_r>:
 80164aa:	b510      	push	{r4, lr}
 80164ac:	460c      	mov	r4, r1
 80164ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80164b0:	b169      	cbz	r1, 80164ce <__ssrefill_r+0x24>
 80164b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164b6:	4299      	cmp	r1, r3
 80164b8:	d001      	beq.n	80164be <__ssrefill_r+0x14>
 80164ba:	f7ff fdbf 	bl	801603c <_free_r>
 80164be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80164c0:	6063      	str	r3, [r4, #4]
 80164c2:	2000      	movs	r0, #0
 80164c4:	6360      	str	r0, [r4, #52]	; 0x34
 80164c6:	b113      	cbz	r3, 80164ce <__ssrefill_r+0x24>
 80164c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80164ca:	6023      	str	r3, [r4, #0]
 80164cc:	bd10      	pop	{r4, pc}
 80164ce:	6923      	ldr	r3, [r4, #16]
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	2300      	movs	r3, #0
 80164d4:	6063      	str	r3, [r4, #4]
 80164d6:	89a3      	ldrh	r3, [r4, #12]
 80164d8:	f043 0320 	orr.w	r3, r3, #32
 80164dc:	81a3      	strh	r3, [r4, #12]
 80164de:	f04f 30ff 	mov.w	r0, #4294967295
 80164e2:	e7f3      	b.n	80164cc <__ssrefill_r+0x22>

080164e4 <__ssvfiscanf_r>:
 80164e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80164ec:	460c      	mov	r4, r1
 80164ee:	2100      	movs	r1, #0
 80164f0:	9144      	str	r1, [sp, #272]	; 0x110
 80164f2:	9145      	str	r1, [sp, #276]	; 0x114
 80164f4:	499f      	ldr	r1, [pc, #636]	; (8016774 <__ssvfiscanf_r+0x290>)
 80164f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80164f8:	f10d 0804 	add.w	r8, sp, #4
 80164fc:	499e      	ldr	r1, [pc, #632]	; (8016778 <__ssvfiscanf_r+0x294>)
 80164fe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801677c <__ssvfiscanf_r+0x298>
 8016502:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016506:	4606      	mov	r6, r0
 8016508:	4692      	mov	sl, r2
 801650a:	91a1      	str	r1, [sp, #644]	; 0x284
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	270a      	movs	r7, #10
 8016510:	f89a 3000 	ldrb.w	r3, [sl]
 8016514:	2b00      	cmp	r3, #0
 8016516:	f000 812a 	beq.w	801676e <__ssvfiscanf_r+0x28a>
 801651a:	4655      	mov	r5, sl
 801651c:	f7ff f8c8 	bl	80156b0 <__locale_ctype_ptr>
 8016520:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016524:	4458      	add	r0, fp
 8016526:	7843      	ldrb	r3, [r0, #1]
 8016528:	f013 0308 	ands.w	r3, r3, #8
 801652c:	d01c      	beq.n	8016568 <__ssvfiscanf_r+0x84>
 801652e:	6863      	ldr	r3, [r4, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	dd12      	ble.n	801655a <__ssvfiscanf_r+0x76>
 8016534:	f7ff f8bc 	bl	80156b0 <__locale_ctype_ptr>
 8016538:	6823      	ldr	r3, [r4, #0]
 801653a:	781a      	ldrb	r2, [r3, #0]
 801653c:	4410      	add	r0, r2
 801653e:	7842      	ldrb	r2, [r0, #1]
 8016540:	0712      	lsls	r2, r2, #28
 8016542:	d401      	bmi.n	8016548 <__ssvfiscanf_r+0x64>
 8016544:	46aa      	mov	sl, r5
 8016546:	e7e3      	b.n	8016510 <__ssvfiscanf_r+0x2c>
 8016548:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801654a:	3201      	adds	r2, #1
 801654c:	9245      	str	r2, [sp, #276]	; 0x114
 801654e:	6862      	ldr	r2, [r4, #4]
 8016550:	3301      	adds	r3, #1
 8016552:	3a01      	subs	r2, #1
 8016554:	6062      	str	r2, [r4, #4]
 8016556:	6023      	str	r3, [r4, #0]
 8016558:	e7e9      	b.n	801652e <__ssvfiscanf_r+0x4a>
 801655a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801655c:	4621      	mov	r1, r4
 801655e:	4630      	mov	r0, r6
 8016560:	4798      	blx	r3
 8016562:	2800      	cmp	r0, #0
 8016564:	d0e6      	beq.n	8016534 <__ssvfiscanf_r+0x50>
 8016566:	e7ed      	b.n	8016544 <__ssvfiscanf_r+0x60>
 8016568:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801656c:	f040 8082 	bne.w	8016674 <__ssvfiscanf_r+0x190>
 8016570:	9343      	str	r3, [sp, #268]	; 0x10c
 8016572:	9341      	str	r3, [sp, #260]	; 0x104
 8016574:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016578:	2b2a      	cmp	r3, #42	; 0x2a
 801657a:	d103      	bne.n	8016584 <__ssvfiscanf_r+0xa0>
 801657c:	2310      	movs	r3, #16
 801657e:	9341      	str	r3, [sp, #260]	; 0x104
 8016580:	f10a 0502 	add.w	r5, sl, #2
 8016584:	46aa      	mov	sl, r5
 8016586:	f815 1b01 	ldrb.w	r1, [r5], #1
 801658a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801658e:	2a09      	cmp	r2, #9
 8016590:	d922      	bls.n	80165d8 <__ssvfiscanf_r+0xf4>
 8016592:	2203      	movs	r2, #3
 8016594:	4879      	ldr	r0, [pc, #484]	; (801677c <__ssvfiscanf_r+0x298>)
 8016596:	f7e9 fe3b 	bl	8000210 <memchr>
 801659a:	b138      	cbz	r0, 80165ac <__ssvfiscanf_r+0xc8>
 801659c:	eba0 0309 	sub.w	r3, r0, r9
 80165a0:	2001      	movs	r0, #1
 80165a2:	4098      	lsls	r0, r3
 80165a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80165a6:	4318      	orrs	r0, r3
 80165a8:	9041      	str	r0, [sp, #260]	; 0x104
 80165aa:	46aa      	mov	sl, r5
 80165ac:	f89a 3000 	ldrb.w	r3, [sl]
 80165b0:	2b67      	cmp	r3, #103	; 0x67
 80165b2:	f10a 0501 	add.w	r5, sl, #1
 80165b6:	d82b      	bhi.n	8016610 <__ssvfiscanf_r+0x12c>
 80165b8:	2b65      	cmp	r3, #101	; 0x65
 80165ba:	f080 809f 	bcs.w	80166fc <__ssvfiscanf_r+0x218>
 80165be:	2b47      	cmp	r3, #71	; 0x47
 80165c0:	d810      	bhi.n	80165e4 <__ssvfiscanf_r+0x100>
 80165c2:	2b45      	cmp	r3, #69	; 0x45
 80165c4:	f080 809a 	bcs.w	80166fc <__ssvfiscanf_r+0x218>
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d06c      	beq.n	80166a6 <__ssvfiscanf_r+0x1c2>
 80165cc:	2b25      	cmp	r3, #37	; 0x25
 80165ce:	d051      	beq.n	8016674 <__ssvfiscanf_r+0x190>
 80165d0:	2303      	movs	r3, #3
 80165d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80165d4:	9742      	str	r7, [sp, #264]	; 0x108
 80165d6:	e027      	b.n	8016628 <__ssvfiscanf_r+0x144>
 80165d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80165da:	fb07 1303 	mla	r3, r7, r3, r1
 80165de:	3b30      	subs	r3, #48	; 0x30
 80165e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80165e2:	e7cf      	b.n	8016584 <__ssvfiscanf_r+0xa0>
 80165e4:	2b5b      	cmp	r3, #91	; 0x5b
 80165e6:	d06a      	beq.n	80166be <__ssvfiscanf_r+0x1da>
 80165e8:	d80c      	bhi.n	8016604 <__ssvfiscanf_r+0x120>
 80165ea:	2b58      	cmp	r3, #88	; 0x58
 80165ec:	d1f0      	bne.n	80165d0 <__ssvfiscanf_r+0xec>
 80165ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80165f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80165f4:	9241      	str	r2, [sp, #260]	; 0x104
 80165f6:	2210      	movs	r2, #16
 80165f8:	9242      	str	r2, [sp, #264]	; 0x108
 80165fa:	2b6e      	cmp	r3, #110	; 0x6e
 80165fc:	bf8c      	ite	hi
 80165fe:	2304      	movhi	r3, #4
 8016600:	2303      	movls	r3, #3
 8016602:	e010      	b.n	8016626 <__ssvfiscanf_r+0x142>
 8016604:	2b63      	cmp	r3, #99	; 0x63
 8016606:	d065      	beq.n	80166d4 <__ssvfiscanf_r+0x1f0>
 8016608:	2b64      	cmp	r3, #100	; 0x64
 801660a:	d1e1      	bne.n	80165d0 <__ssvfiscanf_r+0xec>
 801660c:	9742      	str	r7, [sp, #264]	; 0x108
 801660e:	e7f4      	b.n	80165fa <__ssvfiscanf_r+0x116>
 8016610:	2b70      	cmp	r3, #112	; 0x70
 8016612:	d04b      	beq.n	80166ac <__ssvfiscanf_r+0x1c8>
 8016614:	d826      	bhi.n	8016664 <__ssvfiscanf_r+0x180>
 8016616:	2b6e      	cmp	r3, #110	; 0x6e
 8016618:	d062      	beq.n	80166e0 <__ssvfiscanf_r+0x1fc>
 801661a:	d84c      	bhi.n	80166b6 <__ssvfiscanf_r+0x1d2>
 801661c:	2b69      	cmp	r3, #105	; 0x69
 801661e:	d1d7      	bne.n	80165d0 <__ssvfiscanf_r+0xec>
 8016620:	2300      	movs	r3, #0
 8016622:	9342      	str	r3, [sp, #264]	; 0x108
 8016624:	2303      	movs	r3, #3
 8016626:	9347      	str	r3, [sp, #284]	; 0x11c
 8016628:	6863      	ldr	r3, [r4, #4]
 801662a:	2b00      	cmp	r3, #0
 801662c:	dd68      	ble.n	8016700 <__ssvfiscanf_r+0x21c>
 801662e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016630:	0659      	lsls	r1, r3, #25
 8016632:	d407      	bmi.n	8016644 <__ssvfiscanf_r+0x160>
 8016634:	f7ff f83c 	bl	80156b0 <__locale_ctype_ptr>
 8016638:	6823      	ldr	r3, [r4, #0]
 801663a:	781a      	ldrb	r2, [r3, #0]
 801663c:	4410      	add	r0, r2
 801663e:	7842      	ldrb	r2, [r0, #1]
 8016640:	0712      	lsls	r2, r2, #28
 8016642:	d464      	bmi.n	801670e <__ssvfiscanf_r+0x22a>
 8016644:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016646:	2b02      	cmp	r3, #2
 8016648:	dc73      	bgt.n	8016732 <__ssvfiscanf_r+0x24e>
 801664a:	466b      	mov	r3, sp
 801664c:	4622      	mov	r2, r4
 801664e:	a941      	add	r1, sp, #260	; 0x104
 8016650:	4630      	mov	r0, r6
 8016652:	f000 f9d7 	bl	8016a04 <_scanf_chars>
 8016656:	2801      	cmp	r0, #1
 8016658:	f000 8089 	beq.w	801676e <__ssvfiscanf_r+0x28a>
 801665c:	2802      	cmp	r0, #2
 801665e:	f47f af71 	bne.w	8016544 <__ssvfiscanf_r+0x60>
 8016662:	e01d      	b.n	80166a0 <__ssvfiscanf_r+0x1bc>
 8016664:	2b75      	cmp	r3, #117	; 0x75
 8016666:	d0d1      	beq.n	801660c <__ssvfiscanf_r+0x128>
 8016668:	2b78      	cmp	r3, #120	; 0x78
 801666a:	d0c0      	beq.n	80165ee <__ssvfiscanf_r+0x10a>
 801666c:	2b73      	cmp	r3, #115	; 0x73
 801666e:	d1af      	bne.n	80165d0 <__ssvfiscanf_r+0xec>
 8016670:	2302      	movs	r3, #2
 8016672:	e7d8      	b.n	8016626 <__ssvfiscanf_r+0x142>
 8016674:	6863      	ldr	r3, [r4, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	dd0c      	ble.n	8016694 <__ssvfiscanf_r+0x1b0>
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	781a      	ldrb	r2, [r3, #0]
 801667e:	455a      	cmp	r2, fp
 8016680:	d175      	bne.n	801676e <__ssvfiscanf_r+0x28a>
 8016682:	3301      	adds	r3, #1
 8016684:	6862      	ldr	r2, [r4, #4]
 8016686:	6023      	str	r3, [r4, #0]
 8016688:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801668a:	3a01      	subs	r2, #1
 801668c:	3301      	adds	r3, #1
 801668e:	6062      	str	r2, [r4, #4]
 8016690:	9345      	str	r3, [sp, #276]	; 0x114
 8016692:	e757      	b.n	8016544 <__ssvfiscanf_r+0x60>
 8016694:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016696:	4621      	mov	r1, r4
 8016698:	4630      	mov	r0, r6
 801669a:	4798      	blx	r3
 801669c:	2800      	cmp	r0, #0
 801669e:	d0ec      	beq.n	801667a <__ssvfiscanf_r+0x196>
 80166a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80166a2:	2800      	cmp	r0, #0
 80166a4:	d159      	bne.n	801675a <__ssvfiscanf_r+0x276>
 80166a6:	f04f 30ff 	mov.w	r0, #4294967295
 80166aa:	e05c      	b.n	8016766 <__ssvfiscanf_r+0x282>
 80166ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80166ae:	f042 0220 	orr.w	r2, r2, #32
 80166b2:	9241      	str	r2, [sp, #260]	; 0x104
 80166b4:	e79b      	b.n	80165ee <__ssvfiscanf_r+0x10a>
 80166b6:	2308      	movs	r3, #8
 80166b8:	9342      	str	r3, [sp, #264]	; 0x108
 80166ba:	2304      	movs	r3, #4
 80166bc:	e7b3      	b.n	8016626 <__ssvfiscanf_r+0x142>
 80166be:	4629      	mov	r1, r5
 80166c0:	4640      	mov	r0, r8
 80166c2:	f000 fb4f 	bl	8016d64 <__sccl>
 80166c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166cc:	9341      	str	r3, [sp, #260]	; 0x104
 80166ce:	4605      	mov	r5, r0
 80166d0:	2301      	movs	r3, #1
 80166d2:	e7a8      	b.n	8016626 <__ssvfiscanf_r+0x142>
 80166d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166da:	9341      	str	r3, [sp, #260]	; 0x104
 80166dc:	2300      	movs	r3, #0
 80166de:	e7a2      	b.n	8016626 <__ssvfiscanf_r+0x142>
 80166e0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80166e2:	06c3      	lsls	r3, r0, #27
 80166e4:	f53f af2e 	bmi.w	8016544 <__ssvfiscanf_r+0x60>
 80166e8:	9b00      	ldr	r3, [sp, #0]
 80166ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166ec:	1d19      	adds	r1, r3, #4
 80166ee:	9100      	str	r1, [sp, #0]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	07c0      	lsls	r0, r0, #31
 80166f4:	bf4c      	ite	mi
 80166f6:	801a      	strhmi	r2, [r3, #0]
 80166f8:	601a      	strpl	r2, [r3, #0]
 80166fa:	e723      	b.n	8016544 <__ssvfiscanf_r+0x60>
 80166fc:	2305      	movs	r3, #5
 80166fe:	e792      	b.n	8016626 <__ssvfiscanf_r+0x142>
 8016700:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016702:	4621      	mov	r1, r4
 8016704:	4630      	mov	r0, r6
 8016706:	4798      	blx	r3
 8016708:	2800      	cmp	r0, #0
 801670a:	d090      	beq.n	801662e <__ssvfiscanf_r+0x14a>
 801670c:	e7c8      	b.n	80166a0 <__ssvfiscanf_r+0x1bc>
 801670e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016710:	3201      	adds	r2, #1
 8016712:	9245      	str	r2, [sp, #276]	; 0x114
 8016714:	6862      	ldr	r2, [r4, #4]
 8016716:	3a01      	subs	r2, #1
 8016718:	2a00      	cmp	r2, #0
 801671a:	6062      	str	r2, [r4, #4]
 801671c:	dd02      	ble.n	8016724 <__ssvfiscanf_r+0x240>
 801671e:	3301      	adds	r3, #1
 8016720:	6023      	str	r3, [r4, #0]
 8016722:	e787      	b.n	8016634 <__ssvfiscanf_r+0x150>
 8016724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016726:	4621      	mov	r1, r4
 8016728:	4630      	mov	r0, r6
 801672a:	4798      	blx	r3
 801672c:	2800      	cmp	r0, #0
 801672e:	d081      	beq.n	8016634 <__ssvfiscanf_r+0x150>
 8016730:	e7b6      	b.n	80166a0 <__ssvfiscanf_r+0x1bc>
 8016732:	2b04      	cmp	r3, #4
 8016734:	dc06      	bgt.n	8016744 <__ssvfiscanf_r+0x260>
 8016736:	466b      	mov	r3, sp
 8016738:	4622      	mov	r2, r4
 801673a:	a941      	add	r1, sp, #260	; 0x104
 801673c:	4630      	mov	r0, r6
 801673e:	f000 f9c5 	bl	8016acc <_scanf_i>
 8016742:	e788      	b.n	8016656 <__ssvfiscanf_r+0x172>
 8016744:	4b0e      	ldr	r3, [pc, #56]	; (8016780 <__ssvfiscanf_r+0x29c>)
 8016746:	2b00      	cmp	r3, #0
 8016748:	f43f aefc 	beq.w	8016544 <__ssvfiscanf_r+0x60>
 801674c:	466b      	mov	r3, sp
 801674e:	4622      	mov	r2, r4
 8016750:	a941      	add	r1, sp, #260	; 0x104
 8016752:	4630      	mov	r0, r6
 8016754:	f7fc f9d0 	bl	8012af8 <_scanf_float>
 8016758:	e77d      	b.n	8016656 <__ssvfiscanf_r+0x172>
 801675a:	89a3      	ldrh	r3, [r4, #12]
 801675c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016760:	bf18      	it	ne
 8016762:	f04f 30ff 	movne.w	r0, #4294967295
 8016766:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016770:	e7f9      	b.n	8016766 <__ssvfiscanf_r+0x282>
 8016772:	bf00      	nop
 8016774:	08016431 	.word	0x08016431
 8016778:	080164ab 	.word	0x080164ab
 801677c:	08017ada 	.word	0x08017ada
 8016780:	08012af9 	.word	0x08012af9

08016784 <__sfputc_r>:
 8016784:	6893      	ldr	r3, [r2, #8]
 8016786:	3b01      	subs	r3, #1
 8016788:	2b00      	cmp	r3, #0
 801678a:	b410      	push	{r4}
 801678c:	6093      	str	r3, [r2, #8]
 801678e:	da08      	bge.n	80167a2 <__sfputc_r+0x1e>
 8016790:	6994      	ldr	r4, [r2, #24]
 8016792:	42a3      	cmp	r3, r4
 8016794:	db01      	blt.n	801679a <__sfputc_r+0x16>
 8016796:	290a      	cmp	r1, #10
 8016798:	d103      	bne.n	80167a2 <__sfputc_r+0x1e>
 801679a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801679e:	f7fd bbbd 	b.w	8013f1c <__swbuf_r>
 80167a2:	6813      	ldr	r3, [r2, #0]
 80167a4:	1c58      	adds	r0, r3, #1
 80167a6:	6010      	str	r0, [r2, #0]
 80167a8:	7019      	strb	r1, [r3, #0]
 80167aa:	4608      	mov	r0, r1
 80167ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167b0:	4770      	bx	lr

080167b2 <__sfputs_r>:
 80167b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167b4:	4606      	mov	r6, r0
 80167b6:	460f      	mov	r7, r1
 80167b8:	4614      	mov	r4, r2
 80167ba:	18d5      	adds	r5, r2, r3
 80167bc:	42ac      	cmp	r4, r5
 80167be:	d101      	bne.n	80167c4 <__sfputs_r+0x12>
 80167c0:	2000      	movs	r0, #0
 80167c2:	e007      	b.n	80167d4 <__sfputs_r+0x22>
 80167c4:	463a      	mov	r2, r7
 80167c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167ca:	4630      	mov	r0, r6
 80167cc:	f7ff ffda 	bl	8016784 <__sfputc_r>
 80167d0:	1c43      	adds	r3, r0, #1
 80167d2:	d1f3      	bne.n	80167bc <__sfputs_r+0xa>
 80167d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167d8 <_vfiprintf_r>:
 80167d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167dc:	460c      	mov	r4, r1
 80167de:	b09d      	sub	sp, #116	; 0x74
 80167e0:	4617      	mov	r7, r2
 80167e2:	461d      	mov	r5, r3
 80167e4:	4606      	mov	r6, r0
 80167e6:	b118      	cbz	r0, 80167f0 <_vfiprintf_r+0x18>
 80167e8:	6983      	ldr	r3, [r0, #24]
 80167ea:	b90b      	cbnz	r3, 80167f0 <_vfiprintf_r+0x18>
 80167ec:	f7fe fbac 	bl	8014f48 <__sinit>
 80167f0:	4b7c      	ldr	r3, [pc, #496]	; (80169e4 <_vfiprintf_r+0x20c>)
 80167f2:	429c      	cmp	r4, r3
 80167f4:	d158      	bne.n	80168a8 <_vfiprintf_r+0xd0>
 80167f6:	6874      	ldr	r4, [r6, #4]
 80167f8:	89a3      	ldrh	r3, [r4, #12]
 80167fa:	0718      	lsls	r0, r3, #28
 80167fc:	d55e      	bpl.n	80168bc <_vfiprintf_r+0xe4>
 80167fe:	6923      	ldr	r3, [r4, #16]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d05b      	beq.n	80168bc <_vfiprintf_r+0xe4>
 8016804:	2300      	movs	r3, #0
 8016806:	9309      	str	r3, [sp, #36]	; 0x24
 8016808:	2320      	movs	r3, #32
 801680a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801680e:	2330      	movs	r3, #48	; 0x30
 8016810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016814:	9503      	str	r5, [sp, #12]
 8016816:	f04f 0b01 	mov.w	fp, #1
 801681a:	46b8      	mov	r8, r7
 801681c:	4645      	mov	r5, r8
 801681e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016822:	b10b      	cbz	r3, 8016828 <_vfiprintf_r+0x50>
 8016824:	2b25      	cmp	r3, #37	; 0x25
 8016826:	d154      	bne.n	80168d2 <_vfiprintf_r+0xfa>
 8016828:	ebb8 0a07 	subs.w	sl, r8, r7
 801682c:	d00b      	beq.n	8016846 <_vfiprintf_r+0x6e>
 801682e:	4653      	mov	r3, sl
 8016830:	463a      	mov	r2, r7
 8016832:	4621      	mov	r1, r4
 8016834:	4630      	mov	r0, r6
 8016836:	f7ff ffbc 	bl	80167b2 <__sfputs_r>
 801683a:	3001      	adds	r0, #1
 801683c:	f000 80c2 	beq.w	80169c4 <_vfiprintf_r+0x1ec>
 8016840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016842:	4453      	add	r3, sl
 8016844:	9309      	str	r3, [sp, #36]	; 0x24
 8016846:	f898 3000 	ldrb.w	r3, [r8]
 801684a:	2b00      	cmp	r3, #0
 801684c:	f000 80ba 	beq.w	80169c4 <_vfiprintf_r+0x1ec>
 8016850:	2300      	movs	r3, #0
 8016852:	f04f 32ff 	mov.w	r2, #4294967295
 8016856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801685a:	9304      	str	r3, [sp, #16]
 801685c:	9307      	str	r3, [sp, #28]
 801685e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016862:	931a      	str	r3, [sp, #104]	; 0x68
 8016864:	46a8      	mov	r8, r5
 8016866:	2205      	movs	r2, #5
 8016868:	f818 1b01 	ldrb.w	r1, [r8], #1
 801686c:	485e      	ldr	r0, [pc, #376]	; (80169e8 <_vfiprintf_r+0x210>)
 801686e:	f7e9 fccf 	bl	8000210 <memchr>
 8016872:	9b04      	ldr	r3, [sp, #16]
 8016874:	bb78      	cbnz	r0, 80168d6 <_vfiprintf_r+0xfe>
 8016876:	06d9      	lsls	r1, r3, #27
 8016878:	bf44      	itt	mi
 801687a:	2220      	movmi	r2, #32
 801687c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016880:	071a      	lsls	r2, r3, #28
 8016882:	bf44      	itt	mi
 8016884:	222b      	movmi	r2, #43	; 0x2b
 8016886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801688a:	782a      	ldrb	r2, [r5, #0]
 801688c:	2a2a      	cmp	r2, #42	; 0x2a
 801688e:	d02a      	beq.n	80168e6 <_vfiprintf_r+0x10e>
 8016890:	9a07      	ldr	r2, [sp, #28]
 8016892:	46a8      	mov	r8, r5
 8016894:	2000      	movs	r0, #0
 8016896:	250a      	movs	r5, #10
 8016898:	4641      	mov	r1, r8
 801689a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801689e:	3b30      	subs	r3, #48	; 0x30
 80168a0:	2b09      	cmp	r3, #9
 80168a2:	d969      	bls.n	8016978 <_vfiprintf_r+0x1a0>
 80168a4:	b360      	cbz	r0, 8016900 <_vfiprintf_r+0x128>
 80168a6:	e024      	b.n	80168f2 <_vfiprintf_r+0x11a>
 80168a8:	4b50      	ldr	r3, [pc, #320]	; (80169ec <_vfiprintf_r+0x214>)
 80168aa:	429c      	cmp	r4, r3
 80168ac:	d101      	bne.n	80168b2 <_vfiprintf_r+0xda>
 80168ae:	68b4      	ldr	r4, [r6, #8]
 80168b0:	e7a2      	b.n	80167f8 <_vfiprintf_r+0x20>
 80168b2:	4b4f      	ldr	r3, [pc, #316]	; (80169f0 <_vfiprintf_r+0x218>)
 80168b4:	429c      	cmp	r4, r3
 80168b6:	bf08      	it	eq
 80168b8:	68f4      	ldreq	r4, [r6, #12]
 80168ba:	e79d      	b.n	80167f8 <_vfiprintf_r+0x20>
 80168bc:	4621      	mov	r1, r4
 80168be:	4630      	mov	r0, r6
 80168c0:	f7fd fb90 	bl	8013fe4 <__swsetup_r>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	d09d      	beq.n	8016804 <_vfiprintf_r+0x2c>
 80168c8:	f04f 30ff 	mov.w	r0, #4294967295
 80168cc:	b01d      	add	sp, #116	; 0x74
 80168ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d2:	46a8      	mov	r8, r5
 80168d4:	e7a2      	b.n	801681c <_vfiprintf_r+0x44>
 80168d6:	4a44      	ldr	r2, [pc, #272]	; (80169e8 <_vfiprintf_r+0x210>)
 80168d8:	1a80      	subs	r0, r0, r2
 80168da:	fa0b f000 	lsl.w	r0, fp, r0
 80168de:	4318      	orrs	r0, r3
 80168e0:	9004      	str	r0, [sp, #16]
 80168e2:	4645      	mov	r5, r8
 80168e4:	e7be      	b.n	8016864 <_vfiprintf_r+0x8c>
 80168e6:	9a03      	ldr	r2, [sp, #12]
 80168e8:	1d11      	adds	r1, r2, #4
 80168ea:	6812      	ldr	r2, [r2, #0]
 80168ec:	9103      	str	r1, [sp, #12]
 80168ee:	2a00      	cmp	r2, #0
 80168f0:	db01      	blt.n	80168f6 <_vfiprintf_r+0x11e>
 80168f2:	9207      	str	r2, [sp, #28]
 80168f4:	e004      	b.n	8016900 <_vfiprintf_r+0x128>
 80168f6:	4252      	negs	r2, r2
 80168f8:	f043 0302 	orr.w	r3, r3, #2
 80168fc:	9207      	str	r2, [sp, #28]
 80168fe:	9304      	str	r3, [sp, #16]
 8016900:	f898 3000 	ldrb.w	r3, [r8]
 8016904:	2b2e      	cmp	r3, #46	; 0x2e
 8016906:	d10e      	bne.n	8016926 <_vfiprintf_r+0x14e>
 8016908:	f898 3001 	ldrb.w	r3, [r8, #1]
 801690c:	2b2a      	cmp	r3, #42	; 0x2a
 801690e:	d138      	bne.n	8016982 <_vfiprintf_r+0x1aa>
 8016910:	9b03      	ldr	r3, [sp, #12]
 8016912:	1d1a      	adds	r2, r3, #4
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	9203      	str	r2, [sp, #12]
 8016918:	2b00      	cmp	r3, #0
 801691a:	bfb8      	it	lt
 801691c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016920:	f108 0802 	add.w	r8, r8, #2
 8016924:	9305      	str	r3, [sp, #20]
 8016926:	4d33      	ldr	r5, [pc, #204]	; (80169f4 <_vfiprintf_r+0x21c>)
 8016928:	f898 1000 	ldrb.w	r1, [r8]
 801692c:	2203      	movs	r2, #3
 801692e:	4628      	mov	r0, r5
 8016930:	f7e9 fc6e 	bl	8000210 <memchr>
 8016934:	b140      	cbz	r0, 8016948 <_vfiprintf_r+0x170>
 8016936:	2340      	movs	r3, #64	; 0x40
 8016938:	1b40      	subs	r0, r0, r5
 801693a:	fa03 f000 	lsl.w	r0, r3, r0
 801693e:	9b04      	ldr	r3, [sp, #16]
 8016940:	4303      	orrs	r3, r0
 8016942:	f108 0801 	add.w	r8, r8, #1
 8016946:	9304      	str	r3, [sp, #16]
 8016948:	f898 1000 	ldrb.w	r1, [r8]
 801694c:	482a      	ldr	r0, [pc, #168]	; (80169f8 <_vfiprintf_r+0x220>)
 801694e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016952:	2206      	movs	r2, #6
 8016954:	f108 0701 	add.w	r7, r8, #1
 8016958:	f7e9 fc5a 	bl	8000210 <memchr>
 801695c:	2800      	cmp	r0, #0
 801695e:	d037      	beq.n	80169d0 <_vfiprintf_r+0x1f8>
 8016960:	4b26      	ldr	r3, [pc, #152]	; (80169fc <_vfiprintf_r+0x224>)
 8016962:	bb1b      	cbnz	r3, 80169ac <_vfiprintf_r+0x1d4>
 8016964:	9b03      	ldr	r3, [sp, #12]
 8016966:	3307      	adds	r3, #7
 8016968:	f023 0307 	bic.w	r3, r3, #7
 801696c:	3308      	adds	r3, #8
 801696e:	9303      	str	r3, [sp, #12]
 8016970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016972:	444b      	add	r3, r9
 8016974:	9309      	str	r3, [sp, #36]	; 0x24
 8016976:	e750      	b.n	801681a <_vfiprintf_r+0x42>
 8016978:	fb05 3202 	mla	r2, r5, r2, r3
 801697c:	2001      	movs	r0, #1
 801697e:	4688      	mov	r8, r1
 8016980:	e78a      	b.n	8016898 <_vfiprintf_r+0xc0>
 8016982:	2300      	movs	r3, #0
 8016984:	f108 0801 	add.w	r8, r8, #1
 8016988:	9305      	str	r3, [sp, #20]
 801698a:	4619      	mov	r1, r3
 801698c:	250a      	movs	r5, #10
 801698e:	4640      	mov	r0, r8
 8016990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016994:	3a30      	subs	r2, #48	; 0x30
 8016996:	2a09      	cmp	r2, #9
 8016998:	d903      	bls.n	80169a2 <_vfiprintf_r+0x1ca>
 801699a:	2b00      	cmp	r3, #0
 801699c:	d0c3      	beq.n	8016926 <_vfiprintf_r+0x14e>
 801699e:	9105      	str	r1, [sp, #20]
 80169a0:	e7c1      	b.n	8016926 <_vfiprintf_r+0x14e>
 80169a2:	fb05 2101 	mla	r1, r5, r1, r2
 80169a6:	2301      	movs	r3, #1
 80169a8:	4680      	mov	r8, r0
 80169aa:	e7f0      	b.n	801698e <_vfiprintf_r+0x1b6>
 80169ac:	ab03      	add	r3, sp, #12
 80169ae:	9300      	str	r3, [sp, #0]
 80169b0:	4622      	mov	r2, r4
 80169b2:	4b13      	ldr	r3, [pc, #76]	; (8016a00 <_vfiprintf_r+0x228>)
 80169b4:	a904      	add	r1, sp, #16
 80169b6:	4630      	mov	r0, r6
 80169b8:	f7fb fcd6 	bl	8012368 <_printf_float>
 80169bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80169c0:	4681      	mov	r9, r0
 80169c2:	d1d5      	bne.n	8016970 <_vfiprintf_r+0x198>
 80169c4:	89a3      	ldrh	r3, [r4, #12]
 80169c6:	065b      	lsls	r3, r3, #25
 80169c8:	f53f af7e 	bmi.w	80168c8 <_vfiprintf_r+0xf0>
 80169cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169ce:	e77d      	b.n	80168cc <_vfiprintf_r+0xf4>
 80169d0:	ab03      	add	r3, sp, #12
 80169d2:	9300      	str	r3, [sp, #0]
 80169d4:	4622      	mov	r2, r4
 80169d6:	4b0a      	ldr	r3, [pc, #40]	; (8016a00 <_vfiprintf_r+0x228>)
 80169d8:	a904      	add	r1, sp, #16
 80169da:	4630      	mov	r0, r6
 80169dc:	f7fb ff7a 	bl	80128d4 <_printf_i>
 80169e0:	e7ec      	b.n	80169bc <_vfiprintf_r+0x1e4>
 80169e2:	bf00      	nop
 80169e4:	08017988 	.word	0x08017988
 80169e8:	08017ad4 	.word	0x08017ad4
 80169ec:	080179a8 	.word	0x080179a8
 80169f0:	08017968 	.word	0x08017968
 80169f4:	08017ada 	.word	0x08017ada
 80169f8:	08017ade 	.word	0x08017ade
 80169fc:	08012369 	.word	0x08012369
 8016a00:	080167b3 	.word	0x080167b3

08016a04 <_scanf_chars>:
 8016a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a08:	4615      	mov	r5, r2
 8016a0a:	688a      	ldr	r2, [r1, #8]
 8016a0c:	4680      	mov	r8, r0
 8016a0e:	460c      	mov	r4, r1
 8016a10:	b932      	cbnz	r2, 8016a20 <_scanf_chars+0x1c>
 8016a12:	698a      	ldr	r2, [r1, #24]
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	bf14      	ite	ne
 8016a18:	f04f 32ff 	movne.w	r2, #4294967295
 8016a1c:	2201      	moveq	r2, #1
 8016a1e:	608a      	str	r2, [r1, #8]
 8016a20:	6822      	ldr	r2, [r4, #0]
 8016a22:	06d1      	lsls	r1, r2, #27
 8016a24:	bf5f      	itttt	pl
 8016a26:	681a      	ldrpl	r2, [r3, #0]
 8016a28:	1d11      	addpl	r1, r2, #4
 8016a2a:	6019      	strpl	r1, [r3, #0]
 8016a2c:	6817      	ldrpl	r7, [r2, #0]
 8016a2e:	2600      	movs	r6, #0
 8016a30:	69a3      	ldr	r3, [r4, #24]
 8016a32:	b1db      	cbz	r3, 8016a6c <_scanf_chars+0x68>
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d107      	bne.n	8016a48 <_scanf_chars+0x44>
 8016a38:	682b      	ldr	r3, [r5, #0]
 8016a3a:	6962      	ldr	r2, [r4, #20]
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	5cd3      	ldrb	r3, [r2, r3]
 8016a40:	b9a3      	cbnz	r3, 8016a6c <_scanf_chars+0x68>
 8016a42:	2e00      	cmp	r6, #0
 8016a44:	d132      	bne.n	8016aac <_scanf_chars+0xa8>
 8016a46:	e006      	b.n	8016a56 <_scanf_chars+0x52>
 8016a48:	2b02      	cmp	r3, #2
 8016a4a:	d007      	beq.n	8016a5c <_scanf_chars+0x58>
 8016a4c:	2e00      	cmp	r6, #0
 8016a4e:	d12d      	bne.n	8016aac <_scanf_chars+0xa8>
 8016a50:	69a3      	ldr	r3, [r4, #24]
 8016a52:	2b01      	cmp	r3, #1
 8016a54:	d12a      	bne.n	8016aac <_scanf_chars+0xa8>
 8016a56:	2001      	movs	r0, #1
 8016a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a5c:	f7fe fe28 	bl	80156b0 <__locale_ctype_ptr>
 8016a60:	682b      	ldr	r3, [r5, #0]
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	4418      	add	r0, r3
 8016a66:	7843      	ldrb	r3, [r0, #1]
 8016a68:	071b      	lsls	r3, r3, #28
 8016a6a:	d4ef      	bmi.n	8016a4c <_scanf_chars+0x48>
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	06da      	lsls	r2, r3, #27
 8016a70:	bf5e      	ittt	pl
 8016a72:	682b      	ldrpl	r3, [r5, #0]
 8016a74:	781b      	ldrbpl	r3, [r3, #0]
 8016a76:	703b      	strbpl	r3, [r7, #0]
 8016a78:	682a      	ldr	r2, [r5, #0]
 8016a7a:	686b      	ldr	r3, [r5, #4]
 8016a7c:	f102 0201 	add.w	r2, r2, #1
 8016a80:	602a      	str	r2, [r5, #0]
 8016a82:	68a2      	ldr	r2, [r4, #8]
 8016a84:	f103 33ff 	add.w	r3, r3, #4294967295
 8016a88:	f102 32ff 	add.w	r2, r2, #4294967295
 8016a8c:	606b      	str	r3, [r5, #4]
 8016a8e:	f106 0601 	add.w	r6, r6, #1
 8016a92:	bf58      	it	pl
 8016a94:	3701      	addpl	r7, #1
 8016a96:	60a2      	str	r2, [r4, #8]
 8016a98:	b142      	cbz	r2, 8016aac <_scanf_chars+0xa8>
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	dcc8      	bgt.n	8016a30 <_scanf_chars+0x2c>
 8016a9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016aa2:	4629      	mov	r1, r5
 8016aa4:	4640      	mov	r0, r8
 8016aa6:	4798      	blx	r3
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	d0c1      	beq.n	8016a30 <_scanf_chars+0x2c>
 8016aac:	6823      	ldr	r3, [r4, #0]
 8016aae:	f013 0310 	ands.w	r3, r3, #16
 8016ab2:	d105      	bne.n	8016ac0 <_scanf_chars+0xbc>
 8016ab4:	68e2      	ldr	r2, [r4, #12]
 8016ab6:	3201      	adds	r2, #1
 8016ab8:	60e2      	str	r2, [r4, #12]
 8016aba:	69a2      	ldr	r2, [r4, #24]
 8016abc:	b102      	cbz	r2, 8016ac0 <_scanf_chars+0xbc>
 8016abe:	703b      	strb	r3, [r7, #0]
 8016ac0:	6923      	ldr	r3, [r4, #16]
 8016ac2:	441e      	add	r6, r3
 8016ac4:	6126      	str	r6, [r4, #16]
 8016ac6:	2000      	movs	r0, #0
 8016ac8:	e7c6      	b.n	8016a58 <_scanf_chars+0x54>
	...

08016acc <_scanf_i>:
 8016acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad0:	469a      	mov	sl, r3
 8016ad2:	4b74      	ldr	r3, [pc, #464]	; (8016ca4 <_scanf_i+0x1d8>)
 8016ad4:	460c      	mov	r4, r1
 8016ad6:	4683      	mov	fp, r0
 8016ad8:	4616      	mov	r6, r2
 8016ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ade:	b087      	sub	sp, #28
 8016ae0:	ab03      	add	r3, sp, #12
 8016ae2:	68a7      	ldr	r7, [r4, #8]
 8016ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ae8:	4b6f      	ldr	r3, [pc, #444]	; (8016ca8 <_scanf_i+0x1dc>)
 8016aea:	69a1      	ldr	r1, [r4, #24]
 8016aec:	4a6f      	ldr	r2, [pc, #444]	; (8016cac <_scanf_i+0x1e0>)
 8016aee:	2903      	cmp	r1, #3
 8016af0:	bf08      	it	eq
 8016af2:	461a      	moveq	r2, r3
 8016af4:	1e7b      	subs	r3, r7, #1
 8016af6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016afa:	bf84      	itt	hi
 8016afc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b00:	60a3      	strhi	r3, [r4, #8]
 8016b02:	6823      	ldr	r3, [r4, #0]
 8016b04:	9200      	str	r2, [sp, #0]
 8016b06:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016b0a:	bf88      	it	hi
 8016b0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b10:	f104 091c 	add.w	r9, r4, #28
 8016b14:	6023      	str	r3, [r4, #0]
 8016b16:	bf8c      	ite	hi
 8016b18:	197f      	addhi	r7, r7, r5
 8016b1a:	2700      	movls	r7, #0
 8016b1c:	464b      	mov	r3, r9
 8016b1e:	f04f 0800 	mov.w	r8, #0
 8016b22:	9301      	str	r3, [sp, #4]
 8016b24:	6831      	ldr	r1, [r6, #0]
 8016b26:	ab03      	add	r3, sp, #12
 8016b28:	2202      	movs	r2, #2
 8016b2a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016b2e:	7809      	ldrb	r1, [r1, #0]
 8016b30:	f7e9 fb6e 	bl	8000210 <memchr>
 8016b34:	9b01      	ldr	r3, [sp, #4]
 8016b36:	b330      	cbz	r0, 8016b86 <_scanf_i+0xba>
 8016b38:	f1b8 0f01 	cmp.w	r8, #1
 8016b3c:	d15a      	bne.n	8016bf4 <_scanf_i+0x128>
 8016b3e:	6862      	ldr	r2, [r4, #4]
 8016b40:	b92a      	cbnz	r2, 8016b4e <_scanf_i+0x82>
 8016b42:	6822      	ldr	r2, [r4, #0]
 8016b44:	2108      	movs	r1, #8
 8016b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b4a:	6061      	str	r1, [r4, #4]
 8016b4c:	6022      	str	r2, [r4, #0]
 8016b4e:	6822      	ldr	r2, [r4, #0]
 8016b50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016b54:	6022      	str	r2, [r4, #0]
 8016b56:	68a2      	ldr	r2, [r4, #8]
 8016b58:	1e51      	subs	r1, r2, #1
 8016b5a:	60a1      	str	r1, [r4, #8]
 8016b5c:	b19a      	cbz	r2, 8016b86 <_scanf_i+0xba>
 8016b5e:	6832      	ldr	r2, [r6, #0]
 8016b60:	1c51      	adds	r1, r2, #1
 8016b62:	6031      	str	r1, [r6, #0]
 8016b64:	7812      	ldrb	r2, [r2, #0]
 8016b66:	701a      	strb	r2, [r3, #0]
 8016b68:	1c5d      	adds	r5, r3, #1
 8016b6a:	6873      	ldr	r3, [r6, #4]
 8016b6c:	3b01      	subs	r3, #1
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	6073      	str	r3, [r6, #4]
 8016b72:	dc07      	bgt.n	8016b84 <_scanf_i+0xb8>
 8016b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b78:	4631      	mov	r1, r6
 8016b7a:	4658      	mov	r0, fp
 8016b7c:	4798      	blx	r3
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	f040 8086 	bne.w	8016c90 <_scanf_i+0x1c4>
 8016b84:	462b      	mov	r3, r5
 8016b86:	f108 0801 	add.w	r8, r8, #1
 8016b8a:	f1b8 0f03 	cmp.w	r8, #3
 8016b8e:	d1c8      	bne.n	8016b22 <_scanf_i+0x56>
 8016b90:	6862      	ldr	r2, [r4, #4]
 8016b92:	b90a      	cbnz	r2, 8016b98 <_scanf_i+0xcc>
 8016b94:	220a      	movs	r2, #10
 8016b96:	6062      	str	r2, [r4, #4]
 8016b98:	6862      	ldr	r2, [r4, #4]
 8016b9a:	4945      	ldr	r1, [pc, #276]	; (8016cb0 <_scanf_i+0x1e4>)
 8016b9c:	6960      	ldr	r0, [r4, #20]
 8016b9e:	9301      	str	r3, [sp, #4]
 8016ba0:	1a89      	subs	r1, r1, r2
 8016ba2:	f000 f8df 	bl	8016d64 <__sccl>
 8016ba6:	9b01      	ldr	r3, [sp, #4]
 8016ba8:	f04f 0800 	mov.w	r8, #0
 8016bac:	461d      	mov	r5, r3
 8016bae:	68a3      	ldr	r3, [r4, #8]
 8016bb0:	6822      	ldr	r2, [r4, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d03a      	beq.n	8016c2c <_scanf_i+0x160>
 8016bb6:	6831      	ldr	r1, [r6, #0]
 8016bb8:	6960      	ldr	r0, [r4, #20]
 8016bba:	f891 c000 	ldrb.w	ip, [r1]
 8016bbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	d032      	beq.n	8016c2c <_scanf_i+0x160>
 8016bc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016bca:	d121      	bne.n	8016c10 <_scanf_i+0x144>
 8016bcc:	0510      	lsls	r0, r2, #20
 8016bce:	d51f      	bpl.n	8016c10 <_scanf_i+0x144>
 8016bd0:	f108 0801 	add.w	r8, r8, #1
 8016bd4:	b117      	cbz	r7, 8016bdc <_scanf_i+0x110>
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	3f01      	subs	r7, #1
 8016bda:	60a3      	str	r3, [r4, #8]
 8016bdc:	6873      	ldr	r3, [r6, #4]
 8016bde:	3b01      	subs	r3, #1
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	6073      	str	r3, [r6, #4]
 8016be4:	dd1b      	ble.n	8016c1e <_scanf_i+0x152>
 8016be6:	6833      	ldr	r3, [r6, #0]
 8016be8:	3301      	adds	r3, #1
 8016bea:	6033      	str	r3, [r6, #0]
 8016bec:	68a3      	ldr	r3, [r4, #8]
 8016bee:	3b01      	subs	r3, #1
 8016bf0:	60a3      	str	r3, [r4, #8]
 8016bf2:	e7dc      	b.n	8016bae <_scanf_i+0xe2>
 8016bf4:	f1b8 0f02 	cmp.w	r8, #2
 8016bf8:	d1ad      	bne.n	8016b56 <_scanf_i+0x8a>
 8016bfa:	6822      	ldr	r2, [r4, #0]
 8016bfc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016c00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016c04:	d1bf      	bne.n	8016b86 <_scanf_i+0xba>
 8016c06:	2110      	movs	r1, #16
 8016c08:	6061      	str	r1, [r4, #4]
 8016c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016c0e:	e7a1      	b.n	8016b54 <_scanf_i+0x88>
 8016c10:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016c14:	6022      	str	r2, [r4, #0]
 8016c16:	780b      	ldrb	r3, [r1, #0]
 8016c18:	702b      	strb	r3, [r5, #0]
 8016c1a:	3501      	adds	r5, #1
 8016c1c:	e7de      	b.n	8016bdc <_scanf_i+0x110>
 8016c1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c22:	4631      	mov	r1, r6
 8016c24:	4658      	mov	r0, fp
 8016c26:	4798      	blx	r3
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d0df      	beq.n	8016bec <_scanf_i+0x120>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	05d9      	lsls	r1, r3, #23
 8016c30:	d50c      	bpl.n	8016c4c <_scanf_i+0x180>
 8016c32:	454d      	cmp	r5, r9
 8016c34:	d908      	bls.n	8016c48 <_scanf_i+0x17c>
 8016c36:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c3e:	4632      	mov	r2, r6
 8016c40:	4658      	mov	r0, fp
 8016c42:	4798      	blx	r3
 8016c44:	1e6f      	subs	r7, r5, #1
 8016c46:	463d      	mov	r5, r7
 8016c48:	454d      	cmp	r5, r9
 8016c4a:	d029      	beq.n	8016ca0 <_scanf_i+0x1d4>
 8016c4c:	6822      	ldr	r2, [r4, #0]
 8016c4e:	f012 0210 	ands.w	r2, r2, #16
 8016c52:	d113      	bne.n	8016c7c <_scanf_i+0x1b0>
 8016c54:	702a      	strb	r2, [r5, #0]
 8016c56:	6863      	ldr	r3, [r4, #4]
 8016c58:	9e00      	ldr	r6, [sp, #0]
 8016c5a:	4649      	mov	r1, r9
 8016c5c:	4658      	mov	r0, fp
 8016c5e:	47b0      	blx	r6
 8016c60:	f8da 3000 	ldr.w	r3, [sl]
 8016c64:	6821      	ldr	r1, [r4, #0]
 8016c66:	1d1a      	adds	r2, r3, #4
 8016c68:	f8ca 2000 	str.w	r2, [sl]
 8016c6c:	f011 0f20 	tst.w	r1, #32
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	d010      	beq.n	8016c96 <_scanf_i+0x1ca>
 8016c74:	6018      	str	r0, [r3, #0]
 8016c76:	68e3      	ldr	r3, [r4, #12]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	60e3      	str	r3, [r4, #12]
 8016c7c:	eba5 0509 	sub.w	r5, r5, r9
 8016c80:	44a8      	add	r8, r5
 8016c82:	6925      	ldr	r5, [r4, #16]
 8016c84:	4445      	add	r5, r8
 8016c86:	6125      	str	r5, [r4, #16]
 8016c88:	2000      	movs	r0, #0
 8016c8a:	b007      	add	sp, #28
 8016c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c90:	f04f 0800 	mov.w	r8, #0
 8016c94:	e7ca      	b.n	8016c2c <_scanf_i+0x160>
 8016c96:	07ca      	lsls	r2, r1, #31
 8016c98:	bf4c      	ite	mi
 8016c9a:	8018      	strhmi	r0, [r3, #0]
 8016c9c:	6018      	strpl	r0, [r3, #0]
 8016c9e:	e7ea      	b.n	8016c76 <_scanf_i+0x1aa>
 8016ca0:	2001      	movs	r0, #1
 8016ca2:	e7f2      	b.n	8016c8a <_scanf_i+0x1be>
 8016ca4:	0801726c 	.word	0x0801726c
 8016ca8:	08013eb9 	.word	0x08013eb9
 8016cac:	08016ee1 	.word	0x08016ee1
 8016cb0:	08017af5 	.word	0x08017af5

08016cb4 <_putc_r>:
 8016cb4:	b570      	push	{r4, r5, r6, lr}
 8016cb6:	460d      	mov	r5, r1
 8016cb8:	4614      	mov	r4, r2
 8016cba:	4606      	mov	r6, r0
 8016cbc:	b118      	cbz	r0, 8016cc6 <_putc_r+0x12>
 8016cbe:	6983      	ldr	r3, [r0, #24]
 8016cc0:	b90b      	cbnz	r3, 8016cc6 <_putc_r+0x12>
 8016cc2:	f7fe f941 	bl	8014f48 <__sinit>
 8016cc6:	4b13      	ldr	r3, [pc, #76]	; (8016d14 <_putc_r+0x60>)
 8016cc8:	429c      	cmp	r4, r3
 8016cca:	d112      	bne.n	8016cf2 <_putc_r+0x3e>
 8016ccc:	6874      	ldr	r4, [r6, #4]
 8016cce:	68a3      	ldr	r3, [r4, #8]
 8016cd0:	3b01      	subs	r3, #1
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	60a3      	str	r3, [r4, #8]
 8016cd6:	da16      	bge.n	8016d06 <_putc_r+0x52>
 8016cd8:	69a2      	ldr	r2, [r4, #24]
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	db02      	blt.n	8016ce4 <_putc_r+0x30>
 8016cde:	b2eb      	uxtb	r3, r5
 8016ce0:	2b0a      	cmp	r3, #10
 8016ce2:	d110      	bne.n	8016d06 <_putc_r+0x52>
 8016ce4:	4622      	mov	r2, r4
 8016ce6:	4629      	mov	r1, r5
 8016ce8:	4630      	mov	r0, r6
 8016cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cee:	f7fd b915 	b.w	8013f1c <__swbuf_r>
 8016cf2:	4b09      	ldr	r3, [pc, #36]	; (8016d18 <_putc_r+0x64>)
 8016cf4:	429c      	cmp	r4, r3
 8016cf6:	d101      	bne.n	8016cfc <_putc_r+0x48>
 8016cf8:	68b4      	ldr	r4, [r6, #8]
 8016cfa:	e7e8      	b.n	8016cce <_putc_r+0x1a>
 8016cfc:	4b07      	ldr	r3, [pc, #28]	; (8016d1c <_putc_r+0x68>)
 8016cfe:	429c      	cmp	r4, r3
 8016d00:	bf08      	it	eq
 8016d02:	68f4      	ldreq	r4, [r6, #12]
 8016d04:	e7e3      	b.n	8016cce <_putc_r+0x1a>
 8016d06:	6823      	ldr	r3, [r4, #0]
 8016d08:	1c5a      	adds	r2, r3, #1
 8016d0a:	6022      	str	r2, [r4, #0]
 8016d0c:	701d      	strb	r5, [r3, #0]
 8016d0e:	b2e8      	uxtb	r0, r5
 8016d10:	bd70      	pop	{r4, r5, r6, pc}
 8016d12:	bf00      	nop
 8016d14:	08017988 	.word	0x08017988
 8016d18:	080179a8 	.word	0x080179a8
 8016d1c:	08017968 	.word	0x08017968

08016d20 <_read_r>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	4c07      	ldr	r4, [pc, #28]	; (8016d40 <_read_r+0x20>)
 8016d24:	4605      	mov	r5, r0
 8016d26:	4608      	mov	r0, r1
 8016d28:	4611      	mov	r1, r2
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	6022      	str	r2, [r4, #0]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	f7ee fa16 	bl	8005160 <_read>
 8016d34:	1c43      	adds	r3, r0, #1
 8016d36:	d102      	bne.n	8016d3e <_read_r+0x1e>
 8016d38:	6823      	ldr	r3, [r4, #0]
 8016d3a:	b103      	cbz	r3, 8016d3e <_read_r+0x1e>
 8016d3c:	602b      	str	r3, [r5, #0]
 8016d3e:	bd38      	pop	{r3, r4, r5, pc}
 8016d40:	20018234 	.word	0x20018234

08016d44 <_sbrk_r>:
 8016d44:	b538      	push	{r3, r4, r5, lr}
 8016d46:	4c06      	ldr	r4, [pc, #24]	; (8016d60 <_sbrk_r+0x1c>)
 8016d48:	2300      	movs	r3, #0
 8016d4a:	4605      	mov	r5, r0
 8016d4c:	4608      	mov	r0, r1
 8016d4e:	6023      	str	r3, [r4, #0]
 8016d50:	f7ee fa58 	bl	8005204 <_sbrk>
 8016d54:	1c43      	adds	r3, r0, #1
 8016d56:	d102      	bne.n	8016d5e <_sbrk_r+0x1a>
 8016d58:	6823      	ldr	r3, [r4, #0]
 8016d5a:	b103      	cbz	r3, 8016d5e <_sbrk_r+0x1a>
 8016d5c:	602b      	str	r3, [r5, #0]
 8016d5e:	bd38      	pop	{r3, r4, r5, pc}
 8016d60:	20018234 	.word	0x20018234

08016d64 <__sccl>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	780b      	ldrb	r3, [r1, #0]
 8016d68:	2b5e      	cmp	r3, #94	; 0x5e
 8016d6a:	bf13      	iteet	ne
 8016d6c:	1c4a      	addne	r2, r1, #1
 8016d6e:	1c8a      	addeq	r2, r1, #2
 8016d70:	784b      	ldrbeq	r3, [r1, #1]
 8016d72:	2100      	movne	r1, #0
 8016d74:	bf08      	it	eq
 8016d76:	2101      	moveq	r1, #1
 8016d78:	1e44      	subs	r4, r0, #1
 8016d7a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016d7e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016d82:	42ac      	cmp	r4, r5
 8016d84:	d1fb      	bne.n	8016d7e <__sccl+0x1a>
 8016d86:	b913      	cbnz	r3, 8016d8e <__sccl+0x2a>
 8016d88:	3a01      	subs	r2, #1
 8016d8a:	4610      	mov	r0, r2
 8016d8c:	bd70      	pop	{r4, r5, r6, pc}
 8016d8e:	f081 0401 	eor.w	r4, r1, #1
 8016d92:	54c4      	strb	r4, [r0, r3]
 8016d94:	1c51      	adds	r1, r2, #1
 8016d96:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016d9a:	2d2d      	cmp	r5, #45	; 0x2d
 8016d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8016da0:	460a      	mov	r2, r1
 8016da2:	d006      	beq.n	8016db2 <__sccl+0x4e>
 8016da4:	2d5d      	cmp	r5, #93	; 0x5d
 8016da6:	d0f0      	beq.n	8016d8a <__sccl+0x26>
 8016da8:	b90d      	cbnz	r5, 8016dae <__sccl+0x4a>
 8016daa:	4632      	mov	r2, r6
 8016dac:	e7ed      	b.n	8016d8a <__sccl+0x26>
 8016dae:	462b      	mov	r3, r5
 8016db0:	e7ef      	b.n	8016d92 <__sccl+0x2e>
 8016db2:	780e      	ldrb	r6, [r1, #0]
 8016db4:	2e5d      	cmp	r6, #93	; 0x5d
 8016db6:	d0fa      	beq.n	8016dae <__sccl+0x4a>
 8016db8:	42b3      	cmp	r3, r6
 8016dba:	dcf8      	bgt.n	8016dae <__sccl+0x4a>
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	429e      	cmp	r6, r3
 8016dc0:	54c4      	strb	r4, [r0, r3]
 8016dc2:	dcfb      	bgt.n	8016dbc <__sccl+0x58>
 8016dc4:	3102      	adds	r1, #2
 8016dc6:	e7e6      	b.n	8016d96 <__sccl+0x32>

08016dc8 <strncmp>:
 8016dc8:	b510      	push	{r4, lr}
 8016dca:	b16a      	cbz	r2, 8016de8 <strncmp+0x20>
 8016dcc:	3901      	subs	r1, #1
 8016dce:	1884      	adds	r4, r0, r2
 8016dd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016dd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d103      	bne.n	8016de4 <strncmp+0x1c>
 8016ddc:	42a0      	cmp	r0, r4
 8016dde:	d001      	beq.n	8016de4 <strncmp+0x1c>
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1f5      	bne.n	8016dd0 <strncmp+0x8>
 8016de4:	1a98      	subs	r0, r3, r2
 8016de6:	bd10      	pop	{r4, pc}
 8016de8:	4610      	mov	r0, r2
 8016dea:	e7fc      	b.n	8016de6 <strncmp+0x1e>

08016dec <_strtoul_l.isra.0>:
 8016dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016df0:	4680      	mov	r8, r0
 8016df2:	4689      	mov	r9, r1
 8016df4:	4692      	mov	sl, r2
 8016df6:	461e      	mov	r6, r3
 8016df8:	460f      	mov	r7, r1
 8016dfa:	463d      	mov	r5, r7
 8016dfc:	9808      	ldr	r0, [sp, #32]
 8016dfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e02:	f7fe fc51 	bl	80156a8 <__locale_ctype_ptr_l>
 8016e06:	4420      	add	r0, r4
 8016e08:	7843      	ldrb	r3, [r0, #1]
 8016e0a:	f013 0308 	ands.w	r3, r3, #8
 8016e0e:	d130      	bne.n	8016e72 <_strtoul_l.isra.0+0x86>
 8016e10:	2c2d      	cmp	r4, #45	; 0x2d
 8016e12:	d130      	bne.n	8016e76 <_strtoul_l.isra.0+0x8a>
 8016e14:	787c      	ldrb	r4, [r7, #1]
 8016e16:	1cbd      	adds	r5, r7, #2
 8016e18:	2101      	movs	r1, #1
 8016e1a:	2e00      	cmp	r6, #0
 8016e1c:	d05c      	beq.n	8016ed8 <_strtoul_l.isra.0+0xec>
 8016e1e:	2e10      	cmp	r6, #16
 8016e20:	d109      	bne.n	8016e36 <_strtoul_l.isra.0+0x4a>
 8016e22:	2c30      	cmp	r4, #48	; 0x30
 8016e24:	d107      	bne.n	8016e36 <_strtoul_l.isra.0+0x4a>
 8016e26:	782b      	ldrb	r3, [r5, #0]
 8016e28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016e2c:	2b58      	cmp	r3, #88	; 0x58
 8016e2e:	d14e      	bne.n	8016ece <_strtoul_l.isra.0+0xe2>
 8016e30:	786c      	ldrb	r4, [r5, #1]
 8016e32:	2610      	movs	r6, #16
 8016e34:	3502      	adds	r5, #2
 8016e36:	f04f 32ff 	mov.w	r2, #4294967295
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016e40:	fb06 fc02 	mul.w	ip, r6, r2
 8016e44:	ea6f 0c0c 	mvn.w	ip, ip
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016e4e:	2f09      	cmp	r7, #9
 8016e50:	d817      	bhi.n	8016e82 <_strtoul_l.isra.0+0x96>
 8016e52:	463c      	mov	r4, r7
 8016e54:	42a6      	cmp	r6, r4
 8016e56:	dd23      	ble.n	8016ea0 <_strtoul_l.isra.0+0xb4>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	db1e      	blt.n	8016e9a <_strtoul_l.isra.0+0xae>
 8016e5c:	4282      	cmp	r2, r0
 8016e5e:	d31c      	bcc.n	8016e9a <_strtoul_l.isra.0+0xae>
 8016e60:	d101      	bne.n	8016e66 <_strtoul_l.isra.0+0x7a>
 8016e62:	45a4      	cmp	ip, r4
 8016e64:	db19      	blt.n	8016e9a <_strtoul_l.isra.0+0xae>
 8016e66:	fb00 4006 	mla	r0, r0, r6, r4
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e70:	e7eb      	b.n	8016e4a <_strtoul_l.isra.0+0x5e>
 8016e72:	462f      	mov	r7, r5
 8016e74:	e7c1      	b.n	8016dfa <_strtoul_l.isra.0+0xe>
 8016e76:	2c2b      	cmp	r4, #43	; 0x2b
 8016e78:	bf04      	itt	eq
 8016e7a:	1cbd      	addeq	r5, r7, #2
 8016e7c:	787c      	ldrbeq	r4, [r7, #1]
 8016e7e:	4619      	mov	r1, r3
 8016e80:	e7cb      	b.n	8016e1a <_strtoul_l.isra.0+0x2e>
 8016e82:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016e86:	2f19      	cmp	r7, #25
 8016e88:	d801      	bhi.n	8016e8e <_strtoul_l.isra.0+0xa2>
 8016e8a:	3c37      	subs	r4, #55	; 0x37
 8016e8c:	e7e2      	b.n	8016e54 <_strtoul_l.isra.0+0x68>
 8016e8e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016e92:	2f19      	cmp	r7, #25
 8016e94:	d804      	bhi.n	8016ea0 <_strtoul_l.isra.0+0xb4>
 8016e96:	3c57      	subs	r4, #87	; 0x57
 8016e98:	e7dc      	b.n	8016e54 <_strtoul_l.isra.0+0x68>
 8016e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e9e:	e7e5      	b.n	8016e6c <_strtoul_l.isra.0+0x80>
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	da09      	bge.n	8016eb8 <_strtoul_l.isra.0+0xcc>
 8016ea4:	2322      	movs	r3, #34	; 0x22
 8016ea6:	f8c8 3000 	str.w	r3, [r8]
 8016eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8016eae:	f1ba 0f00 	cmp.w	sl, #0
 8016eb2:	d107      	bne.n	8016ec4 <_strtoul_l.isra.0+0xd8>
 8016eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb8:	b101      	cbz	r1, 8016ebc <_strtoul_l.isra.0+0xd0>
 8016eba:	4240      	negs	r0, r0
 8016ebc:	f1ba 0f00 	cmp.w	sl, #0
 8016ec0:	d0f8      	beq.n	8016eb4 <_strtoul_l.isra.0+0xc8>
 8016ec2:	b10b      	cbz	r3, 8016ec8 <_strtoul_l.isra.0+0xdc>
 8016ec4:	f105 39ff 	add.w	r9, r5, #4294967295
 8016ec8:	f8ca 9000 	str.w	r9, [sl]
 8016ecc:	e7f2      	b.n	8016eb4 <_strtoul_l.isra.0+0xc8>
 8016ece:	2430      	movs	r4, #48	; 0x30
 8016ed0:	2e00      	cmp	r6, #0
 8016ed2:	d1b0      	bne.n	8016e36 <_strtoul_l.isra.0+0x4a>
 8016ed4:	2608      	movs	r6, #8
 8016ed6:	e7ae      	b.n	8016e36 <_strtoul_l.isra.0+0x4a>
 8016ed8:	2c30      	cmp	r4, #48	; 0x30
 8016eda:	d0a4      	beq.n	8016e26 <_strtoul_l.isra.0+0x3a>
 8016edc:	260a      	movs	r6, #10
 8016ede:	e7aa      	b.n	8016e36 <_strtoul_l.isra.0+0x4a>

08016ee0 <_strtoul_r>:
 8016ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ee2:	4c06      	ldr	r4, [pc, #24]	; (8016efc <_strtoul_r+0x1c>)
 8016ee4:	4d06      	ldr	r5, [pc, #24]	; (8016f00 <_strtoul_r+0x20>)
 8016ee6:	6824      	ldr	r4, [r4, #0]
 8016ee8:	6a24      	ldr	r4, [r4, #32]
 8016eea:	2c00      	cmp	r4, #0
 8016eec:	bf08      	it	eq
 8016eee:	462c      	moveq	r4, r5
 8016ef0:	9400      	str	r4, [sp, #0]
 8016ef2:	f7ff ff7b 	bl	8016dec <_strtoul_l.isra.0>
 8016ef6:	b003      	add	sp, #12
 8016ef8:	bd30      	pop	{r4, r5, pc}
 8016efa:	bf00      	nop
 8016efc:	2000000c 	.word	0x2000000c
 8016f00:	20000070 	.word	0x20000070

08016f04 <__submore>:
 8016f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f08:	460c      	mov	r4, r1
 8016f0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f10:	4299      	cmp	r1, r3
 8016f12:	d11d      	bne.n	8016f50 <__submore+0x4c>
 8016f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f18:	f7ff f8de 	bl	80160d8 <_malloc_r>
 8016f1c:	b918      	cbnz	r0, 8016f26 <__submore+0x22>
 8016f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016f30:	6360      	str	r0, [r4, #52]	; 0x34
 8016f32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016f36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016f3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016f3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016f42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016f46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016f4a:	6020      	str	r0, [r4, #0]
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	e7e8      	b.n	8016f22 <__submore+0x1e>
 8016f50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016f52:	0077      	lsls	r7, r6, #1
 8016f54:	463a      	mov	r2, r7
 8016f56:	f000 f85a 	bl	801700e <_realloc_r>
 8016f5a:	4605      	mov	r5, r0
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	d0de      	beq.n	8016f1e <__submore+0x1a>
 8016f60:	eb00 0806 	add.w	r8, r0, r6
 8016f64:	4601      	mov	r1, r0
 8016f66:	4632      	mov	r2, r6
 8016f68:	4640      	mov	r0, r8
 8016f6a:	f7fe fc4f 	bl	801580c <memcpy>
 8016f6e:	f8c4 8000 	str.w	r8, [r4]
 8016f72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016f76:	e7e9      	b.n	8016f4c <__submore+0x48>

08016f78 <__ascii_wctomb>:
 8016f78:	b149      	cbz	r1, 8016f8e <__ascii_wctomb+0x16>
 8016f7a:	2aff      	cmp	r2, #255	; 0xff
 8016f7c:	bf85      	ittet	hi
 8016f7e:	238a      	movhi	r3, #138	; 0x8a
 8016f80:	6003      	strhi	r3, [r0, #0]
 8016f82:	700a      	strbls	r2, [r1, #0]
 8016f84:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f88:	bf98      	it	ls
 8016f8a:	2001      	movls	r0, #1
 8016f8c:	4770      	bx	lr
 8016f8e:	4608      	mov	r0, r1
 8016f90:	4770      	bx	lr
	...

08016f94 <_fstat_r>:
 8016f94:	b538      	push	{r3, r4, r5, lr}
 8016f96:	4c07      	ldr	r4, [pc, #28]	; (8016fb4 <_fstat_r+0x20>)
 8016f98:	2300      	movs	r3, #0
 8016f9a:	4605      	mov	r5, r0
 8016f9c:	4608      	mov	r0, r1
 8016f9e:	4611      	mov	r1, r2
 8016fa0:	6023      	str	r3, [r4, #0]
 8016fa2:	f7ee f906 	bl	80051b2 <_fstat>
 8016fa6:	1c43      	adds	r3, r0, #1
 8016fa8:	d102      	bne.n	8016fb0 <_fstat_r+0x1c>
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	b103      	cbz	r3, 8016fb0 <_fstat_r+0x1c>
 8016fae:	602b      	str	r3, [r5, #0]
 8016fb0:	bd38      	pop	{r3, r4, r5, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20018234 	.word	0x20018234

08016fb8 <_isatty_r>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	4c06      	ldr	r4, [pc, #24]	; (8016fd4 <_isatty_r+0x1c>)
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	4608      	mov	r0, r1
 8016fc2:	6023      	str	r3, [r4, #0]
 8016fc4:	f7ee f905 	bl	80051d2 <_isatty>
 8016fc8:	1c43      	adds	r3, r0, #1
 8016fca:	d102      	bne.n	8016fd2 <_isatty_r+0x1a>
 8016fcc:	6823      	ldr	r3, [r4, #0]
 8016fce:	b103      	cbz	r3, 8016fd2 <_isatty_r+0x1a>
 8016fd0:	602b      	str	r3, [r5, #0]
 8016fd2:	bd38      	pop	{r3, r4, r5, pc}
 8016fd4:	20018234 	.word	0x20018234

08016fd8 <memmove>:
 8016fd8:	4288      	cmp	r0, r1
 8016fda:	b510      	push	{r4, lr}
 8016fdc:	eb01 0302 	add.w	r3, r1, r2
 8016fe0:	d807      	bhi.n	8016ff2 <memmove+0x1a>
 8016fe2:	1e42      	subs	r2, r0, #1
 8016fe4:	4299      	cmp	r1, r3
 8016fe6:	d00a      	beq.n	8016ffe <memmove+0x26>
 8016fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016ff0:	e7f8      	b.n	8016fe4 <memmove+0xc>
 8016ff2:	4283      	cmp	r3, r0
 8016ff4:	d9f5      	bls.n	8016fe2 <memmove+0xa>
 8016ff6:	1881      	adds	r1, r0, r2
 8016ff8:	1ad2      	subs	r2, r2, r3
 8016ffa:	42d3      	cmn	r3, r2
 8016ffc:	d100      	bne.n	8017000 <memmove+0x28>
 8016ffe:	bd10      	pop	{r4, pc}
 8017000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017004:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017008:	e7f7      	b.n	8016ffa <memmove+0x22>

0801700a <__malloc_lock>:
 801700a:	4770      	bx	lr

0801700c <__malloc_unlock>:
 801700c:	4770      	bx	lr

0801700e <_realloc_r>:
 801700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017010:	4607      	mov	r7, r0
 8017012:	4614      	mov	r4, r2
 8017014:	460e      	mov	r6, r1
 8017016:	b921      	cbnz	r1, 8017022 <_realloc_r+0x14>
 8017018:	4611      	mov	r1, r2
 801701a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801701e:	f7ff b85b 	b.w	80160d8 <_malloc_r>
 8017022:	b922      	cbnz	r2, 801702e <_realloc_r+0x20>
 8017024:	f7ff f80a 	bl	801603c <_free_r>
 8017028:	4625      	mov	r5, r4
 801702a:	4628      	mov	r0, r5
 801702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801702e:	f000 f814 	bl	801705a <_malloc_usable_size_r>
 8017032:	42a0      	cmp	r0, r4
 8017034:	d20f      	bcs.n	8017056 <_realloc_r+0x48>
 8017036:	4621      	mov	r1, r4
 8017038:	4638      	mov	r0, r7
 801703a:	f7ff f84d 	bl	80160d8 <_malloc_r>
 801703e:	4605      	mov	r5, r0
 8017040:	2800      	cmp	r0, #0
 8017042:	d0f2      	beq.n	801702a <_realloc_r+0x1c>
 8017044:	4631      	mov	r1, r6
 8017046:	4622      	mov	r2, r4
 8017048:	f7fe fbe0 	bl	801580c <memcpy>
 801704c:	4631      	mov	r1, r6
 801704e:	4638      	mov	r0, r7
 8017050:	f7fe fff4 	bl	801603c <_free_r>
 8017054:	e7e9      	b.n	801702a <_realloc_r+0x1c>
 8017056:	4635      	mov	r5, r6
 8017058:	e7e7      	b.n	801702a <_realloc_r+0x1c>

0801705a <_malloc_usable_size_r>:
 801705a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801705e:	1f18      	subs	r0, r3, #4
 8017060:	2b00      	cmp	r3, #0
 8017062:	bfbc      	itt	lt
 8017064:	580b      	ldrlt	r3, [r1, r0]
 8017066:	18c0      	addlt	r0, r0, r3
 8017068:	4770      	bx	lr
	...

0801706c <_init>:
 801706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706e:	bf00      	nop
 8017070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017072:	bc08      	pop	{r3}
 8017074:	469e      	mov	lr, r3
 8017076:	4770      	bx	lr

08017078 <_fini>:
 8017078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801707a:	bf00      	nop
 801707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801707e:	bc08      	pop	{r3}
 8017080:	469e      	mov	lr, r3
 8017082:	4770      	bx	lr
