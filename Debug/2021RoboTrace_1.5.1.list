
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001886c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018a30  08018a30  00028a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019264  08019264  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019264  08019264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801926c  0801926c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801926c  0801926c  0002926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019274  08019274  00029274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019278  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c990  200001e0  08019454  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cb70  08019454  0003cb70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b4a4  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2d  00000000  00000000  0006b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002370  00000000  00000000  000732e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020a0  00000000  00000000  00075650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000776f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026681  00000000  00000000  000acba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001111fd  00000000  00000000  000d3225  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a618  00000000  00000000  001e44a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018a14 	.word	0x08018a14

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018a14 	.word	0x08018a14

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fa16 	bl	800b408 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a668 	.word	0x2004a668

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f9fe 	bl	800b408 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a668 	.word	0x2004a668

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f887 	bl	800b134 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fdee 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fde8 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fde2 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fddc 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fdd6 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fdd0 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fdca 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fdc4 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fdbe 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fdb8 	bl	8009c08 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fdac 	bl	8009c08 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fda6 	bl	8009c08 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f83d 	bl	80161a8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fece 	bl	800ef98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d feca 	bl	800ef98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fec6 	bl	800ef98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fec2 	bl	800ef98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a754 	.word	0x2004a754
 8001248:	2004a6bc 	.word	0x2004a6bc
 800124c:	2004a7dc 	.word	0x2004a7dc

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a754 	.word	0x2004a754
 800137c:	2004a7dc 	.word	0x2004a7dc
 8001380:	2004a6bc 	.word	0x2004a6bc

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a754 	.word	0x2004a754
 80013c4:	2004a6bc 	.word	0x2004a6bc
 80013c8:	2004a7dc 	.word	0x2004a7dc

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <_ZN7Encoder4initEv+0x30>)
 8001438:	f00d fe7e 	bl	800f138 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <_ZN7Encoder4initEv+0x34>)
 8001440:	f00d fe7a 	bl	800f138 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_ZN7Encoder4initEv+0x38>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <_ZN7Encoder4initEv+0x3c>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2004a8bc 	.word	0x2004a8bc
 8001460:	2004a5a0 	.word	0x2004a5a0
 8001464:	40010000 	.word	0x40010000
 8001468:	40010400 	.word	0x40010400
 800146c:	00000000 	.word	0x00000000

08001470 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <_ZN7Encoder6updateEv+0x108>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <_ZN7Encoder6updateEv+0x114>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 80014a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f84e 	bl	8000578 <__aeabi_f2d>
 80014dc:	a324      	add	r3, pc, #144	; (adr r3, 8001570 <_ZN7Encoder6updateEv+0x100>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8a1 	bl	8000628 <__aeabi_dmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f6:	f7ff f9c1 	bl	800087c <__aeabi_ddiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	f7ff fb89 	bl	8000c18 <__aeabi_d2f>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a06 	vldr	s14, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 7a02 	vldr	s15, [r3, #8]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ed93 7a07 	vldr	s14, [r3, #28]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a02 	vldr	s15, [r3, #8]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a07 	vstr	s15, [r3, #28]
	goal_judge_distance_ += distance_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a08 	vldr	s14, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a02 	vldr	s15, [r3, #8]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edc3 7a08 	vstr	s15, [r3, #32]
	//monitor_distance = distance_10mm_;
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	ce73a049 	.word	0xce73a049
 8001574:	3f77a3f6 	.word	0x3f77a3f6
 8001578:	40010000 	.word	0x40010000
 800157c:	47000000 	.word	0x47000000
 8001580:	3f912547 	.word	0x3f912547
 8001584:	40010400 	.word	0x40010400

08001588 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_ZN7Encoder5clearEv+0x3c>)
 80015a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_ZN7Encoder5clearEv+0x40>)
 80015aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40010400 	.word	0x40010400

080015cc <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return distance_;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	ee07 3a90 	vmov	s15, r3
}
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	ee07 3a90 	vmov	s15, r3
}
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	619a      	str	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	ee07 3a90 	vmov	s15, r3
}
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f977 	bl	8001a1c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800172e:	f000 f98b 	bl	8001a48 <fopen_folder_and_file>

	return ret;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <user_fclose+0x1c>)
 8001748:	f012 fa50 	bl	8013bec <f_close>

	return ret;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200494ac 	.word	0x200494ac

0800175c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b087      	sub	sp, #28
 8001760:	af02      	add	r7, sp, #8
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	4613      	mov	r3, r2
 800176a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001770:	2300      	movs	r3, #0
 8001772:	81fb      	strh	r3, [r7, #14]
 8001774:	e030      	b.n	80017d8 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fef8 	bl	8000578 <__aeabi_f2d>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	e9cd 3400 	strd	r3, r4, [sp]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <sd_write_float+0x94>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <sd_write_float+0x98>)
 8001796:	f013 fdb9 	bl	801530c <sniprintf>

		if(state == ADD_WRITE){
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <sd_write_float+0x9c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <sd_write_float+0x9c>)
 80017a8:	f012 fa94 	bl	8013cd4 <f_lseek>
 80017ac:	e003      	b.n	80017b6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80017ae:	2100      	movs	r1, #0
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <sd_write_float+0x9c>)
 80017b2:	f012 fa8f 	bl	8013cd4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <sd_write_float+0x98>)
 80017b8:	f7fe fd22 	bl	8000200 <strlen>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <sd_write_float+0xa0>)
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <sd_write_float+0x98>)
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <sd_write_float+0x9c>)
 80017c4:	f011 fffd 	bl	80137c2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c8:	f000 f958 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbc8      	blt.n	8001776 <sd_write_float+0x1a>
	}
	return ret;
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08018a30 	.word	0x08018a30
 80017f4:	2004941c 	.word	0x2004941c
 80017f8:	200494ac 	.word	0x200494ac
 80017fc:	2004949c 	.word	0x2004949c

08001800 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f900 	bl	8001a1c <create_path>

	if(state == OVER_WRITE){
 800181c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <sd_write_array_float+0xb0>)
 8001826:	f012 fa0b 	bl	8013c40 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800182a:	4822      	ldr	r0, [pc, #136]	; (80018b4 <sd_write_array_float+0xb4>)
 800182c:	f012 fc76 	bl	801411c <f_unlink>
		f_chdir("..");
 8001830:	4821      	ldr	r0, [pc, #132]	; (80018b8 <sd_write_array_float+0xb8>)
 8001832:	f012 fa05 	bl	8013c40 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001836:	f000 f907 	bl	8001a48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	e028      	b.n	8001892 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	e9cd 3400 	strd	r3, r4, [sp]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <sd_write_array_float+0xbc>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <sd_write_array_float+0xc0>)
 8001860:	f013 fd54 	bl	801530c <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <sd_write_array_float+0xc4>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4619      	mov	r1, r3
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <sd_write_array_float+0xc4>)
 800186c:	f012 fa32 	bl	8013cd4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <sd_write_array_float+0xc0>)
 8001872:	f7fe fcc5 	bl	8000200 <strlen>
 8001876:	4602      	mov	r2, r0
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <sd_write_array_float+0xc8>)
 800187a:	4911      	ldr	r1, [pc, #68]	; (80018c0 <sd_write_array_float+0xc0>)
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <sd_write_array_float+0xc4>)
 800187e:	f011 ffa0 	bl	80137c2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001882:	f000 f8fb 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	82fb      	strh	r3, [r7, #22]
 8001892:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbd0      	blt.n	8001840 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <sd_write_array_float+0xc4>)
 80018a0:	f012 f9a4 	bl	8013bec <f_close>

	return ret;
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2004931c 	.word	0x2004931c
 80018b4:	200481dc 	.word	0x200481dc
 80018b8:	08018a4c 	.word	0x08018a4c
 80018bc:	08018a30 	.word	0x08018a30
 80018c0:	2004941c 	.word	0x2004941c
 80018c4:	200494ac 	.word	0x200494ac
 80018c8:	2004949c 	.word	0x2004949c

080018cc <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f898 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018ec:	f000 f8ac 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018f0:	e019      	b.n	8001926 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80018f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <sd_read_array_float+0x80>)
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <sd_read_array_float+0x84>)
 8001902:	f013 fd57 	bl	80153b4 <siscanf>
		i++;
 8001906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001912:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	db03      	blt.n	8001926 <sd_read_array_float+0x5a>
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	3b01      	subs	r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <sd_read_array_float+0x88>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4809      	ldr	r0, [pc, #36]	; (8001950 <sd_read_array_float+0x84>)
 800192c:	f012 fdd4 	bl	80144d8 <f_gets>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1dd      	bne.n	80018f2 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001936:	f000 f8a1 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <sd_read_array_float+0x88>)
 800193c:	f012 f956 	bl	8013bec <f_close>

	return ret;
 8001940:	7d7b      	ldrb	r3, [r7, #21]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08018a3c 	.word	0x08018a3c
 8001950:	2004941c 	.word	0x2004941c
 8001954:	200494ac 	.word	0x200494ac

08001958 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f852 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001978:	f000 f866 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800197c:	e019      	b.n	80019b2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800197e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4913      	ldr	r1, [pc, #76]	; (80019d8 <sd_read_array_double+0x80>)
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <sd_read_array_double+0x84>)
 800198e:	f013 fd11 	bl	80153b4 <siscanf>
		i++;
 8001992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001996:	b29b      	uxth	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800199e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	db03      	blt.n	80019b2 <sd_read_array_double+0x5a>
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <sd_read_array_double+0x88>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <sd_read_array_double+0x84>)
 80019b8:	f012 fd8e 	bl	80144d8 <f_gets>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1dd      	bne.n	800197e <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019c2:	f000 f85b 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <sd_read_array_double+0x88>)
 80019c8:	f012 f910 	bl	8013bec <f_close>

	return ret;
 80019cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08018a48 	.word	0x08018a48
 80019dc:	2004941c 	.word	0x2004941c
 80019e0:	200494ac 	.word	0x200494ac

080019e4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80019ee:	2201      	movs	r2, #1
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <sd_mount+0x30>)
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <sd_mount+0x34>)
 80019f4:	f011 fb72 	bl	80130dc <f_mount>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <sd_mount+0x20>
 80019fe:	2301      	movs	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e001      	b.n	8001a08 <sd_mount+0x24>
	else ret = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08018a58 	.word	0x08018a58
 8001a18:	200482dc 	.word	0x200482dc

08001a1c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <create_path+0x24>)
 8001a2a:	f013 fcef 	bl	801540c <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <create_path+0x28>)
 8001a32:	f013 fceb 	bl	801540c <strcpy>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2004931c 	.word	0x2004931c
 8001a44:	200481dc 	.word	0x200481dc

08001a48 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a4e:	f012 fc27 	bl	80142a0 <f_mkdir>

	f_chdir(dirpath);
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a54:	f012 f8f4 	bl	8013c40 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a58:	2213      	movs	r2, #19
 8001a5a:	4905      	ldr	r1, [pc, #20]	; (8001a70 <fopen_folder_and_file+0x28>)
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <fopen_folder_and_file+0x2c>)
 8001a5e:	f011 fb83 	bl	8013168 <f_open>

	f_chdir("..");
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <fopen_folder_and_file+0x30>)
 8001a64:	f012 f8ec 	bl	8013c40 <f_chdir>


}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2004931c 	.word	0x2004931c
 8001a70:	200481dc 	.word	0x200481dc
 8001a74:	200494ac 	.word	0x200494ac
 8001a78:	08018a4c 	.word	0x08018a4c

08001a7c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e007      	b.n	8001a98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <bufclear+0x30>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	ddf4      	ble.n	8001a88 <bufclear+0xc>
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2004941c 	.word	0x2004941c

08001ab0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <read_byte+0x54>)
 8001acc:	f009 fb32 	bl	800b134 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001ad0:	f107 010f 	add.w	r1, r7, #15
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <read_byte+0x58>)
 8001ada:	f00c fcf3 	bl	800e4c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001ade:	f107 010e 	add.w	r1, r7, #14
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <read_byte+0x58>)
 8001ae8:	f00c fe20 	bl	800e72c <HAL_SPI_Receive>
	CS_SET;
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <read_byte+0x54>)
 8001af4:	f009 fb1e 	bl	800b134 <HAL_GPIO_WritePin>

	return val;
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020400 	.word	0x40020400
 8001b08:	2004a548 	.word	0x2004a548

08001b0c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <write_byte+0x54>)
 8001b2e:	f009 fb01 	bl	800b134 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b32:	f107 010f 	add.w	r1, r7, #15
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	2201      	movs	r2, #1
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <write_byte+0x58>)
 8001b3c:	f00c fcc2 	bl	800e4c4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b40:	1db9      	adds	r1, r7, #6
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	2201      	movs	r2, #1
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <write_byte+0x58>)
 8001b48:	f00c fcbc 	bl	800e4c4 <HAL_SPI_Transmit>
	CS_SET;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <write_byte+0x54>)
 8001b54:	f009 faee 	bl	800b134 <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020400 	.word	0x40020400
 8001b64:	2004a548 	.word	0x2004a548

08001b68 <IMU_init>:

uint16_t IMU_init() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff ff9c 	bl	8001ab0 <read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	2be0      	cmp	r3, #224	; 0xe0
 8001b80:	d119      	bne.n	8001bb6 <IMU_init+0x4e>
		ret = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b86:	2101      	movs	r1, #1
 8001b88:	2006      	movs	r0, #6
 8001b8a:	f7ff ffbf 	bl	8001b0c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b8e:	2110      	movs	r1, #16
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7ff ffbb 	bl	8001b0c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b96:	2120      	movs	r1, #32
 8001b98:	207f      	movs	r0, #127	; 0x7f
 8001b9a:	f7ff ffb7 	bl	8001b0c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b9e:	2106      	movs	r1, #6
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff ffb3 	bl	8001b0c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ba6:	2106      	movs	r1, #6
 8001ba8:	2014      	movs	r0, #20
 8001baa:	f7ff ffaf 	bl	8001b0c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	207f      	movs	r0, #127	; 0x7f
 8001bb2:	f7ff ffab 	bl	8001b0c <write_byte>
	}
	return ret;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <read_gyro_data>:

void read_gyro_data() {
 8001bc0:	b598      	push	{r3, r4, r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001bc4:	2033      	movs	r0, #51	; 0x33
 8001bc6:	f7ff ff73 	bl	8001ab0 <read_byte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	2034      	movs	r0, #52	; 0x34
 8001bd2:	f7ff ff6d 	bl	8001ab0 <read_byte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <read_gyro_data+0x64>)
 8001be0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001be2:	2035      	movs	r0, #53	; 0x35
 8001be4:	f7ff ff64 	bl	8001ab0 <read_byte>
 8001be8:	4603      	mov	r3, r0
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21c      	sxth	r4, r3
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f7ff ff5e 	bl	8001ab0 <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <read_gyro_data+0x68>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c00:	2037      	movs	r0, #55	; 0x37
 8001c02:	f7ff ff55 	bl	8001ab0 <read_byte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21c      	sxth	r4, r3
 8001c0c:	2038      	movs	r0, #56	; 0x38
 8001c0e:	f7ff ff4f 	bl	8001ab0 <read_byte>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4323      	orrs	r3, r4
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <read_gyro_data+0x6c>)
 8001c1c:	801a      	strh	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	bd98      	pop	{r3, r4, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2004a4e4 	.word	0x2004a4e4
 8001c28:	2004a4e2 	.word	0x2004a4e2
 8001c2c:	2004a4dc 	.word	0x2004a4dc

08001c30 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	805a      	strh	r2, [r3, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	809a      	strh	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	80da      	strh	r2, [r3, #6]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	811a      	strh	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	815a      	strh	r2, [r3, #10]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
{

}
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c7c:	f7ff ff74 	bl	8001b68 <IMU_init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c84:	f7ff fa0c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fa18 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <_ZN3IMU4initEv+0x44>)
 8001c92:	f7ff fa3f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c96:	2101      	movs	r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa11 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <_ZN3IMU4initEv+0x48>)
 8001ca4:	f7ff fa36 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cac:	f007 ffac 	bl	8009c08 <HAL_Delay>

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08018a5c 	.word	0x08018a5c
 8001cbc:	08018a68 	.word	0x08018a68

08001cc0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001cc8:	f7ff ff7a 	bl	8001bc0 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <_ZN3IMU12updateValuesEv+0xa0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <_ZN3IMU12updateValuesEv+0xa4>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc2f 	bl	8000554 <__aeabi_i2d>
 8001cf6:	a316      	add	r3, pc, #88	; (adr r3, 8001d50 <_ZN3IMU12updateValuesEv+0x90>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc94 	bl	8000628 <__aeabi_dmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4625      	mov	r5, r4
 8001d06:	461c      	mov	r4, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc20 	bl	8000554 <__aeabi_i2d>
 8001d14:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <_ZN3IMU12updateValuesEv+0x98>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc85 	bl	8000628 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fac9 	bl	80002bc <__adddf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	f7fe ff29 	bl	8000b88 <__aeabi_d2iz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d46:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	47ae147b 	.word	0x47ae147b
 8001d54:	3f847ae1 	.word	0x3f847ae1
 8001d58:	7ae147ae 	.word	0x7ae147ae
 8001d5c:	3fefae14 	.word	0x3fefae14
 8001d60:	2004a4e4 	.word	0x2004a4e4
 8001d64:	2004a4e2 	.word	0x2004a4e2
 8001d68:	2004a4dc 	.word	0x2004a4dc
 8001d6c:	200001fc 	.word	0x200001fc

08001d70 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7fe fbef 	bl	8000578 <__aeabi_f2d>
 8001d9a:	a316      	add	r3, pc, #88	; (adr r3, 8001df4 <_ZN3IMU8getOmegaEv+0x84>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fd6c 	bl	800087c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dae:	a313      	add	r3, pc, #76	; (adr r3, 8001dfc <_ZN3IMU8getOmegaEv+0x8c>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fc36 	bl	8000628 <__aeabi_dmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_ZN3IMU8getOmegaEv+0x80>)
 8001dca:	f7fe fd57 	bl	800087c <__aeabi_ddiv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f7fe ff1f 	bl	8000c18 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	ee07 3a90 	vmov	s15, r3
}
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40668000 	.word	0x40668000
 8001df4:	66666666 	.word	0x66666666
 8001df8:	40306666 	.word	0x40306666
 8001dfc:	54411744 	.word	0x54411744
 8001e00:	400921fb 	.word	0x400921fb

08001e04 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e0c:	466b      	mov	r3, sp
 8001e0e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e10:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e14:	f007 fef8 	bl	8009c08 <HAL_Delay>
	lcd_clear();
 8001e18:	f7ff f942 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff f94e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e24:	4840      	ldr	r0, [pc, #256]	; (8001f28 <_ZN3IMU11calibrationEv+0x124>)
 8001e26:	f7ff f975 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f947 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e32:	483e      	ldr	r0, [pc, #248]	; (8001f2c <_ZN3IMU11calibrationEv+0x128>)
 8001e34:	f7ff f96e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e3c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e42:	1e5d      	subs	r5, r3, #1
 8001e44:	61bd      	str	r5, [r7, #24]
 8001e46:	462b      	mov	r3, r5
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	0154      	lsls	r4, r2, #5
 8001e5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e5e:	014b      	lsls	r3, r1, #5
 8001e60:	462b      	mov	r3, r5
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f04f 0400 	mov.w	r4, #0
 8001e72:	0154      	lsls	r4, r2, #5
 8001e74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e78:	014b      	lsls	r3, r1, #5
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3303      	adds	r3, #3
 8001e82:	3307      	adds	r3, #7
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	ebad 0d03 	sub.w	sp, sp, r3
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	3303      	adds	r3, #3
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	83fb      	strh	r3, [r7, #30]
 8001e9a:	8bfa      	ldrh	r2, [r7, #30]
 8001e9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	da13      	bge.n	8001ecc <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	ee07 2a90 	vmov	s15, r2
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f007 fea2 	bl	8009c08 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ec4:	8bfb      	ldrh	r3, [r7, #30]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	83fb      	strh	r3, [r7, #30]
 8001eca:	e7e6      	b.n	8001e9a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d00e      	beq.n	8001f02 <_ZN3IMU11calibrationEv+0xfe>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3304      	adds	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e7ec      	b.n	8001edc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f1c:	46b5      	mov	sp, r6
}
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	; 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08018a6c 	.word	0x08018a6c
 8001f2c:	08018a78 	.word	0x08018a78

08001f30 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	b299      	uxth	r1, r3
 8001f44:	1dfa      	adds	r2, r7, #7
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <INA260_read+0x50>)
 8001f4e:	f009 fa5b 	bl	800b408 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	b299      	uxth	r1, r3
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <INA260_read+0x50>)
 8001f62:	f009 fb4f 	bl	800b604 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f76:	89fb      	ldrh	r3, [r7, #14]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2004a6fc 	.word	0x2004a6fc

08001f84 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	4603      	mov	r3, r0
 8001f98:	71bb      	strb	r3, [r7, #6]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	717b      	strb	r3, [r7, #5]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	737b      	strb	r3, [r7, #13]
 8001faa:	797b      	ldrb	r3, [r7, #5]
 8001fac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001fae:	793b      	ldrb	r3, [r7, #4]
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	f107 020c 	add.w	r2, r7, #12
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2303      	movs	r3, #3
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <INA260_write+0x48>)
 8001fbe:	f009 fa23 	bl	800b408 <HAL_I2C_Master_Transmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2004a6fc 	.word	0x2004a6fc

08001fd0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001fe2:	797b      	ldrb	r3, [r7, #5]
 8001fe4:	79ba      	ldrb	r2, [r7, #6]
 8001fe6:	79f9      	ldrb	r1, [r7, #7]
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ffcb 	bl	8001f84 <INA260_write>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	461a      	mov	r2, r3
 8002004:	21df      	movs	r1, #223	; 0xdf
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff ffe2 	bl	8001fd0 <setConfig>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
{

}
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203c:	482a      	ldr	r0, [pc, #168]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 800203e:	f009 f861 	bl	800b104 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <_ZN8JoyStick8getValueEv+0x2e>
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800205a:	2101      	movs	r1, #1
 800205c:	4823      	ldr	r0, [pc, #140]	; (80020ec <_ZN8JoyStick8getValueEv+0xc0>)
 800205e:	f009 f851 	bl	800b104 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <_ZN8JoyStick8getValueEv+0x4e>
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	481a      	ldr	r0, [pc, #104]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 8002080:	f009 f840 	bl	800b104 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <_ZN8JoyStick8getValueEv+0x70>
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800209c:	2104      	movs	r1, #4
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <_ZN8JoyStick8getValueEv+0xc4>)
 80020a0:	f009 f830 	bl	800b104 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <_ZN8JoyStick8getValueEv+0x90>
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 80020c0:	f009 f820 	bl	800b104 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <_ZN8JoyStick8getValueEv+0xb0>
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80020dc:	89fb      	ldrh	r3, [r7, #14]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40020400 	.word	0x40020400

080020f4 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b52      	cmp	r3, #82	; 0x52
 8002104:	d112      	bne.n	800212c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4856      	ldr	r0, [pc, #344]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800210e:	f009 f811 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002118:	4853      	ldr	r0, [pc, #332]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800211a:	f009 f80b 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	4850      	ldr	r0, [pc, #320]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002126:	f009 f805 	bl	800b134 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800212a:	e098      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b47      	cmp	r3, #71	; 0x47
 8002130:	d112      	bne.n	8002158 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	484b      	ldr	r0, [pc, #300]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800213a:	f008 fffb 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4848      	ldr	r0, [pc, #288]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002146:	f008 fff5 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002150:	4845      	ldr	r0, [pc, #276]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002152:	f008 ffef 	bl	800b134 <HAL_GPIO_WritePin>
}
 8002156:	e082      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b42      	cmp	r3, #66	; 0x42
 800215c:	d112      	bne.n	8002184 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002164:	4840      	ldr	r0, [pc, #256]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002166:	f008 ffe5 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	483d      	ldr	r0, [pc, #244]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002172:	f008 ffdf 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	483a      	ldr	r0, [pc, #232]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800217e:	f008 ffd9 	bl	800b134 <HAL_GPIO_WritePin>
}
 8002182:	e06c      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b43      	cmp	r3, #67	; 0x43
 8002188:	d112      	bne.n	80021b0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002190:	4835      	ldr	r0, [pc, #212]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002192:	f008 ffcf 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	4832      	ldr	r0, [pc, #200]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800219e:	f008 ffc9 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a8:	482f      	ldr	r0, [pc, #188]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021aa:	f008 ffc3 	bl	800b134 <HAL_GPIO_WritePin>
}
 80021ae:	e056      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b4d      	cmp	r3, #77	; 0x4d
 80021b4:	d112      	bne.n	80021dc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	482a      	ldr	r0, [pc, #168]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021be:	f008 ffb9 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ca:	f008 ffb3 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d4:	4824      	ldr	r0, [pc, #144]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f008 ffad 	bl	800b134 <HAL_GPIO_WritePin>
}
 80021da:	e040      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b59      	cmp	r3, #89	; 0x59
 80021e0:	d112      	bne.n	8002208 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e8:	481f      	ldr	r0, [pc, #124]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ea:	f008 ffa3 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021f6:	f008 ff9d 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f008 ff97 	bl	800b134 <HAL_GPIO_WritePin>
}
 8002206:	e02a      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b57      	cmp	r3, #87	; 0x57
 800220c:	d112      	bne.n	8002234 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002216:	f008 ff8d 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002222:	f008 ff87 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 ff81 	bl	800b134 <HAL_GPIO_WritePin>
}
 8002232:	e014      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b7e      	cmp	r3, #126	; 0x7e
 8002238:	d111      	bne.n	800225e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002242:	f008 ff77 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f008 ff71 	bl	800b134 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 ff6b 	bl	800b134 <HAL_GPIO_WritePin>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020000 	.word	0x40020000

0800226c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	4613      	mov	r3, r2
 800227a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4813      	ldr	r0, [pc, #76]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 800228c:	f008 ff52 	bl	800b134 <HAL_GPIO_WritePin>
 8002290:	e009      	b.n	80022a6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022a2:	f008 ff47 	bl	800b134 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80022a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022b6:	f008 ff3d 	bl	800b134 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80022ba:	e009      	b.n	80022d0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80022bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022cc:	f008 ff32 	bl	800b134 <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020000 	.word	0x40020000

080022dc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80022dc:	b580      	push	{r7, lr}
 80022de:	b092      	sub	sp, #72	; 0x48
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe92 	bl	8002014 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	331c      	adds	r3, #28
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
 80022fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	429a      	cmp	r2, r3
 8002304:	d008      	beq.n	8002318 <_ZN10LineSensorC1Ev+0x3c>
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	3302      	adds	r3, #2
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
 8002316:	e7f2      	b.n	80022fe <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	429a      	cmp	r2, r3
 8002330:	d009      	beq.n	8002346 <_ZN10LineSensorC1Ev+0x6a>
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	623b      	str	r3, [r7, #32]
		s = 0;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	3304      	adds	r3, #4
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	e7f1      	b.n	800232a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3338      	adds	r3, #56	; 0x38
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d009      	beq.n	8002374 <_ZN10LineSensorC1Ev+0x98>
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	617b      	str	r3, [r7, #20]
		m = 0;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236e:	3304      	adds	r3, #4
 8002370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002372:	e7f1      	b.n	8002358 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d009      	beq.n	80023a2 <_ZN10LineSensorC1Ev+0xc6>
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002398:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	3304      	adds	r3, #4
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	e7f1      	b.n	8002386 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3748      	adds	r7, #72	; 0x48
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	220e      	movs	r2, #14
 80023b8:	4619      	mov	r1, r3
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80023bc:	f007 fc8a 	bl	8009cd4 <HAL_ADC_Start_DMA>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2004a620 	.word	0x2004a620

080023cc <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b0d      	cmp	r3, #13
 80023dc:	dc2f      	bgt.n	800243e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3392      	adds	r3, #146	; 0x92
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	33a0      	adds	r3, #160	; 0xa0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a5b      	subs	r3, r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	440b      	add	r3, r1
 800242a:	3306      	adds	r3, #6
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e7cc      	b.n	80023d8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002448:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b09      	cmp	r3, #9
 8002450:	d902      	bls.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]


}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200001fe 	.word	0x200001fe

08002468 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002468:	b490      	push	{r4, r7}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800247a:	2b0d      	cmp	r3, #13
 800247c:	f200 8087 	bhi.w	800258e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800248a:	2b09      	cmp	r3, #9
 800248c:	d81c      	bhi.n	80024c8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800248e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002492:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002496:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4423      	add	r3, r4
 80024a6:	3306      	adds	r3, #6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	3304      	adds	r3, #4
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	008b      	lsls	r3, r1, #2
 80024b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024b6:	440b      	add	r3, r1
 80024b8:	3b30      	subs	r3, #48	; 0x30
 80024ba:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024c0:	3301      	adds	r3, #1
 80024c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024c6:	e7de      	b.n	8002486 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80024ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	d84d      	bhi.n	8002572 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80024d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024da:	3301      	adds	r3, #1
 80024dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d83e      	bhi.n	8002566 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80024e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	4413      	add	r3, r2
 80024f4:	3b30      	subs	r3, #48	; 0x30
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002504:	4413      	add	r3, r2
 8002506:	3b30      	subs	r3, #48	; 0x30
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d521      	bpl.n	800255a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002516:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002520:	4413      	add	r3, r2
 8002522:	3b30      	subs	r3, #48	; 0x30
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002528:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800252c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440a      	add	r2, r1
 8002538:	3a30      	subs	r2, #48	; 0x30
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002542:	440b      	add	r3, r1
 8002544:	3b30      	subs	r3, #48	; 0x30
 8002546:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002564:	e7bc      	b.n	80024e0 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002566:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256a:	3301      	adds	r3, #1
 800256c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002570:	e7ad      	b.n	80024ce <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	33b0      	adds	r3, #176	; 0xb0
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002586:	3301      	adds	r3, #1
 8002588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800258c:	e773      	b.n	8002476 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 800258e:	bf00      	nop
 8002590:	3738      	adds	r7, #56	; 0x38
 8002592:	46bd      	mov	sp, r7
 8002594:	bc90      	pop	{r4, r7}
 8002596:	4770      	bx	lr

08002598 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a0      	sub	sp, #128	; 0x80
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f007 fb31 	bl	8009c08 <HAL_Delay>

	lcd_clear();
 80025a6:	f7fe fd7b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fd87 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80025b2:	4886      	ldr	r0, [pc, #536]	; (80027cc <_ZN10LineSensor11calibrationEv+0x234>)
 80025b4:	f7fe fdae 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fd80 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80025c0:	4883      	ldr	r0, [pc, #524]	; (80027d0 <_ZN10LineSensor11calibrationEv+0x238>)
 80025c2:	f7fe fda7 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025d0:	2b0d      	cmp	r3, #13
 80025d2:	d823      	bhi.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80025d4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	32b0      	adds	r2, #176	; 0xb0
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	440a      	add	r2, r1
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ec:	440b      	add	r3, r1
 80025ee:	3b40      	subs	r3, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80025f2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	32b0      	adds	r2, #176	; 0xb0
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	440a      	add	r2, r1
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800260a:	440b      	add	r3, r1
 800260c:	3b78      	subs	r3, #120	; 0x78
 800260e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002610:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002614:	3301      	adds	r3, #1
 8002616:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800261a:	e7d7      	b.n	80025cc <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd02 	bl	800202c <_ZN8JoyStick8getValueEv>
 8002628:	4603      	mov	r3, r0
 800262a:	2b02      	cmp	r3, #2
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d079      	beq.n	800272c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800263e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d850      	bhi.n	80026e8 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002646:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002650:	4413      	add	r3, r2
 8002652:	3b40      	subs	r3, #64	; 0x40
 8002654:	ed93 7a00 	vldr	s14, [r3]
 8002658:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	33b0      	adds	r3, #176	; 0xb0
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d50f      	bpl.n	8002692 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002672:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002676:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	32b0      	adds	r2, #176	; 0xb0
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	440a      	add	r2, r1
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800268a:	440b      	add	r3, r1
 800268c:	3b40      	subs	r3, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e024      	b.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002692:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800269c:	4413      	add	r3, r2
 800269e:	3b78      	subs	r3, #120	; 0x78
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	33b0      	adds	r3, #176	; 0xb0
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd0e      	ble.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80026be:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	32b0      	adds	r2, #176	; 0xb0
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	440a      	add	r2, r1
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026d6:	440b      	add	r3, r1
 80026d8:	3b78      	subs	r3, #120	; 0x78
 80026da:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026e0:	3301      	adds	r3, #1
 80026e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80026e6:	e7aa      	b.n	800263e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fe50 	bl	8005394 <_ZN12RotarySwitch8getValueEv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800270a:	2201      	movs	r2, #1
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fdab 	bl	800226c <_ZN3LED2LREaa>
 8002716:	e781      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fda1 	bl	800226c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800272a:	e777      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800272c:	2300      	movs	r3, #0
 800272e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002732:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002736:	2b0d      	cmp	r3, #13
 8002738:	d826      	bhi.n	8002788 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800273a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002744:	4413      	add	r3, r2
 8002746:	3b40      	subs	r3, #64	; 0x40
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002756:	4413      	add	r3, r2
 8002758:	3b78      	subs	r3, #120	; 0x78
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002766:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80027d4 <_ZN10LineSensor11calibrationEv+0x23c>
 800276a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3392      	adds	r3, #146	; 0x92
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800277c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002780:	3301      	adds	r3, #1
 8002782:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002786:	e7d4      	b.n	8002732 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002788:	2300      	movs	r3, #0
 800278a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800278e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002792:	2b0d      	cmp	r3, #13
 8002794:	d815      	bhi.n	80027c2 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002796:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800279a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027a4:	440a      	add	r2, r1
 80027a6:	3a78      	subs	r2, #120	; 0x78
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	33a0      	adds	r3, #160	; 0xa0
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3304      	adds	r3, #4
 80027b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027ba:	3301      	adds	r3, #1
 80027bc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027c0:	e7e5      	b.n	800278e <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80027c2:	bf00      	nop
 80027c4:	3780      	adds	r7, #128	; 0x80
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08018a84 	.word	0x08018a84
 80027d0:	08018a90 	.word	0x08018a90
 80027d4:	447a0000 	.word	0x447a0000

080027d8 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80027e4:	2303      	movs	r3, #3
 80027e6:	81bb      	strh	r3, [r7, #12]
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d814      	bhi.n	8002818 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80027ee:	89bb      	ldrh	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	33b0      	adds	r3, #176	; 0xb0
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800286c <_ZN10LineSensor13emergencyStopEv+0x94>
 8002800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	db02      	blt.n	8002810 <_ZN10LineSensor13emergencyStopEv+0x38>
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	3301      	adds	r3, #1
 800280e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002810:	89bb      	ldrh	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	81bb      	strh	r3, [r7, #12]
 8002816:	e7e7      	b.n	80027e8 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d906      	bls.n	800282c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e002      	b.n	8002832 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b63      	cmp	r3, #99	; 0x63
 8002838:	d903      	bls.n	8002842 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e002      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002850:	4293      	cmp	r3, r2
 8002852:	d903      	bls.n	800285c <_ZN10LineSensor13emergencyStopEv+0x84>
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002856:	f242 7210 	movw	r2, #10000	; 0x2710
 800285a:	801a      	strh	r2, [r3, #0]

	return flag;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800285e:	781b      	ldrb	r3, [r3, #0]

}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	44098000 	.word	0x44098000
 8002870:	20000200 	.word	0x20000200
 8002874:	20000202 	.word	0x20000202

08002878 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eef0 7ae7 	vabs.f32	s15, s15
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002916:	330c      	adds	r3, #12
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002924:	3350      	adds	r3, #80	; 0x50
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002930:	3352      	adds	r3, #82	; 0x52
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800293c:	3354      	adds	r3, #84	; 0x54
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002948:	3318      	adds	r3, #24
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002954:	331c      	adds	r3, #28
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002960:	331e      	adds	r3, #30
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296c:	3320      	adds	r3, #32
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002978:	3322      	adds	r3, #34	; 0x22
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002984:	3323      	adds	r3, #35	; 0x23
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800299c:	3328      	adds	r3, #40	; 0x28
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029aa:	332c      	adds	r3, #44	; 0x2c
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c6:	3334      	adds	r3, #52	; 0x34
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e0:	333a      	adds	r3, #58	; 0x3a
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029ec:	333c      	adds	r3, #60	; 0x3c
 80029ee:	2200      	movs	r2, #0
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f8:	333e      	adds	r3, #62	; 0x3e
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a20:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a26:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a34:	2300      	movs	r3, #0
 8002a36:	83fb      	strh	r3, [r7, #30]
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d80d      	bhi.n	8002a5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c6>
		velocity_table_[i] = 0;
 8002a42:	8bfb      	ldrh	r3, [r7, #30]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	83fb      	strh	r3, [r7, #30]
 8002a5c:	e7ec      	b.n	8002a38 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	83bb      	strh	r3, [r7, #28]
 8002a62:	8bbb      	ldrh	r3, [r7, #28]
 8002a64:	2b63      	cmp	r3, #99	; 0x63
 8002a66:	d80d      	bhi.n	8002a84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ec>
		crossline_distance_[i] = 0;
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002a70:	3316      	adds	r3, #22
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	83bb      	strh	r3, [r7, #28]
 8002a82:	e7ee      	b.n	8002a62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ca>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	837b      	strh	r3, [r7, #26]
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	2b63      	cmp	r3, #99	; 0x63
 8002a8c:	d80d      	bhi.n	8002aaa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x212>
		crossline_distance2_[i] = 0;
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a96:	333a      	adds	r3, #58	; 0x3a
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	837b      	strh	r3, [r7, #26]
 8002aa8:	e7ee      	b.n	8002a88 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aaa:	2300      	movs	r3, #0
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ab4:	d20d      	bcs.n	8002ad2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23a>
		sideline_distance_[i] = 0;
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002abe:	331e      	adds	r3, #30
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aca:	8b3b      	ldrh	r3, [r7, #24]
 8002acc:	3301      	adds	r3, #1
 8002ace:	833b      	strh	r3, [r7, #24]
 8002ad0:	e7ed      	b.n	8002aae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x216>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	82fb      	strh	r3, [r7, #22]
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002adc:	d20d      	bcs.n	8002afa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x262>
		sideline_distance2_[i] = 0;
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002ae6:	3312      	adds	r3, #18
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	3301      	adds	r3, #1
 8002af6:	82fb      	strh	r3, [r7, #22]
 8002af8:	e7ed      	b.n	8002ad6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23e>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002b40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	ee07 3a90 	vmov	s15, r3

}
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffc5 	bl	8002b08 <_ZN9LineTrace9calcErrorEv>
 8002b7e:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ba2:	3354      	adds	r3, #84	; 0x54
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d14c      	bne.n	8002c46 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002bb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	ee17 0a90 	vmov	r0, s15
 8002bda:	f7fd fccd 	bl	8000578 <__aeabi_f2d>
 8002bde:	a350      	add	r3, pc, #320	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe4a 	bl	800087c <__aeabi_ddiv>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4618      	mov	r0, r3
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f7fe f812 	bl	8000c18 <__aeabi_d2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcbb 	bl	8000578 <__aeabi_f2d>
 8002c02:	4604      	mov	r4, r0
 8002c04:	460d      	mov	r5, r1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcae 	bl	8000578 <__aeabi_f2d>
 8002c1c:	a340      	add	r3, pc, #256	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fd01 	bl	8000628 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fb45 	bl	80002bc <__adddf3>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	4618      	mov	r0, r3
 8002c38:	4621      	mov	r1, r4
 8002c3a:	f7fd ffed 	bl	8000c18 <__aeabi_d2f>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e04b      	b.n	8002cde <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	ee17 0a90 	vmov	r0, s15
 8002c74:	f7fd fc80 	bl	8000578 <__aeabi_f2d>
 8002c78:	a329      	add	r3, pc, #164	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fdfd 	bl	800087c <__aeabi_ddiv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	4618      	mov	r0, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	f7fd ffc5 	bl	8000c18 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc6e 	bl	8000578 <__aeabi_f2d>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	460d      	mov	r5, r1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	a31a      	add	r3, pc, #104	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fcb4 	bl	8000628 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd faf8 	bl	80002bc <__adddf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	f7fd ffa0 	bl	8000c18 <__aeabi_d2f>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cdc:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d02:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f002 ff64 	bl	8005bd8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6013      	str	r3, [r2, #0]

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d24:	3f50624d 	.word	0x3f50624d
 8002d28:	20000214 	.word	0x20000214
 8002d2c:	20000210 	.word	0x20000210

08002d30 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fc95 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 f9e6 	bl	8005118 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 ffca 	bl	8004cea <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 f84b 	bl	8004e0e <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461c      	mov	r4, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fc45 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002da6:	eef0 7a40 	vmov.f32	s15, s0
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002db0:	3316      	adds	r3, #22
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dce:	3318      	adds	r3, #24
 8002dd0:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dd8:	3318      	adds	r3, #24
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b63      	cmp	r3, #99	; 0x63
 8002dde:	d905      	bls.n	8002dec <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002de6:	3318      	adds	r3, #24
 8002de8:	2263      	movs	r2, #99	; 0x63
 8002dea:	801a      	strh	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e06:	331a      	adds	r3, #26
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f7fe fc0f 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e12:	eef0 7a40 	vmov.f32	s15, s0
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e1c:	333a      	adds	r3, #58	; 0x3a
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e2c:	331a      	adds	r3, #26
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3a:	331a      	adds	r3, #26
 8002e3c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e44:	331a      	adds	r3, #26
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b63      	cmp	r3, #99	; 0x63
 8002e4a:	d905      	bls.n	8002e58 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e52:	331a      	adds	r3, #26
 8002e54:	2263      	movs	r2, #99	; 0x63
 8002e56:	801a      	strh	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e72:	331c      	adds	r3, #28
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461c      	mov	r4, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fbd9 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e88:	331e      	adds	r3, #30
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e98:	331c      	adds	r3, #28
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea6:	331c      	adds	r3, #28
 8002ea8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb8:	d306      	bcc.n	8002ec8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ec6:	801a      	strh	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ee2:	331e      	adds	r3, #30
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fe fba1 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002eee:	eef0 7a40 	vmov.f32	s15, s0
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002ef8:	3312      	adds	r3, #18
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f08:	331e      	adds	r3, #30
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f16:	331e      	adds	r3, #30
 8002f18:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f20:	331e      	adds	r3, #30
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f28:	d306      	bcc.n	8002f38 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f30:	331e      	adds	r3, #30
 8002f32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f36:	801a      	strh	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	ed2d 8b02 	vpush	{d8}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d046      	beq.n	8002fe4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f5c:	3354      	adds	r3, #84	; 0x54
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11c      	bne.n	8002fa0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69dc      	ldr	r4, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fb4f 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8002f74:	eeb0 8a40 	vmov.f32	s16, s0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 f8ba 	bl	80050f6 <_ZN8Odometry8getThetaEv>
 8002f82:	ec53 2b10 	vmov	r2, r3, d0
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fe45 	bl	8000c18 <__aeabi_d2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	ee00 3a90 	vmov	s1, r3
 8002f94:	eeb0 0a48 	vmov.f32	s0, s16
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 fd65 	bl	8004a68 <_ZN6Logger21storeDistanceAndThetaEff>
 8002f9e:	e01b      	b.n	8002fd8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69dc      	ldr	r4, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fb41 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002fae:	eeb0 8a40 	vmov.f32	s16, s0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 f89d 	bl	80050f6 <_ZN8Odometry8getThetaEv>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7fd fe28 	bl	8000c18 <__aeabi_d2f>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	ee00 3a90 	vmov	s1, r3
 8002fce:	eeb0 0a48 	vmov.f32	s0, s16
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f001 fd91 	bl	8004afa <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	ecbd 8b02 	vpop	{d8}
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20000204 	.word	0x20000204

08002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003002:	3318      	adds	r3, #24
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d85a      	bhi.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003010:	3318      	adds	r3, #24
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800301a:	3316      	adds	r3, #22
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fb01 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800302e:	eeb0 7a40 	vmov.f32	s14, s0
 8003032:	edd7 7a03 	vldr	s15, [r7, #12]
 8003036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	f7ff fc1b 	bl	8002878 <_ZSt3absf>
 8003042:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8003046:	edd7 7a02 	vldr	s15, [r7, #8]
 800304a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d826      	bhi.n	80030a6 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	2200      	movs	r2, #0
 8003062:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6959      	ldr	r1, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306e:	3318      	adds	r3, #24
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003078:	3316      	adds	r3, #22
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	4608      	mov	r0, r1
 8003088:	f7fe fae1 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003092:	3318      	adds	r3, #24
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a0:	3318      	adds	r3, #24
 80030a2:	801a      	strh	r2, [r3, #0]
			break;
 80030a4:	e00c      	b.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ac:	3318      	adds	r3, #24
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ba:	3318      	adds	r3, #24
 80030bc:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 80030be:	e79d      	b.n	8002ffc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c6:	3318      	adds	r3, #24
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b63      	cmp	r3, #99	; 0x63
 80030cc:	d905      	bls.n	80030da <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d4:	3318      	adds	r3, #24
 80030d6:	2263      	movs	r2, #99	; 0x63
 80030d8:	801a      	strh	r2, [r3, #0]

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	437a0000 	.word	0x437a0000

080030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030f0:	2300      	movs	r3, #0
 80030f2:	82fb      	strh	r3, [r7, #22]
 80030f4:	8afb      	ldrh	r3, [r7, #22]
 80030f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030fa:	d23d      	bcs.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003104:	331e      	adds	r3, #30
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fa8c 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8003118:	eeb0 7a40 	vmov.f32	s14, s0
 800311c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	f7ff fba6 	bl	8002878 <_ZSt3absf>
 800312c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003130:	edd7 7a03 	vldr	s15, [r7, #12]
 8003134:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80031a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d816      	bhi.n	8003170 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	2200      	movs	r2, #0
 800314c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6959      	ldr	r1, [r3, #20]
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800315a:	331e      	adds	r3, #30
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	4608      	mov	r0, r1
 800316a:	f7fe fa70 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			break;
 800316e:	e003      	b.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	3301      	adds	r3, #1
 8003174:	82fb      	strh	r3, [r7, #22]
 8003176:	e7bd      	b.n	80030f4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800317e:	331c      	adds	r3, #28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003186:	d306      	bcc.n	8003196 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800318e:	331c      	adds	r3, #28
 8003190:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003194:	801a      	strh	r2, [r3, #0]

}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	43660000 	.word	0x43660000

080031a4 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b6:	3354      	adds	r3, #84	; 0x54
 80031b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d144      	bne.n	800324a <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d504      	bpl.n	80031dc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e084      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 80031dc:	edd7 7a00 	vldr	s15, [r7]
 80031e0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d503      	bpl.n	80031f6 <_ZN9LineTrace15radius2VelocityEf+0x52>
 80031ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e077      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80031f6:	edd7 7a00 	vldr	s15, [r7]
 80031fa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d503      	bpl.n	8003210 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e06a      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003210:	edd7 7a00 	vldr	s15, [r7]
 8003214:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d502      	bpl.n	8003228 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e05e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003228:	edd7 7a00 	vldr	s15, [r7]
 800322c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d502      	bpl.n	8003240 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e052      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e04d      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003250:	3354      	adds	r3, #84	; 0x54
 8003252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d143      	bne.n	80032e2 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 800325a:	edd7 7a00 	vldr	s15, [r7]
 800325e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d504      	bpl.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e037      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 8003276:	edd7 7a00 	vldr	s15, [r7]
 800327a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800327e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	d502      	bpl.n	800328e <_ZN9LineTrace15radius2VelocityEf+0xea>
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e02b      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800328e:	edd7 7a00 	vldr	s15, [r7]
 8003292:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d503      	bpl.n	80032a8 <_ZN9LineTrace15radius2VelocityEf+0x104>
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e01e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 80032a8:	edd7 7a00 	vldr	s15, [r7]
 80032ac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 80032b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d502      	bpl.n	80032c0 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e012      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80032c0:	edd7 7a00 	vldr	s15, [r7]
 80032c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	d502      	bpl.n	80032d8 <_ZN9LineTrace15radius2VelocityEf+0x134>
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e006      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e001      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <_ZN9LineTrace15radius2VelocityEf+0x178>)
 80032e4:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	ee07 3a90 	vmov	s15, r3
}
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	43c80000 	.word	0x43c80000
 8003300:	43fa0000 	.word	0x43fa0000
 8003304:	44228000 	.word	0x44228000
 8003308:	44bb8000 	.word	0x44bb8000
 800330c:	40200000 	.word	0x40200000
 8003310:	44fa0000 	.word	0x44fa0000
 8003314:	40400000 	.word	0x40400000
 8003318:	3fd9999a 	.word	0x3fd9999a
 800331c:	3fa66666 	.word	0x3fa66666

08003320 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	ed87 0a02 	vstr	s0, [r7, #8]
 800332c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800332e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003332:	83fb      	strh	r3, [r7, #30]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808d 	beq.w	8003456 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800333c:	8bfb      	ldrh	r3, [r7, #30]
 800333e:	3b01      	subs	r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003346:	3304      	adds	r3, #4
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003358:	3304      	adds	r3, #4
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800336a:	edd7 7a06 	vldr	s15, [r7, #24]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd6a      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	a335      	add	r3, pc, #212	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd f94b 	bl	8000628 <__aeabi_dmul>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4625      	mov	r5, r4
 8003398:	461c      	mov	r4, r3
 800339a:	69b8      	ldr	r0, [r7, #24]
 800339c:	f7fd f8ec 	bl	8000578 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd fa68 	bl	800087c <__aeabi_ddiv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	4618      	mov	r0, r3
 80033b2:	4621      	mov	r1, r4
 80033b4:	f7fd fc30 	bl	8000c18 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80033c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80033c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	dd37      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033e6:	3304      	adds	r3, #4
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8c2 	bl	8000578 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	edd7 7a02 	vldr	s15, [r7, #8]
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	ee17 0a90 	vmov	r0, s15
 8003410:	f7fd f8b2 	bl	8000578 <__aeabi_f2d>
 8003414:	a312      	add	r3, pc, #72	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f905 	bl	8000628 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff49 	bl	80002bc <__adddf3>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4619      	mov	r1, r3
 8003430:	4622      	mov	r2, r4
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	1e5c      	subs	r4, r3, #1
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	f7fd fbed 	bl	8000c18 <__aeabi_d2f>
 800343e:	4601      	mov	r1, r0
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003446:	3304      	adds	r3, #4
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	3b01      	subs	r3, #1
 8003452:	83fb      	strh	r3, [r7, #30]
 8003454:	e76e      	b.n	8003334 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	d2f1a9fc 	.word	0xd2f1a9fc
 8003464:	3f50624d 	.word	0x3f50624d

08003468 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	ed87 0a02 	vstr	s0, [r7, #8]
 8003474:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003476:	2300      	movs	r3, #0
 8003478:	83fb      	strh	r3, [r7, #30]
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003480:	4293      	cmp	r3, r2
 8003482:	f200 808d 	bhi.w	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	3301      	adds	r3, #1
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	ed93 7a00 	vldr	s14, [r3]
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034a2:	3304      	adds	r3, #4
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	dd6a      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f853 	bl	8000578 <__aeabi_f2d>
 80034d2:	a335      	add	r3, pc, #212	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f8a6 	bl	8000628 <__aeabi_dmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4625      	mov	r5, r4
 80034e2:	461c      	mov	r4, r3
 80034e4:	69b8      	ldr	r0, [r7, #24]
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fd f9c3 	bl	800087c <__aeabi_ddiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	4618      	mov	r0, r3
 80034fc:	4621      	mov	r1, r4
 80034fe:	f7fd fb8b 	bl	8000c18 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003506:	edd7 6a06 	vldr	s13, [r7, #24]
 800350a:	ed97 7a05 	vldr	s14, [r7, #20]
 800350e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003512:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003516:	ed97 7a04 	vldr	s14, [r7, #16]
 800351a:	edd7 7a02 	vldr	s15, [r7, #8]
 800351e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd37      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003530:	3304      	adds	r3, #4
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f81d 	bl	8000578 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	8bfb      	ldrh	r3, [r7, #30]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fd f80d 	bl	8000578 <__aeabi_f2d>
 800355e:	a312      	add	r3, pc, #72	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f860 	bl	8000628 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fea4 	bl	80002bc <__adddf3>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4619      	mov	r1, r3
 800357a:	4622      	mov	r2, r4
 800357c:	8bfb      	ldrh	r3, [r7, #30]
 800357e:	1c5c      	adds	r4, r3, #1
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	f7fd fb48 	bl	8000c18 <__aeabi_d2f>
 8003588:	4601      	mov	r1, r0
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003590:	3304      	adds	r3, #4
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	e76c      	b.n	800347a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}
 80035a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80035ac:	3f50624d 	.word	0x3f50624d

080035b0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f863 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c8:	3350      	adds	r3, #80	; 0x50
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d4:	3352      	adds	r3, #82	; 0x52
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035e0:	330c      	adds	r3, #12
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035fe:	3350      	adds	r3, #80	; 0x50
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800360a:	3352      	adds	r3, #82	; 0x52
 800360c:	2200      	movs	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003616:	330c      	adds	r3, #12
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003638:	3350      	adds	r3, #80	; 0x50
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05e      	beq.n	80036fe <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fff3 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003654:	330c      	adds	r3, #12
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	bfac      	ite	ge
 8003664:	2301      	movge	r3, #1
 8003666:	2300      	movlt	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003674:	330c      	adds	r3, #12
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003680:	3352      	adds	r3, #82	; 0x52
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800369c:	330c      	adds	r3, #12
 800369e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a8:	3352      	adds	r3, #82	; 0x52
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b6:	3352      	adds	r3, #82	; 0x52
 80036b8:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c0:	3352      	adds	r3, #82	; 0x52
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d2:	3352      	adds	r3, #82	; 0x52
 80036d4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036d8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e0:	3352      	adds	r3, #82	; 0x52
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036ea:	3304      	adds	r3, #4
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fae8 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd ff79 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8003720:	eeb0 7a40 	vmov.f32	s14, s0
 8003724:	edd7 7a00 	vldr	s15, [r7]
 8003728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003768:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800376c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003770:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003788:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003794:	4a49      	ldr	r2, [pc, #292]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800379a:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037a0:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d057      	beq.n	800385e <_ZN9LineTrace11isCrossLineEv+0x112>
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650){
 80037ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 80037b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d50f      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
 80037c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d506      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d060      	beq.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			flag = true;
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	4618      	mov	r0, r3
 8003806:	f001 feaf 	bl	8005568 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd ff57 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003826:	3354      	adds	r3, #84	; 0x54
 8003828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <_ZN9LineTrace11isCrossLineEv+0xf8>
				store_check_cnt_ = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003836:	333a      	adds	r3, #58	; 0x3a
 8003838:	2200      	movs	r2, #0
 800383a:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff faa3 	bl	8002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003842:	e035      	b.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			}
			else{
				store_check_cnt_ = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800384a:	333a      	adds	r3, #58	; 0x3a
 800384c:	2200      	movs	r2, #0
 800384e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fbcf 	bl	8002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff facc 	bl	8002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 800385c:	e028      	b.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800385e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003862:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x188>
 8003866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386e:	dd0f      	ble.n	8003890 <_ZN9LineTrace11isCrossLineEv+0x144>
 8003870:	edd7 7a02 	vldr	s15, [r7, #8]
 8003874:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x188>
 8003878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	dd06      	ble.n	8003890 <_ZN9LineTrace11isCrossLineEv+0x144>
			cnt++;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e002      	b.n	8003896 <_ZN9LineTrace11isCrossLineEv+0x14a>
		}
		else{
			cnt = 0;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003892:	2200      	movs	r2, #0
 8003894:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d908      	bls.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			flag = false;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000208 	.word	0x20000208
 80038c0:	2000020c 	.word	0x2000020c
 80038c4:	2000021b 	.word	0x2000021b
 80038c8:	44228000 	.word	0x44228000
 80038cc:	20000218 	.word	0x20000218
 80038d0:	2000021a 	.word	0x2000021a
 80038d4:	43fa0000 	.word	0x43fa0000

080038d8 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fe92 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 80038ee:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fbfd 	bl	80050f6 <_ZN8Odometry8getThetaEv>
 80038fc:	ec54 3b10 	vmov	r3, r4, d0
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd f988 	bl	8000c18 <__aeabi_d2f>
 8003908:	4603      	mov	r3, r0
 800390a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800390c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003910:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d101      	bne.n	800391e <_ZN9LineTrace8isStableEv+0x46>
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <_ZN9LineTrace8isStableEv+0xd0>)
 800391c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800391e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003922:	edd7 7a04 	vldr	s15, [r7, #16]
 8003926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800392a:	eeb0 0a66 	vmov.f32	s0, s13
 800392e:	f7fe ffa3 	bl	8002878 <_ZSt3absf>
 8003932:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003936:	edd7 7a03 	vldr	s15, [r7, #12]
 800393a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039ac <_ZN9LineTrace8isStableEv+0xd4>
 800393e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	db01      	blt.n	800394c <_ZN9LineTrace8isStableEv+0x74>
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <_ZN9LineTrace8isStableEv+0xd8>)
 800394a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 800396c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003970:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b8 <_ZN9LineTrace8isStableEv+0xe0>
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	db06      	blt.n	800398c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	2b18      	cmp	r3, #24
 8003998:	d901      	bls.n	800399e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	3727c5ac 	.word	0x3727c5ac
 80039ac:	459c4000 	.word	0x459c4000
 80039b0:	459c4000 	.word	0x459c4000
 80039b4:	2000021c 	.word	0x2000021c
 80039b8:	44fa0000 	.word	0x44fa0000

080039bc <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b092      	sub	sp, #72	; 0x48
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c8:	2201      	movs	r2, #1
 80039ca:	4963      	ldr	r1, [pc, #396]	; (8003b58 <_ZN9LineTrace4initEv+0x19c>)
 80039cc:	4863      	ldr	r0, [pc, #396]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039ce:	f7fd ff7d 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d6:	2201      	movs	r2, #1
 80039d8:	4961      	ldr	r1, [pc, #388]	; (8003b60 <_ZN9LineTrace4initEv+0x1a4>)
 80039da:	4860      	ldr	r0, [pc, #384]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039dc:	f7fd ff76 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039e4:	2201      	movs	r2, #1
 80039e6:	495f      	ldr	r1, [pc, #380]	; (8003b64 <_ZN9LineTrace4initEv+0x1a8>)
 80039e8:	485c      	ldr	r0, [pc, #368]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039ea:	f7fd ff6f 	bl	80018cc <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039f6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039fa:	eeb0 1a66 	vmov.f32	s2, s13
 80039fe:	eef0 0a47 	vmov.f32	s1, s14
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8c6 	bl	8003b98 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a10:	2201      	movs	r2, #1
 8003a12:	4955      	ldr	r1, [pc, #340]	; (8003b68 <_ZN9LineTrace4initEv+0x1ac>)
 8003a14:	4851      	ldr	r0, [pc, #324]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a16:	f7fd ff59 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4952      	ldr	r1, [pc, #328]	; (8003b6c <_ZN9LineTrace4initEv+0x1b0>)
 8003a22:	484e      	ldr	r0, [pc, #312]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a24:	f7fd ff52 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4950      	ldr	r1, [pc, #320]	; (8003b70 <_ZN9LineTrace4initEv+0x1b4>)
 8003a30:	484a      	ldr	r0, [pc, #296]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a32:	f7fd ff4b 	bl	80018cc <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a36:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a3e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a42:	eeb0 1a66 	vmov.f32	s2, s13
 8003a46:	eef0 0a47 	vmov.f32	s1, s14
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8e8 	bl	8003c24 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4946      	ldr	r1, [pc, #280]	; (8003b74 <_ZN9LineTrace4initEv+0x1b8>)
 8003a5c:	483f      	ldr	r0, [pc, #252]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a5e:	f7fd ff35 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a66:	2201      	movs	r2, #1
 8003a68:	4943      	ldr	r1, [pc, #268]	; (8003b78 <_ZN9LineTrace4initEv+0x1bc>)
 8003a6a:	483c      	ldr	r0, [pc, #240]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a6c:	f7fd ff2e 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a74:	2201      	movs	r2, #1
 8003a76:	4941      	ldr	r1, [pc, #260]	; (8003b7c <_ZN9LineTrace4initEv+0x1c0>)
 8003a78:	4838      	ldr	r0, [pc, #224]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a7a:	f7fd ff27 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	2201      	movs	r2, #1
 8003a84:	493e      	ldr	r1, [pc, #248]	; (8003b80 <_ZN9LineTrace4initEv+0x1c4>)
 8003a86:	4835      	ldr	r0, [pc, #212]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a88:	f7fd ff20 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	2201      	movs	r2, #1
 8003a92:	493c      	ldr	r1, [pc, #240]	; (8003b84 <_ZN9LineTrace4initEv+0x1c8>)
 8003a94:	4831      	ldr	r0, [pc, #196]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a96:	f7fd ff19 	bl	80018cc <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f913 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003aa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aac:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f91c 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ab6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aba:	eeb0 0a67 	vmov.f32	s0, s15
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f925 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ac4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f92e 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003ad2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f937 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4928      	ldr	r1, [pc, #160]	; (8003b88 <_ZN9LineTrace4initEv+0x1cc>)
 8003ae8:	481c      	ldr	r0, [pc, #112]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003aea:	f7fd feef 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	2201      	movs	r2, #1
 8003af4:	4925      	ldr	r1, [pc, #148]	; (8003b8c <_ZN9LineTrace4initEv+0x1d0>)
 8003af6:	4819      	ldr	r0, [pc, #100]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003af8:	f7fd fee8 	bl	80018cc <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b00:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b04:	eef0 0a47 	vmov.f32	s1, s14
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f97e 	bl	8003e0e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	2201      	movs	r2, #1
 8003b24:	491a      	ldr	r1, [pc, #104]	; (8003b90 <_ZN9LineTrace4initEv+0x1d4>)
 8003b26:	480d      	ldr	r0, [pc, #52]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003b28:	f7fd fed0 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	2201      	movs	r2, #1
 8003b32:	4918      	ldr	r1, [pc, #96]	; (8003b94 <_ZN9LineTrace4initEv+0x1d8>)
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003b36:	f7fd fec9 	bl	80018cc <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b42:	eef0 0a47 	vmov.f32	s1, s14
 8003b46:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f979 	bl	8003e42 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b50:	bf00      	nop
 8003b52:	3748      	adds	r7, #72	; 0x48
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08018ad0 	.word	0x08018ad0
 8003b5c:	08018ad8 	.word	0x08018ad8
 8003b60:	08018ae0 	.word	0x08018ae0
 8003b64:	08018ae8 	.word	0x08018ae8
 8003b68:	08018af0 	.word	0x08018af0
 8003b6c:	08018afc 	.word	0x08018afc
 8003b70:	08018b08 	.word	0x08018b08
 8003b74:	08018b14 	.word	0x08018b14
 8003b78:	08018b20 	.word	0x08018b20
 8003b7c:	08018b2c 	.word	0x08018b2c
 8003b80:	08018b38 	.word	0x08018b38
 8003b84:	08018b44 	.word	0x08018b44
 8003b88:	08018b50 	.word	0x08018b50
 8003b8c:	08018b58 	.word	0x08018b58
 8003b90:	08018b60 	.word	0x08018b60
 8003b94:	08018b6c 	.word	0x08018b6c

08003b98 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ba8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	ee07 3a90 	vmov	s15, r3
}
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	ee07 3a90 	vmov	s15, r3
}
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	ee07 3a90 	vmov	s15, r3
}
 8003c16:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c30:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c34:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	ee07 3a90 	vmov	s15, r3
}
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	ee07 3a90 	vmov	s15, r3
}
 8003c84:	eeb0 0a67 	vmov.f32	s0, s15
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	ee07 3a90 	vmov	s15, r3
}
 8003ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d7c:	ee07 3a90 	vmov	s15, r3
}
 8003d80:	eeb0 0a67 	vmov.f32	s0, s15
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d9c:	ee07 3a90 	vmov	s15, r3
}
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dbc:	ee07 3a90 	vmov	s15, r3
}
 8003dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ddc:	ee07 3a90 	vmov	s15, r3
}
 8003de0:	eeb0 0a67 	vmov.f32	s0, s15
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003dfc:	ee07 3a90 	vmov	s15, r3
}
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e24:	3328      	adds	r3, #40	; 0x28
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e30:	332c      	adds	r3, #44	; 0x2c
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e4e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e58:	3330      	adds	r3, #48	; 0x30
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e64:	3334      	adds	r3, #52	; 0x34
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e84:	3328      	adds	r3, #40	; 0x28
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	ee07 3a90 	vmov	s15, r3
}
 8003e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ea8:	3334      	adds	r3, #52	; 0x34
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	ee07 3a90 	vmov	s15, r3
}
 8003eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ecc:	3330      	adds	r3, #48	; 0x30
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	ee07 3a90 	vmov	s15, r3
}
 8003ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ef0:	332c      	adds	r3, #44	; 0x2c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	ee07 3a90 	vmov	s15, r3
}
 8003ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8140 	beq.w	800419c <_ZN9LineTrace4flipEv+0x294>
		// ---- line following processing -----//
		pidTrace();
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fe fe27 	bl	8002b70 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fb81 	bl	800362a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003f28:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fbea 	bl	8003706 <_ZN9LineTrace16isTargetDistanceEf>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d040      	beq.n	8003fba <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f801 	bl	8002f40 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69dc      	ldr	r4, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd ff12 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 8003f4c:	eef0 7a40 	vmov.f32	s15, s0
 8003f50:	eeb0 0a67 	vmov.f32	s0, s15
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fd0b 	bl	8004970 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003f64:	eeb0 0a67 	vmov.f32	s0, s15
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fd3e 	bl	80049ea <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fcb2 	bl	80038d8 <_ZN9LineTrace8isStableEv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x8c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 faca 	bl	8005518 <_ZN10SideSensor10getStatusLEv>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x8c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <_ZN9LineTrace4flipEv+0x8e>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa0:	3323      	adds	r3, #35	; 0x23
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fb5e 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f8af 	bl	8005118 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fc0:	3323      	adds	r3, #35	; 0x23
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xd4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 faa3 	bl	8005518 <_ZN10SideSensor10getStatusLEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xd4>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <_ZN9LineTrace4flipEv+0xd6>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d029      	beq.n	8004036 <_ZN9LineTrace4flipEv+0x12e>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fe8:	3354      	adds	r3, #84	; 0x54
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <_ZN9LineTrace4flipEv+0xfe>
				store_check_cnt_ = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ff8:	333a      	adds	r3, #58	; 0x3a
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe ff2e 	bl	8002e60 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004004:	e00b      	b.n	800401e <_ZN9LineTrace4flipEv+0x116>
			}
			else{
				store_check_cnt_ = 0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800400c:	333a      	adds	r3, #58	; 0x3a
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f868 	bl	80030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe ff59 	bl	8002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004024:	3323      	adds	r3, #35	; 0x23
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004030:	3324      	adds	r3, #36	; 0x24
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fb88 	bl	800374c <_ZN9LineTrace11isCrossLineEv>
			//encoder_->clearCrossLineIgnoreDistance();//moved to isCrossLine function
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 100){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 faab 	bl	800559c <_ZN10SideSensor13getIgnoreFlagEv>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <_ZN9LineTrace4flipEv+0x164>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fb27 	bl	80016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004056:	eeb0 7a40 	vmov.f32	s14, s0
 800405a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80041a4 <_ZN9LineTrace4flipEv+0x29c>
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	db01      	blt.n	800406c <_ZN9LineTrace4flipEv+0x164>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <_ZN9LineTrace4flipEv+0x166>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <_ZN9LineTrace4flipEv+0x174>
			side_sensor_->disableIgnore();
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fa83 	bl	8005582 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fba9 	bl	80027d8 <_ZN10LineSensor13emergencyStopEv>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <_ZN9LineTrace4flipEv+0x1a0>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	eddf 0a45 	vldr	s1, [pc, #276]	; 80041a8 <_ZN9LineTrace4flipEv+0x2a0>
 8004094:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80041a8 <_ZN9LineTrace4flipEv+0x2a0>
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fd9d 	bl	8005bd8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f96e 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ae:	3338      	adds	r3, #56	; 0x38
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d906      	bls.n	80040e0 <_ZN9LineTrace4flipEv+0x1d8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d8:	3338      	adds	r3, #56	; 0x38
 80040da:	f242 7210 	movw	r2, #10000	; 0x2710
 80040de:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80040ee:	d805      	bhi.n	80040fc <_ZN9LineTrace4flipEv+0x1f4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	330c      	adds	r3, #12
 80040f4:	2152      	movs	r1, #82	; 0x52
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fffc 	bl	80020f4 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004102:	333a      	adds	r3, #58	; 0x3a
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004110:	333a      	adds	r3, #58	; 0x3a
 8004112:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800411a:	333a      	adds	r3, #58	; 0x3a
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004122:	4293      	cmp	r3, r2
 8004124:	d906      	bls.n	8004134 <_ZN9LineTrace4flipEv+0x22c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800412c:	333a      	adds	r3, #58	; 0x3a
 800412e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004132:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800413a:	333a      	adds	r3, #58	; 0x3a
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	2bc8      	cmp	r3, #200	; 0xc8
 8004140:	d808      	bhi.n	8004154 <_ZN9LineTrace4flipEv+0x24c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	330c      	adds	r3, #12
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe f88d 	bl	800226c <_ZN3LED2LREaa>
 8004152:	e007      	b.n	8004164 <_ZN9LineTrace4flipEv+0x25c>
		else led_.LR(0, -1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	330c      	adds	r3, #12
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe f884 	bl	800226c <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800416a:	333c      	adds	r3, #60	; 0x3c
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004178:	333c      	adds	r3, #60	; 0x3c
 800417a:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004182:	333c      	adds	r3, #60	; 0x3c
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f242 720f 	movw	r2, #9999	; 0x270f
 800418a:	4293      	cmp	r3, r2
 800418c:	d906      	bls.n	800419c <_ZN9LineTrace4flipEv+0x294>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004194:	333c      	adds	r3, #60	; 0x3c
 8004196:	f242 7210 	movw	r2, #10000	; 0x2710
 800419a:	801a      	strh	r2, [r3, #0]

	}
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd90      	pop	{r4, r7, pc}
 80041a4:	42c80000 	.word	0x42c80000
 80041a8:	00000000 	.word	0x00000000

080041ac <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041be:	3354      	adds	r3, #84	; 0x54
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	801a      	strh	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fd4c 	bl	8005c8a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 f9a6 	bl	8005548 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004202:	3318      	adds	r3, #24
 8004204:	2200      	movs	r2, #0
 8004206:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800420e:	331c      	adds	r3, #28
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800421a:	331e      	adds	r3, #30
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004226:	3320      	adds	r3, #32
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004240:	2300      	movs	r3, #0
 8004242:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 8004244:	2300      	movs	r3, #0
 8004246:	733b      	strb	r3, [r7, #12]
	start();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ffc1 	bl	80041d0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800424e:	7b7b      	ldrb	r3, [r7, #13]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 80c6 	bne.w	80043e2 <_ZN9LineTrace7runningEv+0x1ae>
		switch(stage){
 8004256:	89fb      	ldrh	r3, [r7, #14]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d030      	beq.n	80042be <_ZN9LineTrace7runningEv+0x8a>
 800425c:	2b0a      	cmp	r3, #10
 800425e:	d03d      	beq.n	80042dc <_ZN9LineTrace7runningEv+0xa8>
 8004260:	2b00      	cmp	r3, #0
 8004262:	f040 80bd 	bne.w	80043e0 <_ZN9LineTrace7runningEv+0x1ac>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f960 	bl	8005530 <_ZN10SideSensor10getStatusREv>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80af 	beq.w	80043d6 <_ZN9LineTrace7runningEv+0x1a2>
				loggerStart();
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7fe fd59 	bl	8002d30 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004284:	3354      	adds	r3, #84	; 0x54
 8004286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <_ZN9LineTrace7runningEv+0x60>
					startVelocityPlay();
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff f98e 	bl	80035b0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fd fa12 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd f9f0 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	330c      	adds	r3, #12
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd ffda 	bl	800226c <_ZN3LED2LREaa>
				stage = 5;
 80042b8:	2305      	movs	r3, #5
 80042ba:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042bc:	e08b      	b.n	80043d6 <_ZN9LineTrace7runningEv+0x1a2>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f934 	bl	8005530 <_ZN10SideSensor10getStatusREv>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8082 	beq.w	80043da <_ZN9LineTrace7runningEv+0x1a6>
 80042d6:	230a      	movs	r3, #10
 80042d8:	81fb      	strh	r3, [r7, #14]

			break;
 80042da:	e07e      	b.n	80043da <_ZN9LineTrace7runningEv+0x1a6>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f919 	bl	8005518 <_ZN10SideSensor10getStatusLEv>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <_ZN9LineTrace7runningEv+0xd2>
				goal_judge_flag = false;
 80042ec:	2300      	movs	r3, #0
 80042ee:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fa01 	bl	80016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	330c      	adds	r3, #12
 80042fe:	2142      	movs	r1, #66	; 0x42
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fef7 	bl	80020f4 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 8004306:	7b3b      	ldrb	r3, [r7, #12]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <_ZN9LineTrace7runningEv+0x10e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4618      	mov	r0, r3
 8004318:	f001 f90a 	bl	8005530 <_ZN10SideSensor10getStatusREv>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00f      	beq.n	8004342 <_ZN9LineTrace7runningEv+0x10e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd f9d9 	bl	80016de <_ZN7Encoder20getGoalJudgeDistanceEv>
 800432c:	eeb0 7a40 	vmov.f32	s14, s0
 8004330:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	db01      	blt.n	8004342 <_ZN9LineTrace7runningEv+0x10e>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <_ZN9LineTrace7runningEv+0x110>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <_ZN9LineTrace7runningEv+0x13c>
				goal_judge_flag = true;
 8004348:	2301      	movs	r3, #1
 800434a:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd f9d3 	bl	80016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800435c:	333c      	adds	r3, #60	; 0x3c
 800435e:	2200      	movs	r2, #0
 8004360:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	330c      	adds	r3, #12
 8004366:	2159      	movs	r1, #89	; 0x59
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd fec3 	bl	80020f4 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 800436e:	e036      	b.n	80043de <_ZN9LineTrace7runningEv+0x1aa>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 8004370:	7b3b      	ldrb	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00f      	beq.n	8004396 <_ZN9LineTrace7runningEv+0x162>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd f9af 	bl	80016de <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004380:	eeb0 7a40 	vmov.f32	s14, s0
 8004384:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	db01      	blt.n	8004396 <_ZN9LineTrace7runningEv+0x162>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <_ZN9LineTrace7runningEv+0x164>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <_ZN9LineTrace7runningEv+0x1aa>
				led_.fullColor('M');
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	330c      	adds	r3, #12
 80043a0:	214d      	movs	r1, #77	; 0x4d
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fea6 	bl	80020f4 <_ZN3LED9fullColorEc>
				loggerStop();
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fe fcdc 	bl	8002d66 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff f91e 	bl	80035f0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043b4:	2064      	movs	r0, #100	; 0x64
 80043b6:	f005 fc27 	bl	8009c08 <HAL_Delay>
				setTargetVelocity(0);
 80043ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80043f0 <_ZN9LineTrace7runningEv+0x1bc>
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fc85 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043c8:	f005 fc1e 	bl	8009c08 <HAL_Delay>
				goal_flag = true;
 80043cc:	2301      	movs	r3, #1
 80043ce:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 80043d0:	2300      	movs	r3, #0
 80043d2:	733b      	strb	r3, [r7, #12]
			break;
 80043d4:	e003      	b.n	80043de <_ZN9LineTrace7runningEv+0x1aa>
			break;
 80043d6:	bf00      	nop
 80043d8:	e739      	b.n	800424e <_ZN9LineTrace7runningEv+0x1a>
			break;
 80043da:	bf00      	nop
 80043dc:	e737      	b.n	800424e <_ZN9LineTrace7runningEv+0x1a>
			break;
 80043de:	bf00      	nop
	while(goal_flag == false){
 80043e0:	e735      	b.n	800424e <_ZN9LineTrace7runningEv+0x1a>
		}
	}

	stop();
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f806 	bl	80043f4 <_ZN9LineTrace4stopEv>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00000000 	.word	0x00000000

080043f4 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fc51 	bl	8005cb0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	330c      	adds	r3, #12
 8004412:	2201      	movs	r2, #1
 8004414:	f04f 31ff 	mov.w	r1, #4294967295
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd ff27 	bl	800226c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004424:	3354      	adds	r3, #84	; 0x54
 8004426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11e      	bne.n	800446c <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69d8      	ldr	r0, [r3, #28]
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <_ZN9LineTrace4stopEv+0xe0>)
 8004434:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <_ZN9LineTrace4stopEv+0xe4>)
 8004436:	4929      	ldr	r1, [pc, #164]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 8004438:	f000 fbef 	bl	8004c1a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004442:	3358      	adds	r3, #88	; 0x58
 8004444:	2200      	movs	r2, #0
 8004446:	9200      	str	r2, [sp, #0]
 8004448:	2264      	movs	r2, #100	; 0x64
 800444a:	4925      	ldr	r1, [pc, #148]	; (80044e0 <_ZN9LineTrace4stopEv+0xec>)
 800444c:	4823      	ldr	r0, [pc, #140]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 800444e:	f7fd f9d7 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004458:	3378      	adds	r3, #120	; 0x78
 800445a:	2200      	movs	r2, #0
 800445c:	9200      	str	r2, [sp, #0]
 800445e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004462:	4920      	ldr	r1, [pc, #128]	; (80044e4 <_ZN9LineTrace4stopEv+0xf0>)
 8004464:	481d      	ldr	r0, [pc, #116]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 8004466:	f7fd f9cb 	bl	8001800 <sd_write_array_float>
 800446a:	e01d      	b.n	80044a8 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69d8      	ldr	r0, [r3, #28]
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <_ZN9LineTrace4stopEv+0xf4>)
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <_ZN9LineTrace4stopEv+0xf8>)
 8004474:	4919      	ldr	r1, [pc, #100]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 8004476:	f000 fbf4 	bl	8004c62 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004480:	33e8      	adds	r3, #232	; 0xe8
 8004482:	2200      	movs	r2, #0
 8004484:	9200      	str	r2, [sp, #0]
 8004486:	2264      	movs	r2, #100	; 0x64
 8004488:	4919      	ldr	r1, [pc, #100]	; (80044f0 <_ZN9LineTrace4stopEv+0xfc>)
 800448a:	4814      	ldr	r0, [pc, #80]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 800448c:	f7fd f9b8 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004496:	3348      	adds	r3, #72	; 0x48
 8004498:	2200      	movs	r2, #0
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044a0:	4914      	ldr	r1, [pc, #80]	; (80044f4 <_ZN9LineTrace4stopEv+0x100>)
 80044a2:	480e      	ldr	r0, [pc, #56]	; (80044dc <_ZN9LineTrace4stopEv+0xe8>)
 80044a4:	f7fd f9ac 	bl	8001800 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	330c      	adds	r3, #12
 80044ac:	2200      	movs	r2, #0
 80044ae:	f04f 31ff 	mov.w	r1, #4294967295
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd feda 	bl	800226c <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fc68 	bl	8004d92 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fc0f 	bl	8004cea <_ZN6Logger10resetLogs2Ev>
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	08018b78 	.word	0x08018b78
 80044d8:	08018b84 	.word	0x08018b84
 80044dc:	08018b94 	.word	0x08018b94
 80044e0:	08018ba0 	.word	0x08018ba0
 80044e4:	08018bb0 	.word	0x08018bb0
 80044e8:	08018bbc 	.word	0x08018bbc
 80044ec:	08018bc8 	.word	0x08018bc8
 80044f0:	08018bd8 	.word	0x08018bd8
 80044f4:	08018be8 	.word	0x08018be8

080044f8 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fb41 	bl	8004b8c <_ZN6Logger23getDistanceArrayPointerEv>
 800450a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fb49 	bl	8004ba8 <_ZN6Logger20getThetaArrayPointerEv>
 8004516:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004518:	2300      	movs	r3, #0
 800451a:	837b      	strh	r3, [r7, #26]
 800451c:	8b7b      	ldrh	r3, [r7, #26]
 800451e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004522:	4293      	cmp	r3, r2
 8004524:	d84b      	bhi.n	80045be <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004526:	8b7b      	ldrh	r3, [r7, #26]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004532:	8b7b      	ldrh	r3, [r7, #26]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800453e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004542:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	d101      	bne.n	8004550 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800454e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004550:	ed97 7a02 	vldr	s14, [r7, #8]
 8004554:	edd7 7a07 	vldr	s15, [r7, #28]
 8004558:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800455c:	eeb0 0a66 	vmov.f32	s0, s13
 8004560:	f7fe f98a 	bl	8002878 <_ZSt3absf>
 8004564:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004568:	edd7 7a05 	vldr	s15, [r7, #20]
 800456c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004684 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	db01      	blt.n	800457e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800457a:	4b43      	ldr	r3, [pc, #268]	; (8004688 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 800457c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800457e:	8b7c      	ldrh	r4, [r7, #26]
 8004580:	ed97 0a05 	vldr	s0, [r7, #20]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fe fe0d 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 800458a:	eef0 7a40 	vmov.f32	s15, s0
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004594:	3304      	adds	r3, #4
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	441a      	add	r2, r3
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3304      	adds	r3, #4
 80045b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045b6:	8b7b      	ldrh	r3, [r7, #26]
 80045b8:	3301      	adds	r3, #1
 80045ba:	837b      	strh	r3, [r7, #26]
 80045bc:	e7ae      	b.n	800451c <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045c4:	3354      	adds	r3, #84	; 0x54
 80045c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d120      	bne.n	8004610 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045da:	3310      	adds	r3, #16
 80045dc:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045e4:	332c      	adds	r3, #44	; 0x2c
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	6939      	ldr	r1, [r7, #16]
 80045ec:	eeb0 0a67 	vmov.f32	s0, s15
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fe fe95 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045fc:	3328      	adds	r3, #40	; 0x28
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	6939      	ldr	r1, [r7, #16]
 8004604:	eeb0 0a67 	vmov.f32	s0, s15
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fe ff2d 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800460e:	e027      	b.n	8004660 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004616:	3354      	adds	r3, #84	; 0x54
 8004618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d11f      	bne.n	8004660 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800462c:	3310      	adds	r3, #16
 800462e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004636:	3334      	adds	r3, #52	; 0x34
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	6939      	ldr	r1, [r7, #16]
 800463e:	eeb0 0a67 	vmov.f32	s0, s15
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fe fe6c 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800464e:	3330      	adds	r3, #48	; 0x30
 8004650:	edd3 7a00 	vldr	s15, [r3]
 8004654:	6939      	ldr	r1, [r7, #16]
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe ff04 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004666:	3310      	adds	r3, #16
 8004668:	2200      	movs	r2, #0
 800466a:	9200      	str	r2, [sp, #0]
 800466c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004670:	4906      	ldr	r1, [pc, #24]	; (800468c <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004672:	4807      	ldr	r0, [pc, #28]	; (8004690 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004674:	f7fd f8c4 	bl	8001800 <sd_write_array_float>

}
 8004678:	bf00      	nop
 800467a:	3724      	adds	r7, #36	; 0x24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}
 8004680:	3727c5ac 	.word	0x3727c5ac
 8004684:	459c4000 	.word	0x459c4000
 8004688:	459c4000 	.word	0x459c4000
 800468c:	08018bf8 	.word	0x08018bf8
 8004690:	08018b94 	.word	0x08018b94

08004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b08b      	sub	sp, #44	; 0x2c
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69d8      	ldr	r0, [r3, #28]
 80046a0:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046a2:	4a6c      	ldr	r2, [pc, #432]	; (8004854 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046a4:	496c      	ldr	r1, [pc, #432]	; (8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046a6:	f000 fb00 	bl	8004caa <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046b0:	3358      	adds	r3, #88	; 0x58
 80046b2:	2264      	movs	r2, #100	; 0x64
 80046b4:	4969      	ldr	r1, [pc, #420]	; (800485c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046b6:	4868      	ldr	r0, [pc, #416]	; (8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046b8:	f7fd f908 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046c2:	3378      	adds	r3, #120	; 0x78
 80046c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046c8:	4965      	ldr	r1, [pc, #404]	; (8004860 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046ca:	4863      	ldr	r0, [pc, #396]	; (8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046cc:	f7fd f8fe 	bl	80018cc <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fa59 	bl	8004b8c <_ZN6Logger23getDistanceArrayPointerEv>
 80046da:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fa61 	bl	8004ba8 <_ZN6Logger20getThetaArrayPointerEv>
 80046e6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046e8:	2300      	movs	r3, #0
 80046ea:	837b      	strh	r3, [r7, #26]
 80046ec:	8b7b      	ldrh	r3, [r7, #26]
 80046ee:	f241 726f 	movw	r2, #5999	; 0x176f
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d84b      	bhi.n	800478e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80046f6:	8b7b      	ldrh	r3, [r7, #26]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004702:	8b7b      	ldrh	r3, [r7, #26]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800470e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004712:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471a:	d101      	bne.n	8004720 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 800471c:	4b51      	ldr	r3, [pc, #324]	; (8004864 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800471e:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004720:	ed97 7a02 	vldr	s14, [r7, #8]
 8004724:	edd7 7a07 	vldr	s15, [r7, #28]
 8004728:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800472c:	eeb0 0a66 	vmov.f32	s0, s13
 8004730:	f7fe f8a2 	bl	8002878 <_ZSt3absf>
 8004734:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004738:	edd7 7a05 	vldr	s15, [r7, #20]
 800473c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004868 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004748:	db01      	blt.n	800474e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800474a:	4b48      	ldr	r3, [pc, #288]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 800474c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800474e:	8b7c      	ldrh	r4, [r7, #26]
 8004750:	ed97 0a05 	vldr	s0, [r7, #20]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe fd25 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 800475a:	eef0 7a40 	vmov.f32	s15, s0
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004764:	3304      	adds	r3, #4
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800476e:	8b7b      	ldrh	r3, [r7, #26]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	441a      	add	r2, r3
 8004776:	8b7b      	ldrh	r3, [r7, #26]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	3332      	adds	r3, #50	; 0x32
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3304      	adds	r3, #4
 8004784:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004786:	8b7b      	ldrh	r3, [r7, #26]
 8004788:	3301      	adds	r3, #1
 800478a:	837b      	strh	r3, [r7, #26]
 800478c:	e7ae      	b.n	80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004794:	3354      	adds	r3, #84	; 0x54
 8004796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d120      	bne.n	80047e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047aa:	3310      	adds	r3, #16
 80047ac:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047b4:	332c      	adds	r3, #44	; 0x2c
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	6939      	ldr	r1, [r7, #16]
 80047bc:	eeb0 0a67 	vmov.f32	s0, s15
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fe fdad 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047cc:	3328      	adds	r3, #40	; 0x28
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	eeb0 0a67 	vmov.f32	s0, s15
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fe fe45 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047de:	e027      	b.n	8004830 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047e6:	3354      	adds	r3, #84	; 0x54
 80047e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d11f      	bne.n	8004830 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047fc:	3310      	adds	r3, #16
 80047fe:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004806:	3334      	adds	r3, #52	; 0x34
 8004808:	edd3 7a00 	vldr	s15, [r3]
 800480c:	6939      	ldr	r1, [r7, #16]
 800480e:	eeb0 0a67 	vmov.f32	s0, s15
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fe fd84 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800481e:	3330      	adds	r3, #48	; 0x30
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	6939      	ldr	r1, [r7, #16]
 8004826:	eeb0 0a67 	vmov.f32	s0, s15
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fe1c 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004836:	3310      	adds	r3, #16
 8004838:	2200      	movs	r2, #0
 800483a:	9200      	str	r2, [sp, #0]
 800483c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004840:	490b      	ldr	r1, [pc, #44]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004842:	4805      	ldr	r0, [pc, #20]	; (8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004844:	f7fc ffdc 	bl	8001800 <sd_write_array_float>

}
 8004848:	bf00      	nop
 800484a:	3724      	adds	r7, #36	; 0x24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd90      	pop	{r4, r7, pc}
 8004850:	08018b78 	.word	0x08018b78
 8004854:	08018b84 	.word	0x08018b84
 8004858:	08018b94 	.word	0x08018b94
 800485c:	08018ba0 	.word	0x08018ba0
 8004860:	08018bb0 	.word	0x08018bb0
 8004864:	3727c5ac 	.word	0x3727c5ac
 8004868:	459c4000 	.word	0x459c4000
 800486c:	459c4000 	.word	0x459c4000
 8004870:	08018bf8 	.word	0x08018bf8

08004874 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004882:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004890:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004894:	2200      	movs	r2, #0
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800489e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048a2:	2200      	movs	r2, #0
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048ac:	f203 2386 	addw	r3, r3, #646	; 0x286
 80048b0:	2200      	movs	r2, #0
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048be:	2200      	movs	r2, #0
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048c8:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80048cc:	2200      	movs	r2, #0
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80048ec:	f7fd f87a 	bl	80019e4 <sd_mount>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d016      	beq.n	800492e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004900:	f7fc fbce 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004904:	2100      	movs	r1, #0
 8004906:	2000      	movs	r0, #0
 8004908:	f7fc fbda 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800490c:	4815      	ldr	r0, [pc, #84]	; (8004964 <_ZN6Logger10sdCardInitEv+0x84>)
 800490e:	f7fc fc01 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004912:	2101      	movs	r1, #1
 8004914:	2000      	movs	r0, #0
 8004916:	f7fc fbd3 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800491a:	4813      	ldr	r0, [pc, #76]	; (8004968 <_ZN6Logger10sdCardInitEv+0x88>)
 800491c:	f7fc fbfa 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004924:	f005 f970 	bl	8009c08 <HAL_Delay>

	  ret = true;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e015      	b.n	800495a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800492e:	f7fc fbb7 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004932:	2100      	movs	r1, #0
 8004934:	2000      	movs	r0, #0
 8004936:	f7fc fbc3 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800493a:	480a      	ldr	r0, [pc, #40]	; (8004964 <_ZN6Logger10sdCardInitEv+0x84>)
 800493c:	f7fc fbea 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004940:	2101      	movs	r1, #1
 8004942:	2000      	movs	r0, #0
 8004944:	f7fc fbbc 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004948:	4808      	ldr	r0, [pc, #32]	; (800496c <_ZN6Logger10sdCardInitEv+0x8c>)
 800494a:	f7fc fbe3 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800494e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004952:	f005 f959 	bl	8009c08 <HAL_Delay>

	  ret = false;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	08018c08 	.word	0x08018c08
 8004968:	08018c14 	.word	0x08018c14
 800496c:	08018c1c 	.word	0x08018c1c

08004970 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004982:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d028      	beq.n	80049de <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004992:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049a8:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049b8:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049bc:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049c4:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80049ce:	d306      	bcc.n	80049de <_ZN6Logger8storeLogEf+0x6e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049d6:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049da:	2200      	movs	r2, #0
 80049dc:	801a      	strh	r2, [r3, #0]
	}
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02a      	beq.n	8004a5c <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a26:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a36:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a3a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a42:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a4c:	d306      	bcc.n	8004a5c <_ZN6Logger9storeLog2Ef+0x72>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a54:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a58:	2200      	movs	r2, #0
 8004a5a:	801a      	strh	r2, [r3, #0]
	}
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a74:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a7e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a9a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004aa6:	3350      	adds	r3, #80	; 0x50
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ab6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ac6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aca:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ad2:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f241 726f 	movw	r2, #5999	; 0x176f
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d906      	bls.n	8004aee <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ae6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
	//}
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b06:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b10:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b2c:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004b38:	3330      	adds	r3, #48	; 0x30
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b48:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b58:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b5c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b64:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d906      	bls.n	8004b80 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b78:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b9a:	3380      	adds	r3, #128	; 0x80
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004bb6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af02      	add	r7, sp, #8
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68b8      	ldr	r0, [r7, #8]
 8004be2:	f7fc fe0d 	bl	8001800 <sd_write_array_float>
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af02      	add	r7, sp, #8
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f7fc fdf7 	bl	8001800 <sd_write_array_float>
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c2e:	3380      	adds	r3, #128	; 0x80
 8004c30:	2200      	movs	r2, #0
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	f7fc fde0 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	68b8      	ldr	r0, [r7, #8]
 8004c56:	f7fc fdd3 	bl	8001800 <sd_write_array_float>
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	9200      	str	r2, [sp, #0]
 8004c7e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	68b8      	ldr	r0, [r7, #8]
 8004c86:	f7fc fdbb 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c90:	33c0      	adds	r3, #192	; 0xc0
 8004c92:	2200      	movs	r2, #0
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	68b8      	ldr	r0, [r7, #8]
 8004c9e:	f7fc fdaf 	bl	8001800 <sd_write_array_float>
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004cbe:	3380      	adds	r3, #128	; 0x80
 8004cc0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7fc fe00 	bl	80018cc <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004cd2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cd6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	68b8      	ldr	r0, [r7, #8]
 8004cde:	f7fc fdf5 	bl	80018cc <sd_read_array_float>
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004cea:	b480      	push	{r7}
 8004cec:	b08b      	sub	sp, #44	; 0x2c
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004cf8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d08:	3340      	adds	r3, #64	; 0x40
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d009      	beq.n	8004d28 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	3304      	adds	r3, #4
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	e7f1      	b.n	8004d0c <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d2e:	33c0      	adds	r3, #192	; 0xc0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d3c:	3340      	adds	r3, #64	; 0x40
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d009      	beq.n	8004d5c <_ZN6Logger10resetLogs2Ev+0x72>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	3304      	adds	r3, #4
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e7f1      	b.n	8004d40 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d62:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d66:	2200      	movs	r2, #0
 8004d68:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d70:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d74:	2200      	movs	r2, #0
 8004d76:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d7e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	372c      	adds	r7, #44	; 0x2c
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004da0:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004da4:	2200      	movs	r2, #0
 8004da6:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dae:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004db2:	2200      	movs	r2, #0
 8004db4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dbc:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	801a      	strh	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dde:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004de2:	2200      	movs	r2, #0
 8004de4:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004df0:	2200      	movs	r2, #0
 8004df2:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004e1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	805a      	strh	r2, [r3, #2]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e5c:	2108      	movs	r1, #8
 8004e5e:	4805      	ldr	r0, [pc, #20]	; (8004e74 <_ZN5Motor4initEv+0x20>)
 8004e60:	f00a f89a 	bl	800ef98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e64:	210c      	movs	r1, #12
 8004e66:	4803      	ldr	r0, [pc, #12]	; (8004e74 <_ZN5Motor4initEv+0x20>)
 8004e68:	f00a f896 	bl	800ef98 <HAL_TIM_PWM_Start>

}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	2004a5e0 	.word	0x2004a5e0

08004e78 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da0d      	bge.n	8004ea6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e90:	481f      	ldr	r0, [pc, #124]	; (8004f10 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e92:	f006 f94f 	bl	800b134 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	425b      	negs	r3, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	81fb      	strh	r3, [r7, #14]
 8004ea4:	e00a      	b.n	8004ebc <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eac:	4818      	ldr	r0, [pc, #96]	; (8004f10 <_ZN5Motor9motorCtrlEv+0x98>)
 8004eae:	f006 f941 	bl	800b134 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da0d      	bge.n	8004ee2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ecc:	4810      	ldr	r0, [pc, #64]	; (8004f10 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ece:	f006 f931 	bl	800b134 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	425b      	negs	r3, r3
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	81bb      	strh	r3, [r7, #12]
 8004ee0:	e00a      	b.n	8004ef8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ee8:	4809      	ldr	r0, [pc, #36]	; (8004f10 <_ZN5Motor9motorCtrlEv+0x98>)
 8004eea:	f006 f923 	bl	800b134 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004ef8:	89fa      	ldrh	r2, [r7, #14]
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004f00:	89ba      	ldrh	r2, [r7, #12]
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40020c00 	.word	0x40020c00
 8004f14:	2004a5e0 	.word	0x2004a5e0

08004f18 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6178      	str	r0, [r7, #20]
 8004f20:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f24:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f32:	f7fb fe09 	bl	8000b48 <__aeabi_dcmpgt>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <_ZN5Motor8setRatioEdd+0x30>
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	4c2b      	ldr	r4, [pc, #172]	; (8004ff0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f42:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004f46:	e00e      	b.n	8004f66 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f52:	f7fb fddb 	bl	8000b0c <__aeabi_dcmplt>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <_ZN5Motor8setRatioEdd+0x4e>
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	4c24      	ldr	r4, [pc, #144]	; (8004ff4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f62:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f70:	f7fb fdea 	bl	8000b48 <__aeabi_dcmpgt>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <_ZN5Motor8setRatioEdd+0x6e>
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	4c1c      	ldr	r4, [pc, #112]	; (8004ff0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f80:	e9c7 3400 	strd	r3, r4, [r7]
 8004f84:	e00e      	b.n	8004fa4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f90:	f7fb fdbc 	bl	8000b0c <__aeabi_dcmplt>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <_ZN5Motor8setRatioEdd+0x8c>
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	4c15      	ldr	r4, [pc, #84]	; (8004ff4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004fa0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fae:	f7fb fb3b 	bl	8000628 <__aeabi_dmul>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f7fb fde5 	bl	8000b88 <__aeabi_d2iz>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd0:	f7fb fb2a 	bl	8000628 <__aeabi_dmul>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	4618      	mov	r0, r3
 8004fda:	4621      	mov	r1, r4
 8004fdc:	f7fb fdd4 	bl	8000b88 <__aeabi_d2iz>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	805a      	strh	r2, [r3, #2]

}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	3ff00000 	.word	0x3ff00000
 8004ff4:	bff00000 	.word	0xbff00000
 8004ff8:	409c2000 	.word	0x409c2000

08004ffc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004ffc:	b490      	push	{r4, r7}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	f04f 0400 	mov.w	r4, #0
 8005022:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f04f 0400 	mov.w	r4, #0
 8005030:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	f04f 0400 	mov.w	r4, #0
 800503e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	f04f 0400 	mov.w	r4, #0
 800504c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bc90      	pop	{r4, r7}
 800506c:	4770      	bx	lr
	...

08005070 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc fe77 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 8005082:	ee10 3a10 	vmov	r3, s0
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa76 	bl	8000578 <__aeabi_f2d>
 800508c:	4603      	mov	r3, r0
 800508e:	460c      	mov	r4, r1
 8005090:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 8005094:	a310      	add	r3, pc, #64	; (adr r3, 80050d8 <_ZN8Odometry12calcPotitionEv+0x68>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800509e:	f7fb fac3 	bl	8000628 <__aeabi_dmul>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80050b8:	461a      	mov	r2, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	f7fb f8fe 	bl	80002bc <__adddf3>
 80050c0:	4603      	mov	r3, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	f3af 8000 	nop.w
 80050d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050dc:	3f50624d 	.word	0x3f50624d

080050e0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffc1 	bl	8005070 <_ZN8Odometry12calcPotitionEv>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050f6:	b490      	push	{r4, r7}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
	return theta_;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005104:	ec44 3b17 	vmov	d7, r3, r4
}
 8005108:	eeb0 0a47 	vmov.f32	s0, s14
 800510c:	eef0 0a67 	vmov.f32	s1, s15
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bc90      	pop	{r4, r7}
 8005116:	4770      	bx	lr

08005118 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005118:	b490      	push	{r4, r7}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bc90      	pop	{r4, r7}
 8005152:	4770      	bx	lr

08005154 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005154:	b490      	push	{r4, r7}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005192:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005196:	2200      	movs	r2, #0
 8005198:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800519a:	4a29      	ldr	r2, [pc, #164]	; (8005240 <_ZN13PathFollowingC1Ev+0xec>)
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	f04f 0400 	mov.w	r4, #0
 80051a4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <_ZN13PathFollowingC1Ev+0xec>)
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	f04f 0400 	mov.w	r4, #0
 80051b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80051b6:	4a22      	ldr	r2, [pc, #136]	; (8005240 <_ZN13PathFollowingC1Ev+0xec>)
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	f04f 0400 	mov.w	r4, #0
 80051dc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051ee:	4a15      	ldr	r2, [pc, #84]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051fc:	4a11      	ldr	r2, [pc, #68]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <_ZN13PathFollowingC1Ev+0xf0>)
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005218:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <_ZN13PathFollowingC1Ev+0xf4>)
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005226:	4a08      	ldr	r2, [pc, #32]	; (8005248 <_ZN13PathFollowingC1Ev+0xf4>)
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bc90      	pop	{r4, r7}
 800523e:	4770      	bx	lr
 8005240:	2004aae0 	.word	0x2004aae0
 8005244:	2004aa70 	.word	0x2004aa70
 8005248:	2004aad0 	.word	0x2004aad0

0800524c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005254:	f001 fce2 	bl	8006c1c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005258:	f107 0318 	add.w	r3, r7, #24
 800525c:	2201      	movs	r2, #1
 800525e:	4915      	ldr	r1, [pc, #84]	; (80052b4 <_ZN13PathFollowing4initEv+0x68>)
 8005260:	4815      	ldr	r0, [pc, #84]	; (80052b8 <_ZN13PathFollowing4initEv+0x6c>)
 8005262:	f7fc fb79 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005266:	f107 0310 	add.w	r3, r7, #16
 800526a:	2201      	movs	r2, #1
 800526c:	4913      	ldr	r1, [pc, #76]	; (80052bc <_ZN13PathFollowing4initEv+0x70>)
 800526e:	4812      	ldr	r0, [pc, #72]	; (80052b8 <_ZN13PathFollowing4initEv+0x6c>)
 8005270:	f7fc fb72 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	2201      	movs	r2, #1
 800527a:	4911      	ldr	r1, [pc, #68]	; (80052c0 <_ZN13PathFollowing4initEv+0x74>)
 800527c:	480e      	ldr	r0, [pc, #56]	; (80052b8 <_ZN13PathFollowing4initEv+0x6c>)
 800527e:	f7fc fb6b 	bl	8001958 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005282:	ed97 7b06 	vldr	d7, [r7, #24]
 8005286:	ed97 6b04 	vldr	d6, [r7, #16]
 800528a:	ed97 5b02 	vldr	d5, [r7, #8]
 800528e:	eeb0 2a45 	vmov.f32	s4, s10
 8005292:	eef0 2a65 	vmov.f32	s5, s11
 8005296:	eeb0 1a46 	vmov.f32	s2, s12
 800529a:	eef0 1a66 	vmov.f32	s3, s13
 800529e:	eeb0 0a47 	vmov.f32	s0, s14
 80052a2:	eef0 0a67 	vmov.f32	s1, s15
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f80c 	bl	80052c4 <_ZN13PathFollowing7setGainEddd>
}
 80052ac:	bf00      	nop
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	08018c24 	.word	0x08018c24
 80052b8:	08018c2c 	.word	0x08018c2c
 80052bc:	08018c34 	.word	0x08018c34
 80052c0:	08018c3c 	.word	0x08018c3c

080052c4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80052c4:	b490      	push	{r4, r7}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	61f8      	str	r0, [r7, #28]
 80052cc:	ed87 0b04 	vstr	d0, [r7, #16]
 80052d0:	ed87 1b02 	vstr	d1, [r7, #8]
 80052d4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052de:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052e2:	4a07      	ldr	r2, [pc, #28]	; (8005300 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052f2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052f6:	bf00      	nop
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc90      	pop	{r4, r7}
 80052fe:	4770      	bx	lr
 8005300:	2004aae0 	.word	0x2004aae0

08005304 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800530c:	2088      	movs	r0, #136	; 0x88
 800530e:	f7fc fe72 	bl	8001ff6 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005312:	2080      	movs	r0, #128	; 0x80
 8005314:	f7fc fe6f 	bl	8001ff6 <INA260_init>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005328:	2188      	movs	r1, #136	; 0x88
 800532a:	2002      	movs	r0, #2
 800532c:	f7fc fe00 	bl	8001f30 <INA260_read>
 8005330:	4603      	mov	r3, r0
 8005332:	4618      	mov	r0, r3
 8005334:	f7fb f90e 	bl	8000554 <__aeabi_i2d>
 8005338:	a30c      	add	r3, pc, #48	; (adr r3, 800536c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb f973 	bl	8000628 <__aeabi_dmul>
 8005342:	4603      	mov	r3, r0
 8005344:	460c      	mov	r4, r1
 8005346:	4618      	mov	r0, r3
 8005348:	4621      	mov	r1, r4
 800534a:	f7fb fc65 	bl	8000c18 <__aeabi_d2f>
 800534e:	4602      	mov	r2, r0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a03      	ldr	r2, [pc, #12]	; (8005368 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	f3af 8000 	nop.w
 8005368:	20000220 	.word	0x20000220
 800536c:	47ae147b 	.word	0x47ae147b
 8005370:	3f547ae1 	.word	0x3f547ae1

08005374 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	ee07 3a90 	vmov	s15, r3

}
 8005384:	eeb0 0a67 	vmov.f32	s0, s15
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80053a0:	2102      	movs	r1, #2
 80053a2:	4822      	ldr	r0, [pc, #136]	; (800542c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053a4:	f005 feae 	bl	800b104 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80053c0:	2108      	movs	r1, #8
 80053c2:	481a      	ldr	r0, [pc, #104]	; (800542c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053c4:	f005 fe9e 	bl	800b104 <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053e0:	2110      	movs	r1, #16
 80053e2:	4812      	ldr	r0, [pc, #72]	; (800542c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053e4:	f005 fe8e 	bl	800b104 <HAL_GPIO_ReadPin>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	480a      	ldr	r0, [pc, #40]	; (800542c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005404:	f005 fe7e 	bl	800b104 <HAL_GPIO_ReadPin>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005418:	89fb      	ldrh	r3, [r7, #14]
 800541a:	f043 0308 	orr.w	r3, r3, #8
 800541e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005420:	89fb      	ldrh	r3, [r7, #14]

}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40020c00 	.word	0x40020c00

08005430 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	709a      	strb	r2, [r3, #2]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	70da      	strb	r2, [r3, #3]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	809a      	strh	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	80da      	strh	r2, [r3, #6]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	721a      	strb	r2, [r3, #8]
{

}
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	if(ignore_flag_ == false){
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7a1b      	ldrb	r3, [r3, #8]
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d012      	beq.n	80054a8 <_ZN10SideSensor21updateStatusRightExtiEv+0x3c>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり
 8005482:	2104      	movs	r1, #4
 8005484:	480c      	ldr	r0, [pc, #48]	; (80054b8 <_ZN10SideSensor21updateStatusRightExtiEv+0x4c>)
 8005486:	f005 fe3d 	bl	800b104 <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b01      	cmp	r3, #1
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <_ZN10SideSensor21updateStatusRightExtiEv+0x36>
			status_R_ = false;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	70da      	strb	r2, [r3, #3]
 80054a0:	e002      	b.n	80054a8 <_ZN10SideSensor21updateStatusRightExtiEv+0x3c>
		}
		else{
			status_R_ = true;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	70da      	strb	r2, [r3, #3]
		}
	}
	mon_status_R = status_R_;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	78da      	ldrb	r2, [r3, #3]
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <_ZN10SideSensor21updateStatusRightExtiEv+0x50>)
 80054ae:	701a      	strb	r2, [r3, #0]
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	20000225 	.word	0x20000225

080054c0 <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	if(ignore_flag_ == false){
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7a1b      	ldrb	r3, [r3, #8]
 80054cc:	f083 0301 	eor.w	r3, r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d013      	beq.n	80054fe <_ZN10SideSensor20updateStatusLeftExtiEv+0x3e>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり
 80054d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054da:	480d      	ldr	r0, [pc, #52]	; (8005510 <_ZN10SideSensor20updateStatusLeftExtiEv+0x50>)
 80054dc:	f005 fe12 	bl	800b104 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <_ZN10SideSensor20updateStatusLeftExtiEv+0x38>
			status_L_ = false;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	709a      	strb	r2, [r3, #2]
 80054f6:	e002      	b.n	80054fe <_ZN10SideSensor20updateStatusLeftExtiEv+0x3e>
		}
		else{
			status_L_ = true;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	709a      	strb	r2, [r3, #2]
		}
	}
	mon_status_L = status_L_;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	789a      	ldrb	r2, [r3, #2]
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <_ZN10SideSensor20updateStatusLeftExtiEv+0x54>)
 8005504:	701a      	strb	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40020c00 	.word	0x40020c00
 8005514:	20000224 	.word	0x20000224

08005518 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	789b      	ldrb	r3, [r3, #2]
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	78db      	ldrb	r3, [r3, #3]
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	80da      	strh	r2, [r3, #6]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	721a      	strb	r2, [r3, #8]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	721a      	strb	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7a1b      	ldrb	r3, [r3, #8]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3308      	adds	r3, #8
 80055c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f00f f852 	bl	8014674 <memset>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d6:	811a      	strh	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055de:	815a      	strh	r2, [r3, #10]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e6:	819a      	strh	r2, [r3, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ee:	81da      	strh	r2, [r3, #14]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f6:	821a      	strh	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fe:	825a      	strh	r2, [r3, #18]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	829a      	strh	r2, [r3, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	82da      	strh	r2, [r3, #22]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	831a      	strh	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	835a      	strh	r2, [r3, #26]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	839a      	strh	r2, [r3, #28]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	83da      	strh	r2, [r3, #30]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	841a      	strh	r2, [r3, #32]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005630:	845a      	strh	r2, [r3, #34]	; 0x22
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	849a      	strh	r2, [r3, #36]	; 0x24
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800563e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800564c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005662:	861a      	strh	r2, [r3, #48]	; 0x30
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	865a      	strh	r2, [r3, #50]	; 0x32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005676:	86da      	strh	r2, [r3, #54]	; 0x36
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005702:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005774:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005828:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005832:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005846:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005858:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005894:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058da:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fe:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005910:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	615a      	str	r2, [r3, #20]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	619a      	str	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	621a      	str	r2, [r3, #32]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

}
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	0000      	movs	r0, r0
 80059dc:	0000      	movs	r0, r0
	...

080059e0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	f107 020c 	add.w	r2, r7, #12
 80059f0:	f107 0110 	add.w	r1, r7, #16
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fb fde9 	bl	80015cc <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80059fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80059fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a0e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7fa fdb0 	bl	8000578 <__aeabi_f2d>
 8005a18:	a30e      	add	r3, pc, #56	; (adr r3, 8005a54 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fe03 	bl	8000628 <__aeabi_dmul>
 8005a22:	4603      	mov	r3, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	4618      	mov	r0, r3
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7fb f8f5 	bl	8000c18 <__aeabi_d2f>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005a3a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	ee07 3a90 	vmov	s15, r3
}
 8005a44:	eeb0 0a67 	vmov.f32	s0, s15
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000228 	.word	0x20000228
 8005a54:	1ab1d998 	.word	0x1ab1d998
 8005a58:	3f7830b5 	.word	0x3f7830b5
 8005a5c:	00000000 	.word	0x00000000

08005a60 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	ed93 7a00 	vldr	s14, [r3]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a78:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005a86:	4b48      	ldr	r3, [pc, #288]	; (8005ba8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fd63 	bl	8000578 <__aeabi_f2d>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	ed93 7a06 	vldr	s14, [r3, #24]
 8005abc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac4:	ee17 0a90 	vmov	r0, s15
 8005ac8:	f7fa fd56 	bl	8000578 <__aeabi_f2d>
 8005acc:	a334      	add	r3, pc, #208	; (adr r3, 8005ba0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fda9 	bl	8000628 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4620      	mov	r0, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7fa fbed 	bl	80002bc <__adddf3>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f7fb f895 	bl	8000c18 <__aeabi_d2f>
 8005aee:	4602      	mov	r2, r0
 8005af0:	4b2d      	ldr	r3, [pc, #180]	; (8005ba8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005af2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	ed93 7a05 	vldr	s14, [r3, #20]
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005afc:	edd3 7a00 	vldr	s15, [r3]
 8005b00:	edd7 6a05 	vldr	s13, [r7, #20]
 8005b04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0c:	ee17 0a90 	vmov	r0, s15
 8005b10:	f7fa fd32 	bl	8000578 <__aeabi_f2d>
 8005b14:	a322      	add	r3, pc, #136	; (adr r3, 8005ba0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f7fa feaf 	bl	800087c <__aeabi_ddiv>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	4618      	mov	r0, r3
 8005b24:	4621      	mov	r1, r4
 8005b26:	f7fb f877 	bl	8000c18 <__aeabi_d2f>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005b2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b3c:	edd3 7a00 	vldr	s15, [r3]
 8005b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b44:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005b52:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	ee17 0a90 	vmov	r0, s15
 8005b5e:	f7fa fd0b 	bl	8000578 <__aeabi_f2d>
 8005b62:	4605      	mov	r5, r0
 8005b64:	460e      	mov	r6, r1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b74:	ee17 0a90 	vmov	r0, s15
 8005b78:	f7fa fcfe 	bl	8000578 <__aeabi_f2d>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	ec43 2b11 	vmov	d1, r2, r3
 8005b84:	ec46 5b10 	vmov	d0, r5, r6
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f7ff f9c5 	bl	8004f18 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ba4:	3f50624d 	.word	0x3f50624d
 8005ba8:	20000230 	.word	0x20000230
 8005bac:	2000022c 	.word	0x2000022c

08005bb0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bbc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	605a      	str	r2, [r3, #4]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005be4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005c10:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	615a      	str	r2, [r3, #20]
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c3e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005c42:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff feb7 	bl	80059e0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff feef 	bl	8005a60 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005ce0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005cc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005ce0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff f923 	bl	8004f18 <_ZN5Motor8setRatioEdd>

}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
	...

08005ce8 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fe4d 	bl	8007994 <cppExit>
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005d16:	f001 fe2b 	bl	8007970 <cppFlip100ns>

		tim7_timer++;
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005d22:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d902      	bls.n	8005d34 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005d2e:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10e      	bne.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005d3e:	f001 fded 	bl	800791c <cppFlip1ms>

		tim6_timer++;
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d4a:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d902      	bls.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x58>
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10e      	bne.n	8005d84 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005d66:	f001 fe0d 	bl	8007984 <cppFlip10ms>

		tim13_timer++;
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d72:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a06      	ldr	r2, [pc, #24]	; (8005d94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d902      	bls.n	8005d84 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
	}

}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40001400 	.word	0x40001400
 8005d90:	2004a794 	.word	0x2004a794
 8005d94:	0001869f 	.word	0x0001869f
 8005d98:	40001000 	.word	0x40001000
 8005d9c:	2004a750 	.word	0x2004a750
 8005da0:	40001c00 	.word	0x40001c00
 8005da4:	2004a798 	.word	0x2004a798

08005da8 <init>:

void init()
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005dac:	2201      	movs	r2, #1
 8005dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db2:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <init+0x2c>)
 8005db4:	f005 f9be 	bl	800b134 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005db8:	4807      	ldr	r0, [pc, #28]	; (8005dd8 <init+0x30>)
 8005dba:	f009 f89e 	bl	800eefa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005dbe:	4807      	ldr	r0, [pc, #28]	; (8005ddc <init+0x34>)
 8005dc0:	f009 f89b 	bl	800eefa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005dc4:	4806      	ldr	r0, [pc, #24]	; (8005de0 <init+0x38>)
 8005dc6:	f009 f898 	bl	800eefa <HAL_TIM_Base_Start_IT>

	cppInit();
 8005dca:	f001 fd05 	bl	80077d8 <cppInit>

	//path_following_initialize();

}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	2004a87c 	.word	0x2004a87c
 8005ddc:	2004aa20 	.word	0x2004aa20
 8005de0:	2004a79c 	.word	0x2004a79c

08005de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005de8:	f003 fe9c 	bl	8009b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dec:	f000 f82a 	bl	8005e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005df0:	f000 fdbc 	bl	800696c <MX_GPIO_Init>
  MX_DMA_Init();
 8005df4:	f000 fd8a 	bl	800690c <MX_DMA_Init>
  MX_I2C2_Init();
 8005df8:	f000 f9e8 	bl	80061cc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005dfc:	f000 fa14 	bl	8006228 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005e00:	f000 fa32 	bl	8006268 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005e04:	f000 fa66 	bl	80062d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005e08:	f000 fb70 	bl	80064ec <MX_TIM4_Init>
  MX_TIM8_Init();
 8005e0c:	f000 fc3c 	bl	8006688 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005e10:	f000 fd52 	bl	80068b8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005e14:	f00b f844 	bl	8010ea0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005e18:	f000 fbcc 	bl	80065b4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005e1c:	f000 f9a8 	bl	8006170 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005e20:	f000 fb00 	bl	8006424 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005e24:	f000 fc88 	bl	8006738 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005e28:	f000 fcd4 	bl	80067d4 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005e2c:	f000 f898 	bl	8005f60 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005e30:	f000 fbf6 	bl	8006620 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005e34:	f000 fd1c 	bl	8006870 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005e38:	f7ff ffb6 	bl	8005da8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005e3c:	f001 fdc4 	bl	80079c8 <cppLoop>
 8005e40:	e7fc      	b.n	8005e3c <main+0x58>
	...

08005e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b0a4      	sub	sp, #144	; 0x90
 8005e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e4e:	2234      	movs	r2, #52	; 0x34
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00e fc0e 	bl	8014674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	223c      	movs	r2, #60	; 0x3c
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f00e fbff 	bl	8014674 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <SystemClock_Config+0x114>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	4a36      	ldr	r2, [pc, #216]	; (8005f58 <SystemClock_Config+0x114>)
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6413      	str	r3, [r2, #64]	; 0x40
 8005e86:	4b34      	ldr	r3, [pc, #208]	; (8005f58 <SystemClock_Config+0x114>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	4b31      	ldr	r3, [pc, #196]	; (8005f5c <SystemClock_Config+0x118>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <SystemClock_Config+0x118>)
 8005e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <SystemClock_Config+0x118>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eb6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ebc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ec0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005ec6:	23b4      	movs	r3, #180	; 0xb4
 8005ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ede:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f006 fd60 	bl	800c9a8 <HAL_RCC_OscConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005eee:	f000 fe91 	bl	8006c14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005ef2:	f006 f8db 	bl	800c0ac <HAL_PWREx_EnableOverDrive>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005efc:	f000 fe8a 	bl	8006c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f00:	230f      	movs	r3, #15
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f04:	2302      	movs	r3, #2
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f16:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005f18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f1c:	2105      	movs	r1, #5
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f006 f914 	bl	800c14c <HAL_RCC_ClockConfig>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005f2a:	f000 fe73 	bl	8006c14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005f2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005f32:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005f34:	2300      	movs	r3, #0
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4618      	mov	r0, r3
 8005f42:	f006 faf3 	bl	800c52c <HAL_RCCEx_PeriphCLKConfig>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005f4c:	f000 fe62 	bl	8006c14 <Error_Handler>
  }
}
 8005f50:	bf00      	nop
 8005f52:	3790      	adds	r7, #144	; 0x90
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40007000 	.word	0x40007000

08005f60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f66:	463b      	mov	r3, r7
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005f72:	4b7c      	ldr	r3, [pc, #496]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f74:	4a7c      	ldr	r2, [pc, #496]	; (8006168 <MX_ADC2_Init+0x208>)
 8005f76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f78:	4b7a      	ldr	r3, [pc, #488]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f80:	4b78      	ldr	r3, [pc, #480]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005f86:	4b77      	ldr	r3, [pc, #476]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005f8c:	4b75      	ldr	r3, [pc, #468]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f92:	4b74      	ldr	r3, [pc, #464]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f9a:	4b72      	ldr	r3, [pc, #456]	; (8006164 <MX_ADC2_Init+0x204>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005fa0:	4b70      	ldr	r3, [pc, #448]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fa2:	4a72      	ldr	r2, [pc, #456]	; (800616c <MX_ADC2_Init+0x20c>)
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005fac:	4b6d      	ldr	r3, [pc, #436]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fae:	220e      	movs	r2, #14
 8005fb0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005fb2:	4b6c      	ldr	r3, [pc, #432]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fba:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005fc0:	4868      	ldr	r0, [pc, #416]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fc2:	f003 fe43 	bl	8009c4c <HAL_ADC_Init>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005fcc:	f000 fe22 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005fd0:	230a      	movs	r3, #10
 8005fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005fd8:	2306      	movs	r3, #6
 8005fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fdc:	463b      	mov	r3, r7
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4860      	ldr	r0, [pc, #384]	; (8006164 <MX_ADC2_Init+0x204>)
 8005fe2:	f003 ff87 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005fec:	f000 fe12 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005ff0:	230b      	movs	r3, #11
 8005ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4859      	ldr	r0, [pc, #356]	; (8006164 <MX_ADC2_Init+0x204>)
 8005ffe:	f003 ff79 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006008:	f000 fe04 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800600c:	230c      	movs	r3, #12
 800600e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006010:	2303      	movs	r3, #3
 8006012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006014:	463b      	mov	r3, r7
 8006016:	4619      	mov	r1, r3
 8006018:	4852      	ldr	r0, [pc, #328]	; (8006164 <MX_ADC2_Init+0x204>)
 800601a:	f003 ff6b 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006024:	f000 fdf6 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006028:	230d      	movs	r3, #13
 800602a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800602c:	2304      	movs	r3, #4
 800602e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006030:	463b      	mov	r3, r7
 8006032:	4619      	mov	r1, r3
 8006034:	484b      	ldr	r0, [pc, #300]	; (8006164 <MX_ADC2_Init+0x204>)
 8006036:	f003 ff5d 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006040:	f000 fde8 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006048:	2305      	movs	r3, #5
 800604a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800604c:	463b      	mov	r3, r7
 800604e:	4619      	mov	r1, r3
 8006050:	4844      	ldr	r0, [pc, #272]	; (8006164 <MX_ADC2_Init+0x204>)
 8006052:	f003 ff4f 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800605c:	f000 fdda 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006060:	2301      	movs	r3, #1
 8006062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006064:	2306      	movs	r3, #6
 8006066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006068:	463b      	mov	r3, r7
 800606a:	4619      	mov	r1, r3
 800606c:	483d      	ldr	r0, [pc, #244]	; (8006164 <MX_ADC2_Init+0x204>)
 800606e:	f003 ff41 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006078:	f000 fdcc 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800607c:	2302      	movs	r3, #2
 800607e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006080:	2307      	movs	r3, #7
 8006082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006084:	463b      	mov	r3, r7
 8006086:	4619      	mov	r1, r3
 8006088:	4836      	ldr	r0, [pc, #216]	; (8006164 <MX_ADC2_Init+0x204>)
 800608a:	f003 ff33 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006094:	f000 fdbe 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006098:	2303      	movs	r3, #3
 800609a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800609c:	2308      	movs	r3, #8
 800609e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060a0:	463b      	mov	r3, r7
 80060a2:	4619      	mov	r1, r3
 80060a4:	482f      	ldr	r0, [pc, #188]	; (8006164 <MX_ADC2_Init+0x204>)
 80060a6:	f003 ff25 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80060b0:	f000 fdb0 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80060b4:	2304      	movs	r3, #4
 80060b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80060b8:	2309      	movs	r3, #9
 80060ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060bc:	463b      	mov	r3, r7
 80060be:	4619      	mov	r1, r3
 80060c0:	4828      	ldr	r0, [pc, #160]	; (8006164 <MX_ADC2_Init+0x204>)
 80060c2:	f003 ff17 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80060cc:	f000 fda2 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80060d0:	2305      	movs	r3, #5
 80060d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80060d4:	230a      	movs	r3, #10
 80060d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060d8:	463b      	mov	r3, r7
 80060da:	4619      	mov	r1, r3
 80060dc:	4821      	ldr	r0, [pc, #132]	; (8006164 <MX_ADC2_Init+0x204>)
 80060de:	f003 ff09 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80060e8:	f000 fd94 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80060ec:	2306      	movs	r3, #6
 80060ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80060f0:	230b      	movs	r3, #11
 80060f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060f4:	463b      	mov	r3, r7
 80060f6:	4619      	mov	r1, r3
 80060f8:	481a      	ldr	r0, [pc, #104]	; (8006164 <MX_ADC2_Init+0x204>)
 80060fa:	f003 fefb 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006104:	f000 fd86 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006108:	2307      	movs	r3, #7
 800610a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800610c:	230c      	movs	r3, #12
 800610e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006110:	463b      	mov	r3, r7
 8006112:	4619      	mov	r1, r3
 8006114:	4813      	ldr	r0, [pc, #76]	; (8006164 <MX_ADC2_Init+0x204>)
 8006116:	f003 feed 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006120:	f000 fd78 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006124:	2308      	movs	r3, #8
 8006126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006128:	230d      	movs	r3, #13
 800612a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800612c:	463b      	mov	r3, r7
 800612e:	4619      	mov	r1, r3
 8006130:	480c      	ldr	r0, [pc, #48]	; (8006164 <MX_ADC2_Init+0x204>)
 8006132:	f003 fedf 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 800613c:	f000 fd6a 	bl	8006c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006140:	2309      	movs	r3, #9
 8006142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006144:	230e      	movs	r3, #14
 8006146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006148:	463b      	mov	r3, r7
 800614a:	4619      	mov	r1, r3
 800614c:	4805      	ldr	r0, [pc, #20]	; (8006164 <MX_ADC2_Init+0x204>)
 800614e:	f003 fed1 	bl	8009ef4 <HAL_ADC_ConfigChannel>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006158:	f000 fd5c 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2004a620 	.word	0x2004a620
 8006168:	40012100 	.word	0x40012100
 800616c:	0f000001 	.word	0x0f000001

08006170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <MX_I2C1_Init+0x54>)
 8006178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <MX_I2C1_Init+0x50>)
 800617c:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <MX_I2C1_Init+0x58>)
 800617e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006180:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006182:	2200      	movs	r2, #0
 8006184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006188:	2200      	movs	r2, #0
 800618a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <MX_I2C1_Init+0x50>)
 800618e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006196:	2200      	movs	r2, #0
 8006198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <MX_I2C1_Init+0x50>)
 800619c:	2200      	movs	r2, #0
 800619e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061a8:	2280      	movs	r2, #128	; 0x80
 80061aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061ae:	f004 fff3 	bl	800b198 <HAL_I2C_Init>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80061b8:	f000 fd2c 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	2004a668 	.word	0x2004a668
 80061c4:	40005400 	.word	0x40005400
 80061c8:	000186a0 	.word	0x000186a0

080061cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80061d0:	4b12      	ldr	r3, [pc, #72]	; (800621c <MX_I2C2_Init+0x50>)
 80061d2:	4a13      	ldr	r2, [pc, #76]	; (8006220 <MX_I2C2_Init+0x54>)
 80061d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <MX_I2C2_Init+0x50>)
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <MX_I2C2_Init+0x58>)
 80061da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <MX_I2C2_Init+0x50>)
 80061de:	2200      	movs	r2, #0
 80061e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <MX_I2C2_Init+0x50>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <MX_I2C2_Init+0x50>)
 80061ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <MX_I2C2_Init+0x50>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <MX_I2C2_Init+0x50>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <MX_I2C2_Init+0x50>)
 80061fe:	2200      	movs	r2, #0
 8006200:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <MX_I2C2_Init+0x50>)
 8006204:	2280      	movs	r2, #128	; 0x80
 8006206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006208:	4804      	ldr	r0, [pc, #16]	; (800621c <MX_I2C2_Init+0x50>)
 800620a:	f004 ffc5 	bl	800b198 <HAL_I2C_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006214:	f000 fcfe 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2004a6fc 	.word	0x2004a6fc
 8006220:	40005800 	.word	0x40005800
 8006224:	000186a0 	.word	0x000186a0

08006228 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 800622e:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <MX_SDIO_SD_Init+0x3c>)
 8006230:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 800623a:	2200      	movs	r2, #0
 800623c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 8006240:	2200      	movs	r2, #0
 8006242:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 800624c:	2200      	movs	r2, #0
 800624e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <MX_SDIO_SD_Init+0x38>)
 8006252:	2204      	movs	r2, #4
 8006254:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	2004a8fc 	.word	0x2004a8fc
 8006264:	40012c00 	.word	0x40012c00

08006268 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800626c:	4b17      	ldr	r3, [pc, #92]	; (80062cc <MX_SPI2_Init+0x64>)
 800626e:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <MX_SPI2_Init+0x68>)
 8006270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006272:	4b16      	ldr	r3, [pc, #88]	; (80062cc <MX_SPI2_Init+0x64>)
 8006274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <MX_SPI2_Init+0x64>)
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <MX_SPI2_Init+0x64>)
 8006282:	2200      	movs	r2, #0
 8006284:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <MX_SPI2_Init+0x64>)
 8006288:	2202      	movs	r2, #2
 800628a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <MX_SPI2_Init+0x64>)
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <MX_SPI2_Init+0x64>)
 8006294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006298:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <MX_SPI2_Init+0x64>)
 800629c:	2220      	movs	r2, #32
 800629e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <MX_SPI2_Init+0x64>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <MX_SPI2_Init+0x64>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <MX_SPI2_Init+0x64>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <MX_SPI2_Init+0x64>)
 80062b4:	220a      	movs	r2, #10
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062b8:	4804      	ldr	r0, [pc, #16]	; (80062cc <MX_SPI2_Init+0x64>)
 80062ba:	f008 f89f 	bl	800e3fc <HAL_SPI_Init>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80062c4:	f000 fca6 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2004a548 	.word	0x2004a548
 80062d0:	40003800 	.word	0x40003800

080062d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b09a      	sub	sp, #104	; 0x68
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80062da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f00e f9c6 	bl	8014674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062f2:	f107 0320 	add.w	r3, r7, #32
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	60da      	str	r2, [r3, #12]
 8006300:	611a      	str	r2, [r3, #16]
 8006302:	615a      	str	r2, [r3, #20]
 8006304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006306:	463b      	mov	r3, r7
 8006308:	2220      	movs	r2, #32
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f00e f9b1 	bl	8014674 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006312:	4b42      	ldr	r3, [pc, #264]	; (800641c <MX_TIM1_Init+0x148>)
 8006314:	4a42      	ldr	r2, [pc, #264]	; (8006420 <MX_TIM1_Init+0x14c>)
 8006316:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <MX_TIM1_Init+0x148>)
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800631e:	4b3f      	ldr	r3, [pc, #252]	; (800641c <MX_TIM1_Init+0x148>)
 8006320:	2200      	movs	r2, #0
 8006322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006324:	4b3d      	ldr	r3, [pc, #244]	; (800641c <MX_TIM1_Init+0x148>)
 8006326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800632a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800632c:	4b3b      	ldr	r3, [pc, #236]	; (800641c <MX_TIM1_Init+0x148>)
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006332:	4b3a      	ldr	r3, [pc, #232]	; (800641c <MX_TIM1_Init+0x148>)
 8006334:	2200      	movs	r2, #0
 8006336:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006338:	4b38      	ldr	r3, [pc, #224]	; (800641c <MX_TIM1_Init+0x148>)
 800633a:	2200      	movs	r2, #0
 800633c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800633e:	4837      	ldr	r0, [pc, #220]	; (800641c <MX_TIM1_Init+0x148>)
 8006340:	f008 fdff 	bl	800ef42 <HAL_TIM_PWM_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800634a:	f000 fc63 	bl	8006c14 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800634e:	2303      	movs	r3, #3
 8006350:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006352:	2300      	movs	r3, #0
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006356:	2301      	movs	r3, #1
 8006358:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800635a:	2300      	movs	r3, #0
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006362:	2300      	movs	r3, #0
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006366:	2301      	movs	r3, #1
 8006368:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800636a:	2300      	movs	r3, #0
 800636c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006376:	4619      	mov	r1, r3
 8006378:	4828      	ldr	r0, [pc, #160]	; (800641c <MX_TIM1_Init+0x148>)
 800637a:	f008 fe4b 	bl	800f014 <HAL_TIM_Encoder_Init>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006384:	f000 fc46 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006394:	4619      	mov	r1, r3
 8006396:	4821      	ldr	r0, [pc, #132]	; (800641c <MX_TIM1_Init+0x148>)
 8006398:	f009 fb72 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80063a2:	f000 fc37 	bl	8006c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063a6:	2360      	movs	r3, #96	; 0x60
 80063a8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063b2:	2300      	movs	r3, #0
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063c2:	f107 0320 	add.w	r3, r7, #32
 80063c6:	2208      	movs	r2, #8
 80063c8:	4619      	mov	r1, r3
 80063ca:	4814      	ldr	r0, [pc, #80]	; (800641c <MX_TIM1_Init+0x148>)
 80063cc:	f008 fff4 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80063d6:	f000 fc1d 	bl	8006c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063f8:	463b      	mov	r3, r7
 80063fa:	4619      	mov	r1, r3
 80063fc:	4807      	ldr	r0, [pc, #28]	; (800641c <MX_TIM1_Init+0x148>)
 80063fe:	f009 fbbb 	bl	800fb78 <HAL_TIMEx_ConfigBreakDeadTime>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006408:	f000 fc04 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800640c:	4803      	ldr	r0, [pc, #12]	; (800641c <MX_TIM1_Init+0x148>)
 800640e:	f000 fff1 	bl	80073f4 <HAL_TIM_MspPostInit>

}
 8006412:	bf00      	nop
 8006414:	3768      	adds	r7, #104	; 0x68
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	2004a8bc 	.word	0x2004a8bc
 8006420:	40010000 	.word	0x40010000

08006424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800642a:	f107 0320 	add.w	r3, r7, #32
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	605a      	str	r2, [r3, #4]
 800643c:	609a      	str	r2, [r3, #8]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	611a      	str	r2, [r3, #16]
 8006442:	615a      	str	r2, [r3, #20]
 8006444:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <MX_TIM3_Init+0xc0>)
 8006448:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <MX_TIM3_Init+0xc4>)
 800644a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <MX_TIM3_Init+0xc0>)
 800644e:	2201      	movs	r2, #1
 8006450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <MX_TIM3_Init+0xc0>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006458:	4b22      	ldr	r3, [pc, #136]	; (80064e4 <MX_TIM3_Init+0xc0>)
 800645a:	f241 1293 	movw	r2, #4499	; 0x1193
 800645e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006460:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <MX_TIM3_Init+0xc0>)
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006466:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <MX_TIM3_Init+0xc0>)
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800646c:	481d      	ldr	r0, [pc, #116]	; (80064e4 <MX_TIM3_Init+0xc0>)
 800646e:	f008 fd68 	bl	800ef42 <HAL_TIM_PWM_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006478:	f000 fbcc 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800647c:	2300      	movs	r3, #0
 800647e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006484:	f107 0320 	add.w	r3, r7, #32
 8006488:	4619      	mov	r1, r3
 800648a:	4816      	ldr	r0, [pc, #88]	; (80064e4 <MX_TIM3_Init+0xc0>)
 800648c:	f009 faf8 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006496:	f000 fbbd 	bl	8006c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800649a:	2360      	movs	r3, #96	; 0x60
 800649c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	2200      	movs	r2, #0
 80064ae:	4619      	mov	r1, r3
 80064b0:	480c      	ldr	r0, [pc, #48]	; (80064e4 <MX_TIM3_Init+0xc0>)
 80064b2:	f008 ff81 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80064bc:	f000 fbaa 	bl	8006c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	2204      	movs	r2, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4807      	ldr	r0, [pc, #28]	; (80064e4 <MX_TIM3_Init+0xc0>)
 80064c8:	f008 ff76 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80064d2:	f000 fb9f 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80064d6:	4803      	ldr	r0, [pc, #12]	; (80064e4 <MX_TIM3_Init+0xc0>)
 80064d8:	f000 ff8c 	bl	80073f4 <HAL_TIM_MspPostInit>

}
 80064dc:	bf00      	nop
 80064de:	3728      	adds	r7, #40	; 0x28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	2004a754 	.word	0x2004a754
 80064e8:	40000400 	.word	0x40000400

080064ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	; 0x28
 80064f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064f2:	f107 0320 	add.w	r3, r7, #32
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064fc:	1d3b      	adds	r3, r7, #4
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	609a      	str	r2, [r3, #8]
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	611a      	str	r2, [r3, #16]
 800650a:	615a      	str	r2, [r3, #20]
 800650c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800650e:	4b27      	ldr	r3, [pc, #156]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <MX_TIM4_Init+0xc4>)
 8006512:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006516:	2200      	movs	r2, #0
 8006518:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <MX_TIM4_Init+0xc0>)
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006520:	4b22      	ldr	r3, [pc, #136]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006522:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006526:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <MX_TIM4_Init+0xc0>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800652e:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006530:	2200      	movs	r2, #0
 8006532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006534:	481d      	ldr	r0, [pc, #116]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006536:	f008 fd04 	bl	800ef42 <HAL_TIM_PWM_Init>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006540:	f000 fb68 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006544:	2300      	movs	r3, #0
 8006546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800654c:	f107 0320 	add.w	r3, r7, #32
 8006550:	4619      	mov	r1, r3
 8006552:	4816      	ldr	r0, [pc, #88]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006554:	f009 fa94 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800655e:	f000 fb59 	bl	8006c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006562:	2360      	movs	r3, #96	; 0x60
 8006564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	2208      	movs	r2, #8
 8006576:	4619      	mov	r1, r3
 8006578:	480c      	ldr	r0, [pc, #48]	; (80065ac <MX_TIM4_Init+0xc0>)
 800657a:	f008 ff1d 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006584:	f000 fb46 	bl	8006c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	220c      	movs	r2, #12
 800658c:	4619      	mov	r1, r3
 800658e:	4807      	ldr	r0, [pc, #28]	; (80065ac <MX_TIM4_Init+0xc0>)
 8006590:	f008 ff12 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800659a:	f000 fb3b 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800659e:	4803      	ldr	r0, [pc, #12]	; (80065ac <MX_TIM4_Init+0xc0>)
 80065a0:	f000 ff28 	bl	80073f4 <HAL_TIM_MspPostInit>

}
 80065a4:	bf00      	nop
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	2004a5e0 	.word	0x2004a5e0
 80065b0:	40000800 	.word	0x40000800

080065b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ba:	463b      	mov	r3, r7
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <MX_TIM6_Init+0x64>)
 80065c4:	4a15      	ldr	r2, [pc, #84]	; (800661c <MX_TIM6_Init+0x68>)
 80065c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <MX_TIM6_Init+0x64>)
 80065ca:	2259      	movs	r2, #89	; 0x59
 80065cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <MX_TIM6_Init+0x64>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80065d4:	4b10      	ldr	r3, [pc, #64]	; (8006618 <MX_TIM6_Init+0x64>)
 80065d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <MX_TIM6_Init+0x64>)
 80065de:	2280      	movs	r2, #128	; 0x80
 80065e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80065e2:	480d      	ldr	r0, [pc, #52]	; (8006618 <MX_TIM6_Init+0x64>)
 80065e4:	f008 fc5e 	bl	800eea4 <HAL_TIM_Base_Init>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80065ee:	f000 fb11 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065f2:	2300      	movs	r3, #0
 80065f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80065fa:	463b      	mov	r3, r7
 80065fc:	4619      	mov	r1, r3
 80065fe:	4806      	ldr	r0, [pc, #24]	; (8006618 <MX_TIM6_Init+0x64>)
 8006600:	f009 fa3e 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800660a:	f000 fb03 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	2004a87c 	.word	0x2004a87c
 800661c:	40001000 	.word	0x40001000

08006620 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006626:	463b      	mov	r3, r7
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <MX_TIM7_Init+0x60>)
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <MX_TIM7_Init+0x64>)
 8006632:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <MX_TIM7_Init+0x60>)
 8006636:	22b3      	movs	r2, #179	; 0xb3
 8006638:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <MX_TIM7_Init+0x60>)
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <MX_TIM7_Init+0x60>)
 8006642:	2231      	movs	r2, #49	; 0x31
 8006644:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006646:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <MX_TIM7_Init+0x60>)
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800664c:	480c      	ldr	r0, [pc, #48]	; (8006680 <MX_TIM7_Init+0x60>)
 800664e:	f008 fc29 	bl	800eea4 <HAL_TIM_Base_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006658:	f000 fadc 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800665c:	2300      	movs	r3, #0
 800665e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006660:	2300      	movs	r3, #0
 8006662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006664:	463b      	mov	r3, r7
 8006666:	4619      	mov	r1, r3
 8006668:	4805      	ldr	r0, [pc, #20]	; (8006680 <MX_TIM7_Init+0x60>)
 800666a:	f009 fa09 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006674:	f000 face 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	2004aa20 	.word	0x2004aa20
 8006684:	40001400 	.word	0x40001400

08006688 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08c      	sub	sp, #48	; 0x30
 800668c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f00d ffec 	bl	8014674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066a6:	4a23      	ldr	r2, [pc, #140]	; (8006734 <MX_TIM8_Init+0xac>)
 80066a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80066aa:	4b21      	ldr	r3, [pc, #132]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80066b0:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066b2:	2210      	movs	r2, #16
 80066b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ca:	4b19      	ldr	r3, [pc, #100]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80066d0:	2303      	movs	r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80066e4:	2300      	movs	r3, #0
 80066e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80066e8:	2301      	movs	r3, #1
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	4619      	mov	r1, r3
 80066fa:	480d      	ldr	r0, [pc, #52]	; (8006730 <MX_TIM8_Init+0xa8>)
 80066fc:	f008 fc8a 	bl	800f014 <HAL_TIM_Encoder_Init>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006706:	f000 fa85 	bl	8006c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4806      	ldr	r0, [pc, #24]	; (8006730 <MX_TIM8_Init+0xa8>)
 8006718:	f009 f9b2 	bl	800fa80 <HAL_TIMEx_MasterConfigSynchronization>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006722:	f000 fa77 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006726:	bf00      	nop
 8006728:	3730      	adds	r7, #48	; 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2004a5a0 	.word	0x2004a5a0
 8006734:	40010400 	.word	0x40010400

08006738 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	611a      	str	r2, [r3, #16]
 800674c:	615a      	str	r2, [r3, #20]
 800674e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006750:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <MX_TIM10_Init+0x94>)
 8006752:	4a1f      	ldr	r2, [pc, #124]	; (80067d0 <MX_TIM10_Init+0x98>)
 8006754:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <MX_TIM10_Init+0x94>)
 8006758:	2201      	movs	r2, #1
 800675a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <MX_TIM10_Init+0x94>)
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006762:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <MX_TIM10_Init+0x94>)
 8006764:	f242 3227 	movw	r2, #8999	; 0x2327
 8006768:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800676a:	4b18      	ldr	r3, [pc, #96]	; (80067cc <MX_TIM10_Init+0x94>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006770:	4b16      	ldr	r3, [pc, #88]	; (80067cc <MX_TIM10_Init+0x94>)
 8006772:	2200      	movs	r2, #0
 8006774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006776:	4815      	ldr	r0, [pc, #84]	; (80067cc <MX_TIM10_Init+0x94>)
 8006778:	f008 fb94 	bl	800eea4 <HAL_TIM_Base_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006782:	f000 fa47 	bl	8006c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006786:	4811      	ldr	r0, [pc, #68]	; (80067cc <MX_TIM10_Init+0x94>)
 8006788:	f008 fbdb 	bl	800ef42 <HAL_TIM_PWM_Init>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006792:	f000 fa3f 	bl	8006c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006796:	2360      	movs	r3, #96	; 0x60
 8006798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	2200      	movs	r2, #0
 80067aa:	4619      	mov	r1, r3
 80067ac:	4807      	ldr	r0, [pc, #28]	; (80067cc <MX_TIM10_Init+0x94>)
 80067ae:	f008 fe03 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80067b8:	f000 fa2c 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80067bc:	4803      	ldr	r0, [pc, #12]	; (80067cc <MX_TIM10_Init+0x94>)
 80067be:	f000 fe19 	bl	80073f4 <HAL_TIM_MspPostInit>

}
 80067c2:	bf00      	nop
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2004a6bc 	.word	0x2004a6bc
 80067d0:	40014400 	.word	0x40014400

080067d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	611a      	str	r2, [r3, #16]
 80067e8:	615a      	str	r2, [r3, #20]
 80067ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <MX_TIM11_Init+0x94>)
 80067ee:	4a1f      	ldr	r2, [pc, #124]	; (800686c <MX_TIM11_Init+0x98>)
 80067f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <MX_TIM11_Init+0x94>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <MX_TIM11_Init+0x94>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <MX_TIM11_Init+0x94>)
 8006800:	f242 3227 	movw	r2, #8999	; 0x2327
 8006804:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <MX_TIM11_Init+0x94>)
 8006808:	2200      	movs	r2, #0
 800680a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <MX_TIM11_Init+0x94>)
 800680e:	2200      	movs	r2, #0
 8006810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006812:	4815      	ldr	r0, [pc, #84]	; (8006868 <MX_TIM11_Init+0x94>)
 8006814:	f008 fb46 	bl	800eea4 <HAL_TIM_Base_Init>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800681e:	f000 f9f9 	bl	8006c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006822:	4811      	ldr	r0, [pc, #68]	; (8006868 <MX_TIM11_Init+0x94>)
 8006824:	f008 fb8d 	bl	800ef42 <HAL_TIM_PWM_Init>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800682e:	f000 f9f1 	bl	8006c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006832:	2360      	movs	r3, #96	; 0x60
 8006834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	2200      	movs	r2, #0
 8006846:	4619      	mov	r1, r3
 8006848:	4807      	ldr	r0, [pc, #28]	; (8006868 <MX_TIM11_Init+0x94>)
 800684a:	f008 fdb5 	bl	800f3b8 <HAL_TIM_PWM_ConfigChannel>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006854:	f000 f9de 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006858:	4803      	ldr	r0, [pc, #12]	; (8006868 <MX_TIM11_Init+0x94>)
 800685a:	f000 fdcb 	bl	80073f4 <HAL_TIM_MspPostInit>

}
 800685e:	bf00      	nop
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	2004a7dc 	.word	0x2004a7dc
 800686c:	40014800 	.word	0x40014800

08006870 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <MX_TIM13_Init+0x40>)
 8006876:	4a0f      	ldr	r2, [pc, #60]	; (80068b4 <MX_TIM13_Init+0x44>)
 8006878:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <MX_TIM13_Init+0x40>)
 800687c:	2259      	movs	r2, #89	; 0x59
 800687e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <MX_TIM13_Init+0x40>)
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <MX_TIM13_Init+0x40>)
 8006888:	f242 720f 	movw	r2, #9999	; 0x270f
 800688c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <MX_TIM13_Init+0x40>)
 8006890:	2200      	movs	r2, #0
 8006892:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <MX_TIM13_Init+0x40>)
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800689a:	4805      	ldr	r0, [pc, #20]	; (80068b0 <MX_TIM13_Init+0x40>)
 800689c:	f008 fb02 	bl	800eea4 <HAL_TIM_Base_Init>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80068a6:	f000 f9b5 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	2004a79c 	.word	0x2004a79c
 80068b4:	40001c00 	.word	0x40001c00

080068b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <MX_USART2_UART_Init+0x50>)
 80068c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068ca:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068d8:	2200      	movs	r2, #0
 80068da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068de:	220c      	movs	r2, #12
 80068e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068ee:	4805      	ldr	r0, [pc, #20]	; (8006904 <MX_USART2_UART_Init+0x4c>)
 80068f0:	f009 f9a8 	bl	800fc44 <HAL_UART_Init>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068fa:	f000 f98b 	bl	8006c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068fe:	bf00      	nop
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2004a980 	.word	0x2004a980
 8006908:	40004400 	.word	0x40004400

0800690c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <MX_DMA_Init+0x5c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	4a13      	ldr	r2, [pc, #76]	; (8006968 <MX_DMA_Init+0x5c>)
 800691c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006920:	6313      	str	r3, [r2, #48]	; 0x30
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <MX_DMA_Init+0x5c>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	203a      	movs	r0, #58	; 0x3a
 8006934:	f003 fe69 	bl	800a60a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006938:	203a      	movs	r0, #58	; 0x3a
 800693a:	f003 fe82 	bl	800a642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800693e:	2200      	movs	r2, #0
 8006940:	2100      	movs	r1, #0
 8006942:	203b      	movs	r0, #59	; 0x3b
 8006944:	f003 fe61 	bl	800a60a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006948:	203b      	movs	r0, #59	; 0x3b
 800694a:	f003 fe7a 	bl	800a642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	2045      	movs	r0, #69	; 0x45
 8006954:	f003 fe59 	bl	800a60a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006958:	2045      	movs	r0, #69	; 0x45
 800695a:	f003 fe72 	bl	800a642 <HAL_NVIC_EnableIRQ>

}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800

0800696c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08c      	sub	sp, #48	; 0x30
 8006970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006972:	f107 031c 	add.w	r3, r7, #28
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	605a      	str	r2, [r3, #4]
 800697c:	609a      	str	r2, [r3, #8]
 800697e:	60da      	str	r2, [r3, #12]
 8006980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	4b9c      	ldr	r3, [pc, #624]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	4a9b      	ldr	r2, [pc, #620]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 800698c:	f043 0310 	orr.w	r3, r3, #16
 8006990:	6313      	str	r3, [r2, #48]	; 0x30
 8006992:	4b99      	ldr	r3, [pc, #612]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	4b95      	ldr	r3, [pc, #596]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4a94      	ldr	r2, [pc, #592]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ac:	6313      	str	r3, [r2, #48]	; 0x30
 80069ae:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ba:	2300      	movs	r3, #0
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	4b8e      	ldr	r3, [pc, #568]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4a8d      	ldr	r2, [pc, #564]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069c4:	f043 0304 	orr.w	r3, r3, #4
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ca:	4b8b      	ldr	r3, [pc, #556]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	4a86      	ldr	r2, [pc, #536]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6313      	str	r3, [r2, #48]	; 0x30
 80069e6:	4b84      	ldr	r3, [pc, #528]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	4b80      	ldr	r3, [pc, #512]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	4a7f      	ldr	r2, [pc, #508]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	6313      	str	r3, [r2, #48]	; 0x30
 8006a02:	4b7d      	ldr	r3, [pc, #500]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	4b79      	ldr	r3, [pc, #484]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4a78      	ldr	r2, [pc, #480]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1e:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <MX_GPIO_Init+0x28c>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a30:	4872      	ldr	r0, [pc, #456]	; (8006bfc <MX_GPIO_Init+0x290>)
 8006a32:	f004 fb7f 	bl	800b134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006a36:	2200      	movs	r2, #0
 8006a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a3c:	4870      	ldr	r0, [pc, #448]	; (8006c00 <MX_GPIO_Init+0x294>)
 8006a3e:	f004 fb79 	bl	800b134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a48:	486e      	ldr	r0, [pc, #440]	; (8006c04 <MX_GPIO_Init+0x298>)
 8006a4a:	f004 fb73 	bl	800b134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006a54:	486c      	ldr	r0, [pc, #432]	; (8006c08 <MX_GPIO_Init+0x29c>)
 8006a56:	f004 fb6d 	bl	800b134 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a5e:	4b6b      	ldr	r3, [pc, #428]	; (8006c0c <MX_GPIO_Init+0x2a0>)
 8006a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a66:	f107 031c 	add.w	r3, r7, #28
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4863      	ldr	r0, [pc, #396]	; (8006bfc <MX_GPIO_Init+0x290>)
 8006a6e:	f004 f99f 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006a72:	230f      	movs	r3, #15
 8006a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a76:	2303      	movs	r3, #3
 8006a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a7e:	f107 031c 	add.w	r3, r7, #28
 8006a82:	4619      	mov	r1, r3
 8006a84:	4862      	ldr	r0, [pc, #392]	; (8006c10 <MX_GPIO_Init+0x2a4>)
 8006a86:	f004 f993 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006a8a:	23e1      	movs	r3, #225	; 0xe1
 8006a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a96:	f107 031c 	add.w	r3, r7, #28
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	485a      	ldr	r0, [pc, #360]	; (8006c08 <MX_GPIO_Init+0x29c>)
 8006a9e:	f004 f987 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aae:	f107 031c 	add.w	r3, r7, #28
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4852      	ldr	r0, [pc, #328]	; (8006c00 <MX_GPIO_Init+0x294>)
 8006ab6:	f004 f97b 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006aba:	2304      	movs	r3, #4
 8006abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ac6:	f107 031c 	add.w	r3, r7, #28
 8006aca:	4619      	mov	r1, r3
 8006acc:	484c      	ldr	r0, [pc, #304]	; (8006c00 <MX_GPIO_Init+0x294>)
 8006ace:	f004 f96f 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006ad2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006adc:	2301      	movs	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ae0:	f107 031c 	add.w	r3, r7, #28
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4845      	ldr	r0, [pc, #276]	; (8006bfc <MX_GPIO_Init+0x290>)
 8006ae8:	f004 f962 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006af2:	2301      	movs	r3, #1
 8006af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afa:	2300      	movs	r3, #0
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006afe:	f107 031c 	add.w	r3, r7, #28
 8006b02:	4619      	mov	r1, r3
 8006b04:	483d      	ldr	r0, [pc, #244]	; (8006bfc <MX_GPIO_Init+0x290>)
 8006b06:	f004 f953 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b10:	2301      	movs	r3, #1
 8006b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b1c:	f107 031c 	add.w	r3, r7, #28
 8006b20:	4619      	mov	r1, r3
 8006b22:	4837      	ldr	r0, [pc, #220]	; (8006c00 <MX_GPIO_Init+0x294>)
 8006b24:	f004 f944 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006b2e:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <MX_GPIO_Init+0x2a0>)
 8006b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b36:	f107 031c 	add.w	r3, r7, #28
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4831      	ldr	r0, [pc, #196]	; (8006c04 <MX_GPIO_Init+0x298>)
 8006b3e:	f004 f937 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	4619      	mov	r1, r3
 8006b5a:	482a      	ldr	r0, [pc, #168]	; (8006c04 <MX_GPIO_Init+0x298>)
 8006b5c:	f004 f928 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b66:	2301      	movs	r3, #1
 8006b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b72:	f107 031c 	add.w	r3, r7, #28
 8006b76:	4619      	mov	r1, r3
 8006b78:	4822      	ldr	r0, [pc, #136]	; (8006c04 <MX_GPIO_Init+0x298>)
 8006b7a:	f004 f919 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b7e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006b82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b84:	2301      	movs	r3, #1
 8006b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b90:	f107 031c 	add.w	r3, r7, #28
 8006b94:	4619      	mov	r1, r3
 8006b96:	481c      	ldr	r0, [pc, #112]	; (8006c08 <MX_GPIO_Init+0x29c>)
 8006b98:	f004 f90a 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006baa:	f107 031c 	add.w	r3, r7, #28
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4815      	ldr	r0, [pc, #84]	; (8006c08 <MX_GPIO_Init+0x29c>)
 8006bb2:	f004 f8fd 	bl	800adb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006bb6:	239b      	movs	r3, #155	; 0x9b
 8006bb8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	480e      	ldr	r0, [pc, #56]	; (8006c04 <MX_GPIO_Init+0x298>)
 8006bca:	f004 f8f1 	bl	800adb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2008      	movs	r0, #8
 8006bd4:	f003 fd19 	bl	800a60a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006bd8:	2008      	movs	r0, #8
 8006bda:	f003 fd32 	bl	800a642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006bde:	2200      	movs	r2, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	2017      	movs	r0, #23
 8006be4:	f003 fd11 	bl	800a60a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006be8:	2017      	movs	r0, #23
 8006bea:	f003 fd2a 	bl	800a642 <HAL_NVIC_EnableIRQ>

}
 8006bee:	bf00      	nop
 8006bf0:	3730      	adds	r7, #48	; 0x30
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40020400 	.word	0x40020400
 8006c04:	40020c00 	.word	0x40020c00
 8006c08:	40020000 	.word	0x40020000
 8006c0c:	10310000 	.word	0x10310000
 8006c10:	40020800 	.word	0x40020800

08006c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c1a:	e7fe      	b.n	8006c1a <Error_Handler+0x6>

08006c1c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006c20:	bf00      	nop
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	4a0f      	ldr	r2, [pc, #60]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c40:	6453      	str	r3, [r2, #68]	; 0x44
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c4e:	2300      	movs	r3, #0
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_MspInit+0x4c>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40023800 	.word	0x40023800

08006c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08c      	sub	sp, #48	; 0x30
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c84:	f107 031c 	add.w	r3, r7, #28
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a4a      	ldr	r2, [pc, #296]	; (8006dc4 <HAL_ADC_MspInit+0x148>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	f040 808e 	bne.w	8006dbc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	4b48      	ldr	r3, [pc, #288]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	4a47      	ldr	r2, [pc, #284]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cae:	6453      	str	r3, [r2, #68]	; 0x44
 8006cb0:	4b45      	ldr	r3, [pc, #276]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	4b41      	ldr	r3, [pc, #260]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	4a40      	ldr	r2, [pc, #256]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cc6:	f043 0304 	orr.w	r3, r3, #4
 8006cca:	6313      	str	r3, [r2, #48]	; 0x30
 8006ccc:	4b3e      	ldr	r3, [pc, #248]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	4b3a      	ldr	r3, [pc, #232]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	4a39      	ldr	r2, [pc, #228]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce8:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	4b33      	ldr	r3, [pc, #204]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	4a32      	ldr	r2, [pc, #200]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006cfe:	f043 0302 	orr.w	r3, r3, #2
 8006d02:	6313      	str	r3, [r2, #48]	; 0x30
 8006d04:	4b30      	ldr	r3, [pc, #192]	; (8006dc8 <HAL_ADC_MspInit+0x14c>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d10:	230f      	movs	r3, #15
 8006d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d14:	2303      	movs	r3, #3
 8006d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d1c:	f107 031c 	add.w	r3, r7, #28
 8006d20:	4619      	mov	r1, r3
 8006d22:	482a      	ldr	r0, [pc, #168]	; (8006dcc <HAL_ADC_MspInit+0x150>)
 8006d24:	f004 f844 	bl	800adb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d28:	23ff      	movs	r3, #255	; 0xff
 8006d2a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d34:	f107 031c 	add.w	r3, r7, #28
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4825      	ldr	r0, [pc, #148]	; (8006dd0 <HAL_ADC_MspInit+0x154>)
 8006d3c:	f004 f838 	bl	800adb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d40:	2303      	movs	r3, #3
 8006d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d44:	2303      	movs	r3, #3
 8006d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d4c:	f107 031c 	add.w	r3, r7, #28
 8006d50:	4619      	mov	r1, r3
 8006d52:	4820      	ldr	r0, [pc, #128]	; (8006dd4 <HAL_ADC_MspInit+0x158>)
 8006d54:	f004 f82c 	bl	800adb0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006d58:	4b1f      	ldr	r3, [pc, #124]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <HAL_ADC_MspInit+0x160>)
 8006d5c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006d5e:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d64:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d66:	4b1c      	ldr	r3, [pc, #112]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d72:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d78:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d7a:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d80:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d88:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d90:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d98:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006da0:	480d      	ldr	r0, [pc, #52]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006da2:	f003 fc69 	bl	800a678 <HAL_DMA_Init>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006dac:	f7ff ff32 	bl	8006c14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <HAL_ADC_MspInit+0x15c>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006dbc:	bf00      	nop
 8006dbe:	3730      	adds	r7, #48	; 0x30
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40012100 	.word	0x40012100
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40020800 	.word	0x40020800
 8006dd0:	40020000 	.word	0x40020000
 8006dd4:	40020400 	.word	0x40020400
 8006dd8:	2004a9c0 	.word	0x2004a9c0
 8006ddc:	40026440 	.word	0x40026440

08006de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de8:	f107 031c 	add.w	r3, r7, #28
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a32      	ldr	r2, [pc, #200]	; (8006ec8 <HAL_I2C_MspInit+0xe8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12c      	bne.n	8006e5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	4b31      	ldr	r3, [pc, #196]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e0c:	f043 0302 	orr.w	r3, r3, #2
 8006e10:	6313      	str	r3, [r2, #48]	; 0x30
 8006e12:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e1e:	23c0      	movs	r3, #192	; 0xc0
 8006e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e22:	2312      	movs	r3, #18
 8006e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e26:	2301      	movs	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e2e:	2304      	movs	r3, #4
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e32:	f107 031c 	add.w	r3, r7, #28
 8006e36:	4619      	mov	r1, r3
 8006e38:	4825      	ldr	r0, [pc, #148]	; (8006ed0 <HAL_I2C_MspInit+0xf0>)
 8006e3a:	f003 ffb9 	bl	800adb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e4e:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e5a:	e031      	b.n	8006ec0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <HAL_I2C_MspInit+0xf4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d12c      	bne.n	8006ec0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e70:	f043 0302 	orr.w	r3, r3, #2
 8006e74:	6313      	str	r3, [r2, #48]	; 0x30
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e88:	2312      	movs	r3, #18
 8006e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e90:	2303      	movs	r3, #3
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006e94:	2304      	movs	r3, #4
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e98:	f107 031c 	add.w	r3, r7, #28
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	480c      	ldr	r0, [pc, #48]	; (8006ed0 <HAL_I2C_MspInit+0xf0>)
 8006ea0:	f003 ff86 	bl	800adb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	4a07      	ldr	r2, [pc, #28]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_I2C_MspInit+0xec>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	3730      	adds	r7, #48	; 0x30
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40005400 	.word	0x40005400
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	40020400 	.word	0x40020400
 8006ed4:	40005800 	.word	0x40005800

08006ed8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	; 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	60da      	str	r2, [r3, #12]
 8006eee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a69      	ldr	r2, [pc, #420]	; (800709c <HAL_SD_MspInit+0x1c4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	f040 80cb 	bne.w	8007092 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	4b67      	ldr	r3, [pc, #412]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	4a66      	ldr	r2, [pc, #408]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8006f0c:	4b64      	ldr	r3, [pc, #400]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	4b60      	ldr	r3, [pc, #384]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	4a5f      	ldr	r2, [pc, #380]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	6313      	str	r3, [r2, #48]	; 0x30
 8006f28:	4b5d      	ldr	r3, [pc, #372]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	4b59      	ldr	r3, [pc, #356]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	4a58      	ldr	r2, [pc, #352]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f3e:	f043 0308 	orr.w	r3, r3, #8
 8006f42:	6313      	str	r3, [r2, #48]	; 0x30
 8006f44:	4b56      	ldr	r3, [pc, #344]	; (80070a0 <HAL_SD_MspInit+0x1c8>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006f50:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006f54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f56:	2302      	movs	r3, #2
 8006f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006f62:	230c      	movs	r3, #12
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	484d      	ldr	r0, [pc, #308]	; (80070a4 <HAL_SD_MspInit+0x1cc>)
 8006f6e:	f003 ff1f 	bl	800adb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f72:	2304      	movs	r3, #4
 8006f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f76:	2302      	movs	r3, #2
 8006f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006f82:	230c      	movs	r3, #12
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f86:	f107 0314 	add.w	r3, r7, #20
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4846      	ldr	r0, [pc, #280]	; (80070a8 <HAL_SD_MspInit+0x1d0>)
 8006f8e:	f003 ff0f 	bl	800adb0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006f92:	4b46      	ldr	r3, [pc, #280]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006f94:	4a46      	ldr	r2, [pc, #280]	; (80070b0 <HAL_SD_MspInit+0x1d8>)
 8006f96:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006f98:	4b44      	ldr	r3, [pc, #272]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f9e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fa0:	4b42      	ldr	r3, [pc, #264]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fa6:	4b41      	ldr	r3, [pc, #260]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fac:	4b3f      	ldr	r3, [pc, #252]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fb2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fb4:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fba:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fbc:	4b3b      	ldr	r3, [pc, #236]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fc2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006fc4:	4b39      	ldr	r3, [pc, #228]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006fca:	4b38      	ldr	r3, [pc, #224]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006fd0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006fd2:	4b36      	ldr	r3, [pc, #216]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006fd8:	4b34      	ldr	r3, [pc, #208]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fda:	2203      	movs	r2, #3
 8006fdc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006fde:	4b33      	ldr	r3, [pc, #204]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fe0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006fe6:	4b31      	ldr	r3, [pc, #196]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006fe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006fee:	482f      	ldr	r0, [pc, #188]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8006ff0:	f003 fb42 	bl	800a678 <HAL_DMA_Init>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006ffa:	f7ff fe0b 	bl	8006c14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
 8007004:	4a29      	ldr	r2, [pc, #164]	; (80070ac <HAL_SD_MspInit+0x1d4>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800700a:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800700c:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <HAL_SD_MspInit+0x1e0>)
 800700e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007010:	4b28      	ldr	r3, [pc, #160]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007016:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007018:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800701a:	2240      	movs	r2, #64	; 0x40
 800701c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800701e:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007020:	2200      	movs	r2, #0
 8007022:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007024:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800702a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800702c:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800702e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007032:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007034:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800703a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800703c:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800703e:	2220      	movs	r2, #32
 8007040:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007042:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007044:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007048:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800704a:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800704c:	2204      	movs	r2, #4
 800704e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007050:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007052:	2203      	movs	r2, #3
 8007054:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007058:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800705e:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007060:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007064:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007066:	4813      	ldr	r0, [pc, #76]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 8007068:	f003 fb06 	bl	800a678 <HAL_DMA_Init>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007072:	f7ff fdcf 	bl	8006c14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800707a:	63da      	str	r2, [r3, #60]	; 0x3c
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <HAL_SD_MspInit+0x1dc>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007082:	2200      	movs	r2, #0
 8007084:	2100      	movs	r1, #0
 8007086:	2031      	movs	r0, #49	; 0x31
 8007088:	f003 fabf 	bl	800a60a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800708c:	2031      	movs	r0, #49	; 0x31
 800708e:	f003 fad8 	bl	800a642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007092:	bf00      	nop
 8007094:	3728      	adds	r7, #40	; 0x28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40023800 	.word	0x40023800
 80070a4:	40020800 	.word	0x40020800
 80070a8:	40020c00 	.word	0x40020c00
 80070ac:	2004a4e8 	.word	0x2004a4e8
 80070b0:	40026458 	.word	0x40026458
 80070b4:	2004a81c 	.word	0x2004a81c
 80070b8:	400264a0 	.word	0x400264a0

080070bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a19      	ldr	r2, [pc, #100]	; (8007140 <HAL_SPI_MspInit+0x84>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d12c      	bne.n	8007138 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	4b18      	ldr	r3, [pc, #96]	; (8007144 <HAL_SPI_MspInit+0x88>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	4a17      	ldr	r2, [pc, #92]	; (8007144 <HAL_SPI_MspInit+0x88>)
 80070e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070ec:	6413      	str	r3, [r2, #64]	; 0x40
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_SPI_MspInit+0x88>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_SPI_MspInit+0x88>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <HAL_SPI_MspInit+0x88>)
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_SPI_MspInit+0x88>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007116:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800711a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711c:	2302      	movs	r3, #2
 800711e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007124:	2303      	movs	r3, #3
 8007126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007128:	2305      	movs	r3, #5
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800712c:	f107 0314 	add.w	r3, r7, #20
 8007130:	4619      	mov	r1, r3
 8007132:	4805      	ldr	r0, [pc, #20]	; (8007148 <HAL_SPI_MspInit+0x8c>)
 8007134:	f003 fe3c 	bl	800adb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007138:	bf00      	nop
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40003800 	.word	0x40003800
 8007144:	40023800 	.word	0x40023800
 8007148:	40020400 	.word	0x40020400

0800714c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007154:	f107 031c 	add.w	r3, r7, #28
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2d      	ldr	r2, [pc, #180]	; (8007220 <HAL_TIM_PWM_MspInit+0xd4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d12d      	bne.n	80071ca <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	4b2c      	ldr	r3, [pc, #176]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	6453      	str	r3, [r2, #68]	; 0x44
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4b25      	ldr	r3, [pc, #148]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	4a24      	ldr	r2, [pc, #144]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007194:	f043 0310 	orr.w	r3, r3, #16
 8007198:	6313      	str	r3, [r2, #48]	; 0x30
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80071a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80071aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80071b8:	2301      	movs	r3, #1
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	4619      	mov	r1, r3
 80071c2:	4819      	ldr	r0, [pc, #100]	; (8007228 <HAL_TIM_PWM_MspInit+0xdc>)
 80071c4:	f003 fdf4 	bl	800adb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80071c8:	e026      	b.n	8007218 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <HAL_TIM_PWM_MspInit+0xe0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10e      	bne.n	80071f2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	4b12      	ldr	r3, [pc, #72]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	4a11      	ldr	r2, [pc, #68]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 80071de:	f043 0302 	orr.w	r3, r3, #2
 80071e2:	6413      	str	r3, [r2, #64]	; 0x40
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	693b      	ldr	r3, [r7, #16]
}
 80071f0:	e012      	b.n	8007218 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <HAL_TIM_PWM_MspInit+0xe4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10d      	bne.n	8007218 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	4a07      	ldr	r2, [pc, #28]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 8007206:	f043 0304 	orr.w	r3, r3, #4
 800720a:	6413      	str	r3, [r2, #64]	; 0x40
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_TIM_PWM_MspInit+0xd8>)
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40010000 	.word	0x40010000
 8007224:	40023800 	.word	0x40023800
 8007228:	40021000 	.word	0x40021000
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800

08007234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a3e      	ldr	r2, [pc, #248]	; (800733c <HAL_TIM_Base_MspInit+0x108>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d116      	bne.n	8007274 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	4a3c      	ldr	r2, [pc, #240]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007250:	f043 0310 	orr.w	r3, r3, #16
 8007254:	6413      	str	r3, [r2, #64]	; 0x40
 8007256:	4b3a      	ldr	r3, [pc, #232]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007262:	2200      	movs	r2, #0
 8007264:	2101      	movs	r1, #1
 8007266:	2036      	movs	r0, #54	; 0x36
 8007268:	f003 f9cf 	bl	800a60a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800726c:	2036      	movs	r0, #54	; 0x36
 800726e:	f003 f9e8 	bl	800a642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007272:	e05e      	b.n	8007332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a32      	ldr	r2, [pc, #200]	; (8007344 <HAL_TIM_Base_MspInit+0x110>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d116      	bne.n	80072ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	4b2f      	ldr	r3, [pc, #188]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	4a2e      	ldr	r2, [pc, #184]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	6413      	str	r3, [r2, #64]	; 0x40
 800728e:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	2037      	movs	r0, #55	; 0x37
 80072a0:	f003 f9b3 	bl	800a60a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80072a4:	2037      	movs	r0, #55	; 0x37
 80072a6:	f003 f9cc 	bl	800a642 <HAL_NVIC_EnableIRQ>
}
 80072aa:	e042      	b.n	8007332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a25      	ldr	r2, [pc, #148]	; (8007348 <HAL_TIM_Base_MspInit+0x114>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10e      	bne.n	80072d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	4b21      	ldr	r3, [pc, #132]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	4a20      	ldr	r2, [pc, #128]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c4:	6453      	str	r3, [r2, #68]	; 0x44
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	697b      	ldr	r3, [r7, #20]
}
 80072d2:	e02e      	b.n	8007332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1c      	ldr	r2, [pc, #112]	; (800734c <HAL_TIM_Base_MspInit+0x118>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d10e      	bne.n	80072fc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	4b17      	ldr	r3, [pc, #92]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	4a16      	ldr	r2, [pc, #88]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072ec:	6453      	str	r3, [r2, #68]	; 0x44
 80072ee:	4b14      	ldr	r3, [pc, #80]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
}
 80072fa:	e01a      	b.n	8007332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a13      	ldr	r2, [pc, #76]	; (8007350 <HAL_TIM_Base_MspInit+0x11c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d115      	bne.n	8007332 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	4a0c      	ldr	r2, [pc, #48]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007314:	6413      	str	r3, [r2, #64]	; 0x40
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <HAL_TIM_Base_MspInit+0x10c>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007322:	2200      	movs	r2, #0
 8007324:	2100      	movs	r1, #0
 8007326:	202c      	movs	r0, #44	; 0x2c
 8007328:	f003 f96f 	bl	800a60a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800732c:	202c      	movs	r0, #44	; 0x2c
 800732e:	f003 f988 	bl	800a642 <HAL_NVIC_EnableIRQ>
}
 8007332:	bf00      	nop
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40001000 	.word	0x40001000
 8007340:	40023800 	.word	0x40023800
 8007344:	40001400 	.word	0x40001400
 8007348:	40014400 	.word	0x40014400
 800734c:	40014800 	.word	0x40014800
 8007350:	40001c00 	.word	0x40001c00

08007354 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d133      	bne.n	80073de <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	6453      	str	r3, [r2, #68]	; 0x44
 8007386:	4b19      	ldr	r3, [pc, #100]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	4a14      	ldr	r2, [pc, #80]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	6313      	str	r3, [r2, #48]	; 0x30
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <HAL_TIM_Encoder_MspInit+0x98>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073ae:	23c0      	movs	r3, #192	; 0xc0
 80073b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b2:	2302      	movs	r3, #2
 80073b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ba:	2300      	movs	r3, #0
 80073bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80073be:	2303      	movs	r3, #3
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073c2:	f107 0314 	add.w	r3, r7, #20
 80073c6:	4619      	mov	r1, r3
 80073c8:	4809      	ldr	r0, [pc, #36]	; (80073f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80073ca:	f003 fcf1 	bl	800adb0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	202c      	movs	r0, #44	; 0x2c
 80073d4:	f003 f919 	bl	800a60a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80073d8:	202c      	movs	r0, #44	; 0x2c
 80073da:	f003 f932 	bl	800a642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80073de:	bf00      	nop
 80073e0:	3728      	adds	r7, #40	; 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40010400 	.word	0x40010400
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40020800 	.word	0x40020800

080073f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	; 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fc:	f107 031c 	add.w	r3, r7, #28
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a5c      	ldr	r2, [pc, #368]	; (8007584 <HAL_TIM_MspPostInit+0x190>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d11f      	bne.n	8007456 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	4a5a      	ldr	r2, [pc, #360]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	6313      	str	r3, [r2, #48]	; 0x30
 8007426:	4b58      	ldr	r3, [pc, #352]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007438:	2302      	movs	r3, #2
 800743a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743c:	2300      	movs	r3, #0
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	2300      	movs	r3, #0
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007444:	2301      	movs	r3, #1
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007448:	f107 031c 	add.w	r3, r7, #28
 800744c:	4619      	mov	r1, r3
 800744e:	484f      	ldr	r0, [pc, #316]	; (800758c <HAL_TIM_MspPostInit+0x198>)
 8007450:	f003 fcae 	bl	800adb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007454:	e091      	b.n	800757a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a4d      	ldr	r2, [pc, #308]	; (8007590 <HAL_TIM_MspPostInit+0x19c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d11e      	bne.n	800749e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	4b48      	ldr	r3, [pc, #288]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	4a47      	ldr	r2, [pc, #284]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 800746a:	f043 0302 	orr.w	r3, r3, #2
 800746e:	6313      	str	r3, [r2, #48]	; 0x30
 8007470:	4b45      	ldr	r3, [pc, #276]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007480:	2302      	movs	r3, #2
 8007482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007488:	2300      	movs	r3, #0
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800748c:	2302      	movs	r3, #2
 800748e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007490:	f107 031c 	add.w	r3, r7, #28
 8007494:	4619      	mov	r1, r3
 8007496:	483f      	ldr	r0, [pc, #252]	; (8007594 <HAL_TIM_MspPostInit+0x1a0>)
 8007498:	f003 fc8a 	bl	800adb0 <HAL_GPIO_Init>
}
 800749c:	e06d      	b.n	800757a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3d      	ldr	r2, [pc, #244]	; (8007598 <HAL_TIM_MspPostInit+0x1a4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d11f      	bne.n	80074e8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	4b36      	ldr	r3, [pc, #216]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	4a35      	ldr	r2, [pc, #212]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 80074b2:	f043 0308 	orr.w	r3, r3, #8
 80074b6:	6313      	str	r3, [r2, #48]	; 0x30
 80074b8:	4b33      	ldr	r3, [pc, #204]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80074c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80074c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ca:	2302      	movs	r3, #2
 80074cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074d2:	2300      	movs	r3, #0
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80074d6:	2302      	movs	r3, #2
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074da:	f107 031c 	add.w	r3, r7, #28
 80074de:	4619      	mov	r1, r3
 80074e0:	482e      	ldr	r0, [pc, #184]	; (800759c <HAL_TIM_MspPostInit+0x1a8>)
 80074e2:	f003 fc65 	bl	800adb0 <HAL_GPIO_Init>
}
 80074e6:	e048      	b.n	800757a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <HAL_TIM_MspPostInit+0x1ac>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d11f      	bne.n	8007532 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	4a23      	ldr	r2, [pc, #140]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
 8007502:	4b21      	ldr	r3, [pc, #132]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800750e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007514:	2302      	movs	r3, #2
 8007516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751c:	2300      	movs	r3, #0
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007520:	2303      	movs	r3, #3
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	4619      	mov	r1, r3
 800752a:	481a      	ldr	r0, [pc, #104]	; (8007594 <HAL_TIM_MspPostInit+0x1a0>)
 800752c:	f003 fc40 	bl	800adb0 <HAL_GPIO_Init>
}
 8007530:	e023      	b.n	800757a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1b      	ldr	r2, [pc, #108]	; (80075a4 <HAL_TIM_MspPostInit+0x1b0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d11e      	bne.n	800757a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800753c:	2300      	movs	r3, #0
 800753e:	60bb      	str	r3, [r7, #8]
 8007540:	4b11      	ldr	r3, [pc, #68]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	4a10      	ldr	r2, [pc, #64]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 8007546:	f043 0302 	orr.w	r3, r3, #2
 800754a:	6313      	str	r3, [r2, #48]	; 0x30
 800754c:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <HAL_TIM_MspPostInit+0x194>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755e:	2302      	movs	r3, #2
 8007560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007562:	2300      	movs	r3, #0
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007566:	2300      	movs	r3, #0
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800756a:	2303      	movs	r3, #3
 800756c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800756e:	f107 031c 	add.w	r3, r7, #28
 8007572:	4619      	mov	r1, r3
 8007574:	4807      	ldr	r0, [pc, #28]	; (8007594 <HAL_TIM_MspPostInit+0x1a0>)
 8007576:	f003 fc1b 	bl	800adb0 <HAL_GPIO_Init>
}
 800757a:	bf00      	nop
 800757c:	3730      	adds	r7, #48	; 0x30
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40010000 	.word	0x40010000
 8007588:	40023800 	.word	0x40023800
 800758c:	40021000 	.word	0x40021000
 8007590:	40000400 	.word	0x40000400
 8007594:	40020400 	.word	0x40020400
 8007598:	40000800 	.word	0x40000800
 800759c:	40020c00 	.word	0x40020c00
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800

080075a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a19      	ldr	r2, [pc, #100]	; (800762c <HAL_UART_MspInit+0x84>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d12b      	bne.n	8007622 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	4b18      	ldr	r3, [pc, #96]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a17      	ldr	r2, [pc, #92]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	4b11      	ldr	r3, [pc, #68]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	4a10      	ldr	r2, [pc, #64]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	6313      	str	r3, [r2, #48]	; 0x30
 80075f6:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <HAL_UART_MspInit+0x88>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007602:	2360      	movs	r3, #96	; 0x60
 8007604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007606:	2302      	movs	r3, #2
 8007608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800760e:	2303      	movs	r3, #3
 8007610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007612:	2307      	movs	r3, #7
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007616:	f107 0314 	add.w	r3, r7, #20
 800761a:	4619      	mov	r1, r3
 800761c:	4805      	ldr	r0, [pc, #20]	; (8007634 <HAL_UART_MspInit+0x8c>)
 800761e:	f003 fbc7 	bl	800adb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007622:	bf00      	nop
 8007624:	3728      	adds	r7, #40	; 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40004400 	.word	0x40004400
 8007630:	40023800 	.word	0x40023800
 8007634:	40020c00 	.word	0x40020c00

08007638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800763c:	e7fe      	b.n	800763c <NMI_Handler+0x4>

0800763e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007642:	e7fe      	b.n	8007642 <HardFault_Handler+0x4>

08007644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007644:	b480      	push	{r7}
 8007646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007648:	e7fe      	b.n	8007648 <MemManage_Handler+0x4>

0800764a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800764a:	b480      	push	{r7}
 800764c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800764e:	e7fe      	b.n	800764e <BusFault_Handler+0x4>

08007650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007654:	e7fe      	b.n	8007654 <UsageFault_Handler+0x4>

08007656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007656:	b480      	push	{r7}
 8007658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800765a:	bf00      	nop
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007672:	b480      	push	{r7}
 8007674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007676:	bf00      	nop
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007684:	f002 faa0 	bl	8009bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007688:	bf00      	nop
 800768a:	bd80      	pop	{r7, pc}

0800768c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007690:	2004      	movs	r0, #4
 8007692:	f003 fd69 	bl	800b168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007696:	bf00      	nop
 8007698:	bd80      	pop	{r7, pc}

0800769a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800769e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076a2:	f003 fd61 	bl	800b168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80076b2:	f007 fd78 	bl	800f1a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80076b6:	4803      	ldr	r0, [pc, #12]	; (80076c4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80076b8:	f007 fd75 	bl	800f1a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	2004a5a0 	.word	0x2004a5a0
 80076c4:	2004a79c 	.word	0x2004a79c

080076c8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80076cc:	4802      	ldr	r0, [pc, #8]	; (80076d8 <SDIO_IRQHandler+0x10>)
 80076ce:	f005 fe11 	bl	800d2f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80076d2:	bf00      	nop
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2004a8fc 	.word	0x2004a8fc

080076dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076e0:	4802      	ldr	r0, [pc, #8]	; (80076ec <TIM6_DAC_IRQHandler+0x10>)
 80076e2:	f007 fd60 	bl	800f1a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076e6:	bf00      	nop
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	2004a87c 	.word	0x2004a87c

080076f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80076f4:	4802      	ldr	r0, [pc, #8]	; (8007700 <TIM7_IRQHandler+0x10>)
 80076f6:	f007 fd56 	bl	800f1a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2004aa20 	.word	0x2004aa20

08007704 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007708:	4802      	ldr	r0, [pc, #8]	; (8007714 <DMA2_Stream2_IRQHandler+0x10>)
 800770a:	f003 f8dd 	bl	800a8c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800770e:	bf00      	nop
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	2004a9c0 	.word	0x2004a9c0

08007718 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800771c:	4802      	ldr	r0, [pc, #8]	; (8007728 <DMA2_Stream3_IRQHandler+0x10>)
 800771e:	f003 f8d3 	bl	800a8c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	2004a4e8 	.word	0x2004a4e8

0800772c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007730:	4802      	ldr	r0, [pc, #8]	; (800773c <DMA2_Stream6_IRQHandler+0x10>)
 8007732:	f003 f8c9 	bl	800a8c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007736:	bf00      	nop
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	2004a81c 	.word	0x2004a81c

08007740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007748:	4a14      	ldr	r2, [pc, #80]	; (800779c <_sbrk+0x5c>)
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <_sbrk+0x60>)
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007754:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <_sbrk+0x64>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <_sbrk+0x64>)
 800775e:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <_sbrk+0x68>)
 8007760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007762:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <_sbrk+0x64>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d207      	bcs.n	8007780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007770:	f00c ff56 	bl	8014620 <__errno>
 8007774:	4602      	mov	r2, r0
 8007776:	230c      	movs	r3, #12
 8007778:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	e009      	b.n	8007794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <_sbrk+0x64>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <_sbrk+0x64>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	4a05      	ldr	r2, [pc, #20]	; (80077a4 <_sbrk+0x64>)
 8007790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20050000 	.word	0x20050000
 80077a0:	00000800 	.word	0x00000800
 80077a4:	20000234 	.word	0x20000234
 80077a8:	2004cb70 	.word	0x2004cb70

080077ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <SystemInit+0x28>)
 80077b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b6:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <SystemInit+0x28>)
 80077b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <SystemInit+0x28>)
 80077c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077c6:	609a      	str	r2, [r3, #8]
#endif
}
 80077c8:	bf00      	nop
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	e000ed00 	.word	0xe000ed00

080077d8 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80077d8:	b598      	push	{r3, r4, r7, lr}
 80077da:	af00      	add	r7, sp, #0
	lcd_init();
 80077dc:	f7f9 fc1c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80077e0:	483b      	ldr	r0, [pc, #236]	; (80078d0 <cppInit+0xf8>)
 80077e2:	f7fd fd8f 	bl	8005304 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80077e6:	2064      	movs	r0, #100	; 0x64
 80077e8:	f002 fa0e 	bl	8009c08 <HAL_Delay>
	power_sensor.updateValues();
 80077ec:	4838      	ldr	r0, [pc, #224]	; (80078d0 <cppInit+0xf8>)
 80077ee:	f7fd fd97 	bl	8005320 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80077f2:	f7f9 fc55 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80077f6:	2100      	movs	r1, #0
 80077f8:	2000      	movs	r0, #0
 80077fa:	f7f9 fc61 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80077fe:	4835      	ldr	r0, [pc, #212]	; (80078d4 <cppInit+0xfc>)
 8007800:	f7f9 fc88 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007804:	2101      	movs	r1, #1
 8007806:	2000      	movs	r0, #0
 8007808:	f7f9 fc5a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800780c:	4830      	ldr	r0, [pc, #192]	; (80078d0 <cppInit+0xf8>)
 800780e:	f7fd fdb1 	bl	8005374 <_ZN11PowerSensor17getButteryVoltageEv>
 8007812:	ee10 3a10 	vmov	r3, s0
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 feae 	bl	8000578 <__aeabi_f2d>
 800781c:	4603      	mov	r3, r0
 800781e:	460c      	mov	r4, r1
 8007820:	461a      	mov	r2, r3
 8007822:	4623      	mov	r3, r4
 8007824:	482c      	ldr	r0, [pc, #176]	; (80078d8 <cppInit+0x100>)
 8007826:	f7f9 fc75 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 800782a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800782e:	f002 f9eb 	bl	8009c08 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007832:	482a      	ldr	r0, [pc, #168]	; (80078dc <cppInit+0x104>)
 8007834:	f7fd f854 	bl	80048e0 <_ZN6Logger10sdCardInitEv>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <cppInit+0x76>
		led.fullColor('G');
 800783e:	2147      	movs	r1, #71	; 0x47
 8007840:	4827      	ldr	r0, [pc, #156]	; (80078e0 <cppInit+0x108>)
 8007842:	f7fa fc57 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007846:	2064      	movs	r0, #100	; 0x64
 8007848:	f002 f9de 	bl	8009c08 <HAL_Delay>
 800784c:	e006      	b.n	800785c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800784e:	2152      	movs	r1, #82	; 0x52
 8007850:	4823      	ldr	r0, [pc, #140]	; (80078e0 <cppInit+0x108>)
 8007852:	f7fa fc4f 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007856:	2064      	movs	r0, #100	; 0x64
 8007858:	f002 f9d6 	bl	8009c08 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800785c:	4821      	ldr	r0, [pc, #132]	; (80078e4 <cppInit+0x10c>)
 800785e:	f7fa fda5 	bl	80023ac <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007862:	4821      	ldr	r0, [pc, #132]	; (80078e8 <cppInit+0x110>)
 8007864:	f7fd faf6 	bl	8004e54 <_ZN5Motor4initEv>
	encoder.init();
 8007868:	4820      	ldr	r0, [pc, #128]	; (80078ec <cppInit+0x114>)
 800786a:	f7f9 fddf 	bl	800142c <_ZN7Encoder4initEv>
	imu.init();
 800786e:	4820      	ldr	r0, [pc, #128]	; (80078f0 <cppInit+0x118>)
 8007870:	f7fa fa00 	bl	8001c74 <_ZN3IMU4initEv>
	line_trace.init();
 8007874:	481f      	ldr	r0, [pc, #124]	; (80078f4 <cppInit+0x11c>)
 8007876:	f7fc f8a1 	bl	80039bc <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800787a:	481a      	ldr	r0, [pc, #104]	; (80078e4 <cppInit+0x10c>)
 800787c:	f7fa fe8c 	bl	8002598 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007884:	f002 f9c0 	bl	8009c08 <HAL_Delay>

	led.fullColor('M');
 8007888:	214d      	movs	r1, #77	; 0x4d
 800788a:	4815      	ldr	r0, [pc, #84]	; (80078e0 <cppInit+0x108>)
 800788c:	f7fa fc32 	bl	80020f4 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007890:	4817      	ldr	r0, [pc, #92]	; (80078f0 <cppInit+0x118>)
 8007892:	f7fa fab7 	bl	8001e04 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007896:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80078f8 <cppInit+0x120>
 800789a:	eddf 0a18 	vldr	s1, [pc, #96]	; 80078fc <cppInit+0x124>
 800789e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007900 <cppInit+0x128>
 80078a2:	4818      	ldr	r0, [pc, #96]	; (8007904 <cppInit+0x12c>)
 80078a4:	f7fe f9ac 	bl	8005c00 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80078a8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80078f8 <cppInit+0x120>
 80078ac:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007908 <cppInit+0x130>
 80078b0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800790c <cppInit+0x134>
 80078b4:	4813      	ldr	r0, [pc, #76]	; (8007904 <cppInit+0x12c>)
 80078b6:	f7fe f9bc 	bl	8005c32 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80078ba:	4815      	ldr	r0, [pc, #84]	; (8007910 <cppInit+0x138>)
 80078bc:	f7fd fc2c 	bl	8005118 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80078c0:	4814      	ldr	r0, [pc, #80]	; (8007914 <cppInit+0x13c>)
 80078c2:	f7fd fcc3 	bl	800524c <_ZN13PathFollowing4initEv>

	esc.init();
 80078c6:	4814      	ldr	r0, [pc, #80]	; (8007918 <cppInit+0x140>)
 80078c8:	f7f9 fc90 	bl	80011ec <_ZN3ESC4initEv>

}
 80078cc:	bf00      	nop
 80078ce:	bd98      	pop	{r3, r4, r7, pc}
 80078d0:	2000054c 	.word	0x2000054c
 80078d4:	08018c6c 	.word	0x08018c6c
 80078d8:	08018c74 	.word	0x08018c74
 80078dc:	2000056c 	.word	0x2000056c
 80078e0:	20000548 	.word	0x20000548
 80078e4:	20000238 	.word	0x20000238
 80078e8:	20000544 	.word	0x20000544
 80078ec:	200237f8 	.word	0x200237f8
 80078f0:	20000558 	.word	0x20000558
 80078f4:	2002389c 	.word	0x2002389c
 80078f8:	00000000 	.word	0x00000000
 80078fc:	4129999a 	.word	0x4129999a
 8007900:	3f99999a 	.word	0x3f99999a
 8007904:	2002381c 	.word	0x2002381c
 8007908:	3f5e3fbc 	.word	0x3f5e3fbc
 800790c:	3d75c28f 	.word	0x3d75c28f
 8007910:	20023858 	.word	0x20023858
 8007914:	200309e8 	.word	0x200309e8
 8007918:	20023898 	.word	0x20023898

0800791c <cppFlip1ms>:

void cppFlip1ms(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007920:	480c      	ldr	r0, [pc, #48]	; (8007954 <cppFlip1ms+0x38>)
 8007922:	f7fa fda1 	bl	8002468 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007926:	480c      	ldr	r0, [pc, #48]	; (8007958 <cppFlip1ms+0x3c>)
 8007928:	f7fa f9ca 	bl	8001cc0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 800792c:	480b      	ldr	r0, [pc, #44]	; (800795c <cppFlip1ms+0x40>)
 800792e:	f7f9 fd9f 	bl	8001470 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007932:	480b      	ldr	r0, [pc, #44]	; (8007960 <cppFlip1ms+0x44>)
 8007934:	f7fc fae8 	bl	8003f08 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007938:	480a      	ldr	r0, [pc, #40]	; (8007964 <cppFlip1ms+0x48>)
 800793a:	f7fe f993 	bl	8005c64 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800793e:	480a      	ldr	r0, [pc, #40]	; (8007968 <cppFlip1ms+0x4c>)
 8007940:	f7fd fbce 	bl	80050e0 <_ZN8Odometry4flipEv>
	//side_sensor.updateStatus();

	motor.motorCtrl();
 8007944:	4809      	ldr	r0, [pc, #36]	; (800796c <cppFlip1ms+0x50>)
 8007946:	f7fd fa97 	bl	8004e78 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800794a:	4804      	ldr	r0, [pc, #16]	; (800795c <cppFlip1ms+0x40>)
 800794c:	f7f9 fe1c 	bl	8001588 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007950:	bf00      	nop
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000238 	.word	0x20000238
 8007958:	20000558 	.word	0x20000558
 800795c:	200237f8 	.word	0x200237f8
 8007960:	2002389c 	.word	0x2002389c
 8007964:	2002381c 	.word	0x2002381c
 8007968:	20023858 	.word	0x20023858
 800796c:	20000544 	.word	0x20000544

08007970 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <cppFlip100ns+0x10>)
 8007976:	f7fa fd29 	bl	80023cc <_ZN10LineSensor17storeSensorValuesEv>
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000238 	.word	0x20000238

08007984 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007988:	bf00      	nop
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d103      	bne.n	80079ac <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 80079a4:	4807      	ldr	r0, [pc, #28]	; (80079c4 <cppExit+0x30>)
 80079a6:	f7fd fd61 	bl	800546c <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 80079aa:	e006      	b.n	80079ba <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b2:	d102      	bne.n	80079ba <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 80079b4:	4803      	ldr	r0, [pc, #12]	; (80079c4 <cppExit+0x30>)
 80079b6:	f7fd fd83 	bl	80054c0 <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000530 	.word	0x20000530

080079c8 <cppLoop>:

void cppLoop(void)
{
 80079c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80079ce:	4baf      	ldr	r3, [pc, #700]	; (8007c8c <cppLoop+0x2c4>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f3bf 8f5b 	dmb	ish
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d015      	beq.n	8007a16 <cppLoop+0x4e>
 80079ea:	48a8      	ldr	r0, [pc, #672]	; (8007c8c <cppLoop+0x2c4>)
 80079ec:	f00c fe09 	bl	8014602 <__cxa_guard_acquire>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <cppLoop+0x4e>
 8007a00:	48a3      	ldr	r0, [pc, #652]	; (8007c90 <cppLoop+0x2c8>)
 8007a02:	f7fc f8e2 	bl	8003bca <_ZN9LineTrace5getKpEv>
 8007a06:	eef0 7a40 	vmov.f32	s15, s0
 8007a0a:	4ba2      	ldr	r3, [pc, #648]	; (8007c94 <cppLoop+0x2cc>)
 8007a0c:	edc3 7a00 	vstr	s15, [r3]
 8007a10:	489e      	ldr	r0, [pc, #632]	; (8007c8c <cppLoop+0x2c4>)
 8007a12:	f00c fe02 	bl	801461a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007a16:	4ba0      	ldr	r3, [pc, #640]	; (8007c98 <cppLoop+0x2d0>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	f3bf 8f5b 	dmb	ish
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d015      	beq.n	8007a5e <cppLoop+0x96>
 8007a32:	4899      	ldr	r0, [pc, #612]	; (8007c98 <cppLoop+0x2d0>)
 8007a34:	f00c fde5 	bl	8014602 <__cxa_guard_acquire>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <cppLoop+0x96>
 8007a48:	4891      	ldr	r0, [pc, #580]	; (8007c90 <cppLoop+0x2c8>)
 8007a4a:	f7fc f8cd 	bl	8003be8 <_ZN9LineTrace5getKiEv>
 8007a4e:	eef0 7a40 	vmov.f32	s15, s0
 8007a52:	4b92      	ldr	r3, [pc, #584]	; (8007c9c <cppLoop+0x2d4>)
 8007a54:	edc3 7a00 	vstr	s15, [r3]
 8007a58:	488f      	ldr	r0, [pc, #572]	; (8007c98 <cppLoop+0x2d0>)
 8007a5a:	f00c fdde 	bl	801461a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007a5e:	4b90      	ldr	r3, [pc, #576]	; (8007ca0 <cppLoop+0x2d8>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f3bf 8f5b 	dmb	ish
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d015      	beq.n	8007aa6 <cppLoop+0xde>
 8007a7a:	4889      	ldr	r0, [pc, #548]	; (8007ca0 <cppLoop+0x2d8>)
 8007a7c:	f00c fdc1 	bl	8014602 <__cxa_guard_acquire>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <cppLoop+0xde>
 8007a90:	487f      	ldr	r0, [pc, #508]	; (8007c90 <cppLoop+0x2c8>)
 8007a92:	f7fc f8b8 	bl	8003c06 <_ZN9LineTrace5getKdEv>
 8007a96:	eef0 7a40 	vmov.f32	s15, s0
 8007a9a:	4b82      	ldr	r3, [pc, #520]	; (8007ca4 <cppLoop+0x2dc>)
 8007a9c:	edc3 7a00 	vstr	s15, [r3]
 8007aa0:	487f      	ldr	r0, [pc, #508]	; (8007ca0 <cppLoop+0x2d8>)
 8007aa2:	f00c fdba 	bl	801461a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007aa6:	4b80      	ldr	r3, [pc, #512]	; (8007ca8 <cppLoop+0x2e0>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f3bf 8f5b 	dmb	ish
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d015      	beq.n	8007aee <cppLoop+0x126>
 8007ac2:	4879      	ldr	r0, [pc, #484]	; (8007ca8 <cppLoop+0x2e0>)
 8007ac4:	f00c fd9d 	bl	8014602 <__cxa_guard_acquire>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bf14      	ite	ne
 8007ace:	2301      	movne	r3, #1
 8007ad0:	2300      	moveq	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <cppLoop+0x126>
 8007ad8:	486d      	ldr	r0, [pc, #436]	; (8007c90 <cppLoop+0x2c8>)
 8007ada:	f7fc f8bc 	bl	8003c56 <_ZN9LineTrace9getKpSlowEv>
 8007ade:	eef0 7a40 	vmov.f32	s15, s0
 8007ae2:	4b72      	ldr	r3, [pc, #456]	; (8007cac <cppLoop+0x2e4>)
 8007ae4:	edc3 7a00 	vstr	s15, [r3]
 8007ae8:	486f      	ldr	r0, [pc, #444]	; (8007ca8 <cppLoop+0x2e0>)
 8007aea:	f00c fd96 	bl	801461a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007aee:	4b70      	ldr	r3, [pc, #448]	; (8007cb0 <cppLoop+0x2e8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	f3bf 8f5b 	dmb	ish
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bf0c      	ite	eq
 8007b00:	2301      	moveq	r3, #1
 8007b02:	2300      	movne	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d015      	beq.n	8007b36 <cppLoop+0x16e>
 8007b0a:	4869      	ldr	r0, [pc, #420]	; (8007cb0 <cppLoop+0x2e8>)
 8007b0c:	f00c fd79 	bl	8014602 <__cxa_guard_acquire>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <cppLoop+0x16e>
 8007b20:	485b      	ldr	r0, [pc, #364]	; (8007c90 <cppLoop+0x2c8>)
 8007b22:	f7fc f8a7 	bl	8003c74 <_ZN9LineTrace9getKiSlowEv>
 8007b26:	eef0 7a40 	vmov.f32	s15, s0
 8007b2a:	4b62      	ldr	r3, [pc, #392]	; (8007cb4 <cppLoop+0x2ec>)
 8007b2c:	edc3 7a00 	vstr	s15, [r3]
 8007b30:	485f      	ldr	r0, [pc, #380]	; (8007cb0 <cppLoop+0x2e8>)
 8007b32:	f00c fd72 	bl	801461a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007b36:	4b60      	ldr	r3, [pc, #384]	; (8007cb8 <cppLoop+0x2f0>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f3bf 8f5b 	dmb	ish
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d015      	beq.n	8007b7e <cppLoop+0x1b6>
 8007b52:	4859      	ldr	r0, [pc, #356]	; (8007cb8 <cppLoop+0x2f0>)
 8007b54:	f00c fd55 	bl	8014602 <__cxa_guard_acquire>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <cppLoop+0x1b6>
 8007b68:	4849      	ldr	r0, [pc, #292]	; (8007c90 <cppLoop+0x2c8>)
 8007b6a:	f7fc f892 	bl	8003c92 <_ZN9LineTrace9getKdSlowEv>
 8007b6e:	eef0 7a40 	vmov.f32	s15, s0
 8007b72:	4b52      	ldr	r3, [pc, #328]	; (8007cbc <cppLoop+0x2f4>)
 8007b74:	edc3 7a00 	vstr	s15, [r3]
 8007b78:	484f      	ldr	r0, [pc, #316]	; (8007cb8 <cppLoop+0x2f0>)
 8007b7a:	f00c fd4e 	bl	801461a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007b7e:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <cppLoop+0x2f8>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f3bf 8f5b 	dmb	ish
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d015      	beq.n	8007bc6 <cppLoop+0x1fe>
 8007b9a:	4849      	ldr	r0, [pc, #292]	; (8007cc0 <cppLoop+0x2f8>)
 8007b9c:	f00c fd31 	bl	8014602 <__cxa_guard_acquire>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf14      	ite	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	2300      	moveq	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <cppLoop+0x1fe>
 8007bb0:	4837      	ldr	r0, [pc, #220]	; (8007c90 <cppLoop+0x2c8>)
 8007bb2:	f7fc f8dc 	bl	8003d6e <_ZN9LineTrace17getTargetVelocityEv>
 8007bb6:	eef0 7a40 	vmov.f32	s15, s0
 8007bba:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <cppLoop+0x2fc>)
 8007bbc:	edc3 7a00 	vstr	s15, [r3]
 8007bc0:	483f      	ldr	r0, [pc, #252]	; (8007cc0 <cppLoop+0x2f8>)
 8007bc2:	f00c fd2a 	bl	801461a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007bc6:	4b40      	ldr	r3, [pc, #256]	; (8007cc8 <cppLoop+0x300>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f3bf 8f5b 	dmb	ish
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d015      	beq.n	8007c0e <cppLoop+0x246>
 8007be2:	4839      	ldr	r0, [pc, #228]	; (8007cc8 <cppLoop+0x300>)
 8007be4:	f00c fd0d 	bl	8014602 <__cxa_guard_acquire>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	2300      	moveq	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <cppLoop+0x246>
 8007bf8:	4825      	ldr	r0, [pc, #148]	; (8007c90 <cppLoop+0x2c8>)
 8007bfa:	f7fc f8c8 	bl	8003d8e <_ZN9LineTrace14getMaxVelocityEv>
 8007bfe:	eef0 7a40 	vmov.f32	s15, s0
 8007c02:	4b32      	ldr	r3, [pc, #200]	; (8007ccc <cppLoop+0x304>)
 8007c04:	edc3 7a00 	vstr	s15, [r3]
 8007c08:	482f      	ldr	r0, [pc, #188]	; (8007cc8 <cppLoop+0x300>)
 8007c0a:	f00c fd06 	bl	801461a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007c0e:	4b30      	ldr	r3, [pc, #192]	; (8007cd0 <cppLoop+0x308>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f3bf 8f5b 	dmb	ish
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d015      	beq.n	8007c56 <cppLoop+0x28e>
 8007c2a:	4829      	ldr	r0, [pc, #164]	; (8007cd0 <cppLoop+0x308>)
 8007c2c:	f00c fce9 	bl	8014602 <__cxa_guard_acquire>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <cppLoop+0x28e>
 8007c40:	4813      	ldr	r0, [pc, #76]	; (8007c90 <cppLoop+0x2c8>)
 8007c42:	f7fc f8b4 	bl	8003dae <_ZN9LineTrace15getMaxVelocity2Ev>
 8007c46:	eef0 7a40 	vmov.f32	s15, s0
 8007c4a:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <cppLoop+0x30c>)
 8007c4c:	edc3 7a00 	vstr	s15, [r3]
 8007c50:	481f      	ldr	r0, [pc, #124]	; (8007cd0 <cppLoop+0x308>)
 8007c52:	f00c fce2 	bl	801461a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <cppLoop+0x310>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f3bf 8f5b 	dmb	ish
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d03f      	beq.n	8007cf2 <cppLoop+0x32a>
 8007c72:	4819      	ldr	r0, [pc, #100]	; (8007cd8 <cppLoop+0x310>)
 8007c74:	f00c fcc5 	bl	8014602 <__cxa_guard_acquire>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d034      	beq.n	8007cf2 <cppLoop+0x32a>
 8007c88:	e028      	b.n	8007cdc <cppLoop+0x314>
 8007c8a:	bf00      	nop
 8007c8c:	20048120 	.word	0x20048120
 8007c90:	2002389c 	.word	0x2002389c
 8007c94:	2004811c 	.word	0x2004811c
 8007c98:	20048128 	.word	0x20048128
 8007c9c:	20048124 	.word	0x20048124
 8007ca0:	20048130 	.word	0x20048130
 8007ca4:	2004812c 	.word	0x2004812c
 8007ca8:	20048138 	.word	0x20048138
 8007cac:	20048134 	.word	0x20048134
 8007cb0:	20048140 	.word	0x20048140
 8007cb4:	2004813c 	.word	0x2004813c
 8007cb8:	20048148 	.word	0x20048148
 8007cbc:	20048144 	.word	0x20048144
 8007cc0:	20048150 	.word	0x20048150
 8007cc4:	2004814c 	.word	0x2004814c
 8007cc8:	20048158 	.word	0x20048158
 8007ccc:	20048154 	.word	0x20048154
 8007cd0:	20048160 	.word	0x20048160
 8007cd4:	2004815c 	.word	0x2004815c
 8007cd8:	20048168 	.word	0x20048168
 8007cdc:	48b6      	ldr	r0, [pc, #728]	; (8007fb8 <cppLoop+0x5f0>)
 8007cde:	f7fc f876 	bl	8003dce <_ZN9LineTrace14getMinVelocityEv>
 8007ce2:	eef0 7a40 	vmov.f32	s15, s0
 8007ce6:	4bb5      	ldr	r3, [pc, #724]	; (8007fbc <cppLoop+0x5f4>)
 8007ce8:	edc3 7a00 	vstr	s15, [r3]
 8007cec:	48b4      	ldr	r0, [pc, #720]	; (8007fc0 <cppLoop+0x5f8>)
 8007cee:	f00c fc94 	bl	801461a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007cf2:	4bb4      	ldr	r3, [pc, #720]	; (8007fc4 <cppLoop+0x5fc>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f3bf 8f5b 	dmb	ish
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bf0c      	ite	eq
 8007d04:	2301      	moveq	r3, #1
 8007d06:	2300      	movne	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d015      	beq.n	8007d3a <cppLoop+0x372>
 8007d0e:	48ad      	ldr	r0, [pc, #692]	; (8007fc4 <cppLoop+0x5fc>)
 8007d10:	f00c fc77 	bl	8014602 <__cxa_guard_acquire>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bf14      	ite	ne
 8007d1a:	2301      	movne	r3, #1
 8007d1c:	2300      	moveq	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <cppLoop+0x372>
 8007d24:	48a4      	ldr	r0, [pc, #656]	; (8007fb8 <cppLoop+0x5f0>)
 8007d26:	f7fc f862 	bl	8003dee <_ZN9LineTrace15getMinVelocity2Ev>
 8007d2a:	eef0 7a40 	vmov.f32	s15, s0
 8007d2e:	4ba6      	ldr	r3, [pc, #664]	; (8007fc8 <cppLoop+0x600>)
 8007d30:	edc3 7a00 	vstr	s15, [r3]
 8007d34:	48a3      	ldr	r0, [pc, #652]	; (8007fc4 <cppLoop+0x5fc>)
 8007d36:	f00c fc70 	bl	801461a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007d3a:	4ba4      	ldr	r3, [pc, #656]	; (8007fcc <cppLoop+0x604>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f3bf 8f5b 	dmb	ish
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2301      	moveq	r3, #1
 8007d4e:	2300      	movne	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d015      	beq.n	8007d82 <cppLoop+0x3ba>
 8007d56:	489d      	ldr	r0, [pc, #628]	; (8007fcc <cppLoop+0x604>)
 8007d58:	f00c fc53 	bl	8014602 <__cxa_guard_acquire>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <cppLoop+0x3ba>
 8007d6c:	4892      	ldr	r0, [pc, #584]	; (8007fb8 <cppLoop+0x5f0>)
 8007d6e:	f7fc f882 	bl	8003e76 <_ZN9LineTrace9getMaxAccEv>
 8007d72:	eef0 7a40 	vmov.f32	s15, s0
 8007d76:	4b96      	ldr	r3, [pc, #600]	; (8007fd0 <cppLoop+0x608>)
 8007d78:	edc3 7a00 	vstr	s15, [r3]
 8007d7c:	4893      	ldr	r0, [pc, #588]	; (8007fcc <cppLoop+0x604>)
 8007d7e:	f00c fc4c 	bl	801461a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007d82:	4b94      	ldr	r3, [pc, #592]	; (8007fd4 <cppLoop+0x60c>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	f3bf 8f5b 	dmb	ish
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bf0c      	ite	eq
 8007d94:	2301      	moveq	r3, #1
 8007d96:	2300      	movne	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <cppLoop+0x402>
 8007d9e:	488d      	ldr	r0, [pc, #564]	; (8007fd4 <cppLoop+0x60c>)
 8007da0:	f00c fc2f 	bl	8014602 <__cxa_guard_acquire>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf14      	ite	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	2300      	moveq	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <cppLoop+0x402>
 8007db4:	4880      	ldr	r0, [pc, #512]	; (8007fb8 <cppLoop+0x5f0>)
 8007db6:	f7fc f894 	bl	8003ee2 <_ZN9LineTrace9getMaxDecEv>
 8007dba:	eef0 7a40 	vmov.f32	s15, s0
 8007dbe:	4b86      	ldr	r3, [pc, #536]	; (8007fd8 <cppLoop+0x610>)
 8007dc0:	edc3 7a00 	vstr	s15, [r3]
 8007dc4:	4883      	ldr	r0, [pc, #524]	; (8007fd4 <cppLoop+0x60c>)
 8007dc6:	f00c fc28 	bl	801461a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007dca:	4b84      	ldr	r3, [pc, #528]	; (8007fdc <cppLoop+0x614>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f3bf 8f5b 	dmb	ish
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d015      	beq.n	8007e12 <cppLoop+0x44a>
 8007de6:	487d      	ldr	r0, [pc, #500]	; (8007fdc <cppLoop+0x614>)
 8007de8:	f00c fc0b 	bl	8014602 <__cxa_guard_acquire>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bf14      	ite	ne
 8007df2:	2301      	movne	r3, #1
 8007df4:	2300      	moveq	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <cppLoop+0x44a>
 8007dfc:	486e      	ldr	r0, [pc, #440]	; (8007fb8 <cppLoop+0x5f0>)
 8007dfe:	f7fc f85e 	bl	8003ebe <_ZN9LineTrace10getMaxAcc2Ev>
 8007e02:	eef0 7a40 	vmov.f32	s15, s0
 8007e06:	4b76      	ldr	r3, [pc, #472]	; (8007fe0 <cppLoop+0x618>)
 8007e08:	edc3 7a00 	vstr	s15, [r3]
 8007e0c:	4873      	ldr	r0, [pc, #460]	; (8007fdc <cppLoop+0x614>)
 8007e0e:	f00c fc04 	bl	801461a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007e12:	4b74      	ldr	r3, [pc, #464]	; (8007fe4 <cppLoop+0x61c>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f3bf 8f5b 	dmb	ish
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d015      	beq.n	8007e5a <cppLoop+0x492>
 8007e2e:	486d      	ldr	r0, [pc, #436]	; (8007fe4 <cppLoop+0x61c>)
 8007e30:	f00c fbe7 	bl	8014602 <__cxa_guard_acquire>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2301      	movne	r3, #1
 8007e3c:	2300      	moveq	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <cppLoop+0x492>
 8007e44:	485c      	ldr	r0, [pc, #368]	; (8007fb8 <cppLoop+0x5f0>)
 8007e46:	f7fc f828 	bl	8003e9a <_ZN9LineTrace10getMaxDec2Ev>
 8007e4a:	eef0 7a40 	vmov.f32	s15, s0
 8007e4e:	4b66      	ldr	r3, [pc, #408]	; (8007fe8 <cppLoop+0x620>)
 8007e50:	edc3 7a00 	vstr	s15, [r3]
 8007e54:	4863      	ldr	r0, [pc, #396]	; (8007fe4 <cppLoop+0x61c>)
 8007e56:	f00c fbe0 	bl	801461a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007e5a:	4864      	ldr	r0, [pc, #400]	; (8007fec <cppLoop+0x624>)
 8007e5c:	f7fd fa9a 	bl	8005394 <_ZN12RotarySwitch8getValueEv>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b0f      	cmp	r3, #15
 8007e64:	f201 8586 	bhi.w	8009974 <cppLoop+0x1fac>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <cppLoop+0x4a8>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08008235 	.word	0x08008235
 8007e78:	08008351 	.word	0x08008351
 8007e7c:	080084a3 	.word	0x080084a3
 8007e80:	08008597 	.word	0x08008597
 8007e84:	08008839 	.word	0x08008839
 8007e88:	080089a1 	.word	0x080089a1
 8007e8c:	08008c25 	.word	0x08008c25
 8007e90:	08008e6f 	.word	0x08008e6f
 8007e94:	080090ff 	.word	0x080090ff
 8007e98:	080091bb 	.word	0x080091bb
 8007e9c:	080092b1 	.word	0x080092b1
 8007ea0:	08009337 	.word	0x08009337
 8007ea4:	080093fd 	.word	0x080093fd
 8007ea8:	080094c3 	.word	0x080094c3
 8007eac:	08009605 	.word	0x08009605
	case 0:
		led.fullColor('W');
 8007eb0:	2157      	movs	r1, #87	; 0x57
 8007eb2:	484f      	ldr	r0, [pc, #316]	; (8007ff0 <cppLoop+0x628>)
 8007eb4:	f7fa f91e 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007eb8:	f7f9 f8f2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	f7f9 f8fe 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8007ec4:	483c      	ldr	r0, [pc, #240]	; (8007fb8 <cppLoop+0x5f0>)
 8007ec6:	f7fb fec6 	bl	8003c56 <_ZN9LineTrace9getKpSlowEv>
 8007eca:	eeb0 7a40 	vmov.f32	s14, s0
 8007ece:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007ff4 <cppLoop+0x62c>
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8007eda:	f7fa fccd 	bl	8002878 <_ZSt3absf>
 8007ede:	ee10 3a10 	vmov	r3, s0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f8 fb48 	bl	8000578 <__aeabi_f2d>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	460c      	mov	r4, r1
 8007eec:	461a      	mov	r2, r3
 8007eee:	4623      	mov	r3, r4
 8007ef0:	4841      	ldr	r0, [pc, #260]	; (8007ff8 <cppLoop+0x630>)
 8007ef2:	f7f9 f90f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f7f9 f8e1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 8007efe:	482e      	ldr	r0, [pc, #184]	; (8007fb8 <cppLoop+0x5f0>)
 8007f00:	f7fb feb8 	bl	8003c74 <_ZN9LineTrace9getKiSlowEv>
 8007f04:	eeb0 7a40 	vmov.f32	s14, s0
 8007f08:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007ffc <cppLoop+0x634>
 8007f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f10:	eeb0 0a67 	vmov.f32	s0, s15
 8007f14:	f7fa fcb0 	bl	8002878 <_ZSt3absf>
 8007f18:	ee10 3a10 	vmov	r3, s0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7f8 fb2b 	bl	8000578 <__aeabi_f2d>
 8007f22:	4605      	mov	r5, r0
 8007f24:	460e      	mov	r6, r1
 8007f26:	4824      	ldr	r0, [pc, #144]	; (8007fb8 <cppLoop+0x5f0>)
 8007f28:	f7fb feb3 	bl	8003c92 <_ZN9LineTrace9getKdSlowEv>
 8007f2c:	eeb0 7a40 	vmov.f32	s14, s0
 8007f30:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008000 <cppLoop+0x638>
 8007f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f38:	eeb0 0a67 	vmov.f32	s0, s15
 8007f3c:	f7fa fc9c 	bl	8002878 <_ZSt3absf>
 8007f40:	ee10 3a10 	vmov	r3, s0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 fb17 	bl	8000578 <__aeabi_f2d>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	e9cd 3400 	strd	r3, r4, [sp]
 8007f52:	462a      	mov	r2, r5
 8007f54:	4633      	mov	r3, r6
 8007f56:	482b      	ldr	r0, [pc, #172]	; (8008004 <cppLoop+0x63c>)
 8007f58:	f7f9 f8dc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007f5c:	482a      	ldr	r0, [pc, #168]	; (8008008 <cppLoop+0x640>)
 8007f5e:	f7fa f865 	bl	800202c <_ZN8JoyStick8getValueEv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04e      	beq.n	8008010 <cppLoop+0x648>
			led.LR(-1, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	f04f 31ff 	mov.w	r1, #4294967295
 8007f78:	481d      	ldr	r0, [pc, #116]	; (8007ff0 <cppLoop+0x628>)
 8007f7a:	f7fa f977 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f82:	f001 fe41 	bl	8009c08 <HAL_Delay>

			selector++;
 8007f86:	4b21      	ldr	r3, [pc, #132]	; (800800c <cppLoop+0x644>)
 8007f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3301      	adds	r3, #1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	b21a      	sxth	r2, r3
 8007f94:	4b1d      	ldr	r3, [pc, #116]	; (800800c <cppLoop+0x644>)
 8007f96:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <cppLoop+0x644>)
 8007f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dd02      	ble.n	8007fa8 <cppLoop+0x5e0>
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	; (800800c <cppLoop+0x644>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f04f 31ff 	mov.w	r1, #4294967295
 8007fae:	4810      	ldr	r0, [pc, #64]	; (8007ff0 <cppLoop+0x628>)
 8007fb0:	f7fa f95c 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8007fb4:	f001 bce0 	b.w	8009978 <cppLoop+0x1fb0>
 8007fb8:	2002389c 	.word	0x2002389c
 8007fbc:	20048164 	.word	0x20048164
 8007fc0:	20048168 	.word	0x20048168
 8007fc4:	20048170 	.word	0x20048170
 8007fc8:	2004816c 	.word	0x2004816c
 8007fcc:	20048178 	.word	0x20048178
 8007fd0:	20048174 	.word	0x20048174
 8007fd4:	20048180 	.word	0x20048180
 8007fd8:	2004817c 	.word	0x2004817c
 8007fdc:	20048188 	.word	0x20048188
 8007fe0:	20048184 	.word	0x20048184
 8007fe4:	20048190 	.word	0x20048190
 8007fe8:	2004818c 	.word	0x2004818c
 8007fec:	20000540 	.word	0x20000540
 8007ff0:	20000548 	.word	0x20000548
 8007ff4:	461c4000 	.word	0x461c4000
 8007ff8:	08018c78 	.word	0x08018c78
 8007ffc:	447a0000 	.word	0x447a0000
 8008000:	47c35000 	.word	0x47c35000
 8008004:	08018c84 	.word	0x08018c84
 8008008:	2000053c 	.word	0x2000053c
 800800c:	20048110 	.word	0x20048110
		else if(joy_stick.getValue() == JOY_R){
 8008010:	48bd      	ldr	r0, [pc, #756]	; (8008308 <cppLoop+0x940>)
 8008012:	f7fa f80b 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008016:	4603      	mov	r3, r0
 8008018:	2b10      	cmp	r3, #16
 800801a:	bf0c      	ite	eq
 800801c:	2301      	moveq	r3, #1
 800801e:	2300      	movne	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d059      	beq.n	80080da <cppLoop+0x712>
			led.LR(-1, 1);
 8008026:	2201      	movs	r2, #1
 8008028:	f04f 31ff 	mov.w	r1, #4294967295
 800802c:	48b7      	ldr	r0, [pc, #732]	; (800830c <cppLoop+0x944>)
 800802e:	f7fa f91d 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008032:	2064      	movs	r0, #100	; 0x64
 8008034:	f001 fde8 	bl	8009c08 <HAL_Delay>
			if(selector == 0){
 8008038:	4bb5      	ldr	r3, [pc, #724]	; (8008310 <cppLoop+0x948>)
 800803a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d113      	bne.n	800806a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008042:	4bb4      	ldr	r3, [pc, #720]	; (8008314 <cppLoop+0x94c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 fa96 	bl	8000578 <__aeabi_f2d>
 800804c:	a3a8      	add	r3, pc, #672	; (adr r3, 80082f0 <cppLoop+0x928>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f7f8 f933 	bl	80002bc <__adddf3>
 8008056:	4603      	mov	r3, r0
 8008058:	460c      	mov	r4, r1
 800805a:	4618      	mov	r0, r3
 800805c:	4621      	mov	r1, r4
 800805e:	f7f8 fddb 	bl	8000c18 <__aeabi_d2f>
 8008062:	4602      	mov	r2, r0
 8008064:	4bab      	ldr	r3, [pc, #684]	; (8008314 <cppLoop+0x94c>)
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e02b      	b.n	80080c2 <cppLoop+0x6fa>
			else if(selector == 1){
 800806a:	4ba9      	ldr	r3, [pc, #676]	; (8008310 <cppLoop+0x948>)
 800806c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d113      	bne.n	800809c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008074:	4ba8      	ldr	r3, [pc, #672]	; (8008318 <cppLoop+0x950>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f7f8 fa7d 	bl	8000578 <__aeabi_f2d>
 800807e:	a39e      	add	r3, pc, #632	; (adr r3, 80082f8 <cppLoop+0x930>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 f91a 	bl	80002bc <__adddf3>
 8008088:	4603      	mov	r3, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4618      	mov	r0, r3
 800808e:	4621      	mov	r1, r4
 8008090:	f7f8 fdc2 	bl	8000c18 <__aeabi_d2f>
 8008094:	4602      	mov	r2, r0
 8008096:	4ba0      	ldr	r3, [pc, #640]	; (8008318 <cppLoop+0x950>)
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e012      	b.n	80080c2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 800809c:	4b9f      	ldr	r3, [pc, #636]	; (800831c <cppLoop+0x954>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7f8 fa69 	bl	8000578 <__aeabi_f2d>
 80080a6:	a396      	add	r3, pc, #600	; (adr r3, 8008300 <cppLoop+0x938>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f906 	bl	80002bc <__adddf3>
 80080b0:	4603      	mov	r3, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	4618      	mov	r0, r3
 80080b6:	4621      	mov	r1, r4
 80080b8:	f7f8 fdae 	bl	8000c18 <__aeabi_d2f>
 80080bc:	4602      	mov	r2, r0
 80080be:	4b97      	ldr	r3, [pc, #604]	; (800831c <cppLoop+0x954>)
 80080c0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80080c2:	2152      	movs	r1, #82	; 0x52
 80080c4:	4891      	ldr	r0, [pc, #580]	; (800830c <cppLoop+0x944>)
 80080c6:	f7fa f815 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80080ca:	2200      	movs	r2, #0
 80080cc:	f04f 31ff 	mov.w	r1, #4294967295
 80080d0:	488e      	ldr	r0, [pc, #568]	; (800830c <cppLoop+0x944>)
 80080d2:	f7fa f8cb 	bl	800226c <_ZN3LED2LREaa>
		break;
 80080d6:	f001 bc4f 	b.w	8009978 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 80080da:	488b      	ldr	r0, [pc, #556]	; (8008308 <cppLoop+0x940>)
 80080dc:	f7f9 ffa6 	bl	800202c <_ZN8JoyStick8getValueEv>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	bf0c      	ite	eq
 80080e6:	2301      	moveq	r3, #1
 80080e8:	2300      	movne	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d059      	beq.n	80081a4 <cppLoop+0x7dc>
			led.LR(-1, 1);
 80080f0:	2201      	movs	r2, #1
 80080f2:	f04f 31ff 	mov.w	r1, #4294967295
 80080f6:	4885      	ldr	r0, [pc, #532]	; (800830c <cppLoop+0x944>)
 80080f8:	f7fa f8b8 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080fc:	2064      	movs	r0, #100	; 0x64
 80080fe:	f001 fd83 	bl	8009c08 <HAL_Delay>
			if(selector == 0){
 8008102:	4b83      	ldr	r3, [pc, #524]	; (8008310 <cppLoop+0x948>)
 8008104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d113      	bne.n	8008134 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 800810c:	4b81      	ldr	r3, [pc, #516]	; (8008314 <cppLoop+0x94c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f7f8 fa31 	bl	8000578 <__aeabi_f2d>
 8008116:	a376      	add	r3, pc, #472	; (adr r3, 80082f0 <cppLoop+0x928>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f7f8 f8cc 	bl	80002b8 <__aeabi_dsub>
 8008120:	4603      	mov	r3, r0
 8008122:	460c      	mov	r4, r1
 8008124:	4618      	mov	r0, r3
 8008126:	4621      	mov	r1, r4
 8008128:	f7f8 fd76 	bl	8000c18 <__aeabi_d2f>
 800812c:	4602      	mov	r2, r0
 800812e:	4b79      	ldr	r3, [pc, #484]	; (8008314 <cppLoop+0x94c>)
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e02b      	b.n	800818c <cppLoop+0x7c4>
			else if(selector == 1){
 8008134:	4b76      	ldr	r3, [pc, #472]	; (8008310 <cppLoop+0x948>)
 8008136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d113      	bne.n	8008166 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 800813e:	4b76      	ldr	r3, [pc, #472]	; (8008318 <cppLoop+0x950>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f7f8 fa18 	bl	8000578 <__aeabi_f2d>
 8008148:	a36b      	add	r3, pc, #428	; (adr r3, 80082f8 <cppLoop+0x930>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f8b3 	bl	80002b8 <__aeabi_dsub>
 8008152:	4603      	mov	r3, r0
 8008154:	460c      	mov	r4, r1
 8008156:	4618      	mov	r0, r3
 8008158:	4621      	mov	r1, r4
 800815a:	f7f8 fd5d 	bl	8000c18 <__aeabi_d2f>
 800815e:	4602      	mov	r2, r0
 8008160:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <cppLoop+0x950>)
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e012      	b.n	800818c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 8008166:	4b6d      	ldr	r3, [pc, #436]	; (800831c <cppLoop+0x954>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f7f8 fa04 	bl	8000578 <__aeabi_f2d>
 8008170:	a363      	add	r3, pc, #396	; (adr r3, 8008300 <cppLoop+0x938>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 f89f 	bl	80002b8 <__aeabi_dsub>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	4618      	mov	r0, r3
 8008180:	4621      	mov	r1, r4
 8008182:	f7f8 fd49 	bl	8000c18 <__aeabi_d2f>
 8008186:	4602      	mov	r2, r0
 8008188:	4b64      	ldr	r3, [pc, #400]	; (800831c <cppLoop+0x954>)
 800818a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800818c:	2152      	movs	r1, #82	; 0x52
 800818e:	485f      	ldr	r0, [pc, #380]	; (800830c <cppLoop+0x944>)
 8008190:	f7f9 ffb0 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008194:	2200      	movs	r2, #0
 8008196:	f04f 31ff 	mov.w	r1, #4294967295
 800819a:	485c      	ldr	r0, [pc, #368]	; (800830c <cppLoop+0x944>)
 800819c:	f7fa f866 	bl	800226c <_ZN3LED2LREaa>
		break;
 80081a0:	f001 bbea 	b.w	8009978 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 80081a4:	4858      	ldr	r0, [pc, #352]	; (8008308 <cppLoop+0x940>)
 80081a6:	f7f9 ff41 	bl	800202c <_ZN8JoyStick8getValueEv>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	bf0c      	ite	eq
 80081b0:	2301      	moveq	r3, #1
 80081b2:	2300      	movne	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f001 83de 	beq.w	8009978 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 80081bc:	2201      	movs	r2, #1
 80081be:	f04f 31ff 	mov.w	r1, #4294967295
 80081c2:	4852      	ldr	r0, [pc, #328]	; (800830c <cppLoop+0x944>)
 80081c4:	f7fa f852 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081cc:	f001 fd1c 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80081d0:	2300      	movs	r3, #0
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4b4f      	ldr	r3, [pc, #316]	; (8008314 <cppLoop+0x94c>)
 80081d6:	2201      	movs	r2, #1
 80081d8:	4951      	ldr	r1, [pc, #324]	; (8008320 <cppLoop+0x958>)
 80081da:	4852      	ldr	r0, [pc, #328]	; (8008324 <cppLoop+0x95c>)
 80081dc:	f7f9 fb10 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <cppLoop+0x950>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	494f      	ldr	r1, [pc, #316]	; (8008328 <cppLoop+0x960>)
 80081ea:	484e      	ldr	r0, [pc, #312]	; (8008324 <cppLoop+0x95c>)
 80081ec:	f7f9 fb08 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4b49      	ldr	r3, [pc, #292]	; (800831c <cppLoop+0x954>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	494c      	ldr	r1, [pc, #304]	; (800832c <cppLoop+0x964>)
 80081fa:	484a      	ldr	r0, [pc, #296]	; (8008324 <cppLoop+0x95c>)
 80081fc:	f7f9 fb00 	bl	8001800 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008200:	4b44      	ldr	r3, [pc, #272]	; (8008314 <cppLoop+0x94c>)
 8008202:	edd3 7a00 	vldr	s15, [r3]
 8008206:	4b44      	ldr	r3, [pc, #272]	; (8008318 <cppLoop+0x950>)
 8008208:	ed93 7a00 	vldr	s14, [r3]
 800820c:	4b43      	ldr	r3, [pc, #268]	; (800831c <cppLoop+0x954>)
 800820e:	edd3 6a00 	vldr	s13, [r3]
 8008212:	eeb0 1a66 	vmov.f32	s2, s13
 8008216:	eef0 0a47 	vmov.f32	s1, s14
 800821a:	eeb0 0a67 	vmov.f32	s0, s15
 800821e:	4844      	ldr	r0, [pc, #272]	; (8008330 <cppLoop+0x968>)
 8008220:	f7fb fd00 	bl	8003c24 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008224:	2200      	movs	r2, #0
 8008226:	f04f 31ff 	mov.w	r1, #4294967295
 800822a:	4838      	ldr	r0, [pc, #224]	; (800830c <cppLoop+0x944>)
 800822c:	f7fa f81e 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008230:	f001 bba2 	b.w	8009978 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 8008234:	2143      	movs	r1, #67	; 0x43
 8008236:	4835      	ldr	r0, [pc, #212]	; (800830c <cppLoop+0x944>)
 8008238:	f7f9 ff5c 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800823c:	f7f8 ff30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008240:	2100      	movs	r1, #0
 8008242:	2000      	movs	r0, #0
 8008244:	f7f8 ff3c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008248:	483a      	ldr	r0, [pc, #232]	; (8008334 <cppLoop+0x96c>)
 800824a:	f7f8 ff63 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800824e:	2101      	movs	r1, #1
 8008250:	2000      	movs	r0, #0
 8008252:	f7f8 ff35 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008256:	4b38      	ldr	r3, [pc, #224]	; (8008338 <cppLoop+0x970>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f98c 	bl	8000578 <__aeabi_f2d>
 8008260:	4603      	mov	r3, r0
 8008262:	460c      	mov	r4, r1
 8008264:	461a      	mov	r2, r3
 8008266:	4623      	mov	r3, r4
 8008268:	4834      	ldr	r0, [pc, #208]	; (800833c <cppLoop+0x974>)
 800826a:	f7f8 ff53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800826e:	4826      	ldr	r0, [pc, #152]	; (8008308 <cppLoop+0x940>)
 8008270:	f7f9 fedc 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008274:	4603      	mov	r3, r0
 8008276:	2b02      	cmp	r3, #2
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	f001 837b 	beq.w	800997c <cppLoop+0x1fb4>
			HAL_Delay(500);
 8008286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800828a:	f001 fcbd 	bl	8009c08 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800828e:	4b2a      	ldr	r3, [pc, #168]	; (8008338 <cppLoop+0x970>)
 8008290:	edd3 7a00 	vldr	s15, [r3]
 8008294:	eeb0 0a67 	vmov.f32	s0, s15
 8008298:	4825      	ldr	r0, [pc, #148]	; (8008330 <cppLoop+0x968>)
 800829a:	f7fb fd18 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800829e:	f04f 32ff 	mov.w	r2, #4294967295
 80082a2:	2101      	movs	r1, #1
 80082a4:	4819      	ldr	r0, [pc, #100]	; (800830c <cppLoop+0x944>)
 80082a6:	f7f9 ffe1 	bl	800226c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80082aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082ae:	f001 fcab 	bl	8009c08 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80082b2:	2100      	movs	r1, #0
 80082b4:	481e      	ldr	r0, [pc, #120]	; (8008330 <cppLoop+0x968>)
 80082b6:	f7fb ff79 	bl	80041ac <_ZN9LineTrace7setModeEs>

			logger.start();
 80082ba:	4821      	ldr	r0, [pc, #132]	; (8008340 <cppLoop+0x978>)
 80082bc:	f7fc fd88 	bl	8004dd0 <_ZN6Logger5startEv>

			line_trace.running();
 80082c0:	481b      	ldr	r0, [pc, #108]	; (8008330 <cppLoop+0x968>)
 80082c2:	f7fb ffb7 	bl	8004234 <_ZN9LineTrace7runningEv>

			logger.stop();
 80082c6:	481e      	ldr	r0, [pc, #120]	; (8008340 <cppLoop+0x978>)
 80082c8:	f7fc fda1 	bl	8004e0e <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <cppLoop+0x97c>)
 80082ce:	491e      	ldr	r1, [pc, #120]	; (8008348 <cppLoop+0x980>)
 80082d0:	481b      	ldr	r0, [pc, #108]	; (8008340 <cppLoop+0x978>)
 80082d2:	f7fc fc78 	bl	8004bc6 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80082d6:	4a1d      	ldr	r2, [pc, #116]	; (800834c <cppLoop+0x984>)
 80082d8:	491b      	ldr	r1, [pc, #108]	; (8008348 <cppLoop+0x980>)
 80082da:	4819      	ldr	r0, [pc, #100]	; (8008340 <cppLoop+0x978>)
 80082dc:	f7fc fc87 	bl	8004bee <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	2100      	movs	r1, #0
 80082e6:	4809      	ldr	r0, [pc, #36]	; (800830c <cppLoop+0x944>)
 80082e8:	f7f9 ffc0 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 80082ec:	f001 bb46 	b.w	800997c <cppLoop+0x1fb4>
 80082f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80082f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80082f8:	88e368f1 	.word	0x88e368f1
 80082fc:	3ee4f8b5 	.word	0x3ee4f8b5
 8008300:	9abcaf48 	.word	0x9abcaf48
 8008304:	3e7ad7f2 	.word	0x3e7ad7f2
 8008308:	2000053c 	.word	0x2000053c
 800830c:	20000548 	.word	0x20000548
 8008310:	20048110 	.word	0x20048110
 8008314:	20048134 	.word	0x20048134
 8008318:	2004813c 	.word	0x2004813c
 800831c:	20048144 	.word	0x20048144
 8008320:	08018c94 	.word	0x08018c94
 8008324:	08018ca0 	.word	0x08018ca0
 8008328:	08018ca8 	.word	0x08018ca8
 800832c:	08018cb4 	.word	0x08018cb4
 8008330:	2002389c 	.word	0x2002389c
 8008334:	08018cc0 	.word	0x08018cc0
 8008338:	2004814c 	.word	0x2004814c
 800833c:	08018ccc 	.word	0x08018ccc
 8008340:	2000056c 	.word	0x2000056c
 8008344:	08018cd8 	.word	0x08018cd8
 8008348:	08018ce4 	.word	0x08018ce4
 800834c:	08018cf0 	.word	0x08018cf0

	case 2:
		led.fullColor('B');
 8008350:	2142      	movs	r1, #66	; 0x42
 8008352:	48c1      	ldr	r0, [pc, #772]	; (8008658 <cppLoop+0xc90>)
 8008354:	f7f9 fece 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008358:	f7f8 fea2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800835c:	2100      	movs	r1, #0
 800835e:	2000      	movs	r0, #0
 8008360:	f7f8 feae 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008364:	48bd      	ldr	r0, [pc, #756]	; (800865c <cppLoop+0xc94>)
 8008366:	f7f8 fed5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800836a:	2101      	movs	r1, #1
 800836c:	2000      	movs	r0, #0
 800836e:	f7f8 fea7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008372:	4bbb      	ldr	r3, [pc, #748]	; (8008660 <cppLoop+0xc98>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7f8 f8fe 	bl	8000578 <__aeabi_f2d>
 800837c:	4603      	mov	r3, r0
 800837e:	460c      	mov	r4, r1
 8008380:	461a      	mov	r2, r3
 8008382:	4623      	mov	r3, r4
 8008384:	48b7      	ldr	r0, [pc, #732]	; (8008664 <cppLoop+0xc9c>)
 8008386:	f7f8 fec5 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800838a:	48b7      	ldr	r0, [pc, #732]	; (8008668 <cppLoop+0xca0>)
 800838c:	f7f9 fe4e 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008390:	4603      	mov	r3, r0
 8008392:	2b10      	cmp	r3, #16
 8008394:	bf0c      	ite	eq
 8008396:	2301      	moveq	r3, #1
 8008398:	2300      	movne	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d023      	beq.n	80083e8 <cppLoop+0xa20>
			led.LR(-1, 1);
 80083a0:	2201      	movs	r2, #1
 80083a2:	f04f 31ff 	mov.w	r1, #4294967295
 80083a6:	48ac      	ldr	r0, [pc, #688]	; (8008658 <cppLoop+0xc90>)
 80083a8:	f7f9 ff60 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083ac:	2064      	movs	r0, #100	; 0x64
 80083ae:	f001 fc2b 	bl	8009c08 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80083b2:	4bab      	ldr	r3, [pc, #684]	; (8008660 <cppLoop+0xc98>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f8 f8de 	bl	8000578 <__aeabi_f2d>
 80083bc:	a3a4      	add	r3, pc, #656	; (adr r3, 8008650 <cppLoop+0xc88>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f7 ff7b 	bl	80002bc <__adddf3>
 80083c6:	4603      	mov	r3, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	4618      	mov	r0, r3
 80083cc:	4621      	mov	r1, r4
 80083ce:	f7f8 fc23 	bl	8000c18 <__aeabi_d2f>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4ba2      	ldr	r3, [pc, #648]	; (8008660 <cppLoop+0xc98>)
 80083d6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80083d8:	2200      	movs	r2, #0
 80083da:	f04f 31ff 	mov.w	r1, #4294967295
 80083de:	489e      	ldr	r0, [pc, #632]	; (8008658 <cppLoop+0xc90>)
 80083e0:	f7f9 ff44 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80083e4:	f001 bacc 	b.w	8009980 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 80083e8:	489f      	ldr	r0, [pc, #636]	; (8008668 <cppLoop+0xca0>)
 80083ea:	f7f9 fe1f 	bl	800202c <_ZN8JoyStick8getValueEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d023      	beq.n	8008446 <cppLoop+0xa7e>
			led.LR(-1, 1);
 80083fe:	2201      	movs	r2, #1
 8008400:	f04f 31ff 	mov.w	r1, #4294967295
 8008404:	4894      	ldr	r0, [pc, #592]	; (8008658 <cppLoop+0xc90>)
 8008406:	f7f9 ff31 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800840a:	2064      	movs	r0, #100	; 0x64
 800840c:	f001 fbfc 	bl	8009c08 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008410:	4b93      	ldr	r3, [pc, #588]	; (8008660 <cppLoop+0xc98>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4618      	mov	r0, r3
 8008416:	f7f8 f8af 	bl	8000578 <__aeabi_f2d>
 800841a:	a38d      	add	r3, pc, #564	; (adr r3, 8008650 <cppLoop+0xc88>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f7f7 ff4a 	bl	80002b8 <__aeabi_dsub>
 8008424:	4603      	mov	r3, r0
 8008426:	460c      	mov	r4, r1
 8008428:	4618      	mov	r0, r3
 800842a:	4621      	mov	r1, r4
 800842c:	f7f8 fbf4 	bl	8000c18 <__aeabi_d2f>
 8008430:	4602      	mov	r2, r0
 8008432:	4b8b      	ldr	r3, [pc, #556]	; (8008660 <cppLoop+0xc98>)
 8008434:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008436:	2200      	movs	r2, #0
 8008438:	f04f 31ff 	mov.w	r1, #4294967295
 800843c:	4886      	ldr	r0, [pc, #536]	; (8008658 <cppLoop+0xc90>)
 800843e:	f7f9 ff15 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008442:	f001 ba9d 	b.w	8009980 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 8008446:	4888      	ldr	r0, [pc, #544]	; (8008668 <cppLoop+0xca0>)
 8008448:	f7f9 fdf0 	bl	800202c <_ZN8JoyStick8getValueEv>
 800844c:	4603      	mov	r3, r0
 800844e:	2b02      	cmp	r3, #2
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	f001 8291 	beq.w	8009980 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 800845e:	2201      	movs	r2, #1
 8008460:	f04f 31ff 	mov.w	r1, #4294967295
 8008464:	487c      	ldr	r0, [pc, #496]	; (8008658 <cppLoop+0xc90>)
 8008466:	f7f9 ff01 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800846a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800846e:	f001 fbcb 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008472:	2300      	movs	r3, #0
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4b7a      	ldr	r3, [pc, #488]	; (8008660 <cppLoop+0xc98>)
 8008478:	2201      	movs	r2, #1
 800847a:	497c      	ldr	r1, [pc, #496]	; (800866c <cppLoop+0xca4>)
 800847c:	487c      	ldr	r0, [pc, #496]	; (8008670 <cppLoop+0xca8>)
 800847e:	f7f9 f9bf 	bl	8001800 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008482:	4b77      	ldr	r3, [pc, #476]	; (8008660 <cppLoop+0xc98>)
 8008484:	edd3 7a00 	vldr	s15, [r3]
 8008488:	eeb0 0a67 	vmov.f32	s0, s15
 800848c:	4879      	ldr	r0, [pc, #484]	; (8008674 <cppLoop+0xcac>)
 800848e:	f7fb fc1e 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008492:	2200      	movs	r2, #0
 8008494:	f04f 31ff 	mov.w	r1, #4294967295
 8008498:	486f      	ldr	r0, [pc, #444]	; (8008658 <cppLoop+0xc90>)
 800849a:	f7f9 fee7 	bl	800226c <_ZN3LED2LREaa>
		break;
 800849e:	f001 ba6f 	b.w	8009980 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 80084a2:	2159      	movs	r1, #89	; 0x59
 80084a4:	486c      	ldr	r0, [pc, #432]	; (8008658 <cppLoop+0xc90>)
 80084a6:	f7f9 fe25 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084aa:	f7f8 fdf9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084ae:	2100      	movs	r1, #0
 80084b0:	2000      	movs	r0, #0
 80084b2:	f7f8 fe05 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80084b6:	4b70      	ldr	r3, [pc, #448]	; (8008678 <cppLoop+0xcb0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7f8 f85c 	bl	8000578 <__aeabi_f2d>
 80084c0:	4603      	mov	r3, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	461a      	mov	r2, r3
 80084c6:	4623      	mov	r3, r4
 80084c8:	486c      	ldr	r0, [pc, #432]	; (800867c <cppLoop+0xcb4>)
 80084ca:	f7f8 fe23 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084ce:	2101      	movs	r1, #1
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7f8 fdf5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80084d6:	4b6a      	ldr	r3, [pc, #424]	; (8008680 <cppLoop+0xcb8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 f84c 	bl	8000578 <__aeabi_f2d>
 80084e0:	4603      	mov	r3, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	461a      	mov	r2, r3
 80084e6:	4623      	mov	r3, r4
 80084e8:	4866      	ldr	r0, [pc, #408]	; (8008684 <cppLoop+0xcbc>)
 80084ea:	f7f8 fe13 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80084ee:	485e      	ldr	r0, [pc, #376]	; (8008668 <cppLoop+0xca0>)
 80084f0:	f7f9 fd9c 	bl	800202c <_ZN8JoyStick8getValueEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	f001 823f 	beq.w	8009984 <cppLoop+0x1fbc>
			HAL_Delay(500);
 8008506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800850a:	f001 fb7d 	bl	8009c08 <HAL_Delay>

			led.LR(1, -1);
 800850e:	f04f 32ff 	mov.w	r2, #4294967295
 8008512:	2101      	movs	r1, #1
 8008514:	4850      	ldr	r0, [pc, #320]	; (8008658 <cppLoop+0xc90>)
 8008516:	f7f9 fea9 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800851a:	2101      	movs	r1, #1
 800851c:	4855      	ldr	r0, [pc, #340]	; (8008674 <cppLoop+0xcac>)
 800851e:	f7fb fe45 	bl	80041ac <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008522:	4b57      	ldr	r3, [pc, #348]	; (8008680 <cppLoop+0xcb8>)
 8008524:	edd3 7a00 	vldr	s15, [r3]
 8008528:	eeb0 0a67 	vmov.f32	s0, s15
 800852c:	4851      	ldr	r0, [pc, #324]	; (8008674 <cppLoop+0xcac>)
 800852e:	f7fb fbce 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008532:	4b51      	ldr	r3, [pc, #324]	; (8008678 <cppLoop+0xcb0>)
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	eeb0 0a67 	vmov.f32	s0, s15
 800853c:	484d      	ldr	r0, [pc, #308]	; (8008674 <cppLoop+0xcac>)
 800853e:	f7fb fbd6 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008542:	4b4f      	ldr	r3, [pc, #316]	; (8008680 <cppLoop+0xcb8>)
 8008544:	edd3 7a00 	vldr	s15, [r3]
 8008548:	eeb0 0a67 	vmov.f32	s0, s15
 800854c:	4849      	ldr	r0, [pc, #292]	; (8008674 <cppLoop+0xcac>)
 800854e:	f7fb fbee 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008552:	4848      	ldr	r0, [pc, #288]	; (8008674 <cppLoop+0xcac>)
 8008554:	f7fb ffd0 	bl	80044f8 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 8008558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800855c:	f001 fb54 	bl	8009c08 <HAL_Delay>

			logger.start();
 8008560:	4849      	ldr	r0, [pc, #292]	; (8008688 <cppLoop+0xcc0>)
 8008562:	f7fc fc35 	bl	8004dd0 <_ZN6Logger5startEv>

			line_trace.running();
 8008566:	4843      	ldr	r0, [pc, #268]	; (8008674 <cppLoop+0xcac>)
 8008568:	f7fb fe64 	bl	8004234 <_ZN9LineTrace7runningEv>

			logger.stop();
 800856c:	4846      	ldr	r0, [pc, #280]	; (8008688 <cppLoop+0xcc0>)
 800856e:	f7fc fc4e 	bl	8004e0e <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008572:	4a46      	ldr	r2, [pc, #280]	; (800868c <cppLoop+0xcc4>)
 8008574:	4946      	ldr	r1, [pc, #280]	; (8008690 <cppLoop+0xcc8>)
 8008576:	4844      	ldr	r0, [pc, #272]	; (8008688 <cppLoop+0xcc0>)
 8008578:	f7fc fb25 	bl	8004bc6 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800857c:	4a45      	ldr	r2, [pc, #276]	; (8008694 <cppLoop+0xccc>)
 800857e:	4944      	ldr	r1, [pc, #272]	; (8008690 <cppLoop+0xcc8>)
 8008580:	4841      	ldr	r0, [pc, #260]	; (8008688 <cppLoop+0xcc0>)
 8008582:	f7fc fb34 	bl	8004bee <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	2100      	movs	r1, #0
 800858c:	4832      	ldr	r0, [pc, #200]	; (8008658 <cppLoop+0xc90>)
 800858e:	f7f9 fe6d 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8008592:	f001 b9f7 	b.w	8009984 <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 8008596:	2147      	movs	r1, #71	; 0x47
 8008598:	482f      	ldr	r0, [pc, #188]	; (8008658 <cppLoop+0xc90>)
 800859a:	f7f9 fdab 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800859e:	f7f8 fd7f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085a2:	2100      	movs	r1, #0
 80085a4:	2000      	movs	r0, #0
 80085a6:	f7f8 fd8b 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80085aa:	4832      	ldr	r0, [pc, #200]	; (8008674 <cppLoop+0xcac>)
 80085ac:	f7fb fbef 	bl	8003d8e <_ZN9LineTrace14getMaxVelocityEv>
 80085b0:	ee10 3a10 	vmov	r3, s0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ffdf 	bl	8000578 <__aeabi_f2d>
 80085ba:	4603      	mov	r3, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	461a      	mov	r2, r3
 80085c0:	4623      	mov	r3, r4
 80085c2:	482e      	ldr	r0, [pc, #184]	; (800867c <cppLoop+0xcb4>)
 80085c4:	f7f8 fda6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085c8:	2101      	movs	r1, #1
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7f8 fd78 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80085d0:	4828      	ldr	r0, [pc, #160]	; (8008674 <cppLoop+0xcac>)
 80085d2:	f7fb fbfc 	bl	8003dce <_ZN9LineTrace14getMinVelocityEv>
 80085d6:	ee10 3a10 	vmov	r3, s0
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffcc 	bl	8000578 <__aeabi_f2d>
 80085e0:	4603      	mov	r3, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	461a      	mov	r2, r3
 80085e6:	4623      	mov	r3, r4
 80085e8:	481e      	ldr	r0, [pc, #120]	; (8008664 <cppLoop+0xc9c>)
 80085ea:	f7f8 fd93 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80085ee:	481e      	ldr	r0, [pc, #120]	; (8008668 <cppLoop+0xca0>)
 80085f0:	f7f9 fd1c 	bl	800202c <_ZN8JoyStick8getValueEv>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2300      	movne	r3, #0
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d04b      	beq.n	800869c <cppLoop+0xcd4>
			led.LR(-1, 1);
 8008604:	2201      	movs	r2, #1
 8008606:	f04f 31ff 	mov.w	r1, #4294967295
 800860a:	4813      	ldr	r0, [pc, #76]	; (8008658 <cppLoop+0xc90>)
 800860c:	f7f9 fe2e 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008610:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008614:	f001 faf8 	bl	8009c08 <HAL_Delay>

			selector_vel++;
 8008618:	4b1f      	ldr	r3, [pc, #124]	; (8008698 <cppLoop+0xcd0>)
 800861a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800861e:	b29b      	uxth	r3, r3
 8008620:	3301      	adds	r3, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	b21a      	sxth	r2, r3
 8008626:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <cppLoop+0xcd0>)
 8008628:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800862a:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <cppLoop+0xcd0>)
 800862c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008630:	2b01      	cmp	r3, #1
 8008632:	dd02      	ble.n	800863a <cppLoop+0xc72>
 8008634:	4b18      	ldr	r3, [pc, #96]	; (8008698 <cppLoop+0xcd0>)
 8008636:	2200      	movs	r2, #0
 8008638:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	f04f 31ff 	mov.w	r1, #4294967295
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <cppLoop+0xc90>)
 8008642:	f7f9 fe13 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008646:	f001 b99f 	b.w	8009988 <cppLoop+0x1fc0>
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w
 8008650:	9999999a 	.word	0x9999999a
 8008654:	3fb99999 	.word	0x3fb99999
 8008658:	20000548 	.word	0x20000548
 800865c:	08018cc0 	.word	0x08018cc0
 8008660:	2004814c 	.word	0x2004814c
 8008664:	08018cfc 	.word	0x08018cfc
 8008668:	2000053c 	.word	0x2000053c
 800866c:	08018d08 	.word	0x08018d08
 8008670:	08018ca0 	.word	0x08018ca0
 8008674:	2002389c 	.word	0x2002389c
 8008678:	20048154 	.word	0x20048154
 800867c:	08018d14 	.word	0x08018d14
 8008680:	20048164 	.word	0x20048164
 8008684:	08018ccc 	.word	0x08018ccc
 8008688:	2000056c 	.word	0x2000056c
 800868c:	08018cd8 	.word	0x08018cd8
 8008690:	08018ce4 	.word	0x08018ce4
 8008694:	08018cf0 	.word	0x08018cf0
 8008698:	20048116 	.word	0x20048116
		else if(joy_stick.getValue() == JOY_R){
 800869c:	48ac      	ldr	r0, [pc, #688]	; (8008950 <cppLoop+0xf88>)
 800869e:	f7f9 fcc5 	bl	800202c <_ZN8JoyStick8getValueEv>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	bf0c      	ite	eq
 80086a8:	2301      	moveq	r3, #1
 80086aa:	2300      	movne	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d03c      	beq.n	800872c <cppLoop+0xd64>
			led.LR(-1, 1);
 80086b2:	2201      	movs	r2, #1
 80086b4:	f04f 31ff 	mov.w	r1, #4294967295
 80086b8:	48a6      	ldr	r0, [pc, #664]	; (8008954 <cppLoop+0xf8c>)
 80086ba:	f7f9 fdd7 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086be:	2064      	movs	r0, #100	; 0x64
 80086c0:	f001 faa2 	bl	8009c08 <HAL_Delay>
			if(selector_vel == 0)
 80086c4:	4ba4      	ldr	r3, [pc, #656]	; (8008958 <cppLoop+0xf90>)
 80086c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d113      	bne.n	80086f6 <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80086ce:	4ba3      	ldr	r3, [pc, #652]	; (800895c <cppLoop+0xf94>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f7 ff50 	bl	8000578 <__aeabi_f2d>
 80086d8:	a39b      	add	r3, pc, #620	; (adr r3, 8008948 <cppLoop+0xf80>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fded 	bl	80002bc <__adddf3>
 80086e2:	4603      	mov	r3, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	4618      	mov	r0, r3
 80086e8:	4621      	mov	r1, r4
 80086ea:	f7f8 fa95 	bl	8000c18 <__aeabi_d2f>
 80086ee:	4602      	mov	r2, r0
 80086f0:	4b9a      	ldr	r3, [pc, #616]	; (800895c <cppLoop+0xf94>)
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e012      	b.n	800871c <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 80086f6:	4b9a      	ldr	r3, [pc, #616]	; (8008960 <cppLoop+0xf98>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f7 ff3c 	bl	8000578 <__aeabi_f2d>
 8008700:	a391      	add	r3, pc, #580	; (adr r3, 8008948 <cppLoop+0xf80>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 fdd9 	bl	80002bc <__adddf3>
 800870a:	4603      	mov	r3, r0
 800870c:	460c      	mov	r4, r1
 800870e:	4618      	mov	r0, r3
 8008710:	4621      	mov	r1, r4
 8008712:	f7f8 fa81 	bl	8000c18 <__aeabi_d2f>
 8008716:	4602      	mov	r2, r0
 8008718:	4b91      	ldr	r3, [pc, #580]	; (8008960 <cppLoop+0xf98>)
 800871a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800871c:	2200      	movs	r2, #0
 800871e:	f04f 31ff 	mov.w	r1, #4294967295
 8008722:	488c      	ldr	r0, [pc, #560]	; (8008954 <cppLoop+0xf8c>)
 8008724:	f7f9 fda2 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008728:	f001 b92e 	b.w	8009988 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 800872c:	4888      	ldr	r0, [pc, #544]	; (8008950 <cppLoop+0xf88>)
 800872e:	f7f9 fc7d 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008732:	4603      	mov	r3, r0
 8008734:	2b01      	cmp	r3, #1
 8008736:	bf0c      	ite	eq
 8008738:	2301      	moveq	r3, #1
 800873a:	2300      	movne	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d03c      	beq.n	80087bc <cppLoop+0xdf4>
			led.LR(-1, 1);
 8008742:	2201      	movs	r2, #1
 8008744:	f04f 31ff 	mov.w	r1, #4294967295
 8008748:	4882      	ldr	r0, [pc, #520]	; (8008954 <cppLoop+0xf8c>)
 800874a:	f7f9 fd8f 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800874e:	2064      	movs	r0, #100	; 0x64
 8008750:	f001 fa5a 	bl	8009c08 <HAL_Delay>
			if(selector_vel == 0)
 8008754:	4b80      	ldr	r3, [pc, #512]	; (8008958 <cppLoop+0xf90>)
 8008756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d113      	bne.n	8008786 <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 800875e:	4b7f      	ldr	r3, [pc, #508]	; (800895c <cppLoop+0xf94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7f7 ff08 	bl	8000578 <__aeabi_f2d>
 8008768:	a377      	add	r3, pc, #476	; (adr r3, 8008948 <cppLoop+0xf80>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fda3 	bl	80002b8 <__aeabi_dsub>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	4618      	mov	r0, r3
 8008778:	4621      	mov	r1, r4
 800877a:	f7f8 fa4d 	bl	8000c18 <__aeabi_d2f>
 800877e:	4602      	mov	r2, r0
 8008780:	4b76      	ldr	r3, [pc, #472]	; (800895c <cppLoop+0xf94>)
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	e012      	b.n	80087ac <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008786:	4b76      	ldr	r3, [pc, #472]	; (8008960 <cppLoop+0xf98>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f7f7 fef4 	bl	8000578 <__aeabi_f2d>
 8008790:	a36d      	add	r3, pc, #436	; (adr r3, 8008948 <cppLoop+0xf80>)
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f7f7 fd8f 	bl	80002b8 <__aeabi_dsub>
 800879a:	4603      	mov	r3, r0
 800879c:	460c      	mov	r4, r1
 800879e:	4618      	mov	r0, r3
 80087a0:	4621      	mov	r1, r4
 80087a2:	f7f8 fa39 	bl	8000c18 <__aeabi_d2f>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b6d      	ldr	r3, [pc, #436]	; (8008960 <cppLoop+0xf98>)
 80087aa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087ac:	2200      	movs	r2, #0
 80087ae:	f04f 31ff 	mov.w	r1, #4294967295
 80087b2:	4868      	ldr	r0, [pc, #416]	; (8008954 <cppLoop+0xf8c>)
 80087b4:	f7f9 fd5a 	bl	800226c <_ZN3LED2LREaa>
		break;
 80087b8:	f001 b8e6 	b.w	8009988 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 80087bc:	4864      	ldr	r0, [pc, #400]	; (8008950 <cppLoop+0xf88>)
 80087be:	f7f9 fc35 	bl	800202c <_ZN8JoyStick8getValueEv>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	bf0c      	ite	eq
 80087c8:	2301      	moveq	r3, #1
 80087ca:	2300      	movne	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f001 80da 	beq.w	8009988 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 80087d4:	2201      	movs	r2, #1
 80087d6:	f04f 31ff 	mov.w	r1, #4294967295
 80087da:	485e      	ldr	r0, [pc, #376]	; (8008954 <cppLoop+0xf8c>)
 80087dc:	f7f9 fd46 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087e4:	f001 fa10 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	4b5b      	ldr	r3, [pc, #364]	; (800895c <cppLoop+0xf94>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	495c      	ldr	r1, [pc, #368]	; (8008964 <cppLoop+0xf9c>)
 80087f2:	485d      	ldr	r0, [pc, #372]	; (8008968 <cppLoop+0xfa0>)
 80087f4:	f7f9 f804 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80087f8:	2300      	movs	r3, #0
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4b58      	ldr	r3, [pc, #352]	; (8008960 <cppLoop+0xf98>)
 80087fe:	2201      	movs	r2, #1
 8008800:	495a      	ldr	r1, [pc, #360]	; (800896c <cppLoop+0xfa4>)
 8008802:	4859      	ldr	r0, [pc, #356]	; (8008968 <cppLoop+0xfa0>)
 8008804:	f7f8 fffc 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008808:	4b54      	ldr	r3, [pc, #336]	; (800895c <cppLoop+0xf94>)
 800880a:	edd3 7a00 	vldr	s15, [r3]
 800880e:	eeb0 0a67 	vmov.f32	s0, s15
 8008812:	4857      	ldr	r0, [pc, #348]	; (8008970 <cppLoop+0xfa8>)
 8008814:	f7fb fa6b 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008818:	4b51      	ldr	r3, [pc, #324]	; (8008960 <cppLoop+0xf98>)
 800881a:	edd3 7a00 	vldr	s15, [r3]
 800881e:	eeb0 0a67 	vmov.f32	s0, s15
 8008822:	4853      	ldr	r0, [pc, #332]	; (8008970 <cppLoop+0xfa8>)
 8008824:	f7fb fa83 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008828:	2200      	movs	r2, #0
 800882a:	f04f 31ff 	mov.w	r1, #4294967295
 800882e:	4849      	ldr	r0, [pc, #292]	; (8008954 <cppLoop+0xf8c>)
 8008830:	f7f9 fd1c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008834:	f001 b8a8 	b.w	8009988 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 8008838:	214d      	movs	r1, #77	; 0x4d
 800883a:	4846      	ldr	r0, [pc, #280]	; (8008954 <cppLoop+0xf8c>)
 800883c:	f7f9 fc5a 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008840:	f7f8 fc2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008844:	2100      	movs	r1, #0
 8008846:	2000      	movs	r0, #0
 8008848:	f7f8 fc3a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 800884c:	4b49      	ldr	r3, [pc, #292]	; (8008974 <cppLoop+0xfac>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f7f7 fe91 	bl	8000578 <__aeabi_f2d>
 8008856:	4603      	mov	r3, r0
 8008858:	460c      	mov	r4, r1
 800885a:	461a      	mov	r2, r3
 800885c:	4623      	mov	r3, r4
 800885e:	4846      	ldr	r0, [pc, #280]	; (8008978 <cppLoop+0xfb0>)
 8008860:	f7f8 fc58 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008864:	2101      	movs	r1, #1
 8008866:	2000      	movs	r0, #0
 8008868:	f7f8 fc2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800886c:	4b43      	ldr	r3, [pc, #268]	; (800897c <cppLoop+0xfb4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f7f7 fe81 	bl	8000578 <__aeabi_f2d>
 8008876:	4603      	mov	r3, r0
 8008878:	460c      	mov	r4, r1
 800887a:	461a      	mov	r2, r3
 800887c:	4623      	mov	r3, r4
 800887e:	4840      	ldr	r0, [pc, #256]	; (8008980 <cppLoop+0xfb8>)
 8008880:	f7f8 fc48 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008884:	4832      	ldr	r0, [pc, #200]	; (8008950 <cppLoop+0xf88>)
 8008886:	f7f9 fbd1 	bl	800202c <_ZN8JoyStick8getValueEv>
 800888a:	4603      	mov	r3, r0
 800888c:	2b02      	cmp	r3, #2
 800888e:	bf0c      	ite	eq
 8008890:	2301      	moveq	r3, #1
 8008892:	2300      	movne	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	f001 8078 	beq.w	800998c <cppLoop+0x1fc4>
			HAL_Delay(500);
 800889c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088a0:	f001 f9b2 	bl	8009c08 <HAL_Delay>

			led.LR(1, -1);
 80088a4:	f04f 32ff 	mov.w	r2, #4294967295
 80088a8:	2101      	movs	r1, #1
 80088aa:	482a      	ldr	r0, [pc, #168]	; (8008954 <cppLoop+0xf8c>)
 80088ac:	f7f9 fcde 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80088b0:	4b34      	ldr	r3, [pc, #208]	; (8008984 <cppLoop+0xfbc>)
 80088b2:	edd3 7a00 	vldr	s15, [r3]
 80088b6:	4b34      	ldr	r3, [pc, #208]	; (8008988 <cppLoop+0xfc0>)
 80088b8:	ed93 7a00 	vldr	s14, [r3]
 80088bc:	4b33      	ldr	r3, [pc, #204]	; (800898c <cppLoop+0xfc4>)
 80088be:	edd3 6a00 	vldr	s13, [r3]
 80088c2:	eeb0 1a66 	vmov.f32	s2, s13
 80088c6:	eef0 0a47 	vmov.f32	s1, s14
 80088ca:	eeb0 0a67 	vmov.f32	s0, s15
 80088ce:	4828      	ldr	r0, [pc, #160]	; (8008970 <cppLoop+0xfa8>)
 80088d0:	f7fb f962 	bl	8003b98 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80088d4:	2102      	movs	r1, #2
 80088d6:	4826      	ldr	r0, [pc, #152]	; (8008970 <cppLoop+0xfa8>)
 80088d8:	f7fb fc68 	bl	80041ac <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80088dc:	4b27      	ldr	r3, [pc, #156]	; (800897c <cppLoop+0xfb4>)
 80088de:	edd3 7a00 	vldr	s15, [r3]
 80088e2:	eeb0 0a67 	vmov.f32	s0, s15
 80088e6:	4822      	ldr	r0, [pc, #136]	; (8008970 <cppLoop+0xfa8>)
 80088e8:	f7fb f9f1 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80088ec:	4b21      	ldr	r3, [pc, #132]	; (8008974 <cppLoop+0xfac>)
 80088ee:	edd3 7a00 	vldr	s15, [r3]
 80088f2:	eeb0 0a67 	vmov.f32	s0, s15
 80088f6:	481e      	ldr	r0, [pc, #120]	; (8008970 <cppLoop+0xfa8>)
 80088f8:	f7fb fa09 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80088fc:	4b1f      	ldr	r3, [pc, #124]	; (800897c <cppLoop+0xfb4>)
 80088fe:	edd3 7a00 	vldr	s15, [r3]
 8008902:	eeb0 0a67 	vmov.f32	s0, s15
 8008906:	481a      	ldr	r0, [pc, #104]	; (8008970 <cppLoop+0xfa8>)
 8008908:	f7fb fa21 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800890c:	4818      	ldr	r0, [pc, #96]	; (8008970 <cppLoop+0xfa8>)
 800890e:	f7fb fdf3 	bl	80044f8 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 8008912:	481f      	ldr	r0, [pc, #124]	; (8008990 <cppLoop+0xfc8>)
 8008914:	f7fc fa5c 	bl	8004dd0 <_ZN6Logger5startEv>

			line_trace.running();
 8008918:	4815      	ldr	r0, [pc, #84]	; (8008970 <cppLoop+0xfa8>)
 800891a:	f7fb fc8b 	bl	8004234 <_ZN9LineTrace7runningEv>

			logger.stop();
 800891e:	481c      	ldr	r0, [pc, #112]	; (8008990 <cppLoop+0xfc8>)
 8008920:	f7fc fa75 	bl	8004e0e <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <cppLoop+0xfcc>)
 8008926:	491c      	ldr	r1, [pc, #112]	; (8008998 <cppLoop+0xfd0>)
 8008928:	4819      	ldr	r0, [pc, #100]	; (8008990 <cppLoop+0xfc8>)
 800892a:	f7fc f94c 	bl	8004bc6 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800892e:	4a1b      	ldr	r2, [pc, #108]	; (800899c <cppLoop+0xfd4>)
 8008930:	4919      	ldr	r1, [pc, #100]	; (8008998 <cppLoop+0xfd0>)
 8008932:	4817      	ldr	r0, [pc, #92]	; (8008990 <cppLoop+0xfc8>)
 8008934:	f7fc f95b 	bl	8004bee <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	2100      	movs	r1, #0
 800893e:	4805      	ldr	r0, [pc, #20]	; (8008954 <cppLoop+0xf8c>)
 8008940:	f7f9 fc94 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8008944:	f001 b822 	b.w	800998c <cppLoop+0x1fc4>
 8008948:	9999999a 	.word	0x9999999a
 800894c:	3fb99999 	.word	0x3fb99999
 8008950:	2000053c 	.word	0x2000053c
 8008954:	20000548 	.word	0x20000548
 8008958:	20048116 	.word	0x20048116
 800895c:	20048154 	.word	0x20048154
 8008960:	20048164 	.word	0x20048164
 8008964:	08018d20 	.word	0x08018d20
 8008968:	08018ca0 	.word	0x08018ca0
 800896c:	08018d2c 	.word	0x08018d2c
 8008970:	2002389c 	.word	0x2002389c
 8008974:	2004815c 	.word	0x2004815c
 8008978:	08018d38 	.word	0x08018d38
 800897c:	2004816c 	.word	0x2004816c
 8008980:	08018ccc 	.word	0x08018ccc
 8008984:	2004811c 	.word	0x2004811c
 8008988:	20048124 	.word	0x20048124
 800898c:	2004812c 	.word	0x2004812c
 8008990:	2000056c 	.word	0x2000056c
 8008994:	08018cd8 	.word	0x08018cd8
 8008998:	08018ce4 	.word	0x08018ce4
 800899c:	08018cf0 	.word	0x08018cf0

	case 6:
		led.fullColor('R');
 80089a0:	2152      	movs	r1, #82	; 0x52
 80089a2:	4895      	ldr	r0, [pc, #596]	; (8008bf8 <cppLoop+0x1230>)
 80089a4:	f7f9 fba6 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089a8:	f7f8 fb7a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089ac:	2100      	movs	r1, #0
 80089ae:	2000      	movs	r0, #0
 80089b0:	f7f8 fb86 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80089b4:	4891      	ldr	r0, [pc, #580]	; (8008bfc <cppLoop+0x1234>)
 80089b6:	f7fb f9fa 	bl	8003dae <_ZN9LineTrace15getMaxVelocity2Ev>
 80089ba:	ee10 3a10 	vmov	r3, s0
 80089be:	4618      	mov	r0, r3
 80089c0:	f7f7 fdda 	bl	8000578 <__aeabi_f2d>
 80089c4:	4603      	mov	r3, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	461a      	mov	r2, r3
 80089ca:	4623      	mov	r3, r4
 80089cc:	488c      	ldr	r0, [pc, #560]	; (8008c00 <cppLoop+0x1238>)
 80089ce:	f7f8 fba1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089d2:	2101      	movs	r1, #1
 80089d4:	2000      	movs	r0, #0
 80089d6:	f7f8 fb73 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80089da:	4888      	ldr	r0, [pc, #544]	; (8008bfc <cppLoop+0x1234>)
 80089dc:	f7fb fa07 	bl	8003dee <_ZN9LineTrace15getMinVelocity2Ev>
 80089e0:	ee10 3a10 	vmov	r3, s0
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7f7 fdc7 	bl	8000578 <__aeabi_f2d>
 80089ea:	4603      	mov	r3, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	461a      	mov	r2, r3
 80089f0:	4623      	mov	r3, r4
 80089f2:	4884      	ldr	r0, [pc, #528]	; (8008c04 <cppLoop+0x123c>)
 80089f4:	f7f8 fb8e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80089f8:	4883      	ldr	r0, [pc, #524]	; (8008c08 <cppLoop+0x1240>)
 80089fa:	f7f9 fb17 	bl	800202c <_ZN8JoyStick8getValueEv>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	bf0c      	ite	eq
 8008a04:	2301      	moveq	r3, #1
 8008a06:	2300      	movne	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d022      	beq.n	8008a54 <cppLoop+0x108c>
			led.LR(-1, 1);
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f04f 31ff 	mov.w	r1, #4294967295
 8008a14:	4878      	ldr	r0, [pc, #480]	; (8008bf8 <cppLoop+0x1230>)
 8008a16:	f7f9 fc29 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a1e:	f001 f8f3 	bl	8009c08 <HAL_Delay>

			selector_vel2++;
 8008a22:	4b7a      	ldr	r3, [pc, #488]	; (8008c0c <cppLoop+0x1244>)
 8008a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	b21a      	sxth	r2, r3
 8008a30:	4b76      	ldr	r3, [pc, #472]	; (8008c0c <cppLoop+0x1244>)
 8008a32:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008a34:	4b75      	ldr	r3, [pc, #468]	; (8008c0c <cppLoop+0x1244>)
 8008a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	dd02      	ble.n	8008a44 <cppLoop+0x107c>
 8008a3e:	4b73      	ldr	r3, [pc, #460]	; (8008c0c <cppLoop+0x1244>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a44:	2200      	movs	r2, #0
 8008a46:	f04f 31ff 	mov.w	r1, #4294967295
 8008a4a:	486b      	ldr	r0, [pc, #428]	; (8008bf8 <cppLoop+0x1230>)
 8008a4c:	f7f9 fc0e 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008a50:	f000 bf9e 	b.w	8009990 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 8008a54:	486c      	ldr	r0, [pc, #432]	; (8008c08 <cppLoop+0x1240>)
 8008a56:	f7f9 fae9 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b10      	cmp	r3, #16
 8008a5e:	bf0c      	ite	eq
 8008a60:	2301      	moveq	r3, #1
 8008a62:	2300      	movne	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d03c      	beq.n	8008ae4 <cppLoop+0x111c>
			led.LR(-1, 1);
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a70:	4861      	ldr	r0, [pc, #388]	; (8008bf8 <cppLoop+0x1230>)
 8008a72:	f7f9 fbfb 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a76:	2064      	movs	r0, #100	; 0x64
 8008a78:	f001 f8c6 	bl	8009c08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008a7c:	4b63      	ldr	r3, [pc, #396]	; (8008c0c <cppLoop+0x1244>)
 8008a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d113      	bne.n	8008aae <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008a86:	4b62      	ldr	r3, [pc, #392]	; (8008c10 <cppLoop+0x1248>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7f7 fd74 	bl	8000578 <__aeabi_f2d>
 8008a90:	a357      	add	r3, pc, #348	; (adr r3, 8008bf0 <cppLoop+0x1228>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fc11 	bl	80002bc <__adddf3>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f7f8 f8b9 	bl	8000c18 <__aeabi_d2f>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b59      	ldr	r3, [pc, #356]	; (8008c10 <cppLoop+0x1248>)
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e012      	b.n	8008ad4 <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008aae:	4b59      	ldr	r3, [pc, #356]	; (8008c14 <cppLoop+0x124c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f7 fd60 	bl	8000578 <__aeabi_f2d>
 8008ab8:	a34d      	add	r3, pc, #308	; (adr r3, 8008bf0 <cppLoop+0x1228>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fbfd 	bl	80002bc <__adddf3>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	4621      	mov	r1, r4
 8008aca:	f7f8 f8a5 	bl	8000c18 <__aeabi_d2f>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	4b50      	ldr	r3, [pc, #320]	; (8008c14 <cppLoop+0x124c>)
 8008ad2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8008ada:	4847      	ldr	r0, [pc, #284]	; (8008bf8 <cppLoop+0x1230>)
 8008adc:	f7f9 fbc6 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008ae0:	f000 bf56 	b.w	8009990 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008ae4:	4848      	ldr	r0, [pc, #288]	; (8008c08 <cppLoop+0x1240>)
 8008ae6:	f7f9 faa1 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d03c      	beq.n	8008b74 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008afa:	2201      	movs	r2, #1
 8008afc:	f04f 31ff 	mov.w	r1, #4294967295
 8008b00:	483d      	ldr	r0, [pc, #244]	; (8008bf8 <cppLoop+0x1230>)
 8008b02:	f7f9 fbb3 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b06:	2064      	movs	r0, #100	; 0x64
 8008b08:	f001 f87e 	bl	8009c08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008b0c:	4b3f      	ldr	r3, [pc, #252]	; (8008c0c <cppLoop+0x1244>)
 8008b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d113      	bne.n	8008b3e <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008b16:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <cppLoop+0x1248>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7f7 fd2c 	bl	8000578 <__aeabi_f2d>
 8008b20:	a333      	add	r3, pc, #204	; (adr r3, 8008bf0 <cppLoop+0x1228>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fbc7 	bl	80002b8 <__aeabi_dsub>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	4621      	mov	r1, r4
 8008b32:	f7f8 f871 	bl	8000c18 <__aeabi_d2f>
 8008b36:	4602      	mov	r2, r0
 8008b38:	4b35      	ldr	r3, [pc, #212]	; (8008c10 <cppLoop+0x1248>)
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	e012      	b.n	8008b64 <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008b3e:	4b35      	ldr	r3, [pc, #212]	; (8008c14 <cppLoop+0x124c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7f7 fd18 	bl	8000578 <__aeabi_f2d>
 8008b48:	a329      	add	r3, pc, #164	; (adr r3, 8008bf0 <cppLoop+0x1228>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 fbb3 	bl	80002b8 <__aeabi_dsub>
 8008b52:	4603      	mov	r3, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	4618      	mov	r0, r3
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7f8 f85d 	bl	8000c18 <__aeabi_d2f>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	4b2c      	ldr	r3, [pc, #176]	; (8008c14 <cppLoop+0x124c>)
 8008b62:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b64:	2200      	movs	r2, #0
 8008b66:	f04f 31ff 	mov.w	r1, #4294967295
 8008b6a:	4823      	ldr	r0, [pc, #140]	; (8008bf8 <cppLoop+0x1230>)
 8008b6c:	f7f9 fb7e 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008b70:	f000 bf0e 	b.w	8009990 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008b74:	4824      	ldr	r0, [pc, #144]	; (8008c08 <cppLoop+0x1240>)
 8008b76:	f7f9 fa59 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8702 	beq.w	8009990 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b92:	4819      	ldr	r0, [pc, #100]	; (8008bf8 <cppLoop+0x1230>)
 8008b94:	f7f9 fb6a 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b9c:	f001 f834 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <cppLoop+0x1248>)
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	491b      	ldr	r1, [pc, #108]	; (8008c18 <cppLoop+0x1250>)
 8008baa:	481c      	ldr	r0, [pc, #112]	; (8008c1c <cppLoop+0x1254>)
 8008bac:	f7f8 fe28 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <cppLoop+0x124c>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4919      	ldr	r1, [pc, #100]	; (8008c20 <cppLoop+0x1258>)
 8008bba:	4818      	ldr	r0, [pc, #96]	; (8008c1c <cppLoop+0x1254>)
 8008bbc:	f7f8 fe20 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008bc0:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <cppLoop+0x1248>)
 8008bc2:	edd3 7a00 	vldr	s15, [r3]
 8008bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bca:	480c      	ldr	r0, [pc, #48]	; (8008bfc <cppLoop+0x1234>)
 8008bcc:	f7fb f89f 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008bd0:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <cppLoop+0x124c>)
 8008bd2:	edd3 7a00 	vldr	s15, [r3]
 8008bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bda:	4808      	ldr	r0, [pc, #32]	; (8008bfc <cppLoop+0x1234>)
 8008bdc:	f7fb f8b7 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008be0:	2200      	movs	r2, #0
 8008be2:	f04f 31ff 	mov.w	r1, #4294967295
 8008be6:	4804      	ldr	r0, [pc, #16]	; (8008bf8 <cppLoop+0x1230>)
 8008be8:	f7f9 fb40 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008bec:	f000 bed0 	b.w	8009990 <cppLoop+0x1fc8>
 8008bf0:	9999999a 	.word	0x9999999a
 8008bf4:	3fb99999 	.word	0x3fb99999
 8008bf8:	20000548 	.word	0x20000548
 8008bfc:	2002389c 	.word	0x2002389c
 8008c00:	08018d38 	.word	0x08018d38
 8008c04:	08018cfc 	.word	0x08018cfc
 8008c08:	2000053c 	.word	0x2000053c
 8008c0c:	20048118 	.word	0x20048118
 8008c10:	2004815c 	.word	0x2004815c
 8008c14:	2004816c 	.word	0x2004816c
 8008c18:	08018d44 	.word	0x08018d44
 8008c1c:	08018ca0 	.word	0x08018ca0
 8008c20:	08018d50 	.word	0x08018d50

	case 7:
		led.fullColor('W');
 8008c24:	2157      	movs	r1, #87	; 0x57
 8008c26:	48c2      	ldr	r0, [pc, #776]	; (8008f30 <cppLoop+0x1568>)
 8008c28:	f7f9 fa64 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c2c:	f7f8 fa38 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c30:	2100      	movs	r1, #0
 8008c32:	2000      	movs	r0, #0
 8008c34:	f7f8 fa44 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008c38:	48be      	ldr	r0, [pc, #760]	; (8008f34 <cppLoop+0x156c>)
 8008c3a:	f7fb f91c 	bl	8003e76 <_ZN9LineTrace9getMaxAccEv>
 8008c3e:	ee10 3a10 	vmov	r3, s0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 fc98 	bl	8000578 <__aeabi_f2d>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4623      	mov	r3, r4
 8008c50:	48b9      	ldr	r0, [pc, #740]	; (8008f38 <cppLoop+0x1570>)
 8008c52:	f7f8 fa5f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c56:	2101      	movs	r1, #1
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7f8 fa31 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008c5e:	48b5      	ldr	r0, [pc, #724]	; (8008f34 <cppLoop+0x156c>)
 8008c60:	f7fb f93f 	bl	8003ee2 <_ZN9LineTrace9getMaxDecEv>
 8008c64:	ee10 3a10 	vmov	r3, s0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7f7 fc85 	bl	8000578 <__aeabi_f2d>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	461a      	mov	r2, r3
 8008c74:	4623      	mov	r3, r4
 8008c76:	48b1      	ldr	r0, [pc, #708]	; (8008f3c <cppLoop+0x1574>)
 8008c78:	f7f8 fa4c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c7c:	48b0      	ldr	r0, [pc, #704]	; (8008f40 <cppLoop+0x1578>)
 8008c7e:	f7f9 f9d5 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	bf0c      	ite	eq
 8008c88:	2301      	moveq	r3, #1
 8008c8a:	2300      	movne	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d022      	beq.n	8008cd8 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008c92:	2201      	movs	r2, #1
 8008c94:	f04f 31ff 	mov.w	r1, #4294967295
 8008c98:	48a5      	ldr	r0, [pc, #660]	; (8008f30 <cppLoop+0x1568>)
 8008c9a:	f7f9 fae7 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ca2:	f000 ffb1 	bl	8009c08 <HAL_Delay>

			selector_acc++;
 8008ca6:	4ba7      	ldr	r3, [pc, #668]	; (8008f44 <cppLoop+0x157c>)
 8008ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	b21a      	sxth	r2, r3
 8008cb4:	4ba3      	ldr	r3, [pc, #652]	; (8008f44 <cppLoop+0x157c>)
 8008cb6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008cb8:	4ba2      	ldr	r3, [pc, #648]	; (8008f44 <cppLoop+0x157c>)
 8008cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	dd02      	ble.n	8008cc8 <cppLoop+0x1300>
 8008cc2:	4ba0      	ldr	r3, [pc, #640]	; (8008f44 <cppLoop+0x157c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f04f 31ff 	mov.w	r1, #4294967295
 8008cce:	4898      	ldr	r0, [pc, #608]	; (8008f30 <cppLoop+0x1568>)
 8008cd0:	f7f9 facc 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008cd4:	f000 be5e 	b.w	8009994 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008cd8:	4899      	ldr	r0, [pc, #612]	; (8008f40 <cppLoop+0x1578>)
 8008cda:	f7f9 f9a7 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2301      	moveq	r3, #1
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d03c      	beq.n	8008d68 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf4:	488e      	ldr	r0, [pc, #568]	; (8008f30 <cppLoop+0x1568>)
 8008cf6:	f7f9 fab9 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008cfa:	2064      	movs	r0, #100	; 0x64
 8008cfc:	f000 ff84 	bl	8009c08 <HAL_Delay>
			if(selector_acc == 0){
 8008d00:	4b90      	ldr	r3, [pc, #576]	; (8008f44 <cppLoop+0x157c>)
 8008d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d113      	bne.n	8008d32 <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8008d0a:	4b8f      	ldr	r3, [pc, #572]	; (8008f48 <cppLoop+0x1580>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7f7 fc32 	bl	8000578 <__aeabi_f2d>
 8008d14:	a384      	add	r3, pc, #528	; (adr r3, 8008f28 <cppLoop+0x1560>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f7f7 facf 	bl	80002bc <__adddf3>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	4618      	mov	r0, r3
 8008d24:	4621      	mov	r1, r4
 8008d26:	f7f7 ff77 	bl	8000c18 <__aeabi_d2f>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b86      	ldr	r3, [pc, #536]	; (8008f48 <cppLoop+0x1580>)
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e012      	b.n	8008d58 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 8008d32:	4b86      	ldr	r3, [pc, #536]	; (8008f4c <cppLoop+0x1584>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f7 fc1e 	bl	8000578 <__aeabi_f2d>
 8008d3c:	a37a      	add	r3, pc, #488	; (adr r3, 8008f28 <cppLoop+0x1560>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	f7f7 fabb 	bl	80002bc <__adddf3>
 8008d46:	4603      	mov	r3, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7f7 ff63 	bl	8000c18 <__aeabi_d2f>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4b7d      	ldr	r3, [pc, #500]	; (8008f4c <cppLoop+0x1584>)
 8008d56:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d5e:	4874      	ldr	r0, [pc, #464]	; (8008f30 <cppLoop+0x1568>)
 8008d60:	f7f9 fa84 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008d64:	f000 be16 	b.w	8009994 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8008d68:	4875      	ldr	r0, [pc, #468]	; (8008f40 <cppLoop+0x1578>)
 8008d6a:	f7f9 f95f 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	bf0c      	ite	eq
 8008d74:	2301      	moveq	r3, #1
 8008d76:	2300      	movne	r3, #0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d03c      	beq.n	8008df8 <cppLoop+0x1430>
			led.LR(-1, 1);
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f04f 31ff 	mov.w	r1, #4294967295
 8008d84:	486a      	ldr	r0, [pc, #424]	; (8008f30 <cppLoop+0x1568>)
 8008d86:	f7f9 fa71 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d8a:	2064      	movs	r0, #100	; 0x64
 8008d8c:	f000 ff3c 	bl	8009c08 <HAL_Delay>
			if(selector_acc == 0){
 8008d90:	4b6c      	ldr	r3, [pc, #432]	; (8008f44 <cppLoop+0x157c>)
 8008d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d113      	bne.n	8008dc2 <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8008d9a:	4b6b      	ldr	r3, [pc, #428]	; (8008f48 <cppLoop+0x1580>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7f7 fbea 	bl	8000578 <__aeabi_f2d>
 8008da4:	a360      	add	r3, pc, #384	; (adr r3, 8008f28 <cppLoop+0x1560>)
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	f7f7 fa85 	bl	80002b8 <__aeabi_dsub>
 8008dae:	4603      	mov	r3, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	4618      	mov	r0, r3
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7f7 ff2f 	bl	8000c18 <__aeabi_d2f>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b62      	ldr	r3, [pc, #392]	; (8008f48 <cppLoop+0x1580>)
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e012      	b.n	8008de8 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 8008dc2:	4b62      	ldr	r3, [pc, #392]	; (8008f4c <cppLoop+0x1584>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7f7 fbd6 	bl	8000578 <__aeabi_f2d>
 8008dcc:	a356      	add	r3, pc, #344	; (adr r3, 8008f28 <cppLoop+0x1560>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa71 	bl	80002b8 <__aeabi_dsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	4621      	mov	r1, r4
 8008dde:	f7f7 ff1b 	bl	8000c18 <__aeabi_d2f>
 8008de2:	4602      	mov	r2, r0
 8008de4:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <cppLoop+0x1584>)
 8008de6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008de8:	2200      	movs	r2, #0
 8008dea:	f04f 31ff 	mov.w	r1, #4294967295
 8008dee:	4850      	ldr	r0, [pc, #320]	; (8008f30 <cppLoop+0x1568>)
 8008df0:	f7f9 fa3c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008df4:	f000 bdce 	b.w	8009994 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 8008df8:	4851      	ldr	r0, [pc, #324]	; (8008f40 <cppLoop+0x1578>)
 8008dfa:	f7f9 f917 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 85c2 	beq.w	8009994 <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8008e10:	2201      	movs	r2, #1
 8008e12:	f04f 31ff 	mov.w	r1, #4294967295
 8008e16:	4846      	ldr	r0, [pc, #280]	; (8008f30 <cppLoop+0x1568>)
 8008e18:	f7f9 fa28 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e20:	f000 fef2 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008e24:	2300      	movs	r3, #0
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	4b47      	ldr	r3, [pc, #284]	; (8008f48 <cppLoop+0x1580>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4948      	ldr	r1, [pc, #288]	; (8008f50 <cppLoop+0x1588>)
 8008e2e:	4849      	ldr	r0, [pc, #292]	; (8008f54 <cppLoop+0x158c>)
 8008e30:	f7f8 fce6 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008e34:	2300      	movs	r3, #0
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4b44      	ldr	r3, [pc, #272]	; (8008f4c <cppLoop+0x1584>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4946      	ldr	r1, [pc, #280]	; (8008f58 <cppLoop+0x1590>)
 8008e3e:	4845      	ldr	r0, [pc, #276]	; (8008f54 <cppLoop+0x158c>)
 8008e40:	f7f8 fcde 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008e44:	4b40      	ldr	r3, [pc, #256]	; (8008f48 <cppLoop+0x1580>)
 8008e46:	edd3 7a00 	vldr	s15, [r3]
 8008e4a:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <cppLoop+0x1584>)
 8008e4c:	ed93 7a00 	vldr	s14, [r3]
 8008e50:	eef0 0a47 	vmov.f32	s1, s14
 8008e54:	eeb0 0a67 	vmov.f32	s0, s15
 8008e58:	4836      	ldr	r0, [pc, #216]	; (8008f34 <cppLoop+0x156c>)
 8008e5a:	f7fa ffd8 	bl	8003e0e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f04f 31ff 	mov.w	r1, #4294967295
 8008e64:	4832      	ldr	r0, [pc, #200]	; (8008f30 <cppLoop+0x1568>)
 8008e66:	f7f9 fa01 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008e6a:	f000 bd93 	b.w	8009994 <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8008e6e:	2157      	movs	r1, #87	; 0x57
 8008e70:	482f      	ldr	r0, [pc, #188]	; (8008f30 <cppLoop+0x1568>)
 8008e72:	f7f9 f93f 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e76:	f7f8 f913 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f7f8 f91f 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008e82:	482c      	ldr	r0, [pc, #176]	; (8008f34 <cppLoop+0x156c>)
 8008e84:	f7fb f81b 	bl	8003ebe <_ZN9LineTrace10getMaxAcc2Ev>
 8008e88:	ee10 3a10 	vmov	r3, s0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f7 fb73 	bl	8000578 <__aeabi_f2d>
 8008e92:	4603      	mov	r3, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	461a      	mov	r2, r3
 8008e98:	4623      	mov	r3, r4
 8008e9a:	4830      	ldr	r0, [pc, #192]	; (8008f5c <cppLoop+0x1594>)
 8008e9c:	f7f8 f93a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f7f8 f90c 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008ea8:	4822      	ldr	r0, [pc, #136]	; (8008f34 <cppLoop+0x156c>)
 8008eaa:	f7fa fff6 	bl	8003e9a <_ZN9LineTrace10getMaxDec2Ev>
 8008eae:	ee10 3a10 	vmov	r3, s0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f7 fb60 	bl	8000578 <__aeabi_f2d>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	4827      	ldr	r0, [pc, #156]	; (8008f60 <cppLoop+0x1598>)
 8008ec2:	f7f8 f927 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008ec6:	481e      	ldr	r0, [pc, #120]	; (8008f40 <cppLoop+0x1578>)
 8008ec8:	f7f9 f8b0 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	bf0c      	ite	eq
 8008ed2:	2301      	moveq	r3, #1
 8008ed4:	2300      	movne	r3, #0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d045      	beq.n	8008f68 <cppLoop+0x15a0>
			led.LR(-1, 1);
 8008edc:	2201      	movs	r2, #1
 8008ede:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee2:	4813      	ldr	r0, [pc, #76]	; (8008f30 <cppLoop+0x1568>)
 8008ee4:	f7f9 f9c2 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ee8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008eec:	f000 fe8c 	bl	8009c08 <HAL_Delay>

			selector_acc2++;
 8008ef0:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <cppLoop+0x159c>)
 8008ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3301      	adds	r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	b21a      	sxth	r2, r3
 8008efe:	4b19      	ldr	r3, [pc, #100]	; (8008f64 <cppLoop+0x159c>)
 8008f00:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <cppLoop+0x159c>)
 8008f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	dd02      	ble.n	8008f12 <cppLoop+0x154a>
 8008f0c:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <cppLoop+0x159c>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008f12:	2200      	movs	r2, #0
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	4805      	ldr	r0, [pc, #20]	; (8008f30 <cppLoop+0x1568>)
 8008f1a:	f7f9 f9a7 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008f1e:	f000 bd3b 	b.w	8009998 <cppLoop+0x1fd0>
 8008f22:	bf00      	nop
 8008f24:	f3af 8000 	nop.w
 8008f28:	9999999a 	.word	0x9999999a
 8008f2c:	3fb99999 	.word	0x3fb99999
 8008f30:	20000548 	.word	0x20000548
 8008f34:	2002389c 	.word	0x2002389c
 8008f38:	08018d5c 	.word	0x08018d5c
 8008f3c:	08018d68 	.word	0x08018d68
 8008f40:	2000053c 	.word	0x2000053c
 8008f44:	20048112 	.word	0x20048112
 8008f48:	20048174 	.word	0x20048174
 8008f4c:	2004817c 	.word	0x2004817c
 8008f50:	08018d74 	.word	0x08018d74
 8008f54:	08018ca0 	.word	0x08018ca0
 8008f58:	08018d7c 	.word	0x08018d7c
 8008f5c:	08018d84 	.word	0x08018d84
 8008f60:	08018d90 	.word	0x08018d90
 8008f64:	20048114 	.word	0x20048114
		else if(joy_stick.getValue() == JOY_R){
 8008f68:	48bf      	ldr	r0, [pc, #764]	; (8009268 <cppLoop+0x18a0>)
 8008f6a:	f7f9 f85f 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	bf0c      	ite	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2300      	movne	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d03c      	beq.n	8008ff8 <cppLoop+0x1630>
			led.LR(-1, 1);
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f04f 31ff 	mov.w	r1, #4294967295
 8008f84:	48b9      	ldr	r0, [pc, #740]	; (800926c <cppLoop+0x18a4>)
 8008f86:	f7f9 f971 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f8a:	2064      	movs	r0, #100	; 0x64
 8008f8c:	f000 fe3c 	bl	8009c08 <HAL_Delay>
			if(selector_acc2 == 0){
 8008f90:	4bb7      	ldr	r3, [pc, #732]	; (8009270 <cppLoop+0x18a8>)
 8008f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d113      	bne.n	8008fc2 <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 8008f9a:	4bb6      	ldr	r3, [pc, #728]	; (8009274 <cppLoop+0x18ac>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f7 faea 	bl	8000578 <__aeabi_f2d>
 8008fa4:	a3ae      	add	r3, pc, #696	; (adr r3, 8009260 <cppLoop+0x1898>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 f987 	bl	80002bc <__adddf3>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f7f7 fe2f 	bl	8000c18 <__aeabi_d2f>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	4bad      	ldr	r3, [pc, #692]	; (8009274 <cppLoop+0x18ac>)
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	e012      	b.n	8008fe8 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 8008fc2:	4bad      	ldr	r3, [pc, #692]	; (8009278 <cppLoop+0x18b0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7f7 fad6 	bl	8000578 <__aeabi_f2d>
 8008fcc:	a3a4      	add	r3, pc, #656	; (adr r3, 8009260 <cppLoop+0x1898>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f973 	bl	80002bc <__adddf3>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	4618      	mov	r0, r3
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f7f7 fe1b 	bl	8000c18 <__aeabi_d2f>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	4ba4      	ldr	r3, [pc, #656]	; (8009278 <cppLoop+0x18b0>)
 8008fe6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f04f 31ff 	mov.w	r1, #4294967295
 8008fee:	489f      	ldr	r0, [pc, #636]	; (800926c <cppLoop+0x18a4>)
 8008ff0:	f7f9 f93c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008ff4:	f000 bcd0 	b.w	8009998 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 8008ff8:	489b      	ldr	r0, [pc, #620]	; (8009268 <cppLoop+0x18a0>)
 8008ffa:	f7f9 f817 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b01      	cmp	r3, #1
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d03c      	beq.n	8009088 <cppLoop+0x16c0>
			led.LR(-1, 1);
 800900e:	2201      	movs	r2, #1
 8009010:	f04f 31ff 	mov.w	r1, #4294967295
 8009014:	4895      	ldr	r0, [pc, #596]	; (800926c <cppLoop+0x18a4>)
 8009016:	f7f9 f929 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800901a:	2064      	movs	r0, #100	; 0x64
 800901c:	f000 fdf4 	bl	8009c08 <HAL_Delay>
			if(selector_acc2 == 0){
 8009020:	4b93      	ldr	r3, [pc, #588]	; (8009270 <cppLoop+0x18a8>)
 8009022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d113      	bne.n	8009052 <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 800902a:	4b92      	ldr	r3, [pc, #584]	; (8009274 <cppLoop+0x18ac>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f7f7 faa2 	bl	8000578 <__aeabi_f2d>
 8009034:	a38a      	add	r3, pc, #552	; (adr r3, 8009260 <cppLoop+0x1898>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f93d 	bl	80002b8 <__aeabi_dsub>
 800903e:	4603      	mov	r3, r0
 8009040:	460c      	mov	r4, r1
 8009042:	4618      	mov	r0, r3
 8009044:	4621      	mov	r1, r4
 8009046:	f7f7 fde7 	bl	8000c18 <__aeabi_d2f>
 800904a:	4602      	mov	r2, r0
 800904c:	4b89      	ldr	r3, [pc, #548]	; (8009274 <cppLoop+0x18ac>)
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	e012      	b.n	8009078 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 8009052:	4b89      	ldr	r3, [pc, #548]	; (8009278 <cppLoop+0x18b0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7f7 fa8e 	bl	8000578 <__aeabi_f2d>
 800905c:	a380      	add	r3, pc, #512	; (adr r3, 8009260 <cppLoop+0x1898>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	f7f7 f929 	bl	80002b8 <__aeabi_dsub>
 8009066:	4603      	mov	r3, r0
 8009068:	460c      	mov	r4, r1
 800906a:	4618      	mov	r0, r3
 800906c:	4621      	mov	r1, r4
 800906e:	f7f7 fdd3 	bl	8000c18 <__aeabi_d2f>
 8009072:	4602      	mov	r2, r0
 8009074:	4b80      	ldr	r3, [pc, #512]	; (8009278 <cppLoop+0x18b0>)
 8009076:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009078:	2200      	movs	r2, #0
 800907a:	f04f 31ff 	mov.w	r1, #4294967295
 800907e:	487b      	ldr	r0, [pc, #492]	; (800926c <cppLoop+0x18a4>)
 8009080:	f7f9 f8f4 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009084:	f000 bc88 	b.w	8009998 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 8009088:	4877      	ldr	r0, [pc, #476]	; (8009268 <cppLoop+0x18a0>)
 800908a:	f7f8 ffcf 	bl	800202c <_ZN8JoyStick8getValueEv>
 800908e:	4603      	mov	r3, r0
 8009090:	2b02      	cmp	r3, #2
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 847c 	beq.w	8009998 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 80090a0:	2201      	movs	r2, #1
 80090a2:	f04f 31ff 	mov.w	r1, #4294967295
 80090a6:	4871      	ldr	r0, [pc, #452]	; (800926c <cppLoop+0x18a4>)
 80090a8:	f7f9 f8e0 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80090ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80090b0:	f000 fdaa 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4b6e      	ldr	r3, [pc, #440]	; (8009274 <cppLoop+0x18ac>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	496f      	ldr	r1, [pc, #444]	; (800927c <cppLoop+0x18b4>)
 80090be:	4870      	ldr	r0, [pc, #448]	; (8009280 <cppLoop+0x18b8>)
 80090c0:	f7f8 fb9e 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80090c4:	2300      	movs	r3, #0
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4b6b      	ldr	r3, [pc, #428]	; (8009278 <cppLoop+0x18b0>)
 80090ca:	2201      	movs	r2, #1
 80090cc:	496d      	ldr	r1, [pc, #436]	; (8009284 <cppLoop+0x18bc>)
 80090ce:	486c      	ldr	r0, [pc, #432]	; (8009280 <cppLoop+0x18b8>)
 80090d0:	f7f8 fb96 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80090d4:	4b67      	ldr	r3, [pc, #412]	; (8009274 <cppLoop+0x18ac>)
 80090d6:	edd3 7a00 	vldr	s15, [r3]
 80090da:	4b67      	ldr	r3, [pc, #412]	; (8009278 <cppLoop+0x18b0>)
 80090dc:	ed93 7a00 	vldr	s14, [r3]
 80090e0:	eef0 0a47 	vmov.f32	s1, s14
 80090e4:	eeb0 0a67 	vmov.f32	s0, s15
 80090e8:	4867      	ldr	r0, [pc, #412]	; (8009288 <cppLoop+0x18c0>)
 80090ea:	f7fa feaa 	bl	8003e42 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80090ee:	2200      	movs	r2, #0
 80090f0:	f04f 31ff 	mov.w	r1, #4294967295
 80090f4:	485d      	ldr	r0, [pc, #372]	; (800926c <cppLoop+0x18a4>)
 80090f6:	f7f9 f8b9 	bl	800226c <_ZN3LED2LREaa>
		break;
 80090fa:	f000 bc4d 	b.w	8009998 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 80090fe:	217e      	movs	r1, #126	; 0x7e
 8009100:	485a      	ldr	r0, [pc, #360]	; (800926c <cppLoop+0x18a4>)
 8009102:	f7f8 fff7 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009106:	f7f7 ffcb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800910a:	2100      	movs	r1, #0
 800910c:	2000      	movs	r0, #0
 800910e:	f7f7 ffd7 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009112:	485e      	ldr	r0, [pc, #376]	; (800928c <cppLoop+0x18c4>)
 8009114:	f7f7 fffe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009118:	2101      	movs	r1, #1
 800911a:	2000      	movs	r0, #0
 800911c:	f7f7 ffd0 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009120:	485b      	ldr	r0, [pc, #364]	; (8009290 <cppLoop+0x18c8>)
 8009122:	f7f7 fff7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009126:	4850      	ldr	r0, [pc, #320]	; (8009268 <cppLoop+0x18a0>)
 8009128:	f7f8 ff80 	bl	800202c <_ZN8JoyStick8getValueEv>
 800912c:	4603      	mov	r3, r0
 800912e:	2b02      	cmp	r3, #2
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 842f 	beq.w	800999c <cppLoop+0x1fd4>
			led.LR(-1, 1);
 800913e:	2201      	movs	r2, #1
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	4849      	ldr	r0, [pc, #292]	; (800926c <cppLoop+0x18a4>)
 8009146:	f7f9 f891 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800914a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800914e:	f000 fd5b 	bl	8009c08 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009152:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8009294 <cppLoop+0x18cc>
 8009156:	484c      	ldr	r0, [pc, #304]	; (8009288 <cppLoop+0x18c0>)
 8009158:	f7fa fdaa 	bl	8003cb0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800915c:	484a      	ldr	r0, [pc, #296]	; (8009288 <cppLoop+0x18c0>)
 800915e:	f7fb f837 	bl	80041d0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009166:	f000 fd4f 	bl	8009c08 <HAL_Delay>

			led.fullColor('R');
 800916a:	2152      	movs	r1, #82	; 0x52
 800916c:	483f      	ldr	r0, [pc, #252]	; (800926c <cppLoop+0x18a4>)
 800916e:	f7f8 ffc1 	bl	80020f4 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009172:	4849      	ldr	r0, [pc, #292]	; (8009298 <cppLoop+0x18d0>)
 8009174:	f7f8 fa7a 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009178:	f242 7010 	movw	r0, #10000	; 0x2710
 800917c:	f000 fd44 	bl	8009c08 <HAL_Delay>

			line_trace.stop();
 8009180:	4841      	ldr	r0, [pc, #260]	; (8009288 <cppLoop+0x18c0>)
 8009182:	f7fb f937 	bl	80043f4 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8009186:	4945      	ldr	r1, [pc, #276]	; (800929c <cppLoop+0x18d4>)
 8009188:	4845      	ldr	r0, [pc, #276]	; (80092a0 <cppLoop+0x18d8>)
 800918a:	f7f8 fac5 	bl	8001718 <user_fopen>
			float d = encoder.getDistance();
 800918e:	4842      	ldr	r0, [pc, #264]	; (8009298 <cppLoop+0x18d0>)
 8009190:	f7f8 fa30 	bl	80015f4 <_ZN7Encoder11getDistanceEv>
 8009194:	eef0 7a40 	vmov.f32	s15, s0
 8009198:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800919c:	1d3b      	adds	r3, r7, #4
 800919e:	2201      	movs	r2, #1
 80091a0:	4619      	mov	r1, r3
 80091a2:	2001      	movs	r0, #1
 80091a4:	f7f8 fada 	bl	800175c <sd_write_float>
			user_fclose();
 80091a8:	f7f8 fac8 	bl	800173c <user_fclose>

			led.LR(-1, 0);
 80091ac:	2200      	movs	r2, #0
 80091ae:	f04f 31ff 	mov.w	r1, #4294967295
 80091b2:	482e      	ldr	r0, [pc, #184]	; (800926c <cppLoop+0x18a4>)
 80091b4:	f7f9 f85a 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 80091b8:	e3f0      	b.n	800999c <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 80091ba:	217e      	movs	r1, #126	; 0x7e
 80091bc:	482b      	ldr	r0, [pc, #172]	; (800926c <cppLoop+0x18a4>)
 80091be:	f7f8 ff99 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091c2:	f7f7 ff6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091c6:	2100      	movs	r1, #0
 80091c8:	2000      	movs	r0, #0
 80091ca:	f7f7 ff79 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80091ce:	4835      	ldr	r0, [pc, #212]	; (80092a4 <cppLoop+0x18dc>)
 80091d0:	f7f7 ffa0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091d4:	2101      	movs	r1, #1
 80091d6:	2000      	movs	r0, #0
 80091d8:	f7f7 ff72 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80091dc:	4832      	ldr	r0, [pc, #200]	; (80092a8 <cppLoop+0x18e0>)
 80091de:	f7f7 ff99 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80091e2:	4821      	ldr	r0, [pc, #132]	; (8009268 <cppLoop+0x18a0>)
 80091e4:	f7f8 ff22 	bl	800202c <_ZN8JoyStick8getValueEv>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	bf0c      	ite	eq
 80091ee:	2301      	moveq	r3, #1
 80091f0:	2300      	movne	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 83d3 	beq.w	80099a0 <cppLoop+0x1fd8>
			HAL_Delay(500);
 80091fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091fe:	f000 fd03 	bl	8009c08 <HAL_Delay>
			led.LR(-1, 1);
 8009202:	2201      	movs	r2, #1
 8009204:	f04f 31ff 	mov.w	r1, #4294967295
 8009208:	4818      	ldr	r0, [pc, #96]	; (800926c <cppLoop+0x18a4>)
 800920a:	f7f9 f82f 	bl	800226c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800920e:	2102      	movs	r1, #2
 8009210:	481d      	ldr	r0, [pc, #116]	; (8009288 <cppLoop+0x18c0>)
 8009212:	f7fa ffcb 	bl	80041ac <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009216:	4b25      	ldr	r3, [pc, #148]	; (80092ac <cppLoop+0x18e4>)
 8009218:	edd3 7a00 	vldr	s15, [r3]
 800921c:	eeb0 0a67 	vmov.f32	s0, s15
 8009220:	4819      	ldr	r0, [pc, #100]	; (8009288 <cppLoop+0x18c0>)
 8009222:	f7fa fd54 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009226:	4b21      	ldr	r3, [pc, #132]	; (80092ac <cppLoop+0x18e4>)
 8009228:	edd3 7a00 	vldr	s15, [r3]
 800922c:	eeb0 0a67 	vmov.f32	s0, s15
 8009230:	4815      	ldr	r0, [pc, #84]	; (8009288 <cppLoop+0x18c0>)
 8009232:	f7fa fd5c 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <cppLoop+0x18e4>)
 8009238:	edd3 7a00 	vldr	s15, [r3]
 800923c:	eeb0 0a67 	vmov.f32	s0, s15
 8009240:	4811      	ldr	r0, [pc, #68]	; (8009288 <cppLoop+0x18c0>)
 8009242:	f7fa fd74 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009246:	4810      	ldr	r0, [pc, #64]	; (8009288 <cppLoop+0x18c0>)
 8009248:	f7fb fa24 	bl	8004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800924c:	2200      	movs	r2, #0
 800924e:	f04f 31ff 	mov.w	r1, #4294967295
 8009252:	4806      	ldr	r0, [pc, #24]	; (800926c <cppLoop+0x18a4>)
 8009254:	f7f9 f80a 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8009258:	e3a2      	b.n	80099a0 <cppLoop+0x1fd8>
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w
 8009260:	9999999a 	.word	0x9999999a
 8009264:	3fb99999 	.word	0x3fb99999
 8009268:	2000053c 	.word	0x2000053c
 800926c:	20000548 	.word	0x20000548
 8009270:	20048114 	.word	0x20048114
 8009274:	20048184 	.word	0x20048184
 8009278:	2004818c 	.word	0x2004818c
 800927c:	08018d9c 	.word	0x08018d9c
 8009280:	08018ca0 	.word	0x08018ca0
 8009284:	08018da8 	.word	0x08018da8
 8009288:	2002389c 	.word	0x2002389c
 800928c:	08018db4 	.word	0x08018db4
 8009290:	08018dbc 	.word	0x08018dbc
 8009294:	00000000 	.word	0x00000000
 8009298:	200237f8 	.word	0x200237f8
 800929c:	08018dc8 	.word	0x08018dc8
 80092a0:	08018dd0 	.word	0x08018dd0
 80092a4:	08018ddc 	.word	0x08018ddc
 80092a8:	08018de8 	.word	0x08018de8
 80092ac:	2004815c 	.word	0x2004815c

	case 11:
		led.fullColor('~');
 80092b0:	217e      	movs	r1, #126	; 0x7e
 80092b2:	48bc      	ldr	r0, [pc, #752]	; (80095a4 <cppLoop+0x1bdc>)
 80092b4:	f7f8 ff1e 	bl	80020f4 <_ZN3LED9fullColorEc>

lcd_clear();
 80092b8:	f7f7 fef2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092bc:	2100      	movs	r1, #0
 80092be:	2000      	movs	r0, #0
 80092c0:	f7f7 fefe 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80092c4:	48b8      	ldr	r0, [pc, #736]	; (80095a8 <cppLoop+0x1be0>)
 80092c6:	f7f7 ff25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092ca:	2101      	movs	r1, #1
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 fef7 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80092d2:	48b6      	ldr	r0, [pc, #728]	; (80095ac <cppLoop+0x1be4>)
 80092d4:	f7f7 ff1e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092d8:	48b5      	ldr	r0, [pc, #724]	; (80095b0 <cppLoop+0x1be8>)
 80092da:	f7f8 fea7 	bl	800202c <_ZN8JoyStick8getValueEv>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	bf0c      	ite	eq
 80092e4:	2301      	moveq	r3, #1
 80092e6:	2300      	movne	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 835a 	beq.w	80099a4 <cppLoop+0x1fdc>
			HAL_Delay(1000);
 80092f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092f4:	f000 fc88 	bl	8009c08 <HAL_Delay>
			led.LR(-1, 1);
 80092f8:	2201      	movs	r2, #1
 80092fa:	f04f 31ff 	mov.w	r1, #4294967295
 80092fe:	48a9      	ldr	r0, [pc, #676]	; (80095a4 <cppLoop+0x1bdc>)
 8009300:	f7f8 ffb4 	bl	800226c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009304:	eddf 1aab 	vldr	s3, [pc, #684]	; 80095b4 <cppLoop+0x1bec>
 8009308:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 80095b4 <cppLoop+0x1bec>
 800930c:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80095b4 <cppLoop+0x1bec>
 8009310:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80095b4 <cppLoop+0x1bec>
 8009314:	48a8      	ldr	r0, [pc, #672]	; (80095b8 <cppLoop+0x1bf0>)
 8009316:	f7f7 ff9b 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800931a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800931e:	f000 fc73 	bl	8009c08 <HAL_Delay>
			esc.off();
 8009322:	48a5      	ldr	r0, [pc, #660]	; (80095b8 <cppLoop+0x1bf0>)
 8009324:	f7f8 f82e 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009328:	2200      	movs	r2, #0
 800932a:	f04f 31ff 	mov.w	r1, #4294967295
 800932e:	489d      	ldr	r0, [pc, #628]	; (80095a4 <cppLoop+0x1bdc>)
 8009330:	f7f8 ff9c 	bl	800226c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009334:	e336      	b.n	80099a4 <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 8009336:	217e      	movs	r1, #126	; 0x7e
 8009338:	489a      	ldr	r0, [pc, #616]	; (80095a4 <cppLoop+0x1bdc>)
 800933a:	f7f8 fedb 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800933e:	f7f7 feaf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009342:	2100      	movs	r1, #0
 8009344:	2000      	movs	r0, #0
 8009346:	f7f7 febb 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800934a:	489c      	ldr	r0, [pc, #624]	; (80095bc <cppLoop+0x1bf4>)
 800934c:	f7f7 fee2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009350:	2101      	movs	r1, #1
 8009352:	2000      	movs	r0, #0
 8009354:	f7f7 feb4 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009358:	4899      	ldr	r0, [pc, #612]	; (80095c0 <cppLoop+0x1bf8>)
 800935a:	f7f7 fedb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800935e:	4894      	ldr	r0, [pc, #592]	; (80095b0 <cppLoop+0x1be8>)
 8009360:	f7f8 fe64 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009364:	4603      	mov	r3, r0
 8009366:	2b02      	cmp	r3, #2
 8009368:	bf0c      	ite	eq
 800936a:	2301      	moveq	r3, #1
 800936c:	2300      	movne	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8319 	beq.w	80099a8 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 8009376:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800937a:	f000 fc45 	bl	8009c08 <HAL_Delay>
			led.LR(-1, 1);
 800937e:	2201      	movs	r2, #1
 8009380:	f04f 31ff 	mov.w	r1, #4294967295
 8009384:	4887      	ldr	r0, [pc, #540]	; (80095a4 <cppLoop+0x1bdc>)
 8009386:	f7f8 ff71 	bl	800226c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800938a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800938e:	f000 fc3b 	bl	8009c08 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009392:	eddf 1a88 	vldr	s3, [pc, #544]	; 80095b4 <cppLoop+0x1bec>
 8009396:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80095b4 <cppLoop+0x1bec>
 800939a:	eddf 0a86 	vldr	s1, [pc, #536]	; 80095b4 <cppLoop+0x1bec>
 800939e:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80095b4 <cppLoop+0x1bec>
 80093a2:	4885      	ldr	r0, [pc, #532]	; (80095b8 <cppLoop+0x1bf0>)
 80093a4:	f7f7 ff54 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80093a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093ac:	f000 fc2c 	bl	8009c08 <HAL_Delay>

			logger.start();
 80093b0:	4884      	ldr	r0, [pc, #528]	; (80095c4 <cppLoop+0x1bfc>)
 80093b2:	f7fb fd0d 	bl	8004dd0 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80093b6:	4884      	ldr	r0, [pc, #528]	; (80095c8 <cppLoop+0x1c00>)
 80093b8:	f7fc fc67 	bl	8005c8a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80093bc:	eddf 0a83 	vldr	s1, [pc, #524]	; 80095cc <cppLoop+0x1c04>
 80093c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80093c4:	4880      	ldr	r0, [pc, #512]	; (80095c8 <cppLoop+0x1c00>)
 80093c6:	f7fc fbf3 	bl	8005bb0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80093ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093ce:	f000 fc1b 	bl	8009c08 <HAL_Delay>

			logger.stop();
 80093d2:	487c      	ldr	r0, [pc, #496]	; (80095c4 <cppLoop+0x1bfc>)
 80093d4:	f7fb fd1b 	bl	8004e0e <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80093d8:	487b      	ldr	r0, [pc, #492]	; (80095c8 <cppLoop+0x1c00>)
 80093da:	f7fc fc69 	bl	8005cb0 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80093de:	4876      	ldr	r0, [pc, #472]	; (80095b8 <cppLoop+0x1bf0>)
 80093e0:	f7f7 ffd0 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80093e4:	4a7a      	ldr	r2, [pc, #488]	; (80095d0 <cppLoop+0x1c08>)
 80093e6:	497b      	ldr	r1, [pc, #492]	; (80095d4 <cppLoop+0x1c0c>)
 80093e8:	4876      	ldr	r0, [pc, #472]	; (80095c4 <cppLoop+0x1bfc>)
 80093ea:	f7fb fbec 	bl	8004bc6 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80093ee:	2200      	movs	r2, #0
 80093f0:	f04f 31ff 	mov.w	r1, #4294967295
 80093f4:	486b      	ldr	r0, [pc, #428]	; (80095a4 <cppLoop+0x1bdc>)
 80093f6:	f7f8 ff39 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 80093fa:	e2d5      	b.n	80099a8 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 80093fc:	2157      	movs	r1, #87	; 0x57
 80093fe:	4869      	ldr	r0, [pc, #420]	; (80095a4 <cppLoop+0x1bdc>)
 8009400:	f7f8 fe78 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009404:	f7f7 fe4c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009408:	2100      	movs	r1, #0
 800940a:	2000      	movs	r0, #0
 800940c:	f7f7 fe58 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009410:	4871      	ldr	r0, [pc, #452]	; (80095d8 <cppLoop+0x1c10>)
 8009412:	f7f7 fe7f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009416:	2101      	movs	r1, #1
 8009418:	2000      	movs	r0, #0
 800941a:	f7f7 fe51 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800941e:	4b6f      	ldr	r3, [pc, #444]	; (80095dc <cppLoop+0x1c14>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f7f7 f8a8 	bl	8000578 <__aeabi_f2d>
 8009428:	4603      	mov	r3, r0
 800942a:	460c      	mov	r4, r1
 800942c:	461a      	mov	r2, r3
 800942e:	4623      	mov	r3, r4
 8009430:	486b      	ldr	r0, [pc, #428]	; (80095e0 <cppLoop+0x1c18>)
 8009432:	f7f7 fe6f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009436:	485e      	ldr	r0, [pc, #376]	; (80095b0 <cppLoop+0x1be8>)
 8009438:	f7f8 fdf8 	bl	800202c <_ZN8JoyStick8getValueEv>
 800943c:	4603      	mov	r3, r0
 800943e:	2b02      	cmp	r3, #2
 8009440:	bf0c      	ite	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	2300      	movne	r3, #0
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 82af 	beq.w	80099ac <cppLoop+0x1fe4>
			HAL_Delay(500);
 800944e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009452:	f000 fbd9 	bl	8009c08 <HAL_Delay>

			led.LR(1, -1);
 8009456:	f04f 32ff 	mov.w	r2, #4294967295
 800945a:	2101      	movs	r1, #1
 800945c:	4851      	ldr	r0, [pc, #324]	; (80095a4 <cppLoop+0x1bdc>)
 800945e:	f7f8 ff05 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009462:	2102      	movs	r1, #2
 8009464:	485f      	ldr	r0, [pc, #380]	; (80095e4 <cppLoop+0x1c1c>)
 8009466:	f7fa fea1 	bl	80041ac <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800946a:	4b5f      	ldr	r3, [pc, #380]	; (80095e8 <cppLoop+0x1c20>)
 800946c:	edd3 7a00 	vldr	s15, [r3]
 8009470:	eeb0 0a67 	vmov.f32	s0, s15
 8009474:	485b      	ldr	r0, [pc, #364]	; (80095e4 <cppLoop+0x1c1c>)
 8009476:	f7fa fc2a 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800947a:	4b58      	ldr	r3, [pc, #352]	; (80095dc <cppLoop+0x1c14>)
 800947c:	edd3 7a00 	vldr	s15, [r3]
 8009480:	eeb0 0a67 	vmov.f32	s0, s15
 8009484:	4857      	ldr	r0, [pc, #348]	; (80095e4 <cppLoop+0x1c1c>)
 8009486:	f7fa fc32 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800948a:	4b54      	ldr	r3, [pc, #336]	; (80095dc <cppLoop+0x1c14>)
 800948c:	edd3 7a00 	vldr	s15, [r3]
 8009490:	eeb0 0a67 	vmov.f32	s0, s15
 8009494:	4853      	ldr	r0, [pc, #332]	; (80095e4 <cppLoop+0x1c1c>)
 8009496:	f7fa fc4a 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800949a:	4852      	ldr	r0, [pc, #328]	; (80095e4 <cppLoop+0x1c1c>)
 800949c:	f7fb f8fa 	bl	8004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80094a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094a4:	f000 fbb0 	bl	8009c08 <HAL_Delay>

			line_trace.running();
 80094a8:	484e      	ldr	r0, [pc, #312]	; (80095e4 <cppLoop+0x1c1c>)
 80094aa:	f7fa fec3 	bl	8004234 <_ZN9LineTrace7runningEv>

			esc.off();
 80094ae:	4842      	ldr	r0, [pc, #264]	; (80095b8 <cppLoop+0x1bf0>)
 80094b0:	f7f7 ff68 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	2100      	movs	r1, #0
 80094ba:	483a      	ldr	r0, [pc, #232]	; (80095a4 <cppLoop+0x1bdc>)
 80094bc:	f7f8 fed6 	bl	800226c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80094c0:	e274      	b.n	80099ac <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 80094c2:	2157      	movs	r1, #87	; 0x57
 80094c4:	4837      	ldr	r0, [pc, #220]	; (80095a4 <cppLoop+0x1bdc>)
 80094c6:	f7f8 fe15 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ca:	f7f7 fde9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ce:	2100      	movs	r1, #0
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7f7 fdf5 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80094d6:	4845      	ldr	r0, [pc, #276]	; (80095ec <cppLoop+0x1c24>)
 80094d8:	f7f7 fe1c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094dc:	2101      	movs	r1, #1
 80094de:	2000      	movs	r0, #0
 80094e0:	f7f7 fdee 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80094e4:	4b42      	ldr	r3, [pc, #264]	; (80095f0 <cppLoop+0x1c28>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f7 f845 	bl	8000578 <__aeabi_f2d>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	461a      	mov	r2, r3
 80094f4:	4623      	mov	r3, r4
 80094f6:	483a      	ldr	r0, [pc, #232]	; (80095e0 <cppLoop+0x1c18>)
 80094f8:	f7f7 fe0c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094fc:	482c      	ldr	r0, [pc, #176]	; (80095b0 <cppLoop+0x1be8>)
 80094fe:	f7f8 fd95 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009502:	4603      	mov	r3, r0
 8009504:	2b02      	cmp	r3, #2
 8009506:	bf0c      	ite	eq
 8009508:	2301      	moveq	r3, #1
 800950a:	2300      	movne	r3, #0
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 824e 	beq.w	80099b0 <cppLoop+0x1fe8>
			HAL_Delay(500);
 8009514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009518:	f000 fb76 	bl	8009c08 <HAL_Delay>

			led.LR(1, -1);
 800951c:	f04f 32ff 	mov.w	r2, #4294967295
 8009520:	2101      	movs	r1, #1
 8009522:	4820      	ldr	r0, [pc, #128]	; (80095a4 <cppLoop+0x1bdc>)
 8009524:	f7f8 fea2 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009528:	2101      	movs	r1, #1
 800952a:	482e      	ldr	r0, [pc, #184]	; (80095e4 <cppLoop+0x1c1c>)
 800952c:	f7fa fe3e 	bl	80041ac <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009530:	4b30      	ldr	r3, [pc, #192]	; (80095f4 <cppLoop+0x1c2c>)
 8009532:	edd3 7a00 	vldr	s15, [r3]
 8009536:	eeb0 0a67 	vmov.f32	s0, s15
 800953a:	482a      	ldr	r0, [pc, #168]	; (80095e4 <cppLoop+0x1c1c>)
 800953c:	f7fa fbc7 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009540:	4b2b      	ldr	r3, [pc, #172]	; (80095f0 <cppLoop+0x1c28>)
 8009542:	edd3 7a00 	vldr	s15, [r3]
 8009546:	eeb0 0a67 	vmov.f32	s0, s15
 800954a:	4826      	ldr	r0, [pc, #152]	; (80095e4 <cppLoop+0x1c1c>)
 800954c:	f7fa fbcf 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009550:	4b28      	ldr	r3, [pc, #160]	; (80095f4 <cppLoop+0x1c2c>)
 8009552:	edd3 7a00 	vldr	s15, [r3]
 8009556:	eeb0 0a67 	vmov.f32	s0, s15
 800955a:	4822      	ldr	r0, [pc, #136]	; (80095e4 <cppLoop+0x1c1c>)
 800955c:	f7fa fbe7 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009560:	4820      	ldr	r0, [pc, #128]	; (80095e4 <cppLoop+0x1c1c>)
 8009562:	f7fb f897 	bl	8004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800956a:	f000 fb4d 	bl	8009c08 <HAL_Delay>

			logger.start();
 800956e:	4815      	ldr	r0, [pc, #84]	; (80095c4 <cppLoop+0x1bfc>)
 8009570:	f7fb fc2e 	bl	8004dd0 <_ZN6Logger5startEv>

			line_trace.running();
 8009574:	481b      	ldr	r0, [pc, #108]	; (80095e4 <cppLoop+0x1c1c>)
 8009576:	f7fa fe5d 	bl	8004234 <_ZN9LineTrace7runningEv>

			logger.stop();
 800957a:	4812      	ldr	r0, [pc, #72]	; (80095c4 <cppLoop+0x1bfc>)
 800957c:	f7fb fc47 	bl	8004e0e <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 8009580:	4a1d      	ldr	r2, [pc, #116]	; (80095f8 <cppLoop+0x1c30>)
 8009582:	491e      	ldr	r1, [pc, #120]	; (80095fc <cppLoop+0x1c34>)
 8009584:	480f      	ldr	r0, [pc, #60]	; (80095c4 <cppLoop+0x1bfc>)
 8009586:	f7fb fb1e 	bl	8004bc6 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 800958a:	4a1d      	ldr	r2, [pc, #116]	; (8009600 <cppLoop+0x1c38>)
 800958c:	491b      	ldr	r1, [pc, #108]	; (80095fc <cppLoop+0x1c34>)
 800958e:	480d      	ldr	r0, [pc, #52]	; (80095c4 <cppLoop+0x1bfc>)
 8009590:	f7fb fb2d 	bl	8004bee <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	2100      	movs	r1, #0
 800959a:	4802      	ldr	r0, [pc, #8]	; (80095a4 <cppLoop+0x1bdc>)
 800959c:	f7f8 fe66 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 80095a0:	e206      	b.n	80099b0 <cppLoop+0x1fe8>
 80095a2:	bf00      	nop
 80095a4:	20000548 	.word	0x20000548
 80095a8:	08018df4 	.word	0x08018df4
 80095ac:	08018df8 	.word	0x08018df8
 80095b0:	2000053c 	.word	0x2000053c
 80095b4:	3ea3d70a 	.word	0x3ea3d70a
 80095b8:	20023898 	.word	0x20023898
 80095bc:	08018e00 	.word	0x08018e00
 80095c0:	08018e04 	.word	0x08018e04
 80095c4:	2000056c 	.word	0x2000056c
 80095c8:	2002381c 	.word	0x2002381c
 80095cc:	00000000 	.word	0x00000000
 80095d0:	08018e10 	.word	0x08018e10
 80095d4:	08018e1c 	.word	0x08018e1c
 80095d8:	08018e28 	.word	0x08018e28
 80095dc:	2004815c 	.word	0x2004815c
 80095e0:	08018ccc 	.word	0x08018ccc
 80095e4:	2002389c 	.word	0x2002389c
 80095e8:	2004816c 	.word	0x2004816c
 80095ec:	08018e34 	.word	0x08018e34
 80095f0:	20048154 	.word	0x20048154
 80095f4:	20048164 	.word	0x20048164
 80095f8:	08018cf0 	.word	0x08018cf0
 80095fc:	08018ce4 	.word	0x08018ce4
 8009600:	08018cd8 	.word	0x08018cd8

	case 15:
		led.fullColor('W');
 8009604:	2157      	movs	r1, #87	; 0x57
 8009606:	48ac      	ldr	r0, [pc, #688]	; (80098b8 <cppLoop+0x1ef0>)
 8009608:	f7f8 fd74 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800960c:	f7f7 fd48 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009610:	2100      	movs	r1, #0
 8009612:	2000      	movs	r0, #0
 8009614:	f7f7 fd54 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8009618:	48a8      	ldr	r0, [pc, #672]	; (80098bc <cppLoop+0x1ef4>)
 800961a:	f7fa fad6 	bl	8003bca <_ZN9LineTrace5getKpEv>
 800961e:	eeb0 7a40 	vmov.f32	s14, s0
 8009622:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80098c0 <cppLoop+0x1ef8>
 8009626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962a:	eeb0 0a67 	vmov.f32	s0, s15
 800962e:	f7f9 f923 	bl	8002878 <_ZSt3absf>
 8009632:	ee10 3a10 	vmov	r3, s0
 8009636:	4618      	mov	r0, r3
 8009638:	f7f6 ff9e 	bl	8000578 <__aeabi_f2d>
 800963c:	4603      	mov	r3, r0
 800963e:	460c      	mov	r4, r1
 8009640:	461a      	mov	r2, r3
 8009642:	4623      	mov	r3, r4
 8009644:	489f      	ldr	r0, [pc, #636]	; (80098c4 <cppLoop+0x1efc>)
 8009646:	f7f7 fd65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800964a:	2101      	movs	r1, #1
 800964c:	2000      	movs	r0, #0
 800964e:	f7f7 fd37 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 8009652:	489a      	ldr	r0, [pc, #616]	; (80098bc <cppLoop+0x1ef4>)
 8009654:	f7fa fac8 	bl	8003be8 <_ZN9LineTrace5getKiEv>
 8009658:	eeb0 7a40 	vmov.f32	s14, s0
 800965c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80098c8 <cppLoop+0x1f00>
 8009660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009664:	eeb0 0a67 	vmov.f32	s0, s15
 8009668:	f7f9 f906 	bl	8002878 <_ZSt3absf>
 800966c:	ee10 3a10 	vmov	r3, s0
 8009670:	4618      	mov	r0, r3
 8009672:	f7f6 ff81 	bl	8000578 <__aeabi_f2d>
 8009676:	4605      	mov	r5, r0
 8009678:	460e      	mov	r6, r1
 800967a:	4890      	ldr	r0, [pc, #576]	; (80098bc <cppLoop+0x1ef4>)
 800967c:	f7fa fac3 	bl	8003c06 <_ZN9LineTrace5getKdEv>
 8009680:	eeb0 7a40 	vmov.f32	s14, s0
 8009684:	eddf 7a91 	vldr	s15, [pc, #580]	; 80098cc <cppLoop+0x1f04>
 8009688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968c:	eeb0 0a67 	vmov.f32	s0, s15
 8009690:	f7f9 f8f2 	bl	8002878 <_ZSt3absf>
 8009694:	ee10 3a10 	vmov	r3, s0
 8009698:	4618      	mov	r0, r3
 800969a:	f7f6 ff6d 	bl	8000578 <__aeabi_f2d>
 800969e:	4603      	mov	r3, r0
 80096a0:	460c      	mov	r4, r1
 80096a2:	e9cd 3400 	strd	r3, r4, [sp]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4633      	mov	r3, r6
 80096aa:	4889      	ldr	r0, [pc, #548]	; (80098d0 <cppLoop+0x1f08>)
 80096ac:	f7f7 fd32 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80096b0:	4888      	ldr	r0, [pc, #544]	; (80098d4 <cppLoop+0x1f0c>)
 80096b2:	f7f8 fcbb 	bl	800202c <_ZN8JoyStick8getValueEv>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b08      	cmp	r3, #8
 80096ba:	bf0c      	ite	eq
 80096bc:	2301      	moveq	r3, #1
 80096be:	2300      	movne	r3, #0
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d021      	beq.n	800970a <cppLoop+0x1d42>
			led.LR(-1, 1);
 80096c6:	2201      	movs	r2, #1
 80096c8:	f04f 31ff 	mov.w	r1, #4294967295
 80096cc:	487a      	ldr	r0, [pc, #488]	; (80098b8 <cppLoop+0x1ef0>)
 80096ce:	f7f8 fdcd 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80096d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80096d6:	f000 fa97 	bl	8009c08 <HAL_Delay>

			selector++;
 80096da:	4b7f      	ldr	r3, [pc, #508]	; (80098d8 <cppLoop+0x1f10>)
 80096dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3301      	adds	r3, #1
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	b21a      	sxth	r2, r3
 80096e8:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <cppLoop+0x1f10>)
 80096ea:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80096ec:	4b7a      	ldr	r3, [pc, #488]	; (80098d8 <cppLoop+0x1f10>)
 80096ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	dd02      	ble.n	80096fc <cppLoop+0x1d34>
 80096f6:	4b78      	ldr	r3, [pc, #480]	; (80098d8 <cppLoop+0x1f10>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009702:	486d      	ldr	r0, [pc, #436]	; (80098b8 <cppLoop+0x1ef0>)
 8009704:	f7f8 fdb2 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009708:	e154      	b.n	80099b4 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 800970a:	4872      	ldr	r0, [pc, #456]	; (80098d4 <cppLoop+0x1f0c>)
 800970c:	f7f8 fc8e 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009710:	4603      	mov	r3, r0
 8009712:	2b10      	cmp	r3, #16
 8009714:	bf0c      	ite	eq
 8009716:	2301      	moveq	r3, #1
 8009718:	2300      	movne	r3, #0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d058      	beq.n	80097d2 <cppLoop+0x1e0a>
			led.LR(-1, 1);
 8009720:	2201      	movs	r2, #1
 8009722:	f04f 31ff 	mov.w	r1, #4294967295
 8009726:	4864      	ldr	r0, [pc, #400]	; (80098b8 <cppLoop+0x1ef0>)
 8009728:	f7f8 fda0 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800972c:	2064      	movs	r0, #100	; 0x64
 800972e:	f000 fa6b 	bl	8009c08 <HAL_Delay>
			if(selector == 0){
 8009732:	4b69      	ldr	r3, [pc, #420]	; (80098d8 <cppLoop+0x1f10>)
 8009734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d113      	bne.n	8009764 <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.000001;
 800973c:	4b67      	ldr	r3, [pc, #412]	; (80098dc <cppLoop+0x1f14>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f7f6 ff19 	bl	8000578 <__aeabi_f2d>
 8009746:	a356      	add	r3, pc, #344	; (adr r3, 80098a0 <cppLoop+0x1ed8>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 fdb6 	bl	80002bc <__adddf3>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4618      	mov	r0, r3
 8009756:	4621      	mov	r1, r4
 8009758:	f7f7 fa5e 	bl	8000c18 <__aeabi_d2f>
 800975c:	4602      	mov	r2, r0
 800975e:	4b5f      	ldr	r3, [pc, #380]	; (80098dc <cppLoop+0x1f14>)
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e02b      	b.n	80097bc <cppLoop+0x1df4>
			else if(selector == 1){
 8009764:	4b5c      	ldr	r3, [pc, #368]	; (80098d8 <cppLoop+0x1f10>)
 8009766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d113      	bne.n	8009796 <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.00001;
 800976e:	4b5c      	ldr	r3, [pc, #368]	; (80098e0 <cppLoop+0x1f18>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7f6 ff00 	bl	8000578 <__aeabi_f2d>
 8009778:	a34b      	add	r3, pc, #300	; (adr r3, 80098a8 <cppLoop+0x1ee0>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fd9d 	bl	80002bc <__adddf3>
 8009782:	4603      	mov	r3, r0
 8009784:	460c      	mov	r4, r1
 8009786:	4618      	mov	r0, r3
 8009788:	4621      	mov	r1, r4
 800978a:	f7f7 fa45 	bl	8000c18 <__aeabi_d2f>
 800978e:	4602      	mov	r2, r0
 8009790:	4b53      	ldr	r3, [pc, #332]	; (80098e0 <cppLoop+0x1f18>)
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e012      	b.n	80097bc <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.0000001;
 8009796:	4b53      	ldr	r3, [pc, #332]	; (80098e4 <cppLoop+0x1f1c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f7f6 feec 	bl	8000578 <__aeabi_f2d>
 80097a0:	a343      	add	r3, pc, #268	; (adr r3, 80098b0 <cppLoop+0x1ee8>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 fd89 	bl	80002bc <__adddf3>
 80097aa:	4603      	mov	r3, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	4618      	mov	r0, r3
 80097b0:	4621      	mov	r1, r4
 80097b2:	f7f7 fa31 	bl	8000c18 <__aeabi_d2f>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b4a      	ldr	r3, [pc, #296]	; (80098e4 <cppLoop+0x1f1c>)
 80097ba:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80097bc:	2152      	movs	r1, #82	; 0x52
 80097be:	483e      	ldr	r0, [pc, #248]	; (80098b8 <cppLoop+0x1ef0>)
 80097c0:	f7f8 fc98 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80097c4:	2200      	movs	r2, #0
 80097c6:	f04f 31ff 	mov.w	r1, #4294967295
 80097ca:	483b      	ldr	r0, [pc, #236]	; (80098b8 <cppLoop+0x1ef0>)
 80097cc:	f7f8 fd4e 	bl	800226c <_ZN3LED2LREaa>
		break;
 80097d0:	e0f0      	b.n	80099b4 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 80097d2:	4840      	ldr	r0, [pc, #256]	; (80098d4 <cppLoop+0x1f0c>)
 80097d4:	f7f8 fc2a 	bl	800202c <_ZN8JoyStick8getValueEv>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b01      	cmp	r3, #1
 80097dc:	bf0c      	ite	eq
 80097de:	2301      	moveq	r3, #1
 80097e0:	2300      	movne	r3, #0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d07f      	beq.n	80098e8 <cppLoop+0x1f20>
			led.LR(-1, 1);
 80097e8:	2201      	movs	r2, #1
 80097ea:	f04f 31ff 	mov.w	r1, #4294967295
 80097ee:	4832      	ldr	r0, [pc, #200]	; (80098b8 <cppLoop+0x1ef0>)
 80097f0:	f7f8 fd3c 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80097f4:	2064      	movs	r0, #100	; 0x64
 80097f6:	f000 fa07 	bl	8009c08 <HAL_Delay>
			if(selector == 0){
 80097fa:	4b37      	ldr	r3, [pc, #220]	; (80098d8 <cppLoop+0x1f10>)
 80097fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d113      	bne.n	800982c <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.000001;
 8009804:	4b35      	ldr	r3, [pc, #212]	; (80098dc <cppLoop+0x1f14>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f7f6 feb5 	bl	8000578 <__aeabi_f2d>
 800980e:	a324      	add	r3, pc, #144	; (adr r3, 80098a0 <cppLoop+0x1ed8>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fd50 	bl	80002b8 <__aeabi_dsub>
 8009818:	4603      	mov	r3, r0
 800981a:	460c      	mov	r4, r1
 800981c:	4618      	mov	r0, r3
 800981e:	4621      	mov	r1, r4
 8009820:	f7f7 f9fa 	bl	8000c18 <__aeabi_d2f>
 8009824:	4602      	mov	r2, r0
 8009826:	4b2d      	ldr	r3, [pc, #180]	; (80098dc <cppLoop+0x1f14>)
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e02b      	b.n	8009884 <cppLoop+0x1ebc>
			else if(selector == 1){
 800982c:	4b2a      	ldr	r3, [pc, #168]	; (80098d8 <cppLoop+0x1f10>)
 800982e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d113      	bne.n	800985e <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.00001;
 8009836:	4b2a      	ldr	r3, [pc, #168]	; (80098e0 <cppLoop+0x1f18>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f7f6 fe9c 	bl	8000578 <__aeabi_f2d>
 8009840:	a319      	add	r3, pc, #100	; (adr r3, 80098a8 <cppLoop+0x1ee0>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f7f6 fd37 	bl	80002b8 <__aeabi_dsub>
 800984a:	4603      	mov	r3, r0
 800984c:	460c      	mov	r4, r1
 800984e:	4618      	mov	r0, r3
 8009850:	4621      	mov	r1, r4
 8009852:	f7f7 f9e1 	bl	8000c18 <__aeabi_d2f>
 8009856:	4602      	mov	r2, r0
 8009858:	4b21      	ldr	r3, [pc, #132]	; (80098e0 <cppLoop+0x1f18>)
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	e012      	b.n	8009884 <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.0000001;
 800985e:	4b21      	ldr	r3, [pc, #132]	; (80098e4 <cppLoop+0x1f1c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7f6 fe88 	bl	8000578 <__aeabi_f2d>
 8009868:	a311      	add	r3, pc, #68	; (adr r3, 80098b0 <cppLoop+0x1ee8>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fd23 	bl	80002b8 <__aeabi_dsub>
 8009872:	4603      	mov	r3, r0
 8009874:	460c      	mov	r4, r1
 8009876:	4618      	mov	r0, r3
 8009878:	4621      	mov	r1, r4
 800987a:	f7f7 f9cd 	bl	8000c18 <__aeabi_d2f>
 800987e:	4602      	mov	r2, r0
 8009880:	4b18      	ldr	r3, [pc, #96]	; (80098e4 <cppLoop+0x1f1c>)
 8009882:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009884:	2152      	movs	r1, #82	; 0x52
 8009886:	480c      	ldr	r0, [pc, #48]	; (80098b8 <cppLoop+0x1ef0>)
 8009888:	f7f8 fc34 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800988c:	2200      	movs	r2, #0
 800988e:	f04f 31ff 	mov.w	r1, #4294967295
 8009892:	4809      	ldr	r0, [pc, #36]	; (80098b8 <cppLoop+0x1ef0>)
 8009894:	f7f8 fcea 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009898:	e08c      	b.n	80099b4 <cppLoop+0x1fec>
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w
 80098a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80098a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80098a8:	88e368f1 	.word	0x88e368f1
 80098ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80098b0:	9abcaf48 	.word	0x9abcaf48
 80098b4:	3e7ad7f2 	.word	0x3e7ad7f2
 80098b8:	20000548 	.word	0x20000548
 80098bc:	2002389c 	.word	0x2002389c
 80098c0:	461c4000 	.word	0x461c4000
 80098c4:	08018e40 	.word	0x08018e40
 80098c8:	447a0000 	.word	0x447a0000
 80098cc:	47c35000 	.word	0x47c35000
 80098d0:	08018c84 	.word	0x08018c84
 80098d4:	2000053c 	.word	0x2000053c
 80098d8:	20048110 	.word	0x20048110
 80098dc:	2004811c 	.word	0x2004811c
 80098e0:	20048124 	.word	0x20048124
 80098e4:	2004812c 	.word	0x2004812c
		else if(joy_stick.getValue() == JOY_C){
 80098e8:	4836      	ldr	r0, [pc, #216]	; (80099c4 <cppLoop+0x1ffc>)
 80098ea:	f7f8 fb9f 	bl	800202c <_ZN8JoyStick8getValueEv>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	bf0c      	ite	eq
 80098f4:	2301      	moveq	r3, #1
 80098f6:	2300      	movne	r3, #0
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d05a      	beq.n	80099b4 <cppLoop+0x1fec>
			led.LR(-1, 1);
 80098fe:	2201      	movs	r2, #1
 8009900:	f04f 31ff 	mov.w	r1, #4294967295
 8009904:	4830      	ldr	r0, [pc, #192]	; (80099c8 <cppLoop+0x2000>)
 8009906:	f7f8 fcb1 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800990a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800990e:	f000 f97b 	bl	8009c08 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009912:	2300      	movs	r3, #0
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <cppLoop+0x2004>)
 8009918:	2201      	movs	r2, #1
 800991a:	492d      	ldr	r1, [pc, #180]	; (80099d0 <cppLoop+0x2008>)
 800991c:	482d      	ldr	r0, [pc, #180]	; (80099d4 <cppLoop+0x200c>)
 800991e:	f7f7 ff6f 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009922:	2300      	movs	r3, #0
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	4b2c      	ldr	r3, [pc, #176]	; (80099d8 <cppLoop+0x2010>)
 8009928:	2201      	movs	r2, #1
 800992a:	492c      	ldr	r1, [pc, #176]	; (80099dc <cppLoop+0x2014>)
 800992c:	4829      	ldr	r0, [pc, #164]	; (80099d4 <cppLoop+0x200c>)
 800992e:	f7f7 ff67 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009932:	2300      	movs	r3, #0
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <cppLoop+0x2018>)
 8009938:	2201      	movs	r2, #1
 800993a:	492a      	ldr	r1, [pc, #168]	; (80099e4 <cppLoop+0x201c>)
 800993c:	4825      	ldr	r0, [pc, #148]	; (80099d4 <cppLoop+0x200c>)
 800993e:	f7f7 ff5f 	bl	8001800 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009942:	4b22      	ldr	r3, [pc, #136]	; (80099cc <cppLoop+0x2004>)
 8009944:	edd3 7a00 	vldr	s15, [r3]
 8009948:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <cppLoop+0x2010>)
 800994a:	ed93 7a00 	vldr	s14, [r3]
 800994e:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <cppLoop+0x2018>)
 8009950:	edd3 6a00 	vldr	s13, [r3]
 8009954:	eeb0 1a66 	vmov.f32	s2, s13
 8009958:	eef0 0a47 	vmov.f32	s1, s14
 800995c:	eeb0 0a67 	vmov.f32	s0, s15
 8009960:	4821      	ldr	r0, [pc, #132]	; (80099e8 <cppLoop+0x2020>)
 8009962:	f7fa f919 	bl	8003b98 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009966:	2200      	movs	r2, #0
 8009968:	f04f 31ff 	mov.w	r1, #4294967295
 800996c:	4816      	ldr	r0, [pc, #88]	; (80099c8 <cppLoop+0x2000>)
 800996e:	f7f8 fc7d 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009972:	e01f      	b.n	80099b4 <cppLoop+0x1fec>

	default:
		break;
 8009974:	bf00      	nop
 8009976:	e01e      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009978:	bf00      	nop
 800997a:	e01c      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 800997c:	bf00      	nop
 800997e:	e01a      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009980:	bf00      	nop
 8009982:	e018      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009984:	bf00      	nop
 8009986:	e016      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009988:	bf00      	nop
 800998a:	e014      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 800998c:	bf00      	nop
 800998e:	e012      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009990:	bf00      	nop
 8009992:	e010      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009994:	bf00      	nop
 8009996:	e00e      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 8009998:	bf00      	nop
 800999a:	e00c      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 800999c:	bf00      	nop
 800999e:	e00a      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099a0:	bf00      	nop
 80099a2:	e008      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099a4:	bf00      	nop
 80099a6:	e006      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099a8:	bf00      	nop
 80099aa:	e004      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099ac:	bf00      	nop
 80099ae:	e002      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099b0:	bf00      	nop
 80099b2:	e000      	b.n	80099b6 <cppLoop+0x1fee>
		break;
 80099b4:	bf00      	nop

	}

	HAL_Delay(30);
 80099b6:	201e      	movs	r0, #30
 80099b8:	f000 f926 	bl	8009c08 <HAL_Delay>

}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c4:	2000053c 	.word	0x2000053c
 80099c8:	20000548 	.word	0x20000548
 80099cc:	2004811c 	.word	0x2004811c
 80099d0:	08018e4c 	.word	0x08018e4c
 80099d4:	08018ca0 	.word	0x08018ca0
 80099d8:	20048124 	.word	0x20048124
 80099dc:	08018e54 	.word	0x08018e54
 80099e0:	2004812c 	.word	0x2004812c
 80099e4:	08018e5c 	.word	0x08018e5c
 80099e8:	2002389c 	.word	0x2002389c

080099ec <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af06      	add	r7, sp, #24
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d142      	bne.n	8009a82 <_Z41__static_initialization_and_destruction_0ii+0x96>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d13d      	bne.n	8009a82 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009a06:	4821      	ldr	r0, [pc, #132]	; (8009a8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009a08:	f7f8 fc68 	bl	80022dc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009a0c:	4820      	ldr	r0, [pc, #128]	; (8009a90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009a0e:	f7fb fd0f 	bl	8005430 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009a12:	4820      	ldr	r0, [pc, #128]	; (8009a94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009a14:	f7f8 fafe 	bl	8002014 <_ZN8JoyStickC1Ev>
Motor motor;
 8009a18:	481f      	ldr	r0, [pc, #124]	; (8009a98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a1a:	f7fb fa09 	bl	8004e30 <_ZN5MotorC1Ev>
IMU imu;
 8009a1e:	481f      	ldr	r0, [pc, #124]	; (8009a9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a20:	f7f8 f906 	bl	8001c30 <_ZN3IMUC1Ev>
Logger logger;
 8009a24:	481e      	ldr	r0, [pc, #120]	; (8009aa0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a26:	f7fa ff25 	bl	8004874 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009a2a:	481e      	ldr	r0, [pc, #120]	; (8009aa4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a2c:	f7f7 fcce 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a32:	4a1c      	ldr	r2, [pc, #112]	; (8009aa4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a34:	4918      	ldr	r1, [pc, #96]	; (8009a98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a36:	481c      	ldr	r0, [pc, #112]	; (8009aa8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a38:	f7fb ff84 	bl	8005944 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009a3c:	4b1a      	ldr	r3, [pc, #104]	; (8009aa8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a3e:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a40:	4918      	ldr	r1, [pc, #96]	; (8009aa4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a42:	481a      	ldr	r0, [pc, #104]	; (8009aac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009a44:	f7fb fada 	bl	8004ffc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009a48:	4819      	ldr	r0, [pc, #100]	; (8009ab0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009a4a:	f7f7 fbc3 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009a4e:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a58:	9303      	str	r3, [sp, #12]
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009a5c:	9302      	str	r3, [sp, #8]
 8009a5e:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a68:	4a08      	ldr	r2, [pc, #32]	; (8009a8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009a6a:	490b      	ldr	r1, [pc, #44]	; (8009a98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a6c:	4811      	ldr	r0, [pc, #68]	; (8009ab4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009a6e:	f7f8 ff13 	bl	8002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009a72:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a74:	490a      	ldr	r1, [pc, #40]	; (8009aa0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a76:	4810      	ldr	r0, [pc, #64]	; (8009ab8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009a78:	f7fb fd9c 	bl	80055b4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009a7c:	480f      	ldr	r0, [pc, #60]	; (8009abc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009a7e:	f7fb fb69 	bl	8005154 <_ZN13PathFollowingC1Ev>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000238 	.word	0x20000238
 8009a90:	20000530 	.word	0x20000530
 8009a94:	2000053c 	.word	0x2000053c
 8009a98:	20000544 	.word	0x20000544
 8009a9c:	20000558 	.word	0x20000558
 8009aa0:	2000056c 	.word	0x2000056c
 8009aa4:	200237f8 	.word	0x200237f8
 8009aa8:	2002381c 	.word	0x2002381c
 8009aac:	20023858 	.word	0x20023858
 8009ab0:	20023898 	.word	0x20023898
 8009ab4:	2002389c 	.word	0x2002389c
 8009ab8:	200307dc 	.word	0x200307dc
 8009abc:	200309e8 	.word	0x200309e8

08009ac0 <_GLOBAL__sub_I_line_sensor>:
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7ff ff8f 	bl	80099ec <_Z41__static_initialization_and_destruction_0ii>
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009ad6:	e003      	b.n	8009ae0 <LoopCopyDataInit>

08009ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009ad8:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ade:	3104      	adds	r1, #4

08009ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ae0:	480b      	ldr	r0, [pc, #44]	; (8009b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ae8:	d3f6      	bcc.n	8009ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8009aea:	4a0b      	ldr	r2, [pc, #44]	; (8009b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009aec:	e002      	b.n	8009af4 <LoopFillZerobss>

08009aee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009af0:	f842 3b04 	str.w	r3, [r2], #4

08009af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009af8:	d3f9      	bcc.n	8009aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009afa:	f7fd fe57 	bl	80077ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009afe:	f00a fd95 	bl	801462c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b02:	f7fc f96f 	bl	8005de4 <main>
  bx  lr    
 8009b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009b0c:	08019278 	.word	0x08019278
  ldr  r0, =_sdata
 8009b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b14:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009b18:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009b1c:	2004cb70 	.word	0x2004cb70

08009b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b20:	e7fe      	b.n	8009b20 <ADC_IRQHandler>
	...

08009b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <HAL_Init+0x40>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a0d      	ldr	r2, [pc, #52]	; (8009b64 <HAL_Init+0x40>)
 8009b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <HAL_Init+0x40>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a0a      	ldr	r2, [pc, #40]	; (8009b64 <HAL_Init+0x40>)
 8009b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b40:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_Init+0x40>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a07      	ldr	r2, [pc, #28]	; (8009b64 <HAL_Init+0x40>)
 8009b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b4c:	2003      	movs	r0, #3
 8009b4e:	f000 fd51 	bl	800a5f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b52:	2000      	movs	r0, #0
 8009b54:	f000 f808 	bl	8009b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b58:	f7fd f868 	bl	8006c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40023c00 	.word	0x40023c00

08009b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b70:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <HAL_InitTick+0x54>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4b12      	ldr	r3, [pc, #72]	; (8009bc0 <HAL_InitTick+0x58>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fd69 	bl	800a65e <HAL_SYSTICK_Config>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e00e      	b.n	8009bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b0f      	cmp	r3, #15
 8009b9a:	d80a      	bhi.n	8009bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba4:	f000 fd31 	bl	800a60a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ba8:	4a06      	ldr	r2, [pc, #24]	; (8009bc4 <HAL_InitTick+0x5c>)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e000      	b.n	8009bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000000 	.word	0x20000000
 8009bc0:	20000008 	.word	0x20000008
 8009bc4:	20000004 	.word	0x20000004

08009bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <HAL_IncTick+0x20>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <HAL_IncTick+0x24>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4a04      	ldr	r2, [pc, #16]	; (8009bec <HAL_IncTick+0x24>)
 8009bda:	6013      	str	r3, [r2, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	20000008 	.word	0x20000008
 8009bec:	2004aaf8 	.word	0x2004aaf8

08009bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8009bf4:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <HAL_GetTick+0x14>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2004aaf8 	.word	0x2004aaf8

08009c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c10:	f7ff ffee 	bl	8009bf0 <HAL_GetTick>
 8009c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d005      	beq.n	8009c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c22:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <HAL_Delay+0x40>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009c2e:	bf00      	nop
 8009c30:	f7ff ffde 	bl	8009bf0 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d8f7      	bhi.n	8009c30 <HAL_Delay+0x28>
  {
  }
}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20000008 	.word	0x20000008

08009c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e033      	b.n	8009cca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fd f806 	bl	8006c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d118      	bne.n	8009cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c92:	f023 0302 	bic.w	r3, r3, #2
 8009c96:	f043 0202 	orr.w	r2, r3, #2
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa5a 	bl	800a158 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	f043 0201 	orr.w	r2, r3, #1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8009cba:	e001      	b.n	8009cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_ADC_Start_DMA+0x1e>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e0cc      	b.n	8009e8c <HAL_ADC_Start_DMA+0x1b8>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d018      	beq.n	8009d3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0201 	orr.w	r2, r2, #1
 8009d16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009d18:	4b5e      	ldr	r3, [pc, #376]	; (8009e94 <HAL_ADC_Start_DMA+0x1c0>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a5e      	ldr	r2, [pc, #376]	; (8009e98 <HAL_ADC_Start_DMA+0x1c4>)
 8009d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d22:	0c9a      	lsrs	r2, r3, #18
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d2c:	e002      	b.n	8009d34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1f9      	bne.n	8009d2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	f040 80a0 	bne.w	8009e8a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d88:	d106      	bne.n	8009d98 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8e:	f023 0206 	bic.w	r2, r3, #6
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	645a      	str	r2, [r3, #68]	; 0x44
 8009d96:	e002      	b.n	8009d9e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009da6:	4b3d      	ldr	r3, [pc, #244]	; (8009e9c <HAL_ADC_Start_DMA+0x1c8>)
 8009da8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	4a3c      	ldr	r2, [pc, #240]	; (8009ea0 <HAL_ADC_Start_DMA+0x1cc>)
 8009db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	4a3b      	ldr	r2, [pc, #236]	; (8009ea4 <HAL_ADC_Start_DMA+0x1d0>)
 8009db8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbe:	4a3a      	ldr	r2, [pc, #232]	; (8009ea8 <HAL_ADC_Start_DMA+0x1d4>)
 8009dc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009dca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009dda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	334c      	adds	r3, #76	; 0x4c
 8009df6:	4619      	mov	r1, r3
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f000 fcea 	bl	800a7d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d12a      	bne.n	8009e62 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a26      	ldr	r2, [pc, #152]	; (8009eac <HAL_ADC_Start_DMA+0x1d8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d015      	beq.n	8009e42 <HAL_ADC_Start_DMA+0x16e>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a25      	ldr	r2, [pc, #148]	; (8009eb0 <HAL_ADC_Start_DMA+0x1dc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d105      	bne.n	8009e2c <HAL_ADC_Start_DMA+0x158>
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <HAL_ADC_Start_DMA+0x1c8>)
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a20      	ldr	r2, [pc, #128]	; (8009eb4 <HAL_ADC_Start_DMA+0x1e0>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d129      	bne.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
 8009e36:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <HAL_ADC_Start_DMA+0x1c8>)
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f003 031f 	and.w	r3, r3, #31
 8009e3e:	2b0f      	cmp	r3, #15
 8009e40:	d823      	bhi.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11c      	bne.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e5e:	609a      	str	r2, [r3, #8]
 8009e60:	e013      	b.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a11      	ldr	r2, [pc, #68]	; (8009eac <HAL_ADC_Start_DMA+0x1d8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d10e      	bne.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d107      	bne.n	8009e8a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e88:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000000 	.word	0x20000000
 8009e98:	431bde83 	.word	0x431bde83
 8009e9c:	40012300 	.word	0x40012300
 8009ea0:	0800a351 	.word	0x0800a351
 8009ea4:	0800a40b 	.word	0x0800a40b
 8009ea8:	0800a427 	.word	0x0800a427
 8009eac:	40012000 	.word	0x40012000
 8009eb0:	40012100 	.word	0x40012100
 8009eb4:	40012200 	.word	0x40012200

08009eb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_ADC_ConfigChannel+0x1c>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e113      	b.n	800a138 <HAL_ADC_ConfigChannel+0x244>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	d925      	bls.n	8009f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68d9      	ldr	r1, [r3, #12]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4613      	mov	r3, r2
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	4413      	add	r3, r2
 8009f34:	3b1e      	subs	r3, #30
 8009f36:	2207      	movs	r2, #7
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	43da      	mvns	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	400a      	ands	r2, r1
 8009f44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68d9      	ldr	r1, [r3, #12]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	4618      	mov	r0, r3
 8009f58:	4603      	mov	r3, r0
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	4403      	add	r3, r0
 8009f5e:	3b1e      	subs	r3, #30
 8009f60:	409a      	lsls	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	60da      	str	r2, [r3, #12]
 8009f6a:	e022      	b.n	8009fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6919      	ldr	r1, [r3, #16]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	4413      	add	r3, r2
 8009f80:	2207      	movs	r2, #7
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43da      	mvns	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	400a      	ands	r2, r1
 8009f8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6919      	ldr	r1, [r3, #16]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	689a      	ldr	r2, [r3, #8]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4403      	add	r3, r0
 8009fa8:	409a      	lsls	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2b06      	cmp	r3, #6
 8009fb8:	d824      	bhi.n	800a004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	3b05      	subs	r3, #5
 8009fcc:	221f      	movs	r2, #31
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	43da      	mvns	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	400a      	ands	r2, r1
 8009fda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4618      	mov	r0, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3b05      	subs	r3, #5
 8009ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	635a      	str	r2, [r3, #52]	; 0x34
 800a002:	e04c      	b.n	800a09e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	2b0c      	cmp	r3, #12
 800a00a:	d824      	bhi.n	800a056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	3b23      	subs	r3, #35	; 0x23
 800a01e:	221f      	movs	r2, #31
 800a020:	fa02 f303 	lsl.w	r3, r2, r3
 800a024:	43da      	mvns	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	400a      	ands	r2, r1
 800a02c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4618      	mov	r0, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	3b23      	subs	r3, #35	; 0x23
 800a048:	fa00 f203 	lsl.w	r2, r0, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	430a      	orrs	r2, r1
 800a052:	631a      	str	r2, [r3, #48]	; 0x30
 800a054:	e023      	b.n	800a09e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	3b41      	subs	r3, #65	; 0x41
 800a068:	221f      	movs	r2, #31
 800a06a:	fa02 f303 	lsl.w	r3, r2, r3
 800a06e:	43da      	mvns	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	400a      	ands	r2, r1
 800a076:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	4618      	mov	r0, r3
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	3b41      	subs	r3, #65	; 0x41
 800a092:	fa00 f203 	lsl.w	r2, r0, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a09e:	4b29      	ldr	r3, [pc, #164]	; (800a144 <HAL_ADC_ConfigChannel+0x250>)
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a28      	ldr	r2, [pc, #160]	; (800a148 <HAL_ADC_ConfigChannel+0x254>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d10f      	bne.n	800a0cc <HAL_ADC_ConfigChannel+0x1d8>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b12      	cmp	r3, #18
 800a0b2:	d10b      	bne.n	800a0cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a1d      	ldr	r2, [pc, #116]	; (800a148 <HAL_ADC_ConfigChannel+0x254>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d12b      	bne.n	800a12e <HAL_ADC_ConfigChannel+0x23a>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <HAL_ADC_ConfigChannel+0x258>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <HAL_ADC_ConfigChannel+0x1f4>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b11      	cmp	r3, #17
 800a0e6:	d122      	bne.n	800a12e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <HAL_ADC_ConfigChannel+0x258>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d111      	bne.n	800a12e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a10a:	4b11      	ldr	r3, [pc, #68]	; (800a150 <HAL_ADC_ConfigChannel+0x25c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a11      	ldr	r2, [pc, #68]	; (800a154 <HAL_ADC_ConfigChannel+0x260>)
 800a110:	fba2 2303 	umull	r2, r3, r2, r3
 800a114:	0c9a      	lsrs	r2, r3, #18
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a120:	e002      	b.n	800a128 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	3b01      	subs	r3, #1
 800a126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1f9      	bne.n	800a122 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	40012300 	.word	0x40012300
 800a148:	40012000 	.word	0x40012000
 800a14c:	10000012 	.word	0x10000012
 800a150:	20000000 	.word	0x20000000
 800a154:	431bde83 	.word	0x431bde83

0800a158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a160:	4b79      	ldr	r3, [pc, #484]	; (800a348 <ADC_Init+0x1f0>)
 800a162:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	431a      	orrs	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a18c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6859      	ldr	r1, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	021a      	lsls	r2, r3, #8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a1b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6859      	ldr	r1, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6899      	ldr	r1, [r3, #8]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	4a58      	ldr	r2, [pc, #352]	; (800a34c <ADC_Init+0x1f4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d022      	beq.n	800a236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6899      	ldr	r1, [r3, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6899      	ldr	r1, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	609a      	str	r2, [r3, #8]
 800a234:	e00f      	b.n	800a256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0202 	bic.w	r2, r2, #2
 800a264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6899      	ldr	r1, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7e1b      	ldrb	r3, [r3, #24]
 800a270:	005a      	lsls	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01b      	beq.n	800a2bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a2a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	035a      	lsls	r2, r3, #13
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	e007      	b.n	800a2cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a2da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	051a      	lsls	r2, r3, #20
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a30e:	025a      	lsls	r2, r3, #9
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6899      	ldr	r1, [r3, #8]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	029a      	lsls	r2, r3, #10
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	609a      	str	r2, [r3, #8]
}
 800a33c:	bf00      	nop
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	40012300 	.word	0x40012300
 800a34c:	0f000001 	.word	0x0f000001

0800a350 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a362:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a366:	2b00      	cmp	r3, #0
 800a368:	d13c      	bne.n	800a3e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d12b      	bne.n	800a3dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d127      	bne.n	800a3dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a396:	2b00      	cmp	r3, #0
 800a398:	d006      	beq.n	800a3a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d119      	bne.n	800a3dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0220 	bic.w	r2, r2, #32
 800a3b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	f043 0201 	orr.w	r2, r3, #1
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff fd6b 	bl	8009eb8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a3e2:	e00e      	b.n	800a402 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff fd75 	bl	8009ee0 <HAL_ADC_ErrorCallback>
}
 800a3f6:	e004      	b.n	800a402 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	4798      	blx	r3
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fd57 	bl	8009ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a41e:	bf00      	nop
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2240      	movs	r2, #64	; 0x40
 800a438:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43e:	f043 0204 	orr.w	r2, r3, #4
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fd4a 	bl	8009ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a464:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <__NVIC_SetPriorityGrouping+0x44>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a470:	4013      	ands	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a47c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a486:	4a04      	ldr	r2, [pc, #16]	; (800a498 <__NVIC_SetPriorityGrouping+0x44>)
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	60d3      	str	r3, [r2, #12]
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	e000ed00 	.word	0xe000ed00

0800a49c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <__NVIC_GetPriorityGrouping+0x18>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	f003 0307 	and.w	r3, r3, #7
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	e000ed00 	.word	0xe000ed00

0800a4b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	db0b      	blt.n	800a4e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	f003 021f 	and.w	r2, r3, #31
 800a4d0:	4907      	ldr	r1, [pc, #28]	; (800a4f0 <__NVIC_EnableIRQ+0x38>)
 800a4d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	2001      	movs	r0, #1
 800a4da:	fa00 f202 	lsl.w	r2, r0, r2
 800a4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	e000e100 	.word	0xe000e100

0800a4f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a504:	2b00      	cmp	r3, #0
 800a506:	db0a      	blt.n	800a51e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	490c      	ldr	r1, [pc, #48]	; (800a540 <__NVIC_SetPriority+0x4c>)
 800a50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a512:	0112      	lsls	r2, r2, #4
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	440b      	add	r3, r1
 800a518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a51c:	e00a      	b.n	800a534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	4908      	ldr	r1, [pc, #32]	; (800a544 <__NVIC_SetPriority+0x50>)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	3b04      	subs	r3, #4
 800a52c:	0112      	lsls	r2, r2, #4
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	440b      	add	r3, r1
 800a532:	761a      	strb	r2, [r3, #24]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	e000e100 	.word	0xe000e100
 800a544:	e000ed00 	.word	0xe000ed00

0800a548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a548:	b480      	push	{r7}
 800a54a:	b089      	sub	sp, #36	; 0x24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	f1c3 0307 	rsb	r3, r3, #7
 800a562:	2b04      	cmp	r3, #4
 800a564:	bf28      	it	cs
 800a566:	2304      	movcs	r3, #4
 800a568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	3304      	adds	r3, #4
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d902      	bls.n	800a578 <NVIC_EncodePriority+0x30>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3b03      	subs	r3, #3
 800a576:	e000      	b.n	800a57a <NVIC_EncodePriority+0x32>
 800a578:	2300      	movs	r3, #0
 800a57a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43da      	mvns	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	401a      	ands	r2, r3
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a590:	f04f 31ff 	mov.w	r1, #4294967295
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	43d9      	mvns	r1, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a0:	4313      	orrs	r3, r2
         );
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	; 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5c0:	d301      	bcc.n	800a5c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e00f      	b.n	800a5e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5c6:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <SysTick_Config+0x40>)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5ce:	210f      	movs	r1, #15
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	f7ff ff8e 	bl	800a4f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <SysTick_Config+0x40>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5de:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <SysTick_Config+0x40>)
 800a5e0:	2207      	movs	r2, #7
 800a5e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	e000e010 	.word	0xe000e010

0800a5f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ff29 	bl	800a454 <__NVIC_SetPriorityGrouping>
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	4603      	mov	r3, r0
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a61c:	f7ff ff3e 	bl	800a49c <__NVIC_GetPriorityGrouping>
 800a620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	6978      	ldr	r0, [r7, #20]
 800a628:	f7ff ff8e 	bl	800a548 <NVIC_EncodePriority>
 800a62c:	4602      	mov	r2, r0
 800a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff ff5d 	bl	800a4f4 <__NVIC_SetPriority>
}
 800a63a:	bf00      	nop
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	4603      	mov	r3, r0
 800a64a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a64c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff ff31 	bl	800a4b8 <__NVIC_EnableIRQ>
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff ffa2 	bl	800a5b0 <SysTick_Config>
 800a66c:	4603      	mov	r3, r0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a684:	f7ff fab4 	bl	8009bf0 <HAL_GetTick>
 800a688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e099      	b.n	800a7c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 0201 	bic.w	r2, r2, #1
 800a6b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6b4:	e00f      	b.n	800a6d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a6b6:	f7ff fa9b 	bl	8009bf0 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b05      	cmp	r3, #5
 800a6c2:	d908      	bls.n	800a6d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2203      	movs	r2, #3
 800a6ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e078      	b.n	800a7c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e8      	bne.n	800a6b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	4b38      	ldr	r3, [pc, #224]	; (800a7d0 <HAL_DMA_Init+0x158>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a70e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a71a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	4313      	orrs	r3, r2
 800a726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d107      	bne.n	800a740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a738:	4313      	orrs	r3, r2
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f023 0307 	bic.w	r3, r3, #7
 800a756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b04      	cmp	r3, #4
 800a768:	d117      	bne.n	800a79a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00e      	beq.n	800a79a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa9d 	bl	800acbc <DMA_CheckFifoParam>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2240      	movs	r2, #64	; 0x40
 800a78c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a796:	2301      	movs	r3, #1
 800a798:	e016      	b.n	800a7c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa54 	bl	800ac50 <DMA_CalcBaseAndBitshift>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7b0:	223f      	movs	r2, #63	; 0x3f
 800a7b2:	409a      	lsls	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	f010803f 	.word	0xf010803f

0800a7d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <HAL_DMA_Start_IT+0x26>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e040      	b.n	800a87c <HAL_DMA_Start_IT+0xa8>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d12f      	bne.n	800a86e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2202      	movs	r2, #2
 800a812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f9e6 	bl	800abf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82c:	223f      	movs	r2, #63	; 0x3f
 800a82e:	409a      	lsls	r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0216 	orr.w	r2, r2, #22
 800a842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0208 	orr.w	r2, r2, #8
 800a85a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	e005      	b.n	800a87a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a876:	2302      	movs	r3, #2
 800a878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b02      	cmp	r3, #2
 800a896:	d004      	beq.n	800a8a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2280      	movs	r2, #128	; 0x80
 800a89c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e00c      	b.n	800a8bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0201 	bic.w	r2, r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a8d4:	4b92      	ldr	r3, [pc, #584]	; (800ab20 <HAL_DMA_IRQHandler+0x258>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a92      	ldr	r2, [pc, #584]	; (800ab24 <HAL_DMA_IRQHandler+0x25c>)
 800a8da:	fba2 2303 	umull	r2, r3, r2, r3
 800a8de:	0a9b      	lsrs	r3, r3, #10
 800a8e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f2:	2208      	movs	r2, #8
 800a8f4:	409a      	lsls	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01a      	beq.n	800a934 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d013      	beq.n	800a934 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0204 	bic.w	r2, r2, #4
 800a91a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a920:	2208      	movs	r2, #8
 800a922:	409a      	lsls	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92c:	f043 0201 	orr.w	r2, r3, #1
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a938:	2201      	movs	r2, #1
 800a93a:	409a      	lsls	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d012      	beq.n	800a96a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a956:	2201      	movs	r2, #1
 800a958:	409a      	lsls	r2, r3
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a962:	f043 0202 	orr.w	r2, r3, #2
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96e:	2204      	movs	r2, #4
 800a970:	409a      	lsls	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4013      	ands	r3, r2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d012      	beq.n	800a9a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a98c:	2204      	movs	r2, #4
 800a98e:	409a      	lsls	r2, r3
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a998:	f043 0204 	orr.w	r2, r3, #4
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a4:	2210      	movs	r2, #16
 800a9a6:	409a      	lsls	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d043      	beq.n	800aa38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0308 	and.w	r3, r3, #8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d03c      	beq.n	800aa38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c2:	2210      	movs	r2, #16
 800a9c4:	409a      	lsls	r2, r3
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d018      	beq.n	800aa0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d108      	bne.n	800a9f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d024      	beq.n	800aa38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4798      	blx	r3
 800a9f6:	e01f      	b.n	800aa38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
 800aa08:	e016      	b.n	800aa38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d107      	bne.n	800aa28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0208 	bic.w	r2, r2, #8
 800aa26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	409a      	lsls	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 808e 	beq.w	800ab66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 8086 	beq.w	800ab66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5e:	2220      	movs	r2, #32
 800aa60:	409a      	lsls	r2, r3
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d136      	bne.n	800aae0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 0216 	bic.w	r2, r2, #22
 800aa80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695a      	ldr	r2, [r3, #20]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <HAL_DMA_IRQHandler+0x1da>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d007      	beq.n	800aab2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0208 	bic.w	r2, r2, #8
 800aab0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	223f      	movs	r2, #63	; 0x3f
 800aab8:	409a      	lsls	r2, r3
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d07d      	beq.n	800abd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
        }
        return;
 800aade:	e078      	b.n	800abd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d01c      	beq.n	800ab28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d108      	bne.n	800ab0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d030      	beq.n	800ab66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
 800ab0c:	e02b      	b.n	800ab66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d027      	beq.n	800ab66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	4798      	blx	r3
 800ab1e:	e022      	b.n	800ab66 <HAL_DMA_IRQHandler+0x29e>
 800ab20:	20000000 	.word	0x20000000
 800ab24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10f      	bne.n	800ab56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 0210 	bic.w	r2, r2, #16
 800ab44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d032      	beq.n	800abd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d022      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0201 	bic.w	r2, r2, #1
 800ab90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60bb      	str	r3, [r7, #8]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d307      	bcc.n	800abae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f2      	bne.n	800ab92 <HAL_DMA_IRQHandler+0x2ca>
 800abac:	e000      	b.n	800abb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800abae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	4798      	blx	r3
 800abd0:	e000      	b.n	800abd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800abd2:	bf00      	nop
    }
  }
}
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop

0800abdc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	2b40      	cmp	r3, #64	; 0x40
 800ac20:	d108      	bne.n	800ac34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ac32:	e007      	b.n	800ac44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	60da      	str	r2, [r3, #12]
}
 800ac44:	bf00      	nop
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	3b10      	subs	r3, #16
 800ac60:	4a14      	ldr	r2, [pc, #80]	; (800acb4 <DMA_CalcBaseAndBitshift+0x64>)
 800ac62:	fba2 2303 	umull	r2, r3, r2, r3
 800ac66:	091b      	lsrs	r3, r3, #4
 800ac68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ac6a:	4a13      	ldr	r2, [pc, #76]	; (800acb8 <DMA_CalcBaseAndBitshift+0x68>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d909      	bls.n	800ac92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac86:	f023 0303 	bic.w	r3, r3, #3
 800ac8a:	1d1a      	adds	r2, r3, #4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	659a      	str	r2, [r3, #88]	; 0x58
 800ac90:	e007      	b.n	800aca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	aaaaaaab 	.word	0xaaaaaaab
 800acb8:	08018e98 	.word	0x08018e98

0800acbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800accc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d11f      	bne.n	800ad16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d855      	bhi.n	800ad88 <DMA_CheckFifoParam+0xcc>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <DMA_CheckFifoParam+0x28>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800acf5 	.word	0x0800acf5
 800ace8:	0800ad07 	.word	0x0800ad07
 800acec:	0800acf5 	.word	0x0800acf5
 800acf0:	0800ad89 	.word	0x0800ad89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d045      	beq.n	800ad8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad04:	e042      	b.n	800ad8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad0e:	d13f      	bne.n	800ad90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad14:	e03c      	b.n	800ad90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad1e:	d121      	bne.n	800ad64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d836      	bhi.n	800ad94 <DMA_CheckFifoParam+0xd8>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <DMA_CheckFifoParam+0x70>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800ad3d 	.word	0x0800ad3d
 800ad30:	0800ad43 	.word	0x0800ad43
 800ad34:	0800ad3d 	.word	0x0800ad3d
 800ad38:	0800ad55 	.word	0x0800ad55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad40:	e02f      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d024      	beq.n	800ad98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad52:	e021      	b.n	800ad98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad5c:	d11e      	bne.n	800ad9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ad62:	e01b      	b.n	800ad9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d902      	bls.n	800ad70 <DMA_CheckFifoParam+0xb4>
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d003      	beq.n	800ad76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ad6e:	e018      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	73fb      	strb	r3, [r7, #15]
      break;
 800ad74:	e015      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00e      	beq.n	800ada0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	73fb      	strb	r3, [r7, #15]
      break;
 800ad86:	e00b      	b.n	800ada0 <DMA_CheckFifoParam+0xe4>
      break;
 800ad88:	bf00      	nop
 800ad8a:	e00a      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e008      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;
 800ad90:	bf00      	nop
 800ad92:	e006      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;
 800ad94:	bf00      	nop
 800ad96:	e004      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e002      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;   
 800ad9c:	bf00      	nop
 800ad9e:	e000      	b.n	800ada2 <DMA_CheckFifoParam+0xe6>
      break;
 800ada0:	bf00      	nop
    }
  } 
  
  return status; 
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b089      	sub	sp, #36	; 0x24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	e177      	b.n	800b0bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800adcc:	2201      	movs	r2, #1
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	fa02 f303 	lsl.w	r3, r2, r3
 800add4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4013      	ands	r3, r2
 800adde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	f040 8166 	bne.w	800b0b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d00b      	beq.n	800ae0a <HAL_GPIO_Init+0x5a>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d007      	beq.n	800ae0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800adfe:	2b11      	cmp	r3, #17
 800ae00:	d003      	beq.n	800ae0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	2b12      	cmp	r3, #18
 800ae08:	d130      	bne.n	800ae6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	2203      	movs	r2, #3
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	43db      	mvns	r3, r3
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	4013      	ands	r3, r2
 800ae20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	69ba      	ldr	r2, [r7, #24]
 800ae38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ae40:	2201      	movs	r2, #1
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	fa02 f303 	lsl.w	r3, r2, r3
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	091b      	lsrs	r3, r3, #4
 800ae56:	f003 0201 	and.w	r2, r3, #1
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	2203      	movs	r2, #3
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	4013      	ands	r3, r2
 800ae82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d003      	beq.n	800aeac <HAL_GPIO_Init+0xfc>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b12      	cmp	r3, #18
 800aeaa:	d123      	bne.n	800aef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	08da      	lsrs	r2, r3, #3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3208      	adds	r2, #8
 800aeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	f003 0307 	and.w	r3, r3, #7
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	220f      	movs	r2, #15
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	43db      	mvns	r3, r3
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	4013      	ands	r3, r2
 800aece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	fa02 f303 	lsl.w	r3, r2, r3
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	08da      	lsrs	r2, r3, #3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3208      	adds	r2, #8
 800aeee:	69b9      	ldr	r1, [r7, #24]
 800aef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	2203      	movs	r2, #3
 800af00:	fa02 f303 	lsl.w	r3, r2, r3
 800af04:	43db      	mvns	r3, r3
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	4013      	ands	r3, r2
 800af0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f003 0203 	and.w	r2, r3, #3
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	fa02 f303 	lsl.w	r3, r2, r3
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	4313      	orrs	r3, r2
 800af20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 80c0 	beq.w	800b0b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	4b65      	ldr	r3, [pc, #404]	; (800b0d0 <HAL_GPIO_Init+0x320>)
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	4a64      	ldr	r2, [pc, #400]	; (800b0d0 <HAL_GPIO_Init+0x320>)
 800af40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af44:	6453      	str	r3, [r2, #68]	; 0x44
 800af46:	4b62      	ldr	r3, [pc, #392]	; (800b0d0 <HAL_GPIO_Init+0x320>)
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af52:	4a60      	ldr	r2, [pc, #384]	; (800b0d4 <HAL_GPIO_Init+0x324>)
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	089b      	lsrs	r3, r3, #2
 800af58:	3302      	adds	r3, #2
 800af5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	220f      	movs	r2, #15
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	43db      	mvns	r3, r3
 800af70:	69ba      	ldr	r2, [r7, #24]
 800af72:	4013      	ands	r3, r2
 800af74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a57      	ldr	r2, [pc, #348]	; (800b0d8 <HAL_GPIO_Init+0x328>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d037      	beq.n	800afee <HAL_GPIO_Init+0x23e>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a56      	ldr	r2, [pc, #344]	; (800b0dc <HAL_GPIO_Init+0x32c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d031      	beq.n	800afea <HAL_GPIO_Init+0x23a>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a55      	ldr	r2, [pc, #340]	; (800b0e0 <HAL_GPIO_Init+0x330>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d02b      	beq.n	800afe6 <HAL_GPIO_Init+0x236>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a54      	ldr	r2, [pc, #336]	; (800b0e4 <HAL_GPIO_Init+0x334>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d025      	beq.n	800afe2 <HAL_GPIO_Init+0x232>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a53      	ldr	r2, [pc, #332]	; (800b0e8 <HAL_GPIO_Init+0x338>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d01f      	beq.n	800afde <HAL_GPIO_Init+0x22e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a52      	ldr	r2, [pc, #328]	; (800b0ec <HAL_GPIO_Init+0x33c>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d019      	beq.n	800afda <HAL_GPIO_Init+0x22a>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a51      	ldr	r2, [pc, #324]	; (800b0f0 <HAL_GPIO_Init+0x340>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d013      	beq.n	800afd6 <HAL_GPIO_Init+0x226>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a50      	ldr	r2, [pc, #320]	; (800b0f4 <HAL_GPIO_Init+0x344>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00d      	beq.n	800afd2 <HAL_GPIO_Init+0x222>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a4f      	ldr	r2, [pc, #316]	; (800b0f8 <HAL_GPIO_Init+0x348>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d007      	beq.n	800afce <HAL_GPIO_Init+0x21e>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a4e      	ldr	r2, [pc, #312]	; (800b0fc <HAL_GPIO_Init+0x34c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d101      	bne.n	800afca <HAL_GPIO_Init+0x21a>
 800afc6:	2309      	movs	r3, #9
 800afc8:	e012      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afca:	230a      	movs	r3, #10
 800afcc:	e010      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afce:	2308      	movs	r3, #8
 800afd0:	e00e      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afd2:	2307      	movs	r3, #7
 800afd4:	e00c      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afd6:	2306      	movs	r3, #6
 800afd8:	e00a      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afda:	2305      	movs	r3, #5
 800afdc:	e008      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afde:	2304      	movs	r3, #4
 800afe0:	e006      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afe2:	2303      	movs	r3, #3
 800afe4:	e004      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afe6:	2302      	movs	r3, #2
 800afe8:	e002      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <HAL_GPIO_Init+0x240>
 800afee:	2300      	movs	r3, #0
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	f002 0203 	and.w	r2, r2, #3
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	4093      	lsls	r3, r2
 800affa:	69ba      	ldr	r2, [r7, #24]
 800affc:	4313      	orrs	r3, r2
 800affe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b000:	4934      	ldr	r1, [pc, #208]	; (800b0d4 <HAL_GPIO_Init+0x324>)
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	089b      	lsrs	r3, r3, #2
 800b006:	3302      	adds	r3, #2
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b00e:	4b3c      	ldr	r3, [pc, #240]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	43db      	mvns	r3, r3
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	4013      	ands	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b032:	4a33      	ldr	r2, [pc, #204]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b038:	4b31      	ldr	r3, [pc, #196]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	43db      	mvns	r3, r3
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	4013      	ands	r3, r2
 800b046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	4313      	orrs	r3, r2
 800b05a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b05c:	4a28      	ldr	r2, [pc, #160]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b062:	4b27      	ldr	r3, [pc, #156]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	43db      	mvns	r3, r3
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	4013      	ands	r3, r2
 800b070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b086:	4a1e      	ldr	r2, [pc, #120]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b08c:	4b1c      	ldr	r3, [pc, #112]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	43db      	mvns	r3, r3
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	4013      	ands	r3, r2
 800b09a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d003      	beq.n	800b0b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b0b0:	4a13      	ldr	r2, [pc, #76]	; (800b100 <HAL_GPIO_Init+0x350>)
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	2b0f      	cmp	r3, #15
 800b0c0:	f67f ae84 	bls.w	800adcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	3724      	adds	r7, #36	; 0x24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	40023800 	.word	0x40023800
 800b0d4:	40013800 	.word	0x40013800
 800b0d8:	40020000 	.word	0x40020000
 800b0dc:	40020400 	.word	0x40020400
 800b0e0:	40020800 	.word	0x40020800
 800b0e4:	40020c00 	.word	0x40020c00
 800b0e8:	40021000 	.word	0x40021000
 800b0ec:	40021400 	.word	0x40021400
 800b0f0:	40021800 	.word	0x40021800
 800b0f4:	40021c00 	.word	0x40021c00
 800b0f8:	40022000 	.word	0x40022000
 800b0fc:	40022400 	.word	0x40022400
 800b100:	40013c00 	.word	0x40013c00

0800b104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	887b      	ldrh	r3, [r7, #2]
 800b116:	4013      	ands	r3, r2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b11c:	2301      	movs	r3, #1
 800b11e:	73fb      	strb	r3, [r7, #15]
 800b120:	e001      	b.n	800b126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b126:	7bfb      	ldrb	r3, [r7, #15]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	807b      	strh	r3, [r7, #2]
 800b140:	4613      	mov	r3, r2
 800b142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b144:	787b      	ldrb	r3, [r7, #1]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b14a:	887a      	ldrh	r2, [r7, #2]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b150:	e003      	b.n	800b15a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b152:	887b      	ldrh	r3, [r7, #2]
 800b154:	041a      	lsls	r2, r3, #16
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	619a      	str	r2, [r3, #24]
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
	...

0800b168 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b174:	695a      	ldr	r2, [r3, #20]
 800b176:	88fb      	ldrh	r3, [r7, #6]
 800b178:	4013      	ands	r3, r2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d006      	beq.n	800b18c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b17e:	4a05      	ldr	r2, [pc, #20]	; (800b194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b180:	88fb      	ldrh	r3, [r7, #6]
 800b182:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b184:	88fb      	ldrh	r3, [r7, #6]
 800b186:	4618      	mov	r0, r3
 800b188:	f7fa fdae 	bl	8005ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b18c:	bf00      	nop
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	40013c00 	.word	0x40013c00

0800b198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e11f      	b.n	800b3ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fb fe0e 	bl	8006de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2224      	movs	r2, #36	; 0x24
 800b1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f022 0201 	bic.w	r2, r2, #1
 800b1da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1fc:	f001 f96e 	bl	800c4dc <HAL_RCC_GetPCLK1Freq>
 800b200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	4a7b      	ldr	r2, [pc, #492]	; (800b3f4 <HAL_I2C_Init+0x25c>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d807      	bhi.n	800b21c <HAL_I2C_Init+0x84>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4a7a      	ldr	r2, [pc, #488]	; (800b3f8 <HAL_I2C_Init+0x260>)
 800b210:	4293      	cmp	r3, r2
 800b212:	bf94      	ite	ls
 800b214:	2301      	movls	r3, #1
 800b216:	2300      	movhi	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	e006      	b.n	800b22a <HAL_I2C_Init+0x92>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a77      	ldr	r2, [pc, #476]	; (800b3fc <HAL_I2C_Init+0x264>)
 800b220:	4293      	cmp	r3, r2
 800b222:	bf94      	ite	ls
 800b224:	2301      	movls	r3, #1
 800b226:	2300      	movhi	r3, #0
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e0db      	b.n	800b3ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	4a72      	ldr	r2, [pc, #456]	; (800b400 <HAL_I2C_Init+0x268>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	0c9b      	lsrs	r3, r3, #18
 800b23c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	430a      	orrs	r2, r1
 800b250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	4a64      	ldr	r2, [pc, #400]	; (800b3f4 <HAL_I2C_Init+0x25c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d802      	bhi.n	800b26c <HAL_I2C_Init+0xd4>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	3301      	adds	r3, #1
 800b26a:	e009      	b.n	800b280 <HAL_I2C_Init+0xe8>
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b272:	fb02 f303 	mul.w	r3, r2, r3
 800b276:	4a63      	ldr	r2, [pc, #396]	; (800b404 <HAL_I2C_Init+0x26c>)
 800b278:	fba2 2303 	umull	r2, r3, r2, r3
 800b27c:	099b      	lsrs	r3, r3, #6
 800b27e:	3301      	adds	r3, #1
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	430b      	orrs	r3, r1
 800b286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4956      	ldr	r1, [pc, #344]	; (800b3f4 <HAL_I2C_Init+0x25c>)
 800b29c:	428b      	cmp	r3, r1
 800b29e:	d80d      	bhi.n	800b2bc <HAL_I2C_Init+0x124>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	1e59      	subs	r1, r3, #1
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	bf38      	it	cc
 800b2b8:	2304      	movcc	r3, #4
 800b2ba:	e04f      	b.n	800b35c <HAL_I2C_Init+0x1c4>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d111      	bne.n	800b2e8 <HAL_I2C_Init+0x150>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	1e58      	subs	r0, r3, #1
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6859      	ldr	r1, [r3, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	005b      	lsls	r3, r3, #1
 800b2d0:	440b      	add	r3, r1
 800b2d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bf0c      	ite	eq
 800b2e0:	2301      	moveq	r3, #1
 800b2e2:	2300      	movne	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	e012      	b.n	800b30e <HAL_I2C_Init+0x176>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	1e58      	subs	r0, r3, #1
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6859      	ldr	r1, [r3, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	0099      	lsls	r1, r3, #2
 800b2f8:	440b      	add	r3, r1
 800b2fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2fe:	3301      	adds	r3, #1
 800b300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b304:	2b00      	cmp	r3, #0
 800b306:	bf0c      	ite	eq
 800b308:	2301      	moveq	r3, #1
 800b30a:	2300      	movne	r3, #0
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <HAL_I2C_Init+0x17e>
 800b312:	2301      	movs	r3, #1
 800b314:	e022      	b.n	800b35c <HAL_I2C_Init+0x1c4>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10e      	bne.n	800b33c <HAL_I2C_Init+0x1a4>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1e58      	subs	r0, r3, #1
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6859      	ldr	r1, [r3, #4]
 800b326:	460b      	mov	r3, r1
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	440b      	add	r3, r1
 800b32c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b330:	3301      	adds	r3, #1
 800b332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b33a:	e00f      	b.n	800b35c <HAL_I2C_Init+0x1c4>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1e58      	subs	r0, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6859      	ldr	r1, [r3, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	440b      	add	r3, r1
 800b34a:	0099      	lsls	r1, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b352:	3301      	adds	r3, #1
 800b354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	6809      	ldr	r1, [r1, #0]
 800b360:	4313      	orrs	r3, r2
 800b362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69da      	ldr	r2, [r3, #28]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	431a      	orrs	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b38a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	6911      	ldr	r1, [r2, #16]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	68d2      	ldr	r2, [r2, #12]
 800b396:	4311      	orrs	r1, r2
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	430b      	orrs	r3, r1
 800b39e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	695a      	ldr	r2, [r3, #20]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	000186a0 	.word	0x000186a0
 800b3f8:	001e847f 	.word	0x001e847f
 800b3fc:	003d08ff 	.word	0x003d08ff
 800b400:	431bde83 	.word	0x431bde83
 800b404:	10624dd3 	.word	0x10624dd3

0800b408 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	607a      	str	r2, [r7, #4]
 800b412:	461a      	mov	r2, r3
 800b414:	460b      	mov	r3, r1
 800b416:	817b      	strh	r3, [r7, #10]
 800b418:	4613      	mov	r3, r2
 800b41a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b41c:	f7fe fbe8 	bl	8009bf0 <HAL_GetTick>
 800b420:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	f040 80e0 	bne.w	800b5f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	2319      	movs	r3, #25
 800b436:	2201      	movs	r2, #1
 800b438:	4970      	ldr	r1, [pc, #448]	; (800b5fc <HAL_I2C_Master_Transmit+0x1f4>)
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fc58 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b446:	2302      	movs	r3, #2
 800b448:	e0d3      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_I2C_Master_Transmit+0x50>
 800b454:	2302      	movs	r3, #2
 800b456:	e0cc      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d007      	beq.n	800b47e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f042 0201 	orr.w	r2, r2, #1
 800b47c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b48c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2221      	movs	r2, #33	; 0x21
 800b492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2210      	movs	r2, #16
 800b49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	893a      	ldrh	r2, [r7, #8]
 800b4ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	4a50      	ldr	r2, [pc, #320]	; (800b600 <HAL_I2C_Master_Transmit+0x1f8>)
 800b4be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4c0:	8979      	ldrh	r1, [r7, #10]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	6a3a      	ldr	r2, [r7, #32]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fac2 	bl	800ba50 <I2C_MasterRequestWrite>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e08d      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	613b      	str	r3, [r7, #16]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b4ec:	e066      	b.n	800b5bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	6a39      	ldr	r1, [r7, #32]
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 fcd2 	bl	800be9c <I2C_WaitOnTXEFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b502:	2b04      	cmp	r3, #4
 800b504:	d107      	bne.n	800b516 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e06b      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	781a      	ldrb	r2, [r3, #0]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b534:	b29b      	uxth	r3, r3
 800b536:	3b01      	subs	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b04      	cmp	r3, #4
 800b556:	d11b      	bne.n	800b590 <HAL_I2C_Master_Transmit+0x188>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d017      	beq.n	800b590 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3b01      	subs	r3, #1
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b588:	3b01      	subs	r3, #1
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	6a39      	ldr	r1, [r7, #32]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 fcc2 	bl	800bf1e <I2C_WaitOnBTFFlagUntilTimeout>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00d      	beq.n	800b5bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	d107      	bne.n	800b5b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e01a      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d194      	bne.n	800b4ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e000      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b5f0:	2302      	movs	r3, #2
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	00100002 	.word	0x00100002
 800b600:	ffff0000 	.word	0xffff0000

0800b604 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08c      	sub	sp, #48	; 0x30
 800b608:	af02      	add	r7, sp, #8
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	607a      	str	r2, [r7, #4]
 800b60e:	461a      	mov	r2, r3
 800b610:	460b      	mov	r3, r1
 800b612:	817b      	strh	r3, [r7, #10]
 800b614:	4613      	mov	r3, r2
 800b616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b618:	f7fe faea 	bl	8009bf0 <HAL_GetTick>
 800b61c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b20      	cmp	r3, #32
 800b628:	f040 820b 	bne.w	800ba42 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	2319      	movs	r3, #25
 800b632:	2201      	movs	r2, #1
 800b634:	497c      	ldr	r1, [pc, #496]	; (800b828 <HAL_I2C_Master_Receive+0x224>)
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fb5a 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b642:	2302      	movs	r3, #2
 800b644:	e1fe      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_I2C_Master_Receive+0x50>
 800b650:	2302      	movs	r3, #2
 800b652:	e1f7      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b01      	cmp	r3, #1
 800b668:	d007      	beq.n	800b67a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f042 0201 	orr.w	r2, r2, #1
 800b678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2222      	movs	r2, #34	; 0x22
 800b68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2210      	movs	r2, #16
 800b696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	893a      	ldrh	r2, [r7, #8]
 800b6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4a5c      	ldr	r2, [pc, #368]	; (800b82c <HAL_I2C_Master_Receive+0x228>)
 800b6ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b6bc:	8979      	ldrh	r1, [r7, #10]
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 fa46 	bl	800bb54 <I2C_MasterRequestRead>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e1b8      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d113      	bne.n	800b702 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6da:	2300      	movs	r3, #0
 800b6dc:	623b      	str	r3, [r7, #32]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	623b      	str	r3, [r7, #32]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	623b      	str	r3, [r7, #32]
 800b6ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	e18c      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b706:	2b01      	cmp	r3, #1
 800b708:	d11b      	bne.n	800b742 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b71a:	2300      	movs	r3, #0
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	61fb      	str	r3, [r7, #28]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e16c      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b746:	2b02      	cmp	r3, #2
 800b748:	d11b      	bne.n	800b782 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b758:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b76a:	2300      	movs	r3, #0
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	e14c      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b7a8:	e138      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	f200 80f1 	bhi.w	800b996 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d123      	bne.n	800b804 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 fbed 	bl	800bfa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e139      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691a      	ldr	r2, [r3, #16]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b802:	e10b      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d14e      	bne.n	800b8aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	2200      	movs	r2, #0
 800b814:	4906      	ldr	r1, [pc, #24]	; (800b830 <HAL_I2C_Master_Receive+0x22c>)
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 fa6a 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d008      	beq.n	800b834 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e10e      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
 800b826:	bf00      	nop
 800b828:	00100002 	.word	0x00100002
 800b82c:	ffff0000 	.word	0xffff0000
 800b830:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	b2d2      	uxtb	r2, r2
 800b850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	1c5a      	adds	r2, r3, #1
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b860:	3b01      	subs	r3, #1
 800b862:	b29a      	uxth	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691a      	ldr	r2, [r3, #16]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	b2d2      	uxtb	r2, r2
 800b882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b892:	3b01      	subs	r3, #1
 800b894:	b29a      	uxth	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8a8:	e0b8      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	4966      	ldr	r1, [pc, #408]	; (800ba4c <HAL_I2C_Master_Receive+0x448>)
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 fa1b 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e0bf      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691a      	ldr	r2, [r3, #16]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b29a      	uxth	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	2200      	movs	r2, #0
 800b90e:	494f      	ldr	r1, [pc, #316]	; (800ba4c <HAL_I2C_Master_Receive+0x448>)
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f9ed 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e091      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b92e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	691a      	ldr	r2, [r3, #16]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	b2d2      	uxtb	r2, r2
 800b93c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94c:	3b01      	subs	r3, #1
 800b94e:	b29a      	uxth	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b958:	b29b      	uxth	r3, r3
 800b95a:	3b01      	subs	r3, #1
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	691a      	ldr	r2, [r3, #16]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	b2d2      	uxtb	r2, r2
 800b96e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97e:	3b01      	subs	r3, #1
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	3b01      	subs	r3, #1
 800b98e:	b29a      	uxth	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b994:	e042      	b.n	800ba1c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fb00 	bl	800bfa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e04c      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	691a      	ldr	r2, [r3, #16]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	b2d2      	uxtb	r2, r2
 800b9b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	f003 0304 	and.w	r3, r3, #4
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	d118      	bne.n	800ba1c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba06:	3b01      	subs	r3, #1
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	3b01      	subs	r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f47f aec2 	bne.w	800b7aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e000      	b.n	800ba44 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba42:	2302      	movs	r3, #2
  }
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3728      	adds	r7, #40	; 0x28
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	00010004 	.word	0x00010004

0800ba50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	607a      	str	r2, [r7, #4]
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b08      	cmp	r3, #8
 800ba6a:	d006      	beq.n	800ba7a <I2C_MasterRequestWrite+0x2a>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d003      	beq.n	800ba7a <I2C_MasterRequestWrite+0x2a>
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba78:	d108      	bne.n	800ba8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	e00b      	b.n	800baa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba90:	2b12      	cmp	r3, #18
 800ba92:	d107      	bne.n	800baa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f91d 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00d      	beq.n	800bad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baca:	d103      	bne.n	800bad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e035      	b.n	800bb44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bae0:	d108      	bne.n	800baf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bae2:	897b      	ldrh	r3, [r7, #10]
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	461a      	mov	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800baf0:	611a      	str	r2, [r3, #16]
 800baf2:	e01b      	b.n	800bb2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800baf4:	897b      	ldrh	r3, [r7, #10]
 800baf6:	11db      	asrs	r3, r3, #7
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	f003 0306 	and.w	r3, r3, #6
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f063 030f 	orn	r3, r3, #15
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	490e      	ldr	r1, [pc, #56]	; (800bb4c <I2C_MasterRequestWrite+0xfc>)
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 f943 	bl	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e010      	b.n	800bb44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb22:	897b      	ldrh	r3, [r7, #10]
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4907      	ldr	r1, [pc, #28]	; (800bb50 <I2C_MasterRequestWrite+0x100>)
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 f933 	bl	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e000      	b.n	800bb44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	00010008 	.word	0x00010008
 800bb50:	00010002 	.word	0x00010002

0800bb54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b088      	sub	sp, #32
 800bb58:	af02      	add	r7, sp, #8
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	607a      	str	r2, [r7, #4]
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	460b      	mov	r3, r1
 800bb62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d006      	beq.n	800bb8e <I2C_MasterRequestRead+0x3a>
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d003      	beq.n	800bb8e <I2C_MasterRequestRead+0x3a>
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb8c:	d108      	bne.n	800bba0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e00b      	b.n	800bbb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba4:	2b11      	cmp	r3, #17
 800bba6:	d107      	bne.n	800bbb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f893 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00d      	beq.n	800bbec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbde:	d103      	bne.n	800bbe8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e079      	b.n	800bce0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbf4:	d108      	bne.n	800bc08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bbf6:	897b      	ldrh	r3, [r7, #10]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	611a      	str	r2, [r3, #16]
 800bc06:	e05f      	b.n	800bcc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc08:	897b      	ldrh	r3, [r7, #10]
 800bc0a:	11db      	asrs	r3, r3, #7
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	f003 0306 	and.w	r3, r3, #6
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	f063 030f 	orn	r3, r3, #15
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4930      	ldr	r1, [pc, #192]	; (800bce8 <I2C_MasterRequestRead+0x194>)
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 f8b9 	bl	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e054      	b.n	800bce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc36:	897b      	ldrh	r3, [r7, #10]
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	4929      	ldr	r1, [pc, #164]	; (800bcec <I2C_MasterRequestRead+0x198>)
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 f8a9 	bl	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e044      	b.n	800bce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc56:	2300      	movs	r3, #0
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	613b      	str	r3, [r7, #16]
 800bc6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f831 	bl	800bcf0 <I2C_WaitOnFlagUntilTimeout>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00d      	beq.n	800bcb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca2:	d103      	bne.n	800bcac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e017      	b.n	800bce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bcb0:	897b      	ldrh	r3, [r7, #10]
 800bcb2:	11db      	asrs	r3, r3, #7
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	f003 0306 	and.w	r3, r3, #6
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f063 030e 	orn	r3, r3, #14
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	4907      	ldr	r1, [pc, #28]	; (800bcec <I2C_MasterRequestRead+0x198>)
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f865 	bl	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	00010008 	.word	0x00010008
 800bcec:	00010002 	.word	0x00010002

0800bcf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd00:	e025      	b.n	800bd4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd08:	d021      	beq.n	800bd4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd0a:	f7fd ff71 	bl	8009bf0 <HAL_GetTick>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d302      	bcc.n	800bd20 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d116      	bne.n	800bd4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3a:	f043 0220 	orr.w	r2, r3, #32
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e023      	b.n	800bd96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	0c1b      	lsrs	r3, r3, #16
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d10d      	bne.n	800bd74 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	43da      	mvns	r2, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	4013      	ands	r3, r2
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bf0c      	ite	eq
 800bd6a:	2301      	moveq	r3, #1
 800bd6c:	2300      	movne	r3, #0
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	461a      	mov	r2, r3
 800bd72:	e00c      	b.n	800bd8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	43da      	mvns	r2, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4013      	ands	r3, r2
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf0c      	ite	eq
 800bd86:	2301      	moveq	r3, #1
 800bd88:	2300      	movne	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d0b6      	beq.n	800bd02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	607a      	str	r2, [r7, #4]
 800bdaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bdac:	e051      	b.n	800be52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdbc:	d123      	bne.n	800be06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	f043 0204 	orr.w	r2, r3, #4
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e046      	b.n	800be94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0c:	d021      	beq.n	800be52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be0e:	f7fd feef 	bl	8009bf0 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d302      	bcc.n	800be24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d116      	bne.n	800be52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	f043 0220 	orr.w	r2, r3, #32
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e020      	b.n	800be94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	0c1b      	lsrs	r3, r3, #16
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10c      	bne.n	800be76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	43da      	mvns	r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4013      	ands	r3, r2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bf14      	ite	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	2300      	moveq	r3, #0
 800be72:	b2db      	uxtb	r3, r3
 800be74:	e00b      	b.n	800be8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	43da      	mvns	r2, r3
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	4013      	ands	r3, r2
 800be82:	b29b      	uxth	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	bf14      	ite	ne
 800be88:	2301      	movne	r3, #1
 800be8a:	2300      	moveq	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d18d      	bne.n	800bdae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bea8:	e02d      	b.n	800bf06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 f8ce 	bl	800c04c <I2C_IsAcknowledgeFailed>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d001      	beq.n	800beba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e02d      	b.n	800bf16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d021      	beq.n	800bf06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bec2:	f7fd fe95 	bl	8009bf0 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d302      	bcc.n	800bed8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d116      	bne.n	800bf06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2220      	movs	r2, #32
 800bee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	f043 0220 	orr.w	r2, r3, #32
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	e007      	b.n	800bf16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf10:	2b80      	cmp	r3, #128	; 0x80
 800bf12:	d1ca      	bne.n	800beaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf2a:	e02d      	b.n	800bf88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 f88d 	bl	800c04c <I2C_IsAcknowledgeFailed>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e02d      	b.n	800bf98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d021      	beq.n	800bf88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf44:	f7fd fe54 	bl	8009bf0 <HAL_GetTick>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d302      	bcc.n	800bf5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d116      	bne.n	800bf88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	f043 0220 	orr.w	r2, r3, #32
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e007      	b.n	800bf98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	f003 0304 	and.w	r3, r3, #4
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	d1ca      	bne.n	800bf2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfac:	e042      	b.n	800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	f003 0310 	and.w	r3, r3, #16
 800bfb8:	2b10      	cmp	r3, #16
 800bfba:	d119      	bne.n	800bff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f06f 0210 	mvn.w	r2, #16
 800bfc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e029      	b.n	800c044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bff0:	f7fd fdfe 	bl	8009bf0 <HAL_GetTick>
 800bff4:	4602      	mov	r2, r0
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d302      	bcc.n	800c006 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d116      	bne.n	800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2220      	movs	r2, #32
 800c010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c020:	f043 0220 	orr.w	r2, r3, #32
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e007      	b.n	800c044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03e:	2b40      	cmp	r3, #64	; 0x40
 800c040:	d1b5      	bne.n	800bfae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c05e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c062:	d11b      	bne.n	800c09c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c06c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c088:	f043 0204 	orr.w	r2, r3, #4
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e000      	b.n	800c09e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
	...

0800c0ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	4b20      	ldr	r3, [pc, #128]	; (800c13c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	4a1f      	ldr	r2, [pc, #124]	; (800c13c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0c6:	4b1d      	ldr	r3, [pc, #116]	; (800c13c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c0d2:	4b1b      	ldr	r3, [pc, #108]	; (800c140 <HAL_PWREx_EnableOverDrive+0x94>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0d8:	f7fd fd8a 	bl	8009bf0 <HAL_GetTick>
 800c0dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0de:	e009      	b.n	800c0f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c0e0:	f7fd fd86 	bl	8009bf0 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0ee:	d901      	bls.n	800c0f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e01f      	b.n	800c134 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0f4:	4b13      	ldr	r3, [pc, #76]	; (800c144 <HAL_PWREx_EnableOverDrive+0x98>)
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c100:	d1ee      	bne.n	800c0e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c102:	4b11      	ldr	r3, [pc, #68]	; (800c148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c104:	2201      	movs	r2, #1
 800c106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c108:	f7fd fd72 	bl	8009bf0 <HAL_GetTick>
 800c10c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c10e:	e009      	b.n	800c124 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c110:	f7fd fd6e 	bl	8009bf0 <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c11e:	d901      	bls.n	800c124 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	e007      	b.n	800c134 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <HAL_PWREx_EnableOverDrive+0x98>)
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c130:	d1ee      	bne.n	800c110 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	40023800 	.word	0x40023800
 800c140:	420e0040 	.word	0x420e0040
 800c144:	40007000 	.word	0x40007000
 800c148:	420e0044 	.word	0x420e0044

0800c14c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e0cc      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c160:	4b68      	ldr	r3, [pc, #416]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 030f 	and.w	r3, r3, #15
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d90c      	bls.n	800c188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c16e:	4b65      	ldr	r3, [pc, #404]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	b2d2      	uxtb	r2, r2
 800c174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c176:	4b63      	ldr	r3, [pc, #396]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 030f 	and.w	r3, r3, #15
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d001      	beq.n	800c188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e0b8      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	d020      	beq.n	800c1d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c1a0:	4b59      	ldr	r3, [pc, #356]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	4a58      	ldr	r2, [pc, #352]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c1aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0308 	and.w	r3, r3, #8
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d005      	beq.n	800c1c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c1b8:	4b53      	ldr	r3, [pc, #332]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	4a52      	ldr	r2, [pc, #328]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c1c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1c4:	4b50      	ldr	r3, [pc, #320]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	494d      	ldr	r1, [pc, #308]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d044      	beq.n	800c26c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d107      	bne.n	800c1fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1ea:	4b47      	ldr	r3, [pc, #284]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d119      	bne.n	800c22a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e07f      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d003      	beq.n	800c20a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c206:	2b03      	cmp	r3, #3
 800c208:	d107      	bne.n	800c21a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c20a:	4b3f      	ldr	r3, [pc, #252]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c212:	2b00      	cmp	r3, #0
 800c214:	d109      	bne.n	800c22a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e06f      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c21a:	4b3b      	ldr	r3, [pc, #236]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e067      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c22a:	4b37      	ldr	r3, [pc, #220]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f023 0203 	bic.w	r2, r3, #3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4934      	ldr	r1, [pc, #208]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c23c:	f7fd fcd8 	bl	8009bf0 <HAL_GetTick>
 800c240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c242:	e00a      	b.n	800c25a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c244:	f7fd fcd4 	bl	8009bf0 <HAL_GetTick>
 800c248:	4602      	mov	r2, r0
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c252:	4293      	cmp	r3, r2
 800c254:	d901      	bls.n	800c25a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e04f      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c25a:	4b2b      	ldr	r3, [pc, #172]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f003 020c 	and.w	r2, r3, #12
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	429a      	cmp	r2, r3
 800c26a:	d1eb      	bne.n	800c244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c26c:	4b25      	ldr	r3, [pc, #148]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 030f 	and.w	r3, r3, #15
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d20c      	bcs.n	800c294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c27a:	4b22      	ldr	r3, [pc, #136]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c282:	4b20      	ldr	r3, [pc, #128]	; (800c304 <HAL_RCC_ClockConfig+0x1b8>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 030f 	and.w	r3, r3, #15
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d001      	beq.n	800c294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e032      	b.n	800c2fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0304 	and.w	r3, r3, #4
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d008      	beq.n	800c2b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c2a0:	4b19      	ldr	r3, [pc, #100]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	4916      	ldr	r1, [pc, #88]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d009      	beq.n	800c2d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c2be:	4b12      	ldr	r3, [pc, #72]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	490e      	ldr	r1, [pc, #56]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c2d2:	f000 f821 	bl	800c318 <HAL_RCC_GetSysClockFreq>
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <HAL_RCC_ClockConfig+0x1bc>)
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	091b      	lsrs	r3, r3, #4
 800c2de:	f003 030f 	and.w	r3, r3, #15
 800c2e2:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <HAL_RCC_ClockConfig+0x1c0>)
 800c2e4:	5cd3      	ldrb	r3, [r2, r3]
 800c2e6:	fa21 f303 	lsr.w	r3, r1, r3
 800c2ea:	4a09      	ldr	r2, [pc, #36]	; (800c310 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <HAL_RCC_ClockConfig+0x1c8>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd fc38 	bl	8009b68 <HAL_InitTick>

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	40023c00 	.word	0x40023c00
 800c308:	40023800 	.word	0x40023800
 800c30c:	08018e80 	.word	0x08018e80
 800c310:	20000000 	.word	0x20000000
 800c314:	20000004 	.word	0x20000004

0800c318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]
 800c326:	2300      	movs	r3, #0
 800c328:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c32e:	4b63      	ldr	r3, [pc, #396]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f003 030c 	and.w	r3, r3, #12
 800c336:	2b04      	cmp	r3, #4
 800c338:	d007      	beq.n	800c34a <HAL_RCC_GetSysClockFreq+0x32>
 800c33a:	2b08      	cmp	r3, #8
 800c33c:	d008      	beq.n	800c350 <HAL_RCC_GetSysClockFreq+0x38>
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f040 80b4 	bne.w	800c4ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c344:	4b5e      	ldr	r3, [pc, #376]	; (800c4c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c346:	60bb      	str	r3, [r7, #8]
       break;
 800c348:	e0b3      	b.n	800c4b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c34a:	4b5d      	ldr	r3, [pc, #372]	; (800c4c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c34c:	60bb      	str	r3, [r7, #8]
      break;
 800c34e:	e0b0      	b.n	800c4b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c350:	4b5a      	ldr	r3, [pc, #360]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c358:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c35a:	4b58      	ldr	r3, [pc, #352]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d04a      	beq.n	800c3fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c366:	4b55      	ldr	r3, [pc, #340]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	099b      	lsrs	r3, r3, #6
 800c36c:	f04f 0400 	mov.w	r4, #0
 800c370:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c374:	f04f 0200 	mov.w	r2, #0
 800c378:	ea03 0501 	and.w	r5, r3, r1
 800c37c:	ea04 0602 	and.w	r6, r4, r2
 800c380:	4629      	mov	r1, r5
 800c382:	4632      	mov	r2, r6
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	f04f 0400 	mov.w	r4, #0
 800c38c:	0154      	lsls	r4, r2, #5
 800c38e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c392:	014b      	lsls	r3, r1, #5
 800c394:	4619      	mov	r1, r3
 800c396:	4622      	mov	r2, r4
 800c398:	1b49      	subs	r1, r1, r5
 800c39a:	eb62 0206 	sbc.w	r2, r2, r6
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	f04f 0400 	mov.w	r4, #0
 800c3a6:	0194      	lsls	r4, r2, #6
 800c3a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c3ac:	018b      	lsls	r3, r1, #6
 800c3ae:	1a5b      	subs	r3, r3, r1
 800c3b0:	eb64 0402 	sbc.w	r4, r4, r2
 800c3b4:	f04f 0100 	mov.w	r1, #0
 800c3b8:	f04f 0200 	mov.w	r2, #0
 800c3bc:	00e2      	lsls	r2, r4, #3
 800c3be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3c2:	00d9      	lsls	r1, r3, #3
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4614      	mov	r4, r2
 800c3c8:	195b      	adds	r3, r3, r5
 800c3ca:	eb44 0406 	adc.w	r4, r4, r6
 800c3ce:	f04f 0100 	mov.w	r1, #0
 800c3d2:	f04f 0200 	mov.w	r2, #0
 800c3d6:	02a2      	lsls	r2, r4, #10
 800c3d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3dc:	0299      	lsls	r1, r3, #10
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4614      	mov	r4, r2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f04f 0400 	mov.w	r4, #0
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	f7f4 fc62 	bl	8000cb8 <__aeabi_uldivmod>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e049      	b.n	800c490 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3fc:	4b2f      	ldr	r3, [pc, #188]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	099b      	lsrs	r3, r3, #6
 800c402:	f04f 0400 	mov.w	r4, #0
 800c406:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c40a:	f04f 0200 	mov.w	r2, #0
 800c40e:	ea03 0501 	and.w	r5, r3, r1
 800c412:	ea04 0602 	and.w	r6, r4, r2
 800c416:	4629      	mov	r1, r5
 800c418:	4632      	mov	r2, r6
 800c41a:	f04f 0300 	mov.w	r3, #0
 800c41e:	f04f 0400 	mov.w	r4, #0
 800c422:	0154      	lsls	r4, r2, #5
 800c424:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c428:	014b      	lsls	r3, r1, #5
 800c42a:	4619      	mov	r1, r3
 800c42c:	4622      	mov	r2, r4
 800c42e:	1b49      	subs	r1, r1, r5
 800c430:	eb62 0206 	sbc.w	r2, r2, r6
 800c434:	f04f 0300 	mov.w	r3, #0
 800c438:	f04f 0400 	mov.w	r4, #0
 800c43c:	0194      	lsls	r4, r2, #6
 800c43e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c442:	018b      	lsls	r3, r1, #6
 800c444:	1a5b      	subs	r3, r3, r1
 800c446:	eb64 0402 	sbc.w	r4, r4, r2
 800c44a:	f04f 0100 	mov.w	r1, #0
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	00e2      	lsls	r2, r4, #3
 800c454:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c458:	00d9      	lsls	r1, r3, #3
 800c45a:	460b      	mov	r3, r1
 800c45c:	4614      	mov	r4, r2
 800c45e:	195b      	adds	r3, r3, r5
 800c460:	eb44 0406 	adc.w	r4, r4, r6
 800c464:	f04f 0100 	mov.w	r1, #0
 800c468:	f04f 0200 	mov.w	r2, #0
 800c46c:	02a2      	lsls	r2, r4, #10
 800c46e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c472:	0299      	lsls	r1, r3, #10
 800c474:	460b      	mov	r3, r1
 800c476:	4614      	mov	r4, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	4621      	mov	r1, r4
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f04f 0400 	mov.w	r4, #0
 800c482:	461a      	mov	r2, r3
 800c484:	4623      	mov	r3, r4
 800c486:	f7f4 fc17 	bl	8000cb8 <__aeabi_uldivmod>
 800c48a:	4603      	mov	r3, r0
 800c48c:	460c      	mov	r4, r1
 800c48e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	0c1b      	lsrs	r3, r3, #16
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	3301      	adds	r3, #1
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	60bb      	str	r3, [r7, #8]
      break;
 800c4aa:	e002      	b.n	800c4b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c4ac:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c4ae:	60bb      	str	r3, [r7, #8]
      break;
 800c4b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4bc:	40023800 	.word	0x40023800
 800c4c0:	00f42400 	.word	0x00f42400

0800c4c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4c8:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	20000000 	.word	0x20000000

0800c4dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c4e0:	f7ff fff0 	bl	800c4c4 <HAL_RCC_GetHCLKFreq>
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	0a9b      	lsrs	r3, r3, #10
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	4a03      	ldr	r2, [pc, #12]	; (800c500 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4f2:	5cd3      	ldrb	r3, [r2, r3]
 800c4f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	40023800 	.word	0x40023800
 800c500:	08018e90 	.word	0x08018e90

0800c504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c508:	f7ff ffdc 	bl	800c4c4 <HAL_RCC_GetHCLKFreq>
 800c50c:	4601      	mov	r1, r0
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	0b5b      	lsrs	r3, r3, #13
 800c514:	f003 0307 	and.w	r3, r3, #7
 800c518:	4a03      	ldr	r2, [pc, #12]	; (800c528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c51a:	5cd3      	ldrb	r3, [r2, r3]
 800c51c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c520:	4618      	mov	r0, r3
 800c522:	bd80      	pop	{r7, pc}
 800c524:	40023800 	.word	0x40023800
 800c528:	08018e90 	.word	0x08018e90

0800c52c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00a      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c554:	4b66      	ldr	r3, [pc, #408]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c55a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c562:	4963      	ldr	r1, [pc, #396]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c564:	4313      	orrs	r3, r2
 800c566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c576:	4b5e      	ldr	r3, [pc, #376]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	495a      	ldr	r1, [pc, #360]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c586:	4313      	orrs	r3, r2
 800c588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10b      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d075      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c5b0:	4b50      	ldr	r3, [pc, #320]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5b6:	f7fd fb1b 	bl	8009bf0 <HAL_GetTick>
 800c5ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5bc:	e008      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5be:	f7fd fb17 	bl	8009bf0 <HAL_GetTick>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d901      	bls.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e1dc      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5d0:	4b47      	ldr	r3, [pc, #284]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1f0      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d009      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	019a      	lsls	r2, r3, #6
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	071b      	lsls	r3, r3, #28
 800c5f4:	493e      	ldr	r1, [pc, #248]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0302 	and.w	r3, r3, #2
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01f      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c608:	4b39      	ldr	r3, [pc, #228]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	f003 0307 	and.w	r3, r3, #7
 800c614:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	019a      	lsls	r2, r3, #6
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	061b      	lsls	r3, r3, #24
 800c622:	431a      	orrs	r2, r3
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	071b      	lsls	r3, r3, #28
 800c628:	4931      	ldr	r1, [pc, #196]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c62a:	4313      	orrs	r3, r2
 800c62c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c630:	4b2f      	ldr	r3, [pc, #188]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c636:	f023 021f 	bic.w	r2, r3, #31
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	3b01      	subs	r3, #1
 800c640:	492b      	ldr	r1, [pc, #172]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c642:	4313      	orrs	r3, r2
 800c644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00d      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	019a      	lsls	r2, r3, #6
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	061b      	lsls	r3, r3, #24
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	071b      	lsls	r3, r3, #28
 800c668:	4921      	ldr	r1, [pc, #132]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c670:	4b20      	ldr	r3, [pc, #128]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c672:	2201      	movs	r2, #1
 800c674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c676:	f7fd fabb 	bl	8009bf0 <HAL_GetTick>
 800c67a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c67c:	e008      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c67e:	f7fd fab7 	bl	8009bf0 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e17c      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c690:	4b17      	ldr	r3, [pc, #92]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0f0      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d112      	bne.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10c      	bne.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80ce 	beq.w	800c85e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c6c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ca:	f040 80c8 	bne.w	800c85e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c6ce:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6d4:	f7fd fa8c 	bl	8009bf0 <HAL_GetTick>
 800c6d8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6da:	e00f      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c6dc:	f7fd fa88 	bl	8009bf0 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d908      	bls.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e14d      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c6ee:	bf00      	nop
 800c6f0:	40023800 	.word	0x40023800
 800c6f4:	42470068 	.word	0x42470068
 800c6f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6fc:	4ba5      	ldr	r3, [pc, #660]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c708:	d0e8      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02e      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c716:	4b9f      	ldr	r3, [pc, #636]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71c:	0c1b      	lsrs	r3, r3, #16
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	3301      	adds	r3, #1
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c728:	4b9a      	ldr	r3, [pc, #616]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72e:	0f1b      	lsrs	r3, r3, #28
 800c730:	f003 0307 	and.w	r3, r3, #7
 800c734:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	019a      	lsls	r2, r3, #6
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	085b      	lsrs	r3, r3, #1
 800c740:	3b01      	subs	r3, #1
 800c742:	041b      	lsls	r3, r3, #16
 800c744:	431a      	orrs	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	061b      	lsls	r3, r3, #24
 800c74c:	431a      	orrs	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	071b      	lsls	r3, r3, #28
 800c752:	4990      	ldr	r1, [pc, #576]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c754:	4313      	orrs	r3, r2
 800c756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c75a:	4b8e      	ldr	r3, [pc, #568]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c760:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	3b01      	subs	r3, #1
 800c76a:	021b      	lsls	r3, r3, #8
 800c76c:	4989      	ldr	r1, [pc, #548]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0308 	and.w	r3, r3, #8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d02c      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c780:	4b84      	ldr	r3, [pc, #528]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c786:	0c1b      	lsrs	r3, r3, #16
 800c788:	f003 0303 	and.w	r3, r3, #3
 800c78c:	3301      	adds	r3, #1
 800c78e:	005b      	lsls	r3, r3, #1
 800c790:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c792:	4b80      	ldr	r3, [pc, #512]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c798:	0e1b      	lsrs	r3, r3, #24
 800c79a:	f003 030f 	and.w	r3, r3, #15
 800c79e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	019a      	lsls	r2, r3, #6
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	085b      	lsrs	r3, r3, #1
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	041b      	lsls	r3, r3, #16
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	061b      	lsls	r3, r3, #24
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	071b      	lsls	r3, r3, #28
 800c7bc:	4975      	ldr	r1, [pc, #468]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c7c4:	4b73      	ldr	r3, [pc, #460]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d2:	4970      	ldr	r1, [pc, #448]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d024      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c7ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7ee:	d11f      	bne.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c7f0:	4b68      	ldr	r3, [pc, #416]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7f6:	0e1b      	lsrs	r3, r3, #24
 800c7f8:	f003 030f 	and.w	r3, r3, #15
 800c7fc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7fe:	4b65      	ldr	r3, [pc, #404]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c804:	0f1b      	lsrs	r3, r3, #28
 800c806:	f003 0307 	and.w	r3, r3, #7
 800c80a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	019a      	lsls	r2, r3, #6
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	3b01      	subs	r3, #1
 800c81a:	041b      	lsls	r3, r3, #16
 800c81c:	431a      	orrs	r2, r3
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	061b      	lsls	r3, r3, #24
 800c822:	431a      	orrs	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	071b      	lsls	r3, r3, #28
 800c828:	495a      	ldr	r1, [pc, #360]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c82a:	4313      	orrs	r3, r2
 800c82c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c830:	4b59      	ldr	r3, [pc, #356]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c832:	2201      	movs	r2, #1
 800c834:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c836:	f7fd f9db 	bl	8009bf0 <HAL_GetTick>
 800c83a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c83c:	e008      	b.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c83e:	f7fd f9d7 	bl	8009bf0 <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d901      	bls.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e09c      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c850:	4b50      	ldr	r3, [pc, #320]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c85c:	d1ef      	bne.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0320 	and.w	r3, r3, #32
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 8083 	beq.w	800c972 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c86c:	2300      	movs	r3, #0
 800c86e:	60bb      	str	r3, [r7, #8]
 800c870:	4b48      	ldr	r3, [pc, #288]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	4a47      	ldr	r2, [pc, #284]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c87a:	6413      	str	r3, [r2, #64]	; 0x40
 800c87c:	4b45      	ldr	r3, [pc, #276]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c884:	60bb      	str	r3, [r7, #8]
 800c886:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c888:	4b44      	ldr	r3, [pc, #272]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a43      	ldr	r2, [pc, #268]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c892:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c894:	f7fd f9ac 	bl	8009bf0 <HAL_GetTick>
 800c898:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c89a:	e008      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c89c:	f7fd f9a8 	bl	8009bf0 <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e06d      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c8ae:	4b3b      	ldr	r3, [pc, #236]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0f0      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c8ba:	4b36      	ldr	r3, [pc, #216]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8c2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d02f      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8d2:	69ba      	ldr	r2, [r7, #24]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d028      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8d8:	4b2e      	ldr	r3, [pc, #184]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8e0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c8e2:	4b2f      	ldr	r3, [pc, #188]	; (800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c8e8:	4b2d      	ldr	r3, [pc, #180]	; (800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c8ee:	4a29      	ldr	r2, [pc, #164]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c8f4:	4b27      	ldr	r3, [pc, #156]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d114      	bne.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c900:	f7fd f976 	bl	8009bf0 <HAL_GetTick>
 800c904:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c906:	e00a      	b.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c908:	f7fd f972 	bl	8009bf0 <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	f241 3288 	movw	r2, #5000	; 0x1388
 800c916:	4293      	cmp	r3, r2
 800c918:	d901      	bls.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e035      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c91e:	4b1d      	ldr	r3, [pc, #116]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0ee      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c936:	d10d      	bne.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c938:	4b16      	ldr	r3, [pc, #88]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c94c:	4911      	ldr	r1, [pc, #68]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c94e:	4313      	orrs	r3, r2
 800c950:	608b      	str	r3, [r1, #8]
 800c952:	e005      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c954:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	4a0e      	ldr	r2, [pc, #56]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c95a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c95e:	6093      	str	r3, [r2, #8]
 800c960:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c962:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c96c:	4909      	ldr	r1, [pc, #36]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96e:	4313      	orrs	r3, r2
 800c970:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 0310 	and.w	r3, r3, #16
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c984:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c986:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3720      	adds	r7, #32
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	40023800 	.word	0x40023800
 800c998:	42470070 	.word	0x42470070
 800c99c:	40007000 	.word	0x40007000
 800c9a0:	42470e40 	.word	0x42470e40
 800c9a4:	424711e0 	.word	0x424711e0

0800c9a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d075      	beq.n	800caac <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c9c0:	4ba2      	ldr	r3, [pc, #648]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f003 030c 	and.w	r3, r3, #12
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d00c      	beq.n	800c9e6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9cc:	4b9f      	ldr	r3, [pc, #636]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c9d4:	2b08      	cmp	r3, #8
 800c9d6:	d112      	bne.n	800c9fe <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9d8:	4b9c      	ldr	r3, [pc, #624]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9e4:	d10b      	bne.n	800c9fe <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9e6:	4b99      	ldr	r3, [pc, #612]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d05b      	beq.n	800caaa <HAL_RCC_OscConfig+0x102>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d157      	bne.n	800caaa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e20b      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca06:	d106      	bne.n	800ca16 <HAL_RCC_OscConfig+0x6e>
 800ca08:	4b90      	ldr	r3, [pc, #576]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a8f      	ldr	r2, [pc, #572]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	e01d      	b.n	800ca52 <HAL_RCC_OscConfig+0xaa>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca1e:	d10c      	bne.n	800ca3a <HAL_RCC_OscConfig+0x92>
 800ca20:	4b8a      	ldr	r3, [pc, #552]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a89      	ldr	r2, [pc, #548]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca2a:	6013      	str	r3, [r2, #0]
 800ca2c:	4b87      	ldr	r3, [pc, #540]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a86      	ldr	r2, [pc, #536]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	e00b      	b.n	800ca52 <HAL_RCC_OscConfig+0xaa>
 800ca3a:	4b84      	ldr	r3, [pc, #528]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a83      	ldr	r2, [pc, #524]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	4b81      	ldr	r3, [pc, #516]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a80      	ldr	r2, [pc, #512]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d013      	beq.n	800ca82 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca5a:	f7fd f8c9 	bl	8009bf0 <HAL_GetTick>
 800ca5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca60:	e008      	b.n	800ca74 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca62:	f7fd f8c5 	bl	8009bf0 <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b64      	cmp	r3, #100	; 0x64
 800ca6e:	d901      	bls.n	800ca74 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e1d0      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca74:	4b75      	ldr	r3, [pc, #468]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d0f0      	beq.n	800ca62 <HAL_RCC_OscConfig+0xba>
 800ca80:	e014      	b.n	800caac <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca82:	f7fd f8b5 	bl	8009bf0 <HAL_GetTick>
 800ca86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca88:	e008      	b.n	800ca9c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca8a:	f7fd f8b1 	bl	8009bf0 <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b64      	cmp	r3, #100	; 0x64
 800ca96:	d901      	bls.n	800ca9c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e1bc      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca9c:	4b6b      	ldr	r3, [pc, #428]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1f0      	bne.n	800ca8a <HAL_RCC_OscConfig+0xe2>
 800caa8:	e000      	b.n	800caac <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800caaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0302 	and.w	r3, r3, #2
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d063      	beq.n	800cb80 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cab8:	4b64      	ldr	r3, [pc, #400]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f003 030c 	and.w	r3, r3, #12
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00b      	beq.n	800cadc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cac4:	4b61      	ldr	r3, [pc, #388]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cacc:	2b08      	cmp	r3, #8
 800cace:	d11c      	bne.n	800cb0a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cad0:	4b5e      	ldr	r3, [pc, #376]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d116      	bne.n	800cb0a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cadc:	4b5b      	ldr	r3, [pc, #364]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 0302 	and.w	r3, r3, #2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d005      	beq.n	800caf4 <HAL_RCC_OscConfig+0x14c>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d001      	beq.n	800caf4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e190      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caf4:	4b55      	ldr	r3, [pc, #340]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	4952      	ldr	r1, [pc, #328]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb08:	e03a      	b.n	800cb80 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d020      	beq.n	800cb54 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb12:	4b4f      	ldr	r3, [pc, #316]	; (800cc50 <HAL_RCC_OscConfig+0x2a8>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb18:	f7fd f86a 	bl	8009bf0 <HAL_GetTick>
 800cb1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb1e:	e008      	b.n	800cb32 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb20:	f7fd f866 	bl	8009bf0 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e171      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb32:	4b46      	ldr	r3, [pc, #280]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0f0      	beq.n	800cb20 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb3e:	4b43      	ldr	r3, [pc, #268]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	493f      	ldr	r1, [pc, #252]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	600b      	str	r3, [r1, #0]
 800cb52:	e015      	b.n	800cb80 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb54:	4b3e      	ldr	r3, [pc, #248]	; (800cc50 <HAL_RCC_OscConfig+0x2a8>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb5a:	f7fd f849 	bl	8009bf0 <HAL_GetTick>
 800cb5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb60:	e008      	b.n	800cb74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb62:	f7fd f845 	bl	8009bf0 <HAL_GetTick>
 800cb66:	4602      	mov	r2, r0
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d901      	bls.n	800cb74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e150      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb74:	4b35      	ldr	r3, [pc, #212]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1f0      	bne.n	800cb62 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 0308 	and.w	r3, r3, #8
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d030      	beq.n	800cbee <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d016      	beq.n	800cbc2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb94:	4b2f      	ldr	r3, [pc, #188]	; (800cc54 <HAL_RCC_OscConfig+0x2ac>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb9a:	f7fd f829 	bl	8009bf0 <HAL_GetTick>
 800cb9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cba0:	e008      	b.n	800cbb4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cba2:	f7fd f825 	bl	8009bf0 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d901      	bls.n	800cbb4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e130      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbb4:	4b25      	ldr	r3, [pc, #148]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbb8:	f003 0302 	and.w	r3, r3, #2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0f0      	beq.n	800cba2 <HAL_RCC_OscConfig+0x1fa>
 800cbc0:	e015      	b.n	800cbee <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbc2:	4b24      	ldr	r3, [pc, #144]	; (800cc54 <HAL_RCC_OscConfig+0x2ac>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbc8:	f7fd f812 	bl	8009bf0 <HAL_GetTick>
 800cbcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbce:	e008      	b.n	800cbe2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbd0:	f7fd f80e 	bl	8009bf0 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d901      	bls.n	800cbe2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e119      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbe2:	4b1a      	ldr	r3, [pc, #104]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbe6:	f003 0302 	and.w	r3, r3, #2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1f0      	bne.n	800cbd0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 809f 	beq.w	800cd3a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc00:	4b12      	ldr	r3, [pc, #72]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10f      	bne.n	800cc2c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc14:	4a0d      	ldr	r2, [pc, #52]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cc16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc1a:	6413      	str	r3, [r2, #64]	; 0x40
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <HAL_RCC_OscConfig+0x2a4>)
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc2c:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <HAL_RCC_OscConfig+0x2b0>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d120      	bne.n	800cc7a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc38:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <HAL_RCC_OscConfig+0x2b0>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a06      	ldr	r2, [pc, #24]	; (800cc58 <HAL_RCC_OscConfig+0x2b0>)
 800cc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc44:	f7fc ffd4 	bl	8009bf0 <HAL_GetTick>
 800cc48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc4a:	e010      	b.n	800cc6e <HAL_RCC_OscConfig+0x2c6>
 800cc4c:	40023800 	.word	0x40023800
 800cc50:	42470000 	.word	0x42470000
 800cc54:	42470e80 	.word	0x42470e80
 800cc58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc5c:	f7fc ffc8 	bl	8009bf0 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e0d3      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc6e:	4b6c      	ldr	r3, [pc, #432]	; (800ce20 <HAL_RCC_OscConfig+0x478>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0f0      	beq.n	800cc5c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d106      	bne.n	800cc90 <HAL_RCC_OscConfig+0x2e8>
 800cc82:	4b68      	ldr	r3, [pc, #416]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc86:	4a67      	ldr	r2, [pc, #412]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cc88:	f043 0301 	orr.w	r3, r3, #1
 800cc8c:	6713      	str	r3, [r2, #112]	; 0x70
 800cc8e:	e01c      	b.n	800ccca <HAL_RCC_OscConfig+0x322>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	2b05      	cmp	r3, #5
 800cc96:	d10c      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x30a>
 800cc98:	4b62      	ldr	r3, [pc, #392]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9c:	4a61      	ldr	r2, [pc, #388]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cc9e:	f043 0304 	orr.w	r3, r3, #4
 800cca2:	6713      	str	r3, [r2, #112]	; 0x70
 800cca4:	4b5f      	ldr	r3, [pc, #380]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca8:	4a5e      	ldr	r2, [pc, #376]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccaa:	f043 0301 	orr.w	r3, r3, #1
 800ccae:	6713      	str	r3, [r2, #112]	; 0x70
 800ccb0:	e00b      	b.n	800ccca <HAL_RCC_OscConfig+0x322>
 800ccb2:	4b5c      	ldr	r3, [pc, #368]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb6:	4a5b      	ldr	r2, [pc, #364]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccb8:	f023 0301 	bic.w	r3, r3, #1
 800ccbc:	6713      	str	r3, [r2, #112]	; 0x70
 800ccbe:	4b59      	ldr	r3, [pc, #356]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc2:	4a58      	ldr	r2, [pc, #352]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccc4:	f023 0304 	bic.w	r3, r3, #4
 800ccc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d015      	beq.n	800ccfe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccd2:	f7fc ff8d 	bl	8009bf0 <HAL_GetTick>
 800ccd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccd8:	e00a      	b.n	800ccf0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccda:	f7fc ff89 	bl	8009bf0 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d901      	bls.n	800ccf0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e092      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccf0:	4b4c      	ldr	r3, [pc, #304]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ccf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d0ee      	beq.n	800ccda <HAL_RCC_OscConfig+0x332>
 800ccfc:	e014      	b.n	800cd28 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccfe:	f7fc ff77 	bl	8009bf0 <HAL_GetTick>
 800cd02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd04:	e00a      	b.n	800cd1c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd06:	f7fc ff73 	bl	8009bf0 <HAL_GetTick>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d901      	bls.n	800cd1c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e07c      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd1c:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd20:	f003 0302 	and.w	r3, r3, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1ee      	bne.n	800cd06 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d105      	bne.n	800cd3a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd2e:	4b3d      	ldr	r3, [pc, #244]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	4a3c      	ldr	r2, [pc, #240]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cd34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d068      	beq.n	800ce14 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd42:	4b38      	ldr	r3, [pc, #224]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 030c 	and.w	r3, r3, #12
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d060      	beq.n	800ce10 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d145      	bne.n	800cde2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd56:	4b34      	ldr	r3, [pc, #208]	; (800ce28 <HAL_RCC_OscConfig+0x480>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5c:	f7fc ff48 	bl	8009bf0 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd64:	f7fc ff44 	bl	8009bf0 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e04f      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd76:	4b2b      	ldr	r3, [pc, #172]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	69da      	ldr	r2, [r3, #28]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	019b      	lsls	r3, r3, #6
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	085b      	lsrs	r3, r3, #1
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	041b      	lsls	r3, r3, #16
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	061b      	lsls	r3, r3, #24
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdac:	071b      	lsls	r3, r3, #28
 800cdae:	491d      	ldr	r1, [pc, #116]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdb4:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <HAL_RCC_OscConfig+0x480>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdba:	f7fc ff19 	bl	8009bf0 <HAL_GetTick>
 800cdbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdc0:	e008      	b.n	800cdd4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdc2:	f7fc ff15 	bl	8009bf0 <HAL_GetTick>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d901      	bls.n	800cdd4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e020      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdd4:	4b13      	ldr	r3, [pc, #76]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0f0      	beq.n	800cdc2 <HAL_RCC_OscConfig+0x41a>
 800cde0:	e018      	b.n	800ce14 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cde2:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <HAL_RCC_OscConfig+0x480>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde8:	f7fc ff02 	bl	8009bf0 <HAL_GetTick>
 800cdec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdf0:	f7fc fefe 	bl	8009bf0 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e009      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce02:	4b08      	ldr	r3, [pc, #32]	; (800ce24 <HAL_RCC_OscConfig+0x47c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x448>
 800ce0e:	e001      	b.n	800ce14 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e000      	b.n	800ce16 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	40007000 	.word	0x40007000
 800ce24:	40023800 	.word	0x40023800
 800ce28:	42470060 	.word	0x42470060

0800ce2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d101      	bne.n	800ce3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e022      	b.n	800ce84 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d105      	bne.n	800ce56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7fa f841 	bl	8006ed8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2203      	movs	r2, #3
 800ce5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f814 	bl	800ce8c <HAL_SD_InitCard>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e00a      	b.n	800ce84 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce8c:	b5b0      	push	{r4, r5, r7, lr}
 800ce8e:	b08e      	sub	sp, #56	; 0x38
 800ce90:	af04      	add	r7, sp, #16
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cea0:	2300      	movs	r3, #0
 800cea2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cea4:	2300      	movs	r3, #0
 800cea6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cea8:	2376      	movs	r3, #118	; 0x76
 800ceaa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681d      	ldr	r5, [r3, #0]
 800ceb0:	466c      	mov	r4, sp
 800ceb2:	f107 0314 	add.w	r3, r7, #20
 800ceb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ceba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cec4:	4628      	mov	r0, r5
 800cec6:	f003 fa87 	bl	80103d8 <SDIO_Init>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ced0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e031      	b.n	800cf40 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cedc:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <HAL_SD_InitCard+0xbc>)
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 fabf 	bl	801046a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ceec:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <HAL_SD_InitCard+0xbc>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 ffc6 	bl	800de84 <SD_PowerON>
 800cef8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00b      	beq.n	800cf18 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf0c:	6a3b      	ldr	r3, [r7, #32]
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf14:	2301      	movs	r3, #1
 800cf16:	e013      	b.n	800cf40 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fee5 	bl	800dce8 <SD_InitCard>
 800cf1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00b      	beq.n	800cf3e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e000      	b.n	800cf40 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3728      	adds	r7, #40	; 0x28
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bdb0      	pop	{r4, r5, r7, pc}
 800cf48:	422580a0 	.word	0x422580a0

0800cf4c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08c      	sub	sp, #48	; 0x30
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d107      	bne.n	800cf74 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e0c7      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	f040 80c0 	bne.w	800d102 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	441a      	add	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d907      	bls.n	800cfa6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e0ae      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2203      	movs	r2, #3
 800cfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cfc4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfca:	4a50      	ldr	r2, [pc, #320]	; (800d10c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cfcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd2:	4a4f      	ldr	r2, [pc, #316]	; (800d110 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cfd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	2200      	movs	r2, #0
 800cfdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3380      	adds	r3, #128	; 0x80
 800cfe8:	4619      	mov	r1, r3
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	025b      	lsls	r3, r3, #9
 800cff0:	089b      	lsrs	r3, r3, #2
 800cff2:	f7fd fbef 	bl	800a7d4 <HAL_DMA_Start_IT>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d017      	beq.n	800d02c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d00a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a40      	ldr	r2, [pc, #256]	; (800d114 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e06b      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d02c:	4b3a      	ldr	r3, [pc, #232]	; (800d118 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d036:	2b01      	cmp	r3, #1
 800d038:	d002      	beq.n	800d040 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	025b      	lsls	r3, r3, #9
 800d03e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d048:	4618      	mov	r0, r3
 800d04a:	f003 faa1 	bl	8010590 <SDMMC_CmdBlockLength>
 800d04e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00f      	beq.n	800d076 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a2e      	ldr	r2, [pc, #184]	; (800d114 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d05c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	431a      	orrs	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e046      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d076:	f04f 33ff 	mov.w	r3, #4294967295
 800d07a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	025b      	lsls	r3, r3, #9
 800d080:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d082:	2390      	movs	r3, #144	; 0x90
 800d084:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d086:	2302      	movs	r3, #2
 800d088:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d08e:	2301      	movs	r3, #1
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f107 0210 	add.w	r2, r7, #16
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f003 fa4b 	bl	8010538 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d90a      	bls.n	800d0be <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2282      	movs	r2, #130	; 0x82
 800d0ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f003 faaf 	bl	8010618 <SDMMC_CmdReadMultiBlock>
 800d0ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d0bc:	e009      	b.n	800d0d2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2281      	movs	r2, #129	; 0x81
 800d0c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f003 fa82 	bl	80105d4 <SDMMC_CmdReadSingleBlock>
 800d0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d012      	beq.n	800d0fe <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a0d      	ldr	r2, [pc, #52]	; (800d114 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d0de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e002      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	e000      	b.n	800d104 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d102:	2302      	movs	r3, #2
  }
}
 800d104:	4618      	mov	r0, r3
 800d106:	3730      	adds	r7, #48	; 0x30
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	0800daf7 	.word	0x0800daf7
 800d110:	0800db69 	.word	0x0800db69
 800d114:	004005ff 	.word	0x004005ff
 800d118:	4225858c 	.word	0x4225858c

0800d11c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08c      	sub	sp, #48	; 0x30
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d107      	bne.n	800d144 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e0ca      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	f040 80c3 	bne.w	800d2d8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	441a      	add	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d162:	429a      	cmp	r2, r3
 800d164:	d907      	bls.n	800d176 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e0b1      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2203      	movs	r2, #3
 800d17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2200      	movs	r2, #0
 800d184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f042 021a 	orr.w	r2, r2, #26
 800d194:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	4a52      	ldr	r2, [pc, #328]	; (800d2e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d19c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a2:	4a51      	ldr	r2, [pc, #324]	; (800d2e8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d1a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d002      	beq.n	800d1bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	025b      	lsls	r3, r3, #9
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f003 f9e3 	bl	8010590 <SDMMC_CmdBlockLength>
 800d1ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00f      	beq.n	800d1f2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a45      	ldr	r2, [pc, #276]	; (800d2ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d1d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e073      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d90a      	bls.n	800d20e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	22a0      	movs	r2, #160	; 0xa0
 800d1fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d204:	4618      	mov	r0, r3
 800d206:	f003 fa4b 	bl	80106a0 <SDMMC_CmdWriteMultiBlock>
 800d20a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d20c:	e009      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2290      	movs	r2, #144	; 0x90
 800d212:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d21a:	4618      	mov	r0, r3
 800d21c:	f003 fa1e 	bl	801065c <SDMMC_CmdWriteSingleBlock>
 800d220:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d012      	beq.n	800d24e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a2f      	ldr	r2, [pc, #188]	; (800d2ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	431a      	orrs	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2200      	movs	r2, #0
 800d248:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e045      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d24e:	4b28      	ldr	r3, [pc, #160]	; (800d2f0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d250:	2201      	movs	r2, #1
 800d252:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3380      	adds	r3, #128	; 0x80
 800d260:	461a      	mov	r2, r3
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	025b      	lsls	r3, r3, #9
 800d266:	089b      	lsrs	r3, r3, #2
 800d268:	f7fd fab4 	bl	800a7d4 <HAL_DMA_Start_IT>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d01a      	beq.n	800d2a8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f022 021a 	bic.w	r2, r2, #26
 800d280:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a19      	ldr	r2, [pc, #100]	; (800d2ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e018      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	025b      	lsls	r3, r3, #9
 800d2b2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d2b4:	2390      	movs	r3, #144	; 0x90
 800d2b6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f107 0210 	add.w	r2, r7, #16
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f003 f932 	bl	8010538 <SDIO_ConfigData>

      return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e000      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d2d8:	2302      	movs	r3, #2
  }
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3730      	adds	r7, #48	; 0x30
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	0800dacd 	.word	0x0800dacd
 800d2e8:	0800db69 	.word	0x0800db69
 800d2ec:	004005ff 	.word	0x004005ff
 800d2f0:	4225858c 	.word	0x4225858c

0800d2f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d300:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d008      	beq.n	800d322 <HAL_SD_IRQHandler+0x2e>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f003 0308 	and.w	r3, r3, #8
 800d316:	2b00      	cmp	r3, #0
 800d318:	d003      	beq.n	800d322 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 ffc8 	bl	800e2b0 <SD_Read_IT>
 800d320:	e155      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 808f 	beq.w	800d450 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	6812      	ldr	r2, [r2, #0]
 800d346:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d34a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d34e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 0201 	bic.w	r2, r2, #1
 800d35e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0308 	and.w	r3, r3, #8
 800d366:	2b00      	cmp	r3, #0
 800d368:	d039      	beq.n	800d3de <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f003 0302 	and.w	r3, r3, #2
 800d370:	2b00      	cmp	r3, #0
 800d372:	d104      	bne.n	800d37e <HAL_SD_IRQHandler+0x8a>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f003 0320 	and.w	r3, r3, #32
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d011      	beq.n	800d3a2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f003 f9ae 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800d388:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d008      	beq.n	800d3a2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	431a      	orrs	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f91f 	bl	800d5e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <HAL_SD_IRQHandler+0xda>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0302 	and.w	r3, r3, #2
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f003 fe04 	bl	8010fdc <HAL_SD_RxCpltCallback>
 800d3d4:	e0fb      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f003 fdf6 	bl	8010fc8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d3dc:	e0f7      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 80f2 	beq.w	800d5ce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f003 0320 	and.w	r3, r3, #32
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d011      	beq.n	800d418 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f003 f973 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800d3fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d008      	beq.n	800d418 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	431a      	orrs	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f8e4 	bl	800d5e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f040 80d5 	bne.w	800d5ce <HAL_SD_IRQHandler+0x2da>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f003 0302 	and.w	r3, r3, #2
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 80cf 	bne.w	800d5ce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f022 0208 	bic.w	r2, r2, #8
 800d43e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f003 fdbd 	bl	8010fc8 <HAL_SD_TxCpltCallback>
}
 800d44e:	e0be      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d008      	beq.n	800d470 <HAL_SD_IRQHandler+0x17c>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 ff72 	bl	800e352 <SD_Write_IT>
 800d46e:	e0ae      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d476:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 80a7 	beq.w	800d5ce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d486:	f003 0302 	and.w	r3, r3, #2
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	f043 0202 	orr.w	r2, r3, #2
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d005      	beq.n	800d4b4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ac:	f043 0208 	orr.w	r2, r3, #8
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ba:	f003 0320 	and.w	r3, r3, #32
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d005      	beq.n	800d4ce <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	f043 0220 	orr.w	r2, r3, #32
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d005      	beq.n	800d4e8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	f043 0210 	orr.w	r2, r3, #16
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d500:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4618      	mov	r0, r3
 800d508:	f003 f8ec 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800d50c:	4602      	mov	r2, r0
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d512:	431a      	orrs	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f003 0308 	and.w	r3, r3, #8
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00a      	beq.n	800d538 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f855 	bl	800d5e0 <HAL_SD_ErrorCallback>
}
 800d536:	e04a      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d045      	beq.n	800d5ce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d104      	bne.n	800d556 <HAL_SD_IRQHandler+0x262>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f003 0320 	and.w	r3, r3, #32
 800d552:	2b00      	cmp	r3, #0
 800d554:	d011      	beq.n	800d57a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55a:	4a1f      	ldr	r2, [pc, #124]	; (800d5d8 <HAL_SD_IRQHandler+0x2e4>)
 800d55c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d562:	4618      	mov	r0, r3
 800d564:	f7fd f98e 	bl	800a884 <HAL_DMA_Abort_IT>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d02f      	beq.n	800d5ce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d572:	4618      	mov	r0, r3
 800d574:	f000 fb4a 	bl	800dc0c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d578:	e029      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	2b00      	cmp	r3, #0
 800d582:	d104      	bne.n	800d58e <HAL_SD_IRQHandler+0x29a>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f003 0302 	and.w	r3, r3, #2
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d011      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d592:	4a12      	ldr	r2, [pc, #72]	; (800d5dc <HAL_SD_IRQHandler+0x2e8>)
 800d594:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd f972 	bl	800a884 <HAL_DMA_Abort_IT>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d013      	beq.n	800d5ce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 fb65 	bl	800dc7a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d5b0:	e00d      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f003 fcf4 	bl	8010fb4 <HAL_SD_AbortCallback>
}
 800d5cc:	e7ff      	b.n	800d5ce <HAL_SD_IRQHandler+0x2da>
 800d5ce:	bf00      	nop
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0800dc0d 	.word	0x0800dc0d
 800d5dc:	0800dc7b 	.word	0x0800dc7b

0800d5e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d5e8:	bf00      	nop
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d602:	0f9b      	lsrs	r3, r3, #30
 800d604:	b2da      	uxtb	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d60e:	0e9b      	lsrs	r3, r3, #26
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 030f 	and.w	r3, r3, #15
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d620:	0e1b      	lsrs	r3, r3, #24
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f003 0303 	and.w	r3, r3, #3
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d632:	0c1b      	lsrs	r3, r3, #16
 800d634:	b2da      	uxtb	r2, r3
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d63e:	0a1b      	lsrs	r3, r3, #8
 800d640:	b2da      	uxtb	r2, r3
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d64a:	b2da      	uxtb	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d654:	0d1b      	lsrs	r3, r3, #20
 800d656:	b29a      	uxth	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d660:	0c1b      	lsrs	r3, r3, #16
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 030f 	and.w	r3, r3, #15
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d672:	0bdb      	lsrs	r3, r3, #15
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d684:	0b9b      	lsrs	r3, r3, #14
 800d686:	b2db      	uxtb	r3, r3
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d696:	0b5b      	lsrs	r3, r3, #13
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a8:	0b1b      	lsrs	r3, r3, #12
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d163      	bne.n	800d78c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6c8:	009a      	lsls	r2, r3, #2
 800d6ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d6d4:	0f92      	lsrs	r2, r2, #30
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e0:	0edb      	lsrs	r3, r3, #27
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0307 	and.w	r3, r3, #7
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f2:	0e1b      	lsrs	r3, r3, #24
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d704:	0d5b      	lsrs	r3, r3, #21
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d716:	0c9b      	lsrs	r3, r3, #18
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f003 0307 	and.w	r3, r3, #7
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d728:	0bdb      	lsrs	r3, r3, #15
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	f003 0307 	and.w	r3, r3, #7
 800d730:	b2da      	uxtb	r2, r3
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	1c5a      	adds	r2, r3, #1
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	7e1b      	ldrb	r3, [r3, #24]
 800d744:	b2db      	uxtb	r3, r3
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	3302      	adds	r3, #2
 800d74c:	2201      	movs	r2, #1
 800d74e:	fa02 f303 	lsl.w	r3, r2, r3
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d756:	fb02 f203 	mul.w	r2, r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	7a1b      	ldrb	r3, [r3, #8]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f003 030f 	and.w	r3, r3, #15
 800d768:	2201      	movs	r2, #1
 800d76a:	409a      	lsls	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d778:	0a52      	lsrs	r2, r2, #9
 800d77a:	fb02 f203 	mul.w	r2, r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d788:	661a      	str	r2, [r3, #96]	; 0x60
 800d78a:	e031      	b.n	800d7f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d790:	2b01      	cmp	r3, #1
 800d792:	d11d      	bne.n	800d7d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d798:	041b      	lsls	r3, r3, #16
 800d79a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a2:	0c1b      	lsrs	r3, r3, #16
 800d7a4:	431a      	orrs	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	029a      	lsls	r2, r3, #10
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	661a      	str	r2, [r3, #96]	; 0x60
 800d7ce:	e00f      	b.n	800d7f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a58      	ldr	r2, [pc, #352]	; (800d938 <HAL_SD_GetCardCSD+0x344>)
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e09d      	b.n	800d92c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f4:	0b9b      	lsrs	r3, r3, #14
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d806:	09db      	lsrs	r3, r3, #7
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d828:	0fdb      	lsrs	r3, r3, #31
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d834:	0f5b      	lsrs	r3, r3, #29
 800d836:	b2db      	uxtb	r3, r3
 800d838:	f003 0303 	and.w	r3, r3, #3
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d846:	0e9b      	lsrs	r3, r3, #26
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f003 0307 	and.w	r3, r3, #7
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d858:	0d9b      	lsrs	r3, r3, #22
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	f003 030f 	and.w	r3, r3, #15
 800d860:	b2da      	uxtb	r2, r3
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d86a:	0d5b      	lsrs	r3, r3, #21
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	b2da      	uxtb	r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d886:	0c1b      	lsrs	r3, r3, #16
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89a:	0bdb      	lsrs	r3, r3, #15
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ae:	0b9b      	lsrs	r3, r3, #14
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c2:	0b5b      	lsrs	r3, r3, #13
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d6:	0b1b      	lsrs	r3, r3, #12
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ea:	0a9b      	lsrs	r3, r3, #10
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 0303 	and.w	r3, r3, #3
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fe:	0a1b      	lsrs	r3, r3, #8
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	b2da      	uxtb	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d912:	085b      	lsrs	r3, r3, #1
 800d914:	b2db      	uxtb	r3, r3
 800d916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr
 800d938:	004005ff 	.word	0x004005ff

0800d93c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d994:	b5b0      	push	{r4, r5, r7, lr}
 800d996:	b08e      	sub	sp, #56	; 0x38
 800d998:	af04      	add	r7, sp, #16
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	d02e      	beq.n	800da0c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b4:	d106      	bne.n	800d9c4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	639a      	str	r2, [r3, #56]	; 0x38
 800d9c2:	e029      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9ca:	d10a      	bne.n	800d9e2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fb0f 	bl	800dff0 <SD_WideBus_Enable>
 800d9d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38
 800d9e0:	e01a      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10a      	bne.n	800d9fe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fb4c 	bl	800e086 <SD_WideBus_Disable>
 800d9ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	639a      	str	r2, [r3, #56]	; 0x38
 800d9fc:	e00c      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	639a      	str	r2, [r3, #56]	; 0x38
 800da0a:	e005      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a18      	ldr	r2, [pc, #96]	; (800da88 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e024      	b.n	800da7e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	695b      	ldr	r3, [r3, #20]
 800da4e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681d      	ldr	r5, [r3, #0]
 800da5a:	466c      	mov	r4, sp
 800da5c:	f107 0318 	add.w	r3, r7, #24
 800da60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da68:	f107 030c 	add.w	r3, r7, #12
 800da6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da6e:	4628      	mov	r0, r5
 800da70:	f002 fcb2 	bl	80103d8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3728      	adds	r7, #40	; 0x28
 800da82:	46bd      	mov	sp, r7
 800da84:	bdb0      	pop	{r4, r5, r7, pc}
 800da86:	bf00      	nop
 800da88:	004005ff 	.word	0x004005ff

0800da8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da98:	f107 030c 	add.w	r3, r7, #12
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fa7e 	bl	800dfa0 <SD_SendStatus>
 800daa4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d005      	beq.n	800dab8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	431a      	orrs	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	0a5b      	lsrs	r3, r3, #9
 800dabc:	f003 030f 	and.w	r3, r3, #15
 800dac0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dac2:	693b      	ldr	r3, [r7, #16]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dae8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800daea:	bf00      	nop
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db08:	2b82      	cmp	r3, #130	; 0x82
 800db0a:	d111      	bne.n	800db30 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4618      	mov	r0, r3
 800db12:	f002 fde7 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800db16:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d008      	beq.n	800db30 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	431a      	orrs	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f7ff fd58 	bl	800d5e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f022 0208 	bic.w	r2, r2, #8
 800db3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f240 523a 	movw	r2, #1338	; 0x53a
 800db48:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f003 fa3f 	bl	8010fdc <HAL_SD_RxCpltCallback>
#endif
}
 800db5e:	bf00      	nop
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db74:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7fd f830 	bl	800abdc <HAL_DMA_GetError>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d03e      	beq.n	800dc00 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db88:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db90:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d002      	beq.n	800db9e <SD_DMAError+0x36>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d12d      	bne.n	800dbfa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a19      	ldr	r2, [pc, #100]	; (800dc08 <SD_DMAError+0xa0>)
 800dba4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dbb4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dbc2:	6978      	ldr	r0, [r7, #20]
 800dbc4:	f7ff ff62 	bl	800da8c <HAL_SD_GetCardState>
 800dbc8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2b06      	cmp	r3, #6
 800dbce:	d002      	beq.n	800dbd6 <SD_DMAError+0x6e>
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b05      	cmp	r3, #5
 800dbd4:	d10a      	bne.n	800dbec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f002 fd82 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dbfa:	6978      	ldr	r0, [r7, #20]
 800dbfc:	f7ff fcf0 	bl	800d5e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dc00:	bf00      	nop
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	004005ff 	.word	0x004005ff

0800dc0c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc22:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff ff31 	bl	800da8c <HAL_SD_GetCardState>
 800dc2a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b06      	cmp	r3, #6
 800dc3e:	d002      	beq.n	800dc46 <SD_DMATxAbort+0x3a>
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b05      	cmp	r3, #5
 800dc44:	d10a      	bne.n	800dc5c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 fd4a 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800dc50:	4602      	mov	r2, r0
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc56:	431a      	orrs	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d103      	bne.n	800dc6c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f003 f9a5 	bl	8010fb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dc6a:	e002      	b.n	800dc72 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff fcb7 	bl	800d5e0 <HAL_SD_ErrorCallback>
}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc86:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc90:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff fefa 	bl	800da8c <HAL_SD_GetCardState>
 800dc98:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2b06      	cmp	r3, #6
 800dcac:	d002      	beq.n	800dcb4 <SD_DMARxAbort+0x3a>
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b05      	cmp	r3, #5
 800dcb2:	d10a      	bne.n	800dcca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f002 fd13 	bl	80106e4 <SDMMC_CmdStopTransfer>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d103      	bne.n	800dcda <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f003 f96e 	bl	8010fb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dcd8:	e002      	b.n	800dce0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7ff fc80 	bl	800d5e0 <HAL_SD_ErrorCallback>
}
 800dce0:	bf00      	nop
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dce8:	b5b0      	push	{r4, r5, r7, lr}
 800dcea:	b094      	sub	sp, #80	; 0x50
 800dcec:	af04      	add	r7, sp, #16
 800dcee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f002 fbc5 	bl	8010488 <SDIO_GetPowerState>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dd08:	e0b7      	b.n	800de7a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d02f      	beq.n	800dd72 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f002 fdee 	bl	80108f8 <SDMMC_CmdSendCID>
 800dd1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <SD_InitCard+0x40>
    {
      return errorstate;
 800dd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd26:	e0a8      	b.n	800de7a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f002 fbef 	bl	8010512 <SDIO_GetResponse>
 800dd34:	4602      	mov	r2, r0
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2104      	movs	r1, #4
 800dd40:	4618      	mov	r0, r3
 800dd42:	f002 fbe6 	bl	8010512 <SDIO_GetResponse>
 800dd46:	4602      	mov	r2, r0
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2108      	movs	r1, #8
 800dd52:	4618      	mov	r0, r3
 800dd54:	f002 fbdd 	bl	8010512 <SDIO_GetResponse>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	210c      	movs	r1, #12
 800dd64:	4618      	mov	r0, r3
 800dd66:	f002 fbd4 	bl	8010512 <SDIO_GetResponse>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d00d      	beq.n	800dd96 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f107 020e 	add.w	r2, r7, #14
 800dd82:	4611      	mov	r1, r2
 800dd84:	4618      	mov	r0, r3
 800dd86:	f002 fdf4 	bl	8010972 <SDMMC_CmdSetRelAdd>
 800dd8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <SD_InitCard+0xae>
    {
      return errorstate;
 800dd92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd94:	e071      	b.n	800de7a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd9a:	2b03      	cmp	r3, #3
 800dd9c:	d036      	beq.n	800de0c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dd9e:	89fb      	ldrh	r3, [r7, #14]
 800dda0:	461a      	mov	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddae:	041b      	lsls	r3, r3, #16
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f002 fdbe 	bl	8010934 <SDMMC_CmdSendCSD>
 800ddb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc2:	e05a      	b.n	800de7a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f002 fba1 	bl	8010512 <SDIO_GetResponse>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2104      	movs	r1, #4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f002 fb98 	bl	8010512 <SDIO_GetResponse>
 800dde2:	4602      	mov	r2, r0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2108      	movs	r1, #8
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f002 fb8f 	bl	8010512 <SDIO_GetResponse>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	210c      	movs	r1, #12
 800de00:	4618      	mov	r0, r3
 800de02:	f002 fb86 	bl	8010512 <SDIO_GetResponse>
 800de06:	4602      	mov	r2, r0
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2104      	movs	r1, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f002 fb7d 	bl	8010512 <SDIO_GetResponse>
 800de18:	4603      	mov	r3, r0
 800de1a:	0d1a      	lsrs	r2, r3, #20
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de20:	f107 0310 	add.w	r3, r7, #16
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fbe4 	bl	800d5f4 <HAL_SD_GetCardCSD>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de36:	e020      	b.n	800de7a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6819      	ldr	r1, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de40:	041b      	lsls	r3, r3, #16
 800de42:	f04f 0400 	mov.w	r4, #0
 800de46:	461a      	mov	r2, r3
 800de48:	4623      	mov	r3, r4
 800de4a:	4608      	mov	r0, r1
 800de4c:	f002 fc6c 	bl	8010728 <SDMMC_CmdSelDesel>
 800de50:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800de52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <SD_InitCard+0x174>
  {
    return errorstate;
 800de58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5a:	e00e      	b.n	800de7a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681d      	ldr	r5, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	466c      	mov	r4, sp
 800de64:	f103 0210 	add.w	r2, r3, #16
 800de68:	ca07      	ldmia	r2, {r0, r1, r2}
 800de6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de6e:	3304      	adds	r3, #4
 800de70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de72:	4628      	mov	r0, r5
 800de74:	f002 fab0 	bl	80103d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3740      	adds	r7, #64	; 0x40
 800de7e:	46bd      	mov	sp, r7
 800de80:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800de84 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	617b      	str	r3, [r7, #20]
 800de94:	2300      	movs	r3, #0
 800de96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fc66 	bl	801076e <SDMMC_CmdGoIdleState>
 800dea2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <SD_PowerON+0x2a>
  {
    return errorstate;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	e072      	b.n	800df94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f002 fc79 	bl	80107aa <SDMMC_CmdOperCond>
 800deb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00d      	beq.n	800dedc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4618      	mov	r0, r3
 800decc:	f002 fc4f 	bl	801076e <SDMMC_CmdGoIdleState>
 800ded0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	e05b      	b.n	800df94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d137      	bne.n	800df5a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2100      	movs	r1, #0
 800def0:	4618      	mov	r0, r3
 800def2:	f002 fc79 	bl	80107e8 <SDMMC_CmdAppCommand>
 800def6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d02d      	beq.n	800df5a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800defe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df02:	e047      	b.n	800df94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2100      	movs	r1, #0
 800df0a:	4618      	mov	r0, r3
 800df0c:	f002 fc6c 	bl	80107e8 <SDMMC_CmdAppCommand>
 800df10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <SD_PowerON+0x98>
    {
      return errorstate;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	e03b      	b.n	800df94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	491e      	ldr	r1, [pc, #120]	; (800df9c <SD_PowerON+0x118>)
 800df22:	4618      	mov	r0, r3
 800df24:	f002 fc82 	bl	801082c <SDMMC_CmdAppOperCommand>
 800df28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df34:	e02e      	b.n	800df94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2100      	movs	r1, #0
 800df3c:	4618      	mov	r0, r3
 800df3e:	f002 fae8 	bl	8010512 <SDIO_GetResponse>
 800df42:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	0fdb      	lsrs	r3, r3, #31
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d101      	bne.n	800df50 <SD_PowerON+0xcc>
 800df4c:	2301      	movs	r3, #1
 800df4e:	e000      	b.n	800df52 <SD_PowerON+0xce>
 800df50:	2300      	movs	r3, #0
 800df52:	613b      	str	r3, [r7, #16]

    count++;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	3301      	adds	r3, #1
 800df58:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df60:	4293      	cmp	r3, r2
 800df62:	d802      	bhi.n	800df6a <SD_PowerON+0xe6>
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0cc      	beq.n	800df04 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df70:	4293      	cmp	r3, r2
 800df72:	d902      	bls.n	800df7a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800df74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df78:	e00c      	b.n	800df94 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	645a      	str	r2, [r3, #68]	; 0x44
 800df8a:	e002      	b.n	800df92 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	c1100000 	.word	0xc1100000

0800dfa0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dfb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfb4:	e018      	b.n	800dfe8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfbe:	041b      	lsls	r3, r3, #16
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f002 fcf6 	bl	80109b4 <SDMMC_CmdSendStatus>
 800dfc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	e009      	b.n	800dfe8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f002 fa99 	bl	8010512 <SDIO_GetResponse>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	2300      	movs	r3, #0
 800dffe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2100      	movs	r1, #0
 800e006:	4618      	mov	r0, r3
 800e008:	f002 fa83 	bl	8010512 <SDIO_GetResponse>
 800e00c:	4603      	mov	r3, r0
 800e00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e016:	d102      	bne.n	800e01e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e01c:	e02f      	b.n	800e07e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e01e:	f107 030c 	add.w	r3, r7, #12
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f879 	bl	800e11c <SD_FindSCR>
 800e02a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d001      	beq.n	800e036 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	e023      	b.n	800e07e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d01c      	beq.n	800e07a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e048:	041b      	lsls	r3, r3, #16
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f002 fbcb 	bl	80107e8 <SDMMC_CmdAppCommand>
 800e052:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	e00f      	b.n	800e07e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2102      	movs	r1, #2
 800e064:	4618      	mov	r0, r3
 800e066:	f002 fc04 	bl	8010872 <SDMMC_CmdBusWidth>
 800e06a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	e003      	b.n	800e07e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e076:	2300      	movs	r3, #0
 800e078:	e001      	b.n	800e07e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e07a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b086      	sub	sp, #24
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 fa38 	bl	8010512 <SDIO_GetResponse>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0ac:	d102      	bne.n	800e0b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e0ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0b2:	e02f      	b.n	800e114 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e0b4:	f107 030c 	add.w	r3, r7, #12
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f82e 	bl	800e11c <SD_FindSCR>
 800e0c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	e023      	b.n	800e114 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d01c      	beq.n	800e110 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0de:	041b      	lsls	r3, r3, #16
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f002 fb80 	bl	80107e8 <SDMMC_CmdAppCommand>
 800e0e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	e00f      	b.n	800e114 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fbb9 	bl	8010872 <SDMMC_CmdBusWidth>
 800e100:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	e003      	b.n	800e114 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e001      	b.n	800e114 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e114:	4618      	mov	r0, r3
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e11c:	b590      	push	{r4, r7, lr}
 800e11e:	b08f      	sub	sp, #60	; 0x3c
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e126:	f7fb fd63 	bl	8009bf0 <HAL_GetTick>
 800e12a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e12c:	2300      	movs	r3, #0
 800e12e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e130:	2300      	movs	r3, #0
 800e132:	60bb      	str	r3, [r7, #8]
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2108      	movs	r1, #8
 800e142:	4618      	mov	r0, r3
 800e144:	f002 fa24 	bl	8010590 <SDMMC_CmdBlockLength>
 800e148:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	e0a9      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e15c:	041b      	lsls	r3, r3, #16
 800e15e:	4619      	mov	r1, r3
 800e160:	4610      	mov	r0, r2
 800e162:	f002 fb41 	bl	80107e8 <SDMMC_CmdAppCommand>
 800e166:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	e09a      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295
 800e176:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e178:	2308      	movs	r3, #8
 800e17a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e17c:	2330      	movs	r3, #48	; 0x30
 800e17e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e180:	2302      	movs	r3, #2
 800e182:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e184:	2300      	movs	r3, #0
 800e186:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e188:	2301      	movs	r3, #1
 800e18a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f107 0210 	add.w	r2, r7, #16
 800e194:	4611      	mov	r1, r2
 800e196:	4618      	mov	r0, r3
 800e198:	f002 f9ce 	bl	8010538 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f002 fb88 	bl	80108b6 <SDMMC_CmdSendSCR>
 800e1a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d022      	beq.n	800e1f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	e07a      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00e      	beq.n	800e1de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6819      	ldr	r1, [r3, #0]
 800e1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	f107 0208 	add.w	r2, r7, #8
 800e1cc:	18d4      	adds	r4, r2, r3
 800e1ce:	4608      	mov	r0, r1
 800e1d0:	f002 f92d 	bl	801042e <SDIO_ReadFIFO>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	6023      	str	r3, [r4, #0]
      index++;
 800e1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1da:	3301      	adds	r3, #1
 800e1dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e1de:	f7fb fd07 	bl	8009bf0 <HAL_GetTick>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d102      	bne.n	800e1f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e1ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1f2:	e059      	b.n	800e2a8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1fa:	f240 432a 	movw	r3, #1066	; 0x42a
 800e1fe:	4013      	ands	r3, r2
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0d6      	beq.n	800e1b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20a:	f003 0308 	and.w	r3, r3, #8
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2208      	movs	r2, #8
 800e218:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e21a:	2308      	movs	r3, #8
 800e21c:	e044      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	f003 0302 	and.w	r3, r3, #2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d005      	beq.n	800e238 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2202      	movs	r2, #2
 800e232:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e234:	2302      	movs	r3, #2
 800e236:	e037      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d005      	beq.n	800e252 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2220      	movs	r2, #32
 800e24c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e24e:	2320      	movs	r3, #32
 800e250:	e02a      	b.n	800e2a8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f240 523a 	movw	r2, #1338	; 0x53a
 800e25a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	061a      	lsls	r2, r3, #24
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	021b      	lsls	r3, r3, #8
 800e264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e268:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e272:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	0e1b      	lsrs	r3, r3, #24
 800e278:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	601a      	str	r2, [r3, #0]
    scr++;
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	3304      	adds	r3, #4
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	061a      	lsls	r2, r3, #24
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e290:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	0a1b      	lsrs	r3, r3, #8
 800e296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e29a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	0e1b      	lsrs	r3, r3, #24
 800e2a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	373c      	adds	r7, #60	; 0x3c
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd90      	pop	{r4, r7, pc}

0800e2b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d03f      	beq.n	800e34a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	617b      	str	r3, [r7, #20]
 800e2ce:	e033      	b.n	800e338 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f002 f8aa 	bl	801042e <SDIO_ReadFIFO>
 800e2da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	0a1b      	lsrs	r3, r3, #8
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	3b01      	subs	r3, #1
 800e304:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	0c1b      	lsrs	r3, r3, #16
 800e30a:	b2da      	uxtb	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	3301      	adds	r3, #1
 800e314:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	3b01      	subs	r3, #1
 800e31a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	0e1b      	lsrs	r3, r3, #24
 800e320:	b2da      	uxtb	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3301      	adds	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	3b01      	subs	r3, #1
 800e330:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	3301      	adds	r3, #1
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2b07      	cmp	r3, #7
 800e33c:	d9c8      	bls.n	800e2d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e34a:	bf00      	nop
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b086      	sub	sp, #24
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d043      	beq.n	800e3f4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e36c:	2300      	movs	r3, #0
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	e037      	b.n	800e3e2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3301      	adds	r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	3b01      	subs	r3, #1
 800e382:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	021a      	lsls	r2, r3, #8
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	3301      	adds	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	3b01      	subs	r3, #1
 800e39a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	041a      	lsls	r2, r3, #16
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	061a      	lsls	r2, r3, #24
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f107 0208 	add.w	r2, r7, #8
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f002 f836 	bl	8010448 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	617b      	str	r3, [r7, #20]
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b07      	cmp	r3, #7
 800e3e6:	d9c4      	bls.n	800e372 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e3f4:	bf00      	nop
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d101      	bne.n	800e40e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	e056      	b.n	800e4bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d106      	bne.n	800e42e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7f8 fe47 	bl	80070bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2202      	movs	r2, #2
 800e432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e444:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	431a      	orrs	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	431a      	orrs	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	431a      	orrs	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e46a:	431a      	orrs	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	ea42 0103 	orr.w	r1, r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	430a      	orrs	r2, r1
 800e484:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	0c1b      	lsrs	r3, r3, #16
 800e48c:	f003 0104 	and.w	r1, r3, #4
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	430a      	orrs	r2, r1
 800e49a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	69da      	ldr	r2, [r3, #28]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e4aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b088      	sub	sp, #32
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d101      	bne.n	800e4e6 <HAL_SPI_Transmit+0x22>
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	e11e      	b.n	800e724 <HAL_SPI_Transmit+0x260>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4ee:	f7fb fb7f 	bl	8009bf0 <HAL_GetTick>
 800e4f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e4f4:	88fb      	ldrh	r3, [r7, #6]
 800e4f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b01      	cmp	r3, #1
 800e502:	d002      	beq.n	800e50a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e504:	2302      	movs	r3, #2
 800e506:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e508:	e103      	b.n	800e712 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d002      	beq.n	800e516 <HAL_SPI_Transmit+0x52>
 800e510:	88fb      	ldrh	r3, [r7, #6]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d102      	bne.n	800e51c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e51a:	e0fa      	b.n	800e712 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2203      	movs	r2, #3
 800e520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	88fa      	ldrh	r2, [r7, #6]
 800e534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	88fa      	ldrh	r2, [r7, #6]
 800e53a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e562:	d107      	bne.n	800e574 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e572:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57e:	2b40      	cmp	r3, #64	; 0x40
 800e580:	d007      	beq.n	800e592 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e59a:	d14b      	bne.n	800e634 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <HAL_SPI_Transmit+0xe6>
 800e5a4:	8afb      	ldrh	r3, [r7, #22]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d13e      	bne.n	800e628 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ae:	881a      	ldrh	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ba:	1c9a      	adds	r2, r3, #2
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e5ce:	e02b      	b.n	800e628 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	f003 0302 	and.w	r3, r3, #2
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d112      	bne.n	800e604 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e2:	881a      	ldrh	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ee:	1c9a      	adds	r2, r3, #2
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	86da      	strh	r2, [r3, #54]	; 0x36
 800e602:	e011      	b.n	800e628 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e604:	f7fb faf4 	bl	8009bf0 <HAL_GetTick>
 800e608:	4602      	mov	r2, r0
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	429a      	cmp	r2, r3
 800e612:	d803      	bhi.n	800e61c <HAL_SPI_Transmit+0x158>
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61a:	d102      	bne.n	800e622 <HAL_SPI_Transmit+0x15e>
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d102      	bne.n	800e628 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e626:	e074      	b.n	800e712 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1ce      	bne.n	800e5d0 <HAL_SPI_Transmit+0x10c>
 800e632:	e04c      	b.n	800e6ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <HAL_SPI_Transmit+0x17e>
 800e63c:	8afb      	ldrh	r3, [r7, #22]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d140      	bne.n	800e6c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	330c      	adds	r3, #12
 800e64c:	7812      	ldrb	r2, [r2, #0]
 800e64e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e654:	1c5a      	adds	r2, r3, #1
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b01      	subs	r3, #1
 800e662:	b29a      	uxth	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e668:	e02c      	b.n	800e6c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f003 0302 	and.w	r3, r3, #2
 800e674:	2b02      	cmp	r3, #2
 800e676:	d113      	bne.n	800e6a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	330c      	adds	r3, #12
 800e682:	7812      	ldrb	r2, [r2, #0]
 800e684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e694:	b29b      	uxth	r3, r3
 800e696:	3b01      	subs	r3, #1
 800e698:	b29a      	uxth	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e69e:	e011      	b.n	800e6c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6a0:	f7fb faa6 	bl	8009bf0 <HAL_GetTick>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d803      	bhi.n	800e6b8 <HAL_SPI_Transmit+0x1f4>
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b6:	d102      	bne.n	800e6be <HAL_SPI_Transmit+0x1fa>
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6c2:	e026      	b.n	800e712 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1cd      	bne.n	800e66a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6ce:	69ba      	ldr	r2, [r7, #24]
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 fba4 	bl	800ee20 <SPI_EndRxTxTransaction>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10a      	bne.n	800e702 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	613b      	str	r3, [r7, #16]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	613b      	str	r3, [r7, #16]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	613b      	str	r3, [r7, #16]
 800e700:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	77fb      	strb	r3, [r7, #31]
 800e70e:	e000      	b.n	800e712 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e710:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e722:	7ffb      	ldrb	r3, [r7, #31]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3720      	adds	r7, #32
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b088      	sub	sp, #32
 800e730:	af02      	add	r7, sp, #8
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	603b      	str	r3, [r7, #0]
 800e738:	4613      	mov	r3, r2
 800e73a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e748:	d112      	bne.n	800e770 <HAL_SPI_Receive+0x44>
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10e      	bne.n	800e770 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2204      	movs	r2, #4
 800e756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e75a:	88fa      	ldrh	r2, [r7, #6]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4613      	mov	r3, r2
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	68b9      	ldr	r1, [r7, #8]
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 f8e9 	bl	800e93e <HAL_SPI_TransmitReceive>
 800e76c:	4603      	mov	r3, r0
 800e76e:	e0e2      	b.n	800e936 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e776:	2b01      	cmp	r3, #1
 800e778:	d101      	bne.n	800e77e <HAL_SPI_Receive+0x52>
 800e77a:	2302      	movs	r3, #2
 800e77c:	e0db      	b.n	800e936 <HAL_SPI_Receive+0x20a>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e786:	f7fb fa33 	bl	8009bf0 <HAL_GetTick>
 800e78a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b01      	cmp	r3, #1
 800e796:	d002      	beq.n	800e79e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e798:	2302      	movs	r3, #2
 800e79a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e79c:	e0c2      	b.n	800e924 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <HAL_SPI_Receive+0x7e>
 800e7a4:	88fb      	ldrh	r3, [r7, #6]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d102      	bne.n	800e7b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e7ae:	e0b9      	b.n	800e924 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2204      	movs	r2, #4
 800e7b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	88fa      	ldrh	r2, [r7, #6]
 800e7c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	88fa      	ldrh	r2, [r7, #6]
 800e7ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7f6:	d107      	bne.n	800e808 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e806:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e812:	2b40      	cmp	r3, #64	; 0x40
 800e814:	d007      	beq.n	800e826 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e824:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d162      	bne.n	800e8f4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e82e:	e02e      	b.n	800e88e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d115      	bne.n	800e86a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f103 020c 	add.w	r2, r3, #12
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84a:	7812      	ldrb	r2, [r2, #0]
 800e84c:	b2d2      	uxtb	r2, r2
 800e84e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e868:	e011      	b.n	800e88e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86a:	f7fb f9c1 	bl	8009bf0 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d803      	bhi.n	800e882 <HAL_SPI_Receive+0x156>
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e880:	d102      	bne.n	800e888 <HAL_SPI_Receive+0x15c>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e888:	2303      	movs	r3, #3
 800e88a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e88c:	e04a      	b.n	800e924 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e892:	b29b      	uxth	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1cb      	bne.n	800e830 <HAL_SPI_Receive+0x104>
 800e898:	e031      	b.n	800e8fe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	689b      	ldr	r3, [r3, #8]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d113      	bne.n	800e8d0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68da      	ldr	r2, [r3, #12]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b2:	b292      	uxth	r2, r2
 800e8b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ba:	1c9a      	adds	r2, r3, #2
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e8ce:	e011      	b.n	800e8f4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8d0:	f7fb f98e 	bl	8009bf0 <HAL_GetTick>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d803      	bhi.n	800e8e8 <HAL_SPI_Receive+0x1bc>
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e6:	d102      	bne.n	800e8ee <HAL_SPI_Receive+0x1c2>
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d102      	bne.n	800e8f4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e8f2:	e017      	b.n	800e924 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d1cd      	bne.n	800e89a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e8fe:	693a      	ldr	r2, [r7, #16]
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 fa27 	bl	800ed56 <SPI_EndRxTransaction>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2220      	movs	r2, #32
 800e912:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	75fb      	strb	r3, [r7, #23]
 800e920:	e000      	b.n	800e924 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b08c      	sub	sp, #48	; 0x30
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	60b9      	str	r1, [r7, #8]
 800e948:	607a      	str	r2, [r7, #4]
 800e94a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e94c:	2301      	movs	r3, #1
 800e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e950:	2300      	movs	r3, #0
 800e952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d101      	bne.n	800e964 <HAL_SPI_TransmitReceive+0x26>
 800e960:	2302      	movs	r3, #2
 800e962:	e18a      	b.n	800ec7a <HAL_SPI_TransmitReceive+0x33c>
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e96c:	f7fb f940 	bl	8009bf0 <HAL_GetTick>
 800e970:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d00f      	beq.n	800e9ae <HAL_SPI_TransmitReceive+0x70>
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e994:	d107      	bne.n	800e9a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d103      	bne.n	800e9a6 <HAL_SPI_TransmitReceive+0x68>
 800e99e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	d003      	beq.n	800e9ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e9ac:	e15b      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d005      	beq.n	800e9c0 <HAL_SPI_TransmitReceive+0x82>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <HAL_SPI_TransmitReceive+0x82>
 800e9ba:	887b      	ldrh	r3, [r7, #2]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d103      	bne.n	800e9c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e9c6:	e14e      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	d003      	beq.n	800e9dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2205      	movs	r2, #5
 800e9d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	887a      	ldrh	r2, [r7, #2]
 800e9ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	887a      	ldrh	r2, [r7, #2]
 800e9f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	887a      	ldrh	r2, [r7, #2]
 800e9fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	887a      	ldrh	r2, [r7, #2]
 800ea04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea1c:	2b40      	cmp	r3, #64	; 0x40
 800ea1e:	d007      	beq.n	800ea30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea38:	d178      	bne.n	800eb2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x10a>
 800ea42:	8b7b      	ldrh	r3, [r7, #26]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d166      	bne.n	800eb16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea4c:	881a      	ldrh	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea58:	1c9a      	adds	r2, r3, #2
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea6c:	e053      	b.n	800eb16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f003 0302 	and.w	r3, r3, #2
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d11b      	bne.n	800eab4 <HAL_SPI_TransmitReceive+0x176>
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d016      	beq.n	800eab4 <HAL_SPI_TransmitReceive+0x176>
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d113      	bne.n	800eab4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea90:	881a      	ldrh	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea9c:	1c9a      	adds	r2, r3, #2
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eab0:	2300      	movs	r3, #0
 800eab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d119      	bne.n	800eaf6 <HAL_SPI_TransmitReceive+0x1b8>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d014      	beq.n	800eaf6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68da      	ldr	r2, [r3, #12]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead6:	b292      	uxth	r2, r2
 800ead8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eade:	1c9a      	adds	r2, r3, #2
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	3b01      	subs	r3, #1
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800eaf6:	f7fb f87b 	bl	8009bf0 <HAL_GetTick>
 800eafa:	4602      	mov	r2, r0
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d807      	bhi.n	800eb16 <HAL_SPI_TransmitReceive+0x1d8>
 800eb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0c:	d003      	beq.n	800eb16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eb14:	e0a7      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1a6      	bne.n	800ea6e <HAL_SPI_TransmitReceive+0x130>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1a1      	bne.n	800ea6e <HAL_SPI_TransmitReceive+0x130>
 800eb2a:	e07c      	b.n	800ec26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <HAL_SPI_TransmitReceive+0x1fc>
 800eb34:	8b7b      	ldrh	r3, [r7, #26]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d16b      	bne.n	800ec12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	330c      	adds	r3, #12
 800eb44:	7812      	ldrb	r2, [r2, #0]
 800eb46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb60:	e057      	b.n	800ec12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d11c      	bne.n	800ebaa <HAL_SPI_TransmitReceive+0x26c>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d017      	beq.n	800ebaa <HAL_SPI_TransmitReceive+0x26c>
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d114      	bne.n	800ebaa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	330c      	adds	r3, #12
 800eb8a:	7812      	ldrb	r2, [r2, #0]
 800eb8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eba6:	2300      	movs	r3, #0
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	f003 0301 	and.w	r3, r3, #1
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d119      	bne.n	800ebec <HAL_SPI_TransmitReceive+0x2ae>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d014      	beq.n	800ebec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68da      	ldr	r2, [r3, #12]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebcc:	b2d2      	uxtb	r2, r2
 800ebce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ebec:	f7fb f800 	bl	8009bf0 <HAL_GetTick>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d803      	bhi.n	800ec04 <HAL_SPI_TransmitReceive+0x2c6>
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec02:	d102      	bne.n	800ec0a <HAL_SPI_TransmitReceive+0x2cc>
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d103      	bne.n	800ec12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec10:	e029      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1a2      	bne.n	800eb62 <HAL_SPI_TransmitReceive+0x224>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d19d      	bne.n	800eb62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f000 f8f8 	bl	800ee20 <SPI_EndRxTxTransaction>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d006      	beq.n	800ec44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2220      	movs	r2, #32
 800ec40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ec42:	e010      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10b      	bne.n	800ec64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	617b      	str	r3, [r7, #20]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	617b      	str	r3, [r7, #20]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	e000      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ec64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3730      	adds	r7, #48	; 0x30
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	603b      	str	r3, [r7, #0]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec92:	e04c      	b.n	800ed2e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9a:	d048      	beq.n	800ed2e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ec9c:	f7fa ffa8 	bl	8009bf0 <HAL_GetTick>
 800eca0:	4602      	mov	r2, r0
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d902      	bls.n	800ecb2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d13d      	bne.n	800ed2e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	685a      	ldr	r2, [r3, #4]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ecc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecca:	d111      	bne.n	800ecf0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecd4:	d004      	beq.n	800ece0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecde:	d107      	bne.n	800ecf0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecf8:	d10f      	bne.n	800ed1a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed08:	601a      	str	r2, [r3, #0]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e00f      	b.n	800ed4e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	689a      	ldr	r2, [r3, #8]
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	4013      	ands	r3, r2
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	bf0c      	ite	eq
 800ed3e:	2301      	moveq	r3, #1
 800ed40:	2300      	movne	r3, #0
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	461a      	mov	r2, r3
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d1a3      	bne.n	800ec94 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b086      	sub	sp, #24
 800ed5a:	af02      	add	r7, sp, #8
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	60b9      	str	r1, [r7, #8]
 800ed60:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed6a:	d111      	bne.n	800ed90 <SPI_EndRxTransaction+0x3a>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed74:	d004      	beq.n	800ed80 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed7e:	d107      	bne.n	800ed90 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed8e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed98:	d12a      	bne.n	800edf0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eda2:	d012      	beq.n	800edca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2200      	movs	r2, #0
 800edac:	2180      	movs	r1, #128	; 0x80
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f7ff ff67 	bl	800ec82 <SPI_WaitFlagStateUntilTimeout>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d02d      	beq.n	800ee16 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edbe:	f043 0220 	orr.w	r2, r3, #32
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800edc6:	2303      	movs	r3, #3
 800edc8:	e026      	b.n	800ee18 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2200      	movs	r2, #0
 800edd2:	2101      	movs	r1, #1
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff ff54 	bl	800ec82 <SPI_WaitFlagStateUntilTimeout>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01a      	beq.n	800ee16 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ede4:	f043 0220 	orr.w	r2, r3, #32
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800edec:	2303      	movs	r3, #3
 800edee:	e013      	b.n	800ee18 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2200      	movs	r2, #0
 800edf8:	2101      	movs	r1, #1
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff ff41 	bl	800ec82 <SPI_WaitFlagStateUntilTimeout>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d007      	beq.n	800ee16 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee0a:	f043 0220 	orr.w	r2, r3, #32
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee12:	2303      	movs	r3, #3
 800ee14:	e000      	b.n	800ee18 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ee2c:	4b1b      	ldr	r3, [pc, #108]	; (800ee9c <SPI_EndRxTxTransaction+0x7c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a1b      	ldr	r2, [pc, #108]	; (800eea0 <SPI_EndRxTxTransaction+0x80>)
 800ee32:	fba2 2303 	umull	r2, r3, r2, r3
 800ee36:	0d5b      	lsrs	r3, r3, #21
 800ee38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee3c:	fb02 f303 	mul.w	r3, r2, r3
 800ee40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee4a:	d112      	bne.n	800ee72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2200      	movs	r2, #0
 800ee54:	2180      	movs	r1, #128	; 0x80
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff ff13 	bl	800ec82 <SPI_WaitFlagStateUntilTimeout>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d016      	beq.n	800ee90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee66:	f043 0220 	orr.w	r2, r3, #32
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	e00f      	b.n	800ee92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00a      	beq.n	800ee8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee88:	2b80      	cmp	r3, #128	; 0x80
 800ee8a:	d0f2      	beq.n	800ee72 <SPI_EndRxTxTransaction+0x52>
 800ee8c:	e000      	b.n	800ee90 <SPI_EndRxTxTransaction+0x70>
        break;
 800ee8e:	bf00      	nop
  }

  return HAL_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000000 	.word	0x20000000
 800eea0:	165e9f81 	.word	0x165e9f81

0800eea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d101      	bne.n	800eeb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e01d      	b.n	800eef2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7f8 f9b2 	bl	8007234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	3304      	adds	r3, #4
 800eee0:	4619      	mov	r1, r3
 800eee2:	4610      	mov	r0, r2
 800eee4:	f000 fb56 	bl	800f594 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eefa:	b480      	push	{r7}
 800eefc:	b085      	sub	sp, #20
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f042 0201 	orr.w	r2, r2, #1
 800ef10:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	f003 0307 	and.w	r3, r3, #7
 800ef1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b06      	cmp	r3, #6
 800ef22:	d007      	beq.n	800ef34 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f042 0201 	orr.w	r2, r2, #1
 800ef32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b082      	sub	sp, #8
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef50:	2301      	movs	r3, #1
 800ef52:	e01d      	b.n	800ef90 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d106      	bne.n	800ef6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7f8 f8ef 	bl	800714c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2202      	movs	r2, #2
 800ef72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4610      	mov	r0, r2
 800ef82:	f000 fb07 	bl	800f594 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2201      	movs	r2, #1
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fd42 	bl	800fa34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a15      	ldr	r2, [pc, #84]	; (800f00c <HAL_TIM_PWM_Start+0x74>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d004      	beq.n	800efc4 <HAL_TIM_PWM_Start+0x2c>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4a14      	ldr	r2, [pc, #80]	; (800f010 <HAL_TIM_PWM_Start+0x78>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d101      	bne.n	800efc8 <HAL_TIM_PWM_Start+0x30>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e000      	b.n	800efca <HAL_TIM_PWM_Start+0x32>
 800efc8:	2300      	movs	r3, #0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d007      	beq.n	800efde <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	f003 0307 	and.w	r3, r3, #7
 800efe8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b06      	cmp	r3, #6
 800efee:	d007      	beq.n	800f000 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f042 0201 	orr.w	r2, r2, #1
 800effe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f000:	2300      	movs	r3, #0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	40010000 	.word	0x40010000
 800f010:	40010400 	.word	0x40010400

0800f014 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f024:	2301      	movs	r3, #1
 800f026:	e083      	b.n	800f130 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7f8 f989 	bl	8007354 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2202      	movs	r2, #2
 800f046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	6812      	ldr	r2, [r2, #0]
 800f054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f058:	f023 0307 	bic.w	r3, r3, #7
 800f05c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3304      	adds	r3, #4
 800f066:	4619      	mov	r1, r3
 800f068:	4610      	mov	r0, r2
 800f06a:	f000 fa93 	bl	800f594 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	699b      	ldr	r3, [r3, #24]
 800f07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	6a1b      	ldr	r3, [r3, #32]
 800f084:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f096:	f023 0303 	bic.w	r3, r3, #3
 800f09a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	021b      	lsls	r3, r3, #8
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f0b4:	f023 030c 	bic.w	r3, r3, #12
 800f0b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f0c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f0c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	68da      	ldr	r2, [r3, #12]
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	021b      	lsls	r3, r3, #8
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	693a      	ldr	r2, [r7, #16]
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	691b      	ldr	r3, [r3, #16]
 800f0dc:	011a      	lsls	r2, r3, #4
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	031b      	lsls	r3, r3, #12
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f0f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f0fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	695b      	ldr	r3, [r3, #20]
 800f104:	011b      	lsls	r3, r3, #4
 800f106:	4313      	orrs	r3, r2
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <HAL_TIM_Encoder_Start+0x16>
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d008      	beq.n	800f15e <HAL_TIM_Encoder_Start+0x26>
 800f14c:	e00f      	b.n	800f16e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2201      	movs	r2, #1
 800f154:	2100      	movs	r1, #0
 800f156:	4618      	mov	r0, r3
 800f158:	f000 fc6c 	bl	800fa34 <TIM_CCxChannelCmd>
      break;
 800f15c:	e016      	b.n	800f18c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2201      	movs	r2, #1
 800f164:	2104      	movs	r1, #4
 800f166:	4618      	mov	r0, r3
 800f168:	f000 fc64 	bl	800fa34 <TIM_CCxChannelCmd>
      break;
 800f16c:	e00e      	b.n	800f18c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2201      	movs	r2, #1
 800f174:	2100      	movs	r1, #0
 800f176:	4618      	mov	r0, r3
 800f178:	f000 fc5c 	bl	800fa34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2201      	movs	r2, #1
 800f182:	2104      	movs	r1, #4
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fc55 	bl	800fa34 <TIM_CCxChannelCmd>
      break;
 800f18a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0201 	orr.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b082      	sub	sp, #8
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	f003 0302 	and.w	r3, r3, #2
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d122      	bne.n	800f202 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	f003 0302 	and.w	r3, r3, #2
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d11b      	bne.n	800f202 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f06f 0202 	mvn.w	r2, #2
 800f1d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	699b      	ldr	r3, [r3, #24]
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 f9b5 	bl	800f558 <HAL_TIM_IC_CaptureCallback>
 800f1ee:	e005      	b.n	800f1fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 f9a7 	bl	800f544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f9b8 	bl	800f56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d122      	bne.n	800f256 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d11b      	bne.n	800f256 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f06f 0204 	mvn.w	r2, #4
 800f226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2202      	movs	r2, #2
 800f22c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	699b      	ldr	r3, [r3, #24]
 800f234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d003      	beq.n	800f244 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f98b 	bl	800f558 <HAL_TIM_IC_CaptureCallback>
 800f242:	e005      	b.n	800f250 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 f97d 	bl	800f544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f98e 	bl	800f56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	f003 0308 	and.w	r3, r3, #8
 800f260:	2b08      	cmp	r3, #8
 800f262:	d122      	bne.n	800f2aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	f003 0308 	and.w	r3, r3, #8
 800f26e:	2b08      	cmp	r3, #8
 800f270:	d11b      	bne.n	800f2aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f06f 0208 	mvn.w	r2, #8
 800f27a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2204      	movs	r2, #4
 800f280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	69db      	ldr	r3, [r3, #28]
 800f288:	f003 0303 	and.w	r3, r3, #3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d003      	beq.n	800f298 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f961 	bl	800f558 <HAL_TIM_IC_CaptureCallback>
 800f296:	e005      	b.n	800f2a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 f953 	bl	800f544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f964 	bl	800f56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	f003 0310 	and.w	r3, r3, #16
 800f2b4:	2b10      	cmp	r3, #16
 800f2b6:	d122      	bne.n	800f2fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	f003 0310 	and.w	r3, r3, #16
 800f2c2:	2b10      	cmp	r3, #16
 800f2c4:	d11b      	bne.n	800f2fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f06f 0210 	mvn.w	r2, #16
 800f2ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2208      	movs	r2, #8
 800f2d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69db      	ldr	r3, [r3, #28]
 800f2dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d003      	beq.n	800f2ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f937 	bl	800f558 <HAL_TIM_IC_CaptureCallback>
 800f2ea:	e005      	b.n	800f2f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f929 	bl	800f544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f93a 	bl	800f56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d10e      	bne.n	800f32a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	2b01      	cmp	r3, #1
 800f318:	d107      	bne.n	800f32a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f06f 0201 	mvn.w	r2, #1
 800f322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7f6 fced 	bl	8005d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	691b      	ldr	r3, [r3, #16]
 800f330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f334:	2b80      	cmp	r3, #128	; 0x80
 800f336:	d10e      	bne.n	800f356 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f342:	2b80      	cmp	r3, #128	; 0x80
 800f344:	d107      	bne.n	800f356 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fc6d 	bl	800fc30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	691b      	ldr	r3, [r3, #16]
 800f35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f360:	2b40      	cmp	r3, #64	; 0x40
 800f362:	d10e      	bne.n	800f382 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f36e:	2b40      	cmp	r3, #64	; 0x40
 800f370:	d107      	bne.n	800f382 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f8ff 	bl	800f580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	f003 0320 	and.w	r3, r3, #32
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d10e      	bne.n	800f3ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	f003 0320 	and.w	r3, r3, #32
 800f39a:	2b20      	cmp	r3, #32
 800f39c:	d107      	bne.n	800f3ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f06f 0220 	mvn.w	r2, #32
 800f3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fc37 	bl	800fc1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3ae:	bf00      	nop
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
	...

0800f3b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d101      	bne.n	800f3d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f3ce:	2302      	movs	r3, #2
 800f3d0:	e0b4      	b.n	800f53c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2202      	movs	r2, #2
 800f3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b0c      	cmp	r3, #12
 800f3e6:	f200 809f 	bhi.w	800f528 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f3ea:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f425 	.word	0x0800f425
 800f3f4:	0800f529 	.word	0x0800f529
 800f3f8:	0800f529 	.word	0x0800f529
 800f3fc:	0800f529 	.word	0x0800f529
 800f400:	0800f465 	.word	0x0800f465
 800f404:	0800f529 	.word	0x0800f529
 800f408:	0800f529 	.word	0x0800f529
 800f40c:	0800f529 	.word	0x0800f529
 800f410:	0800f4a7 	.word	0x0800f4a7
 800f414:	0800f529 	.word	0x0800f529
 800f418:	0800f529 	.word	0x0800f529
 800f41c:	0800f529 	.word	0x0800f529
 800f420:	0800f4e7 	.word	0x0800f4e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68b9      	ldr	r1, [r7, #8]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f952 	bl	800f6d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	699a      	ldr	r2, [r3, #24]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f042 0208 	orr.w	r2, r2, #8
 800f43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	699a      	ldr	r2, [r3, #24]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f022 0204 	bic.w	r2, r2, #4
 800f44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6999      	ldr	r1, [r3, #24]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	691a      	ldr	r2, [r3, #16]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	619a      	str	r2, [r3, #24]
      break;
 800f462:	e062      	b.n	800f52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68b9      	ldr	r1, [r7, #8]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f000 f9a2 	bl	800f7b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	699a      	ldr	r2, [r3, #24]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f47e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	699a      	ldr	r2, [r3, #24]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f48e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	6999      	ldr	r1, [r3, #24]
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	021a      	lsls	r2, r3, #8
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	619a      	str	r2, [r3, #24]
      break;
 800f4a4:	e041      	b.n	800f52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f000 f9f7 	bl	800f8a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	69da      	ldr	r2, [r3, #28]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f042 0208 	orr.w	r2, r2, #8
 800f4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	69da      	ldr	r2, [r3, #28]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0204 	bic.w	r2, r2, #4
 800f4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	69d9      	ldr	r1, [r3, #28]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	430a      	orrs	r2, r1
 800f4e2:	61da      	str	r2, [r3, #28]
      break;
 800f4e4:	e021      	b.n	800f52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 fa4b 	bl	800f988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	69da      	ldr	r2, [r3, #28]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	69da      	ldr	r2, [r3, #28]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	69d9      	ldr	r1, [r3, #28]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	021a      	lsls	r2, r3, #8
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	430a      	orrs	r2, r1
 800f524:	61da      	str	r2, [r3, #28]
      break;
 800f526:	e000      	b.n	800f52a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f528:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f54c:	bf00      	nop
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a40      	ldr	r2, [pc, #256]	; (800f6a8 <TIM_Base_SetConfig+0x114>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d013      	beq.n	800f5d4 <TIM_Base_SetConfig+0x40>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5b2:	d00f      	beq.n	800f5d4 <TIM_Base_SetConfig+0x40>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a3d      	ldr	r2, [pc, #244]	; (800f6ac <TIM_Base_SetConfig+0x118>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d00b      	beq.n	800f5d4 <TIM_Base_SetConfig+0x40>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a3c      	ldr	r2, [pc, #240]	; (800f6b0 <TIM_Base_SetConfig+0x11c>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d007      	beq.n	800f5d4 <TIM_Base_SetConfig+0x40>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a3b      	ldr	r2, [pc, #236]	; (800f6b4 <TIM_Base_SetConfig+0x120>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d003      	beq.n	800f5d4 <TIM_Base_SetConfig+0x40>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a3a      	ldr	r2, [pc, #232]	; (800f6b8 <TIM_Base_SetConfig+0x124>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d108      	bne.n	800f5e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a2f      	ldr	r2, [pc, #188]	; (800f6a8 <TIM_Base_SetConfig+0x114>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d02b      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5f4:	d027      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a2c      	ldr	r2, [pc, #176]	; (800f6ac <TIM_Base_SetConfig+0x118>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d023      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a2b      	ldr	r2, [pc, #172]	; (800f6b0 <TIM_Base_SetConfig+0x11c>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d01f      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a2a      	ldr	r2, [pc, #168]	; (800f6b4 <TIM_Base_SetConfig+0x120>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d01b      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a29      	ldr	r2, [pc, #164]	; (800f6b8 <TIM_Base_SetConfig+0x124>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d017      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a28      	ldr	r2, [pc, #160]	; (800f6bc <TIM_Base_SetConfig+0x128>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d013      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a27      	ldr	r2, [pc, #156]	; (800f6c0 <TIM_Base_SetConfig+0x12c>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d00f      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a26      	ldr	r2, [pc, #152]	; (800f6c4 <TIM_Base_SetConfig+0x130>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d00b      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a25      	ldr	r2, [pc, #148]	; (800f6c8 <TIM_Base_SetConfig+0x134>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d007      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4a24      	ldr	r2, [pc, #144]	; (800f6cc <TIM_Base_SetConfig+0x138>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d003      	beq.n	800f646 <TIM_Base_SetConfig+0xb2>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a23      	ldr	r2, [pc, #140]	; (800f6d0 <TIM_Base_SetConfig+0x13c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d108      	bne.n	800f658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	4313      	orrs	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	695b      	ldr	r3, [r3, #20]
 800f662:	4313      	orrs	r3, r2
 800f664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	689a      	ldr	r2, [r3, #8]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a0a      	ldr	r2, [pc, #40]	; (800f6a8 <TIM_Base_SetConfig+0x114>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d003      	beq.n	800f68c <TIM_Base_SetConfig+0xf8>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a0c      	ldr	r2, [pc, #48]	; (800f6b8 <TIM_Base_SetConfig+0x124>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d103      	bne.n	800f694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	691a      	ldr	r2, [r3, #16]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	615a      	str	r2, [r3, #20]
}
 800f69a:	bf00      	nop
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	40010000 	.word	0x40010000
 800f6ac:	40000400 	.word	0x40000400
 800f6b0:	40000800 	.word	0x40000800
 800f6b4:	40000c00 	.word	0x40000c00
 800f6b8:	40010400 	.word	0x40010400
 800f6bc:	40014000 	.word	0x40014000
 800f6c0:	40014400 	.word	0x40014400
 800f6c4:	40014800 	.word	0x40014800
 800f6c8:	40001800 	.word	0x40001800
 800f6cc:	40001c00 	.word	0x40001c00
 800f6d0:	40002000 	.word	0x40002000

0800f6d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	f023 0201 	bic.w	r2, r3, #1
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f023 0303 	bic.w	r3, r3, #3
 800f70a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4313      	orrs	r3, r2
 800f714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f023 0302 	bic.w	r3, r3, #2
 800f71c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	4313      	orrs	r3, r2
 800f726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a20      	ldr	r2, [pc, #128]	; (800f7ac <TIM_OC1_SetConfig+0xd8>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d003      	beq.n	800f738 <TIM_OC1_SetConfig+0x64>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a1f      	ldr	r2, [pc, #124]	; (800f7b0 <TIM_OC1_SetConfig+0xdc>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d10c      	bne.n	800f752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	f023 0308 	bic.w	r3, r3, #8
 800f73e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	4313      	orrs	r3, r2
 800f748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	f023 0304 	bic.w	r3, r3, #4
 800f750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a15      	ldr	r2, [pc, #84]	; (800f7ac <TIM_OC1_SetConfig+0xd8>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d003      	beq.n	800f762 <TIM_OC1_SetConfig+0x8e>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a14      	ldr	r2, [pc, #80]	; (800f7b0 <TIM_OC1_SetConfig+0xdc>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d111      	bne.n	800f786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	4313      	orrs	r3, r2
 800f784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	621a      	str	r2, [r3, #32]
}
 800f7a0:	bf00      	nop
 800f7a2:	371c      	adds	r7, #28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	40010000 	.word	0x40010000
 800f7b0:	40010400 	.word	0x40010400

0800f7b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b087      	sub	sp, #28
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a1b      	ldr	r3, [r3, #32]
 800f7c2:	f023 0210 	bic.w	r2, r3, #16
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	021b      	lsls	r3, r3, #8
 800f7f2:	68fa      	ldr	r2, [r7, #12]
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f023 0320 	bic.w	r3, r3, #32
 800f7fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	4313      	orrs	r3, r2
 800f80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a22      	ldr	r2, [pc, #136]	; (800f898 <TIM_OC2_SetConfig+0xe4>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d003      	beq.n	800f81c <TIM_OC2_SetConfig+0x68>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a21      	ldr	r2, [pc, #132]	; (800f89c <TIM_OC2_SetConfig+0xe8>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d10d      	bne.n	800f838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	011b      	lsls	r3, r3, #4
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a17      	ldr	r2, [pc, #92]	; (800f898 <TIM_OC2_SetConfig+0xe4>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d003      	beq.n	800f848 <TIM_OC2_SetConfig+0x94>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a16      	ldr	r2, [pc, #88]	; (800f89c <TIM_OC2_SetConfig+0xe8>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d113      	bne.n	800f870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f84e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	4313      	orrs	r3, r2
 800f862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	621a      	str	r2, [r3, #32]
}
 800f88a:	bf00      	nop
 800f88c:	371c      	adds	r7, #28
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	40010000 	.word	0x40010000
 800f89c:	40010400 	.word	0x40010400

0800f8a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b087      	sub	sp, #28
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	69db      	ldr	r3, [r3, #28]
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f023 0303 	bic.w	r3, r3, #3
 800f8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	021b      	lsls	r3, r3, #8
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a21      	ldr	r2, [pc, #132]	; (800f980 <TIM_OC3_SetConfig+0xe0>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d003      	beq.n	800f906 <TIM_OC3_SetConfig+0x66>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a20      	ldr	r2, [pc, #128]	; (800f984 <TIM_OC3_SetConfig+0xe4>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d10d      	bne.n	800f922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f90c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	021b      	lsls	r3, r3, #8
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	4313      	orrs	r3, r2
 800f918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4a16      	ldr	r2, [pc, #88]	; (800f980 <TIM_OC3_SetConfig+0xe0>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d003      	beq.n	800f932 <TIM_OC3_SetConfig+0x92>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4a15      	ldr	r2, [pc, #84]	; (800f984 <TIM_OC3_SetConfig+0xe4>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d113      	bne.n	800f95a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	011b      	lsls	r3, r3, #4
 800f948:	693a      	ldr	r2, [r7, #16]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	011b      	lsls	r3, r3, #4
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	4313      	orrs	r3, r2
 800f958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	693a      	ldr	r2, [r7, #16]
 800f95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	697a      	ldr	r2, [r7, #20]
 800f972:	621a      	str	r2, [r3, #32]
}
 800f974:	bf00      	nop
 800f976:	371c      	adds	r7, #28
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr
 800f980:	40010000 	.word	0x40010000
 800f984:	40010400 	.word	0x40010400

0800f988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f988:	b480      	push	{r7}
 800f98a:	b087      	sub	sp, #28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	69db      	ldr	r3, [r3, #28]
 800f9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	021b      	lsls	r3, r3, #8
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	031b      	lsls	r3, r3, #12
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a12      	ldr	r2, [pc, #72]	; (800fa2c <TIM_OC4_SetConfig+0xa4>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d003      	beq.n	800f9f0 <TIM_OC4_SetConfig+0x68>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a11      	ldr	r2, [pc, #68]	; (800fa30 <TIM_OC4_SetConfig+0xa8>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d109      	bne.n	800fa04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	695b      	ldr	r3, [r3, #20]
 800f9fc:	019b      	lsls	r3, r3, #6
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	621a      	str	r2, [r3, #32]
}
 800fa1e:	bf00      	nop
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40010400 	.word	0x40010400

0800fa34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	f003 031f 	and.w	r3, r3, #31
 800fa46:	2201      	movs	r2, #1
 800fa48:	fa02 f303 	lsl.w	r3, r2, r3
 800fa4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6a1a      	ldr	r2, [r3, #32]
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	43db      	mvns	r3, r3
 800fa56:	401a      	ands	r2, r3
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6a1a      	ldr	r2, [r3, #32]
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	f003 031f 	and.w	r3, r3, #31
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	fa01 f303 	lsl.w	r3, r1, r3
 800fa6c:	431a      	orrs	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	621a      	str	r2, [r3, #32]
}
 800fa72:	bf00      	nop
 800fa74:	371c      	adds	r7, #28
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
	...

0800fa80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d101      	bne.n	800fa98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa94:	2302      	movs	r3, #2
 800fa96:	e05a      	b.n	800fb4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2202      	movs	r2, #2
 800faa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fabe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a21      	ldr	r2, [pc, #132]	; (800fb5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d022      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fae4:	d01d      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a1d      	ldr	r2, [pc, #116]	; (800fb60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d018      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a1b      	ldr	r2, [pc, #108]	; (800fb64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d013      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a1a      	ldr	r2, [pc, #104]	; (800fb68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d00e      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a18      	ldr	r2, [pc, #96]	; (800fb6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d009      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a17      	ldr	r2, [pc, #92]	; (800fb70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d004      	beq.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a15      	ldr	r2, [pc, #84]	; (800fb74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d10c      	bne.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	40010000 	.word	0x40010000
 800fb60:	40000400 	.word	0x40000400
 800fb64:	40000800 	.word	0x40000800
 800fb68:	40000c00 	.word	0x40000c00
 800fb6c:	40010400 	.word	0x40010400
 800fb70:	40014000 	.word	0x40014000
 800fb74:	40001800 	.word	0x40001800

0800fb78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb82:	2300      	movs	r3, #0
 800fb84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d101      	bne.n	800fb94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb90:	2302      	movs	r3, #2
 800fb92:	e03d      	b.n	800fc10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	691b      	ldr	r3, [r3, #16]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3714      	adds	r7, #20
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc52:	2301      	movs	r3, #1
 800fc54:	e03f      	b.n	800fcd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d106      	bne.n	800fc70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f7f7 fc9c 	bl	80075a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2224      	movs	r2, #36	; 0x24
 800fc74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	68da      	ldr	r2, [r3, #12]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fc86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 f829 	bl	800fce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	691a      	ldr	r2, [r3, #16]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	695a      	ldr	r2, [r3, #20]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fcac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	68da      	ldr	r2, [r3, #12]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fcbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2220      	movs	r2, #32
 800fcc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2220      	movs	r2, #32
 800fcd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	b085      	sub	sp, #20
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	68da      	ldr	r2, [r3, #12]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	430a      	orrs	r2, r1
 800fcfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	689a      	ldr	r2, [r3, #8]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	431a      	orrs	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	431a      	orrs	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	69db      	ldr	r3, [r3, #28]
 800fd14:	4313      	orrs	r3, r2
 800fd16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fd22:	f023 030c 	bic.w	r3, r3, #12
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	6812      	ldr	r2, [r2, #0]
 800fd2a:	68f9      	ldr	r1, [r7, #12]
 800fd2c:	430b      	orrs	r3, r1
 800fd2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	699a      	ldr	r2, [r3, #24]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	430a      	orrs	r2, r1
 800fd44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd4e:	f040 818b 	bne.w	8010068 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4ac1      	ldr	r2, [pc, #772]	; (801005c <UART_SetConfig+0x37c>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d005      	beq.n	800fd68 <UART_SetConfig+0x88>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4abf      	ldr	r2, [pc, #764]	; (8010060 <UART_SetConfig+0x380>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	f040 80bd 	bne.w	800fee2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fd68:	f7fc fbcc 	bl	800c504 <HAL_RCC_GetPCLK2Freq>
 800fd6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	461d      	mov	r5, r3
 800fd72:	f04f 0600 	mov.w	r6, #0
 800fd76:	46a8      	mov	r8, r5
 800fd78:	46b1      	mov	r9, r6
 800fd7a:	eb18 0308 	adds.w	r3, r8, r8
 800fd7e:	eb49 0409 	adc.w	r4, r9, r9
 800fd82:	4698      	mov	r8, r3
 800fd84:	46a1      	mov	r9, r4
 800fd86:	eb18 0805 	adds.w	r8, r8, r5
 800fd8a:	eb49 0906 	adc.w	r9, r9, r6
 800fd8e:	f04f 0100 	mov.w	r1, #0
 800fd92:	f04f 0200 	mov.w	r2, #0
 800fd96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fda2:	4688      	mov	r8, r1
 800fda4:	4691      	mov	r9, r2
 800fda6:	eb18 0005 	adds.w	r0, r8, r5
 800fdaa:	eb49 0106 	adc.w	r1, r9, r6
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	461d      	mov	r5, r3
 800fdb4:	f04f 0600 	mov.w	r6, #0
 800fdb8:	196b      	adds	r3, r5, r5
 800fdba:	eb46 0406 	adc.w	r4, r6, r6
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	f7f0 ff79 	bl	8000cb8 <__aeabi_uldivmod>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	460c      	mov	r4, r1
 800fdca:	461a      	mov	r2, r3
 800fdcc:	4ba5      	ldr	r3, [pc, #660]	; (8010064 <UART_SetConfig+0x384>)
 800fdce:	fba3 2302 	umull	r2, r3, r3, r2
 800fdd2:	095b      	lsrs	r3, r3, #5
 800fdd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	461d      	mov	r5, r3
 800fddc:	f04f 0600 	mov.w	r6, #0
 800fde0:	46a9      	mov	r9, r5
 800fde2:	46b2      	mov	sl, r6
 800fde4:	eb19 0309 	adds.w	r3, r9, r9
 800fde8:	eb4a 040a 	adc.w	r4, sl, sl
 800fdec:	4699      	mov	r9, r3
 800fdee:	46a2      	mov	sl, r4
 800fdf0:	eb19 0905 	adds.w	r9, r9, r5
 800fdf4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fdf8:	f04f 0100 	mov.w	r1, #0
 800fdfc:	f04f 0200 	mov.w	r2, #0
 800fe00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe0c:	4689      	mov	r9, r1
 800fe0e:	4692      	mov	sl, r2
 800fe10:	eb19 0005 	adds.w	r0, r9, r5
 800fe14:	eb4a 0106 	adc.w	r1, sl, r6
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	461d      	mov	r5, r3
 800fe1e:	f04f 0600 	mov.w	r6, #0
 800fe22:	196b      	adds	r3, r5, r5
 800fe24:	eb46 0406 	adc.w	r4, r6, r6
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4623      	mov	r3, r4
 800fe2c:	f7f0 ff44 	bl	8000cb8 <__aeabi_uldivmod>
 800fe30:	4603      	mov	r3, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	461a      	mov	r2, r3
 800fe36:	4b8b      	ldr	r3, [pc, #556]	; (8010064 <UART_SetConfig+0x384>)
 800fe38:	fba3 1302 	umull	r1, r3, r3, r2
 800fe3c:	095b      	lsrs	r3, r3, #5
 800fe3e:	2164      	movs	r1, #100	; 0x64
 800fe40:	fb01 f303 	mul.w	r3, r1, r3
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	00db      	lsls	r3, r3, #3
 800fe48:	3332      	adds	r3, #50	; 0x32
 800fe4a:	4a86      	ldr	r2, [pc, #536]	; (8010064 <UART_SetConfig+0x384>)
 800fe4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fe50:	095b      	lsrs	r3, r3, #5
 800fe52:	005b      	lsls	r3, r3, #1
 800fe54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fe58:	4498      	add	r8, r3
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	461d      	mov	r5, r3
 800fe5e:	f04f 0600 	mov.w	r6, #0
 800fe62:	46a9      	mov	r9, r5
 800fe64:	46b2      	mov	sl, r6
 800fe66:	eb19 0309 	adds.w	r3, r9, r9
 800fe6a:	eb4a 040a 	adc.w	r4, sl, sl
 800fe6e:	4699      	mov	r9, r3
 800fe70:	46a2      	mov	sl, r4
 800fe72:	eb19 0905 	adds.w	r9, r9, r5
 800fe76:	eb4a 0a06 	adc.w	sl, sl, r6
 800fe7a:	f04f 0100 	mov.w	r1, #0
 800fe7e:	f04f 0200 	mov.w	r2, #0
 800fe82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe8e:	4689      	mov	r9, r1
 800fe90:	4692      	mov	sl, r2
 800fe92:	eb19 0005 	adds.w	r0, r9, r5
 800fe96:	eb4a 0106 	adc.w	r1, sl, r6
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	461d      	mov	r5, r3
 800fea0:	f04f 0600 	mov.w	r6, #0
 800fea4:	196b      	adds	r3, r5, r5
 800fea6:	eb46 0406 	adc.w	r4, r6, r6
 800feaa:	461a      	mov	r2, r3
 800feac:	4623      	mov	r3, r4
 800feae:	f7f0 ff03 	bl	8000cb8 <__aeabi_uldivmod>
 800feb2:	4603      	mov	r3, r0
 800feb4:	460c      	mov	r4, r1
 800feb6:	461a      	mov	r2, r3
 800feb8:	4b6a      	ldr	r3, [pc, #424]	; (8010064 <UART_SetConfig+0x384>)
 800feba:	fba3 1302 	umull	r1, r3, r3, r2
 800febe:	095b      	lsrs	r3, r3, #5
 800fec0:	2164      	movs	r1, #100	; 0x64
 800fec2:	fb01 f303 	mul.w	r3, r1, r3
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	00db      	lsls	r3, r3, #3
 800feca:	3332      	adds	r3, #50	; 0x32
 800fecc:	4a65      	ldr	r2, [pc, #404]	; (8010064 <UART_SetConfig+0x384>)
 800fece:	fba2 2303 	umull	r2, r3, r2, r3
 800fed2:	095b      	lsrs	r3, r3, #5
 800fed4:	f003 0207 	and.w	r2, r3, #7
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4442      	add	r2, r8
 800fede:	609a      	str	r2, [r3, #8]
 800fee0:	e26f      	b.n	80103c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fee2:	f7fc fafb 	bl	800c4dc <HAL_RCC_GetPCLK1Freq>
 800fee6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	461d      	mov	r5, r3
 800feec:	f04f 0600 	mov.w	r6, #0
 800fef0:	46a8      	mov	r8, r5
 800fef2:	46b1      	mov	r9, r6
 800fef4:	eb18 0308 	adds.w	r3, r8, r8
 800fef8:	eb49 0409 	adc.w	r4, r9, r9
 800fefc:	4698      	mov	r8, r3
 800fefe:	46a1      	mov	r9, r4
 800ff00:	eb18 0805 	adds.w	r8, r8, r5
 800ff04:	eb49 0906 	adc.w	r9, r9, r6
 800ff08:	f04f 0100 	mov.w	r1, #0
 800ff0c:	f04f 0200 	mov.w	r2, #0
 800ff10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ff1c:	4688      	mov	r8, r1
 800ff1e:	4691      	mov	r9, r2
 800ff20:	eb18 0005 	adds.w	r0, r8, r5
 800ff24:	eb49 0106 	adc.w	r1, r9, r6
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	461d      	mov	r5, r3
 800ff2e:	f04f 0600 	mov.w	r6, #0
 800ff32:	196b      	adds	r3, r5, r5
 800ff34:	eb46 0406 	adc.w	r4, r6, r6
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4623      	mov	r3, r4
 800ff3c:	f7f0 febc 	bl	8000cb8 <__aeabi_uldivmod>
 800ff40:	4603      	mov	r3, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	461a      	mov	r2, r3
 800ff46:	4b47      	ldr	r3, [pc, #284]	; (8010064 <UART_SetConfig+0x384>)
 800ff48:	fba3 2302 	umull	r2, r3, r3, r2
 800ff4c:	095b      	lsrs	r3, r3, #5
 800ff4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	461d      	mov	r5, r3
 800ff56:	f04f 0600 	mov.w	r6, #0
 800ff5a:	46a9      	mov	r9, r5
 800ff5c:	46b2      	mov	sl, r6
 800ff5e:	eb19 0309 	adds.w	r3, r9, r9
 800ff62:	eb4a 040a 	adc.w	r4, sl, sl
 800ff66:	4699      	mov	r9, r3
 800ff68:	46a2      	mov	sl, r4
 800ff6a:	eb19 0905 	adds.w	r9, r9, r5
 800ff6e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff72:	f04f 0100 	mov.w	r1, #0
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff86:	4689      	mov	r9, r1
 800ff88:	4692      	mov	sl, r2
 800ff8a:	eb19 0005 	adds.w	r0, r9, r5
 800ff8e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	461d      	mov	r5, r3
 800ff98:	f04f 0600 	mov.w	r6, #0
 800ff9c:	196b      	adds	r3, r5, r5
 800ff9e:	eb46 0406 	adc.w	r4, r6, r6
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	f7f0 fe87 	bl	8000cb8 <__aeabi_uldivmod>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	460c      	mov	r4, r1
 800ffae:	461a      	mov	r2, r3
 800ffb0:	4b2c      	ldr	r3, [pc, #176]	; (8010064 <UART_SetConfig+0x384>)
 800ffb2:	fba3 1302 	umull	r1, r3, r3, r2
 800ffb6:	095b      	lsrs	r3, r3, #5
 800ffb8:	2164      	movs	r1, #100	; 0x64
 800ffba:	fb01 f303 	mul.w	r3, r1, r3
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	3332      	adds	r3, #50	; 0x32
 800ffc4:	4a27      	ldr	r2, [pc, #156]	; (8010064 <UART_SetConfig+0x384>)
 800ffc6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffca:	095b      	lsrs	r3, r3, #5
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ffd2:	4498      	add	r8, r3
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	461d      	mov	r5, r3
 800ffd8:	f04f 0600 	mov.w	r6, #0
 800ffdc:	46a9      	mov	r9, r5
 800ffde:	46b2      	mov	sl, r6
 800ffe0:	eb19 0309 	adds.w	r3, r9, r9
 800ffe4:	eb4a 040a 	adc.w	r4, sl, sl
 800ffe8:	4699      	mov	r9, r3
 800ffea:	46a2      	mov	sl, r4
 800ffec:	eb19 0905 	adds.w	r9, r9, r5
 800fff0:	eb4a 0a06 	adc.w	sl, sl, r6
 800fff4:	f04f 0100 	mov.w	r1, #0
 800fff8:	f04f 0200 	mov.w	r2, #0
 800fffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010008:	4689      	mov	r9, r1
 801000a:	4692      	mov	sl, r2
 801000c:	eb19 0005 	adds.w	r0, r9, r5
 8010010:	eb4a 0106 	adc.w	r1, sl, r6
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	461d      	mov	r5, r3
 801001a:	f04f 0600 	mov.w	r6, #0
 801001e:	196b      	adds	r3, r5, r5
 8010020:	eb46 0406 	adc.w	r4, r6, r6
 8010024:	461a      	mov	r2, r3
 8010026:	4623      	mov	r3, r4
 8010028:	f7f0 fe46 	bl	8000cb8 <__aeabi_uldivmod>
 801002c:	4603      	mov	r3, r0
 801002e:	460c      	mov	r4, r1
 8010030:	461a      	mov	r2, r3
 8010032:	4b0c      	ldr	r3, [pc, #48]	; (8010064 <UART_SetConfig+0x384>)
 8010034:	fba3 1302 	umull	r1, r3, r3, r2
 8010038:	095b      	lsrs	r3, r3, #5
 801003a:	2164      	movs	r1, #100	; 0x64
 801003c:	fb01 f303 	mul.w	r3, r1, r3
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	3332      	adds	r3, #50	; 0x32
 8010046:	4a07      	ldr	r2, [pc, #28]	; (8010064 <UART_SetConfig+0x384>)
 8010048:	fba2 2303 	umull	r2, r3, r2, r3
 801004c:	095b      	lsrs	r3, r3, #5
 801004e:	f003 0207 	and.w	r2, r3, #7
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4442      	add	r2, r8
 8010058:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801005a:	e1b2      	b.n	80103c2 <UART_SetConfig+0x6e2>
 801005c:	40011000 	.word	0x40011000
 8010060:	40011400 	.word	0x40011400
 8010064:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4ad7      	ldr	r2, [pc, #860]	; (80103cc <UART_SetConfig+0x6ec>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d005      	beq.n	801007e <UART_SetConfig+0x39e>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4ad6      	ldr	r2, [pc, #856]	; (80103d0 <UART_SetConfig+0x6f0>)
 8010078:	4293      	cmp	r3, r2
 801007a:	f040 80d1 	bne.w	8010220 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801007e:	f7fc fa41 	bl	800c504 <HAL_RCC_GetPCLK2Freq>
 8010082:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	469a      	mov	sl, r3
 8010088:	f04f 0b00 	mov.w	fp, #0
 801008c:	46d0      	mov	r8, sl
 801008e:	46d9      	mov	r9, fp
 8010090:	eb18 0308 	adds.w	r3, r8, r8
 8010094:	eb49 0409 	adc.w	r4, r9, r9
 8010098:	4698      	mov	r8, r3
 801009a:	46a1      	mov	r9, r4
 801009c:	eb18 080a 	adds.w	r8, r8, sl
 80100a0:	eb49 090b 	adc.w	r9, r9, fp
 80100a4:	f04f 0100 	mov.w	r1, #0
 80100a8:	f04f 0200 	mov.w	r2, #0
 80100ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80100b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80100b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80100b8:	4688      	mov	r8, r1
 80100ba:	4691      	mov	r9, r2
 80100bc:	eb1a 0508 	adds.w	r5, sl, r8
 80100c0:	eb4b 0609 	adc.w	r6, fp, r9
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4619      	mov	r1, r3
 80100ca:	f04f 0200 	mov.w	r2, #0
 80100ce:	f04f 0300 	mov.w	r3, #0
 80100d2:	f04f 0400 	mov.w	r4, #0
 80100d6:	0094      	lsls	r4, r2, #2
 80100d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100dc:	008b      	lsls	r3, r1, #2
 80100de:	461a      	mov	r2, r3
 80100e0:	4623      	mov	r3, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	4631      	mov	r1, r6
 80100e6:	f7f0 fde7 	bl	8000cb8 <__aeabi_uldivmod>
 80100ea:	4603      	mov	r3, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	461a      	mov	r2, r3
 80100f0:	4bb8      	ldr	r3, [pc, #736]	; (80103d4 <UART_SetConfig+0x6f4>)
 80100f2:	fba3 2302 	umull	r2, r3, r3, r2
 80100f6:	095b      	lsrs	r3, r3, #5
 80100f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	469b      	mov	fp, r3
 8010100:	f04f 0c00 	mov.w	ip, #0
 8010104:	46d9      	mov	r9, fp
 8010106:	46e2      	mov	sl, ip
 8010108:	eb19 0309 	adds.w	r3, r9, r9
 801010c:	eb4a 040a 	adc.w	r4, sl, sl
 8010110:	4699      	mov	r9, r3
 8010112:	46a2      	mov	sl, r4
 8010114:	eb19 090b 	adds.w	r9, r9, fp
 8010118:	eb4a 0a0c 	adc.w	sl, sl, ip
 801011c:	f04f 0100 	mov.w	r1, #0
 8010120:	f04f 0200 	mov.w	r2, #0
 8010124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010128:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801012c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010130:	4689      	mov	r9, r1
 8010132:	4692      	mov	sl, r2
 8010134:	eb1b 0509 	adds.w	r5, fp, r9
 8010138:	eb4c 060a 	adc.w	r6, ip, sl
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	4619      	mov	r1, r3
 8010142:	f04f 0200 	mov.w	r2, #0
 8010146:	f04f 0300 	mov.w	r3, #0
 801014a:	f04f 0400 	mov.w	r4, #0
 801014e:	0094      	lsls	r4, r2, #2
 8010150:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010154:	008b      	lsls	r3, r1, #2
 8010156:	461a      	mov	r2, r3
 8010158:	4623      	mov	r3, r4
 801015a:	4628      	mov	r0, r5
 801015c:	4631      	mov	r1, r6
 801015e:	f7f0 fdab 	bl	8000cb8 <__aeabi_uldivmod>
 8010162:	4603      	mov	r3, r0
 8010164:	460c      	mov	r4, r1
 8010166:	461a      	mov	r2, r3
 8010168:	4b9a      	ldr	r3, [pc, #616]	; (80103d4 <UART_SetConfig+0x6f4>)
 801016a:	fba3 1302 	umull	r1, r3, r3, r2
 801016e:	095b      	lsrs	r3, r3, #5
 8010170:	2164      	movs	r1, #100	; 0x64
 8010172:	fb01 f303 	mul.w	r3, r1, r3
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	011b      	lsls	r3, r3, #4
 801017a:	3332      	adds	r3, #50	; 0x32
 801017c:	4a95      	ldr	r2, [pc, #596]	; (80103d4 <UART_SetConfig+0x6f4>)
 801017e:	fba2 2303 	umull	r2, r3, r2, r3
 8010182:	095b      	lsrs	r3, r3, #5
 8010184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010188:	4498      	add	r8, r3
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	469b      	mov	fp, r3
 801018e:	f04f 0c00 	mov.w	ip, #0
 8010192:	46d9      	mov	r9, fp
 8010194:	46e2      	mov	sl, ip
 8010196:	eb19 0309 	adds.w	r3, r9, r9
 801019a:	eb4a 040a 	adc.w	r4, sl, sl
 801019e:	4699      	mov	r9, r3
 80101a0:	46a2      	mov	sl, r4
 80101a2:	eb19 090b 	adds.w	r9, r9, fp
 80101a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80101aa:	f04f 0100 	mov.w	r1, #0
 80101ae:	f04f 0200 	mov.w	r2, #0
 80101b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101be:	4689      	mov	r9, r1
 80101c0:	4692      	mov	sl, r2
 80101c2:	eb1b 0509 	adds.w	r5, fp, r9
 80101c6:	eb4c 060a 	adc.w	r6, ip, sl
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	4619      	mov	r1, r3
 80101d0:	f04f 0200 	mov.w	r2, #0
 80101d4:	f04f 0300 	mov.w	r3, #0
 80101d8:	f04f 0400 	mov.w	r4, #0
 80101dc:	0094      	lsls	r4, r2, #2
 80101de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101e2:	008b      	lsls	r3, r1, #2
 80101e4:	461a      	mov	r2, r3
 80101e6:	4623      	mov	r3, r4
 80101e8:	4628      	mov	r0, r5
 80101ea:	4631      	mov	r1, r6
 80101ec:	f7f0 fd64 	bl	8000cb8 <__aeabi_uldivmod>
 80101f0:	4603      	mov	r3, r0
 80101f2:	460c      	mov	r4, r1
 80101f4:	461a      	mov	r2, r3
 80101f6:	4b77      	ldr	r3, [pc, #476]	; (80103d4 <UART_SetConfig+0x6f4>)
 80101f8:	fba3 1302 	umull	r1, r3, r3, r2
 80101fc:	095b      	lsrs	r3, r3, #5
 80101fe:	2164      	movs	r1, #100	; 0x64
 8010200:	fb01 f303 	mul.w	r3, r1, r3
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	011b      	lsls	r3, r3, #4
 8010208:	3332      	adds	r3, #50	; 0x32
 801020a:	4a72      	ldr	r2, [pc, #456]	; (80103d4 <UART_SetConfig+0x6f4>)
 801020c:	fba2 2303 	umull	r2, r3, r2, r3
 8010210:	095b      	lsrs	r3, r3, #5
 8010212:	f003 020f 	and.w	r2, r3, #15
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4442      	add	r2, r8
 801021c:	609a      	str	r2, [r3, #8]
 801021e:	e0d0      	b.n	80103c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010220:	f7fc f95c 	bl	800c4dc <HAL_RCC_GetPCLK1Freq>
 8010224:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	469a      	mov	sl, r3
 801022a:	f04f 0b00 	mov.w	fp, #0
 801022e:	46d0      	mov	r8, sl
 8010230:	46d9      	mov	r9, fp
 8010232:	eb18 0308 	adds.w	r3, r8, r8
 8010236:	eb49 0409 	adc.w	r4, r9, r9
 801023a:	4698      	mov	r8, r3
 801023c:	46a1      	mov	r9, r4
 801023e:	eb18 080a 	adds.w	r8, r8, sl
 8010242:	eb49 090b 	adc.w	r9, r9, fp
 8010246:	f04f 0100 	mov.w	r1, #0
 801024a:	f04f 0200 	mov.w	r2, #0
 801024e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010252:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010256:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801025a:	4688      	mov	r8, r1
 801025c:	4691      	mov	r9, r2
 801025e:	eb1a 0508 	adds.w	r5, sl, r8
 8010262:	eb4b 0609 	adc.w	r6, fp, r9
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	4619      	mov	r1, r3
 801026c:	f04f 0200 	mov.w	r2, #0
 8010270:	f04f 0300 	mov.w	r3, #0
 8010274:	f04f 0400 	mov.w	r4, #0
 8010278:	0094      	lsls	r4, r2, #2
 801027a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801027e:	008b      	lsls	r3, r1, #2
 8010280:	461a      	mov	r2, r3
 8010282:	4623      	mov	r3, r4
 8010284:	4628      	mov	r0, r5
 8010286:	4631      	mov	r1, r6
 8010288:	f7f0 fd16 	bl	8000cb8 <__aeabi_uldivmod>
 801028c:	4603      	mov	r3, r0
 801028e:	460c      	mov	r4, r1
 8010290:	461a      	mov	r2, r3
 8010292:	4b50      	ldr	r3, [pc, #320]	; (80103d4 <UART_SetConfig+0x6f4>)
 8010294:	fba3 2302 	umull	r2, r3, r3, r2
 8010298:	095b      	lsrs	r3, r3, #5
 801029a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	469b      	mov	fp, r3
 80102a2:	f04f 0c00 	mov.w	ip, #0
 80102a6:	46d9      	mov	r9, fp
 80102a8:	46e2      	mov	sl, ip
 80102aa:	eb19 0309 	adds.w	r3, r9, r9
 80102ae:	eb4a 040a 	adc.w	r4, sl, sl
 80102b2:	4699      	mov	r9, r3
 80102b4:	46a2      	mov	sl, r4
 80102b6:	eb19 090b 	adds.w	r9, r9, fp
 80102ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102be:	f04f 0100 	mov.w	r1, #0
 80102c2:	f04f 0200 	mov.w	r2, #0
 80102c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102d2:	4689      	mov	r9, r1
 80102d4:	4692      	mov	sl, r2
 80102d6:	eb1b 0509 	adds.w	r5, fp, r9
 80102da:	eb4c 060a 	adc.w	r6, ip, sl
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	4619      	mov	r1, r3
 80102e4:	f04f 0200 	mov.w	r2, #0
 80102e8:	f04f 0300 	mov.w	r3, #0
 80102ec:	f04f 0400 	mov.w	r4, #0
 80102f0:	0094      	lsls	r4, r2, #2
 80102f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102f6:	008b      	lsls	r3, r1, #2
 80102f8:	461a      	mov	r2, r3
 80102fa:	4623      	mov	r3, r4
 80102fc:	4628      	mov	r0, r5
 80102fe:	4631      	mov	r1, r6
 8010300:	f7f0 fcda 	bl	8000cb8 <__aeabi_uldivmod>
 8010304:	4603      	mov	r3, r0
 8010306:	460c      	mov	r4, r1
 8010308:	461a      	mov	r2, r3
 801030a:	4b32      	ldr	r3, [pc, #200]	; (80103d4 <UART_SetConfig+0x6f4>)
 801030c:	fba3 1302 	umull	r1, r3, r3, r2
 8010310:	095b      	lsrs	r3, r3, #5
 8010312:	2164      	movs	r1, #100	; 0x64
 8010314:	fb01 f303 	mul.w	r3, r1, r3
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	3332      	adds	r3, #50	; 0x32
 801031e:	4a2d      	ldr	r2, [pc, #180]	; (80103d4 <UART_SetConfig+0x6f4>)
 8010320:	fba2 2303 	umull	r2, r3, r2, r3
 8010324:	095b      	lsrs	r3, r3, #5
 8010326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801032a:	4498      	add	r8, r3
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	469b      	mov	fp, r3
 8010330:	f04f 0c00 	mov.w	ip, #0
 8010334:	46d9      	mov	r9, fp
 8010336:	46e2      	mov	sl, ip
 8010338:	eb19 0309 	adds.w	r3, r9, r9
 801033c:	eb4a 040a 	adc.w	r4, sl, sl
 8010340:	4699      	mov	r9, r3
 8010342:	46a2      	mov	sl, r4
 8010344:	eb19 090b 	adds.w	r9, r9, fp
 8010348:	eb4a 0a0c 	adc.w	sl, sl, ip
 801034c:	f04f 0100 	mov.w	r1, #0
 8010350:	f04f 0200 	mov.w	r2, #0
 8010354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801035c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010360:	4689      	mov	r9, r1
 8010362:	4692      	mov	sl, r2
 8010364:	eb1b 0509 	adds.w	r5, fp, r9
 8010368:	eb4c 060a 	adc.w	r6, ip, sl
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	4619      	mov	r1, r3
 8010372:	f04f 0200 	mov.w	r2, #0
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	f04f 0400 	mov.w	r4, #0
 801037e:	0094      	lsls	r4, r2, #2
 8010380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010384:	008b      	lsls	r3, r1, #2
 8010386:	461a      	mov	r2, r3
 8010388:	4623      	mov	r3, r4
 801038a:	4628      	mov	r0, r5
 801038c:	4631      	mov	r1, r6
 801038e:	f7f0 fc93 	bl	8000cb8 <__aeabi_uldivmod>
 8010392:	4603      	mov	r3, r0
 8010394:	460c      	mov	r4, r1
 8010396:	461a      	mov	r2, r3
 8010398:	4b0e      	ldr	r3, [pc, #56]	; (80103d4 <UART_SetConfig+0x6f4>)
 801039a:	fba3 1302 	umull	r1, r3, r3, r2
 801039e:	095b      	lsrs	r3, r3, #5
 80103a0:	2164      	movs	r1, #100	; 0x64
 80103a2:	fb01 f303 	mul.w	r3, r1, r3
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	011b      	lsls	r3, r3, #4
 80103aa:	3332      	adds	r3, #50	; 0x32
 80103ac:	4a09      	ldr	r2, [pc, #36]	; (80103d4 <UART_SetConfig+0x6f4>)
 80103ae:	fba2 2303 	umull	r2, r3, r2, r3
 80103b2:	095b      	lsrs	r3, r3, #5
 80103b4:	f003 020f 	and.w	r2, r3, #15
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4442      	add	r2, r8
 80103be:	609a      	str	r2, [r3, #8]
}
 80103c0:	e7ff      	b.n	80103c2 <UART_SetConfig+0x6e2>
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	40011000 	.word	0x40011000
 80103d0:	40011400 	.word	0x40011400
 80103d4:	51eb851f 	.word	0x51eb851f

080103d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80103d8:	b084      	sub	sp, #16
 80103da:	b480      	push	{r7}
 80103dc:	b085      	sub	sp, #20
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	f107 001c 	add.w	r0, r7, #28
 80103e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80103ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80103f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80103f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80103f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80103f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80103fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80103fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80103fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010402:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	4313      	orrs	r3, r2
 8010408:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	431a      	orrs	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	3714      	adds	r7, #20
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	b004      	add	sp, #16
 801042c:	4770      	bx	lr

0801042e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801042e:	b480      	push	{r7}
 8010430:	b083      	sub	sp, #12
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	370c      	adds	r7, #12
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801046a:	b580      	push	{r7, lr}
 801046c:	b082      	sub	sp, #8
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2203      	movs	r2, #3
 8010476:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010478:	2002      	movs	r0, #2
 801047a:	f7f9 fbc5 	bl	8009c08 <HAL_Delay>
  
  return HAL_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f003 0303 	and.w	r3, r3, #3
}
 8010498:	4618      	mov	r0, r3
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80104c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80104ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80104de:	f023 030f 	bic.w	r3, r3, #15
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	431a      	orrs	r2, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80104ea:	2300      	movs	r3, #0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	b2db      	uxtb	r3, r3
}
 8010506:	4618      	mov	r0, r3
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010512:	b480      	push	{r7}
 8010514:	b085      	sub	sp, #20
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	3314      	adds	r3, #20
 8010520:	461a      	mov	r2, r3
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	4413      	add	r3, r2
 8010526:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
}  
 801052c:	4618      	mov	r0, r3
 801052e:	3714      	adds	r7, #20
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010542:	2300      	movs	r3, #0
 8010544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801055e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010564:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801056a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4313      	orrs	r3, r2
 8010570:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010576:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	431a      	orrs	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010582:	2300      	movs	r3, #0

}
 8010584:	4618      	mov	r0, r3
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801059e:	2310      	movs	r3, #16
 80105a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105a2:	2340      	movs	r3, #64	; 0x40
 80105a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105b0:	f107 0308 	add.w	r3, r7, #8
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff ff74 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80105bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80105c0:	2110      	movs	r1, #16
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fa40 	bl	8010a48 <SDMMC_GetCmdResp1>
 80105c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80105e2:	2311      	movs	r3, #17
 80105e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105e6:	2340      	movs	r3, #64	; 0x40
 80105e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105f4:	f107 0308 	add.w	r3, r7, #8
 80105f8:	4619      	mov	r1, r3
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff ff52 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010600:	f241 3288 	movw	r2, #5000	; 0x1388
 8010604:	2111      	movs	r1, #17
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fa1e 	bl	8010a48 <SDMMC_GetCmdResp1>
 801060c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060e:	69fb      	ldr	r3, [r7, #28]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3720      	adds	r7, #32
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010626:	2312      	movs	r3, #18
 8010628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801062a:	2340      	movs	r3, #64	; 0x40
 801062c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801062e:	2300      	movs	r3, #0
 8010630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010636:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010638:	f107 0308 	add.w	r3, r7, #8
 801063c:	4619      	mov	r1, r3
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7ff ff30 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010644:	f241 3288 	movw	r2, #5000	; 0x1388
 8010648:	2112      	movs	r1, #18
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 f9fc 	bl	8010a48 <SDMMC_GetCmdResp1>
 8010650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010652:	69fb      	ldr	r3, [r7, #28]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3720      	adds	r7, #32
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801066a:	2318      	movs	r3, #24
 801066c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801066e:	2340      	movs	r3, #64	; 0x40
 8010670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801067a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801067c:	f107 0308 	add.w	r3, r7, #8
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7ff ff0e 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010688:	f241 3288 	movw	r2, #5000	; 0x1388
 801068c:	2118      	movs	r1, #24
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f9da 	bl	8010a48 <SDMMC_GetCmdResp1>
 8010694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010696:	69fb      	ldr	r3, [r7, #28]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80106ae:	2319      	movs	r3, #25
 80106b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106b2:	2340      	movs	r3, #64	; 0x40
 80106b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106b6:	2300      	movs	r3, #0
 80106b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c0:	f107 0308 	add.w	r3, r7, #8
 80106c4:	4619      	mov	r1, r3
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff feec 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80106cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d0:	2119      	movs	r1, #25
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f9b8 	bl	8010a48 <SDMMC_GetCmdResp1>
 80106d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106da:	69fb      	ldr	r3, [r7, #28]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80106ec:	2300      	movs	r3, #0
 80106ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80106f0:	230c      	movs	r3, #12
 80106f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106f4:	2340      	movs	r3, #64	; 0x40
 80106f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106f8:	2300      	movs	r3, #0
 80106fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010702:	f107 0308 	add.w	r3, r7, #8
 8010706:	4619      	mov	r1, r3
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff fecb 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801070e:	4a05      	ldr	r2, [pc, #20]	; (8010724 <SDMMC_CmdStopTransfer+0x40>)
 8010710:	210c      	movs	r1, #12
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f998 	bl	8010a48 <SDMMC_GetCmdResp1>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	05f5e100 	.word	0x05f5e100

08010728 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08a      	sub	sp, #40	; 0x28
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010738:	2307      	movs	r3, #7
 801073a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801073c:	2340      	movs	r3, #64	; 0x40
 801073e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010740:	2300      	movs	r3, #0
 8010742:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010748:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801074a:	f107 0310 	add.w	r3, r7, #16
 801074e:	4619      	mov	r1, r3
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f7ff fea7 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010756:	f241 3288 	movw	r2, #5000	; 0x1388
 801075a:	2107      	movs	r1, #7
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f000 f973 	bl	8010a48 <SDMMC_GetCmdResp1>
 8010762:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010766:	4618      	mov	r0, r3
 8010768:	3728      	adds	r7, #40	; 0x28
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b088      	sub	sp, #32
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010776:	2300      	movs	r3, #0
 8010778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801077a:	2300      	movs	r3, #0
 801077c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801077e:	2300      	movs	r3, #0
 8010780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010782:	2300      	movs	r3, #0
 8010784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801078a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801078c:	f107 0308 	add.w	r3, r7, #8
 8010790:	4619      	mov	r1, r3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7ff fe86 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 f92d 	bl	80109f8 <SDMMC_GetCmdError>
 801079e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a0:	69fb      	ldr	r3, [r7, #28]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3720      	adds	r7, #32
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b088      	sub	sp, #32
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80107b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80107b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80107b8:	2308      	movs	r3, #8
 80107ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107bc:	2340      	movs	r3, #64	; 0x40
 80107be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107c0:	2300      	movs	r3, #0
 80107c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107ca:	f107 0308 	add.w	r3, r7, #8
 80107ce:	4619      	mov	r1, r3
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7ff fe67 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 fb16 	bl	8010e08 <SDMMC_GetCmdResp7>
 80107dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107de:	69fb      	ldr	r3, [r7, #28]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3720      	adds	r7, #32
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80107f6:	2337      	movs	r3, #55	; 0x37
 80107f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107fa:	2340      	movs	r3, #64	; 0x40
 80107fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107fe:	2300      	movs	r3, #0
 8010800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010808:	f107 0308 	add.w	r3, r7, #8
 801080c:	4619      	mov	r1, r3
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f7ff fe48 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010814:	f241 3288 	movw	r2, #5000	; 0x1388
 8010818:	2137      	movs	r1, #55	; 0x37
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f914 	bl	8010a48 <SDMMC_GetCmdResp1>
 8010820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010822:	69fb      	ldr	r3, [r7, #28]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3720      	adds	r7, #32
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b088      	sub	sp, #32
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801083c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010842:	2329      	movs	r3, #41	; 0x29
 8010844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010846:	2340      	movs	r3, #64	; 0x40
 8010848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801084a:	2300      	movs	r3, #0
 801084c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010854:	f107 0308 	add.w	r3, r7, #8
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff fe22 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fa23 	bl	8010cac <SDMMC_GetCmdResp3>
 8010866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010868:	69fb      	ldr	r3, [r7, #28]
}
 801086a:	4618      	mov	r0, r3
 801086c:	3720      	adds	r7, #32
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b088      	sub	sp, #32
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010880:	2306      	movs	r3, #6
 8010882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010884:	2340      	movs	r3, #64	; 0x40
 8010886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010888:	2300      	movs	r3, #0
 801088a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010892:	f107 0308 	add.w	r3, r7, #8
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff fe03 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801089e:	f241 3288 	movw	r2, #5000	; 0x1388
 80108a2:	2106      	movs	r1, #6
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 f8cf 	bl	8010a48 <SDMMC_GetCmdResp1>
 80108aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ac:	69fb      	ldr	r3, [r7, #28]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b088      	sub	sp, #32
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80108be:	2300      	movs	r3, #0
 80108c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80108c2:	2333      	movs	r3, #51	; 0x33
 80108c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108c6:	2340      	movs	r3, #64	; 0x40
 80108c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108ca:	2300      	movs	r3, #0
 80108cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108d4:	f107 0308 	add.w	r3, r7, #8
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7ff fde2 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80108e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108e4:	2133      	movs	r1, #51	; 0x33
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f8ae 	bl	8010a48 <SDMMC_GetCmdResp1>
 80108ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ee:	69fb      	ldr	r3, [r7, #28]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3720      	adds	r7, #32
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b088      	sub	sp, #32
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010900:	2300      	movs	r3, #0
 8010902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010904:	2302      	movs	r3, #2
 8010906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010908:	23c0      	movs	r3, #192	; 0xc0
 801090a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801090c:	2300      	movs	r3, #0
 801090e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010916:	f107 0308 	add.w	r3, r7, #8
 801091a:	4619      	mov	r1, r3
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7ff fdc1 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 f97c 	bl	8010c20 <SDMMC_GetCmdResp2>
 8010928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801092a:	69fb      	ldr	r3, [r7, #28]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3720      	adds	r7, #32
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b088      	sub	sp, #32
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010942:	2309      	movs	r3, #9
 8010944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010946:	23c0      	movs	r3, #192	; 0xc0
 8010948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801094a:	2300      	movs	r3, #0
 801094c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010954:	f107 0308 	add.w	r3, r7, #8
 8010958:	4619      	mov	r1, r3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff fda2 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 f95d 	bl	8010c20 <SDMMC_GetCmdResp2>
 8010966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010968:	69fb      	ldr	r3, [r7, #28]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3720      	adds	r7, #32
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b088      	sub	sp, #32
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
 801097a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801097c:	2300      	movs	r3, #0
 801097e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010980:	2303      	movs	r3, #3
 8010982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010984:	2340      	movs	r3, #64	; 0x40
 8010986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010988:	2300      	movs	r3, #0
 801098a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010992:	f107 0308 	add.w	r3, r7, #8
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fd83 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	2103      	movs	r1, #3
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f9bc 	bl	8010d20 <SDMMC_GetCmdResp6>
 80109a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109aa:	69fb      	ldr	r3, [r7, #28]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3720      	adds	r7, #32
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80109c2:	230d      	movs	r3, #13
 80109c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109c6:	2340      	movs	r3, #64	; 0x40
 80109c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff fd62 	bl	80104a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80109e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e4:	210d      	movs	r1, #13
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f82e 	bl	8010a48 <SDMMC_GetCmdResp1>
 80109ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ee:	69fb      	ldr	r3, [r7, #28]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80109f8:	b490      	push	{r4, r7}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a00:	4b0f      	ldr	r3, [pc, #60]	; (8010a40 <SDMMC_GetCmdError+0x48>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a0f      	ldr	r2, [pc, #60]	; (8010a44 <SDMMC_GetCmdError+0x4c>)
 8010a06:	fba2 2303 	umull	r2, r3, r2, r3
 8010a0a:	0a5b      	lsrs	r3, r3, #9
 8010a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a14:	4623      	mov	r3, r4
 8010a16:	1e5c      	subs	r4, r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d102      	bne.n	8010a22 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a20:	e009      	b.n	8010a36 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d0f2      	beq.n	8010a14 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	22c5      	movs	r2, #197	; 0xc5
 8010a32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bc90      	pop	{r4, r7}
 8010a3e:	4770      	bx	lr
 8010a40:	20000000 	.word	0x20000000
 8010a44:	10624dd3 	.word	0x10624dd3

08010a48 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	460b      	mov	r3, r1
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010a56:	4b6f      	ldr	r3, [pc, #444]	; (8010c14 <SDMMC_GetCmdResp1+0x1cc>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a6f      	ldr	r2, [pc, #444]	; (8010c18 <SDMMC_GetCmdResp1+0x1d0>)
 8010a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a60:	0a5b      	lsrs	r3, r3, #9
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a68:	4623      	mov	r3, r4
 8010a6a:	1e5c      	subs	r4, r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a74:	e0c9      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a7a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0f0      	beq.n	8010a68 <SDMMC_GetCmdResp1+0x20>
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1eb      	bne.n	8010a68 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a94:	f003 0304 	and.w	r3, r3, #4
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d004      	beq.n	8010aa6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2204      	movs	r2, #4
 8010aa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010aa2:	2304      	movs	r3, #4
 8010aa4:	e0b1      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d004      	beq.n	8010abc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e0a6      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	22c5      	movs	r2, #197	; 0xc5
 8010ac0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7ff fd18 	bl	80104f8 <SDIO_GetCommandResponse>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	7afb      	ldrb	r3, [r7, #11]
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d001      	beq.n	8010ad6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e099      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f7ff fd1a 	bl	8010512 <SDIO_GetResponse>
 8010ade:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	4b4e      	ldr	r3, [pc, #312]	; (8010c1c <SDMMC_GetCmdResp1+0x1d4>)
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010aea:	2300      	movs	r3, #0
 8010aec:	e08d      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	da02      	bge.n	8010afa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010af8:	e087      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010b04:	2340      	movs	r3, #64	; 0x40
 8010b06:	e080      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b12:	2380      	movs	r3, #128	; 0x80
 8010b14:	e079      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b24:	e071      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d002      	beq.n	8010b36 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b34:	e069      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b44:	e061      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b54:	e059      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b64:	e051      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b74:	e049      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b84:	e041      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d002      	beq.n	8010b96 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b94:	e039      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010ba4:	e031      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d002      	beq.n	8010bb6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010bb4:	e029      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010bc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010bc4:	e021      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010bd4:	e019      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010be4:	e011      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010bf4:	e009      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	f003 0308 	and.w	r3, r3, #8
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d002      	beq.n	8010c06 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010c00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010c04:	e001      	b.n	8010c0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd90      	pop	{r4, r7, pc}
 8010c12:	bf00      	nop
 8010c14:	20000000 	.word	0x20000000
 8010c18:	10624dd3 	.word	0x10624dd3
 8010c1c:	fdffe008 	.word	0xfdffe008

08010c20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010c20:	b490      	push	{r4, r7}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c28:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <SDMMC_GetCmdResp2+0x84>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a1e      	ldr	r2, [pc, #120]	; (8010ca8 <SDMMC_GetCmdResp2+0x88>)
 8010c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c32:	0a5b      	lsrs	r3, r3, #9
 8010c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c3c:	4623      	mov	r3, r4
 8010c3e:	1e5c      	subs	r4, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d102      	bne.n	8010c4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c48:	e026      	b.n	8010c98 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d0f0      	beq.n	8010c3c <SDMMC_GetCmdResp2+0x1c>
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1eb      	bne.n	8010c3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c68:	f003 0304 	and.w	r3, r3, #4
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d004      	beq.n	8010c7a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2204      	movs	r2, #4
 8010c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c76:	2304      	movs	r3, #4
 8010c78:	e00e      	b.n	8010c98 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7e:	f003 0301 	and.w	r3, r3, #1
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d004      	beq.n	8010c90 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2201      	movs	r2, #1
 8010c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e003      	b.n	8010c98 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	22c5      	movs	r2, #197	; 0xc5
 8010c94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bc90      	pop	{r4, r7}
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	20000000 	.word	0x20000000
 8010ca8:	10624dd3 	.word	0x10624dd3

08010cac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010cac:	b490      	push	{r4, r7}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cb4:	4b18      	ldr	r3, [pc, #96]	; (8010d18 <SDMMC_GetCmdResp3+0x6c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a18      	ldr	r2, [pc, #96]	; (8010d1c <SDMMC_GetCmdResp3+0x70>)
 8010cba:	fba2 2303 	umull	r2, r3, r2, r3
 8010cbe:	0a5b      	lsrs	r3, r3, #9
 8010cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cc8:	4623      	mov	r3, r4
 8010cca:	1e5c      	subs	r4, r3, #1
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d102      	bne.n	8010cd6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cd4:	e01b      	b.n	8010d0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cda:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d0f0      	beq.n	8010cc8 <SDMMC_GetCmdResp3+0x1c>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1eb      	bne.n	8010cc8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf4:	f003 0304 	and.w	r3, r3, #4
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d004      	beq.n	8010d06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2204      	movs	r2, #4
 8010d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d02:	2304      	movs	r3, #4
 8010d04:	e003      	b.n	8010d0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	22c5      	movs	r2, #197	; 0xc5
 8010d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bc90      	pop	{r4, r7}
 8010d16:	4770      	bx	lr
 8010d18:	20000000 	.word	0x20000000
 8010d1c:	10624dd3 	.word	0x10624dd3

08010d20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010d20:	b590      	push	{r4, r7, lr}
 8010d22:	b087      	sub	sp, #28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	607a      	str	r2, [r7, #4]
 8010d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d2e:	4b34      	ldr	r3, [pc, #208]	; (8010e00 <SDMMC_GetCmdResp6+0xe0>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a34      	ldr	r2, [pc, #208]	; (8010e04 <SDMMC_GetCmdResp6+0xe4>)
 8010d34:	fba2 2303 	umull	r2, r3, r2, r3
 8010d38:	0a5b      	lsrs	r3, r3, #9
 8010d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d42:	4623      	mov	r3, r4
 8010d44:	1e5c      	subs	r4, r3, #1
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d102      	bne.n	8010d50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d4e:	e052      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d0f0      	beq.n	8010d42 <SDMMC_GetCmdResp6+0x22>
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1eb      	bne.n	8010d42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d6e:	f003 0304 	and.w	r3, r3, #4
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d004      	beq.n	8010d80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2204      	movs	r2, #4
 8010d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d7c:	2304      	movs	r3, #4
 8010d7e:	e03a      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d004      	beq.n	8010d96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e02f      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	f7ff fbae 	bl	80104f8 <SDIO_GetCommandResponse>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	461a      	mov	r2, r3
 8010da0:	7afb      	ldrb	r3, [r7, #11]
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d001      	beq.n	8010daa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010da6:	2301      	movs	r3, #1
 8010da8:	e025      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	22c5      	movs	r2, #197	; 0xc5
 8010dae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010db0:	2100      	movs	r1, #0
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ff fbad 	bl	8010512 <SDIO_GetResponse>
 8010db8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d106      	bne.n	8010dd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	0c1b      	lsrs	r3, r3, #16
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	e011      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010de0:	e009      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010df0:	e001      	b.n	8010df6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	371c      	adds	r7, #28
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd90      	pop	{r4, r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	20000000 	.word	0x20000000
 8010e04:	10624dd3 	.word	0x10624dd3

08010e08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010e08:	b490      	push	{r4, r7}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e10:	4b21      	ldr	r3, [pc, #132]	; (8010e98 <SDMMC_GetCmdResp7+0x90>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a21      	ldr	r2, [pc, #132]	; (8010e9c <SDMMC_GetCmdResp7+0x94>)
 8010e16:	fba2 2303 	umull	r2, r3, r2, r3
 8010e1a:	0a5b      	lsrs	r3, r3, #9
 8010e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e24:	4623      	mov	r3, r4
 8010e26:	1e5c      	subs	r4, r3, #1
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d102      	bne.n	8010e32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e30:	e02c      	b.n	8010e8c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d0f0      	beq.n	8010e24 <SDMMC_GetCmdResp7+0x1c>
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1eb      	bne.n	8010e24 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e50:	f003 0304 	and.w	r3, r3, #4
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d004      	beq.n	8010e62 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2204      	movs	r2, #4
 8010e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e5e:	2304      	movs	r3, #4
 8010e60:	e014      	b.n	8010e8c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2201      	movs	r2, #1
 8010e72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e74:	2301      	movs	r3, #1
 8010e76:	e009      	b.n	8010e8c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2240      	movs	r2, #64	; 0x40
 8010e88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e8a:	2300      	movs	r3, #0
  
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bc90      	pop	{r4, r7}
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	20000000 	.word	0x20000000
 8010e9c:	10624dd3 	.word	0x10624dd3

08010ea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ea4:	4904      	ldr	r1, [pc, #16]	; (8010eb8 <MX_FATFS_Init+0x18>)
 8010ea6:	4805      	ldr	r0, [pc, #20]	; (8010ebc <MX_FATFS_Init+0x1c>)
 8010ea8:	f003 fb9c 	bl	80145e4 <FATFS_LinkDriver>
 8010eac:	4603      	mov	r3, r0
 8010eae:	461a      	mov	r2, r3
 8010eb0:	4b03      	ldr	r3, [pc, #12]	; (8010ec0 <MX_FATFS_Init+0x20>)
 8010eb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010eb4:	bf00      	nop
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	2004ab00 	.word	0x2004ab00
 8010ebc:	08018ea0 	.word	0x08018ea0
 8010ec0:	2004aafc 	.word	0x2004aafc

08010ec4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010ece:	f000 f896 	bl	8010ffe <BSP_SD_IsDetected>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d001      	beq.n	8010edc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e012      	b.n	8010f02 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010edc:	480b      	ldr	r0, [pc, #44]	; (8010f0c <BSP_SD_Init+0x48>)
 8010ede:	f7fb ffa5 	bl	800ce2c <HAL_SD_Init>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d109      	bne.n	8010f00 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ef0:	4806      	ldr	r0, [pc, #24]	; (8010f0c <BSP_SD_Init+0x48>)
 8010ef2:	f7fc fd4f 	bl	800d994 <HAL_SD_ConfigWideBusOperation>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010efc:	2301      	movs	r3, #1
 8010efe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010f00:	79fb      	ldrb	r3, [r7, #7]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	2004a8fc 	.word	0x2004a8fc

08010f10 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b086      	sub	sp, #24
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	68ba      	ldr	r2, [r7, #8]
 8010f24:	68f9      	ldr	r1, [r7, #12]
 8010f26:	4806      	ldr	r0, [pc, #24]	; (8010f40 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010f28:	f7fc f810 	bl	800cf4c <HAL_SD_ReadBlocks_DMA>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d001      	beq.n	8010f36 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f32:	2301      	movs	r3, #1
 8010f34:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	2004a8fc 	.word	0x2004a8fc

08010f44 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b086      	sub	sp, #24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f50:	2300      	movs	r3, #0
 8010f52:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	68f9      	ldr	r1, [r7, #12]
 8010f5a:	4806      	ldr	r0, [pc, #24]	; (8010f74 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010f5c:	f7fc f8de 	bl	800d11c <HAL_SD_WriteBlocks_DMA>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	2004a8fc 	.word	0x2004a8fc

08010f78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010f7c:	4805      	ldr	r0, [pc, #20]	; (8010f94 <BSP_SD_GetCardState+0x1c>)
 8010f7e:	f7fc fd85 	bl	800da8c <HAL_SD_GetCardState>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b04      	cmp	r3, #4
 8010f86:	bf14      	ite	ne
 8010f88:	2301      	movne	r3, #1
 8010f8a:	2300      	moveq	r3, #0
 8010f8c:	b2db      	uxtb	r3, r3
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	2004a8fc 	.word	0x2004a8fc

08010f98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	4803      	ldr	r0, [pc, #12]	; (8010fb0 <BSP_SD_GetCardInfo+0x18>)
 8010fa4:	f7fc fcca 	bl	800d93c <HAL_SD_GetCardInfo>
}
 8010fa8:	bf00      	nop
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	2004a8fc 	.word	0x2004a8fc

08010fb4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010fbc:	f000 f818 	bl	8010ff0 <BSP_SD_AbortCallback>
}
 8010fc0:	bf00      	nop
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010fd0:	f000 f9a8 	bl	8011324 <BSP_SD_WriteCpltCallback>
}
 8010fd4:	bf00      	nop
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010fe4:	f000 f9aa 	bl	801133c <BSP_SD_ReadCpltCallback>
}
 8010fe8:	bf00      	nop
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0

}
 8010ff4:	bf00      	nop
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b082      	sub	sp, #8
 8011002:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011004:	2301      	movs	r3, #1
 8011006:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011008:	f000 f80c 	bl	8011024 <BSP_PlatformIsDetected>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d101      	bne.n	8011016 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011012:	2300      	movs	r3, #0
 8011014:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	b2db      	uxtb	r3, r3
}
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
	...

08011024 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801102a:	2301      	movs	r3, #1
 801102c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801102e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011032:	4806      	ldr	r0, [pc, #24]	; (801104c <BSP_PlatformIsDetected+0x28>)
 8011034:	f7fa f866 	bl	800b104 <HAL_GPIO_ReadPin>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d001      	beq.n	8011042 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801103e:	2300      	movs	r3, #0
 8011040:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011042:	79fb      	ldrb	r3, [r7, #7]
}
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	40020000 	.word	0x40020000

08011050 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011058:	f7f8 fdca 	bl	8009bf0 <HAL_GetTick>
 801105c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801105e:	e006      	b.n	801106e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011060:	f7ff ff8a 	bl	8010f78 <BSP_SD_GetCardState>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d101      	bne.n	801106e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801106a:	2300      	movs	r3, #0
 801106c:	e009      	b.n	8011082 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801106e:	f7f8 fdbf 	bl	8009bf0 <HAL_GetTick>
 8011072:	4602      	mov	r2, r0
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	429a      	cmp	r2, r3
 801107c:	d8f0      	bhi.n	8011060 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	4603      	mov	r3, r0
 8011094:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <SD_CheckStatus+0x38>)
 8011098:	2201      	movs	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801109c:	f7ff ff6c 	bl	8010f78 <BSP_SD_GetCardState>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d107      	bne.n	80110b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80110a6:	4b07      	ldr	r3, [pc, #28]	; (80110c4 <SD_CheckStatus+0x38>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f023 0301 	bic.w	r3, r3, #1
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <SD_CheckStatus+0x38>)
 80110b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80110b6:	4b03      	ldr	r3, [pc, #12]	; (80110c4 <SD_CheckStatus+0x38>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	b2db      	uxtb	r3, r3
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	20000009 	.word	0x20000009

080110c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	4603      	mov	r3, r0
 80110d0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80110d2:	f7ff fef7 	bl	8010ec4 <BSP_SD_Init>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d107      	bne.n	80110ec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80110dc:	79fb      	ldrb	r3, [r7, #7]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7ff ffd4 	bl	801108c <SD_CheckStatus>
 80110e4:	4603      	mov	r3, r0
 80110e6:	461a      	mov	r2, r3
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <SD_initialize+0x34>)
 80110ea:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80110ec:	4b03      	ldr	r3, [pc, #12]	; (80110fc <SD_initialize+0x34>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	b2db      	uxtb	r3, r3
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20000009 	.word	0x20000009

08011100 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	4603      	mov	r3, r0
 8011108:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801110a:	79fb      	ldrb	r3, [r7, #7]
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff ffbd 	bl	801108c <SD_CheckStatus>
 8011112:	4603      	mov	r3, r0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	60b9      	str	r1, [r7, #8]
 8011124:	607a      	str	r2, [r7, #4]
 8011126:	603b      	str	r3, [r7, #0]
 8011128:	4603      	mov	r3, r0
 801112a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801112c:	2301      	movs	r3, #1
 801112e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011130:	f247 5030 	movw	r0, #30000	; 0x7530
 8011134:	f7ff ff8c 	bl	8011050 <SD_CheckStatusWithTimeout>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	da01      	bge.n	8011142 <SD_read+0x26>
  {
    return res;
 801113e:	7dfb      	ldrb	r3, [r7, #23]
 8011140:	e03b      	b.n	80111ba <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	6879      	ldr	r1, [r7, #4]
 8011146:	68b8      	ldr	r0, [r7, #8]
 8011148:	f7ff fee2 	bl	8010f10 <BSP_SD_ReadBlocks_DMA>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d132      	bne.n	80111b8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011152:	4b1c      	ldr	r3, [pc, #112]	; (80111c4 <SD_read+0xa8>)
 8011154:	2200      	movs	r2, #0
 8011156:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011158:	f7f8 fd4a 	bl	8009bf0 <HAL_GetTick>
 801115c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801115e:	bf00      	nop
 8011160:	4b18      	ldr	r3, [pc, #96]	; (80111c4 <SD_read+0xa8>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d108      	bne.n	801117a <SD_read+0x5e>
 8011168:	f7f8 fd42 	bl	8009bf0 <HAL_GetTick>
 801116c:	4602      	mov	r2, r0
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	f247 522f 	movw	r2, #29999	; 0x752f
 8011176:	4293      	cmp	r3, r2
 8011178:	d9f2      	bls.n	8011160 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801117a:	4b12      	ldr	r3, [pc, #72]	; (80111c4 <SD_read+0xa8>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011182:	2301      	movs	r3, #1
 8011184:	75fb      	strb	r3, [r7, #23]
 8011186:	e017      	b.n	80111b8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011188:	4b0e      	ldr	r3, [pc, #56]	; (80111c4 <SD_read+0xa8>)
 801118a:	2200      	movs	r2, #0
 801118c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801118e:	f7f8 fd2f 	bl	8009bf0 <HAL_GetTick>
 8011192:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011194:	e007      	b.n	80111a6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011196:	f7ff feef 	bl	8010f78 <BSP_SD_GetCardState>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d102      	bne.n	80111a6 <SD_read+0x8a>
          {
            res = RES_OK;
 80111a0:	2300      	movs	r3, #0
 80111a2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80111a4:	e008      	b.n	80111b8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80111a6:	f7f8 fd23 	bl	8009bf0 <HAL_GetTick>
 80111aa:	4602      	mov	r2, r0
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d9ee      	bls.n	8011196 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80111b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3718      	adds	r7, #24
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	20048198 	.word	0x20048198

080111c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b086      	sub	sp, #24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60b9      	str	r1, [r7, #8]
 80111d0:	607a      	str	r2, [r7, #4]
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	4603      	mov	r3, r0
 80111d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111d8:	2301      	movs	r3, #1
 80111da:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80111dc:	4b24      	ldr	r3, [pc, #144]	; (8011270 <SD_write+0xa8>)
 80111de:	2200      	movs	r2, #0
 80111e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111e2:	f247 5030 	movw	r0, #30000	; 0x7530
 80111e6:	f7ff ff33 	bl	8011050 <SD_CheckStatusWithTimeout>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	da01      	bge.n	80111f4 <SD_write+0x2c>
  {
    return res;
 80111f0:	7dfb      	ldrb	r3, [r7, #23]
 80111f2:	e038      	b.n	8011266 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80111f4:	683a      	ldr	r2, [r7, #0]
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	68b8      	ldr	r0, [r7, #8]
 80111fa:	f7ff fea3 	bl	8010f44 <BSP_SD_WriteBlocks_DMA>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d12f      	bne.n	8011264 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011204:	f7f8 fcf4 	bl	8009bf0 <HAL_GetTick>
 8011208:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801120a:	bf00      	nop
 801120c:	4b18      	ldr	r3, [pc, #96]	; (8011270 <SD_write+0xa8>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d108      	bne.n	8011226 <SD_write+0x5e>
 8011214:	f7f8 fcec 	bl	8009bf0 <HAL_GetTick>
 8011218:	4602      	mov	r2, r0
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	1ad3      	subs	r3, r2, r3
 801121e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011222:	4293      	cmp	r3, r2
 8011224:	d9f2      	bls.n	801120c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011226:	4b12      	ldr	r3, [pc, #72]	; (8011270 <SD_write+0xa8>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d102      	bne.n	8011234 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801122e:	2301      	movs	r3, #1
 8011230:	75fb      	strb	r3, [r7, #23]
 8011232:	e017      	b.n	8011264 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011234:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <SD_write+0xa8>)
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801123a:	f7f8 fcd9 	bl	8009bf0 <HAL_GetTick>
 801123e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011240:	e007      	b.n	8011252 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011242:	f7ff fe99 	bl	8010f78 <BSP_SD_GetCardState>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d102      	bne.n	8011252 <SD_write+0x8a>
          {
            res = RES_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	75fb      	strb	r3, [r7, #23]
            break;
 8011250:	e008      	b.n	8011264 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011252:	f7f8 fccd 	bl	8009bf0 <HAL_GetTick>
 8011256:	4602      	mov	r2, r0
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011260:	4293      	cmp	r3, r2
 8011262:	d9ee      	bls.n	8011242 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011264:	7dfb      	ldrb	r3, [r7, #23]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3718      	adds	r7, #24
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	20048194 	.word	0x20048194

08011274 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b08c      	sub	sp, #48	; 0x30
 8011278:	af00      	add	r7, sp, #0
 801127a:	4603      	mov	r3, r0
 801127c:	603a      	str	r2, [r7, #0]
 801127e:	71fb      	strb	r3, [r7, #7]
 8011280:	460b      	mov	r3, r1
 8011282:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011284:	2301      	movs	r3, #1
 8011286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801128a:	4b25      	ldr	r3, [pc, #148]	; (8011320 <SD_ioctl+0xac>)
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	b2db      	uxtb	r3, r3
 8011290:	f003 0301 	and.w	r3, r3, #1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d001      	beq.n	801129c <SD_ioctl+0x28>
 8011298:	2303      	movs	r3, #3
 801129a:	e03c      	b.n	8011316 <SD_ioctl+0xa2>

  switch (cmd)
 801129c:	79bb      	ldrb	r3, [r7, #6]
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d834      	bhi.n	801130c <SD_ioctl+0x98>
 80112a2:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <SD_ioctl+0x34>)
 80112a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a8:	080112b9 	.word	0x080112b9
 80112ac:	080112c1 	.word	0x080112c1
 80112b0:	080112d9 	.word	0x080112d9
 80112b4:	080112f3 	.word	0x080112f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112b8:	2300      	movs	r3, #0
 80112ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112be:	e028      	b.n	8011312 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112c0:	f107 030c 	add.w	r3, r7, #12
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff fe67 	bl	8010f98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112d0:	2300      	movs	r3, #0
 80112d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112d6:	e01c      	b.n	8011312 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112d8:	f107 030c 	add.w	r3, r7, #12
 80112dc:	4618      	mov	r0, r3
 80112de:	f7ff fe5b 	bl	8010f98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80112e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112ea:	2300      	movs	r3, #0
 80112ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112f0:	e00f      	b.n	8011312 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112f2:	f107 030c 	add.w	r3, r7, #12
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7ff fe4e 	bl	8010f98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	0a5a      	lsrs	r2, r3, #9
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801130a:	e002      	b.n	8011312 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801130c:	2304      	movs	r3, #4
 801130e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011316:	4618      	mov	r0, r3
 8011318:	3730      	adds	r7, #48	; 0x30
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	20000009 	.word	0x20000009

08011324 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011324:	b480      	push	{r7}
 8011326:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011328:	4b03      	ldr	r3, [pc, #12]	; (8011338 <BSP_SD_WriteCpltCallback+0x14>)
 801132a:	2201      	movs	r2, #1
 801132c:	601a      	str	r2, [r3, #0]
}
 801132e:	bf00      	nop
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	20048194 	.word	0x20048194

0801133c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801133c:	b480      	push	{r7}
 801133e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011340:	4b03      	ldr	r3, [pc, #12]	; (8011350 <BSP_SD_ReadCpltCallback+0x14>)
 8011342:	2201      	movs	r2, #1
 8011344:	601a      	str	r2, [r3, #0]
}
 8011346:	bf00      	nop
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr
 8011350:	20048198 	.word	0x20048198

08011354 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801135e:	79fb      	ldrb	r3, [r7, #7]
 8011360:	4a08      	ldr	r2, [pc, #32]	; (8011384 <disk_status+0x30>)
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4413      	add	r3, r2
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	79fa      	ldrb	r2, [r7, #7]
 801136c:	4905      	ldr	r1, [pc, #20]	; (8011384 <disk_status+0x30>)
 801136e:	440a      	add	r2, r1
 8011370:	7a12      	ldrb	r2, [r2, #8]
 8011372:	4610      	mov	r0, r2
 8011374:	4798      	blx	r3
 8011376:	4603      	mov	r3, r0
 8011378:	73fb      	strb	r3, [r7, #15]
  return stat;
 801137a:	7bfb      	ldrb	r3, [r7, #15]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	200481c4 	.word	0x200481c4

08011388 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	4603      	mov	r3, r0
 8011390:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011396:	79fb      	ldrb	r3, [r7, #7]
 8011398:	4a0d      	ldr	r2, [pc, #52]	; (80113d0 <disk_initialize+0x48>)
 801139a:	5cd3      	ldrb	r3, [r2, r3]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d111      	bne.n	80113c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80113a0:	79fb      	ldrb	r3, [r7, #7]
 80113a2:	4a0b      	ldr	r2, [pc, #44]	; (80113d0 <disk_initialize+0x48>)
 80113a4:	2101      	movs	r1, #1
 80113a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	4a09      	ldr	r2, [pc, #36]	; (80113d0 <disk_initialize+0x48>)
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	4413      	add	r3, r2
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	79fa      	ldrb	r2, [r7, #7]
 80113b6:	4906      	ldr	r1, [pc, #24]	; (80113d0 <disk_initialize+0x48>)
 80113b8:	440a      	add	r2, r1
 80113ba:	7a12      	ldrb	r2, [r2, #8]
 80113bc:	4610      	mov	r0, r2
 80113be:	4798      	blx	r3
 80113c0:	4603      	mov	r3, r0
 80113c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80113c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	200481c4 	.word	0x200481c4

080113d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80113d4:	b590      	push	{r4, r7, lr}
 80113d6:	b087      	sub	sp, #28
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60b9      	str	r1, [r7, #8]
 80113dc:	607a      	str	r2, [r7, #4]
 80113de:	603b      	str	r3, [r7, #0]
 80113e0:	4603      	mov	r3, r0
 80113e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80113e4:	7bfb      	ldrb	r3, [r7, #15]
 80113e6:	4a0a      	ldr	r2, [pc, #40]	; (8011410 <disk_read+0x3c>)
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	4413      	add	r3, r2
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	689c      	ldr	r4, [r3, #8]
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	4a07      	ldr	r2, [pc, #28]	; (8011410 <disk_read+0x3c>)
 80113f4:	4413      	add	r3, r2
 80113f6:	7a18      	ldrb	r0, [r3, #8]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	68b9      	ldr	r1, [r7, #8]
 80113fe:	47a0      	blx	r4
 8011400:	4603      	mov	r3, r0
 8011402:	75fb      	strb	r3, [r7, #23]
  return res;
 8011404:	7dfb      	ldrb	r3, [r7, #23]
}
 8011406:	4618      	mov	r0, r3
 8011408:	371c      	adds	r7, #28
 801140a:	46bd      	mov	sp, r7
 801140c:	bd90      	pop	{r4, r7, pc}
 801140e:	bf00      	nop
 8011410:	200481c4 	.word	0x200481c4

08011414 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011414:	b590      	push	{r4, r7, lr}
 8011416:	b087      	sub	sp, #28
 8011418:	af00      	add	r7, sp, #0
 801141a:	60b9      	str	r1, [r7, #8]
 801141c:	607a      	str	r2, [r7, #4]
 801141e:	603b      	str	r3, [r7, #0]
 8011420:	4603      	mov	r3, r0
 8011422:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011424:	7bfb      	ldrb	r3, [r7, #15]
 8011426:	4a0a      	ldr	r2, [pc, #40]	; (8011450 <disk_write+0x3c>)
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	68dc      	ldr	r4, [r3, #12]
 8011430:	7bfb      	ldrb	r3, [r7, #15]
 8011432:	4a07      	ldr	r2, [pc, #28]	; (8011450 <disk_write+0x3c>)
 8011434:	4413      	add	r3, r2
 8011436:	7a18      	ldrb	r0, [r3, #8]
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	68b9      	ldr	r1, [r7, #8]
 801143e:	47a0      	blx	r4
 8011440:	4603      	mov	r3, r0
 8011442:	75fb      	strb	r3, [r7, #23]
  return res;
 8011444:	7dfb      	ldrb	r3, [r7, #23]
}
 8011446:	4618      	mov	r0, r3
 8011448:	371c      	adds	r7, #28
 801144a:	46bd      	mov	sp, r7
 801144c:	bd90      	pop	{r4, r7, pc}
 801144e:	bf00      	nop
 8011450:	200481c4 	.word	0x200481c4

08011454 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	4603      	mov	r3, r0
 801145c:	603a      	str	r2, [r7, #0]
 801145e:	71fb      	strb	r3, [r7, #7]
 8011460:	460b      	mov	r3, r1
 8011462:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011464:	79fb      	ldrb	r3, [r7, #7]
 8011466:	4a09      	ldr	r2, [pc, #36]	; (801148c <disk_ioctl+0x38>)
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	79fa      	ldrb	r2, [r7, #7]
 8011472:	4906      	ldr	r1, [pc, #24]	; (801148c <disk_ioctl+0x38>)
 8011474:	440a      	add	r2, r1
 8011476:	7a10      	ldrb	r0, [r2, #8]
 8011478:	79b9      	ldrb	r1, [r7, #6]
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	4798      	blx	r3
 801147e:	4603      	mov	r3, r0
 8011480:	73fb      	strb	r3, [r7, #15]
  return res;
 8011482:	7bfb      	ldrb	r3, [r7, #15]
}
 8011484:	4618      	mov	r0, r3
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	200481c4 	.word	0x200481c4

08011490 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	3301      	adds	r3, #1
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80114a0:	89fb      	ldrh	r3, [r7, #14]
 80114a2:	021b      	lsls	r3, r3, #8
 80114a4:	b21a      	sxth	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	b21b      	sxth	r3, r3
 80114ac:	4313      	orrs	r3, r2
 80114ae:	b21b      	sxth	r3, r3
 80114b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80114b2:	89fb      	ldrh	r3, [r7, #14]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3303      	adds	r3, #3
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	021b      	lsls	r3, r3, #8
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	3202      	adds	r2, #2
 80114d8:	7812      	ldrb	r2, [r2, #0]
 80114da:	4313      	orrs	r3, r2
 80114dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	021b      	lsls	r3, r3, #8
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	3201      	adds	r2, #1
 80114e6:	7812      	ldrb	r2, [r2, #0]
 80114e8:	4313      	orrs	r3, r2
 80114ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	021b      	lsls	r3, r3, #8
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	7812      	ldrb	r2, [r2, #0]
 80114f4:	4313      	orrs	r3, r2
 80114f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80114f8:	68fb      	ldr	r3, [r7, #12]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3714      	adds	r7, #20
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011506:	b480      	push	{r7}
 8011508:	b083      	sub	sp, #12
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	460b      	mov	r3, r1
 8011510:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	1c5a      	adds	r2, r3, #1
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	887a      	ldrh	r2, [r7, #2]
 801151a:	b2d2      	uxtb	r2, r2
 801151c:	701a      	strb	r2, [r3, #0]
 801151e:	887b      	ldrh	r3, [r7, #2]
 8011520:	0a1b      	lsrs	r3, r3, #8
 8011522:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	1c5a      	adds	r2, r3, #1
 8011528:	607a      	str	r2, [r7, #4]
 801152a:	887a      	ldrh	r2, [r7, #2]
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	701a      	strb	r2, [r3, #0]
}
 8011530:	bf00      	nop
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	1c5a      	adds	r2, r3, #1
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	b2d2      	uxtb	r2, r2
 8011550:	701a      	strb	r2, [r3, #0]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	0a1b      	lsrs	r3, r3, #8
 8011556:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	607a      	str	r2, [r7, #4]
 801155e:	683a      	ldr	r2, [r7, #0]
 8011560:	b2d2      	uxtb	r2, r2
 8011562:	701a      	strb	r2, [r3, #0]
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	0a1b      	lsrs	r3, r3, #8
 8011568:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	607a      	str	r2, [r7, #4]
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	b2d2      	uxtb	r2, r2
 8011574:	701a      	strb	r2, [r3, #0]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	0a1b      	lsrs	r3, r3, #8
 801157a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	607a      	str	r2, [r7, #4]
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	b2d2      	uxtb	r2, r2
 8011586:	701a      	strb	r2, [r3, #0]
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011594:	b480      	push	{r7}
 8011596:	b087      	sub	sp, #28
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00d      	beq.n	80115ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	1c53      	adds	r3, r2, #1
 80115b2:	613b      	str	r3, [r7, #16]
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	1c59      	adds	r1, r3, #1
 80115b8:	6179      	str	r1, [r7, #20]
 80115ba:	7812      	ldrb	r2, [r2, #0]
 80115bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	3b01      	subs	r3, #1
 80115c2:	607b      	str	r3, [r7, #4]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d1f1      	bne.n	80115ae <mem_cpy+0x1a>
	}
}
 80115ca:	bf00      	nop
 80115cc:	371c      	adds	r7, #28
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80115d6:	b480      	push	{r7}
 80115d8:	b087      	sub	sp, #28
 80115da:	af00      	add	r7, sp, #0
 80115dc:	60f8      	str	r0, [r7, #12]
 80115de:	60b9      	str	r1, [r7, #8]
 80115e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	1c5a      	adds	r2, r3, #1
 80115ea:	617a      	str	r2, [r7, #20]
 80115ec:	68ba      	ldr	r2, [r7, #8]
 80115ee:	b2d2      	uxtb	r2, r2
 80115f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	3b01      	subs	r3, #1
 80115f6:	607b      	str	r3, [r7, #4]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1f3      	bne.n	80115e6 <mem_set+0x10>
}
 80115fe:	bf00      	nop
 8011600:	371c      	adds	r7, #28
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr

0801160a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801160a:	b480      	push	{r7}
 801160c:	b089      	sub	sp, #36	; 0x24
 801160e:	af00      	add	r7, sp, #0
 8011610:	60f8      	str	r0, [r7, #12]
 8011612:	60b9      	str	r1, [r7, #8]
 8011614:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	61fb      	str	r3, [r7, #28]
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	61fa      	str	r2, [r7, #28]
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	4619      	mov	r1, r3
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	1c5a      	adds	r2, r3, #1
 8011630:	61ba      	str	r2, [r7, #24]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	1acb      	subs	r3, r1, r3
 8011636:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3b01      	subs	r3, #1
 801163c:	607b      	str	r3, [r7, #4]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <mem_cmp+0x40>
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d0eb      	beq.n	8011622 <mem_cmp+0x18>

	return r;
 801164a:	697b      	ldr	r3, [r7, #20]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3724      	adds	r7, #36	; 0x24
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011662:	e002      	b.n	801166a <chk_chr+0x12>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	3301      	adds	r3, #1
 8011668:	607b      	str	r3, [r7, #4]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d005      	beq.n	801167e <chk_chr+0x26>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	461a      	mov	r2, r3
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	4293      	cmp	r3, r2
 801167c:	d1f2      	bne.n	8011664 <chk_chr+0xc>
	return *str;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	781b      	ldrb	r3, [r3, #0]
}
 8011682:	4618      	mov	r0, r3
 8011684:	370c      	adds	r7, #12
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
	...

08011690 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801169a:	2300      	movs	r3, #0
 801169c:	60bb      	str	r3, [r7, #8]
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	60fb      	str	r3, [r7, #12]
 80116a2:	e029      	b.n	80116f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80116a4:	4a27      	ldr	r2, [pc, #156]	; (8011744 <chk_lock+0xb4>)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	011b      	lsls	r3, r3, #4
 80116aa:	4413      	add	r3, r2
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d01d      	beq.n	80116ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116b2:	4a24      	ldr	r2, [pc, #144]	; (8011744 <chk_lock+0xb4>)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	4413      	add	r3, r2
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d116      	bne.n	80116f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80116c4:	4a1f      	ldr	r2, [pc, #124]	; (8011744 <chk_lock+0xb4>)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	011b      	lsls	r3, r3, #4
 80116ca:	4413      	add	r3, r2
 80116cc:	3304      	adds	r3, #4
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d10c      	bne.n	80116f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80116d8:	4a1a      	ldr	r2, [pc, #104]	; (8011744 <chk_lock+0xb4>)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	011b      	lsls	r3, r3, #4
 80116de:	4413      	add	r3, r2
 80116e0:	3308      	adds	r3, #8
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d102      	bne.n	80116f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80116ec:	e007      	b.n	80116fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80116ee:	2301      	movs	r3, #1
 80116f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	3301      	adds	r3, #1
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d9d2      	bls.n	80116a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2b02      	cmp	r3, #2
 8011702:	d109      	bne.n	8011718 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d102      	bne.n	8011710 <chk_lock+0x80>
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	2b02      	cmp	r3, #2
 801170e:	d101      	bne.n	8011714 <chk_lock+0x84>
 8011710:	2300      	movs	r3, #0
 8011712:	e010      	b.n	8011736 <chk_lock+0xa6>
 8011714:	2312      	movs	r3, #18
 8011716:	e00e      	b.n	8011736 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d108      	bne.n	8011730 <chk_lock+0xa0>
 801171e:	4a09      	ldr	r2, [pc, #36]	; (8011744 <chk_lock+0xb4>)
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	011b      	lsls	r3, r3, #4
 8011724:	4413      	add	r3, r2
 8011726:	330c      	adds	r3, #12
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801172e:	d101      	bne.n	8011734 <chk_lock+0xa4>
 8011730:	2310      	movs	r3, #16
 8011732:	e000      	b.n	8011736 <chk_lock+0xa6>
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	200481a4 	.word	0x200481a4

08011748 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011748:	b480      	push	{r7}
 801174a:	b083      	sub	sp, #12
 801174c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801174e:	2300      	movs	r3, #0
 8011750:	607b      	str	r3, [r7, #4]
 8011752:	e002      	b.n	801175a <enq_lock+0x12>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	3301      	adds	r3, #1
 8011758:	607b      	str	r3, [r7, #4]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d806      	bhi.n	801176e <enq_lock+0x26>
 8011760:	4a09      	ldr	r2, [pc, #36]	; (8011788 <enq_lock+0x40>)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	011b      	lsls	r3, r3, #4
 8011766:	4413      	add	r3, r2
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1f2      	bne.n	8011754 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b02      	cmp	r3, #2
 8011772:	bf14      	ite	ne
 8011774:	2301      	movne	r3, #1
 8011776:	2300      	moveq	r3, #0
 8011778:	b2db      	uxtb	r3, r3
}
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	200481a4 	.word	0x200481a4

0801178c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011796:	2300      	movs	r3, #0
 8011798:	60fb      	str	r3, [r7, #12]
 801179a:	e01f      	b.n	80117dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801179c:	4a41      	ldr	r2, [pc, #260]	; (80118a4 <inc_lock+0x118>)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	011b      	lsls	r3, r3, #4
 80117a2:	4413      	add	r3, r2
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d113      	bne.n	80117d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80117ae:	4a3d      	ldr	r2, [pc, #244]	; (80118a4 <inc_lock+0x118>)
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	011b      	lsls	r3, r3, #4
 80117b4:	4413      	add	r3, r2
 80117b6:	3304      	adds	r3, #4
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80117be:	429a      	cmp	r2, r3
 80117c0:	d109      	bne.n	80117d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80117c2:	4a38      	ldr	r2, [pc, #224]	; (80118a4 <inc_lock+0x118>)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	011b      	lsls	r3, r3, #4
 80117c8:	4413      	add	r3, r2
 80117ca:	3308      	adds	r3, #8
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d006      	beq.n	80117e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	3301      	adds	r3, #1
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d9dc      	bls.n	801179c <inc_lock+0x10>
 80117e2:	e000      	b.n	80117e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80117e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b02      	cmp	r3, #2
 80117ea:	d132      	bne.n	8011852 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117ec:	2300      	movs	r3, #0
 80117ee:	60fb      	str	r3, [r7, #12]
 80117f0:	e002      	b.n	80117f8 <inc_lock+0x6c>
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3301      	adds	r3, #1
 80117f6:	60fb      	str	r3, [r7, #12]
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d806      	bhi.n	801180c <inc_lock+0x80>
 80117fe:	4a29      	ldr	r2, [pc, #164]	; (80118a4 <inc_lock+0x118>)
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	011b      	lsls	r3, r3, #4
 8011804:	4413      	add	r3, r2
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1f2      	bne.n	80117f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2b02      	cmp	r3, #2
 8011810:	d101      	bne.n	8011816 <inc_lock+0x8a>
 8011812:	2300      	movs	r3, #0
 8011814:	e040      	b.n	8011898 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	4922      	ldr	r1, [pc, #136]	; (80118a4 <inc_lock+0x118>)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	440b      	add	r3, r1
 8011822:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689a      	ldr	r2, [r3, #8]
 8011828:	491e      	ldr	r1, [pc, #120]	; (80118a4 <inc_lock+0x118>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	440b      	add	r3, r1
 8011830:	3304      	adds	r3, #4
 8011832:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	695a      	ldr	r2, [r3, #20]
 8011838:	491a      	ldr	r1, [pc, #104]	; (80118a4 <inc_lock+0x118>)
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	011b      	lsls	r3, r3, #4
 801183e:	440b      	add	r3, r1
 8011840:	3308      	adds	r3, #8
 8011842:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011844:	4a17      	ldr	r2, [pc, #92]	; (80118a4 <inc_lock+0x118>)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	011b      	lsls	r3, r3, #4
 801184a:	4413      	add	r3, r2
 801184c:	330c      	adds	r3, #12
 801184e:	2200      	movs	r2, #0
 8011850:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d009      	beq.n	801186c <inc_lock+0xe0>
 8011858:	4a12      	ldr	r2, [pc, #72]	; (80118a4 <inc_lock+0x118>)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	011b      	lsls	r3, r3, #4
 801185e:	4413      	add	r3, r2
 8011860:	330c      	adds	r3, #12
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <inc_lock+0xe0>
 8011868:	2300      	movs	r3, #0
 801186a:	e015      	b.n	8011898 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d108      	bne.n	8011884 <inc_lock+0xf8>
 8011872:	4a0c      	ldr	r2, [pc, #48]	; (80118a4 <inc_lock+0x118>)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	011b      	lsls	r3, r3, #4
 8011878:	4413      	add	r3, r2
 801187a:	330c      	adds	r3, #12
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	3301      	adds	r3, #1
 8011880:	b29a      	uxth	r2, r3
 8011882:	e001      	b.n	8011888 <inc_lock+0xfc>
 8011884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011888:	4906      	ldr	r1, [pc, #24]	; (80118a4 <inc_lock+0x118>)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	011b      	lsls	r3, r3, #4
 801188e:	440b      	add	r3, r1
 8011890:	330c      	adds	r3, #12
 8011892:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	3301      	adds	r3, #1
}
 8011898:	4618      	mov	r0, r3
 801189a:	3714      	adds	r7, #20
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr
 80118a4:	200481a4 	.word	0x200481a4

080118a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3b01      	subs	r3, #1
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d825      	bhi.n	8011908 <dec_lock+0x60>
		n = Files[i].ctr;
 80118bc:	4a17      	ldr	r2, [pc, #92]	; (801191c <dec_lock+0x74>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	011b      	lsls	r3, r3, #4
 80118c2:	4413      	add	r3, r2
 80118c4:	330c      	adds	r3, #12
 80118c6:	881b      	ldrh	r3, [r3, #0]
 80118c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80118ca:	89fb      	ldrh	r3, [r7, #14]
 80118cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118d0:	d101      	bne.n	80118d6 <dec_lock+0x2e>
 80118d2:	2300      	movs	r3, #0
 80118d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80118d6:	89fb      	ldrh	r3, [r7, #14]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <dec_lock+0x3a>
 80118dc:	89fb      	ldrh	r3, [r7, #14]
 80118de:	3b01      	subs	r3, #1
 80118e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80118e2:	4a0e      	ldr	r2, [pc, #56]	; (801191c <dec_lock+0x74>)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	011b      	lsls	r3, r3, #4
 80118e8:	4413      	add	r3, r2
 80118ea:	330c      	adds	r3, #12
 80118ec:	89fa      	ldrh	r2, [r7, #14]
 80118ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80118f0:	89fb      	ldrh	r3, [r7, #14]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d105      	bne.n	8011902 <dec_lock+0x5a>
 80118f6:	4a09      	ldr	r2, [pc, #36]	; (801191c <dec_lock+0x74>)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	011b      	lsls	r3, r3, #4
 80118fc:	4413      	add	r3, r2
 80118fe:	2200      	movs	r2, #0
 8011900:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	737b      	strb	r3, [r7, #13]
 8011906:	e001      	b.n	801190c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011908:	2302      	movs	r3, #2
 801190a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801190c:	7b7b      	ldrb	r3, [r7, #13]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	200481a4 	.word	0x200481a4

08011920 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011920:	b480      	push	{r7}
 8011922:	b085      	sub	sp, #20
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]
 801192c:	e010      	b.n	8011950 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801192e:	4a0d      	ldr	r2, [pc, #52]	; (8011964 <clear_lock+0x44>)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	011b      	lsls	r3, r3, #4
 8011934:	4413      	add	r3, r2
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	429a      	cmp	r2, r3
 801193c:	d105      	bne.n	801194a <clear_lock+0x2a>
 801193e:	4a09      	ldr	r2, [pc, #36]	; (8011964 <clear_lock+0x44>)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	3301      	adds	r3, #1
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d9eb      	bls.n	801192e <clear_lock+0xe>
	}
}
 8011956:	bf00      	nop
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	200481a4 	.word	0x200481a4

08011968 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	78db      	ldrb	r3, [r3, #3]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d034      	beq.n	80119e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011980:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7858      	ldrb	r0, [r3, #1]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801198c:	2301      	movs	r3, #1
 801198e:	697a      	ldr	r2, [r7, #20]
 8011990:	f7ff fd40 	bl	8011414 <disk_write>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801199a:	2301      	movs	r3, #1
 801199c:	73fb      	strb	r3, [r7, #15]
 801199e:	e022      	b.n	80119e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119aa:	697a      	ldr	r2, [r7, #20]
 80119ac:	1ad2      	subs	r2, r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d217      	bcs.n	80119e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	789b      	ldrb	r3, [r3, #2]
 80119ba:	613b      	str	r3, [r7, #16]
 80119bc:	e010      	b.n	80119e0 <sync_window+0x78>
					wsect += fs->fsize;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6a1b      	ldr	r3, [r3, #32]
 80119c2:	697a      	ldr	r2, [r7, #20]
 80119c4:	4413      	add	r3, r2
 80119c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	7858      	ldrb	r0, [r3, #1]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119d2:	2301      	movs	r3, #1
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	f7ff fd1d 	bl	8011414 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	3b01      	subs	r3, #1
 80119de:	613b      	str	r3, [r7, #16]
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d8eb      	bhi.n	80119be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80119e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3718      	adds	r7, #24
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d01b      	beq.n	8011a40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f7ff ffad 	bl	8011968 <sync_window>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d113      	bne.n	8011a40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	7858      	ldrb	r0, [r3, #1]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a22:	2301      	movs	r3, #1
 8011a24:	683a      	ldr	r2, [r7, #0]
 8011a26:	f7ff fcd5 	bl	80113d4 <disk_read>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d004      	beq.n	8011a3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011a30:	f04f 33ff 	mov.w	r3, #4294967295
 8011a34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011a36:	2301      	movs	r3, #1
 8011a38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
	...

08011a4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7ff ff87 	bl	8011968 <sync_window>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d159      	bne.n	8011b18 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b03      	cmp	r3, #3
 8011a6a:	d149      	bne.n	8011b00 <sync_fs+0xb4>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	791b      	ldrb	r3, [r3, #4]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d145      	bne.n	8011b00 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	899b      	ldrh	r3, [r3, #12]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	2100      	movs	r1, #0
 8011a82:	f7ff fda8 	bl	80115d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	3338      	adds	r3, #56	; 0x38
 8011a8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a8e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7ff fd37 	bl	8011506 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	3338      	adds	r3, #56	; 0x38
 8011a9c:	4921      	ldr	r1, [pc, #132]	; (8011b24 <sync_fs+0xd8>)
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff fd4c 	bl	801153c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	3338      	adds	r3, #56	; 0x38
 8011aa8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011aac:	491e      	ldr	r1, [pc, #120]	; (8011b28 <sync_fs+0xdc>)
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff fd44 	bl	801153c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	3338      	adds	r3, #56	; 0x38
 8011ab8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	f7ff fd3a 	bl	801153c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3338      	adds	r3, #56	; 0x38
 8011acc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	4610      	mov	r0, r2
 8011ad8:	f7ff fd30 	bl	801153c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	7858      	ldrb	r0, [r3, #1]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af4:	2301      	movs	r3, #1
 8011af6:	f7ff fc8d 	bl	8011414 <disk_write>
			fs->fsi_flag = 0;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2200      	movs	r2, #0
 8011afe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	785b      	ldrb	r3, [r3, #1]
 8011b04:	2200      	movs	r2, #0
 8011b06:	2100      	movs	r1, #0
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fca3 	bl	8011454 <disk_ioctl>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <sync_fs+0xcc>
 8011b14:	2301      	movs	r3, #1
 8011b16:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	41615252 	.word	0x41615252
 8011b28:	61417272 	.word	0x61417272

08011b2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	3b02      	subs	r3, #2
 8011b3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	69db      	ldr	r3, [r3, #28]
 8011b40:	3b02      	subs	r3, #2
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d301      	bcc.n	8011b4c <clust2sect+0x20>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	e008      	b.n	8011b5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	895b      	ldrh	r3, [r3, #10]
 8011b50:	461a      	mov	r2, r3
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	fb03 f202 	mul.w	r2, r3, r2
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5c:	4413      	add	r3, r2
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b086      	sub	sp, #24
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d904      	bls.n	8011b8a <get_fat+0x20>
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d302      	bcc.n	8011b90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	617b      	str	r3, [r7, #20]
 8011b8e:	e0b7      	b.n	8011d00 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011b90:	f04f 33ff 	mov.w	r3, #4294967295
 8011b94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	2b02      	cmp	r3, #2
 8011b9c:	d05a      	beq.n	8011c54 <get_fat+0xea>
 8011b9e:	2b03      	cmp	r3, #3
 8011ba0:	d07d      	beq.n	8011c9e <get_fat+0x134>
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	f040 80a2 	bne.w	8011cec <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	60fb      	str	r3, [r7, #12]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	085b      	lsrs	r3, r3, #1
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	899b      	ldrh	r3, [r3, #12]
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bc6:	4413      	add	r3, r2
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6938      	ldr	r0, [r7, #16]
 8011bcc:	f7ff ff10 	bl	80119f0 <move_window>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f040 808d 	bne.w	8011cf2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	1c5a      	adds	r2, r3, #1
 8011bdc:	60fa      	str	r2, [r7, #12]
 8011bde:	693a      	ldr	r2, [r7, #16]
 8011be0:	8992      	ldrh	r2, [r2, #12]
 8011be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011be6:	fb02 f201 	mul.w	r2, r2, r1
 8011bea:	1a9b      	subs	r3, r3, r2
 8011bec:	693a      	ldr	r2, [r7, #16]
 8011bee:	4413      	add	r3, r2
 8011bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011bf4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	899b      	ldrh	r3, [r3, #12]
 8011bfe:	4619      	mov	r1, r3
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c06:	4413      	add	r3, r2
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6938      	ldr	r0, [r7, #16]
 8011c0c:	f7ff fef0 	bl	80119f0 <move_window>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d16f      	bne.n	8011cf6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c22:	fb02 f201 	mul.w	r2, r2, r1
 8011c26:	1a9b      	subs	r3, r3, r2
 8011c28:	693a      	ldr	r2, [r7, #16]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c30:	021b      	lsls	r3, r3, #8
 8011c32:	461a      	mov	r2, r3
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	4313      	orrs	r3, r2
 8011c38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	f003 0301 	and.w	r3, r3, #1
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <get_fat+0xe0>
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	091b      	lsrs	r3, r3, #4
 8011c48:	e002      	b.n	8011c50 <get_fat+0xe6>
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011c50:	617b      	str	r3, [r7, #20]
			break;
 8011c52:	e055      	b.n	8011d00 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	899b      	ldrh	r3, [r3, #12]
 8011c5c:	085b      	lsrs	r3, r3, #1
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	4619      	mov	r1, r3
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c68:	4413      	add	r3, r2
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6938      	ldr	r0, [r7, #16]
 8011c6e:	f7ff febf 	bl	80119f0 <move_window>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d140      	bne.n	8011cfa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	693a      	ldr	r2, [r7, #16]
 8011c84:	8992      	ldrh	r2, [r2, #12]
 8011c86:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c8a:	fb02 f200 	mul.w	r2, r2, r0
 8011c8e:	1a9b      	subs	r3, r3, r2
 8011c90:	440b      	add	r3, r1
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff fbfc 	bl	8011490 <ld_word>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	617b      	str	r3, [r7, #20]
			break;
 8011c9c:	e030      	b.n	8011d00 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	089b      	lsrs	r3, r3, #2
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	4619      	mov	r1, r3
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cb2:	4413      	add	r3, r2
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6938      	ldr	r0, [r7, #16]
 8011cb8:	f7ff fe9a 	bl	80119f0 <move_window>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d11d      	bne.n	8011cfe <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	693a      	ldr	r2, [r7, #16]
 8011cce:	8992      	ldrh	r2, [r2, #12]
 8011cd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cd4:	fb02 f200 	mul.w	r2, r2, r0
 8011cd8:	1a9b      	subs	r3, r3, r2
 8011cda:	440b      	add	r3, r1
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fbef 	bl	80114c0 <ld_dword>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011ce8:	617b      	str	r3, [r7, #20]
			break;
 8011cea:	e009      	b.n	8011d00 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011cec:	2301      	movs	r3, #1
 8011cee:	617b      	str	r3, [r7, #20]
 8011cf0:	e006      	b.n	8011d00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cf2:	bf00      	nop
 8011cf4:	e004      	b.n	8011d00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cf6:	bf00      	nop
 8011cf8:	e002      	b.n	8011d00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cfa:	bf00      	nop
 8011cfc:	e000      	b.n	8011d00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011cfe:	bf00      	nop
		}
	}

	return val;
 8011d00:	697b      	ldr	r3, [r7, #20]
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3718      	adds	r7, #24
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011d0a:	b590      	push	{r4, r7, lr}
 8011d0c:	b089      	sub	sp, #36	; 0x24
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	60f8      	str	r0, [r7, #12]
 8011d12:	60b9      	str	r1, [r7, #8]
 8011d14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011d16:	2302      	movs	r3, #2
 8011d18:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	f240 8106 	bls.w	8011f2e <put_fat+0x224>
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	69db      	ldr	r3, [r3, #28]
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	f080 8100 	bcs.w	8011f2e <put_fat+0x224>
		switch (fs->fs_type) {
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	2b02      	cmp	r3, #2
 8011d34:	f000 8088 	beq.w	8011e48 <put_fat+0x13e>
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	f000 80b0 	beq.w	8011e9e <put_fat+0x194>
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	f040 80f5 	bne.w	8011f2e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	61bb      	str	r3, [r7, #24]
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	085b      	lsrs	r3, r3, #1
 8011d4c:	69ba      	ldr	r2, [r7, #24]
 8011d4e:	4413      	add	r3, r2
 8011d50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	899b      	ldrh	r3, [r3, #12]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d62:	4413      	add	r3, r2
 8011d64:	4619      	mov	r1, r3
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f7ff fe42 	bl	80119f0 <move_window>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d70:	7ffb      	ldrb	r3, [r7, #31]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f040 80d4 	bne.w	8011f20 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	61ba      	str	r2, [r7, #24]
 8011d84:	68fa      	ldr	r2, [r7, #12]
 8011d86:	8992      	ldrh	r2, [r2, #12]
 8011d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d8c:	fb02 f200 	mul.w	r2, r2, r0
 8011d90:	1a9b      	subs	r3, r3, r2
 8011d92:	440b      	add	r3, r1
 8011d94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	f003 0301 	and.w	r3, r3, #1
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00d      	beq.n	8011dbc <put_fat+0xb2>
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	b25b      	sxtb	r3, r3
 8011da6:	f003 030f 	and.w	r3, r3, #15
 8011daa:	b25a      	sxtb	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	011b      	lsls	r3, r3, #4
 8011db2:	b25b      	sxtb	r3, r3
 8011db4:	4313      	orrs	r3, r2
 8011db6:	b25b      	sxtb	r3, r3
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	e001      	b.n	8011dc0 <put_fat+0xb6>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	697a      	ldr	r2, [r7, #20]
 8011dc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	899b      	ldrh	r3, [r3, #12]
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dda:	4413      	add	r3, r2
 8011ddc:	4619      	mov	r1, r3
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7ff fe06 	bl	80119f0 <move_window>
 8011de4:	4603      	mov	r3, r0
 8011de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011de8:	7ffb      	ldrb	r3, [r7, #31]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f040 809a 	bne.w	8011f24 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	899b      	ldrh	r3, [r3, #12]
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e02:	fb02 f200 	mul.w	r2, r2, r0
 8011e06:	1a9b      	subs	r3, r3, r2
 8011e08:	440b      	add	r3, r1
 8011e0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	f003 0301 	and.w	r3, r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d003      	beq.n	8011e1e <put_fat+0x114>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	091b      	lsrs	r3, r3, #4
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	e00e      	b.n	8011e3c <put_fat+0x132>
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	b25b      	sxtb	r3, r3
 8011e24:	f023 030f 	bic.w	r3, r3, #15
 8011e28:	b25a      	sxtb	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	0a1b      	lsrs	r3, r3, #8
 8011e2e:	b25b      	sxtb	r3, r3
 8011e30:	f003 030f 	and.w	r3, r3, #15
 8011e34:	b25b      	sxtb	r3, r3
 8011e36:	4313      	orrs	r3, r2
 8011e38:	b25b      	sxtb	r3, r3
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	697a      	ldr	r2, [r7, #20]
 8011e3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2201      	movs	r2, #1
 8011e44:	70da      	strb	r2, [r3, #3]
			break;
 8011e46:	e072      	b.n	8011f2e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	899b      	ldrh	r3, [r3, #12]
 8011e50:	085b      	lsrs	r3, r3, #1
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	4619      	mov	r1, r3
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e5c:	4413      	add	r3, r2
 8011e5e:	4619      	mov	r1, r3
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f7ff fdc5 	bl	80119f0 <move_window>
 8011e66:	4603      	mov	r3, r0
 8011e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e6a:	7ffb      	ldrb	r3, [r7, #31]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d15b      	bne.n	8011f28 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	8992      	ldrh	r2, [r2, #12]
 8011e7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e82:	fb02 f200 	mul.w	r2, r2, r0
 8011e86:	1a9b      	subs	r3, r3, r2
 8011e88:	440b      	add	r3, r1
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	4611      	mov	r1, r2
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff fb38 	bl	8011506 <st_word>
			fs->wflag = 1;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2201      	movs	r2, #1
 8011e9a:	70da      	strb	r2, [r3, #3]
			break;
 8011e9c:	e047      	b.n	8011f2e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	089b      	lsrs	r3, r3, #2
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	4619      	mov	r1, r3
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eb2:	4413      	add	r3, r2
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f7ff fd9a 	bl	80119f0 <move_window>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ec0:	7ffb      	ldrb	r3, [r7, #31]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d132      	bne.n	8011f2c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	68fa      	ldr	r2, [r7, #12]
 8011ed8:	8992      	ldrh	r2, [r2, #12]
 8011eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ede:	fb02 f200 	mul.w	r2, r2, r0
 8011ee2:	1a9b      	subs	r3, r3, r2
 8011ee4:	440b      	add	r3, r1
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7ff faea 	bl	80114c0 <ld_dword>
 8011eec:	4603      	mov	r3, r0
 8011eee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ef2:	4323      	orrs	r3, r4
 8011ef4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	009b      	lsls	r3, r3, #2
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	8992      	ldrh	r2, [r2, #12]
 8011f04:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f08:	fb02 f200 	mul.w	r2, r2, r0
 8011f0c:	1a9b      	subs	r3, r3, r2
 8011f0e:	440b      	add	r3, r1
 8011f10:	6879      	ldr	r1, [r7, #4]
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff fb12 	bl	801153c <st_dword>
			fs->wflag = 1;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	70da      	strb	r2, [r3, #3]
			break;
 8011f1e:	e006      	b.n	8011f2e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f20:	bf00      	nop
 8011f22:	e004      	b.n	8011f2e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f24:	bf00      	nop
 8011f26:	e002      	b.n	8011f2e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f28:	bf00      	nop
 8011f2a:	e000      	b.n	8011f2e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f2c:	bf00      	nop
		}
	}
	return res;
 8011f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3724      	adds	r7, #36	; 0x24
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd90      	pop	{r4, r7, pc}

08011f38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b088      	sub	sp, #32
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011f44:	2300      	movs	r3, #0
 8011f46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d904      	bls.n	8011f5e <remove_chain+0x26>
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	69db      	ldr	r3, [r3, #28]
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d301      	bcc.n	8011f62 <remove_chain+0x2a>
 8011f5e:	2302      	movs	r3, #2
 8011f60:	e04b      	b.n	8011ffa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00c      	beq.n	8011f82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011f68:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6c:	6879      	ldr	r1, [r7, #4]
 8011f6e:	69b8      	ldr	r0, [r7, #24]
 8011f70:	f7ff fecb 	bl	8011d0a <put_fat>
 8011f74:	4603      	mov	r3, r0
 8011f76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011f78:	7ffb      	ldrb	r3, [r7, #31]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d001      	beq.n	8011f82 <remove_chain+0x4a>
 8011f7e:	7ffb      	ldrb	r3, [r7, #31]
 8011f80:	e03b      	b.n	8011ffa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011f82:	68b9      	ldr	r1, [r7, #8]
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f7ff fdf0 	bl	8011b6a <get_fat>
 8011f8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d031      	beq.n	8011ff6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d101      	bne.n	8011f9c <remove_chain+0x64>
 8011f98:	2302      	movs	r3, #2
 8011f9a:	e02e      	b.n	8011ffa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa2:	d101      	bne.n	8011fa8 <remove_chain+0x70>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e028      	b.n	8011ffa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011fa8:	2200      	movs	r2, #0
 8011faa:	68b9      	ldr	r1, [r7, #8]
 8011fac:	69b8      	ldr	r0, [r7, #24]
 8011fae:	f7ff feac 	bl	8011d0a <put_fat>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011fb6:	7ffb      	ldrb	r3, [r7, #31]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <remove_chain+0x88>
 8011fbc:	7ffb      	ldrb	r3, [r7, #31]
 8011fbe:	e01c      	b.n	8011ffa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	695a      	ldr	r2, [r3, #20]
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	69db      	ldr	r3, [r3, #28]
 8011fc8:	3b02      	subs	r3, #2
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d20b      	bcs.n	8011fe6 <remove_chain+0xae>
			fs->free_clst++;
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	1c5a      	adds	r2, r3, #1
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	791b      	ldrb	r3, [r3, #4]
 8011fdc:	f043 0301 	orr.w	r3, r3, #1
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	69db      	ldr	r3, [r3, #28]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d3c6      	bcc.n	8011f82 <remove_chain+0x4a>
 8011ff4:	e000      	b.n	8011ff8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011ff6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011ff8:	2300      	movs	r3, #0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3720      	adds	r7, #32
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b088      	sub	sp, #32
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
 801200a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d10d      	bne.n	8012034 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	691b      	ldr	r3, [r3, #16]
 801201c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d004      	beq.n	801202e <create_chain+0x2c>
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	69ba      	ldr	r2, [r7, #24]
 801202a:	429a      	cmp	r2, r3
 801202c:	d31b      	bcc.n	8012066 <create_chain+0x64>
 801202e:	2301      	movs	r3, #1
 8012030:	61bb      	str	r3, [r7, #24]
 8012032:	e018      	b.n	8012066 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ff fd97 	bl	8011b6a <get_fat>
 801203c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d801      	bhi.n	8012048 <create_chain+0x46>
 8012044:	2301      	movs	r3, #1
 8012046:	e070      	b.n	801212a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204e:	d101      	bne.n	8012054 <create_chain+0x52>
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	e06a      	b.n	801212a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	69db      	ldr	r3, [r3, #28]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	429a      	cmp	r2, r3
 801205c:	d201      	bcs.n	8012062 <create_chain+0x60>
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	e063      	b.n	801212a <create_chain+0x128>
		scl = clst;
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	3301      	adds	r3, #1
 801206e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	69db      	ldr	r3, [r3, #28]
 8012074:	69fa      	ldr	r2, [r7, #28]
 8012076:	429a      	cmp	r2, r3
 8012078:	d307      	bcc.n	801208a <create_chain+0x88>
				ncl = 2;
 801207a:	2302      	movs	r3, #2
 801207c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801207e:	69fa      	ldr	r2, [r7, #28]
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	429a      	cmp	r2, r3
 8012084:	d901      	bls.n	801208a <create_chain+0x88>
 8012086:	2300      	movs	r3, #0
 8012088:	e04f      	b.n	801212a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801208a:	69f9      	ldr	r1, [r7, #28]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff fd6c 	bl	8011b6a <get_fat>
 8012092:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d00e      	beq.n	80120b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2b01      	cmp	r3, #1
 801209e:	d003      	beq.n	80120a8 <create_chain+0xa6>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a6:	d101      	bne.n	80120ac <create_chain+0xaa>
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	e03e      	b.n	801212a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80120ac:	69fa      	ldr	r2, [r7, #28]
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d1da      	bne.n	801206a <create_chain+0x68>
 80120b4:	2300      	movs	r3, #0
 80120b6:	e038      	b.n	801212a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80120b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80120ba:	f04f 32ff 	mov.w	r2, #4294967295
 80120be:	69f9      	ldr	r1, [r7, #28]
 80120c0:	6938      	ldr	r0, [r7, #16]
 80120c2:	f7ff fe22 	bl	8011d0a <put_fat>
 80120c6:	4603      	mov	r3, r0
 80120c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80120ca:	7dfb      	ldrb	r3, [r7, #23]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d109      	bne.n	80120e4 <create_chain+0xe2>
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d006      	beq.n	80120e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80120d6:	69fa      	ldr	r2, [r7, #28]
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6938      	ldr	r0, [r7, #16]
 80120dc:	f7ff fe15 	bl	8011d0a <put_fat>
 80120e0:	4603      	mov	r3, r0
 80120e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d116      	bne.n	8012118 <create_chain+0x116>
		fs->last_clst = ncl;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	69fa      	ldr	r2, [r7, #28]
 80120ee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	695a      	ldr	r2, [r3, #20]
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	69db      	ldr	r3, [r3, #28]
 80120f8:	3b02      	subs	r3, #2
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d804      	bhi.n	8012108 <create_chain+0x106>
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	695b      	ldr	r3, [r3, #20]
 8012102:	1e5a      	subs	r2, r3, #1
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	791b      	ldrb	r3, [r3, #4]
 801210c:	f043 0301 	orr.w	r3, r3, #1
 8012110:	b2da      	uxtb	r2, r3
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	711a      	strb	r2, [r3, #4]
 8012116:	e007      	b.n	8012128 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	2b01      	cmp	r3, #1
 801211c:	d102      	bne.n	8012124 <create_chain+0x122>
 801211e:	f04f 33ff 	mov.w	r3, #4294967295
 8012122:	e000      	b.n	8012126 <create_chain+0x124>
 8012124:	2301      	movs	r3, #1
 8012126:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012128:	69fb      	ldr	r3, [r7, #28]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3720      	adds	r7, #32
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012132:	b480      	push	{r7}
 8012134:	b087      	sub	sp, #28
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
 801213a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012146:	3304      	adds	r3, #4
 8012148:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	899b      	ldrh	r3, [r3, #12]
 801214e:	461a      	mov	r2, r3
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	fbb3 f3f2 	udiv	r3, r3, r2
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	8952      	ldrh	r2, [r2, #10]
 801215a:	fbb3 f3f2 	udiv	r3, r3, r2
 801215e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	1d1a      	adds	r2, r3, #4
 8012164:	613a      	str	r2, [r7, #16]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d101      	bne.n	8012174 <clmt_clust+0x42>
 8012170:	2300      	movs	r3, #0
 8012172:	e010      	b.n	8012196 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	429a      	cmp	r2, r3
 801217a:	d307      	bcc.n	801218c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801217c:	697a      	ldr	r2, [r7, #20]
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	617b      	str	r3, [r7, #20]
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	3304      	adds	r3, #4
 8012188:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801218a:	e7e9      	b.n	8012160 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801218c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	4413      	add	r3, r2
}
 8012196:	4618      	mov	r0, r3
 8012198:	371c      	adds	r7, #28
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr

080121a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b086      	sub	sp, #24
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
 80121aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80121b8:	d204      	bcs.n	80121c4 <dir_sdi+0x22>
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	f003 031f 	and.w	r3, r3, #31
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80121c4:	2302      	movs	r3, #2
 80121c6:	e071      	b.n	80122ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	683a      	ldr	r2, [r7, #0]
 80121cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	689b      	ldr	r3, [r3, #8]
 80121d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d106      	bne.n	80121e8 <dir_sdi+0x46>
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d902      	bls.n	80121e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d10c      	bne.n	8012208 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	095b      	lsrs	r3, r3, #5
 80121f2:	693a      	ldr	r2, [r7, #16]
 80121f4:	8912      	ldrh	r2, [r2, #8]
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d301      	bcc.n	80121fe <dir_sdi+0x5c>
 80121fa:	2302      	movs	r3, #2
 80121fc:	e056      	b.n	80122ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	61da      	str	r2, [r3, #28]
 8012206:	e02d      	b.n	8012264 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	895b      	ldrh	r3, [r3, #10]
 801220c:	461a      	mov	r2, r3
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	899b      	ldrh	r3, [r3, #12]
 8012212:	fb03 f302 	mul.w	r3, r3, r2
 8012216:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012218:	e019      	b.n	801224e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6979      	ldr	r1, [r7, #20]
 801221e:	4618      	mov	r0, r3
 8012220:	f7ff fca3 	bl	8011b6a <get_fat>
 8012224:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222c:	d101      	bne.n	8012232 <dir_sdi+0x90>
 801222e:	2301      	movs	r3, #1
 8012230:	e03c      	b.n	80122ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	2b01      	cmp	r3, #1
 8012236:	d904      	bls.n	8012242 <dir_sdi+0xa0>
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	69db      	ldr	r3, [r3, #28]
 801223c:	697a      	ldr	r2, [r7, #20]
 801223e:	429a      	cmp	r2, r3
 8012240:	d301      	bcc.n	8012246 <dir_sdi+0xa4>
 8012242:	2302      	movs	r3, #2
 8012244:	e032      	b.n	80122ac <dir_sdi+0x10a>
			ofs -= csz;
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	1ad3      	subs	r3, r2, r3
 801224c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801224e:	683a      	ldr	r2, [r7, #0]
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	429a      	cmp	r2, r3
 8012254:	d2e1      	bcs.n	801221a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012256:	6979      	ldr	r1, [r7, #20]
 8012258:	6938      	ldr	r0, [r7, #16]
 801225a:	f7ff fc67 	bl	8011b2c <clust2sect>
 801225e:	4602      	mov	r2, r0
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	697a      	ldr	r2, [r7, #20]
 8012268:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	69db      	ldr	r3, [r3, #28]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d101      	bne.n	8012276 <dir_sdi+0xd4>
 8012272:	2302      	movs	r3, #2
 8012274:	e01a      	b.n	80122ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	69da      	ldr	r2, [r3, #28]
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	899b      	ldrh	r3, [r3, #12]
 801227e:	4619      	mov	r1, r3
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	fbb3 f3f1 	udiv	r3, r3, r1
 8012286:	441a      	add	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	899b      	ldrh	r3, [r3, #12]
 8012296:	461a      	mov	r2, r3
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	fbb3 f0f2 	udiv	r0, r3, r2
 801229e:	fb02 f200 	mul.w	r2, r2, r0
 80122a2:	1a9b      	subs	r3, r3, r2
 80122a4:	18ca      	adds	r2, r1, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80122aa:	2300      	movs	r3, #0
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	695b      	ldr	r3, [r3, #20]
 80122c8:	3320      	adds	r3, #32
 80122ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <dir_next+0x28>
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122da:	d301      	bcc.n	80122e0 <dir_next+0x2c>
 80122dc:	2304      	movs	r3, #4
 80122de:	e0bb      	b.n	8012458 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	899b      	ldrh	r3, [r3, #12]
 80122e4:	461a      	mov	r2, r3
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80122ec:	fb02 f201 	mul.w	r2, r2, r1
 80122f0:	1a9b      	subs	r3, r3, r2
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	f040 809d 	bne.w	8012432 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	69db      	ldr	r3, [r3, #28]
 80122fc:	1c5a      	adds	r2, r3, #1
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	699b      	ldr	r3, [r3, #24]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10b      	bne.n	8012322 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	095b      	lsrs	r3, r3, #5
 801230e:	68fa      	ldr	r2, [r7, #12]
 8012310:	8912      	ldrh	r2, [r2, #8]
 8012312:	4293      	cmp	r3, r2
 8012314:	f0c0 808d 	bcc.w	8012432 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	61da      	str	r2, [r3, #28]
 801231e:	2304      	movs	r3, #4
 8012320:	e09a      	b.n	8012458 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	899b      	ldrh	r3, [r3, #12]
 8012326:	461a      	mov	r2, r3
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	fbb3 f3f2 	udiv	r3, r3, r2
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	8952      	ldrh	r2, [r2, #10]
 8012332:	3a01      	subs	r2, #1
 8012334:	4013      	ands	r3, r2
 8012336:	2b00      	cmp	r3, #0
 8012338:	d17b      	bne.n	8012432 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	699b      	ldr	r3, [r3, #24]
 8012340:	4619      	mov	r1, r3
 8012342:	4610      	mov	r0, r2
 8012344:	f7ff fc11 	bl	8011b6a <get_fat>
 8012348:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d801      	bhi.n	8012354 <dir_next+0xa0>
 8012350:	2302      	movs	r3, #2
 8012352:	e081      	b.n	8012458 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801235a:	d101      	bne.n	8012360 <dir_next+0xac>
 801235c:	2301      	movs	r3, #1
 801235e:	e07b      	b.n	8012458 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	69db      	ldr	r3, [r3, #28]
 8012364:	697a      	ldr	r2, [r7, #20]
 8012366:	429a      	cmp	r2, r3
 8012368:	d359      	bcc.n	801241e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d104      	bne.n	801237a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	61da      	str	r2, [r3, #28]
 8012376:	2304      	movs	r3, #4
 8012378:	e06e      	b.n	8012458 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	699b      	ldr	r3, [r3, #24]
 8012380:	4619      	mov	r1, r3
 8012382:	4610      	mov	r0, r2
 8012384:	f7ff fe3d 	bl	8012002 <create_chain>
 8012388:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <dir_next+0xe0>
 8012390:	2307      	movs	r3, #7
 8012392:	e061      	b.n	8012458 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2b01      	cmp	r3, #1
 8012398:	d101      	bne.n	801239e <dir_next+0xea>
 801239a:	2302      	movs	r3, #2
 801239c:	e05c      	b.n	8012458 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123a4:	d101      	bne.n	80123aa <dir_next+0xf6>
 80123a6:	2301      	movs	r3, #1
 80123a8:	e056      	b.n	8012458 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f7ff fadc 	bl	8011968 <sync_window>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <dir_next+0x106>
 80123b6:	2301      	movs	r3, #1
 80123b8:	e04e      	b.n	8012458 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	899b      	ldrh	r3, [r3, #12]
 80123c4:	461a      	mov	r2, r3
 80123c6:	2100      	movs	r1, #0
 80123c8:	f7ff f905 	bl	80115d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80123cc:	2300      	movs	r3, #0
 80123ce:	613b      	str	r3, [r7, #16]
 80123d0:	6979      	ldr	r1, [r7, #20]
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f7ff fbaa 	bl	8011b2c <clust2sect>
 80123d8:	4602      	mov	r2, r0
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	635a      	str	r2, [r3, #52]	; 0x34
 80123de:	e012      	b.n	8012406 <dir_next+0x152>
						fs->wflag = 1;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	2201      	movs	r2, #1
 80123e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f7ff fabe 	bl	8011968 <sync_window>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d001      	beq.n	80123f6 <dir_next+0x142>
 80123f2:	2301      	movs	r3, #1
 80123f4:	e030      	b.n	8012458 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	3301      	adds	r3, #1
 80123fa:	613b      	str	r3, [r7, #16]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012400:	1c5a      	adds	r2, r3, #1
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	635a      	str	r2, [r3, #52]	; 0x34
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	895b      	ldrh	r3, [r3, #10]
 801240a:	461a      	mov	r2, r3
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	4293      	cmp	r3, r2
 8012410:	d3e6      	bcc.n	80123e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	1ad2      	subs	r2, r2, r3
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	697a      	ldr	r2, [r7, #20]
 8012422:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012424:	6979      	ldr	r1, [r7, #20]
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f7ff fb80 	bl	8011b2c <clust2sect>
 801242c:	4602      	mov	r2, r0
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	68ba      	ldr	r2, [r7, #8]
 8012436:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	899b      	ldrh	r3, [r3, #12]
 8012442:	461a      	mov	r2, r3
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	fbb3 f0f2 	udiv	r0, r3, r2
 801244a:	fb02 f200 	mul.w	r2, r2, r0
 801244e:	1a9b      	subs	r3, r3, r2
 8012450:	18ca      	adds	r2, r1, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012456:	2300      	movs	r3, #0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3718      	adds	r7, #24
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b086      	sub	sp, #24
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012470:	2100      	movs	r1, #0
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7ff fe95 	bl	80121a2 <dir_sdi>
 8012478:	4603      	mov	r3, r0
 801247a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d12b      	bne.n	80124da <dir_alloc+0x7a>
		n = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	69db      	ldr	r3, [r3, #28]
 801248a:	4619      	mov	r1, r3
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7ff faaf 	bl	80119f0 <move_window>
 8012492:	4603      	mov	r3, r0
 8012494:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012496:	7dfb      	ldrb	r3, [r7, #23]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d11d      	bne.n	80124d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	2be5      	cmp	r3, #229	; 0xe5
 80124a4:	d004      	beq.n	80124b0 <dir_alloc+0x50>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6a1b      	ldr	r3, [r3, #32]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d107      	bne.n	80124c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	3301      	adds	r3, #1
 80124b4:	613b      	str	r3, [r7, #16]
 80124b6:	693a      	ldr	r2, [r7, #16]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d102      	bne.n	80124c4 <dir_alloc+0x64>
 80124be:	e00c      	b.n	80124da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80124c0:	2300      	movs	r3, #0
 80124c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80124c4:	2101      	movs	r1, #1
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7ff fef4 	bl	80122b4 <dir_next>
 80124cc:	4603      	mov	r3, r0
 80124ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80124d0:	7dfb      	ldrb	r3, [r7, #23]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d0d7      	beq.n	8012486 <dir_alloc+0x26>
 80124d6:	e000      	b.n	80124da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80124d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80124da:	7dfb      	ldrb	r3, [r7, #23]
 80124dc:	2b04      	cmp	r3, #4
 80124de:	d101      	bne.n	80124e4 <dir_alloc+0x84>
 80124e0:	2307      	movs	r3, #7
 80124e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80124e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3718      	adds	r7, #24
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b084      	sub	sp, #16
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	331a      	adds	r3, #26
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fe ffc7 	bl	8011490 <ld_word>
 8012502:	4603      	mov	r3, r0
 8012504:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	2b03      	cmp	r3, #3
 801250c:	d109      	bne.n	8012522 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	3314      	adds	r3, #20
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe ffbc 	bl	8011490 <ld_word>
 8012518:	4603      	mov	r3, r0
 801251a:	041b      	lsls	r3, r3, #16
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	4313      	orrs	r3, r2
 8012520:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012522:	68fb      	ldr	r3, [r7, #12]
}
 8012524:	4618      	mov	r0, r3
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b084      	sub	sp, #16
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	331a      	adds	r3, #26
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	b292      	uxth	r2, r2
 8012540:	4611      	mov	r1, r2
 8012542:	4618      	mov	r0, r3
 8012544:	f7fe ffdf 	bl	8011506 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2b03      	cmp	r3, #3
 801254e:	d109      	bne.n	8012564 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	f103 0214 	add.w	r2, r3, #20
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	0c1b      	lsrs	r3, r3, #16
 801255a:	b29b      	uxth	r3, r3
 801255c:	4619      	mov	r1, r3
 801255e:	4610      	mov	r0, r2
 8012560:	f7fe ffd1 	bl	8011506 <st_word>
	}
}
 8012564:	bf00      	nop
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b086      	sub	sp, #24
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012576:	2304      	movs	r3, #4
 8012578:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012580:	e03c      	b.n	80125fc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	69db      	ldr	r3, [r3, #28]
 8012586:	4619      	mov	r1, r3
 8012588:	6938      	ldr	r0, [r7, #16]
 801258a:	f7ff fa31 	bl	80119f0 <move_window>
 801258e:	4603      	mov	r3, r0
 8012590:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d136      	bne.n	8012606 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6a1b      	ldr	r3, [r3, #32]
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80125a0:	7bfb      	ldrb	r3, [r7, #15]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d102      	bne.n	80125ac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80125a6:	2304      	movs	r3, #4
 80125a8:	75fb      	strb	r3, [r7, #23]
 80125aa:	e031      	b.n	8012610 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6a1b      	ldr	r3, [r3, #32]
 80125b0:	330b      	adds	r3, #11
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125b8:	73bb      	strb	r3, [r7, #14]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	7bba      	ldrb	r2, [r7, #14]
 80125be:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80125c0:	7bfb      	ldrb	r3, [r7, #15]
 80125c2:	2be5      	cmp	r3, #229	; 0xe5
 80125c4:	d011      	beq.n	80125ea <dir_read+0x7e>
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
 80125c8:	2b2e      	cmp	r3, #46	; 0x2e
 80125ca:	d00e      	beq.n	80125ea <dir_read+0x7e>
 80125cc:	7bbb      	ldrb	r3, [r7, #14]
 80125ce:	2b0f      	cmp	r3, #15
 80125d0:	d00b      	beq.n	80125ea <dir_read+0x7e>
 80125d2:	7bbb      	ldrb	r3, [r7, #14]
 80125d4:	f023 0320 	bic.w	r3, r3, #32
 80125d8:	2b08      	cmp	r3, #8
 80125da:	bf0c      	ite	eq
 80125dc:	2301      	moveq	r3, #1
 80125de:	2300      	movne	r3, #0
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	461a      	mov	r2, r3
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d00f      	beq.n	801260a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80125ea:	2100      	movs	r1, #0
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff fe61 	bl	80122b4 <dir_next>
 80125f2:	4603      	mov	r3, r0
 80125f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80125f6:	7dfb      	ldrb	r3, [r7, #23]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d108      	bne.n	801260e <dir_read+0xa2>
	while (dp->sect) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	69db      	ldr	r3, [r3, #28]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1be      	bne.n	8012582 <dir_read+0x16>
 8012604:	e004      	b.n	8012610 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <dir_read+0xa4>
				break;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <dir_read+0xa4>
		if (res != FR_OK) break;
 801260e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012610:	7dfb      	ldrb	r3, [r7, #23]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d002      	beq.n	801261c <dir_read+0xb0>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	61da      	str	r2, [r3, #28]
	return res;
 801261c:	7dfb      	ldrb	r3, [r7, #23]
}
 801261e:	4618      	mov	r0, r3
 8012620:	3718      	adds	r7, #24
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012626:	b580      	push	{r7, lr}
 8012628:	b086      	sub	sp, #24
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012634:	2100      	movs	r1, #0
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f7ff fdb3 	bl	80121a2 <dir_sdi>
 801263c:	4603      	mov	r3, r0
 801263e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012640:	7dfb      	ldrb	r3, [r7, #23]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d001      	beq.n	801264a <dir_find+0x24>
 8012646:	7dfb      	ldrb	r3, [r7, #23]
 8012648:	e03e      	b.n	80126c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	69db      	ldr	r3, [r3, #28]
 801264e:	4619      	mov	r1, r3
 8012650:	6938      	ldr	r0, [r7, #16]
 8012652:	f7ff f9cd 	bl	80119f0 <move_window>
 8012656:	4603      	mov	r3, r0
 8012658:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801265a:	7dfb      	ldrb	r3, [r7, #23]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d12f      	bne.n	80126c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a1b      	ldr	r3, [r3, #32]
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012668:	7bfb      	ldrb	r3, [r7, #15]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d102      	bne.n	8012674 <dir_find+0x4e>
 801266e:	2304      	movs	r3, #4
 8012670:	75fb      	strb	r3, [r7, #23]
 8012672:	e028      	b.n	80126c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a1b      	ldr	r3, [r3, #32]
 8012678:	330b      	adds	r3, #11
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012680:	b2da      	uxtb	r2, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6a1b      	ldr	r3, [r3, #32]
 801268a:	330b      	adds	r3, #11
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	f003 0308 	and.w	r3, r3, #8
 8012692:	2b00      	cmp	r3, #0
 8012694:	d10a      	bne.n	80126ac <dir_find+0x86>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a18      	ldr	r0, [r3, #32]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	3324      	adds	r3, #36	; 0x24
 801269e:	220b      	movs	r2, #11
 80126a0:	4619      	mov	r1, r3
 80126a2:	f7fe ffb2 	bl	801160a <mem_cmp>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d00b      	beq.n	80126c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80126ac:	2100      	movs	r1, #0
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff fe00 	bl	80122b4 <dir_next>
 80126b4:	4603      	mov	r3, r0
 80126b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80126b8:	7dfb      	ldrb	r3, [r7, #23]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d0c5      	beq.n	801264a <dir_find+0x24>
 80126be:	e002      	b.n	80126c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80126c0:	bf00      	nop
 80126c2:	e000      	b.n	80126c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126c4:	bf00      	nop

	return res;
 80126c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3718      	adds	r7, #24
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80126de:	2101      	movs	r1, #1
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7ff febd 	bl	8012460 <dir_alloc>
 80126e6:	4603      	mov	r3, r0
 80126e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80126ea:	7bfb      	ldrb	r3, [r7, #15]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d11c      	bne.n	801272a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	69db      	ldr	r3, [r3, #28]
 80126f4:	4619      	mov	r1, r3
 80126f6:	68b8      	ldr	r0, [r7, #8]
 80126f8:	f7ff f97a 	bl	80119f0 <move_window>
 80126fc:	4603      	mov	r3, r0
 80126fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012700:	7bfb      	ldrb	r3, [r7, #15]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d111      	bne.n	801272a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	2220      	movs	r2, #32
 801270c:	2100      	movs	r1, #0
 801270e:	4618      	mov	r0, r3
 8012710:	f7fe ff61 	bl	80115d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a18      	ldr	r0, [r3, #32]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	3324      	adds	r3, #36	; 0x24
 801271c:	220b      	movs	r2, #11
 801271e:	4619      	mov	r1, r3
 8012720:	f7fe ff38 	bl	8011594 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2201      	movs	r2, #1
 8012728:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801272a:	7bfb      	ldrb	r3, [r7, #15]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	4619      	mov	r1, r3
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff f951 	bl	80119f0 <move_window>
 801274e:	4603      	mov	r3, r0
 8012750:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012752:	7afb      	ldrb	r3, [r7, #11]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d106      	bne.n	8012766 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6a1b      	ldr	r3, [r3, #32]
 801275c:	22e5      	movs	r2, #229	; 0xe5
 801275e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2201      	movs	r2, #1
 8012764:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012766:	7afb      	ldrb	r3, [r7, #11]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3710      	adds	r7, #16
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b088      	sub	sp, #32
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3324      	adds	r3, #36	; 0x24
 8012784:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012786:	220b      	movs	r2, #11
 8012788:	2120      	movs	r1, #32
 801278a:	68b8      	ldr	r0, [r7, #8]
 801278c:	f7fe ff23 	bl	80115d6 <mem_set>
	si = i = 0; ni = 8;
 8012790:	2300      	movs	r3, #0
 8012792:	613b      	str	r3, [r7, #16]
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	617b      	str	r3, [r7, #20]
 8012798:	2308      	movs	r3, #8
 801279a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	4413      	add	r3, r2
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b2e      	cmp	r3, #46	; 0x2e
 80127a6:	d12f      	bne.n	8012808 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	1c5a      	adds	r2, r3, #1
 80127ac:	617a      	str	r2, [r7, #20]
 80127ae:	68fa      	ldr	r2, [r7, #12]
 80127b0:	4413      	add	r3, r2
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80127b6:	7ffb      	ldrb	r3, [r7, #31]
 80127b8:	2b2e      	cmp	r3, #46	; 0x2e
 80127ba:	d10a      	bne.n	80127d2 <create_name+0x62>
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d807      	bhi.n	80127d2 <create_name+0x62>
			sfn[i++] = c;
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	1c5a      	adds	r2, r3, #1
 80127c6:	613a      	str	r2, [r7, #16]
 80127c8:	68ba      	ldr	r2, [r7, #8]
 80127ca:	4413      	add	r3, r2
 80127cc:	7ffa      	ldrb	r2, [r7, #31]
 80127ce:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80127d0:	e7ea      	b.n	80127a8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80127d2:	7ffb      	ldrb	r3, [r7, #31]
 80127d4:	2b2f      	cmp	r3, #47	; 0x2f
 80127d6:	d007      	beq.n	80127e8 <create_name+0x78>
 80127d8:	7ffb      	ldrb	r3, [r7, #31]
 80127da:	2b5c      	cmp	r3, #92	; 0x5c
 80127dc:	d004      	beq.n	80127e8 <create_name+0x78>
 80127de:	7ffb      	ldrb	r3, [r7, #31]
 80127e0:	2b20      	cmp	r3, #32
 80127e2:	d901      	bls.n	80127e8 <create_name+0x78>
 80127e4:	2306      	movs	r3, #6
 80127e6:	e084      	b.n	80128f2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	441a      	add	r2, r3
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80127f2:	7ffb      	ldrb	r3, [r7, #31]
 80127f4:	2b20      	cmp	r3, #32
 80127f6:	d801      	bhi.n	80127fc <create_name+0x8c>
 80127f8:	2224      	movs	r2, #36	; 0x24
 80127fa:	e000      	b.n	80127fe <create_name+0x8e>
 80127fc:	2220      	movs	r2, #32
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	330b      	adds	r3, #11
 8012802:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012804:	2300      	movs	r3, #0
 8012806:	e074      	b.n	80128f2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	617a      	str	r2, [r7, #20]
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	4413      	add	r3, r2
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012816:	7ffb      	ldrb	r3, [r7, #31]
 8012818:	2b20      	cmp	r3, #32
 801281a:	d94e      	bls.n	80128ba <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801281c:	7ffb      	ldrb	r3, [r7, #31]
 801281e:	2b2f      	cmp	r3, #47	; 0x2f
 8012820:	d006      	beq.n	8012830 <create_name+0xc0>
 8012822:	7ffb      	ldrb	r3, [r7, #31]
 8012824:	2b5c      	cmp	r3, #92	; 0x5c
 8012826:	d110      	bne.n	801284a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012828:	e002      	b.n	8012830 <create_name+0xc0>
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	3301      	adds	r3, #1
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	4413      	add	r3, r2
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b2f      	cmp	r3, #47	; 0x2f
 801283a:	d0f6      	beq.n	801282a <create_name+0xba>
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	4413      	add	r3, r2
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	2b5c      	cmp	r3, #92	; 0x5c
 8012846:	d0f0      	beq.n	801282a <create_name+0xba>
			break;
 8012848:	e038      	b.n	80128bc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801284a:	7ffb      	ldrb	r3, [r7, #31]
 801284c:	2b2e      	cmp	r3, #46	; 0x2e
 801284e:	d003      	beq.n	8012858 <create_name+0xe8>
 8012850:	693a      	ldr	r2, [r7, #16]
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	429a      	cmp	r2, r3
 8012856:	d30c      	bcc.n	8012872 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	2b0b      	cmp	r3, #11
 801285c:	d002      	beq.n	8012864 <create_name+0xf4>
 801285e:	7ffb      	ldrb	r3, [r7, #31]
 8012860:	2b2e      	cmp	r3, #46	; 0x2e
 8012862:	d001      	beq.n	8012868 <create_name+0xf8>
 8012864:	2306      	movs	r3, #6
 8012866:	e044      	b.n	80128f2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012868:	2308      	movs	r3, #8
 801286a:	613b      	str	r3, [r7, #16]
 801286c:	230b      	movs	r3, #11
 801286e:	61bb      	str	r3, [r7, #24]
			continue;
 8012870:	e022      	b.n	80128b8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012872:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012876:	2b00      	cmp	r3, #0
 8012878:	da04      	bge.n	8012884 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801287a:	7ffb      	ldrb	r3, [r7, #31]
 801287c:	3b80      	subs	r3, #128	; 0x80
 801287e:	4a1f      	ldr	r2, [pc, #124]	; (80128fc <create_name+0x18c>)
 8012880:	5cd3      	ldrb	r3, [r2, r3]
 8012882:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012884:	7ffb      	ldrb	r3, [r7, #31]
 8012886:	4619      	mov	r1, r3
 8012888:	481d      	ldr	r0, [pc, #116]	; (8012900 <create_name+0x190>)
 801288a:	f7fe fee5 	bl	8011658 <chk_chr>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d001      	beq.n	8012898 <create_name+0x128>
 8012894:	2306      	movs	r3, #6
 8012896:	e02c      	b.n	80128f2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012898:	7ffb      	ldrb	r3, [r7, #31]
 801289a:	2b60      	cmp	r3, #96	; 0x60
 801289c:	d905      	bls.n	80128aa <create_name+0x13a>
 801289e:	7ffb      	ldrb	r3, [r7, #31]
 80128a0:	2b7a      	cmp	r3, #122	; 0x7a
 80128a2:	d802      	bhi.n	80128aa <create_name+0x13a>
 80128a4:	7ffb      	ldrb	r3, [r7, #31]
 80128a6:	3b20      	subs	r3, #32
 80128a8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	1c5a      	adds	r2, r3, #1
 80128ae:	613a      	str	r2, [r7, #16]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	4413      	add	r3, r2
 80128b4:	7ffa      	ldrb	r2, [r7, #31]
 80128b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80128b8:	e7a6      	b.n	8012808 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80128ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	441a      	add	r2, r3
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <create_name+0x160>
 80128cc:	2306      	movs	r3, #6
 80128ce:	e010      	b.n	80128f2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2be5      	cmp	r3, #229	; 0xe5
 80128d6:	d102      	bne.n	80128de <create_name+0x16e>
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2205      	movs	r2, #5
 80128dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80128de:	7ffb      	ldrb	r3, [r7, #31]
 80128e0:	2b20      	cmp	r3, #32
 80128e2:	d801      	bhi.n	80128e8 <create_name+0x178>
 80128e4:	2204      	movs	r2, #4
 80128e6:	e000      	b.n	80128ea <create_name+0x17a>
 80128e8:	2200      	movs	r2, #0
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	330b      	adds	r3, #11
 80128ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80128f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3720      	adds	r7, #32
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	08018eb4 	.word	0x08018eb4
 8012900:	08018e64 	.word	0x08018e64

08012904 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b086      	sub	sp, #24
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b2f      	cmp	r3, #47	; 0x2f
 801291e:	d00b      	beq.n	8012938 <follow_path+0x34>
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b5c      	cmp	r3, #92	; 0x5c
 8012926:	d007      	beq.n	8012938 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	699a      	ldr	r2, [r3, #24]
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	609a      	str	r2, [r3, #8]
 8012930:	e00d      	b.n	801294e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	3301      	adds	r3, #1
 8012936:	603b      	str	r3, [r7, #0]
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b2f      	cmp	r3, #47	; 0x2f
 801293e:	d0f8      	beq.n	8012932 <follow_path+0x2e>
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	2b5c      	cmp	r3, #92	; 0x5c
 8012946:	d0f4      	beq.n	8012932 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	2200      	movs	r2, #0
 801294c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b1f      	cmp	r3, #31
 8012954:	d80a      	bhi.n	801296c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2280      	movs	r2, #128	; 0x80
 801295a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801295e:	2100      	movs	r1, #0
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fc1e 	bl	80121a2 <dir_sdi>
 8012966:	4603      	mov	r3, r0
 8012968:	75fb      	strb	r3, [r7, #23]
 801296a:	e05b      	b.n	8012a24 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801296c:	463b      	mov	r3, r7
 801296e:	4619      	mov	r1, r3
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7ff fefd 	bl	8012770 <create_name>
 8012976:	4603      	mov	r3, r0
 8012978:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801297a:	7dfb      	ldrb	r3, [r7, #23]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d14c      	bne.n	8012a1a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7ff fe50 	bl	8012626 <dir_find>
 8012986:	4603      	mov	r3, r0
 8012988:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012990:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012992:	7dfb      	ldrb	r3, [r7, #23]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d01b      	beq.n	80129d0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012998:	7dfb      	ldrb	r3, [r7, #23]
 801299a:	2b04      	cmp	r3, #4
 801299c:	d13f      	bne.n	8012a1e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801299e:	7afb      	ldrb	r3, [r7, #11]
 80129a0:	f003 0320 	and.w	r3, r3, #32
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00b      	beq.n	80129c0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80129a8:	7afb      	ldrb	r3, [r7, #11]
 80129aa:	f003 0304 	and.w	r3, r3, #4
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d031      	beq.n	8012a16 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2280      	movs	r2, #128	; 0x80
 80129b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80129ba:	2300      	movs	r3, #0
 80129bc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80129be:	e02e      	b.n	8012a1e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80129c0:	7afb      	ldrb	r3, [r7, #11]
 80129c2:	f003 0304 	and.w	r3, r3, #4
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d129      	bne.n	8012a1e <follow_path+0x11a>
 80129ca:	2305      	movs	r3, #5
 80129cc:	75fb      	strb	r3, [r7, #23]
				break;
 80129ce:	e026      	b.n	8012a1e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129d0:	7afb      	ldrb	r3, [r7, #11]
 80129d2:	f003 0304 	and.w	r3, r3, #4
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d123      	bne.n	8012a22 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	799b      	ldrb	r3, [r3, #6]
 80129de:	f003 0310 	and.w	r3, r3, #16
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d102      	bne.n	80129ec <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80129e6:	2305      	movs	r3, #5
 80129e8:	75fb      	strb	r3, [r7, #23]
 80129ea:	e01b      	b.n	8012a24 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	695b      	ldr	r3, [r3, #20]
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	8992      	ldrh	r2, [r2, #12]
 80129fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80129fe:	fb02 f200 	mul.w	r2, r2, r0
 8012a02:	1a9b      	subs	r3, r3, r2
 8012a04:	440b      	add	r3, r1
 8012a06:	4619      	mov	r1, r3
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f7ff fd70 	bl	80124ee <ld_clust>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	609a      	str	r2, [r3, #8]
 8012a14:	e7aa      	b.n	801296c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012a16:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a18:	e7a8      	b.n	801296c <follow_path+0x68>
			if (res != FR_OK) break;
 8012a1a:	bf00      	nop
 8012a1c:	e002      	b.n	8012a24 <follow_path+0x120>
				break;
 8012a1e:	bf00      	nop
 8012a20:	e000      	b.n	8012a24 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a22:	bf00      	nop
			}
		}
	}

	return res;
 8012a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3718      	adds	r7, #24
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012a2e:	b480      	push	{r7}
 8012a30:	b087      	sub	sp, #28
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012a36:	f04f 33ff 	mov.w	r3, #4294967295
 8012a3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d031      	beq.n	8012aa8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	617b      	str	r3, [r7, #20]
 8012a4a:	e002      	b.n	8012a52 <get_ldnumber+0x24>
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	617b      	str	r3, [r7, #20]
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b20      	cmp	r3, #32
 8012a58:	d903      	bls.n	8012a62 <get_ldnumber+0x34>
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	2b3a      	cmp	r3, #58	; 0x3a
 8012a60:	d1f4      	bne.n	8012a4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	2b3a      	cmp	r3, #58	; 0x3a
 8012a68:	d11c      	bne.n	8012aa4 <get_ldnumber+0x76>
			tp = *path;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	1c5a      	adds	r2, r3, #1
 8012a74:	60fa      	str	r2, [r7, #12]
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	3b30      	subs	r3, #48	; 0x30
 8012a7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	2b09      	cmp	r3, #9
 8012a80:	d80e      	bhi.n	8012aa0 <get_ldnumber+0x72>
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d10a      	bne.n	8012aa0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d107      	bne.n	8012aa0 <get_ldnumber+0x72>
					vol = (int)i;
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	3301      	adds	r3, #1
 8012a98:	617b      	str	r3, [r7, #20]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	697a      	ldr	r2, [r7, #20]
 8012a9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	e002      	b.n	8012aaa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012aa8:	693b      	ldr	r3, [r7, #16]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	371c      	adds	r7, #28
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab4:	4770      	bx	lr
	...

08012ab8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	70da      	strb	r2, [r3, #3]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f04f 32ff 	mov.w	r2, #4294967295
 8012ace:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012ad0:	6839      	ldr	r1, [r7, #0]
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7fe ff8c 	bl	80119f0 <move_window>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d001      	beq.n	8012ae2 <check_fs+0x2a>
 8012ade:	2304      	movs	r3, #4
 8012ae0:	e038      	b.n	8012b54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	3338      	adds	r3, #56	; 0x38
 8012ae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7fe fcd0 	bl	8011490 <ld_word>
 8012af0:	4603      	mov	r3, r0
 8012af2:	461a      	mov	r2, r3
 8012af4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d001      	beq.n	8012b00 <check_fs+0x48>
 8012afc:	2303      	movs	r3, #3
 8012afe:	e029      	b.n	8012b54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b06:	2be9      	cmp	r3, #233	; 0xe9
 8012b08:	d009      	beq.n	8012b1e <check_fs+0x66>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b10:	2beb      	cmp	r3, #235	; 0xeb
 8012b12:	d11e      	bne.n	8012b52 <check_fs+0x9a>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012b1a:	2b90      	cmp	r3, #144	; 0x90
 8012b1c:	d119      	bne.n	8012b52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	3338      	adds	r3, #56	; 0x38
 8012b22:	3336      	adds	r3, #54	; 0x36
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7fe fccb 	bl	80114c0 <ld_dword>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b30:	4a0a      	ldr	r2, [pc, #40]	; (8012b5c <check_fs+0xa4>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d101      	bne.n	8012b3a <check_fs+0x82>
 8012b36:	2300      	movs	r3, #0
 8012b38:	e00c      	b.n	8012b54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	3338      	adds	r3, #56	; 0x38
 8012b3e:	3352      	adds	r3, #82	; 0x52
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe fcbd 	bl	80114c0 <ld_dword>
 8012b46:	4602      	mov	r2, r0
 8012b48:	4b05      	ldr	r3, [pc, #20]	; (8012b60 <check_fs+0xa8>)
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d101      	bne.n	8012b52 <check_fs+0x9a>
 8012b4e:	2300      	movs	r3, #0
 8012b50:	e000      	b.n	8012b54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012b52:	2302      	movs	r3, #2
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	00544146 	.word	0x00544146
 8012b60:	33544146 	.word	0x33544146

08012b64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b096      	sub	sp, #88	; 0x58
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	2200      	movs	r2, #0
 8012b76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012b78:	68f8      	ldr	r0, [r7, #12]
 8012b7a:	f7ff ff58 	bl	8012a2e <get_ldnumber>
 8012b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	da01      	bge.n	8012b8a <find_volume+0x26>
 8012b86:	230b      	movs	r3, #11
 8012b88:	e268      	b.n	801305c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012b8a:	4ab0      	ldr	r2, [pc, #704]	; (8012e4c <find_volume+0x2e8>)
 8012b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d101      	bne.n	8012b9e <find_volume+0x3a>
 8012b9a:	230c      	movs	r3, #12
 8012b9c:	e25e      	b.n	801305c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ba2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	f023 0301 	bic.w	r3, r3, #1
 8012baa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d01a      	beq.n	8012bea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb6:	785b      	ldrb	r3, [r3, #1]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fe fbcb 	bl	8011354 <disk_status>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bc8:	f003 0301 	and.w	r3, r3, #1
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d10c      	bne.n	8012bea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012bd0:	79fb      	ldrb	r3, [r7, #7]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d007      	beq.n	8012be6 <find_volume+0x82>
 8012bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bda:	f003 0304 	and.w	r3, r3, #4
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012be2:	230a      	movs	r3, #10
 8012be4:	e23a      	b.n	801305c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012be6:	2300      	movs	r3, #0
 8012be8:	e238      	b.n	801305c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bec:	2200      	movs	r2, #0
 8012bee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfa:	785b      	ldrb	r3, [r3, #1]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fe fbc3 	bl	8011388 <disk_initialize>
 8012c02:	4603      	mov	r3, r0
 8012c04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012c08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c0c:	f003 0301 	and.w	r3, r3, #1
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d001      	beq.n	8012c18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012c14:	2303      	movs	r3, #3
 8012c16:	e221      	b.n	801305c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012c18:	79fb      	ldrb	r3, [r7, #7]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d007      	beq.n	8012c2e <find_volume+0xca>
 8012c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c22:	f003 0304 	and.w	r3, r3, #4
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012c2a:	230a      	movs	r3, #10
 8012c2c:	e216      	b.n	801305c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c30:	7858      	ldrb	r0, [r3, #1]
 8012c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c34:	330c      	adds	r3, #12
 8012c36:	461a      	mov	r2, r3
 8012c38:	2102      	movs	r1, #2
 8012c3a:	f7fe fc0b 	bl	8011454 <disk_ioctl>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d001      	beq.n	8012c48 <find_volume+0xe4>
 8012c44:	2301      	movs	r3, #1
 8012c46:	e209      	b.n	801305c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4a:	899b      	ldrh	r3, [r3, #12]
 8012c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c50:	d80d      	bhi.n	8012c6e <find_volume+0x10a>
 8012c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c54:	899b      	ldrh	r3, [r3, #12]
 8012c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c5a:	d308      	bcc.n	8012c6e <find_volume+0x10a>
 8012c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5e:	899b      	ldrh	r3, [r3, #12]
 8012c60:	461a      	mov	r2, r3
 8012c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c64:	899b      	ldrh	r3, [r3, #12]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	4013      	ands	r3, r2
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d001      	beq.n	8012c72 <find_volume+0x10e>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e1f4      	b.n	801305c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012c76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c7a:	f7ff ff1d 	bl	8012ab8 <check_fs>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d14b      	bne.n	8012d24 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8012c90:	e01f      	b.n	8012cd2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c9a:	011b      	lsls	r3, r3, #4
 8012c9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012ca0:	4413      	add	r3, r2
 8012ca2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d006      	beq.n	8012cbc <find_volume+0x158>
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	3308      	adds	r3, #8
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fe fc04 	bl	80114c0 <ld_dword>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	e000      	b.n	8012cbe <find_volume+0x15a>
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012cc6:	440b      	add	r3, r1
 8012cc8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cce:	3301      	adds	r3, #1
 8012cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8012cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cd4:	2b03      	cmp	r3, #3
 8012cd6:	d9dc      	bls.n	8012c92 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012cd8:	2300      	movs	r3, #0
 8012cda:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d002      	beq.n	8012ce8 <find_volume+0x184>
 8012ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cea:	009b      	lsls	r3, r3, #2
 8012cec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012cf0:	4413      	add	r3, r2
 8012cf2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012cf6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d005      	beq.n	8012d0a <find_volume+0x1a6>
 8012cfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d02:	f7ff fed9 	bl	8012ab8 <check_fs>
 8012d06:	4603      	mov	r3, r0
 8012d08:	e000      	b.n	8012d0c <find_volume+0x1a8>
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d905      	bls.n	8012d24 <find_volume+0x1c0>
 8012d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8012d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d9e1      	bls.n	8012ce8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d28:	2b04      	cmp	r3, #4
 8012d2a:	d101      	bne.n	8012d30 <find_volume+0x1cc>
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e195      	b.n	801305c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d901      	bls.n	8012d3c <find_volume+0x1d8>
 8012d38:	230d      	movs	r3, #13
 8012d3a:	e18f      	b.n	801305c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	3338      	adds	r3, #56	; 0x38
 8012d40:	330b      	adds	r3, #11
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fe fba4 	bl	8011490 <ld_word>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	899b      	ldrh	r3, [r3, #12]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d001      	beq.n	8012d58 <find_volume+0x1f4>
 8012d54:	230d      	movs	r3, #13
 8012d56:	e181      	b.n	801305c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5a:	3338      	adds	r3, #56	; 0x38
 8012d5c:	3316      	adds	r3, #22
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fb96 	bl	8011490 <ld_word>
 8012d64:	4603      	mov	r3, r0
 8012d66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d106      	bne.n	8012d7c <find_volume+0x218>
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	3338      	adds	r3, #56	; 0x38
 8012d72:	3324      	adds	r3, #36	; 0x24
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fe fba3 	bl	80114c0 <ld_dword>
 8012d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d80:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8e:	789b      	ldrb	r3, [r3, #2]
 8012d90:	2b01      	cmp	r3, #1
 8012d92:	d005      	beq.n	8012da0 <find_volume+0x23c>
 8012d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d96:	789b      	ldrb	r3, [r3, #2]
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d001      	beq.n	8012da0 <find_volume+0x23c>
 8012d9c:	230d      	movs	r3, #13
 8012d9e:	e15d      	b.n	801305c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da2:	789b      	ldrb	r3, [r3, #2]
 8012da4:	461a      	mov	r2, r3
 8012da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012da8:	fb02 f303 	mul.w	r3, r2, r3
 8012dac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbc:	895b      	ldrh	r3, [r3, #10]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d008      	beq.n	8012dd4 <find_volume+0x270>
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dca:	895b      	ldrh	r3, [r3, #10]
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	4013      	ands	r3, r2
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <find_volume+0x274>
 8012dd4:	230d      	movs	r3, #13
 8012dd6:	e141      	b.n	801305c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	3338      	adds	r3, #56	; 0x38
 8012ddc:	3311      	adds	r3, #17
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fe fb56 	bl	8011490 <ld_word>
 8012de4:	4603      	mov	r3, r0
 8012de6:	461a      	mov	r2, r3
 8012de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	891b      	ldrh	r3, [r3, #8]
 8012df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012df2:	8992      	ldrh	r2, [r2, #12]
 8012df4:	0952      	lsrs	r2, r2, #5
 8012df6:	b292      	uxth	r2, r2
 8012df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dfc:	fb02 f201 	mul.w	r2, r2, r1
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d001      	beq.n	8012e0c <find_volume+0x2a8>
 8012e08:	230d      	movs	r3, #13
 8012e0a:	e127      	b.n	801305c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	3338      	adds	r3, #56	; 0x38
 8012e10:	3313      	adds	r3, #19
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe fb3c 	bl	8011490 <ld_word>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d106      	bne.n	8012e30 <find_volume+0x2cc>
 8012e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e24:	3338      	adds	r3, #56	; 0x38
 8012e26:	3320      	adds	r3, #32
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7fe fb49 	bl	80114c0 <ld_dword>
 8012e2e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e32:	3338      	adds	r3, #56	; 0x38
 8012e34:	330e      	adds	r3, #14
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fe fb2a 	bl	8011490 <ld_word>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012e40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d104      	bne.n	8012e50 <find_volume+0x2ec>
 8012e46:	230d      	movs	r3, #13
 8012e48:	e108      	b.n	801305c <find_volume+0x4f8>
 8012e4a:	bf00      	nop
 8012e4c:	2004819c 	.word	0x2004819c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012e50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e54:	4413      	add	r3, r2
 8012e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e58:	8911      	ldrh	r1, [r2, #8]
 8012e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e5c:	8992      	ldrh	r2, [r2, #12]
 8012e5e:	0952      	lsrs	r2, r2, #5
 8012e60:	b292      	uxth	r2, r2
 8012e62:	fbb1 f2f2 	udiv	r2, r1, r2
 8012e66:	b292      	uxth	r2, r2
 8012e68:	4413      	add	r3, r2
 8012e6a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d201      	bcs.n	8012e78 <find_volume+0x314>
 8012e74:	230d      	movs	r3, #13
 8012e76:	e0f1      	b.n	801305c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e80:	8952      	ldrh	r2, [r2, #10]
 8012e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e86:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d101      	bne.n	8012e92 <find_volume+0x32e>
 8012e8e:	230d      	movs	r3, #13
 8012e90:	e0e4      	b.n	801305c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012e92:	2303      	movs	r3, #3
 8012e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d802      	bhi.n	8012ea8 <find_volume+0x344>
 8012ea2:	2302      	movs	r3, #2
 8012ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d802      	bhi.n	8012eb8 <find_volume+0x354>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eba:	1c9a      	adds	r2, r3, #2
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ec4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eca:	441a      	add	r2, r3
 8012ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ece:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed4:	441a      	add	r2, r3
 8012ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012eda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	d11e      	bne.n	8012f20 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee4:	3338      	adds	r3, #56	; 0x38
 8012ee6:	332a      	adds	r3, #42	; 0x2a
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fad1 	bl	8011490 <ld_word>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d001      	beq.n	8012ef8 <find_volume+0x394>
 8012ef4:	230d      	movs	r3, #13
 8012ef6:	e0b1      	b.n	801305c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efa:	891b      	ldrh	r3, [r3, #8]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d001      	beq.n	8012f04 <find_volume+0x3a0>
 8012f00:	230d      	movs	r3, #13
 8012f02:	e0ab      	b.n	801305c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f06:	3338      	adds	r3, #56	; 0x38
 8012f08:	332c      	adds	r3, #44	; 0x2c
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fe fad8 	bl	80114c0 <ld_dword>
 8012f10:	4602      	mov	r2, r0
 8012f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f14:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f18:	69db      	ldr	r3, [r3, #28]
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8012f1e:	e01f      	b.n	8012f60 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f22:	891b      	ldrh	r3, [r3, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d101      	bne.n	8012f2c <find_volume+0x3c8>
 8012f28:	230d      	movs	r3, #13
 8012f2a:	e097      	b.n	801305c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f32:	441a      	add	r2, r3
 8012f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f36:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d103      	bne.n	8012f48 <find_volume+0x3e4>
 8012f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f42:	69db      	ldr	r3, [r3, #28]
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	e00a      	b.n	8012f5e <find_volume+0x3fa>
 8012f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4a:	69da      	ldr	r2, [r3, #28]
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	005b      	lsls	r3, r3, #1
 8012f50:	4413      	add	r3, r2
 8012f52:	085a      	lsrs	r2, r3, #1
 8012f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f56:	69db      	ldr	r3, [r3, #28]
 8012f58:	f003 0301 	and.w	r3, r3, #1
 8012f5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012f5e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f62:	6a1a      	ldr	r2, [r3, #32]
 8012f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f66:	899b      	ldrh	r3, [r3, #12]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f6c:	440b      	add	r3, r1
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f72:	8989      	ldrh	r1, [r1, #12]
 8012f74:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d201      	bcs.n	8012f80 <find_volume+0x41c>
 8012f7c:	230d      	movs	r3, #13
 8012f7e:	e06d      	b.n	801305c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	f04f 32ff 	mov.w	r2, #4294967295
 8012f86:	615a      	str	r2, [r3, #20]
 8012f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8a:	695a      	ldr	r2, [r3, #20]
 8012f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f92:	2280      	movs	r2, #128	; 0x80
 8012f94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012f96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f9a:	2b03      	cmp	r3, #3
 8012f9c:	d149      	bne.n	8013032 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa0:	3338      	adds	r3, #56	; 0x38
 8012fa2:	3330      	adds	r3, #48	; 0x30
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7fe fa73 	bl	8011490 <ld_word>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d140      	bne.n	8013032 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fb8:	f7fe fd1a 	bl	80119f0 <move_window>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d137      	bne.n	8013032 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fca:	3338      	adds	r3, #56	; 0x38
 8012fcc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7fe fa5d 	bl	8011490 <ld_word>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	461a      	mov	r2, r3
 8012fda:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d127      	bne.n	8013032 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe4:	3338      	adds	r3, #56	; 0x38
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fe fa6a 	bl	80114c0 <ld_dword>
 8012fec:	4602      	mov	r2, r0
 8012fee:	4b1d      	ldr	r3, [pc, #116]	; (8013064 <find_volume+0x500>)
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d11e      	bne.n	8013032 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff6:	3338      	adds	r3, #56	; 0x38
 8012ff8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7fe fa5f 	bl	80114c0 <ld_dword>
 8013002:	4602      	mov	r2, r0
 8013004:	4b18      	ldr	r3, [pc, #96]	; (8013068 <find_volume+0x504>)
 8013006:	429a      	cmp	r2, r3
 8013008:	d113      	bne.n	8013032 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	3338      	adds	r3, #56	; 0x38
 801300e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013012:	4618      	mov	r0, r3
 8013014:	f7fe fa54 	bl	80114c0 <ld_dword>
 8013018:	4602      	mov	r2, r0
 801301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013020:	3338      	adds	r3, #56	; 0x38
 8013022:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013026:	4618      	mov	r0, r3
 8013028:	f7fe fa4a 	bl	80114c0 <ld_dword>
 801302c:	4602      	mov	r2, r0
 801302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013030:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013034:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013038:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801303a:	4b0c      	ldr	r3, [pc, #48]	; (801306c <find_volume+0x508>)
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	3301      	adds	r3, #1
 8013040:	b29a      	uxth	r2, r3
 8013042:	4b0a      	ldr	r3, [pc, #40]	; (801306c <find_volume+0x508>)
 8013044:	801a      	strh	r2, [r3, #0]
 8013046:	4b09      	ldr	r3, [pc, #36]	; (801306c <find_volume+0x508>)
 8013048:	881a      	ldrh	r2, [r3, #0]
 801304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013050:	2200      	movs	r2, #0
 8013052:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013056:	f7fe fc63 	bl	8011920 <clear_lock>
#endif
	return FR_OK;
 801305a:	2300      	movs	r3, #0
}
 801305c:	4618      	mov	r0, r3
 801305e:	3758      	adds	r7, #88	; 0x58
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	41615252 	.word	0x41615252
 8013068:	61417272 	.word	0x61417272
 801306c:	200481a0 	.word	0x200481a0

08013070 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801307a:	2309      	movs	r3, #9
 801307c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d01c      	beq.n	80130be <validate+0x4e>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d018      	beq.n	80130be <validate+0x4e>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d013      	beq.n	80130be <validate+0x4e>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	889a      	ldrh	r2, [r3, #4]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	88db      	ldrh	r3, [r3, #6]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d10c      	bne.n	80130be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	785b      	ldrb	r3, [r3, #1]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe f952 	bl	8011354 <disk_status>
 80130b0:	4603      	mov	r3, r0
 80130b2:	f003 0301 	and.w	r3, r3, #1
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d101      	bne.n	80130be <validate+0x4e>
			res = FR_OK;
 80130ba:	2300      	movs	r3, #0
 80130bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80130be:	7bfb      	ldrb	r3, [r7, #15]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d102      	bne.n	80130ca <validate+0x5a>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	e000      	b.n	80130cc <validate+0x5c>
 80130ca:	2300      	movs	r3, #0
 80130cc:	683a      	ldr	r2, [r7, #0]
 80130ce:	6013      	str	r3, [r2, #0]
	return res;
 80130d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
	...

080130dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b088      	sub	sp, #32
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	4613      	mov	r3, r2
 80130e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80130ee:	f107 0310 	add.w	r3, r7, #16
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff fc9b 	bl	8012a2e <get_ldnumber>
 80130f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	da01      	bge.n	8013104 <f_mount+0x28>
 8013100:	230b      	movs	r3, #11
 8013102:	e02b      	b.n	801315c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013104:	4a17      	ldr	r2, [pc, #92]	; (8013164 <f_mount+0x88>)
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801310c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801310e:	69bb      	ldr	r3, [r7, #24]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d005      	beq.n	8013120 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013114:	69b8      	ldr	r0, [r7, #24]
 8013116:	f7fe fc03 	bl	8011920 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	2200      	movs	r2, #0
 801311e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2200      	movs	r2, #0
 801312a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801312c:	68fa      	ldr	r2, [r7, #12]
 801312e:	490d      	ldr	r1, [pc, #52]	; (8013164 <f_mount+0x88>)
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d002      	beq.n	8013142 <f_mount+0x66>
 801313c:	79fb      	ldrb	r3, [r7, #7]
 801313e:	2b01      	cmp	r3, #1
 8013140:	d001      	beq.n	8013146 <f_mount+0x6a>
 8013142:	2300      	movs	r3, #0
 8013144:	e00a      	b.n	801315c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013146:	f107 010c 	add.w	r1, r7, #12
 801314a:	f107 0308 	add.w	r3, r7, #8
 801314e:	2200      	movs	r2, #0
 8013150:	4618      	mov	r0, r3
 8013152:	f7ff fd07 	bl	8012b64 <find_volume>
 8013156:	4603      	mov	r3, r0
 8013158:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801315a:	7dfb      	ldrb	r3, [r7, #23]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3720      	adds	r7, #32
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	2004819c 	.word	0x2004819c

08013168 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b098      	sub	sp, #96	; 0x60
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	4613      	mov	r3, r2
 8013174:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d101      	bne.n	8013180 <f_open+0x18>
 801317c:	2309      	movs	r3, #9
 801317e:	e1ba      	b.n	80134f6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013180:	79fb      	ldrb	r3, [r7, #7]
 8013182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013186:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013188:	79fa      	ldrb	r2, [r7, #7]
 801318a:	f107 0110 	add.w	r1, r7, #16
 801318e:	f107 0308 	add.w	r3, r7, #8
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff fce6 	bl	8012b64 <find_volume>
 8013198:	4603      	mov	r3, r0
 801319a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801319e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f040 819e 	bne.w	80134e4 <f_open+0x37c>
		dj.obj.fs = fs;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80131ac:	68ba      	ldr	r2, [r7, #8]
 80131ae:	f107 0314 	add.w	r3, r7, #20
 80131b2:	4611      	mov	r1, r2
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7ff fba5 	bl	8012904 <follow_path>
 80131ba:	4603      	mov	r3, r0
 80131bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80131c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d11a      	bne.n	80131fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80131c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80131cc:	b25b      	sxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	da03      	bge.n	80131da <f_open+0x72>
				res = FR_INVALID_NAME;
 80131d2:	2306      	movs	r3, #6
 80131d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80131d8:	e011      	b.n	80131fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80131da:	79fb      	ldrb	r3, [r7, #7]
 80131dc:	f023 0301 	bic.w	r3, r3, #1
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	bf14      	ite	ne
 80131e4:	2301      	movne	r3, #1
 80131e6:	2300      	moveq	r3, #0
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	461a      	mov	r2, r3
 80131ec:	f107 0314 	add.w	r3, r7, #20
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fe fa4c 	bl	8011690 <chk_lock>
 80131f8:	4603      	mov	r3, r0
 80131fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80131fe:	79fb      	ldrb	r3, [r7, #7]
 8013200:	f003 031c 	and.w	r3, r3, #28
 8013204:	2b00      	cmp	r3, #0
 8013206:	d07e      	beq.n	8013306 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801320c:	2b00      	cmp	r3, #0
 801320e:	d017      	beq.n	8013240 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013214:	2b04      	cmp	r3, #4
 8013216:	d10e      	bne.n	8013236 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013218:	f7fe fa96 	bl	8011748 <enq_lock>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d006      	beq.n	8013230 <f_open+0xc8>
 8013222:	f107 0314 	add.w	r3, r7, #20
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff fa52 	bl	80126d0 <dir_register>
 801322c:	4603      	mov	r3, r0
 801322e:	e000      	b.n	8013232 <f_open+0xca>
 8013230:	2312      	movs	r3, #18
 8013232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	f043 0308 	orr.w	r3, r3, #8
 801323c:	71fb      	strb	r3, [r7, #7]
 801323e:	e010      	b.n	8013262 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013240:	7ebb      	ldrb	r3, [r7, #26]
 8013242:	f003 0311 	and.w	r3, r3, #17
 8013246:	2b00      	cmp	r3, #0
 8013248:	d003      	beq.n	8013252 <f_open+0xea>
					res = FR_DENIED;
 801324a:	2307      	movs	r3, #7
 801324c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013250:	e007      	b.n	8013262 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	f003 0304 	and.w	r3, r3, #4
 8013258:	2b00      	cmp	r3, #0
 801325a:	d002      	beq.n	8013262 <f_open+0xfa>
 801325c:	2308      	movs	r3, #8
 801325e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013266:	2b00      	cmp	r3, #0
 8013268:	d167      	bne.n	801333a <f_open+0x1d2>
 801326a:	79fb      	ldrb	r3, [r7, #7]
 801326c:	f003 0308 	and.w	r3, r3, #8
 8013270:	2b00      	cmp	r3, #0
 8013272:	d062      	beq.n	801333a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013274:	4ba2      	ldr	r3, [pc, #648]	; (8013500 <f_open+0x398>)
 8013276:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801327a:	330e      	adds	r3, #14
 801327c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801327e:	4618      	mov	r0, r3
 8013280:	f7fe f95c 	bl	801153c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013286:	3316      	adds	r3, #22
 8013288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801328a:	4618      	mov	r0, r3
 801328c:	f7fe f956 	bl	801153c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013292:	330b      	adds	r3, #11
 8013294:	2220      	movs	r2, #32
 8013296:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801329c:	4611      	mov	r1, r2
 801329e:	4618      	mov	r0, r3
 80132a0:	f7ff f925 	bl	80124ee <ld_clust>
 80132a4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80132aa:	2200      	movs	r2, #0
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7ff f93d 	bl	801252c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80132b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b4:	331c      	adds	r3, #28
 80132b6:	2100      	movs	r1, #0
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fe f93f 	bl	801153c <st_dword>
					fs->wflag = 1;
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	2201      	movs	r2, #1
 80132c2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80132c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d037      	beq.n	801333a <f_open+0x1d2>
						dw = fs->winsect;
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ce:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80132d0:	f107 0314 	add.w	r3, r7, #20
 80132d4:	2200      	movs	r2, #0
 80132d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fe fe2d 	bl	8011f38 <remove_chain>
 80132de:	4603      	mov	r3, r0
 80132e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80132e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d126      	bne.n	801333a <f_open+0x1d2>
							res = move_window(fs, dw);
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fe fb7d 	bl	80119f0 <move_window>
 80132f6:	4603      	mov	r3, r0
 80132f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013300:	3a01      	subs	r2, #1
 8013302:	611a      	str	r2, [r3, #16]
 8013304:	e019      	b.n	801333a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801330a:	2b00      	cmp	r3, #0
 801330c:	d115      	bne.n	801333a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801330e:	7ebb      	ldrb	r3, [r7, #26]
 8013310:	f003 0310 	and.w	r3, r3, #16
 8013314:	2b00      	cmp	r3, #0
 8013316:	d003      	beq.n	8013320 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013318:	2304      	movs	r3, #4
 801331a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801331e:	e00c      	b.n	801333a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013320:	79fb      	ldrb	r3, [r7, #7]
 8013322:	f003 0302 	and.w	r3, r3, #2
 8013326:	2b00      	cmp	r3, #0
 8013328:	d007      	beq.n	801333a <f_open+0x1d2>
 801332a:	7ebb      	ldrb	r3, [r7, #26]
 801332c:	f003 0301 	and.w	r3, r3, #1
 8013330:	2b00      	cmp	r3, #0
 8013332:	d002      	beq.n	801333a <f_open+0x1d2>
						res = FR_DENIED;
 8013334:	2307      	movs	r3, #7
 8013336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801333a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801333e:	2b00      	cmp	r3, #0
 8013340:	d128      	bne.n	8013394 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013342:	79fb      	ldrb	r3, [r7, #7]
 8013344:	f003 0308 	and.w	r3, r3, #8
 8013348:	2b00      	cmp	r3, #0
 801334a:	d003      	beq.n	8013354 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801334c:	79fb      	ldrb	r3, [r7, #7]
 801334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013352:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801335c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	f023 0301 	bic.w	r3, r3, #1
 8013368:	2b00      	cmp	r3, #0
 801336a:	bf14      	ite	ne
 801336c:	2301      	movne	r3, #1
 801336e:	2300      	moveq	r3, #0
 8013370:	b2db      	uxtb	r3, r3
 8013372:	461a      	mov	r2, r3
 8013374:	f107 0314 	add.w	r3, r7, #20
 8013378:	4611      	mov	r1, r2
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe fa06 	bl	801178c <inc_lock>
 8013380:	4602      	mov	r2, r0
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	691b      	ldr	r3, [r3, #16]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d102      	bne.n	8013394 <f_open+0x22c>
 801338e:	2302      	movs	r3, #2
 8013390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013398:	2b00      	cmp	r3, #0
 801339a:	f040 80a3 	bne.w	80134e4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133a2:	4611      	mov	r1, r2
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff f8a2 	bl	80124ee <ld_clust>
 80133aa:	4602      	mov	r2, r0
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80133b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b2:	331c      	adds	r3, #28
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fe f883 	bl	80114c0 <ld_dword>
 80133ba:	4602      	mov	r2, r0
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2200      	movs	r2, #0
 80133c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80133c6:	693a      	ldr	r2, [r7, #16]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	88da      	ldrh	r2, [r3, #6]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	79fa      	ldrb	r2, [r7, #7]
 80133d8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2200      	movs	r2, #0
 80133e4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2200      	movs	r2, #0
 80133ea:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	3330      	adds	r3, #48	; 0x30
 80133f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80133f4:	2100      	movs	r1, #0
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe f8ed 	bl	80115d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80133fc:	79fb      	ldrb	r3, [r7, #7]
 80133fe:	f003 0320 	and.w	r3, r3, #32
 8013402:	2b00      	cmp	r3, #0
 8013404:	d06e      	beq.n	80134e4 <f_open+0x37c>
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	68db      	ldr	r3, [r3, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d06a      	beq.n	80134e4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	68da      	ldr	r2, [r3, #12]
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	895b      	ldrh	r3, [r3, #10]
 801341a:	461a      	mov	r2, r3
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	899b      	ldrh	r3, [r3, #12]
 8013420:	fb03 f302 	mul.w	r3, r3, r2
 8013424:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	689b      	ldr	r3, [r3, #8]
 801342a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	657b      	str	r3, [r7, #84]	; 0x54
 8013432:	e016      	b.n	8013462 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013438:	4618      	mov	r0, r3
 801343a:	f7fe fb96 	bl	8011b6a <get_fat>
 801343e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013442:	2b01      	cmp	r3, #1
 8013444:	d802      	bhi.n	801344c <f_open+0x2e4>
 8013446:	2302      	movs	r3, #2
 8013448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801344c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013452:	d102      	bne.n	801345a <f_open+0x2f2>
 8013454:	2301      	movs	r3, #1
 8013456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801345a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	657b      	str	r3, [r7, #84]	; 0x54
 8013462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013466:	2b00      	cmp	r3, #0
 8013468:	d103      	bne.n	8013472 <f_open+0x30a>
 801346a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801346c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801346e:	429a      	cmp	r2, r3
 8013470:	d8e0      	bhi.n	8013434 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013476:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801347c:	2b00      	cmp	r3, #0
 801347e:	d131      	bne.n	80134e4 <f_open+0x37c>
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	899b      	ldrh	r3, [r3, #12]
 8013484:	461a      	mov	r2, r3
 8013486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013488:	fbb3 f1f2 	udiv	r1, r3, r2
 801348c:	fb02 f201 	mul.w	r2, r2, r1
 8013490:	1a9b      	subs	r3, r3, r2
 8013492:	2b00      	cmp	r3, #0
 8013494:	d026      	beq.n	80134e4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801349a:	4618      	mov	r0, r3
 801349c:	f7fe fb46 	bl	8011b2c <clust2sect>
 80134a0:	6478      	str	r0, [r7, #68]	; 0x44
 80134a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d103      	bne.n	80134b0 <f_open+0x348>
						res = FR_INT_ERR;
 80134a8:	2302      	movs	r3, #2
 80134aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134ae:	e019      	b.n	80134e4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	899b      	ldrh	r3, [r3, #12]
 80134b4:	461a      	mov	r2, r3
 80134b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80134bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134be:	441a      	add	r2, r3
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	7858      	ldrb	r0, [r3, #1]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	6a1a      	ldr	r2, [r3, #32]
 80134d2:	2301      	movs	r3, #1
 80134d4:	f7fd ff7e 	bl	80113d4 <disk_read>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d002      	beq.n	80134e4 <f_open+0x37c>
 80134de:	2301      	movs	r3, #1
 80134e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80134e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d002      	beq.n	80134f2 <f_open+0x38a>
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80134f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3760      	adds	r7, #96	; 0x60
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	bf00      	nop
 8013500:	274a0000 	.word	0x274a0000

08013504 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b08e      	sub	sp, #56	; 0x38
 8013508:	af00      	add	r7, sp, #0
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
 8013510:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	2200      	movs	r2, #0
 801351a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	f107 0214 	add.w	r2, r7, #20
 8013522:	4611      	mov	r1, r2
 8013524:	4618      	mov	r0, r3
 8013526:	f7ff fda3 	bl	8013070 <validate>
 801352a:	4603      	mov	r3, r0
 801352c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013534:	2b00      	cmp	r3, #0
 8013536:	d107      	bne.n	8013548 <f_read+0x44>
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	7d5b      	ldrb	r3, [r3, #21]
 801353c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013540:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <f_read+0x4a>
 8013548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801354c:	e135      	b.n	80137ba <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	7d1b      	ldrb	r3, [r3, #20]
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	2b00      	cmp	r3, #0
 8013558:	d101      	bne.n	801355e <f_read+0x5a>
 801355a:	2307      	movs	r3, #7
 801355c:	e12d      	b.n	80137ba <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	68da      	ldr	r2, [r3, #12]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	699b      	ldr	r3, [r3, #24]
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	6a3b      	ldr	r3, [r7, #32]
 801356e:	429a      	cmp	r2, r3
 8013570:	f240 811e 	bls.w	80137b0 <f_read+0x2ac>
 8013574:	6a3b      	ldr	r3, [r7, #32]
 8013576:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013578:	e11a      	b.n	80137b0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	699b      	ldr	r3, [r3, #24]
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	8992      	ldrh	r2, [r2, #12]
 8013582:	fbb3 f1f2 	udiv	r1, r3, r2
 8013586:	fb02 f201 	mul.w	r2, r2, r1
 801358a:	1a9b      	subs	r3, r3, r2
 801358c:	2b00      	cmp	r3, #0
 801358e:	f040 80d5 	bne.w	801373c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	699b      	ldr	r3, [r3, #24]
 8013596:	697a      	ldr	r2, [r7, #20]
 8013598:	8992      	ldrh	r2, [r2, #12]
 801359a:	fbb3 f3f2 	udiv	r3, r3, r2
 801359e:	697a      	ldr	r2, [r7, #20]
 80135a0:	8952      	ldrh	r2, [r2, #10]
 80135a2:	3a01      	subs	r2, #1
 80135a4:	4013      	ands	r3, r2
 80135a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d12f      	bne.n	801360e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	699b      	ldr	r3, [r3, #24]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d103      	bne.n	80135be <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	633b      	str	r3, [r7, #48]	; 0x30
 80135bc:	e013      	b.n	80135e6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d007      	beq.n	80135d6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	4619      	mov	r1, r3
 80135cc:	68f8      	ldr	r0, [r7, #12]
 80135ce:	f7fe fdb0 	bl	8012132 <clmt_clust>
 80135d2:	6338      	str	r0, [r7, #48]	; 0x30
 80135d4:	e007      	b.n	80135e6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80135d6:	68fa      	ldr	r2, [r7, #12]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	69db      	ldr	r3, [r3, #28]
 80135dc:	4619      	mov	r1, r3
 80135de:	4610      	mov	r0, r2
 80135e0:	f7fe fac3 	bl	8011b6a <get_fat>
 80135e4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80135e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d804      	bhi.n	80135f6 <f_read+0xf2>
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	2202      	movs	r2, #2
 80135f0:	755a      	strb	r2, [r3, #21]
 80135f2:	2302      	movs	r3, #2
 80135f4:	e0e1      	b.n	80137ba <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80135f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fc:	d104      	bne.n	8013608 <f_read+0x104>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2201      	movs	r2, #1
 8013602:	755a      	strb	r2, [r3, #21]
 8013604:	2301      	movs	r3, #1
 8013606:	e0d8      	b.n	80137ba <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801360c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	69db      	ldr	r3, [r3, #28]
 8013614:	4619      	mov	r1, r3
 8013616:	4610      	mov	r0, r2
 8013618:	f7fe fa88 	bl	8011b2c <clust2sect>
 801361c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d104      	bne.n	801362e <f_read+0x12a>
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2202      	movs	r2, #2
 8013628:	755a      	strb	r2, [r3, #21]
 801362a:	2302      	movs	r3, #2
 801362c:	e0c5      	b.n	80137ba <f_read+0x2b6>
			sect += csect;
 801362e:	69ba      	ldr	r2, [r7, #24]
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	4413      	add	r3, r2
 8013634:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	899b      	ldrh	r3, [r3, #12]
 801363a:	461a      	mov	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013642:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	2b00      	cmp	r3, #0
 8013648:	d041      	beq.n	80136ce <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801364a:	69fa      	ldr	r2, [r7, #28]
 801364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364e:	4413      	add	r3, r2
 8013650:	697a      	ldr	r2, [r7, #20]
 8013652:	8952      	ldrh	r2, [r2, #10]
 8013654:	4293      	cmp	r3, r2
 8013656:	d905      	bls.n	8013664 <f_read+0x160>
					cc = fs->csize - csect;
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	895b      	ldrh	r3, [r3, #10]
 801365c:	461a      	mov	r2, r3
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	7858      	ldrb	r0, [r3, #1]
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801366e:	f7fd feb1 	bl	80113d4 <disk_read>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d004      	beq.n	8013682 <f_read+0x17e>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2201      	movs	r2, #1
 801367c:	755a      	strb	r2, [r3, #21]
 801367e:	2301      	movs	r3, #1
 8013680:	e09b      	b.n	80137ba <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	7d1b      	ldrb	r3, [r3, #20]
 8013686:	b25b      	sxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	da18      	bge.n	80136be <f_read+0x1ba>
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	6a1a      	ldr	r2, [r3, #32]
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	1ad3      	subs	r3, r2, r3
 8013694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013696:	429a      	cmp	r2, r3
 8013698:	d911      	bls.n	80136be <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a1a      	ldr	r2, [r3, #32]
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	697a      	ldr	r2, [r7, #20]
 80136a4:	8992      	ldrh	r2, [r2, #12]
 80136a6:	fb02 f303 	mul.w	r3, r2, r3
 80136aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136ac:	18d0      	adds	r0, r2, r3
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	899b      	ldrh	r3, [r3, #12]
 80136b8:	461a      	mov	r2, r3
 80136ba:	f7fd ff6b 	bl	8011594 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	899b      	ldrh	r3, [r3, #12]
 80136c2:	461a      	mov	r2, r3
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	fb02 f303 	mul.w	r3, r2, r3
 80136ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80136cc:	e05c      	b.n	8013788 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	6a1b      	ldr	r3, [r3, #32]
 80136d2:	69ba      	ldr	r2, [r7, #24]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d02e      	beq.n	8013736 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	7d1b      	ldrb	r3, [r3, #20]
 80136dc:	b25b      	sxtb	r3, r3
 80136de:	2b00      	cmp	r3, #0
 80136e0:	da18      	bge.n	8013714 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	7858      	ldrb	r0, [r3, #1]
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	6a1a      	ldr	r2, [r3, #32]
 80136f0:	2301      	movs	r3, #1
 80136f2:	f7fd fe8f 	bl	8011414 <disk_write>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d004      	beq.n	8013706 <f_read+0x202>
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2201      	movs	r2, #1
 8013700:	755a      	strb	r2, [r3, #21]
 8013702:	2301      	movs	r3, #1
 8013704:	e059      	b.n	80137ba <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	7d1b      	ldrb	r3, [r3, #20]
 801370a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801370e:	b2da      	uxtb	r2, r3
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	7858      	ldrb	r0, [r3, #1]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801371e:	2301      	movs	r3, #1
 8013720:	69ba      	ldr	r2, [r7, #24]
 8013722:	f7fd fe57 	bl	80113d4 <disk_read>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	d004      	beq.n	8013736 <f_read+0x232>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2201      	movs	r2, #1
 8013730:	755a      	strb	r2, [r3, #21]
 8013732:	2301      	movs	r3, #1
 8013734:	e041      	b.n	80137ba <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	69ba      	ldr	r2, [r7, #24]
 801373a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	899b      	ldrh	r3, [r3, #12]
 8013740:	4618      	mov	r0, r3
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	699b      	ldr	r3, [r3, #24]
 8013746:	697a      	ldr	r2, [r7, #20]
 8013748:	8992      	ldrh	r2, [r2, #12]
 801374a:	fbb3 f1f2 	udiv	r1, r3, r2
 801374e:	fb02 f201 	mul.w	r2, r2, r1
 8013752:	1a9b      	subs	r3, r3, r2
 8013754:	1ac3      	subs	r3, r0, r3
 8013756:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	429a      	cmp	r2, r3
 801375e:	d901      	bls.n	8013764 <f_read+0x260>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	699b      	ldr	r3, [r3, #24]
 801376e:	697a      	ldr	r2, [r7, #20]
 8013770:	8992      	ldrh	r2, [r2, #12]
 8013772:	fbb3 f0f2 	udiv	r0, r3, r2
 8013776:	fb02 f200 	mul.w	r2, r2, r0
 801377a:	1a9b      	subs	r3, r3, r2
 801377c:	440b      	add	r3, r1
 801377e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013780:	4619      	mov	r1, r3
 8013782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013784:	f7fd ff06 	bl	8011594 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378c:	4413      	add	r3, r2
 801378e:	627b      	str	r3, [r7, #36]	; 0x24
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	699a      	ldr	r2, [r3, #24]
 8013794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013796:	441a      	add	r2, r3
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	619a      	str	r2, [r3, #24]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a2:	441a      	add	r2, r3
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f47f aee1 	bne.w	801357a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3738      	adds	r7, #56	; 0x38
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b08c      	sub	sp, #48	; 0x30
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	60f8      	str	r0, [r7, #12]
 80137ca:	60b9      	str	r1, [r7, #8]
 80137cc:	607a      	str	r2, [r7, #4]
 80137ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	2200      	movs	r2, #0
 80137d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	f107 0210 	add.w	r2, r7, #16
 80137e0:	4611      	mov	r1, r2
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff fc44 	bl	8013070 <validate>
 80137e8:	4603      	mov	r3, r0
 80137ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80137ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d107      	bne.n	8013806 <f_write+0x44>
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	7d5b      	ldrb	r3, [r3, #21]
 80137fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80137fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013802:	2b00      	cmp	r3, #0
 8013804:	d002      	beq.n	801380c <f_write+0x4a>
 8013806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801380a:	e16a      	b.n	8013ae2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	7d1b      	ldrb	r3, [r3, #20]
 8013810:	f003 0302 	and.w	r3, r3, #2
 8013814:	2b00      	cmp	r3, #0
 8013816:	d101      	bne.n	801381c <f_write+0x5a>
 8013818:	2307      	movs	r3, #7
 801381a:	e162      	b.n	8013ae2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	699a      	ldr	r2, [r3, #24]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	441a      	add	r2, r3
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	699b      	ldr	r3, [r3, #24]
 8013828:	429a      	cmp	r2, r3
 801382a:	f080 814c 	bcs.w	8013ac6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	699b      	ldr	r3, [r3, #24]
 8013832:	43db      	mvns	r3, r3
 8013834:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013836:	e146      	b.n	8013ac6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	699b      	ldr	r3, [r3, #24]
 801383c:	693a      	ldr	r2, [r7, #16]
 801383e:	8992      	ldrh	r2, [r2, #12]
 8013840:	fbb3 f1f2 	udiv	r1, r3, r2
 8013844:	fb02 f201 	mul.w	r2, r2, r1
 8013848:	1a9b      	subs	r3, r3, r2
 801384a:	2b00      	cmp	r3, #0
 801384c:	f040 80f1 	bne.w	8013a32 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	699b      	ldr	r3, [r3, #24]
 8013854:	693a      	ldr	r2, [r7, #16]
 8013856:	8992      	ldrh	r2, [r2, #12]
 8013858:	fbb3 f3f2 	udiv	r3, r3, r2
 801385c:	693a      	ldr	r2, [r7, #16]
 801385e:	8952      	ldrh	r2, [r2, #10]
 8013860:	3a01      	subs	r2, #1
 8013862:	4013      	ands	r3, r2
 8013864:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d143      	bne.n	80138f4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	699b      	ldr	r3, [r3, #24]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d10c      	bne.n	801388e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	689b      	ldr	r3, [r3, #8]
 8013878:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	2b00      	cmp	r3, #0
 801387e:	d11a      	bne.n	80138b6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2100      	movs	r1, #0
 8013884:	4618      	mov	r0, r3
 8013886:	f7fe fbbc 	bl	8012002 <create_chain>
 801388a:	62b8      	str	r0, [r7, #40]	; 0x28
 801388c:	e013      	b.n	80138b6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013892:	2b00      	cmp	r3, #0
 8013894:	d007      	beq.n	80138a6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	699b      	ldr	r3, [r3, #24]
 801389a:	4619      	mov	r1, r3
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7fe fc48 	bl	8012132 <clmt_clust>
 80138a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80138a4:	e007      	b.n	80138b6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	69db      	ldr	r3, [r3, #28]
 80138ac:	4619      	mov	r1, r3
 80138ae:	4610      	mov	r0, r2
 80138b0:	f7fe fba7 	bl	8012002 <create_chain>
 80138b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 8109 	beq.w	8013ad0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80138be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d104      	bne.n	80138ce <f_write+0x10c>
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2202      	movs	r2, #2
 80138c8:	755a      	strb	r2, [r3, #21]
 80138ca:	2302      	movs	r3, #2
 80138cc:	e109      	b.n	8013ae2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d4:	d104      	bne.n	80138e0 <f_write+0x11e>
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2201      	movs	r2, #1
 80138da:	755a      	strb	r2, [r3, #21]
 80138dc:	2301      	movs	r3, #1
 80138de:	e100      	b.n	8013ae2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138e4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d102      	bne.n	80138f4 <f_write+0x132>
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138f2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	7d1b      	ldrb	r3, [r3, #20]
 80138f8:	b25b      	sxtb	r3, r3
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	da18      	bge.n	8013930 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	7858      	ldrb	r0, [r3, #1]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6a1a      	ldr	r2, [r3, #32]
 801390c:	2301      	movs	r3, #1
 801390e:	f7fd fd81 	bl	8011414 <disk_write>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d004      	beq.n	8013922 <f_write+0x160>
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2201      	movs	r2, #1
 801391c:	755a      	strb	r2, [r3, #21]
 801391e:	2301      	movs	r3, #1
 8013920:	e0df      	b.n	8013ae2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	7d1b      	ldrb	r3, [r3, #20]
 8013926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801392a:	b2da      	uxtb	r2, r3
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013930:	693a      	ldr	r2, [r7, #16]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	69db      	ldr	r3, [r3, #28]
 8013936:	4619      	mov	r1, r3
 8013938:	4610      	mov	r0, r2
 801393a:	f7fe f8f7 	bl	8011b2c <clust2sect>
 801393e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d104      	bne.n	8013950 <f_write+0x18e>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2202      	movs	r2, #2
 801394a:	755a      	strb	r2, [r3, #21]
 801394c:	2302      	movs	r3, #2
 801394e:	e0c8      	b.n	8013ae2 <f_write+0x320>
			sect += csect;
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	4413      	add	r3, r2
 8013956:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	899b      	ldrh	r3, [r3, #12]
 801395c:	461a      	mov	r2, r3
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	fbb3 f3f2 	udiv	r3, r3, r2
 8013964:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013966:	6a3b      	ldr	r3, [r7, #32]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d043      	beq.n	80139f4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801396c:	69ba      	ldr	r2, [r7, #24]
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	4413      	add	r3, r2
 8013972:	693a      	ldr	r2, [r7, #16]
 8013974:	8952      	ldrh	r2, [r2, #10]
 8013976:	4293      	cmp	r3, r2
 8013978:	d905      	bls.n	8013986 <f_write+0x1c4>
					cc = fs->csize - csect;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	895b      	ldrh	r3, [r3, #10]
 801397e:	461a      	mov	r2, r3
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	1ad3      	subs	r3, r2, r3
 8013984:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	7858      	ldrb	r0, [r3, #1]
 801398a:	6a3b      	ldr	r3, [r7, #32]
 801398c:	697a      	ldr	r2, [r7, #20]
 801398e:	69f9      	ldr	r1, [r7, #28]
 8013990:	f7fd fd40 	bl	8011414 <disk_write>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d004      	beq.n	80139a4 <f_write+0x1e2>
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2201      	movs	r2, #1
 801399e:	755a      	strb	r2, [r3, #21]
 80139a0:	2301      	movs	r3, #1
 80139a2:	e09e      	b.n	8013ae2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	6a1a      	ldr	r2, [r3, #32]
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	6a3a      	ldr	r2, [r7, #32]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d918      	bls.n	80139e4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	6a1a      	ldr	r2, [r3, #32]
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	1ad3      	subs	r3, r2, r3
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	8992      	ldrh	r2, [r2, #12]
 80139c4:	fb02 f303 	mul.w	r3, r2, r3
 80139c8:	69fa      	ldr	r2, [r7, #28]
 80139ca:	18d1      	adds	r1, r2, r3
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	899b      	ldrh	r3, [r3, #12]
 80139d0:	461a      	mov	r2, r3
 80139d2:	f7fd fddf 	bl	8011594 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	7d1b      	ldrb	r3, [r3, #20]
 80139da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139de:	b2da      	uxtb	r2, r3
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	899b      	ldrh	r3, [r3, #12]
 80139e8:	461a      	mov	r2, r3
 80139ea:	6a3b      	ldr	r3, [r7, #32]
 80139ec:	fb02 f303 	mul.w	r3, r2, r3
 80139f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80139f2:	e04b      	b.n	8013a8c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d016      	beq.n	8013a2c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	699a      	ldr	r2, [r3, #24]
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d210      	bcs.n	8013a2c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	7858      	ldrb	r0, [r3, #1]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a14:	2301      	movs	r3, #1
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	f7fd fcdc 	bl	80113d4 <disk_read>
 8013a1c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d004      	beq.n	8013a2c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2201      	movs	r2, #1
 8013a26:	755a      	strb	r2, [r3, #21]
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e05a      	b.n	8013ae2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	697a      	ldr	r2, [r7, #20]
 8013a30:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	899b      	ldrh	r3, [r3, #12]
 8013a36:	4618      	mov	r0, r3
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	699b      	ldr	r3, [r3, #24]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	8992      	ldrh	r2, [r2, #12]
 8013a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a44:	fb02 f201 	mul.w	r2, r2, r1
 8013a48:	1a9b      	subs	r3, r3, r2
 8013a4a:	1ac3      	subs	r3, r0, r3
 8013a4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d901      	bls.n	8013a5a <f_write+0x298>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	699b      	ldr	r3, [r3, #24]
 8013a64:	693a      	ldr	r2, [r7, #16]
 8013a66:	8992      	ldrh	r2, [r2, #12]
 8013a68:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a6c:	fb02 f200 	mul.w	r2, r2, r0
 8013a70:	1a9b      	subs	r3, r3, r2
 8013a72:	440b      	add	r3, r1
 8013a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a76:	69f9      	ldr	r1, [r7, #28]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fd fd8b 	bl	8011594 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	7d1b      	ldrb	r3, [r3, #20]
 8013a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013a8c:	69fa      	ldr	r2, [r7, #28]
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a90:	4413      	add	r3, r2
 8013a92:	61fb      	str	r3, [r7, #28]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	699a      	ldr	r2, [r3, #24]
 8013a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9a:	441a      	add	r2, r3
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	619a      	str	r2, [r3, #24]
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	68da      	ldr	r2, [r3, #12]
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	699b      	ldr	r3, [r3, #24]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	bf38      	it	cc
 8013aac:	461a      	movcc	r2, r3
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	60da      	str	r2, [r3, #12]
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab8:	441a      	add	r2, r3
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	601a      	str	r2, [r3, #0]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f47f aeb5 	bne.w	8013838 <f_write+0x76>
 8013ace:	e000      	b.n	8013ad2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ad0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	7d1b      	ldrb	r3, [r3, #20]
 8013ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ada:	b2da      	uxtb	r2, r3
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3730      	adds	r7, #48	; 0x30
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
	...

08013aec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b086      	sub	sp, #24
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f107 0208 	add.w	r2, r7, #8
 8013afa:	4611      	mov	r1, r2
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7ff fab7 	bl	8013070 <validate>
 8013b02:	4603      	mov	r3, r0
 8013b04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013b06:	7dfb      	ldrb	r3, [r7, #23]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d167      	bne.n	8013bdc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	7d1b      	ldrb	r3, [r3, #20]
 8013b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d061      	beq.n	8013bdc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	7d1b      	ldrb	r3, [r3, #20]
 8013b1c:	b25b      	sxtb	r3, r3
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	da15      	bge.n	8013b4e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	7858      	ldrb	r0, [r3, #1]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6a1a      	ldr	r2, [r3, #32]
 8013b30:	2301      	movs	r3, #1
 8013b32:	f7fd fc6f 	bl	8011414 <disk_write>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d001      	beq.n	8013b40 <f_sync+0x54>
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	e04e      	b.n	8013bde <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	7d1b      	ldrb	r3, [r3, #20]
 8013b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b48:	b2da      	uxtb	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013b4e:	4b26      	ldr	r3, [pc, #152]	; (8013be8 <f_sync+0xfc>)
 8013b50:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013b52:	68ba      	ldr	r2, [r7, #8]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b58:	4619      	mov	r1, r3
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	f7fd ff48 	bl	80119f0 <move_window>
 8013b60:	4603      	mov	r3, r0
 8013b62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013b64:	7dfb      	ldrb	r3, [r7, #23]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d138      	bne.n	8013bdc <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b6e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	330b      	adds	r3, #11
 8013b74:	781a      	ldrb	r2, [r3, #0]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	330b      	adds	r3, #11
 8013b7a:	f042 0220 	orr.w	r2, r2, #32
 8013b7e:	b2d2      	uxtb	r2, r2
 8013b80:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6818      	ldr	r0, [r3, #0]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	68f9      	ldr	r1, [r7, #12]
 8013b8e:	f7fe fccd 	bl	801252c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f103 021c 	add.w	r2, r3, #28
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	f7fd fccc 	bl	801153c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	3316      	adds	r3, #22
 8013ba8:	6939      	ldr	r1, [r7, #16]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fd fcc6 	bl	801153c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	3312      	adds	r3, #18
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fd fca5 	bl	8011506 <st_word>
					fs->wflag = 1;
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fd ff41 	bl	8011a4c <sync_fs>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	7d1b      	ldrb	r3, [r3, #20]
 8013bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bd6:	b2da      	uxtb	r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3718      	adds	r7, #24
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	274a0000 	.word	0x274a0000

08013bec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff ff79 	bl	8013aec <f_sync>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013bfe:	7bfb      	ldrb	r3, [r7, #15]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d118      	bne.n	8013c36 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f107 0208 	add.w	r2, r7, #8
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7ff fa2f 	bl	8013070 <validate>
 8013c12:	4603      	mov	r3, r0
 8013c14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013c16:	7bfb      	ldrb	r3, [r7, #15]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10c      	bne.n	8013c36 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	691b      	ldr	r3, [r3, #16]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fd fe41 	bl	80118a8 <dec_lock>
 8013c26:	4603      	mov	r3, r0
 8013c28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013c2a:	7bfb      	ldrb	r3, [r7, #15]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d102      	bne.n	8013c36 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013c40:	b590      	push	{r4, r7, lr}
 8013c42:	b091      	sub	sp, #68	; 0x44
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013c48:	f107 0108 	add.w	r1, r7, #8
 8013c4c:	1d3b      	adds	r3, r7, #4
 8013c4e:	2200      	movs	r2, #0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fe ff87 	bl	8012b64 <find_volume>
 8013c56:	4603      	mov	r3, r0
 8013c58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013c5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d131      	bne.n	8013cc8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	f107 030c 	add.w	r3, r7, #12
 8013c6e:	4611      	mov	r1, r2
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fe47 	bl	8012904 <follow_path>
 8013c76:	4603      	mov	r3, r0
 8013c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d11a      	bne.n	8013cba <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c88:	b25b      	sxtb	r3, r3
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	da03      	bge.n	8013c96 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	619a      	str	r2, [r3, #24]
 8013c94:	e011      	b.n	8013cba <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013c96:	7cbb      	ldrb	r3, [r7, #18]
 8013c98:	f003 0310 	and.w	r3, r3, #16
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d009      	beq.n	8013cb4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ca4:	68bc      	ldr	r4, [r7, #8]
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fe fc20 	bl	80124ee <ld_clust>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	61a3      	str	r3, [r4, #24]
 8013cb2:	e002      	b.n	8013cba <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013cb4:	2305      	movs	r3, #5
 8013cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013cba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cbe:	2b04      	cmp	r3, #4
 8013cc0:	d102      	bne.n	8013cc8 <f_chdir+0x88>
 8013cc2:	2305      	movs	r3, #5
 8013cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3744      	adds	r7, #68	; 0x44
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd90      	pop	{r4, r7, pc}

08013cd4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b090      	sub	sp, #64	; 0x40
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f107 0208 	add.w	r2, r7, #8
 8013ce4:	4611      	mov	r1, r2
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7ff f9c2 	bl	8013070 <validate>
 8013cec:	4603      	mov	r3, r0
 8013cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d103      	bne.n	8013d02 <f_lseek+0x2e>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	7d5b      	ldrb	r3, [r3, #21]
 8013cfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013d02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d002      	beq.n	8013d10 <f_lseek+0x3c>
 8013d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d0e:	e201      	b.n	8014114 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f000 80d9 	beq.w	8013ecc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d20:	d15a      	bne.n	8013dd8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d26:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2a:	1d1a      	adds	r2, r3, #4
 8013d2c:	627a      	str	r2, [r7, #36]	; 0x24
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	617b      	str	r3, [r7, #20]
 8013d32:	2302      	movs	r3, #2
 8013d34:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	689b      	ldr	r3, [r3, #8]
 8013d3a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d03a      	beq.n	8013db8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d44:	613b      	str	r3, [r7, #16]
 8013d46:	2300      	movs	r3, #0
 8013d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4c:	3302      	adds	r3, #2
 8013d4e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	3301      	adds	r3, #1
 8013d58:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fd ff03 	bl	8011b6a <get_fat>
 8013d64:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d804      	bhi.n	8013d76 <f_lseek+0xa2>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2202      	movs	r2, #2
 8013d70:	755a      	strb	r2, [r3, #21]
 8013d72:	2302      	movs	r3, #2
 8013d74:	e1ce      	b.n	8014114 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d7c:	d104      	bne.n	8013d88 <f_lseek+0xb4>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2201      	movs	r2, #1
 8013d82:	755a      	strb	r2, [r3, #21]
 8013d84:	2301      	movs	r3, #1
 8013d86:	e1c5      	b.n	8014114 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d0de      	beq.n	8013d50 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d809      	bhi.n	8013dae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	1d1a      	adds	r2, r3, #4
 8013d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8013da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013da2:	601a      	str	r2, [r3, #0]
 8013da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da6:	1d1a      	adds	r2, r3, #4
 8013da8:	627a      	str	r2, [r7, #36]	; 0x24
 8013daa:	693a      	ldr	r2, [r7, #16]
 8013dac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	69db      	ldr	r3, [r3, #28]
 8013db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d3c4      	bcc.n	8013d42 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dbe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d803      	bhi.n	8013dd0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	2200      	movs	r2, #0
 8013dcc:	601a      	str	r2, [r3, #0]
 8013dce:	e19f      	b.n	8014110 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013dd0:	2311      	movs	r3, #17
 8013dd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013dd6:	e19b      	b.n	8014110 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	683a      	ldr	r2, [r7, #0]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d902      	bls.n	8013de8 <f_lseek+0x114>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	f000 818d 	beq.w	8014110 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	3b01      	subs	r3, #1
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7fe f998 	bl	8012132 <clmt_clust>
 8013e02:	4602      	mov	r2, r0
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	69db      	ldr	r3, [r3, #28]
 8013e0e:	4619      	mov	r1, r3
 8013e10:	4610      	mov	r0, r2
 8013e12:	f7fd fe8b 	bl	8011b2c <clust2sect>
 8013e16:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d104      	bne.n	8013e28 <f_lseek+0x154>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2202      	movs	r2, #2
 8013e22:	755a      	strb	r2, [r3, #21]
 8013e24:	2302      	movs	r3, #2
 8013e26:	e175      	b.n	8014114 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	3b01      	subs	r3, #1
 8013e2c:	68ba      	ldr	r2, [r7, #8]
 8013e2e:	8992      	ldrh	r2, [r2, #12]
 8013e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	8952      	ldrh	r2, [r2, #10]
 8013e38:	3a01      	subs	r2, #1
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	69ba      	ldr	r2, [r7, #24]
 8013e3e:	4413      	add	r3, r2
 8013e40:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	699b      	ldr	r3, [r3, #24]
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	8992      	ldrh	r2, [r2, #12]
 8013e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e4e:	fb02 f201 	mul.w	r2, r2, r1
 8013e52:	1a9b      	subs	r3, r3, r2
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 815b 	beq.w	8014110 <f_lseek+0x43c>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6a1b      	ldr	r3, [r3, #32]
 8013e5e:	69ba      	ldr	r2, [r7, #24]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	f000 8155 	beq.w	8014110 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	7d1b      	ldrb	r3, [r3, #20]
 8013e6a:	b25b      	sxtb	r3, r3
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	da18      	bge.n	8013ea2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	7858      	ldrb	r0, [r3, #1]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6a1a      	ldr	r2, [r3, #32]
 8013e7e:	2301      	movs	r3, #1
 8013e80:	f7fd fac8 	bl	8011414 <disk_write>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d004      	beq.n	8013e94 <f_lseek+0x1c0>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	755a      	strb	r2, [r3, #21]
 8013e90:	2301      	movs	r3, #1
 8013e92:	e13f      	b.n	8014114 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	7d1b      	ldrb	r3, [r3, #20]
 8013e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e9c:	b2da      	uxtb	r2, r3
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	7858      	ldrb	r0, [r3, #1]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013eac:	2301      	movs	r3, #1
 8013eae:	69ba      	ldr	r2, [r7, #24]
 8013eb0:	f7fd fa90 	bl	80113d4 <disk_read>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d004      	beq.n	8013ec4 <f_lseek+0x1f0>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	755a      	strb	r2, [r3, #21]
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	e127      	b.n	8014114 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	69ba      	ldr	r2, [r7, #24]
 8013ec8:	621a      	str	r2, [r3, #32]
 8013eca:	e121      	b.n	8014110 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	683a      	ldr	r2, [r7, #0]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d908      	bls.n	8013ee8 <f_lseek+0x214>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	7d1b      	ldrb	r3, [r3, #20]
 8013eda:	f003 0302 	and.w	r3, r3, #2
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d102      	bne.n	8013ee8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	699b      	ldr	r3, [r3, #24]
 8013eec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ef6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f000 80b5 	beq.w	801406a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	895b      	ldrh	r3, [r3, #10]
 8013f04:	461a      	mov	r2, r3
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	899b      	ldrh	r3, [r3, #12]
 8013f0a:	fb03 f302 	mul.w	r3, r3, r2
 8013f0e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013f10:	6a3b      	ldr	r3, [r7, #32]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d01b      	beq.n	8013f4e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	1e5a      	subs	r2, r3, #1
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013f20:	6a3b      	ldr	r3, [r7, #32]
 8013f22:	1e59      	subs	r1, r3, #1
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d30f      	bcc.n	8013f4e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013f2e:	6a3b      	ldr	r3, [r7, #32]
 8013f30:	1e5a      	subs	r2, r3, #1
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	425b      	negs	r3, r3
 8013f36:	401a      	ands	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	699b      	ldr	r3, [r3, #24]
 8013f40:	683a      	ldr	r2, [r7, #0]
 8013f42:	1ad3      	subs	r3, r2, r3
 8013f44:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	69db      	ldr	r3, [r3, #28]
 8013f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f4c:	e022      	b.n	8013f94 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d119      	bne.n	8013f8e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fe f84f 	bl	8012002 <create_chain>
 8013f64:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d104      	bne.n	8013f76 <f_lseek+0x2a2>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	755a      	strb	r2, [r3, #21]
 8013f72:	2302      	movs	r3, #2
 8013f74:	e0ce      	b.n	8014114 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f7c:	d104      	bne.n	8013f88 <f_lseek+0x2b4>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2201      	movs	r2, #1
 8013f82:	755a      	strb	r2, [r3, #21]
 8013f84:	2301      	movs	r3, #1
 8013f86:	e0c5      	b.n	8014114 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f8c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f92:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d067      	beq.n	801406a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013f9a:	e03a      	b.n	8014012 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013f9c:	683a      	ldr	r2, [r7, #0]
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	1ad3      	subs	r3, r2, r3
 8013fa2:	603b      	str	r3, [r7, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	699a      	ldr	r2, [r3, #24]
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	441a      	add	r2, r3
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	7d1b      	ldrb	r3, [r3, #20]
 8013fb4:	f003 0302 	and.w	r3, r3, #2
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00b      	beq.n	8013fd4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fe f81e 	bl	8012002 <create_chain>
 8013fc6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d108      	bne.n	8013fe0 <f_lseek+0x30c>
							ofs = 0; break;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	603b      	str	r3, [r7, #0]
 8013fd2:	e022      	b.n	801401a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fd fdc6 	bl	8011b6a <get_fat>
 8013fde:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe6:	d104      	bne.n	8013ff2 <f_lseek+0x31e>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2201      	movs	r2, #1
 8013fec:	755a      	strb	r2, [r3, #21]
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e090      	b.n	8014114 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d904      	bls.n	8014002 <f_lseek+0x32e>
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	69db      	ldr	r3, [r3, #28]
 8013ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d304      	bcc.n	801400c <f_lseek+0x338>
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2202      	movs	r2, #2
 8014006:	755a      	strb	r2, [r3, #21]
 8014008:	2302      	movs	r3, #2
 801400a:	e083      	b.n	8014114 <f_lseek+0x440>
					fp->clust = clst;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014010:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014012:	683a      	ldr	r2, [r7, #0]
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	429a      	cmp	r2, r3
 8014018:	d8c0      	bhi.n	8013f9c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	699a      	ldr	r2, [r3, #24]
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	441a      	add	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	899b      	ldrh	r3, [r3, #12]
 801402a:	461a      	mov	r2, r3
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014032:	fb02 f201 	mul.w	r2, r2, r1
 8014036:	1a9b      	subs	r3, r3, r2
 8014038:	2b00      	cmp	r3, #0
 801403a:	d016      	beq.n	801406a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014040:	4618      	mov	r0, r3
 8014042:	f7fd fd73 	bl	8011b2c <clust2sect>
 8014046:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801404a:	2b00      	cmp	r3, #0
 801404c:	d104      	bne.n	8014058 <f_lseek+0x384>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2202      	movs	r2, #2
 8014052:	755a      	strb	r2, [r3, #21]
 8014054:	2302      	movs	r3, #2
 8014056:	e05d      	b.n	8014114 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	899b      	ldrh	r3, [r3, #12]
 801405c:	461a      	mov	r2, r3
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	fbb3 f3f2 	udiv	r3, r3, r2
 8014064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014066:	4413      	add	r3, r2
 8014068:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	699a      	ldr	r2, [r3, #24]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	429a      	cmp	r2, r3
 8014074:	d90a      	bls.n	801408c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	699a      	ldr	r2, [r3, #24]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	7d1b      	ldrb	r3, [r3, #20]
 8014082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014086:	b2da      	uxtb	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	68ba      	ldr	r2, [r7, #8]
 8014092:	8992      	ldrh	r2, [r2, #12]
 8014094:	fbb3 f1f2 	udiv	r1, r3, r2
 8014098:	fb02 f201 	mul.w	r2, r2, r1
 801409c:	1a9b      	subs	r3, r3, r2
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d036      	beq.n	8014110 <f_lseek+0x43c>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a1b      	ldr	r3, [r3, #32]
 80140a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d031      	beq.n	8014110 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	7d1b      	ldrb	r3, [r3, #20]
 80140b0:	b25b      	sxtb	r3, r3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	da18      	bge.n	80140e8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	7858      	ldrb	r0, [r3, #1]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6a1a      	ldr	r2, [r3, #32]
 80140c4:	2301      	movs	r3, #1
 80140c6:	f7fd f9a5 	bl	8011414 <disk_write>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d004      	beq.n	80140da <f_lseek+0x406>
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2201      	movs	r2, #1
 80140d4:	755a      	strb	r2, [r3, #21]
 80140d6:	2301      	movs	r3, #1
 80140d8:	e01c      	b.n	8014114 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	7d1b      	ldrb	r3, [r3, #20]
 80140de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140e2:	b2da      	uxtb	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	7858      	ldrb	r0, [r3, #1]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140f2:	2301      	movs	r3, #1
 80140f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140f6:	f7fd f96d 	bl	80113d4 <disk_read>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d004      	beq.n	801410a <f_lseek+0x436>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2201      	movs	r2, #1
 8014104:	755a      	strb	r2, [r3, #21]
 8014106:	2301      	movs	r3, #1
 8014108:	e004      	b.n	8014114 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801410e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014110:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014114:	4618      	mov	r0, r3
 8014116:	3740      	adds	r7, #64	; 0x40
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b09e      	sub	sp, #120	; 0x78
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014124:	2300      	movs	r3, #0
 8014126:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014128:	f107 010c 	add.w	r1, r7, #12
 801412c:	1d3b      	adds	r3, r7, #4
 801412e:	2202      	movs	r2, #2
 8014130:	4618      	mov	r0, r3
 8014132:	f7fe fd17 	bl	8012b64 <find_volume>
 8014136:	4603      	mov	r3, r0
 8014138:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014140:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014144:	2b00      	cmp	r3, #0
 8014146:	f040 80a4 	bne.w	8014292 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014150:	4611      	mov	r1, r2
 8014152:	4618      	mov	r0, r3
 8014154:	f7fe fbd6 	bl	8012904 <follow_path>
 8014158:	4603      	mov	r3, r0
 801415a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801415e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014162:	2b00      	cmp	r3, #0
 8014164:	d108      	bne.n	8014178 <f_unlink+0x5c>
 8014166:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801416a:	f003 0320 	and.w	r3, r3, #32
 801416e:	2b00      	cmp	r3, #0
 8014170:	d002      	beq.n	8014178 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014172:	2306      	movs	r3, #6
 8014174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801417c:	2b00      	cmp	r3, #0
 801417e:	d108      	bne.n	8014192 <f_unlink+0x76>
 8014180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014184:	2102      	movs	r1, #2
 8014186:	4618      	mov	r0, r3
 8014188:	f7fd fa82 	bl	8011690 <chk_lock>
 801418c:	4603      	mov	r3, r0
 801418e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014192:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014196:	2b00      	cmp	r3, #0
 8014198:	d17b      	bne.n	8014292 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801419a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801419e:	b25b      	sxtb	r3, r3
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	da03      	bge.n	80141ac <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80141a4:	2306      	movs	r3, #6
 80141a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80141aa:	e008      	b.n	80141be <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80141ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80141b0:	f003 0301 	and.w	r3, r3, #1
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d002      	beq.n	80141be <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80141b8:	2307      	movs	r3, #7
 80141ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80141be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d13d      	bne.n	8014242 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80141ca:	4611      	mov	r1, r2
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fe f98e 	bl	80124ee <ld_clust>
 80141d2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80141d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80141d8:	f003 0310 	and.w	r3, r3, #16
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d030      	beq.n	8014242 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	699b      	ldr	r3, [r3, #24]
 80141e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d103      	bne.n	80141f2 <f_unlink+0xd6>
						res = FR_DENIED;
 80141ea:	2307      	movs	r3, #7
 80141ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80141f0:	e027      	b.n	8014242 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80141f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80141f8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80141fa:	f107 0310 	add.w	r3, r7, #16
 80141fe:	2100      	movs	r1, #0
 8014200:	4618      	mov	r0, r3
 8014202:	f7fd ffce 	bl	80121a2 <dir_sdi>
 8014206:	4603      	mov	r3, r0
 8014208:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801420c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014210:	2b00      	cmp	r3, #0
 8014212:	d116      	bne.n	8014242 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014214:	f107 0310 	add.w	r3, r7, #16
 8014218:	2100      	movs	r1, #0
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe f9a6 	bl	801256c <dir_read>
 8014220:	4603      	mov	r3, r0
 8014222:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014226:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801422a:	2b00      	cmp	r3, #0
 801422c:	d102      	bne.n	8014234 <f_unlink+0x118>
 801422e:	2307      	movs	r3, #7
 8014230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014234:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014238:	2b04      	cmp	r3, #4
 801423a:	d102      	bne.n	8014242 <f_unlink+0x126>
 801423c:	2300      	movs	r3, #0
 801423e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014242:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014246:	2b00      	cmp	r3, #0
 8014248:	d123      	bne.n	8014292 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801424a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801424e:	4618      	mov	r0, r3
 8014250:	f7fe fa70 	bl	8012734 <dir_remove>
 8014254:	4603      	mov	r3, r0
 8014256:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801425a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801425e:	2b00      	cmp	r3, #0
 8014260:	d10c      	bne.n	801427c <f_unlink+0x160>
 8014262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014264:	2b00      	cmp	r3, #0
 8014266:	d009      	beq.n	801427c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801426c:	2200      	movs	r2, #0
 801426e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014270:	4618      	mov	r0, r3
 8014272:	f7fd fe61 	bl	8011f38 <remove_chain>
 8014276:	4603      	mov	r3, r0
 8014278:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801427c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014280:	2b00      	cmp	r3, #0
 8014282:	d106      	bne.n	8014292 <f_unlink+0x176>
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	4618      	mov	r0, r3
 8014288:	f7fd fbe0 	bl	8011a4c <sync_fs>
 801428c:	4603      	mov	r3, r0
 801428e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014292:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014296:	4618      	mov	r0, r3
 8014298:	3778      	adds	r7, #120	; 0x78
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
	...

080142a0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b096      	sub	sp, #88	; 0x58
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80142a8:	f107 0108 	add.w	r1, r7, #8
 80142ac:	1d3b      	adds	r3, r7, #4
 80142ae:	2202      	movs	r2, #2
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fe fc57 	bl	8012b64 <find_volume>
 80142b6:	4603      	mov	r3, r0
 80142b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80142c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	f040 80fe 	bne.w	80144c6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	f107 030c 	add.w	r3, r7, #12
 80142d0:	4611      	mov	r1, r2
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fe fb16 	bl	8012904 <follow_path>
 80142d8:	4603      	mov	r3, r0
 80142da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80142de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d102      	bne.n	80142ec <f_mkdir+0x4c>
 80142e6:	2308      	movs	r3, #8
 80142e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80142ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142f0:	2b04      	cmp	r3, #4
 80142f2:	d108      	bne.n	8014306 <f_mkdir+0x66>
 80142f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80142f8:	f003 0320 	and.w	r3, r3, #32
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d002      	beq.n	8014306 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014300:	2306      	movs	r3, #6
 8014302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801430a:	2b04      	cmp	r3, #4
 801430c:	f040 80db 	bne.w	80144c6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014310:	f107 030c 	add.w	r3, r7, #12
 8014314:	2100      	movs	r1, #0
 8014316:	4618      	mov	r0, r3
 8014318:	f7fd fe73 	bl	8012002 <create_chain>
 801431c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	895b      	ldrh	r3, [r3, #10]
 8014322:	461a      	mov	r2, r3
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	899b      	ldrh	r3, [r3, #12]
 8014328:	fb03 f302 	mul.w	r3, r3, r2
 801432c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014336:	2b00      	cmp	r3, #0
 8014338:	d102      	bne.n	8014340 <f_mkdir+0xa0>
 801433a:	2307      	movs	r3, #7
 801433c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014342:	2b01      	cmp	r3, #1
 8014344:	d102      	bne.n	801434c <f_mkdir+0xac>
 8014346:	2302      	movs	r3, #2
 8014348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014352:	d102      	bne.n	801435a <f_mkdir+0xba>
 8014354:	2301      	movs	r3, #1
 8014356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801435a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801435e:	2b00      	cmp	r3, #0
 8014360:	d106      	bne.n	8014370 <f_mkdir+0xd0>
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	4618      	mov	r0, r3
 8014366:	f7fd faff 	bl	8011968 <sync_window>
 801436a:	4603      	mov	r3, r0
 801436c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014370:	4b58      	ldr	r3, [pc, #352]	; (80144d4 <f_mkdir+0x234>)
 8014372:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014378:	2b00      	cmp	r3, #0
 801437a:	d16c      	bne.n	8014456 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014380:	4618      	mov	r0, r3
 8014382:	f7fd fbd3 	bl	8011b2c <clust2sect>
 8014386:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	3338      	adds	r3, #56	; 0x38
 801438c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	899b      	ldrh	r3, [r3, #12]
 8014392:	461a      	mov	r2, r3
 8014394:	2100      	movs	r1, #0
 8014396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014398:	f7fd f91d 	bl	80115d6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801439c:	220b      	movs	r2, #11
 801439e:	2120      	movs	r1, #32
 80143a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80143a2:	f7fd f918 	bl	80115d6 <mem_set>
					dir[DIR_Name] = '.';
 80143a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143a8:	222e      	movs	r2, #46	; 0x2e
 80143aa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80143ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ae:	330b      	adds	r3, #11
 80143b0:	2210      	movs	r2, #16
 80143b2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80143b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143b6:	3316      	adds	r3, #22
 80143b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fd f8be 	bl	801153c <st_dword>
					st_clust(fs, dir, dcl);
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fe f8b0 	bl	801252c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80143cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ce:	3320      	adds	r3, #32
 80143d0:	2220      	movs	r2, #32
 80143d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fd f8dd 	bl	8011594 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80143da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143dc:	3321      	adds	r3, #33	; 0x21
 80143de:	222e      	movs	r2, #46	; 0x2e
 80143e0:	701a      	strb	r2, [r3, #0]
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d106      	bne.n	80143fc <f_mkdir+0x15c>
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d101      	bne.n	80143fc <f_mkdir+0x15c>
 80143f8:	2300      	movs	r3, #0
 80143fa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80143fc:	68b8      	ldr	r0, [r7, #8]
 80143fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014400:	3320      	adds	r3, #32
 8014402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014404:	4619      	mov	r1, r3
 8014406:	f7fe f891 	bl	801252c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	895b      	ldrh	r3, [r3, #10]
 801440e:	653b      	str	r3, [r7, #80]	; 0x50
 8014410:	e01c      	b.n	801444c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014414:	1c5a      	adds	r2, r3, #1
 8014416:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	2201      	movs	r2, #1
 8014420:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	4618      	mov	r0, r3
 8014426:	f7fd fa9f 	bl	8011968 <sync_window>
 801442a:	4603      	mov	r3, r0
 801442c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10d      	bne.n	8014454 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	899b      	ldrh	r3, [r3, #12]
 801443c:	461a      	mov	r2, r3
 801443e:	2100      	movs	r1, #0
 8014440:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014442:	f7fd f8c8 	bl	80115d6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014448:	3b01      	subs	r3, #1
 801444a:	653b      	str	r3, [r7, #80]	; 0x50
 801444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801444e:	2b00      	cmp	r3, #0
 8014450:	d1df      	bne.n	8014412 <f_mkdir+0x172>
 8014452:	e000      	b.n	8014456 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014454:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801445a:	2b00      	cmp	r3, #0
 801445c:	d107      	bne.n	801446e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801445e:	f107 030c 	add.w	r3, r7, #12
 8014462:	4618      	mov	r0, r3
 8014464:	f7fe f934 	bl	80126d0 <dir_register>
 8014468:	4603      	mov	r3, r0
 801446a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801446e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014472:	2b00      	cmp	r3, #0
 8014474:	d120      	bne.n	80144b8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014478:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801447a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801447c:	3316      	adds	r3, #22
 801447e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014480:	4618      	mov	r0, r3
 8014482:	f7fd f85b 	bl	801153c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801448a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801448c:	4618      	mov	r0, r3
 801448e:	f7fe f84d 	bl	801252c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014494:	330b      	adds	r3, #11
 8014496:	2210      	movs	r2, #16
 8014498:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	2201      	movs	r2, #1
 801449e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80144a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10e      	bne.n	80144c6 <f_mkdir+0x226>
					res = sync_fs(fs);
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fd face 	bl	8011a4c <sync_fs>
 80144b0:	4603      	mov	r3, r0
 80144b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80144b6:	e006      	b.n	80144c6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80144b8:	f107 030c 	add.w	r3, r7, #12
 80144bc:	2200      	movs	r2, #0
 80144be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fd fd39 	bl	8011f38 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80144c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3758      	adds	r7, #88	; 0x58
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	274a0000 	.word	0x274a0000

080144d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80144e4:	2300      	movs	r3, #0
 80144e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80144ec:	e017      	b.n	801451e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80144ee:	f107 0310 	add.w	r3, r7, #16
 80144f2:	f107 0114 	add.w	r1, r7, #20
 80144f6:	2201      	movs	r2, #1
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7ff f803 	bl	8013504 <f_read>
		if (rc != 1) break;
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	2b01      	cmp	r3, #1
 8014502:	d112      	bne.n	801452a <f_gets+0x52>
		c = s[0];
 8014504:	7d3b      	ldrb	r3, [r7, #20]
 8014506:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014508:	69bb      	ldr	r3, [r7, #24]
 801450a:	1c5a      	adds	r2, r3, #1
 801450c:	61ba      	str	r2, [r7, #24]
 801450e:	7dfa      	ldrb	r2, [r7, #23]
 8014510:	701a      	strb	r2, [r3, #0]
		n++;
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	3301      	adds	r3, #1
 8014516:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014518:	7dfb      	ldrb	r3, [r7, #23]
 801451a:	2b0a      	cmp	r3, #10
 801451c:	d007      	beq.n	801452e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	3b01      	subs	r3, #1
 8014522:	69fa      	ldr	r2, [r7, #28]
 8014524:	429a      	cmp	r2, r3
 8014526:	dbe2      	blt.n	80144ee <f_gets+0x16>
 8014528:	e002      	b.n	8014530 <f_gets+0x58>
		if (rc != 1) break;
 801452a:	bf00      	nop
 801452c:	e000      	b.n	8014530 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801452e:	bf00      	nop
	}
	*p = 0;
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	2200      	movs	r2, #0
 8014534:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d001      	beq.n	8014540 <f_gets+0x68>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	e000      	b.n	8014542 <f_gets+0x6a>
 8014540:	2300      	movs	r3, #0
}
 8014542:	4618      	mov	r0, r3
 8014544:	3720      	adds	r7, #32
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
	...

0801454c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801454c:	b480      	push	{r7}
 801454e:	b087      	sub	sp, #28
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	4613      	mov	r3, r2
 8014558:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801455a:	2301      	movs	r3, #1
 801455c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801455e:	2300      	movs	r3, #0
 8014560:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014562:	4b1f      	ldr	r3, [pc, #124]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 8014564:	7a5b      	ldrb	r3, [r3, #9]
 8014566:	b2db      	uxtb	r3, r3
 8014568:	2b00      	cmp	r3, #0
 801456a:	d131      	bne.n	80145d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801456c:	4b1c      	ldr	r3, [pc, #112]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 801456e:	7a5b      	ldrb	r3, [r3, #9]
 8014570:	b2db      	uxtb	r3, r3
 8014572:	461a      	mov	r2, r3
 8014574:	4b1a      	ldr	r3, [pc, #104]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 8014576:	2100      	movs	r1, #0
 8014578:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801457a:	4b19      	ldr	r3, [pc, #100]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 801457c:	7a5b      	ldrb	r3, [r3, #9]
 801457e:	b2db      	uxtb	r3, r3
 8014580:	4a17      	ldr	r2, [pc, #92]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	4413      	add	r3, r2
 8014586:	68fa      	ldr	r2, [r7, #12]
 8014588:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801458a:	4b15      	ldr	r3, [pc, #84]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 801458c:	7a5b      	ldrb	r3, [r3, #9]
 801458e:	b2db      	uxtb	r3, r3
 8014590:	461a      	mov	r2, r3
 8014592:	4b13      	ldr	r3, [pc, #76]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 8014594:	4413      	add	r3, r2
 8014596:	79fa      	ldrb	r2, [r7, #7]
 8014598:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801459a:	4b11      	ldr	r3, [pc, #68]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 801459c:	7a5b      	ldrb	r3, [r3, #9]
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	1c5a      	adds	r2, r3, #1
 80145a2:	b2d1      	uxtb	r1, r2
 80145a4:	4a0e      	ldr	r2, [pc, #56]	; (80145e0 <FATFS_LinkDriverEx+0x94>)
 80145a6:	7251      	strb	r1, [r2, #9]
 80145a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80145aa:	7dbb      	ldrb	r3, [r7, #22]
 80145ac:	3330      	adds	r3, #48	; 0x30
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	3301      	adds	r3, #1
 80145b8:	223a      	movs	r2, #58	; 0x3a
 80145ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	3302      	adds	r3, #2
 80145c0:	222f      	movs	r2, #47	; 0x2f
 80145c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	3303      	adds	r3, #3
 80145c8:	2200      	movs	r2, #0
 80145ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	371c      	adds	r7, #28
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop
 80145e0:	200481c4 	.word	0x200481c4

080145e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80145ee:	2200      	movs	r2, #0
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f7ff ffaa 	bl	801454c <FATFS_LinkDriverEx>
 80145f8:	4603      	mov	r3, r0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <__cxa_guard_acquire>:
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	07db      	lsls	r3, r3, #31
 8014606:	d406      	bmi.n	8014616 <__cxa_guard_acquire+0x14>
 8014608:	7843      	ldrb	r3, [r0, #1]
 801460a:	b103      	cbz	r3, 801460e <__cxa_guard_acquire+0xc>
 801460c:	deff      	udf	#255	; 0xff
 801460e:	2301      	movs	r3, #1
 8014610:	7043      	strb	r3, [r0, #1]
 8014612:	4618      	mov	r0, r3
 8014614:	4770      	bx	lr
 8014616:	2000      	movs	r0, #0
 8014618:	4770      	bx	lr

0801461a <__cxa_guard_release>:
 801461a:	2301      	movs	r3, #1
 801461c:	6003      	str	r3, [r0, #0]
 801461e:	4770      	bx	lr

08014620 <__errno>:
 8014620:	4b01      	ldr	r3, [pc, #4]	; (8014628 <__errno+0x8>)
 8014622:	6818      	ldr	r0, [r3, #0]
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop
 8014628:	2000000c 	.word	0x2000000c

0801462c <__libc_init_array>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	4e0d      	ldr	r6, [pc, #52]	; (8014664 <__libc_init_array+0x38>)
 8014630:	4c0d      	ldr	r4, [pc, #52]	; (8014668 <__libc_init_array+0x3c>)
 8014632:	1ba4      	subs	r4, r4, r6
 8014634:	10a4      	asrs	r4, r4, #2
 8014636:	2500      	movs	r5, #0
 8014638:	42a5      	cmp	r5, r4
 801463a:	d109      	bne.n	8014650 <__libc_init_array+0x24>
 801463c:	4e0b      	ldr	r6, [pc, #44]	; (801466c <__libc_init_array+0x40>)
 801463e:	4c0c      	ldr	r4, [pc, #48]	; (8014670 <__libc_init_array+0x44>)
 8014640:	f004 f9e8 	bl	8018a14 <_init>
 8014644:	1ba4      	subs	r4, r4, r6
 8014646:	10a4      	asrs	r4, r4, #2
 8014648:	2500      	movs	r5, #0
 801464a:	42a5      	cmp	r5, r4
 801464c:	d105      	bne.n	801465a <__libc_init_array+0x2e>
 801464e:	bd70      	pop	{r4, r5, r6, pc}
 8014650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014654:	4798      	blx	r3
 8014656:	3501      	adds	r5, #1
 8014658:	e7ee      	b.n	8014638 <__libc_init_array+0xc>
 801465a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801465e:	4798      	blx	r3
 8014660:	3501      	adds	r5, #1
 8014662:	e7f2      	b.n	801464a <__libc_init_array+0x1e>
 8014664:	0801926c 	.word	0x0801926c
 8014668:	0801926c 	.word	0x0801926c
 801466c:	0801926c 	.word	0x0801926c
 8014670:	08019274 	.word	0x08019274

08014674 <memset>:
 8014674:	4402      	add	r2, r0
 8014676:	4603      	mov	r3, r0
 8014678:	4293      	cmp	r3, r2
 801467a:	d100      	bne.n	801467e <memset+0xa>
 801467c:	4770      	bx	lr
 801467e:	f803 1b01 	strb.w	r1, [r3], #1
 8014682:	e7f9      	b.n	8014678 <memset+0x4>

08014684 <__cvt>:
 8014684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014688:	ec55 4b10 	vmov	r4, r5, d0
 801468c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801468e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014692:	2d00      	cmp	r5, #0
 8014694:	460e      	mov	r6, r1
 8014696:	4691      	mov	r9, r2
 8014698:	4619      	mov	r1, r3
 801469a:	bfb8      	it	lt
 801469c:	4622      	movlt	r2, r4
 801469e:	462b      	mov	r3, r5
 80146a0:	f027 0720 	bic.w	r7, r7, #32
 80146a4:	bfbb      	ittet	lt
 80146a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80146aa:	461d      	movlt	r5, r3
 80146ac:	2300      	movge	r3, #0
 80146ae:	232d      	movlt	r3, #45	; 0x2d
 80146b0:	bfb8      	it	lt
 80146b2:	4614      	movlt	r4, r2
 80146b4:	2f46      	cmp	r7, #70	; 0x46
 80146b6:	700b      	strb	r3, [r1, #0]
 80146b8:	d004      	beq.n	80146c4 <__cvt+0x40>
 80146ba:	2f45      	cmp	r7, #69	; 0x45
 80146bc:	d100      	bne.n	80146c0 <__cvt+0x3c>
 80146be:	3601      	adds	r6, #1
 80146c0:	2102      	movs	r1, #2
 80146c2:	e000      	b.n	80146c6 <__cvt+0x42>
 80146c4:	2103      	movs	r1, #3
 80146c6:	ab03      	add	r3, sp, #12
 80146c8:	9301      	str	r3, [sp, #4]
 80146ca:	ab02      	add	r3, sp, #8
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	4632      	mov	r2, r6
 80146d0:	4653      	mov	r3, sl
 80146d2:	ec45 4b10 	vmov	d0, r4, r5
 80146d6:	f001 fdff 	bl	80162d8 <_dtoa_r>
 80146da:	2f47      	cmp	r7, #71	; 0x47
 80146dc:	4680      	mov	r8, r0
 80146de:	d102      	bne.n	80146e6 <__cvt+0x62>
 80146e0:	f019 0f01 	tst.w	r9, #1
 80146e4:	d026      	beq.n	8014734 <__cvt+0xb0>
 80146e6:	2f46      	cmp	r7, #70	; 0x46
 80146e8:	eb08 0906 	add.w	r9, r8, r6
 80146ec:	d111      	bne.n	8014712 <__cvt+0x8e>
 80146ee:	f898 3000 	ldrb.w	r3, [r8]
 80146f2:	2b30      	cmp	r3, #48	; 0x30
 80146f4:	d10a      	bne.n	801470c <__cvt+0x88>
 80146f6:	2200      	movs	r2, #0
 80146f8:	2300      	movs	r3, #0
 80146fa:	4620      	mov	r0, r4
 80146fc:	4629      	mov	r1, r5
 80146fe:	f7ec f9fb 	bl	8000af8 <__aeabi_dcmpeq>
 8014702:	b918      	cbnz	r0, 801470c <__cvt+0x88>
 8014704:	f1c6 0601 	rsb	r6, r6, #1
 8014708:	f8ca 6000 	str.w	r6, [sl]
 801470c:	f8da 3000 	ldr.w	r3, [sl]
 8014710:	4499      	add	r9, r3
 8014712:	2200      	movs	r2, #0
 8014714:	2300      	movs	r3, #0
 8014716:	4620      	mov	r0, r4
 8014718:	4629      	mov	r1, r5
 801471a:	f7ec f9ed 	bl	8000af8 <__aeabi_dcmpeq>
 801471e:	b938      	cbnz	r0, 8014730 <__cvt+0xac>
 8014720:	2230      	movs	r2, #48	; 0x30
 8014722:	9b03      	ldr	r3, [sp, #12]
 8014724:	454b      	cmp	r3, r9
 8014726:	d205      	bcs.n	8014734 <__cvt+0xb0>
 8014728:	1c59      	adds	r1, r3, #1
 801472a:	9103      	str	r1, [sp, #12]
 801472c:	701a      	strb	r2, [r3, #0]
 801472e:	e7f8      	b.n	8014722 <__cvt+0x9e>
 8014730:	f8cd 900c 	str.w	r9, [sp, #12]
 8014734:	9b03      	ldr	r3, [sp, #12]
 8014736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014738:	eba3 0308 	sub.w	r3, r3, r8
 801473c:	4640      	mov	r0, r8
 801473e:	6013      	str	r3, [r2, #0]
 8014740:	b004      	add	sp, #16
 8014742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014746 <__exponent>:
 8014746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014748:	2900      	cmp	r1, #0
 801474a:	4604      	mov	r4, r0
 801474c:	bfba      	itte	lt
 801474e:	4249      	neglt	r1, r1
 8014750:	232d      	movlt	r3, #45	; 0x2d
 8014752:	232b      	movge	r3, #43	; 0x2b
 8014754:	2909      	cmp	r1, #9
 8014756:	f804 2b02 	strb.w	r2, [r4], #2
 801475a:	7043      	strb	r3, [r0, #1]
 801475c:	dd20      	ble.n	80147a0 <__exponent+0x5a>
 801475e:	f10d 0307 	add.w	r3, sp, #7
 8014762:	461f      	mov	r7, r3
 8014764:	260a      	movs	r6, #10
 8014766:	fb91 f5f6 	sdiv	r5, r1, r6
 801476a:	fb06 1115 	mls	r1, r6, r5, r1
 801476e:	3130      	adds	r1, #48	; 0x30
 8014770:	2d09      	cmp	r5, #9
 8014772:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014776:	f103 32ff 	add.w	r2, r3, #4294967295
 801477a:	4629      	mov	r1, r5
 801477c:	dc09      	bgt.n	8014792 <__exponent+0x4c>
 801477e:	3130      	adds	r1, #48	; 0x30
 8014780:	3b02      	subs	r3, #2
 8014782:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014786:	42bb      	cmp	r3, r7
 8014788:	4622      	mov	r2, r4
 801478a:	d304      	bcc.n	8014796 <__exponent+0x50>
 801478c:	1a10      	subs	r0, r2, r0
 801478e:	b003      	add	sp, #12
 8014790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014792:	4613      	mov	r3, r2
 8014794:	e7e7      	b.n	8014766 <__exponent+0x20>
 8014796:	f813 2b01 	ldrb.w	r2, [r3], #1
 801479a:	f804 2b01 	strb.w	r2, [r4], #1
 801479e:	e7f2      	b.n	8014786 <__exponent+0x40>
 80147a0:	2330      	movs	r3, #48	; 0x30
 80147a2:	4419      	add	r1, r3
 80147a4:	7083      	strb	r3, [r0, #2]
 80147a6:	1d02      	adds	r2, r0, #4
 80147a8:	70c1      	strb	r1, [r0, #3]
 80147aa:	e7ef      	b.n	801478c <__exponent+0x46>

080147ac <_printf_float>:
 80147ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b0:	b08d      	sub	sp, #52	; 0x34
 80147b2:	460c      	mov	r4, r1
 80147b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80147b8:	4616      	mov	r6, r2
 80147ba:	461f      	mov	r7, r3
 80147bc:	4605      	mov	r5, r0
 80147be:	f002 fe7d 	bl	80174bc <_localeconv_r>
 80147c2:	6803      	ldr	r3, [r0, #0]
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7eb fd1a 	bl	8000200 <strlen>
 80147cc:	2300      	movs	r3, #0
 80147ce:	930a      	str	r3, [sp, #40]	; 0x28
 80147d0:	f8d8 3000 	ldr.w	r3, [r8]
 80147d4:	9005      	str	r0, [sp, #20]
 80147d6:	3307      	adds	r3, #7
 80147d8:	f023 0307 	bic.w	r3, r3, #7
 80147dc:	f103 0208 	add.w	r2, r3, #8
 80147e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80147e4:	f8d4 b000 	ldr.w	fp, [r4]
 80147e8:	f8c8 2000 	str.w	r2, [r8]
 80147ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80147f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80147f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80147fc:	9307      	str	r3, [sp, #28]
 80147fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8014802:	f04f 32ff 	mov.w	r2, #4294967295
 8014806:	4ba7      	ldr	r3, [pc, #668]	; (8014aa4 <_printf_float+0x2f8>)
 8014808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801480c:	f7ec f9a6 	bl	8000b5c <__aeabi_dcmpun>
 8014810:	bb70      	cbnz	r0, 8014870 <_printf_float+0xc4>
 8014812:	f04f 32ff 	mov.w	r2, #4294967295
 8014816:	4ba3      	ldr	r3, [pc, #652]	; (8014aa4 <_printf_float+0x2f8>)
 8014818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801481c:	f7ec f980 	bl	8000b20 <__aeabi_dcmple>
 8014820:	bb30      	cbnz	r0, 8014870 <_printf_float+0xc4>
 8014822:	2200      	movs	r2, #0
 8014824:	2300      	movs	r3, #0
 8014826:	4640      	mov	r0, r8
 8014828:	4649      	mov	r1, r9
 801482a:	f7ec f96f 	bl	8000b0c <__aeabi_dcmplt>
 801482e:	b110      	cbz	r0, 8014836 <_printf_float+0x8a>
 8014830:	232d      	movs	r3, #45	; 0x2d
 8014832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014836:	4a9c      	ldr	r2, [pc, #624]	; (8014aa8 <_printf_float+0x2fc>)
 8014838:	4b9c      	ldr	r3, [pc, #624]	; (8014aac <_printf_float+0x300>)
 801483a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801483e:	bf8c      	ite	hi
 8014840:	4690      	movhi	r8, r2
 8014842:	4698      	movls	r8, r3
 8014844:	2303      	movs	r3, #3
 8014846:	f02b 0204 	bic.w	r2, fp, #4
 801484a:	6123      	str	r3, [r4, #16]
 801484c:	6022      	str	r2, [r4, #0]
 801484e:	f04f 0900 	mov.w	r9, #0
 8014852:	9700      	str	r7, [sp, #0]
 8014854:	4633      	mov	r3, r6
 8014856:	aa0b      	add	r2, sp, #44	; 0x2c
 8014858:	4621      	mov	r1, r4
 801485a:	4628      	mov	r0, r5
 801485c:	f000 f9e6 	bl	8014c2c <_printf_common>
 8014860:	3001      	adds	r0, #1
 8014862:	f040 808d 	bne.w	8014980 <_printf_float+0x1d4>
 8014866:	f04f 30ff 	mov.w	r0, #4294967295
 801486a:	b00d      	add	sp, #52	; 0x34
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014870:	4642      	mov	r2, r8
 8014872:	464b      	mov	r3, r9
 8014874:	4640      	mov	r0, r8
 8014876:	4649      	mov	r1, r9
 8014878:	f7ec f970 	bl	8000b5c <__aeabi_dcmpun>
 801487c:	b110      	cbz	r0, 8014884 <_printf_float+0xd8>
 801487e:	4a8c      	ldr	r2, [pc, #560]	; (8014ab0 <_printf_float+0x304>)
 8014880:	4b8c      	ldr	r3, [pc, #560]	; (8014ab4 <_printf_float+0x308>)
 8014882:	e7da      	b.n	801483a <_printf_float+0x8e>
 8014884:	6861      	ldr	r1, [r4, #4]
 8014886:	1c4b      	adds	r3, r1, #1
 8014888:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801488c:	a80a      	add	r0, sp, #40	; 0x28
 801488e:	d13e      	bne.n	801490e <_printf_float+0x162>
 8014890:	2306      	movs	r3, #6
 8014892:	6063      	str	r3, [r4, #4]
 8014894:	2300      	movs	r3, #0
 8014896:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801489a:	ab09      	add	r3, sp, #36	; 0x24
 801489c:	9300      	str	r3, [sp, #0]
 801489e:	ec49 8b10 	vmov	d0, r8, r9
 80148a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80148a6:	6022      	str	r2, [r4, #0]
 80148a8:	f8cd a004 	str.w	sl, [sp, #4]
 80148ac:	6861      	ldr	r1, [r4, #4]
 80148ae:	4628      	mov	r0, r5
 80148b0:	f7ff fee8 	bl	8014684 <__cvt>
 80148b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80148b8:	2b47      	cmp	r3, #71	; 0x47
 80148ba:	4680      	mov	r8, r0
 80148bc:	d109      	bne.n	80148d2 <_printf_float+0x126>
 80148be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148c0:	1cd8      	adds	r0, r3, #3
 80148c2:	db02      	blt.n	80148ca <_printf_float+0x11e>
 80148c4:	6862      	ldr	r2, [r4, #4]
 80148c6:	4293      	cmp	r3, r2
 80148c8:	dd47      	ble.n	801495a <_printf_float+0x1ae>
 80148ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80148ce:	fa5f fa8a 	uxtb.w	sl, sl
 80148d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80148d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148d8:	d824      	bhi.n	8014924 <_printf_float+0x178>
 80148da:	3901      	subs	r1, #1
 80148dc:	4652      	mov	r2, sl
 80148de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80148e2:	9109      	str	r1, [sp, #36]	; 0x24
 80148e4:	f7ff ff2f 	bl	8014746 <__exponent>
 80148e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148ea:	1813      	adds	r3, r2, r0
 80148ec:	2a01      	cmp	r2, #1
 80148ee:	4681      	mov	r9, r0
 80148f0:	6123      	str	r3, [r4, #16]
 80148f2:	dc02      	bgt.n	80148fa <_printf_float+0x14e>
 80148f4:	6822      	ldr	r2, [r4, #0]
 80148f6:	07d1      	lsls	r1, r2, #31
 80148f8:	d501      	bpl.n	80148fe <_printf_float+0x152>
 80148fa:	3301      	adds	r3, #1
 80148fc:	6123      	str	r3, [r4, #16]
 80148fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014902:	2b00      	cmp	r3, #0
 8014904:	d0a5      	beq.n	8014852 <_printf_float+0xa6>
 8014906:	232d      	movs	r3, #45	; 0x2d
 8014908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801490c:	e7a1      	b.n	8014852 <_printf_float+0xa6>
 801490e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014912:	f000 8177 	beq.w	8014c04 <_printf_float+0x458>
 8014916:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801491a:	d1bb      	bne.n	8014894 <_printf_float+0xe8>
 801491c:	2900      	cmp	r1, #0
 801491e:	d1b9      	bne.n	8014894 <_printf_float+0xe8>
 8014920:	2301      	movs	r3, #1
 8014922:	e7b6      	b.n	8014892 <_printf_float+0xe6>
 8014924:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014928:	d119      	bne.n	801495e <_printf_float+0x1b2>
 801492a:	2900      	cmp	r1, #0
 801492c:	6863      	ldr	r3, [r4, #4]
 801492e:	dd0c      	ble.n	801494a <_printf_float+0x19e>
 8014930:	6121      	str	r1, [r4, #16]
 8014932:	b913      	cbnz	r3, 801493a <_printf_float+0x18e>
 8014934:	6822      	ldr	r2, [r4, #0]
 8014936:	07d2      	lsls	r2, r2, #31
 8014938:	d502      	bpl.n	8014940 <_printf_float+0x194>
 801493a:	3301      	adds	r3, #1
 801493c:	440b      	add	r3, r1
 801493e:	6123      	str	r3, [r4, #16]
 8014940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014942:	65a3      	str	r3, [r4, #88]	; 0x58
 8014944:	f04f 0900 	mov.w	r9, #0
 8014948:	e7d9      	b.n	80148fe <_printf_float+0x152>
 801494a:	b913      	cbnz	r3, 8014952 <_printf_float+0x1a6>
 801494c:	6822      	ldr	r2, [r4, #0]
 801494e:	07d0      	lsls	r0, r2, #31
 8014950:	d501      	bpl.n	8014956 <_printf_float+0x1aa>
 8014952:	3302      	adds	r3, #2
 8014954:	e7f3      	b.n	801493e <_printf_float+0x192>
 8014956:	2301      	movs	r3, #1
 8014958:	e7f1      	b.n	801493e <_printf_float+0x192>
 801495a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801495e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014962:	4293      	cmp	r3, r2
 8014964:	db05      	blt.n	8014972 <_printf_float+0x1c6>
 8014966:	6822      	ldr	r2, [r4, #0]
 8014968:	6123      	str	r3, [r4, #16]
 801496a:	07d1      	lsls	r1, r2, #31
 801496c:	d5e8      	bpl.n	8014940 <_printf_float+0x194>
 801496e:	3301      	adds	r3, #1
 8014970:	e7e5      	b.n	801493e <_printf_float+0x192>
 8014972:	2b00      	cmp	r3, #0
 8014974:	bfd4      	ite	le
 8014976:	f1c3 0302 	rsble	r3, r3, #2
 801497a:	2301      	movgt	r3, #1
 801497c:	4413      	add	r3, r2
 801497e:	e7de      	b.n	801493e <_printf_float+0x192>
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	055a      	lsls	r2, r3, #21
 8014984:	d407      	bmi.n	8014996 <_printf_float+0x1ea>
 8014986:	6923      	ldr	r3, [r4, #16]
 8014988:	4642      	mov	r2, r8
 801498a:	4631      	mov	r1, r6
 801498c:	4628      	mov	r0, r5
 801498e:	47b8      	blx	r7
 8014990:	3001      	adds	r0, #1
 8014992:	d12b      	bne.n	80149ec <_printf_float+0x240>
 8014994:	e767      	b.n	8014866 <_printf_float+0xba>
 8014996:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801499a:	f240 80dc 	bls.w	8014b56 <_printf_float+0x3aa>
 801499e:	2200      	movs	r2, #0
 80149a0:	2300      	movs	r3, #0
 80149a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80149a6:	f7ec f8a7 	bl	8000af8 <__aeabi_dcmpeq>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d033      	beq.n	8014a16 <_printf_float+0x26a>
 80149ae:	2301      	movs	r3, #1
 80149b0:	4a41      	ldr	r2, [pc, #260]	; (8014ab8 <_printf_float+0x30c>)
 80149b2:	4631      	mov	r1, r6
 80149b4:	4628      	mov	r0, r5
 80149b6:	47b8      	blx	r7
 80149b8:	3001      	adds	r0, #1
 80149ba:	f43f af54 	beq.w	8014866 <_printf_float+0xba>
 80149be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149c2:	429a      	cmp	r2, r3
 80149c4:	db02      	blt.n	80149cc <_printf_float+0x220>
 80149c6:	6823      	ldr	r3, [r4, #0]
 80149c8:	07d8      	lsls	r0, r3, #31
 80149ca:	d50f      	bpl.n	80149ec <_printf_float+0x240>
 80149cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149d0:	4631      	mov	r1, r6
 80149d2:	4628      	mov	r0, r5
 80149d4:	47b8      	blx	r7
 80149d6:	3001      	adds	r0, #1
 80149d8:	f43f af45 	beq.w	8014866 <_printf_float+0xba>
 80149dc:	f04f 0800 	mov.w	r8, #0
 80149e0:	f104 091a 	add.w	r9, r4, #26
 80149e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149e6:	3b01      	subs	r3, #1
 80149e8:	4543      	cmp	r3, r8
 80149ea:	dc09      	bgt.n	8014a00 <_printf_float+0x254>
 80149ec:	6823      	ldr	r3, [r4, #0]
 80149ee:	079b      	lsls	r3, r3, #30
 80149f0:	f100 8103 	bmi.w	8014bfa <_printf_float+0x44e>
 80149f4:	68e0      	ldr	r0, [r4, #12]
 80149f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149f8:	4298      	cmp	r0, r3
 80149fa:	bfb8      	it	lt
 80149fc:	4618      	movlt	r0, r3
 80149fe:	e734      	b.n	801486a <_printf_float+0xbe>
 8014a00:	2301      	movs	r3, #1
 8014a02:	464a      	mov	r2, r9
 8014a04:	4631      	mov	r1, r6
 8014a06:	4628      	mov	r0, r5
 8014a08:	47b8      	blx	r7
 8014a0a:	3001      	adds	r0, #1
 8014a0c:	f43f af2b 	beq.w	8014866 <_printf_float+0xba>
 8014a10:	f108 0801 	add.w	r8, r8, #1
 8014a14:	e7e6      	b.n	80149e4 <_printf_float+0x238>
 8014a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	dc2b      	bgt.n	8014a74 <_printf_float+0x2c8>
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	4a26      	ldr	r2, [pc, #152]	; (8014ab8 <_printf_float+0x30c>)
 8014a20:	4631      	mov	r1, r6
 8014a22:	4628      	mov	r0, r5
 8014a24:	47b8      	blx	r7
 8014a26:	3001      	adds	r0, #1
 8014a28:	f43f af1d 	beq.w	8014866 <_printf_float+0xba>
 8014a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a2e:	b923      	cbnz	r3, 8014a3a <_printf_float+0x28e>
 8014a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a32:	b913      	cbnz	r3, 8014a3a <_printf_float+0x28e>
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	07d9      	lsls	r1, r3, #31
 8014a38:	d5d8      	bpl.n	80149ec <_printf_float+0x240>
 8014a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a3e:	4631      	mov	r1, r6
 8014a40:	4628      	mov	r0, r5
 8014a42:	47b8      	blx	r7
 8014a44:	3001      	adds	r0, #1
 8014a46:	f43f af0e 	beq.w	8014866 <_printf_float+0xba>
 8014a4a:	f04f 0900 	mov.w	r9, #0
 8014a4e:	f104 0a1a 	add.w	sl, r4, #26
 8014a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a54:	425b      	negs	r3, r3
 8014a56:	454b      	cmp	r3, r9
 8014a58:	dc01      	bgt.n	8014a5e <_printf_float+0x2b2>
 8014a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a5c:	e794      	b.n	8014988 <_printf_float+0x1dc>
 8014a5e:	2301      	movs	r3, #1
 8014a60:	4652      	mov	r2, sl
 8014a62:	4631      	mov	r1, r6
 8014a64:	4628      	mov	r0, r5
 8014a66:	47b8      	blx	r7
 8014a68:	3001      	adds	r0, #1
 8014a6a:	f43f aefc 	beq.w	8014866 <_printf_float+0xba>
 8014a6e:	f109 0901 	add.w	r9, r9, #1
 8014a72:	e7ee      	b.n	8014a52 <_printf_float+0x2a6>
 8014a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	bfa8      	it	ge
 8014a7c:	461a      	movge	r2, r3
 8014a7e:	2a00      	cmp	r2, #0
 8014a80:	4691      	mov	r9, r2
 8014a82:	dd07      	ble.n	8014a94 <_printf_float+0x2e8>
 8014a84:	4613      	mov	r3, r2
 8014a86:	4631      	mov	r1, r6
 8014a88:	4642      	mov	r2, r8
 8014a8a:	4628      	mov	r0, r5
 8014a8c:	47b8      	blx	r7
 8014a8e:	3001      	adds	r0, #1
 8014a90:	f43f aee9 	beq.w	8014866 <_printf_float+0xba>
 8014a94:	f104 031a 	add.w	r3, r4, #26
 8014a98:	f04f 0b00 	mov.w	fp, #0
 8014a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014aa0:	9306      	str	r3, [sp, #24]
 8014aa2:	e015      	b.n	8014ad0 <_printf_float+0x324>
 8014aa4:	7fefffff 	.word	0x7fefffff
 8014aa8:	08018f38 	.word	0x08018f38
 8014aac:	08018f34 	.word	0x08018f34
 8014ab0:	08018f40 	.word	0x08018f40
 8014ab4:	08018f3c 	.word	0x08018f3c
 8014ab8:	080190fb 	.word	0x080190fb
 8014abc:	2301      	movs	r3, #1
 8014abe:	9a06      	ldr	r2, [sp, #24]
 8014ac0:	4631      	mov	r1, r6
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	47b8      	blx	r7
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	f43f aecd 	beq.w	8014866 <_printf_float+0xba>
 8014acc:	f10b 0b01 	add.w	fp, fp, #1
 8014ad0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014ad4:	ebaa 0309 	sub.w	r3, sl, r9
 8014ad8:	455b      	cmp	r3, fp
 8014ada:	dcef      	bgt.n	8014abc <_printf_float+0x310>
 8014adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	44d0      	add	r8, sl
 8014ae4:	db15      	blt.n	8014b12 <_printf_float+0x366>
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	07da      	lsls	r2, r3, #31
 8014aea:	d412      	bmi.n	8014b12 <_printf_float+0x366>
 8014aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014af0:	eba3 020a 	sub.w	r2, r3, sl
 8014af4:	eba3 0a01 	sub.w	sl, r3, r1
 8014af8:	4592      	cmp	sl, r2
 8014afa:	bfa8      	it	ge
 8014afc:	4692      	movge	sl, r2
 8014afe:	f1ba 0f00 	cmp.w	sl, #0
 8014b02:	dc0e      	bgt.n	8014b22 <_printf_float+0x376>
 8014b04:	f04f 0800 	mov.w	r8, #0
 8014b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b0c:	f104 091a 	add.w	r9, r4, #26
 8014b10:	e019      	b.n	8014b46 <_printf_float+0x39a>
 8014b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b16:	4631      	mov	r1, r6
 8014b18:	4628      	mov	r0, r5
 8014b1a:	47b8      	blx	r7
 8014b1c:	3001      	adds	r0, #1
 8014b1e:	d1e5      	bne.n	8014aec <_printf_float+0x340>
 8014b20:	e6a1      	b.n	8014866 <_printf_float+0xba>
 8014b22:	4653      	mov	r3, sl
 8014b24:	4642      	mov	r2, r8
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	d1e9      	bne.n	8014b04 <_printf_float+0x358>
 8014b30:	e699      	b.n	8014866 <_printf_float+0xba>
 8014b32:	2301      	movs	r3, #1
 8014b34:	464a      	mov	r2, r9
 8014b36:	4631      	mov	r1, r6
 8014b38:	4628      	mov	r0, r5
 8014b3a:	47b8      	blx	r7
 8014b3c:	3001      	adds	r0, #1
 8014b3e:	f43f ae92 	beq.w	8014866 <_printf_float+0xba>
 8014b42:	f108 0801 	add.w	r8, r8, #1
 8014b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014b4a:	1a9b      	subs	r3, r3, r2
 8014b4c:	eba3 030a 	sub.w	r3, r3, sl
 8014b50:	4543      	cmp	r3, r8
 8014b52:	dcee      	bgt.n	8014b32 <_printf_float+0x386>
 8014b54:	e74a      	b.n	80149ec <_printf_float+0x240>
 8014b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b58:	2a01      	cmp	r2, #1
 8014b5a:	dc01      	bgt.n	8014b60 <_printf_float+0x3b4>
 8014b5c:	07db      	lsls	r3, r3, #31
 8014b5e:	d53a      	bpl.n	8014bd6 <_printf_float+0x42a>
 8014b60:	2301      	movs	r3, #1
 8014b62:	4642      	mov	r2, r8
 8014b64:	4631      	mov	r1, r6
 8014b66:	4628      	mov	r0, r5
 8014b68:	47b8      	blx	r7
 8014b6a:	3001      	adds	r0, #1
 8014b6c:	f43f ae7b 	beq.w	8014866 <_printf_float+0xba>
 8014b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b74:	4631      	mov	r1, r6
 8014b76:	4628      	mov	r0, r5
 8014b78:	47b8      	blx	r7
 8014b7a:	3001      	adds	r0, #1
 8014b7c:	f108 0801 	add.w	r8, r8, #1
 8014b80:	f43f ae71 	beq.w	8014866 <_printf_float+0xba>
 8014b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b86:	2200      	movs	r2, #0
 8014b88:	f103 3aff 	add.w	sl, r3, #4294967295
 8014b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b90:	2300      	movs	r3, #0
 8014b92:	f7eb ffb1 	bl	8000af8 <__aeabi_dcmpeq>
 8014b96:	b9c8      	cbnz	r0, 8014bcc <_printf_float+0x420>
 8014b98:	4653      	mov	r3, sl
 8014b9a:	4642      	mov	r2, r8
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	47b8      	blx	r7
 8014ba2:	3001      	adds	r0, #1
 8014ba4:	d10e      	bne.n	8014bc4 <_printf_float+0x418>
 8014ba6:	e65e      	b.n	8014866 <_printf_float+0xba>
 8014ba8:	2301      	movs	r3, #1
 8014baa:	4652      	mov	r2, sl
 8014bac:	4631      	mov	r1, r6
 8014bae:	4628      	mov	r0, r5
 8014bb0:	47b8      	blx	r7
 8014bb2:	3001      	adds	r0, #1
 8014bb4:	f43f ae57 	beq.w	8014866 <_printf_float+0xba>
 8014bb8:	f108 0801 	add.w	r8, r8, #1
 8014bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bbe:	3b01      	subs	r3, #1
 8014bc0:	4543      	cmp	r3, r8
 8014bc2:	dcf1      	bgt.n	8014ba8 <_printf_float+0x3fc>
 8014bc4:	464b      	mov	r3, r9
 8014bc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014bca:	e6de      	b.n	801498a <_printf_float+0x1de>
 8014bcc:	f04f 0800 	mov.w	r8, #0
 8014bd0:	f104 0a1a 	add.w	sl, r4, #26
 8014bd4:	e7f2      	b.n	8014bbc <_printf_float+0x410>
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e7df      	b.n	8014b9a <_printf_float+0x3ee>
 8014bda:	2301      	movs	r3, #1
 8014bdc:	464a      	mov	r2, r9
 8014bde:	4631      	mov	r1, r6
 8014be0:	4628      	mov	r0, r5
 8014be2:	47b8      	blx	r7
 8014be4:	3001      	adds	r0, #1
 8014be6:	f43f ae3e 	beq.w	8014866 <_printf_float+0xba>
 8014bea:	f108 0801 	add.w	r8, r8, #1
 8014bee:	68e3      	ldr	r3, [r4, #12]
 8014bf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014bf2:	1a9b      	subs	r3, r3, r2
 8014bf4:	4543      	cmp	r3, r8
 8014bf6:	dcf0      	bgt.n	8014bda <_printf_float+0x42e>
 8014bf8:	e6fc      	b.n	80149f4 <_printf_float+0x248>
 8014bfa:	f04f 0800 	mov.w	r8, #0
 8014bfe:	f104 0919 	add.w	r9, r4, #25
 8014c02:	e7f4      	b.n	8014bee <_printf_float+0x442>
 8014c04:	2900      	cmp	r1, #0
 8014c06:	f43f ae8b 	beq.w	8014920 <_printf_float+0x174>
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014c10:	ab09      	add	r3, sp, #36	; 0x24
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	ec49 8b10 	vmov	d0, r8, r9
 8014c18:	6022      	str	r2, [r4, #0]
 8014c1a:	f8cd a004 	str.w	sl, [sp, #4]
 8014c1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c22:	4628      	mov	r0, r5
 8014c24:	f7ff fd2e 	bl	8014684 <__cvt>
 8014c28:	4680      	mov	r8, r0
 8014c2a:	e648      	b.n	80148be <_printf_float+0x112>

08014c2c <_printf_common>:
 8014c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c30:	4691      	mov	r9, r2
 8014c32:	461f      	mov	r7, r3
 8014c34:	688a      	ldr	r2, [r1, #8]
 8014c36:	690b      	ldr	r3, [r1, #16]
 8014c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c3c:	4293      	cmp	r3, r2
 8014c3e:	bfb8      	it	lt
 8014c40:	4613      	movlt	r3, r2
 8014c42:	f8c9 3000 	str.w	r3, [r9]
 8014c46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c4a:	4606      	mov	r6, r0
 8014c4c:	460c      	mov	r4, r1
 8014c4e:	b112      	cbz	r2, 8014c56 <_printf_common+0x2a>
 8014c50:	3301      	adds	r3, #1
 8014c52:	f8c9 3000 	str.w	r3, [r9]
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	0699      	lsls	r1, r3, #26
 8014c5a:	bf42      	ittt	mi
 8014c5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014c60:	3302      	addmi	r3, #2
 8014c62:	f8c9 3000 	strmi.w	r3, [r9]
 8014c66:	6825      	ldr	r5, [r4, #0]
 8014c68:	f015 0506 	ands.w	r5, r5, #6
 8014c6c:	d107      	bne.n	8014c7e <_printf_common+0x52>
 8014c6e:	f104 0a19 	add.w	sl, r4, #25
 8014c72:	68e3      	ldr	r3, [r4, #12]
 8014c74:	f8d9 2000 	ldr.w	r2, [r9]
 8014c78:	1a9b      	subs	r3, r3, r2
 8014c7a:	42ab      	cmp	r3, r5
 8014c7c:	dc28      	bgt.n	8014cd0 <_printf_common+0xa4>
 8014c7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014c82:	6822      	ldr	r2, [r4, #0]
 8014c84:	3300      	adds	r3, #0
 8014c86:	bf18      	it	ne
 8014c88:	2301      	movne	r3, #1
 8014c8a:	0692      	lsls	r2, r2, #26
 8014c8c:	d42d      	bmi.n	8014cea <_printf_common+0xbe>
 8014c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c92:	4639      	mov	r1, r7
 8014c94:	4630      	mov	r0, r6
 8014c96:	47c0      	blx	r8
 8014c98:	3001      	adds	r0, #1
 8014c9a:	d020      	beq.n	8014cde <_printf_common+0xb2>
 8014c9c:	6823      	ldr	r3, [r4, #0]
 8014c9e:	68e5      	ldr	r5, [r4, #12]
 8014ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8014ca4:	f003 0306 	and.w	r3, r3, #6
 8014ca8:	2b04      	cmp	r3, #4
 8014caa:	bf08      	it	eq
 8014cac:	1aad      	subeq	r5, r5, r2
 8014cae:	68a3      	ldr	r3, [r4, #8]
 8014cb0:	6922      	ldr	r2, [r4, #16]
 8014cb2:	bf0c      	ite	eq
 8014cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cb8:	2500      	movne	r5, #0
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	bfc4      	itt	gt
 8014cbe:	1a9b      	subgt	r3, r3, r2
 8014cc0:	18ed      	addgt	r5, r5, r3
 8014cc2:	f04f 0900 	mov.w	r9, #0
 8014cc6:	341a      	adds	r4, #26
 8014cc8:	454d      	cmp	r5, r9
 8014cca:	d11a      	bne.n	8014d02 <_printf_common+0xd6>
 8014ccc:	2000      	movs	r0, #0
 8014cce:	e008      	b.n	8014ce2 <_printf_common+0xb6>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	4652      	mov	r2, sl
 8014cd4:	4639      	mov	r1, r7
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	47c0      	blx	r8
 8014cda:	3001      	adds	r0, #1
 8014cdc:	d103      	bne.n	8014ce6 <_printf_common+0xba>
 8014cde:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce6:	3501      	adds	r5, #1
 8014ce8:	e7c3      	b.n	8014c72 <_printf_common+0x46>
 8014cea:	18e1      	adds	r1, r4, r3
 8014cec:	1c5a      	adds	r2, r3, #1
 8014cee:	2030      	movs	r0, #48	; 0x30
 8014cf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014cf4:	4422      	add	r2, r4
 8014cf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014cfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014cfe:	3302      	adds	r3, #2
 8014d00:	e7c5      	b.n	8014c8e <_printf_common+0x62>
 8014d02:	2301      	movs	r3, #1
 8014d04:	4622      	mov	r2, r4
 8014d06:	4639      	mov	r1, r7
 8014d08:	4630      	mov	r0, r6
 8014d0a:	47c0      	blx	r8
 8014d0c:	3001      	adds	r0, #1
 8014d0e:	d0e6      	beq.n	8014cde <_printf_common+0xb2>
 8014d10:	f109 0901 	add.w	r9, r9, #1
 8014d14:	e7d8      	b.n	8014cc8 <_printf_common+0x9c>
	...

08014d18 <_printf_i>:
 8014d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014d20:	460c      	mov	r4, r1
 8014d22:	7e09      	ldrb	r1, [r1, #24]
 8014d24:	b085      	sub	sp, #20
 8014d26:	296e      	cmp	r1, #110	; 0x6e
 8014d28:	4617      	mov	r7, r2
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	4698      	mov	r8, r3
 8014d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d30:	f000 80b3 	beq.w	8014e9a <_printf_i+0x182>
 8014d34:	d822      	bhi.n	8014d7c <_printf_i+0x64>
 8014d36:	2963      	cmp	r1, #99	; 0x63
 8014d38:	d036      	beq.n	8014da8 <_printf_i+0x90>
 8014d3a:	d80a      	bhi.n	8014d52 <_printf_i+0x3a>
 8014d3c:	2900      	cmp	r1, #0
 8014d3e:	f000 80b9 	beq.w	8014eb4 <_printf_i+0x19c>
 8014d42:	2958      	cmp	r1, #88	; 0x58
 8014d44:	f000 8083 	beq.w	8014e4e <_printf_i+0x136>
 8014d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014d50:	e032      	b.n	8014db8 <_printf_i+0xa0>
 8014d52:	2964      	cmp	r1, #100	; 0x64
 8014d54:	d001      	beq.n	8014d5a <_printf_i+0x42>
 8014d56:	2969      	cmp	r1, #105	; 0x69
 8014d58:	d1f6      	bne.n	8014d48 <_printf_i+0x30>
 8014d5a:	6820      	ldr	r0, [r4, #0]
 8014d5c:	6813      	ldr	r3, [r2, #0]
 8014d5e:	0605      	lsls	r5, r0, #24
 8014d60:	f103 0104 	add.w	r1, r3, #4
 8014d64:	d52a      	bpl.n	8014dbc <_printf_i+0xa4>
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	6011      	str	r1, [r2, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	da03      	bge.n	8014d76 <_printf_i+0x5e>
 8014d6e:	222d      	movs	r2, #45	; 0x2d
 8014d70:	425b      	negs	r3, r3
 8014d72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014d76:	486f      	ldr	r0, [pc, #444]	; (8014f34 <_printf_i+0x21c>)
 8014d78:	220a      	movs	r2, #10
 8014d7a:	e039      	b.n	8014df0 <_printf_i+0xd8>
 8014d7c:	2973      	cmp	r1, #115	; 0x73
 8014d7e:	f000 809d 	beq.w	8014ebc <_printf_i+0x1a4>
 8014d82:	d808      	bhi.n	8014d96 <_printf_i+0x7e>
 8014d84:	296f      	cmp	r1, #111	; 0x6f
 8014d86:	d020      	beq.n	8014dca <_printf_i+0xb2>
 8014d88:	2970      	cmp	r1, #112	; 0x70
 8014d8a:	d1dd      	bne.n	8014d48 <_printf_i+0x30>
 8014d8c:	6823      	ldr	r3, [r4, #0]
 8014d8e:	f043 0320 	orr.w	r3, r3, #32
 8014d92:	6023      	str	r3, [r4, #0]
 8014d94:	e003      	b.n	8014d9e <_printf_i+0x86>
 8014d96:	2975      	cmp	r1, #117	; 0x75
 8014d98:	d017      	beq.n	8014dca <_printf_i+0xb2>
 8014d9a:	2978      	cmp	r1, #120	; 0x78
 8014d9c:	d1d4      	bne.n	8014d48 <_printf_i+0x30>
 8014d9e:	2378      	movs	r3, #120	; 0x78
 8014da0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014da4:	4864      	ldr	r0, [pc, #400]	; (8014f38 <_printf_i+0x220>)
 8014da6:	e055      	b.n	8014e54 <_printf_i+0x13c>
 8014da8:	6813      	ldr	r3, [r2, #0]
 8014daa:	1d19      	adds	r1, r3, #4
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	6011      	str	r1, [r2, #0]
 8014db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014db8:	2301      	movs	r3, #1
 8014dba:	e08c      	b.n	8014ed6 <_printf_i+0x1be>
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	6011      	str	r1, [r2, #0]
 8014dc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014dc4:	bf18      	it	ne
 8014dc6:	b21b      	sxthne	r3, r3
 8014dc8:	e7cf      	b.n	8014d6a <_printf_i+0x52>
 8014dca:	6813      	ldr	r3, [r2, #0]
 8014dcc:	6825      	ldr	r5, [r4, #0]
 8014dce:	1d18      	adds	r0, r3, #4
 8014dd0:	6010      	str	r0, [r2, #0]
 8014dd2:	0628      	lsls	r0, r5, #24
 8014dd4:	d501      	bpl.n	8014dda <_printf_i+0xc2>
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	e002      	b.n	8014de0 <_printf_i+0xc8>
 8014dda:	0668      	lsls	r0, r5, #25
 8014ddc:	d5fb      	bpl.n	8014dd6 <_printf_i+0xbe>
 8014dde:	881b      	ldrh	r3, [r3, #0]
 8014de0:	4854      	ldr	r0, [pc, #336]	; (8014f34 <_printf_i+0x21c>)
 8014de2:	296f      	cmp	r1, #111	; 0x6f
 8014de4:	bf14      	ite	ne
 8014de6:	220a      	movne	r2, #10
 8014de8:	2208      	moveq	r2, #8
 8014dea:	2100      	movs	r1, #0
 8014dec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014df0:	6865      	ldr	r5, [r4, #4]
 8014df2:	60a5      	str	r5, [r4, #8]
 8014df4:	2d00      	cmp	r5, #0
 8014df6:	f2c0 8095 	blt.w	8014f24 <_printf_i+0x20c>
 8014dfa:	6821      	ldr	r1, [r4, #0]
 8014dfc:	f021 0104 	bic.w	r1, r1, #4
 8014e00:	6021      	str	r1, [r4, #0]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d13d      	bne.n	8014e82 <_printf_i+0x16a>
 8014e06:	2d00      	cmp	r5, #0
 8014e08:	f040 808e 	bne.w	8014f28 <_printf_i+0x210>
 8014e0c:	4665      	mov	r5, ip
 8014e0e:	2a08      	cmp	r2, #8
 8014e10:	d10b      	bne.n	8014e2a <_printf_i+0x112>
 8014e12:	6823      	ldr	r3, [r4, #0]
 8014e14:	07db      	lsls	r3, r3, #31
 8014e16:	d508      	bpl.n	8014e2a <_printf_i+0x112>
 8014e18:	6923      	ldr	r3, [r4, #16]
 8014e1a:	6862      	ldr	r2, [r4, #4]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	bfde      	ittt	le
 8014e20:	2330      	movle	r3, #48	; 0x30
 8014e22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014e2a:	ebac 0305 	sub.w	r3, ip, r5
 8014e2e:	6123      	str	r3, [r4, #16]
 8014e30:	f8cd 8000 	str.w	r8, [sp]
 8014e34:	463b      	mov	r3, r7
 8014e36:	aa03      	add	r2, sp, #12
 8014e38:	4621      	mov	r1, r4
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	f7ff fef6 	bl	8014c2c <_printf_common>
 8014e40:	3001      	adds	r0, #1
 8014e42:	d14d      	bne.n	8014ee0 <_printf_i+0x1c8>
 8014e44:	f04f 30ff 	mov.w	r0, #4294967295
 8014e48:	b005      	add	sp, #20
 8014e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4e:	4839      	ldr	r0, [pc, #228]	; (8014f34 <_printf_i+0x21c>)
 8014e50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014e54:	6813      	ldr	r3, [r2, #0]
 8014e56:	6821      	ldr	r1, [r4, #0]
 8014e58:	1d1d      	adds	r5, r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	6015      	str	r5, [r2, #0]
 8014e5e:	060a      	lsls	r2, r1, #24
 8014e60:	d50b      	bpl.n	8014e7a <_printf_i+0x162>
 8014e62:	07ca      	lsls	r2, r1, #31
 8014e64:	bf44      	itt	mi
 8014e66:	f041 0120 	orrmi.w	r1, r1, #32
 8014e6a:	6021      	strmi	r1, [r4, #0]
 8014e6c:	b91b      	cbnz	r3, 8014e76 <_printf_i+0x15e>
 8014e6e:	6822      	ldr	r2, [r4, #0]
 8014e70:	f022 0220 	bic.w	r2, r2, #32
 8014e74:	6022      	str	r2, [r4, #0]
 8014e76:	2210      	movs	r2, #16
 8014e78:	e7b7      	b.n	8014dea <_printf_i+0xd2>
 8014e7a:	064d      	lsls	r5, r1, #25
 8014e7c:	bf48      	it	mi
 8014e7e:	b29b      	uxthmi	r3, r3
 8014e80:	e7ef      	b.n	8014e62 <_printf_i+0x14a>
 8014e82:	4665      	mov	r5, ip
 8014e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e88:	fb02 3311 	mls	r3, r2, r1, r3
 8014e8c:	5cc3      	ldrb	r3, [r0, r3]
 8014e8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014e92:	460b      	mov	r3, r1
 8014e94:	2900      	cmp	r1, #0
 8014e96:	d1f5      	bne.n	8014e84 <_printf_i+0x16c>
 8014e98:	e7b9      	b.n	8014e0e <_printf_i+0xf6>
 8014e9a:	6813      	ldr	r3, [r2, #0]
 8014e9c:	6825      	ldr	r5, [r4, #0]
 8014e9e:	6961      	ldr	r1, [r4, #20]
 8014ea0:	1d18      	adds	r0, r3, #4
 8014ea2:	6010      	str	r0, [r2, #0]
 8014ea4:	0628      	lsls	r0, r5, #24
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	d501      	bpl.n	8014eae <_printf_i+0x196>
 8014eaa:	6019      	str	r1, [r3, #0]
 8014eac:	e002      	b.n	8014eb4 <_printf_i+0x19c>
 8014eae:	066a      	lsls	r2, r5, #25
 8014eb0:	d5fb      	bpl.n	8014eaa <_printf_i+0x192>
 8014eb2:	8019      	strh	r1, [r3, #0]
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	6123      	str	r3, [r4, #16]
 8014eb8:	4665      	mov	r5, ip
 8014eba:	e7b9      	b.n	8014e30 <_printf_i+0x118>
 8014ebc:	6813      	ldr	r3, [r2, #0]
 8014ebe:	1d19      	adds	r1, r3, #4
 8014ec0:	6011      	str	r1, [r2, #0]
 8014ec2:	681d      	ldr	r5, [r3, #0]
 8014ec4:	6862      	ldr	r2, [r4, #4]
 8014ec6:	2100      	movs	r1, #0
 8014ec8:	4628      	mov	r0, r5
 8014eca:	f7eb f9a1 	bl	8000210 <memchr>
 8014ece:	b108      	cbz	r0, 8014ed4 <_printf_i+0x1bc>
 8014ed0:	1b40      	subs	r0, r0, r5
 8014ed2:	6060      	str	r0, [r4, #4]
 8014ed4:	6863      	ldr	r3, [r4, #4]
 8014ed6:	6123      	str	r3, [r4, #16]
 8014ed8:	2300      	movs	r3, #0
 8014eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ede:	e7a7      	b.n	8014e30 <_printf_i+0x118>
 8014ee0:	6923      	ldr	r3, [r4, #16]
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4639      	mov	r1, r7
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	47c0      	blx	r8
 8014eea:	3001      	adds	r0, #1
 8014eec:	d0aa      	beq.n	8014e44 <_printf_i+0x12c>
 8014eee:	6823      	ldr	r3, [r4, #0]
 8014ef0:	079b      	lsls	r3, r3, #30
 8014ef2:	d413      	bmi.n	8014f1c <_printf_i+0x204>
 8014ef4:	68e0      	ldr	r0, [r4, #12]
 8014ef6:	9b03      	ldr	r3, [sp, #12]
 8014ef8:	4298      	cmp	r0, r3
 8014efa:	bfb8      	it	lt
 8014efc:	4618      	movlt	r0, r3
 8014efe:	e7a3      	b.n	8014e48 <_printf_i+0x130>
 8014f00:	2301      	movs	r3, #1
 8014f02:	464a      	mov	r2, r9
 8014f04:	4639      	mov	r1, r7
 8014f06:	4630      	mov	r0, r6
 8014f08:	47c0      	blx	r8
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	d09a      	beq.n	8014e44 <_printf_i+0x12c>
 8014f0e:	3501      	adds	r5, #1
 8014f10:	68e3      	ldr	r3, [r4, #12]
 8014f12:	9a03      	ldr	r2, [sp, #12]
 8014f14:	1a9b      	subs	r3, r3, r2
 8014f16:	42ab      	cmp	r3, r5
 8014f18:	dcf2      	bgt.n	8014f00 <_printf_i+0x1e8>
 8014f1a:	e7eb      	b.n	8014ef4 <_printf_i+0x1dc>
 8014f1c:	2500      	movs	r5, #0
 8014f1e:	f104 0919 	add.w	r9, r4, #25
 8014f22:	e7f5      	b.n	8014f10 <_printf_i+0x1f8>
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1ac      	bne.n	8014e82 <_printf_i+0x16a>
 8014f28:	7803      	ldrb	r3, [r0, #0]
 8014f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f32:	e76c      	b.n	8014e0e <_printf_i+0xf6>
 8014f34:	08018f44 	.word	0x08018f44
 8014f38:	08018f55 	.word	0x08018f55

08014f3c <_scanf_float>:
 8014f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f40:	469a      	mov	sl, r3
 8014f42:	688b      	ldr	r3, [r1, #8]
 8014f44:	4616      	mov	r6, r2
 8014f46:	1e5a      	subs	r2, r3, #1
 8014f48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014f4c:	b087      	sub	sp, #28
 8014f4e:	bf83      	ittte	hi
 8014f50:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014f54:	189b      	addhi	r3, r3, r2
 8014f56:	9301      	strhi	r3, [sp, #4]
 8014f58:	2300      	movls	r3, #0
 8014f5a:	bf86      	itte	hi
 8014f5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014f60:	608b      	strhi	r3, [r1, #8]
 8014f62:	9301      	strls	r3, [sp, #4]
 8014f64:	680b      	ldr	r3, [r1, #0]
 8014f66:	4688      	mov	r8, r1
 8014f68:	f04f 0b00 	mov.w	fp, #0
 8014f6c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014f70:	f848 3b1c 	str.w	r3, [r8], #28
 8014f74:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014f78:	4607      	mov	r7, r0
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	4645      	mov	r5, r8
 8014f7e:	465a      	mov	r2, fp
 8014f80:	46d9      	mov	r9, fp
 8014f82:	f8cd b008 	str.w	fp, [sp, #8]
 8014f86:	68a1      	ldr	r1, [r4, #8]
 8014f88:	b181      	cbz	r1, 8014fac <_scanf_float+0x70>
 8014f8a:	6833      	ldr	r3, [r6, #0]
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	2b49      	cmp	r3, #73	; 0x49
 8014f90:	d071      	beq.n	8015076 <_scanf_float+0x13a>
 8014f92:	d84d      	bhi.n	8015030 <_scanf_float+0xf4>
 8014f94:	2b39      	cmp	r3, #57	; 0x39
 8014f96:	d840      	bhi.n	801501a <_scanf_float+0xde>
 8014f98:	2b31      	cmp	r3, #49	; 0x31
 8014f9a:	f080 8088 	bcs.w	80150ae <_scanf_float+0x172>
 8014f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8014fa0:	f000 8090 	beq.w	80150c4 <_scanf_float+0x188>
 8014fa4:	d815      	bhi.n	8014fd2 <_scanf_float+0x96>
 8014fa6:	2b2b      	cmp	r3, #43	; 0x2b
 8014fa8:	f000 808c 	beq.w	80150c4 <_scanf_float+0x188>
 8014fac:	f1b9 0f00 	cmp.w	r9, #0
 8014fb0:	d003      	beq.n	8014fba <_scanf_float+0x7e>
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014fb8:	6023      	str	r3, [r4, #0]
 8014fba:	3a01      	subs	r2, #1
 8014fbc:	2a01      	cmp	r2, #1
 8014fbe:	f200 80ea 	bhi.w	8015196 <_scanf_float+0x25a>
 8014fc2:	4545      	cmp	r5, r8
 8014fc4:	f200 80dc 	bhi.w	8015180 <_scanf_float+0x244>
 8014fc8:	2601      	movs	r6, #1
 8014fca:	4630      	mov	r0, r6
 8014fcc:	b007      	add	sp, #28
 8014fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8014fd4:	f000 809f 	beq.w	8015116 <_scanf_float+0x1da>
 8014fd8:	2b30      	cmp	r3, #48	; 0x30
 8014fda:	d1e7      	bne.n	8014fac <_scanf_float+0x70>
 8014fdc:	6820      	ldr	r0, [r4, #0]
 8014fde:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014fe2:	d064      	beq.n	80150ae <_scanf_float+0x172>
 8014fe4:	9b01      	ldr	r3, [sp, #4]
 8014fe6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014fea:	6020      	str	r0, [r4, #0]
 8014fec:	f109 0901 	add.w	r9, r9, #1
 8014ff0:	b11b      	cbz	r3, 8014ffa <_scanf_float+0xbe>
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	3101      	adds	r1, #1
 8014ff6:	9301      	str	r3, [sp, #4]
 8014ff8:	60a1      	str	r1, [r4, #8]
 8014ffa:	68a3      	ldr	r3, [r4, #8]
 8014ffc:	3b01      	subs	r3, #1
 8014ffe:	60a3      	str	r3, [r4, #8]
 8015000:	6923      	ldr	r3, [r4, #16]
 8015002:	3301      	adds	r3, #1
 8015004:	6123      	str	r3, [r4, #16]
 8015006:	6873      	ldr	r3, [r6, #4]
 8015008:	3b01      	subs	r3, #1
 801500a:	2b00      	cmp	r3, #0
 801500c:	6073      	str	r3, [r6, #4]
 801500e:	f340 80ac 	ble.w	801516a <_scanf_float+0x22e>
 8015012:	6833      	ldr	r3, [r6, #0]
 8015014:	3301      	adds	r3, #1
 8015016:	6033      	str	r3, [r6, #0]
 8015018:	e7b5      	b.n	8014f86 <_scanf_float+0x4a>
 801501a:	2b45      	cmp	r3, #69	; 0x45
 801501c:	f000 8085 	beq.w	801512a <_scanf_float+0x1ee>
 8015020:	2b46      	cmp	r3, #70	; 0x46
 8015022:	d06a      	beq.n	80150fa <_scanf_float+0x1be>
 8015024:	2b41      	cmp	r3, #65	; 0x41
 8015026:	d1c1      	bne.n	8014fac <_scanf_float+0x70>
 8015028:	2a01      	cmp	r2, #1
 801502a:	d1bf      	bne.n	8014fac <_scanf_float+0x70>
 801502c:	2202      	movs	r2, #2
 801502e:	e046      	b.n	80150be <_scanf_float+0x182>
 8015030:	2b65      	cmp	r3, #101	; 0x65
 8015032:	d07a      	beq.n	801512a <_scanf_float+0x1ee>
 8015034:	d818      	bhi.n	8015068 <_scanf_float+0x12c>
 8015036:	2b54      	cmp	r3, #84	; 0x54
 8015038:	d066      	beq.n	8015108 <_scanf_float+0x1cc>
 801503a:	d811      	bhi.n	8015060 <_scanf_float+0x124>
 801503c:	2b4e      	cmp	r3, #78	; 0x4e
 801503e:	d1b5      	bne.n	8014fac <_scanf_float+0x70>
 8015040:	2a00      	cmp	r2, #0
 8015042:	d146      	bne.n	80150d2 <_scanf_float+0x196>
 8015044:	f1b9 0f00 	cmp.w	r9, #0
 8015048:	d145      	bne.n	80150d6 <_scanf_float+0x19a>
 801504a:	6821      	ldr	r1, [r4, #0]
 801504c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015050:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015054:	d13f      	bne.n	80150d6 <_scanf_float+0x19a>
 8015056:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801505a:	6021      	str	r1, [r4, #0]
 801505c:	2201      	movs	r2, #1
 801505e:	e02e      	b.n	80150be <_scanf_float+0x182>
 8015060:	2b59      	cmp	r3, #89	; 0x59
 8015062:	d01e      	beq.n	80150a2 <_scanf_float+0x166>
 8015064:	2b61      	cmp	r3, #97	; 0x61
 8015066:	e7de      	b.n	8015026 <_scanf_float+0xea>
 8015068:	2b6e      	cmp	r3, #110	; 0x6e
 801506a:	d0e9      	beq.n	8015040 <_scanf_float+0x104>
 801506c:	d815      	bhi.n	801509a <_scanf_float+0x15e>
 801506e:	2b66      	cmp	r3, #102	; 0x66
 8015070:	d043      	beq.n	80150fa <_scanf_float+0x1be>
 8015072:	2b69      	cmp	r3, #105	; 0x69
 8015074:	d19a      	bne.n	8014fac <_scanf_float+0x70>
 8015076:	f1bb 0f00 	cmp.w	fp, #0
 801507a:	d138      	bne.n	80150ee <_scanf_float+0x1b2>
 801507c:	f1b9 0f00 	cmp.w	r9, #0
 8015080:	d197      	bne.n	8014fb2 <_scanf_float+0x76>
 8015082:	6821      	ldr	r1, [r4, #0]
 8015084:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015088:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801508c:	d195      	bne.n	8014fba <_scanf_float+0x7e>
 801508e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015092:	6021      	str	r1, [r4, #0]
 8015094:	f04f 0b01 	mov.w	fp, #1
 8015098:	e011      	b.n	80150be <_scanf_float+0x182>
 801509a:	2b74      	cmp	r3, #116	; 0x74
 801509c:	d034      	beq.n	8015108 <_scanf_float+0x1cc>
 801509e:	2b79      	cmp	r3, #121	; 0x79
 80150a0:	d184      	bne.n	8014fac <_scanf_float+0x70>
 80150a2:	f1bb 0f07 	cmp.w	fp, #7
 80150a6:	d181      	bne.n	8014fac <_scanf_float+0x70>
 80150a8:	f04f 0b08 	mov.w	fp, #8
 80150ac:	e007      	b.n	80150be <_scanf_float+0x182>
 80150ae:	eb12 0f0b 	cmn.w	r2, fp
 80150b2:	f47f af7b 	bne.w	8014fac <_scanf_float+0x70>
 80150b6:	6821      	ldr	r1, [r4, #0]
 80150b8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80150bc:	6021      	str	r1, [r4, #0]
 80150be:	702b      	strb	r3, [r5, #0]
 80150c0:	3501      	adds	r5, #1
 80150c2:	e79a      	b.n	8014ffa <_scanf_float+0xbe>
 80150c4:	6821      	ldr	r1, [r4, #0]
 80150c6:	0608      	lsls	r0, r1, #24
 80150c8:	f57f af70 	bpl.w	8014fac <_scanf_float+0x70>
 80150cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80150d0:	e7f4      	b.n	80150bc <_scanf_float+0x180>
 80150d2:	2a02      	cmp	r2, #2
 80150d4:	d047      	beq.n	8015166 <_scanf_float+0x22a>
 80150d6:	f1bb 0f01 	cmp.w	fp, #1
 80150da:	d003      	beq.n	80150e4 <_scanf_float+0x1a8>
 80150dc:	f1bb 0f04 	cmp.w	fp, #4
 80150e0:	f47f af64 	bne.w	8014fac <_scanf_float+0x70>
 80150e4:	f10b 0b01 	add.w	fp, fp, #1
 80150e8:	fa5f fb8b 	uxtb.w	fp, fp
 80150ec:	e7e7      	b.n	80150be <_scanf_float+0x182>
 80150ee:	f1bb 0f03 	cmp.w	fp, #3
 80150f2:	d0f7      	beq.n	80150e4 <_scanf_float+0x1a8>
 80150f4:	f1bb 0f05 	cmp.w	fp, #5
 80150f8:	e7f2      	b.n	80150e0 <_scanf_float+0x1a4>
 80150fa:	f1bb 0f02 	cmp.w	fp, #2
 80150fe:	f47f af55 	bne.w	8014fac <_scanf_float+0x70>
 8015102:	f04f 0b03 	mov.w	fp, #3
 8015106:	e7da      	b.n	80150be <_scanf_float+0x182>
 8015108:	f1bb 0f06 	cmp.w	fp, #6
 801510c:	f47f af4e 	bne.w	8014fac <_scanf_float+0x70>
 8015110:	f04f 0b07 	mov.w	fp, #7
 8015114:	e7d3      	b.n	80150be <_scanf_float+0x182>
 8015116:	6821      	ldr	r1, [r4, #0]
 8015118:	0588      	lsls	r0, r1, #22
 801511a:	f57f af47 	bpl.w	8014fac <_scanf_float+0x70>
 801511e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015122:	6021      	str	r1, [r4, #0]
 8015124:	f8cd 9008 	str.w	r9, [sp, #8]
 8015128:	e7c9      	b.n	80150be <_scanf_float+0x182>
 801512a:	6821      	ldr	r1, [r4, #0]
 801512c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015130:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015134:	d006      	beq.n	8015144 <_scanf_float+0x208>
 8015136:	0548      	lsls	r0, r1, #21
 8015138:	f57f af38 	bpl.w	8014fac <_scanf_float+0x70>
 801513c:	f1b9 0f00 	cmp.w	r9, #0
 8015140:	f43f af3b 	beq.w	8014fba <_scanf_float+0x7e>
 8015144:	0588      	lsls	r0, r1, #22
 8015146:	bf58      	it	pl
 8015148:	9802      	ldrpl	r0, [sp, #8]
 801514a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801514e:	bf58      	it	pl
 8015150:	eba9 0000 	subpl.w	r0, r9, r0
 8015154:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015158:	bf58      	it	pl
 801515a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801515e:	6021      	str	r1, [r4, #0]
 8015160:	f04f 0900 	mov.w	r9, #0
 8015164:	e7ab      	b.n	80150be <_scanf_float+0x182>
 8015166:	2203      	movs	r2, #3
 8015168:	e7a9      	b.n	80150be <_scanf_float+0x182>
 801516a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801516e:	9205      	str	r2, [sp, #20]
 8015170:	4631      	mov	r1, r6
 8015172:	4638      	mov	r0, r7
 8015174:	4798      	blx	r3
 8015176:	9a05      	ldr	r2, [sp, #20]
 8015178:	2800      	cmp	r0, #0
 801517a:	f43f af04 	beq.w	8014f86 <_scanf_float+0x4a>
 801517e:	e715      	b.n	8014fac <_scanf_float+0x70>
 8015180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015184:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015188:	4632      	mov	r2, r6
 801518a:	4638      	mov	r0, r7
 801518c:	4798      	blx	r3
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	3b01      	subs	r3, #1
 8015192:	6123      	str	r3, [r4, #16]
 8015194:	e715      	b.n	8014fc2 <_scanf_float+0x86>
 8015196:	f10b 33ff 	add.w	r3, fp, #4294967295
 801519a:	2b06      	cmp	r3, #6
 801519c:	d80a      	bhi.n	80151b4 <_scanf_float+0x278>
 801519e:	f1bb 0f02 	cmp.w	fp, #2
 80151a2:	d968      	bls.n	8015276 <_scanf_float+0x33a>
 80151a4:	f1ab 0b03 	sub.w	fp, fp, #3
 80151a8:	fa5f fb8b 	uxtb.w	fp, fp
 80151ac:	eba5 0b0b 	sub.w	fp, r5, fp
 80151b0:	455d      	cmp	r5, fp
 80151b2:	d14b      	bne.n	801524c <_scanf_float+0x310>
 80151b4:	6823      	ldr	r3, [r4, #0]
 80151b6:	05da      	lsls	r2, r3, #23
 80151b8:	d51f      	bpl.n	80151fa <_scanf_float+0x2be>
 80151ba:	055b      	lsls	r3, r3, #21
 80151bc:	d468      	bmi.n	8015290 <_scanf_float+0x354>
 80151be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80151c2:	6923      	ldr	r3, [r4, #16]
 80151c4:	2965      	cmp	r1, #101	; 0x65
 80151c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80151ca:	f105 3bff 	add.w	fp, r5, #4294967295
 80151ce:	6123      	str	r3, [r4, #16]
 80151d0:	d00d      	beq.n	80151ee <_scanf_float+0x2b2>
 80151d2:	2945      	cmp	r1, #69	; 0x45
 80151d4:	d00b      	beq.n	80151ee <_scanf_float+0x2b2>
 80151d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151da:	4632      	mov	r2, r6
 80151dc:	4638      	mov	r0, r7
 80151de:	4798      	blx	r3
 80151e0:	6923      	ldr	r3, [r4, #16]
 80151e2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80151e6:	3b01      	subs	r3, #1
 80151e8:	f1a5 0b02 	sub.w	fp, r5, #2
 80151ec:	6123      	str	r3, [r4, #16]
 80151ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151f2:	4632      	mov	r2, r6
 80151f4:	4638      	mov	r0, r7
 80151f6:	4798      	blx	r3
 80151f8:	465d      	mov	r5, fp
 80151fa:	6826      	ldr	r6, [r4, #0]
 80151fc:	f016 0610 	ands.w	r6, r6, #16
 8015200:	d17a      	bne.n	80152f8 <_scanf_float+0x3bc>
 8015202:	702e      	strb	r6, [r5, #0]
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801520a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801520e:	d142      	bne.n	8015296 <_scanf_float+0x35a>
 8015210:	9b02      	ldr	r3, [sp, #8]
 8015212:	eba9 0303 	sub.w	r3, r9, r3
 8015216:	425a      	negs	r2, r3
 8015218:	2b00      	cmp	r3, #0
 801521a:	d149      	bne.n	80152b0 <_scanf_float+0x374>
 801521c:	2200      	movs	r2, #0
 801521e:	4641      	mov	r1, r8
 8015220:	4638      	mov	r0, r7
 8015222:	f000 ff0d 	bl	8016040 <_strtod_r>
 8015226:	6825      	ldr	r5, [r4, #0]
 8015228:	f8da 3000 	ldr.w	r3, [sl]
 801522c:	f015 0f02 	tst.w	r5, #2
 8015230:	f103 0204 	add.w	r2, r3, #4
 8015234:	ec59 8b10 	vmov	r8, r9, d0
 8015238:	f8ca 2000 	str.w	r2, [sl]
 801523c:	d043      	beq.n	80152c6 <_scanf_float+0x38a>
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	e9c3 8900 	strd	r8, r9, [r3]
 8015244:	68e3      	ldr	r3, [r4, #12]
 8015246:	3301      	adds	r3, #1
 8015248:	60e3      	str	r3, [r4, #12]
 801524a:	e6be      	b.n	8014fca <_scanf_float+0x8e>
 801524c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015250:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015254:	4632      	mov	r2, r6
 8015256:	4638      	mov	r0, r7
 8015258:	4798      	blx	r3
 801525a:	6923      	ldr	r3, [r4, #16]
 801525c:	3b01      	subs	r3, #1
 801525e:	6123      	str	r3, [r4, #16]
 8015260:	e7a6      	b.n	80151b0 <_scanf_float+0x274>
 8015262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015266:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801526a:	4632      	mov	r2, r6
 801526c:	4638      	mov	r0, r7
 801526e:	4798      	blx	r3
 8015270:	6923      	ldr	r3, [r4, #16]
 8015272:	3b01      	subs	r3, #1
 8015274:	6123      	str	r3, [r4, #16]
 8015276:	4545      	cmp	r5, r8
 8015278:	d8f3      	bhi.n	8015262 <_scanf_float+0x326>
 801527a:	e6a5      	b.n	8014fc8 <_scanf_float+0x8c>
 801527c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015284:	4632      	mov	r2, r6
 8015286:	4638      	mov	r0, r7
 8015288:	4798      	blx	r3
 801528a:	6923      	ldr	r3, [r4, #16]
 801528c:	3b01      	subs	r3, #1
 801528e:	6123      	str	r3, [r4, #16]
 8015290:	4545      	cmp	r5, r8
 8015292:	d8f3      	bhi.n	801527c <_scanf_float+0x340>
 8015294:	e698      	b.n	8014fc8 <_scanf_float+0x8c>
 8015296:	9b03      	ldr	r3, [sp, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d0bf      	beq.n	801521c <_scanf_float+0x2e0>
 801529c:	9904      	ldr	r1, [sp, #16]
 801529e:	230a      	movs	r3, #10
 80152a0:	4632      	mov	r2, r6
 80152a2:	3101      	adds	r1, #1
 80152a4:	4638      	mov	r0, r7
 80152a6:	f000 ff57 	bl	8016158 <_strtol_r>
 80152aa:	9b03      	ldr	r3, [sp, #12]
 80152ac:	9d04      	ldr	r5, [sp, #16]
 80152ae:	1ac2      	subs	r2, r0, r3
 80152b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80152b4:	429d      	cmp	r5, r3
 80152b6:	bf28      	it	cs
 80152b8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80152bc:	490f      	ldr	r1, [pc, #60]	; (80152fc <_scanf_float+0x3c0>)
 80152be:	4628      	mov	r0, r5
 80152c0:	f000 f858 	bl	8015374 <siprintf>
 80152c4:	e7aa      	b.n	801521c <_scanf_float+0x2e0>
 80152c6:	f015 0504 	ands.w	r5, r5, #4
 80152ca:	d1b8      	bne.n	801523e <_scanf_float+0x302>
 80152cc:	681f      	ldr	r7, [r3, #0]
 80152ce:	ee10 2a10 	vmov	r2, s0
 80152d2:	464b      	mov	r3, r9
 80152d4:	ee10 0a10 	vmov	r0, s0
 80152d8:	4649      	mov	r1, r9
 80152da:	f7eb fc3f 	bl	8000b5c <__aeabi_dcmpun>
 80152de:	b128      	cbz	r0, 80152ec <_scanf_float+0x3b0>
 80152e0:	4628      	mov	r0, r5
 80152e2:	f000 f80d 	bl	8015300 <nanf>
 80152e6:	ed87 0a00 	vstr	s0, [r7]
 80152ea:	e7ab      	b.n	8015244 <_scanf_float+0x308>
 80152ec:	4640      	mov	r0, r8
 80152ee:	4649      	mov	r1, r9
 80152f0:	f7eb fc92 	bl	8000c18 <__aeabi_d2f>
 80152f4:	6038      	str	r0, [r7, #0]
 80152f6:	e7a5      	b.n	8015244 <_scanf_float+0x308>
 80152f8:	2600      	movs	r6, #0
 80152fa:	e666      	b.n	8014fca <_scanf_float+0x8e>
 80152fc:	08018f66 	.word	0x08018f66

08015300 <nanf>:
 8015300:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015308 <nanf+0x8>
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop
 8015308:	7fc00000 	.word	0x7fc00000

0801530c <sniprintf>:
 801530c:	b40c      	push	{r2, r3}
 801530e:	b530      	push	{r4, r5, lr}
 8015310:	4b17      	ldr	r3, [pc, #92]	; (8015370 <sniprintf+0x64>)
 8015312:	1e0c      	subs	r4, r1, #0
 8015314:	b09d      	sub	sp, #116	; 0x74
 8015316:	681d      	ldr	r5, [r3, #0]
 8015318:	da08      	bge.n	801532c <sniprintf+0x20>
 801531a:	238b      	movs	r3, #139	; 0x8b
 801531c:	602b      	str	r3, [r5, #0]
 801531e:	f04f 30ff 	mov.w	r0, #4294967295
 8015322:	b01d      	add	sp, #116	; 0x74
 8015324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015328:	b002      	add	sp, #8
 801532a:	4770      	bx	lr
 801532c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015334:	bf14      	ite	ne
 8015336:	f104 33ff 	addne.w	r3, r4, #4294967295
 801533a:	4623      	moveq	r3, r4
 801533c:	9304      	str	r3, [sp, #16]
 801533e:	9307      	str	r3, [sp, #28]
 8015340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015344:	9002      	str	r0, [sp, #8]
 8015346:	9006      	str	r0, [sp, #24]
 8015348:	f8ad 3016 	strh.w	r3, [sp, #22]
 801534c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801534e:	ab21      	add	r3, sp, #132	; 0x84
 8015350:	a902      	add	r1, sp, #8
 8015352:	4628      	mov	r0, r5
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	f002 fdf3 	bl	8017f40 <_svfiprintf_r>
 801535a:	1c43      	adds	r3, r0, #1
 801535c:	bfbc      	itt	lt
 801535e:	238b      	movlt	r3, #139	; 0x8b
 8015360:	602b      	strlt	r3, [r5, #0]
 8015362:	2c00      	cmp	r4, #0
 8015364:	d0dd      	beq.n	8015322 <sniprintf+0x16>
 8015366:	9b02      	ldr	r3, [sp, #8]
 8015368:	2200      	movs	r2, #0
 801536a:	701a      	strb	r2, [r3, #0]
 801536c:	e7d9      	b.n	8015322 <sniprintf+0x16>
 801536e:	bf00      	nop
 8015370:	2000000c 	.word	0x2000000c

08015374 <siprintf>:
 8015374:	b40e      	push	{r1, r2, r3}
 8015376:	b500      	push	{lr}
 8015378:	b09c      	sub	sp, #112	; 0x70
 801537a:	ab1d      	add	r3, sp, #116	; 0x74
 801537c:	9002      	str	r0, [sp, #8]
 801537e:	9006      	str	r0, [sp, #24]
 8015380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015384:	4809      	ldr	r0, [pc, #36]	; (80153ac <siprintf+0x38>)
 8015386:	9107      	str	r1, [sp, #28]
 8015388:	9104      	str	r1, [sp, #16]
 801538a:	4909      	ldr	r1, [pc, #36]	; (80153b0 <siprintf+0x3c>)
 801538c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015390:	9105      	str	r1, [sp, #20]
 8015392:	6800      	ldr	r0, [r0, #0]
 8015394:	9301      	str	r3, [sp, #4]
 8015396:	a902      	add	r1, sp, #8
 8015398:	f002 fdd2 	bl	8017f40 <_svfiprintf_r>
 801539c:	9b02      	ldr	r3, [sp, #8]
 801539e:	2200      	movs	r2, #0
 80153a0:	701a      	strb	r2, [r3, #0]
 80153a2:	b01c      	add	sp, #112	; 0x70
 80153a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80153a8:	b003      	add	sp, #12
 80153aa:	4770      	bx	lr
 80153ac:	2000000c 	.word	0x2000000c
 80153b0:	ffff0208 	.word	0xffff0208

080153b4 <siscanf>:
 80153b4:	b40e      	push	{r1, r2, r3}
 80153b6:	b530      	push	{r4, r5, lr}
 80153b8:	b09c      	sub	sp, #112	; 0x70
 80153ba:	ac1f      	add	r4, sp, #124	; 0x7c
 80153bc:	f44f 7201 	mov.w	r2, #516	; 0x204
 80153c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80153c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80153c8:	9002      	str	r0, [sp, #8]
 80153ca:	9006      	str	r0, [sp, #24]
 80153cc:	f7ea ff18 	bl	8000200 <strlen>
 80153d0:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <siscanf+0x4c>)
 80153d2:	9003      	str	r0, [sp, #12]
 80153d4:	9007      	str	r0, [sp, #28]
 80153d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80153d8:	480a      	ldr	r0, [pc, #40]	; (8015404 <siscanf+0x50>)
 80153da:	9401      	str	r4, [sp, #4]
 80153dc:	2300      	movs	r3, #0
 80153de:	930f      	str	r3, [sp, #60]	; 0x3c
 80153e0:	9314      	str	r3, [sp, #80]	; 0x50
 80153e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153ea:	462a      	mov	r2, r5
 80153ec:	4623      	mov	r3, r4
 80153ee:	a902      	add	r1, sp, #8
 80153f0:	6800      	ldr	r0, [r0, #0]
 80153f2:	f002 fef7 	bl	80181e4 <__ssvfiscanf_r>
 80153f6:	b01c      	add	sp, #112	; 0x70
 80153f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153fc:	b003      	add	sp, #12
 80153fe:	4770      	bx	lr
 8015400:	08015409 	.word	0x08015409
 8015404:	2000000c 	.word	0x2000000c

08015408 <__seofread>:
 8015408:	2000      	movs	r0, #0
 801540a:	4770      	bx	lr

0801540c <strcpy>:
 801540c:	4603      	mov	r3, r0
 801540e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015412:	f803 2b01 	strb.w	r2, [r3], #1
 8015416:	2a00      	cmp	r2, #0
 8015418:	d1f9      	bne.n	801540e <strcpy+0x2>
 801541a:	4770      	bx	lr

0801541c <sulp>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	4604      	mov	r4, r0
 8015420:	460d      	mov	r5, r1
 8015422:	ec45 4b10 	vmov	d0, r4, r5
 8015426:	4616      	mov	r6, r2
 8015428:	f002 fb46 	bl	8017ab8 <__ulp>
 801542c:	ec51 0b10 	vmov	r0, r1, d0
 8015430:	b17e      	cbz	r6, 8015452 <sulp+0x36>
 8015432:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015436:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801543a:	2b00      	cmp	r3, #0
 801543c:	dd09      	ble.n	8015452 <sulp+0x36>
 801543e:	051b      	lsls	r3, r3, #20
 8015440:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015444:	2400      	movs	r4, #0
 8015446:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801544a:	4622      	mov	r2, r4
 801544c:	462b      	mov	r3, r5
 801544e:	f7eb f8eb 	bl	8000628 <__aeabi_dmul>
 8015452:	bd70      	pop	{r4, r5, r6, pc}
 8015454:	0000      	movs	r0, r0
	...

08015458 <_strtod_l>:
 8015458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545c:	461f      	mov	r7, r3
 801545e:	b0a1      	sub	sp, #132	; 0x84
 8015460:	2300      	movs	r3, #0
 8015462:	4681      	mov	r9, r0
 8015464:	4638      	mov	r0, r7
 8015466:	460e      	mov	r6, r1
 8015468:	9217      	str	r2, [sp, #92]	; 0x5c
 801546a:	931c      	str	r3, [sp, #112]	; 0x70
 801546c:	f002 f824 	bl	80174b8 <__localeconv_l>
 8015470:	4680      	mov	r8, r0
 8015472:	6800      	ldr	r0, [r0, #0]
 8015474:	f7ea fec4 	bl	8000200 <strlen>
 8015478:	f04f 0a00 	mov.w	sl, #0
 801547c:	4604      	mov	r4, r0
 801547e:	f04f 0b00 	mov.w	fp, #0
 8015482:	961b      	str	r6, [sp, #108]	; 0x6c
 8015484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015486:	781a      	ldrb	r2, [r3, #0]
 8015488:	2a0d      	cmp	r2, #13
 801548a:	d832      	bhi.n	80154f2 <_strtod_l+0x9a>
 801548c:	2a09      	cmp	r2, #9
 801548e:	d236      	bcs.n	80154fe <_strtod_l+0xa6>
 8015490:	2a00      	cmp	r2, #0
 8015492:	d03e      	beq.n	8015512 <_strtod_l+0xba>
 8015494:	2300      	movs	r3, #0
 8015496:	930d      	str	r3, [sp, #52]	; 0x34
 8015498:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801549a:	782b      	ldrb	r3, [r5, #0]
 801549c:	2b30      	cmp	r3, #48	; 0x30
 801549e:	f040 80ac 	bne.w	80155fa <_strtod_l+0x1a2>
 80154a2:	786b      	ldrb	r3, [r5, #1]
 80154a4:	2b58      	cmp	r3, #88	; 0x58
 80154a6:	d001      	beq.n	80154ac <_strtod_l+0x54>
 80154a8:	2b78      	cmp	r3, #120	; 0x78
 80154aa:	d167      	bne.n	801557c <_strtod_l+0x124>
 80154ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154ae:	9301      	str	r3, [sp, #4]
 80154b0:	ab1c      	add	r3, sp, #112	; 0x70
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	9702      	str	r7, [sp, #8]
 80154b6:	ab1d      	add	r3, sp, #116	; 0x74
 80154b8:	4a88      	ldr	r2, [pc, #544]	; (80156dc <_strtod_l+0x284>)
 80154ba:	a91b      	add	r1, sp, #108	; 0x6c
 80154bc:	4648      	mov	r0, r9
 80154be:	f001 fd12 	bl	8016ee6 <__gethex>
 80154c2:	f010 0407 	ands.w	r4, r0, #7
 80154c6:	4606      	mov	r6, r0
 80154c8:	d005      	beq.n	80154d6 <_strtod_l+0x7e>
 80154ca:	2c06      	cmp	r4, #6
 80154cc:	d12b      	bne.n	8015526 <_strtod_l+0xce>
 80154ce:	3501      	adds	r5, #1
 80154d0:	2300      	movs	r3, #0
 80154d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80154d4:	930d      	str	r3, [sp, #52]	; 0x34
 80154d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f040 859a 	bne.w	8016012 <_strtod_l+0xbba>
 80154de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154e0:	b1e3      	cbz	r3, 801551c <_strtod_l+0xc4>
 80154e2:	4652      	mov	r2, sl
 80154e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80154e8:	ec43 2b10 	vmov	d0, r2, r3
 80154ec:	b021      	add	sp, #132	; 0x84
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f2:	2a2b      	cmp	r2, #43	; 0x2b
 80154f4:	d015      	beq.n	8015522 <_strtod_l+0xca>
 80154f6:	2a2d      	cmp	r2, #45	; 0x2d
 80154f8:	d004      	beq.n	8015504 <_strtod_l+0xac>
 80154fa:	2a20      	cmp	r2, #32
 80154fc:	d1ca      	bne.n	8015494 <_strtod_l+0x3c>
 80154fe:	3301      	adds	r3, #1
 8015500:	931b      	str	r3, [sp, #108]	; 0x6c
 8015502:	e7bf      	b.n	8015484 <_strtod_l+0x2c>
 8015504:	2201      	movs	r2, #1
 8015506:	920d      	str	r2, [sp, #52]	; 0x34
 8015508:	1c5a      	adds	r2, r3, #1
 801550a:	921b      	str	r2, [sp, #108]	; 0x6c
 801550c:	785b      	ldrb	r3, [r3, #1]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1c2      	bne.n	8015498 <_strtod_l+0x40>
 8015512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015514:	961b      	str	r6, [sp, #108]	; 0x6c
 8015516:	2b00      	cmp	r3, #0
 8015518:	f040 8579 	bne.w	801600e <_strtod_l+0xbb6>
 801551c:	4652      	mov	r2, sl
 801551e:	465b      	mov	r3, fp
 8015520:	e7e2      	b.n	80154e8 <_strtod_l+0x90>
 8015522:	2200      	movs	r2, #0
 8015524:	e7ef      	b.n	8015506 <_strtod_l+0xae>
 8015526:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015528:	b13a      	cbz	r2, 801553a <_strtod_l+0xe2>
 801552a:	2135      	movs	r1, #53	; 0x35
 801552c:	a81e      	add	r0, sp, #120	; 0x78
 801552e:	f002 fbbb 	bl	8017ca8 <__copybits>
 8015532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015534:	4648      	mov	r0, r9
 8015536:	f002 f828 	bl	801758a <_Bfree>
 801553a:	3c01      	subs	r4, #1
 801553c:	2c04      	cmp	r4, #4
 801553e:	d806      	bhi.n	801554e <_strtod_l+0xf6>
 8015540:	e8df f004 	tbb	[pc, r4]
 8015544:	1714030a 	.word	0x1714030a
 8015548:	0a          	.byte	0x0a
 8015549:	00          	.byte	0x00
 801554a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801554e:	0730      	lsls	r0, r6, #28
 8015550:	d5c1      	bpl.n	80154d6 <_strtod_l+0x7e>
 8015552:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015556:	e7be      	b.n	80154d6 <_strtod_l+0x7e>
 8015558:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801555c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801555e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015562:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015566:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801556a:	e7f0      	b.n	801554e <_strtod_l+0xf6>
 801556c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80156e0 <_strtod_l+0x288>
 8015570:	e7ed      	b.n	801554e <_strtod_l+0xf6>
 8015572:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015576:	f04f 3aff 	mov.w	sl, #4294967295
 801557a:	e7e8      	b.n	801554e <_strtod_l+0xf6>
 801557c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801557e:	1c5a      	adds	r2, r3, #1
 8015580:	921b      	str	r2, [sp, #108]	; 0x6c
 8015582:	785b      	ldrb	r3, [r3, #1]
 8015584:	2b30      	cmp	r3, #48	; 0x30
 8015586:	d0f9      	beq.n	801557c <_strtod_l+0x124>
 8015588:	2b00      	cmp	r3, #0
 801558a:	d0a4      	beq.n	80154d6 <_strtod_l+0x7e>
 801558c:	2301      	movs	r3, #1
 801558e:	2500      	movs	r5, #0
 8015590:	9306      	str	r3, [sp, #24]
 8015592:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015594:	9308      	str	r3, [sp, #32]
 8015596:	9507      	str	r5, [sp, #28]
 8015598:	9505      	str	r5, [sp, #20]
 801559a:	220a      	movs	r2, #10
 801559c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801559e:	7807      	ldrb	r7, [r0, #0]
 80155a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80155a4:	b2d9      	uxtb	r1, r3
 80155a6:	2909      	cmp	r1, #9
 80155a8:	d929      	bls.n	80155fe <_strtod_l+0x1a6>
 80155aa:	4622      	mov	r2, r4
 80155ac:	f8d8 1000 	ldr.w	r1, [r8]
 80155b0:	f003 f902 	bl	80187b8 <strncmp>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d031      	beq.n	801561c <_strtod_l+0x1c4>
 80155b8:	2000      	movs	r0, #0
 80155ba:	9c05      	ldr	r4, [sp, #20]
 80155bc:	9004      	str	r0, [sp, #16]
 80155be:	463b      	mov	r3, r7
 80155c0:	4602      	mov	r2, r0
 80155c2:	2b65      	cmp	r3, #101	; 0x65
 80155c4:	d001      	beq.n	80155ca <_strtod_l+0x172>
 80155c6:	2b45      	cmp	r3, #69	; 0x45
 80155c8:	d114      	bne.n	80155f4 <_strtod_l+0x19c>
 80155ca:	b924      	cbnz	r4, 80155d6 <_strtod_l+0x17e>
 80155cc:	b910      	cbnz	r0, 80155d4 <_strtod_l+0x17c>
 80155ce:	9b06      	ldr	r3, [sp, #24]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d09e      	beq.n	8015512 <_strtod_l+0xba>
 80155d4:	2400      	movs	r4, #0
 80155d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80155d8:	1c73      	adds	r3, r6, #1
 80155da:	931b      	str	r3, [sp, #108]	; 0x6c
 80155dc:	7873      	ldrb	r3, [r6, #1]
 80155de:	2b2b      	cmp	r3, #43	; 0x2b
 80155e0:	d078      	beq.n	80156d4 <_strtod_l+0x27c>
 80155e2:	2b2d      	cmp	r3, #45	; 0x2d
 80155e4:	d070      	beq.n	80156c8 <_strtod_l+0x270>
 80155e6:	f04f 0c00 	mov.w	ip, #0
 80155ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80155ee:	2f09      	cmp	r7, #9
 80155f0:	d97c      	bls.n	80156ec <_strtod_l+0x294>
 80155f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80155f4:	f04f 0e00 	mov.w	lr, #0
 80155f8:	e09a      	b.n	8015730 <_strtod_l+0x2d8>
 80155fa:	2300      	movs	r3, #0
 80155fc:	e7c7      	b.n	801558e <_strtod_l+0x136>
 80155fe:	9905      	ldr	r1, [sp, #20]
 8015600:	2908      	cmp	r1, #8
 8015602:	bfdd      	ittte	le
 8015604:	9907      	ldrle	r1, [sp, #28]
 8015606:	fb02 3301 	mlale	r3, r2, r1, r3
 801560a:	9307      	strle	r3, [sp, #28]
 801560c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015610:	9b05      	ldr	r3, [sp, #20]
 8015612:	3001      	adds	r0, #1
 8015614:	3301      	adds	r3, #1
 8015616:	9305      	str	r3, [sp, #20]
 8015618:	901b      	str	r0, [sp, #108]	; 0x6c
 801561a:	e7bf      	b.n	801559c <_strtod_l+0x144>
 801561c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801561e:	191a      	adds	r2, r3, r4
 8015620:	921b      	str	r2, [sp, #108]	; 0x6c
 8015622:	9a05      	ldr	r2, [sp, #20]
 8015624:	5d1b      	ldrb	r3, [r3, r4]
 8015626:	2a00      	cmp	r2, #0
 8015628:	d037      	beq.n	801569a <_strtod_l+0x242>
 801562a:	9c05      	ldr	r4, [sp, #20]
 801562c:	4602      	mov	r2, r0
 801562e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015632:	2909      	cmp	r1, #9
 8015634:	d913      	bls.n	801565e <_strtod_l+0x206>
 8015636:	2101      	movs	r1, #1
 8015638:	9104      	str	r1, [sp, #16]
 801563a:	e7c2      	b.n	80155c2 <_strtod_l+0x16a>
 801563c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801563e:	1c5a      	adds	r2, r3, #1
 8015640:	921b      	str	r2, [sp, #108]	; 0x6c
 8015642:	785b      	ldrb	r3, [r3, #1]
 8015644:	3001      	adds	r0, #1
 8015646:	2b30      	cmp	r3, #48	; 0x30
 8015648:	d0f8      	beq.n	801563c <_strtod_l+0x1e4>
 801564a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801564e:	2a08      	cmp	r2, #8
 8015650:	f200 84e4 	bhi.w	801601c <_strtod_l+0xbc4>
 8015654:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015656:	9208      	str	r2, [sp, #32]
 8015658:	4602      	mov	r2, r0
 801565a:	2000      	movs	r0, #0
 801565c:	4604      	mov	r4, r0
 801565e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015662:	f100 0101 	add.w	r1, r0, #1
 8015666:	d012      	beq.n	801568e <_strtod_l+0x236>
 8015668:	440a      	add	r2, r1
 801566a:	eb00 0c04 	add.w	ip, r0, r4
 801566e:	4621      	mov	r1, r4
 8015670:	270a      	movs	r7, #10
 8015672:	458c      	cmp	ip, r1
 8015674:	d113      	bne.n	801569e <_strtod_l+0x246>
 8015676:	1821      	adds	r1, r4, r0
 8015678:	2908      	cmp	r1, #8
 801567a:	f104 0401 	add.w	r4, r4, #1
 801567e:	4404      	add	r4, r0
 8015680:	dc19      	bgt.n	80156b6 <_strtod_l+0x25e>
 8015682:	9b07      	ldr	r3, [sp, #28]
 8015684:	210a      	movs	r1, #10
 8015686:	fb01 e303 	mla	r3, r1, r3, lr
 801568a:	9307      	str	r3, [sp, #28]
 801568c:	2100      	movs	r1, #0
 801568e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015690:	1c58      	adds	r0, r3, #1
 8015692:	901b      	str	r0, [sp, #108]	; 0x6c
 8015694:	785b      	ldrb	r3, [r3, #1]
 8015696:	4608      	mov	r0, r1
 8015698:	e7c9      	b.n	801562e <_strtod_l+0x1d6>
 801569a:	9805      	ldr	r0, [sp, #20]
 801569c:	e7d3      	b.n	8015646 <_strtod_l+0x1ee>
 801569e:	2908      	cmp	r1, #8
 80156a0:	f101 0101 	add.w	r1, r1, #1
 80156a4:	dc03      	bgt.n	80156ae <_strtod_l+0x256>
 80156a6:	9b07      	ldr	r3, [sp, #28]
 80156a8:	437b      	muls	r3, r7
 80156aa:	9307      	str	r3, [sp, #28]
 80156ac:	e7e1      	b.n	8015672 <_strtod_l+0x21a>
 80156ae:	2910      	cmp	r1, #16
 80156b0:	bfd8      	it	le
 80156b2:	437d      	mulle	r5, r7
 80156b4:	e7dd      	b.n	8015672 <_strtod_l+0x21a>
 80156b6:	2c10      	cmp	r4, #16
 80156b8:	bfdc      	itt	le
 80156ba:	210a      	movle	r1, #10
 80156bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80156c0:	e7e4      	b.n	801568c <_strtod_l+0x234>
 80156c2:	2301      	movs	r3, #1
 80156c4:	9304      	str	r3, [sp, #16]
 80156c6:	e781      	b.n	80155cc <_strtod_l+0x174>
 80156c8:	f04f 0c01 	mov.w	ip, #1
 80156cc:	1cb3      	adds	r3, r6, #2
 80156ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80156d0:	78b3      	ldrb	r3, [r6, #2]
 80156d2:	e78a      	b.n	80155ea <_strtod_l+0x192>
 80156d4:	f04f 0c00 	mov.w	ip, #0
 80156d8:	e7f8      	b.n	80156cc <_strtod_l+0x274>
 80156da:	bf00      	nop
 80156dc:	08018f6c 	.word	0x08018f6c
 80156e0:	7ff00000 	.word	0x7ff00000
 80156e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156e6:	1c5f      	adds	r7, r3, #1
 80156e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80156ea:	785b      	ldrb	r3, [r3, #1]
 80156ec:	2b30      	cmp	r3, #48	; 0x30
 80156ee:	d0f9      	beq.n	80156e4 <_strtod_l+0x28c>
 80156f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80156f4:	2f08      	cmp	r7, #8
 80156f6:	f63f af7d 	bhi.w	80155f4 <_strtod_l+0x19c>
 80156fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80156fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015700:	930a      	str	r3, [sp, #40]	; 0x28
 8015702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015704:	1c5f      	adds	r7, r3, #1
 8015706:	971b      	str	r7, [sp, #108]	; 0x6c
 8015708:	785b      	ldrb	r3, [r3, #1]
 801570a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801570e:	f1b8 0f09 	cmp.w	r8, #9
 8015712:	d937      	bls.n	8015784 <_strtod_l+0x32c>
 8015714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015716:	1a7f      	subs	r7, r7, r1
 8015718:	2f08      	cmp	r7, #8
 801571a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801571e:	dc37      	bgt.n	8015790 <_strtod_l+0x338>
 8015720:	45be      	cmp	lr, r7
 8015722:	bfa8      	it	ge
 8015724:	46be      	movge	lr, r7
 8015726:	f1bc 0f00 	cmp.w	ip, #0
 801572a:	d001      	beq.n	8015730 <_strtod_l+0x2d8>
 801572c:	f1ce 0e00 	rsb	lr, lr, #0
 8015730:	2c00      	cmp	r4, #0
 8015732:	d151      	bne.n	80157d8 <_strtod_l+0x380>
 8015734:	2800      	cmp	r0, #0
 8015736:	f47f aece 	bne.w	80154d6 <_strtod_l+0x7e>
 801573a:	9a06      	ldr	r2, [sp, #24]
 801573c:	2a00      	cmp	r2, #0
 801573e:	f47f aeca 	bne.w	80154d6 <_strtod_l+0x7e>
 8015742:	9a04      	ldr	r2, [sp, #16]
 8015744:	2a00      	cmp	r2, #0
 8015746:	f47f aee4 	bne.w	8015512 <_strtod_l+0xba>
 801574a:	2b4e      	cmp	r3, #78	; 0x4e
 801574c:	d027      	beq.n	801579e <_strtod_l+0x346>
 801574e:	dc21      	bgt.n	8015794 <_strtod_l+0x33c>
 8015750:	2b49      	cmp	r3, #73	; 0x49
 8015752:	f47f aede 	bne.w	8015512 <_strtod_l+0xba>
 8015756:	49a0      	ldr	r1, [pc, #640]	; (80159d8 <_strtod_l+0x580>)
 8015758:	a81b      	add	r0, sp, #108	; 0x6c
 801575a:	f001 fdf7 	bl	801734c <__match>
 801575e:	2800      	cmp	r0, #0
 8015760:	f43f aed7 	beq.w	8015512 <_strtod_l+0xba>
 8015764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015766:	499d      	ldr	r1, [pc, #628]	; (80159dc <_strtod_l+0x584>)
 8015768:	3b01      	subs	r3, #1
 801576a:	a81b      	add	r0, sp, #108	; 0x6c
 801576c:	931b      	str	r3, [sp, #108]	; 0x6c
 801576e:	f001 fded 	bl	801734c <__match>
 8015772:	b910      	cbnz	r0, 801577a <_strtod_l+0x322>
 8015774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015776:	3301      	adds	r3, #1
 8015778:	931b      	str	r3, [sp, #108]	; 0x6c
 801577a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80159f0 <_strtod_l+0x598>
 801577e:	f04f 0a00 	mov.w	sl, #0
 8015782:	e6a8      	b.n	80154d6 <_strtod_l+0x7e>
 8015784:	210a      	movs	r1, #10
 8015786:	fb01 3e0e 	mla	lr, r1, lr, r3
 801578a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801578e:	e7b8      	b.n	8015702 <_strtod_l+0x2aa>
 8015790:	46be      	mov	lr, r7
 8015792:	e7c8      	b.n	8015726 <_strtod_l+0x2ce>
 8015794:	2b69      	cmp	r3, #105	; 0x69
 8015796:	d0de      	beq.n	8015756 <_strtod_l+0x2fe>
 8015798:	2b6e      	cmp	r3, #110	; 0x6e
 801579a:	f47f aeba 	bne.w	8015512 <_strtod_l+0xba>
 801579e:	4990      	ldr	r1, [pc, #576]	; (80159e0 <_strtod_l+0x588>)
 80157a0:	a81b      	add	r0, sp, #108	; 0x6c
 80157a2:	f001 fdd3 	bl	801734c <__match>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	f43f aeb3 	beq.w	8015512 <_strtod_l+0xba>
 80157ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b28      	cmp	r3, #40	; 0x28
 80157b2:	d10e      	bne.n	80157d2 <_strtod_l+0x37a>
 80157b4:	aa1e      	add	r2, sp, #120	; 0x78
 80157b6:	498b      	ldr	r1, [pc, #556]	; (80159e4 <_strtod_l+0x58c>)
 80157b8:	a81b      	add	r0, sp, #108	; 0x6c
 80157ba:	f001 fddb 	bl	8017374 <__hexnan>
 80157be:	2805      	cmp	r0, #5
 80157c0:	d107      	bne.n	80157d2 <_strtod_l+0x37a>
 80157c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80157c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80157c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80157cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80157d0:	e681      	b.n	80154d6 <_strtod_l+0x7e>
 80157d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80159f8 <_strtod_l+0x5a0>
 80157d6:	e7d2      	b.n	801577e <_strtod_l+0x326>
 80157d8:	ebae 0302 	sub.w	r3, lr, r2
 80157dc:	9306      	str	r3, [sp, #24]
 80157de:	9b05      	ldr	r3, [sp, #20]
 80157e0:	9807      	ldr	r0, [sp, #28]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	bf08      	it	eq
 80157e6:	4623      	moveq	r3, r4
 80157e8:	2c10      	cmp	r4, #16
 80157ea:	9305      	str	r3, [sp, #20]
 80157ec:	46a0      	mov	r8, r4
 80157ee:	bfa8      	it	ge
 80157f0:	f04f 0810 	movge.w	r8, #16
 80157f4:	f7ea fe9e 	bl	8000534 <__aeabi_ui2d>
 80157f8:	2c09      	cmp	r4, #9
 80157fa:	4682      	mov	sl, r0
 80157fc:	468b      	mov	fp, r1
 80157fe:	dc13      	bgt.n	8015828 <_strtod_l+0x3d0>
 8015800:	9b06      	ldr	r3, [sp, #24]
 8015802:	2b00      	cmp	r3, #0
 8015804:	f43f ae67 	beq.w	80154d6 <_strtod_l+0x7e>
 8015808:	9b06      	ldr	r3, [sp, #24]
 801580a:	dd7a      	ble.n	8015902 <_strtod_l+0x4aa>
 801580c:	2b16      	cmp	r3, #22
 801580e:	dc61      	bgt.n	80158d4 <_strtod_l+0x47c>
 8015810:	4a75      	ldr	r2, [pc, #468]	; (80159e8 <_strtod_l+0x590>)
 8015812:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015816:	e9de 0100 	ldrd	r0, r1, [lr]
 801581a:	4652      	mov	r2, sl
 801581c:	465b      	mov	r3, fp
 801581e:	f7ea ff03 	bl	8000628 <__aeabi_dmul>
 8015822:	4682      	mov	sl, r0
 8015824:	468b      	mov	fp, r1
 8015826:	e656      	b.n	80154d6 <_strtod_l+0x7e>
 8015828:	4b6f      	ldr	r3, [pc, #444]	; (80159e8 <_strtod_l+0x590>)
 801582a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801582e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015832:	f7ea fef9 	bl	8000628 <__aeabi_dmul>
 8015836:	4606      	mov	r6, r0
 8015838:	4628      	mov	r0, r5
 801583a:	460f      	mov	r7, r1
 801583c:	f7ea fe7a 	bl	8000534 <__aeabi_ui2d>
 8015840:	4602      	mov	r2, r0
 8015842:	460b      	mov	r3, r1
 8015844:	4630      	mov	r0, r6
 8015846:	4639      	mov	r1, r7
 8015848:	f7ea fd38 	bl	80002bc <__adddf3>
 801584c:	2c0f      	cmp	r4, #15
 801584e:	4682      	mov	sl, r0
 8015850:	468b      	mov	fp, r1
 8015852:	ddd5      	ble.n	8015800 <_strtod_l+0x3a8>
 8015854:	9b06      	ldr	r3, [sp, #24]
 8015856:	eba4 0808 	sub.w	r8, r4, r8
 801585a:	4498      	add	r8, r3
 801585c:	f1b8 0f00 	cmp.w	r8, #0
 8015860:	f340 8096 	ble.w	8015990 <_strtod_l+0x538>
 8015864:	f018 030f 	ands.w	r3, r8, #15
 8015868:	d00a      	beq.n	8015880 <_strtod_l+0x428>
 801586a:	495f      	ldr	r1, [pc, #380]	; (80159e8 <_strtod_l+0x590>)
 801586c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015870:	4652      	mov	r2, sl
 8015872:	465b      	mov	r3, fp
 8015874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015878:	f7ea fed6 	bl	8000628 <__aeabi_dmul>
 801587c:	4682      	mov	sl, r0
 801587e:	468b      	mov	fp, r1
 8015880:	f038 080f 	bics.w	r8, r8, #15
 8015884:	d073      	beq.n	801596e <_strtod_l+0x516>
 8015886:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801588a:	dd47      	ble.n	801591c <_strtod_l+0x4c4>
 801588c:	2400      	movs	r4, #0
 801588e:	46a0      	mov	r8, r4
 8015890:	9407      	str	r4, [sp, #28]
 8015892:	9405      	str	r4, [sp, #20]
 8015894:	2322      	movs	r3, #34	; 0x22
 8015896:	f8df b158 	ldr.w	fp, [pc, #344]	; 80159f0 <_strtod_l+0x598>
 801589a:	f8c9 3000 	str.w	r3, [r9]
 801589e:	f04f 0a00 	mov.w	sl, #0
 80158a2:	9b07      	ldr	r3, [sp, #28]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f43f ae16 	beq.w	80154d6 <_strtod_l+0x7e>
 80158aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158ac:	4648      	mov	r0, r9
 80158ae:	f001 fe6c 	bl	801758a <_Bfree>
 80158b2:	9905      	ldr	r1, [sp, #20]
 80158b4:	4648      	mov	r0, r9
 80158b6:	f001 fe68 	bl	801758a <_Bfree>
 80158ba:	4641      	mov	r1, r8
 80158bc:	4648      	mov	r0, r9
 80158be:	f001 fe64 	bl	801758a <_Bfree>
 80158c2:	9907      	ldr	r1, [sp, #28]
 80158c4:	4648      	mov	r0, r9
 80158c6:	f001 fe60 	bl	801758a <_Bfree>
 80158ca:	4621      	mov	r1, r4
 80158cc:	4648      	mov	r0, r9
 80158ce:	f001 fe5c 	bl	801758a <_Bfree>
 80158d2:	e600      	b.n	80154d6 <_strtod_l+0x7e>
 80158d4:	9a06      	ldr	r2, [sp, #24]
 80158d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80158da:	4293      	cmp	r3, r2
 80158dc:	dbba      	blt.n	8015854 <_strtod_l+0x3fc>
 80158de:	4d42      	ldr	r5, [pc, #264]	; (80159e8 <_strtod_l+0x590>)
 80158e0:	f1c4 040f 	rsb	r4, r4, #15
 80158e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80158e8:	4652      	mov	r2, sl
 80158ea:	465b      	mov	r3, fp
 80158ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158f0:	f7ea fe9a 	bl	8000628 <__aeabi_dmul>
 80158f4:	9b06      	ldr	r3, [sp, #24]
 80158f6:	1b1c      	subs	r4, r3, r4
 80158f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80158fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015900:	e78d      	b.n	801581e <_strtod_l+0x3c6>
 8015902:	f113 0f16 	cmn.w	r3, #22
 8015906:	dba5      	blt.n	8015854 <_strtod_l+0x3fc>
 8015908:	4a37      	ldr	r2, [pc, #220]	; (80159e8 <_strtod_l+0x590>)
 801590a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801590e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015912:	4650      	mov	r0, sl
 8015914:	4659      	mov	r1, fp
 8015916:	f7ea ffb1 	bl	800087c <__aeabi_ddiv>
 801591a:	e782      	b.n	8015822 <_strtod_l+0x3ca>
 801591c:	2300      	movs	r3, #0
 801591e:	4e33      	ldr	r6, [pc, #204]	; (80159ec <_strtod_l+0x594>)
 8015920:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015924:	4650      	mov	r0, sl
 8015926:	4659      	mov	r1, fp
 8015928:	461d      	mov	r5, r3
 801592a:	f1b8 0f01 	cmp.w	r8, #1
 801592e:	dc21      	bgt.n	8015974 <_strtod_l+0x51c>
 8015930:	b10b      	cbz	r3, 8015936 <_strtod_l+0x4de>
 8015932:	4682      	mov	sl, r0
 8015934:	468b      	mov	fp, r1
 8015936:	4b2d      	ldr	r3, [pc, #180]	; (80159ec <_strtod_l+0x594>)
 8015938:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801593c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015940:	4652      	mov	r2, sl
 8015942:	465b      	mov	r3, fp
 8015944:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015948:	f7ea fe6e 	bl	8000628 <__aeabi_dmul>
 801594c:	4b28      	ldr	r3, [pc, #160]	; (80159f0 <_strtod_l+0x598>)
 801594e:	460a      	mov	r2, r1
 8015950:	400b      	ands	r3, r1
 8015952:	4928      	ldr	r1, [pc, #160]	; (80159f4 <_strtod_l+0x59c>)
 8015954:	428b      	cmp	r3, r1
 8015956:	4682      	mov	sl, r0
 8015958:	d898      	bhi.n	801588c <_strtod_l+0x434>
 801595a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801595e:	428b      	cmp	r3, r1
 8015960:	bf86      	itte	hi
 8015962:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80159fc <_strtod_l+0x5a4>
 8015966:	f04f 3aff 	movhi.w	sl, #4294967295
 801596a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801596e:	2300      	movs	r3, #0
 8015970:	9304      	str	r3, [sp, #16]
 8015972:	e077      	b.n	8015a64 <_strtod_l+0x60c>
 8015974:	f018 0f01 	tst.w	r8, #1
 8015978:	d006      	beq.n	8015988 <_strtod_l+0x530>
 801597a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015982:	f7ea fe51 	bl	8000628 <__aeabi_dmul>
 8015986:	2301      	movs	r3, #1
 8015988:	3501      	adds	r5, #1
 801598a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801598e:	e7cc      	b.n	801592a <_strtod_l+0x4d2>
 8015990:	d0ed      	beq.n	801596e <_strtod_l+0x516>
 8015992:	f1c8 0800 	rsb	r8, r8, #0
 8015996:	f018 020f 	ands.w	r2, r8, #15
 801599a:	d00a      	beq.n	80159b2 <_strtod_l+0x55a>
 801599c:	4b12      	ldr	r3, [pc, #72]	; (80159e8 <_strtod_l+0x590>)
 801599e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159a2:	4650      	mov	r0, sl
 80159a4:	4659      	mov	r1, fp
 80159a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159aa:	f7ea ff67 	bl	800087c <__aeabi_ddiv>
 80159ae:	4682      	mov	sl, r0
 80159b0:	468b      	mov	fp, r1
 80159b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80159b6:	d0da      	beq.n	801596e <_strtod_l+0x516>
 80159b8:	f1b8 0f1f 	cmp.w	r8, #31
 80159bc:	dd20      	ble.n	8015a00 <_strtod_l+0x5a8>
 80159be:	2400      	movs	r4, #0
 80159c0:	46a0      	mov	r8, r4
 80159c2:	9407      	str	r4, [sp, #28]
 80159c4:	9405      	str	r4, [sp, #20]
 80159c6:	2322      	movs	r3, #34	; 0x22
 80159c8:	f04f 0a00 	mov.w	sl, #0
 80159cc:	f04f 0b00 	mov.w	fp, #0
 80159d0:	f8c9 3000 	str.w	r3, [r9]
 80159d4:	e765      	b.n	80158a2 <_strtod_l+0x44a>
 80159d6:	bf00      	nop
 80159d8:	08018f39 	.word	0x08018f39
 80159dc:	08018fc3 	.word	0x08018fc3
 80159e0:	08018f41 	.word	0x08018f41
 80159e4:	08018f80 	.word	0x08018f80
 80159e8:	08019000 	.word	0x08019000
 80159ec:	08018fd8 	.word	0x08018fd8
 80159f0:	7ff00000 	.word	0x7ff00000
 80159f4:	7ca00000 	.word	0x7ca00000
 80159f8:	fff80000 	.word	0xfff80000
 80159fc:	7fefffff 	.word	0x7fefffff
 8015a00:	f018 0310 	ands.w	r3, r8, #16
 8015a04:	bf18      	it	ne
 8015a06:	236a      	movne	r3, #106	; 0x6a
 8015a08:	4da0      	ldr	r5, [pc, #640]	; (8015c8c <_strtod_l+0x834>)
 8015a0a:	9304      	str	r3, [sp, #16]
 8015a0c:	4650      	mov	r0, sl
 8015a0e:	4659      	mov	r1, fp
 8015a10:	2300      	movs	r3, #0
 8015a12:	f1b8 0f00 	cmp.w	r8, #0
 8015a16:	f300 810a 	bgt.w	8015c2e <_strtod_l+0x7d6>
 8015a1a:	b10b      	cbz	r3, 8015a20 <_strtod_l+0x5c8>
 8015a1c:	4682      	mov	sl, r0
 8015a1e:	468b      	mov	fp, r1
 8015a20:	9b04      	ldr	r3, [sp, #16]
 8015a22:	b1bb      	cbz	r3, 8015a54 <_strtod_l+0x5fc>
 8015a24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	4659      	mov	r1, fp
 8015a30:	dd10      	ble.n	8015a54 <_strtod_l+0x5fc>
 8015a32:	2b1f      	cmp	r3, #31
 8015a34:	f340 8107 	ble.w	8015c46 <_strtod_l+0x7ee>
 8015a38:	2b34      	cmp	r3, #52	; 0x34
 8015a3a:	bfde      	ittt	le
 8015a3c:	3b20      	suble	r3, #32
 8015a3e:	f04f 32ff 	movle.w	r2, #4294967295
 8015a42:	fa02 f303 	lslle.w	r3, r2, r3
 8015a46:	f04f 0a00 	mov.w	sl, #0
 8015a4a:	bfcc      	ite	gt
 8015a4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015a50:	ea03 0b01 	andle.w	fp, r3, r1
 8015a54:	2200      	movs	r2, #0
 8015a56:	2300      	movs	r3, #0
 8015a58:	4650      	mov	r0, sl
 8015a5a:	4659      	mov	r1, fp
 8015a5c:	f7eb f84c 	bl	8000af8 <__aeabi_dcmpeq>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d1ac      	bne.n	80159be <_strtod_l+0x566>
 8015a64:	9b07      	ldr	r3, [sp, #28]
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	9a05      	ldr	r2, [sp, #20]
 8015a6a:	9908      	ldr	r1, [sp, #32]
 8015a6c:	4623      	mov	r3, r4
 8015a6e:	4648      	mov	r0, r9
 8015a70:	f001 fddd 	bl	801762e <__s2b>
 8015a74:	9007      	str	r0, [sp, #28]
 8015a76:	2800      	cmp	r0, #0
 8015a78:	f43f af08 	beq.w	801588c <_strtod_l+0x434>
 8015a7c:	9a06      	ldr	r2, [sp, #24]
 8015a7e:	9b06      	ldr	r3, [sp, #24]
 8015a80:	2a00      	cmp	r2, #0
 8015a82:	f1c3 0300 	rsb	r3, r3, #0
 8015a86:	bfa8      	it	ge
 8015a88:	2300      	movge	r3, #0
 8015a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8015a8c:	2400      	movs	r4, #0
 8015a8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015a92:	9316      	str	r3, [sp, #88]	; 0x58
 8015a94:	46a0      	mov	r8, r4
 8015a96:	9b07      	ldr	r3, [sp, #28]
 8015a98:	4648      	mov	r0, r9
 8015a9a:	6859      	ldr	r1, [r3, #4]
 8015a9c:	f001 fd41 	bl	8017522 <_Balloc>
 8015aa0:	9005      	str	r0, [sp, #20]
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	f43f aef6 	beq.w	8015894 <_strtod_l+0x43c>
 8015aa8:	9b07      	ldr	r3, [sp, #28]
 8015aaa:	691a      	ldr	r2, [r3, #16]
 8015aac:	3202      	adds	r2, #2
 8015aae:	f103 010c 	add.w	r1, r3, #12
 8015ab2:	0092      	lsls	r2, r2, #2
 8015ab4:	300c      	adds	r0, #12
 8015ab6:	f001 fd29 	bl	801750c <memcpy>
 8015aba:	aa1e      	add	r2, sp, #120	; 0x78
 8015abc:	a91d      	add	r1, sp, #116	; 0x74
 8015abe:	ec4b ab10 	vmov	d0, sl, fp
 8015ac2:	4648      	mov	r0, r9
 8015ac4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015ac8:	f002 f86c 	bl	8017ba4 <__d2b>
 8015acc:	901c      	str	r0, [sp, #112]	; 0x70
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	f43f aee0 	beq.w	8015894 <_strtod_l+0x43c>
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	4648      	mov	r0, r9
 8015ad8:	f001 fe35 	bl	8017746 <__i2b>
 8015adc:	4680      	mov	r8, r0
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	f43f aed8 	beq.w	8015894 <_strtod_l+0x43c>
 8015ae4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015ae6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015ae8:	2e00      	cmp	r6, #0
 8015aea:	bfab      	itete	ge
 8015aec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015aee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015af0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015af2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015af4:	bfac      	ite	ge
 8015af6:	18f7      	addge	r7, r6, r3
 8015af8:	1b9d      	sublt	r5, r3, r6
 8015afa:	9b04      	ldr	r3, [sp, #16]
 8015afc:	1af6      	subs	r6, r6, r3
 8015afe:	4416      	add	r6, r2
 8015b00:	4b63      	ldr	r3, [pc, #396]	; (8015c90 <_strtod_l+0x838>)
 8015b02:	3e01      	subs	r6, #1
 8015b04:	429e      	cmp	r6, r3
 8015b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015b0a:	f280 80af 	bge.w	8015c6c <_strtod_l+0x814>
 8015b0e:	1b9b      	subs	r3, r3, r6
 8015b10:	2b1f      	cmp	r3, #31
 8015b12:	eba2 0203 	sub.w	r2, r2, r3
 8015b16:	f04f 0101 	mov.w	r1, #1
 8015b1a:	f300 809b 	bgt.w	8015c54 <_strtod_l+0x7fc>
 8015b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b24:	2300      	movs	r3, #0
 8015b26:	930a      	str	r3, [sp, #40]	; 0x28
 8015b28:	18be      	adds	r6, r7, r2
 8015b2a:	9b04      	ldr	r3, [sp, #16]
 8015b2c:	42b7      	cmp	r7, r6
 8015b2e:	4415      	add	r5, r2
 8015b30:	441d      	add	r5, r3
 8015b32:	463b      	mov	r3, r7
 8015b34:	bfa8      	it	ge
 8015b36:	4633      	movge	r3, r6
 8015b38:	42ab      	cmp	r3, r5
 8015b3a:	bfa8      	it	ge
 8015b3c:	462b      	movge	r3, r5
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	bfc2      	ittt	gt
 8015b42:	1af6      	subgt	r6, r6, r3
 8015b44:	1aed      	subgt	r5, r5, r3
 8015b46:	1aff      	subgt	r7, r7, r3
 8015b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b4a:	b1bb      	cbz	r3, 8015b7c <_strtod_l+0x724>
 8015b4c:	4641      	mov	r1, r8
 8015b4e:	461a      	mov	r2, r3
 8015b50:	4648      	mov	r0, r9
 8015b52:	f001 fe97 	bl	8017884 <__pow5mult>
 8015b56:	4680      	mov	r8, r0
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	f43f ae9b 	beq.w	8015894 <_strtod_l+0x43c>
 8015b5e:	4601      	mov	r1, r0
 8015b60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015b62:	4648      	mov	r0, r9
 8015b64:	f001 fdf8 	bl	8017758 <__multiply>
 8015b68:	900c      	str	r0, [sp, #48]	; 0x30
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	f43f ae92 	beq.w	8015894 <_strtod_l+0x43c>
 8015b70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b72:	4648      	mov	r0, r9
 8015b74:	f001 fd09 	bl	801758a <_Bfree>
 8015b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b7a:	931c      	str	r3, [sp, #112]	; 0x70
 8015b7c:	2e00      	cmp	r6, #0
 8015b7e:	dc7a      	bgt.n	8015c76 <_strtod_l+0x81e>
 8015b80:	9b06      	ldr	r3, [sp, #24]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	dd08      	ble.n	8015b98 <_strtod_l+0x740>
 8015b86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b88:	9905      	ldr	r1, [sp, #20]
 8015b8a:	4648      	mov	r0, r9
 8015b8c:	f001 fe7a 	bl	8017884 <__pow5mult>
 8015b90:	9005      	str	r0, [sp, #20]
 8015b92:	2800      	cmp	r0, #0
 8015b94:	f43f ae7e 	beq.w	8015894 <_strtod_l+0x43c>
 8015b98:	2d00      	cmp	r5, #0
 8015b9a:	dd08      	ble.n	8015bae <_strtod_l+0x756>
 8015b9c:	462a      	mov	r2, r5
 8015b9e:	9905      	ldr	r1, [sp, #20]
 8015ba0:	4648      	mov	r0, r9
 8015ba2:	f001 febd 	bl	8017920 <__lshift>
 8015ba6:	9005      	str	r0, [sp, #20]
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	f43f ae73 	beq.w	8015894 <_strtod_l+0x43c>
 8015bae:	2f00      	cmp	r7, #0
 8015bb0:	dd08      	ble.n	8015bc4 <_strtod_l+0x76c>
 8015bb2:	4641      	mov	r1, r8
 8015bb4:	463a      	mov	r2, r7
 8015bb6:	4648      	mov	r0, r9
 8015bb8:	f001 feb2 	bl	8017920 <__lshift>
 8015bbc:	4680      	mov	r8, r0
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	f43f ae68 	beq.w	8015894 <_strtod_l+0x43c>
 8015bc4:	9a05      	ldr	r2, [sp, #20]
 8015bc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015bc8:	4648      	mov	r0, r9
 8015bca:	f001 ff17 	bl	80179fc <__mdiff>
 8015bce:	4604      	mov	r4, r0
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	f43f ae5f 	beq.w	8015894 <_strtod_l+0x43c>
 8015bd6:	68c3      	ldr	r3, [r0, #12]
 8015bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8015bda:	2300      	movs	r3, #0
 8015bdc:	60c3      	str	r3, [r0, #12]
 8015bde:	4641      	mov	r1, r8
 8015be0:	f001 fef2 	bl	80179c8 <__mcmp>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	da55      	bge.n	8015c94 <_strtod_l+0x83c>
 8015be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bea:	b9e3      	cbnz	r3, 8015c26 <_strtod_l+0x7ce>
 8015bec:	f1ba 0f00 	cmp.w	sl, #0
 8015bf0:	d119      	bne.n	8015c26 <_strtod_l+0x7ce>
 8015bf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015bf6:	b9b3      	cbnz	r3, 8015c26 <_strtod_l+0x7ce>
 8015bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015bfc:	0d1b      	lsrs	r3, r3, #20
 8015bfe:	051b      	lsls	r3, r3, #20
 8015c00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015c04:	d90f      	bls.n	8015c26 <_strtod_l+0x7ce>
 8015c06:	6963      	ldr	r3, [r4, #20]
 8015c08:	b913      	cbnz	r3, 8015c10 <_strtod_l+0x7b8>
 8015c0a:	6923      	ldr	r3, [r4, #16]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	dd0a      	ble.n	8015c26 <_strtod_l+0x7ce>
 8015c10:	4621      	mov	r1, r4
 8015c12:	2201      	movs	r2, #1
 8015c14:	4648      	mov	r0, r9
 8015c16:	f001 fe83 	bl	8017920 <__lshift>
 8015c1a:	4641      	mov	r1, r8
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	f001 fed3 	bl	80179c8 <__mcmp>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	dc67      	bgt.n	8015cf6 <_strtod_l+0x89e>
 8015c26:	9b04      	ldr	r3, [sp, #16]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d171      	bne.n	8015d10 <_strtod_l+0x8b8>
 8015c2c:	e63d      	b.n	80158aa <_strtod_l+0x452>
 8015c2e:	f018 0f01 	tst.w	r8, #1
 8015c32:	d004      	beq.n	8015c3e <_strtod_l+0x7e6>
 8015c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c38:	f7ea fcf6 	bl	8000628 <__aeabi_dmul>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c42:	3508      	adds	r5, #8
 8015c44:	e6e5      	b.n	8015a12 <_strtod_l+0x5ba>
 8015c46:	f04f 32ff 	mov.w	r2, #4294967295
 8015c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c4e:	ea03 0a0a 	and.w	sl, r3, sl
 8015c52:	e6ff      	b.n	8015a54 <_strtod_l+0x5fc>
 8015c54:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015c58:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015c5c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015c60:	36e2      	adds	r6, #226	; 0xe2
 8015c62:	fa01 f306 	lsl.w	r3, r1, r6
 8015c66:	930a      	str	r3, [sp, #40]	; 0x28
 8015c68:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c6a:	e75d      	b.n	8015b28 <_strtod_l+0x6d0>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c70:	2301      	movs	r3, #1
 8015c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c74:	e758      	b.n	8015b28 <_strtod_l+0x6d0>
 8015c76:	4632      	mov	r2, r6
 8015c78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c7a:	4648      	mov	r0, r9
 8015c7c:	f001 fe50 	bl	8017920 <__lshift>
 8015c80:	901c      	str	r0, [sp, #112]	; 0x70
 8015c82:	2800      	cmp	r0, #0
 8015c84:	f47f af7c 	bne.w	8015b80 <_strtod_l+0x728>
 8015c88:	e604      	b.n	8015894 <_strtod_l+0x43c>
 8015c8a:	bf00      	nop
 8015c8c:	08018f98 	.word	0x08018f98
 8015c90:	fffffc02 	.word	0xfffffc02
 8015c94:	465d      	mov	r5, fp
 8015c96:	f040 8086 	bne.w	8015da6 <_strtod_l+0x94e>
 8015c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ca0:	b32a      	cbz	r2, 8015cee <_strtod_l+0x896>
 8015ca2:	4aaf      	ldr	r2, [pc, #700]	; (8015f60 <_strtod_l+0xb08>)
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	d153      	bne.n	8015d50 <_strtod_l+0x8f8>
 8015ca8:	9b04      	ldr	r3, [sp, #16]
 8015caa:	4650      	mov	r0, sl
 8015cac:	b1d3      	cbz	r3, 8015ce4 <_strtod_l+0x88c>
 8015cae:	4aad      	ldr	r2, [pc, #692]	; (8015f64 <_strtod_l+0xb0c>)
 8015cb0:	402a      	ands	r2, r5
 8015cb2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8015cba:	d816      	bhi.n	8015cea <_strtod_l+0x892>
 8015cbc:	0d12      	lsrs	r2, r2, #20
 8015cbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8015cc6:	4298      	cmp	r0, r3
 8015cc8:	d142      	bne.n	8015d50 <_strtod_l+0x8f8>
 8015cca:	4ba7      	ldr	r3, [pc, #668]	; (8015f68 <_strtod_l+0xb10>)
 8015ccc:	429d      	cmp	r5, r3
 8015cce:	d102      	bne.n	8015cd6 <_strtod_l+0x87e>
 8015cd0:	3001      	adds	r0, #1
 8015cd2:	f43f addf 	beq.w	8015894 <_strtod_l+0x43c>
 8015cd6:	4ba3      	ldr	r3, [pc, #652]	; (8015f64 <_strtod_l+0xb0c>)
 8015cd8:	402b      	ands	r3, r5
 8015cda:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015cde:	f04f 0a00 	mov.w	sl, #0
 8015ce2:	e7a0      	b.n	8015c26 <_strtod_l+0x7ce>
 8015ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce8:	e7ed      	b.n	8015cc6 <_strtod_l+0x86e>
 8015cea:	460b      	mov	r3, r1
 8015cec:	e7eb      	b.n	8015cc6 <_strtod_l+0x86e>
 8015cee:	bb7b      	cbnz	r3, 8015d50 <_strtod_l+0x8f8>
 8015cf0:	f1ba 0f00 	cmp.w	sl, #0
 8015cf4:	d12c      	bne.n	8015d50 <_strtod_l+0x8f8>
 8015cf6:	9904      	ldr	r1, [sp, #16]
 8015cf8:	4a9a      	ldr	r2, [pc, #616]	; (8015f64 <_strtod_l+0xb0c>)
 8015cfa:	465b      	mov	r3, fp
 8015cfc:	b1f1      	cbz	r1, 8015d3c <_strtod_l+0x8e4>
 8015cfe:	ea02 010b 	and.w	r1, r2, fp
 8015d02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015d06:	dc19      	bgt.n	8015d3c <_strtod_l+0x8e4>
 8015d08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015d0c:	f77f ae5b 	ble.w	80159c6 <_strtod_l+0x56e>
 8015d10:	4a96      	ldr	r2, [pc, #600]	; (8015f6c <_strtod_l+0xb14>)
 8015d12:	2300      	movs	r3, #0
 8015d14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015d18:	4650      	mov	r0, sl
 8015d1a:	4659      	mov	r1, fp
 8015d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015d20:	f7ea fc82 	bl	8000628 <__aeabi_dmul>
 8015d24:	4682      	mov	sl, r0
 8015d26:	468b      	mov	fp, r1
 8015d28:	2900      	cmp	r1, #0
 8015d2a:	f47f adbe 	bne.w	80158aa <_strtod_l+0x452>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f47f adbb 	bne.w	80158aa <_strtod_l+0x452>
 8015d34:	2322      	movs	r3, #34	; 0x22
 8015d36:	f8c9 3000 	str.w	r3, [r9]
 8015d3a:	e5b6      	b.n	80158aa <_strtod_l+0x452>
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015d42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015d46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015d4a:	f04f 3aff 	mov.w	sl, #4294967295
 8015d4e:	e76a      	b.n	8015c26 <_strtod_l+0x7ce>
 8015d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d52:	b193      	cbz	r3, 8015d7a <_strtod_l+0x922>
 8015d54:	422b      	tst	r3, r5
 8015d56:	f43f af66 	beq.w	8015c26 <_strtod_l+0x7ce>
 8015d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d5c:	9a04      	ldr	r2, [sp, #16]
 8015d5e:	4650      	mov	r0, sl
 8015d60:	4659      	mov	r1, fp
 8015d62:	b173      	cbz	r3, 8015d82 <_strtod_l+0x92a>
 8015d64:	f7ff fb5a 	bl	801541c <sulp>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d70:	f7ea faa4 	bl	80002bc <__adddf3>
 8015d74:	4682      	mov	sl, r0
 8015d76:	468b      	mov	fp, r1
 8015d78:	e755      	b.n	8015c26 <_strtod_l+0x7ce>
 8015d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d7c:	ea13 0f0a 	tst.w	r3, sl
 8015d80:	e7e9      	b.n	8015d56 <_strtod_l+0x8fe>
 8015d82:	f7ff fb4b 	bl	801541c <sulp>
 8015d86:	4602      	mov	r2, r0
 8015d88:	460b      	mov	r3, r1
 8015d8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d8e:	f7ea fa93 	bl	80002b8 <__aeabi_dsub>
 8015d92:	2200      	movs	r2, #0
 8015d94:	2300      	movs	r3, #0
 8015d96:	4682      	mov	sl, r0
 8015d98:	468b      	mov	fp, r1
 8015d9a:	f7ea fead 	bl	8000af8 <__aeabi_dcmpeq>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f47f ae11 	bne.w	80159c6 <_strtod_l+0x56e>
 8015da4:	e73f      	b.n	8015c26 <_strtod_l+0x7ce>
 8015da6:	4641      	mov	r1, r8
 8015da8:	4620      	mov	r0, r4
 8015daa:	f001 ff4a 	bl	8017c42 <__ratio>
 8015dae:	ec57 6b10 	vmov	r6, r7, d0
 8015db2:	2200      	movs	r2, #0
 8015db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015db8:	ee10 0a10 	vmov	r0, s0
 8015dbc:	4639      	mov	r1, r7
 8015dbe:	f7ea feaf 	bl	8000b20 <__aeabi_dcmple>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d077      	beq.n	8015eb6 <_strtod_l+0xa5e>
 8015dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d04a      	beq.n	8015e62 <_strtod_l+0xa0a>
 8015dcc:	4b68      	ldr	r3, [pc, #416]	; (8015f70 <_strtod_l+0xb18>)
 8015dce:	2200      	movs	r2, #0
 8015dd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015dd4:	4f66      	ldr	r7, [pc, #408]	; (8015f70 <_strtod_l+0xb18>)
 8015dd6:	2600      	movs	r6, #0
 8015dd8:	4b62      	ldr	r3, [pc, #392]	; (8015f64 <_strtod_l+0xb0c>)
 8015dda:	402b      	ands	r3, r5
 8015ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015de0:	4b64      	ldr	r3, [pc, #400]	; (8015f74 <_strtod_l+0xb1c>)
 8015de2:	429a      	cmp	r2, r3
 8015de4:	f040 80ce 	bne.w	8015f84 <_strtod_l+0xb2c>
 8015de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015dec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015df0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015df4:	ec4b ab10 	vmov	d0, sl, fp
 8015df8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015dfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015e00:	f001 fe5a 	bl	8017ab8 <__ulp>
 8015e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015e08:	ec53 2b10 	vmov	r2, r3, d0
 8015e0c:	f7ea fc0c 	bl	8000628 <__aeabi_dmul>
 8015e10:	4652      	mov	r2, sl
 8015e12:	465b      	mov	r3, fp
 8015e14:	f7ea fa52 	bl	80002bc <__adddf3>
 8015e18:	460b      	mov	r3, r1
 8015e1a:	4952      	ldr	r1, [pc, #328]	; (8015f64 <_strtod_l+0xb0c>)
 8015e1c:	4a56      	ldr	r2, [pc, #344]	; (8015f78 <_strtod_l+0xb20>)
 8015e1e:	4019      	ands	r1, r3
 8015e20:	4291      	cmp	r1, r2
 8015e22:	4682      	mov	sl, r0
 8015e24:	d95b      	bls.n	8015ede <_strtod_l+0xa86>
 8015e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	d103      	bne.n	8015e38 <_strtod_l+0x9e0>
 8015e30:	9b08      	ldr	r3, [sp, #32]
 8015e32:	3301      	adds	r3, #1
 8015e34:	f43f ad2e 	beq.w	8015894 <_strtod_l+0x43c>
 8015e38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015f68 <_strtod_l+0xb10>
 8015e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8015e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e42:	4648      	mov	r0, r9
 8015e44:	f001 fba1 	bl	801758a <_Bfree>
 8015e48:	9905      	ldr	r1, [sp, #20]
 8015e4a:	4648      	mov	r0, r9
 8015e4c:	f001 fb9d 	bl	801758a <_Bfree>
 8015e50:	4641      	mov	r1, r8
 8015e52:	4648      	mov	r0, r9
 8015e54:	f001 fb99 	bl	801758a <_Bfree>
 8015e58:	4621      	mov	r1, r4
 8015e5a:	4648      	mov	r0, r9
 8015e5c:	f001 fb95 	bl	801758a <_Bfree>
 8015e60:	e619      	b.n	8015a96 <_strtod_l+0x63e>
 8015e62:	f1ba 0f00 	cmp.w	sl, #0
 8015e66:	d11a      	bne.n	8015e9e <_strtod_l+0xa46>
 8015e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e6c:	b9eb      	cbnz	r3, 8015eaa <_strtod_l+0xa52>
 8015e6e:	2200      	movs	r2, #0
 8015e70:	4b3f      	ldr	r3, [pc, #252]	; (8015f70 <_strtod_l+0xb18>)
 8015e72:	4630      	mov	r0, r6
 8015e74:	4639      	mov	r1, r7
 8015e76:	f7ea fe49 	bl	8000b0c <__aeabi_dcmplt>
 8015e7a:	b9c8      	cbnz	r0, 8015eb0 <_strtod_l+0xa58>
 8015e7c:	4630      	mov	r0, r6
 8015e7e:	4639      	mov	r1, r7
 8015e80:	2200      	movs	r2, #0
 8015e82:	4b3e      	ldr	r3, [pc, #248]	; (8015f7c <_strtod_l+0xb24>)
 8015e84:	f7ea fbd0 	bl	8000628 <__aeabi_dmul>
 8015e88:	4606      	mov	r6, r0
 8015e8a:	460f      	mov	r7, r1
 8015e8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015e90:	9618      	str	r6, [sp, #96]	; 0x60
 8015e92:	9319      	str	r3, [sp, #100]	; 0x64
 8015e94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e9c:	e79c      	b.n	8015dd8 <_strtod_l+0x980>
 8015e9e:	f1ba 0f01 	cmp.w	sl, #1
 8015ea2:	d102      	bne.n	8015eaa <_strtod_l+0xa52>
 8015ea4:	2d00      	cmp	r5, #0
 8015ea6:	f43f ad8e 	beq.w	80159c6 <_strtod_l+0x56e>
 8015eaa:	2200      	movs	r2, #0
 8015eac:	4b34      	ldr	r3, [pc, #208]	; (8015f80 <_strtod_l+0xb28>)
 8015eae:	e78f      	b.n	8015dd0 <_strtod_l+0x978>
 8015eb0:	2600      	movs	r6, #0
 8015eb2:	4f32      	ldr	r7, [pc, #200]	; (8015f7c <_strtod_l+0xb24>)
 8015eb4:	e7ea      	b.n	8015e8c <_strtod_l+0xa34>
 8015eb6:	4b31      	ldr	r3, [pc, #196]	; (8015f7c <_strtod_l+0xb24>)
 8015eb8:	4630      	mov	r0, r6
 8015eba:	4639      	mov	r1, r7
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	f7ea fbb3 	bl	8000628 <__aeabi_dmul>
 8015ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ec4:	4606      	mov	r6, r0
 8015ec6:	460f      	mov	r7, r1
 8015ec8:	b933      	cbnz	r3, 8015ed8 <_strtod_l+0xa80>
 8015eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ece:	9010      	str	r0, [sp, #64]	; 0x40
 8015ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8015ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015ed6:	e7df      	b.n	8015e98 <_strtod_l+0xa40>
 8015ed8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015edc:	e7f9      	b.n	8015ed2 <_strtod_l+0xa7a>
 8015ede:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015ee2:	9b04      	ldr	r3, [sp, #16]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1ab      	bne.n	8015e40 <_strtod_l+0x9e8>
 8015ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015eec:	0d1b      	lsrs	r3, r3, #20
 8015eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ef0:	051b      	lsls	r3, r3, #20
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	465d      	mov	r5, fp
 8015ef6:	d1a3      	bne.n	8015e40 <_strtod_l+0x9e8>
 8015ef8:	4639      	mov	r1, r7
 8015efa:	4630      	mov	r0, r6
 8015efc:	f7ea fe44 	bl	8000b88 <__aeabi_d2iz>
 8015f00:	f7ea fb28 	bl	8000554 <__aeabi_i2d>
 8015f04:	460b      	mov	r3, r1
 8015f06:	4602      	mov	r2, r0
 8015f08:	4639      	mov	r1, r7
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f7ea f9d4 	bl	80002b8 <__aeabi_dsub>
 8015f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f12:	4606      	mov	r6, r0
 8015f14:	460f      	mov	r7, r1
 8015f16:	b933      	cbnz	r3, 8015f26 <_strtod_l+0xace>
 8015f18:	f1ba 0f00 	cmp.w	sl, #0
 8015f1c:	d103      	bne.n	8015f26 <_strtod_l+0xace>
 8015f1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015f22:	2d00      	cmp	r5, #0
 8015f24:	d06d      	beq.n	8016002 <_strtod_l+0xbaa>
 8015f26:	a30a      	add	r3, pc, #40	; (adr r3, 8015f50 <_strtod_l+0xaf8>)
 8015f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	4639      	mov	r1, r7
 8015f30:	f7ea fdec 	bl	8000b0c <__aeabi_dcmplt>
 8015f34:	2800      	cmp	r0, #0
 8015f36:	f47f acb8 	bne.w	80158aa <_strtod_l+0x452>
 8015f3a:	a307      	add	r3, pc, #28	; (adr r3, 8015f58 <_strtod_l+0xb00>)
 8015f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f40:	4630      	mov	r0, r6
 8015f42:	4639      	mov	r1, r7
 8015f44:	f7ea fe00 	bl	8000b48 <__aeabi_dcmpgt>
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	f43f af79 	beq.w	8015e40 <_strtod_l+0x9e8>
 8015f4e:	e4ac      	b.n	80158aa <_strtod_l+0x452>
 8015f50:	94a03595 	.word	0x94a03595
 8015f54:	3fdfffff 	.word	0x3fdfffff
 8015f58:	35afe535 	.word	0x35afe535
 8015f5c:	3fe00000 	.word	0x3fe00000
 8015f60:	000fffff 	.word	0x000fffff
 8015f64:	7ff00000 	.word	0x7ff00000
 8015f68:	7fefffff 	.word	0x7fefffff
 8015f6c:	39500000 	.word	0x39500000
 8015f70:	3ff00000 	.word	0x3ff00000
 8015f74:	7fe00000 	.word	0x7fe00000
 8015f78:	7c9fffff 	.word	0x7c9fffff
 8015f7c:	3fe00000 	.word	0x3fe00000
 8015f80:	bff00000 	.word	0xbff00000
 8015f84:	9b04      	ldr	r3, [sp, #16]
 8015f86:	b333      	cbz	r3, 8015fd6 <_strtod_l+0xb7e>
 8015f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015f8e:	d822      	bhi.n	8015fd6 <_strtod_l+0xb7e>
 8015f90:	a327      	add	r3, pc, #156	; (adr r3, 8016030 <_strtod_l+0xbd8>)
 8015f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f96:	4630      	mov	r0, r6
 8015f98:	4639      	mov	r1, r7
 8015f9a:	f7ea fdc1 	bl	8000b20 <__aeabi_dcmple>
 8015f9e:	b1a0      	cbz	r0, 8015fca <_strtod_l+0xb72>
 8015fa0:	4639      	mov	r1, r7
 8015fa2:	4630      	mov	r0, r6
 8015fa4:	f7ea fe18 	bl	8000bd8 <__aeabi_d2uiz>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	bf08      	it	eq
 8015fac:	2001      	moveq	r0, #1
 8015fae:	f7ea fac1 	bl	8000534 <__aeabi_ui2d>
 8015fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fb4:	4606      	mov	r6, r0
 8015fb6:	460f      	mov	r7, r1
 8015fb8:	bb03      	cbnz	r3, 8015ffc <_strtod_l+0xba4>
 8015fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fbe:	9012      	str	r0, [sp, #72]	; 0x48
 8015fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8015fc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015fd2:	1a9b      	subs	r3, r3, r2
 8015fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015fda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015fde:	f001 fd6b 	bl	8017ab8 <__ulp>
 8015fe2:	4650      	mov	r0, sl
 8015fe4:	ec53 2b10 	vmov	r2, r3, d0
 8015fe8:	4659      	mov	r1, fp
 8015fea:	f7ea fb1d 	bl	8000628 <__aeabi_dmul>
 8015fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ff2:	f7ea f963 	bl	80002bc <__adddf3>
 8015ff6:	4682      	mov	sl, r0
 8015ff8:	468b      	mov	fp, r1
 8015ffa:	e772      	b.n	8015ee2 <_strtod_l+0xa8a>
 8015ffc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016000:	e7df      	b.n	8015fc2 <_strtod_l+0xb6a>
 8016002:	a30d      	add	r3, pc, #52	; (adr r3, 8016038 <_strtod_l+0xbe0>)
 8016004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016008:	f7ea fd80 	bl	8000b0c <__aeabi_dcmplt>
 801600c:	e79c      	b.n	8015f48 <_strtod_l+0xaf0>
 801600e:	2300      	movs	r3, #0
 8016010:	930d      	str	r3, [sp, #52]	; 0x34
 8016012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016016:	6013      	str	r3, [r2, #0]
 8016018:	f7ff ba61 	b.w	80154de <_strtod_l+0x86>
 801601c:	2b65      	cmp	r3, #101	; 0x65
 801601e:	f04f 0200 	mov.w	r2, #0
 8016022:	f43f ab4e 	beq.w	80156c2 <_strtod_l+0x26a>
 8016026:	2101      	movs	r1, #1
 8016028:	4614      	mov	r4, r2
 801602a:	9104      	str	r1, [sp, #16]
 801602c:	f7ff bacb 	b.w	80155c6 <_strtod_l+0x16e>
 8016030:	ffc00000 	.word	0xffc00000
 8016034:	41dfffff 	.word	0x41dfffff
 8016038:	94a03595 	.word	0x94a03595
 801603c:	3fcfffff 	.word	0x3fcfffff

08016040 <_strtod_r>:
 8016040:	4b05      	ldr	r3, [pc, #20]	; (8016058 <_strtod_r+0x18>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	b410      	push	{r4}
 8016046:	6a1b      	ldr	r3, [r3, #32]
 8016048:	4c04      	ldr	r4, [pc, #16]	; (801605c <_strtod_r+0x1c>)
 801604a:	2b00      	cmp	r3, #0
 801604c:	bf08      	it	eq
 801604e:	4623      	moveq	r3, r4
 8016050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016054:	f7ff ba00 	b.w	8015458 <_strtod_l>
 8016058:	2000000c 	.word	0x2000000c
 801605c:	20000070 	.word	0x20000070

08016060 <_strtol_l.isra.0>:
 8016060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016064:	4680      	mov	r8, r0
 8016066:	4689      	mov	r9, r1
 8016068:	4692      	mov	sl, r2
 801606a:	461e      	mov	r6, r3
 801606c:	460f      	mov	r7, r1
 801606e:	463d      	mov	r5, r7
 8016070:	9808      	ldr	r0, [sp, #32]
 8016072:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016076:	f001 fa0d 	bl	8017494 <__locale_ctype_ptr_l>
 801607a:	4420      	add	r0, r4
 801607c:	7843      	ldrb	r3, [r0, #1]
 801607e:	f013 0308 	ands.w	r3, r3, #8
 8016082:	d132      	bne.n	80160ea <_strtol_l.isra.0+0x8a>
 8016084:	2c2d      	cmp	r4, #45	; 0x2d
 8016086:	d132      	bne.n	80160ee <_strtol_l.isra.0+0x8e>
 8016088:	787c      	ldrb	r4, [r7, #1]
 801608a:	1cbd      	adds	r5, r7, #2
 801608c:	2201      	movs	r2, #1
 801608e:	2e00      	cmp	r6, #0
 8016090:	d05d      	beq.n	801614e <_strtol_l.isra.0+0xee>
 8016092:	2e10      	cmp	r6, #16
 8016094:	d109      	bne.n	80160aa <_strtol_l.isra.0+0x4a>
 8016096:	2c30      	cmp	r4, #48	; 0x30
 8016098:	d107      	bne.n	80160aa <_strtol_l.isra.0+0x4a>
 801609a:	782b      	ldrb	r3, [r5, #0]
 801609c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80160a0:	2b58      	cmp	r3, #88	; 0x58
 80160a2:	d14f      	bne.n	8016144 <_strtol_l.isra.0+0xe4>
 80160a4:	786c      	ldrb	r4, [r5, #1]
 80160a6:	2610      	movs	r6, #16
 80160a8:	3502      	adds	r5, #2
 80160aa:	2a00      	cmp	r2, #0
 80160ac:	bf14      	ite	ne
 80160ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80160b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80160b6:	2700      	movs	r7, #0
 80160b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80160bc:	4638      	mov	r0, r7
 80160be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80160c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80160c6:	2b09      	cmp	r3, #9
 80160c8:	d817      	bhi.n	80160fa <_strtol_l.isra.0+0x9a>
 80160ca:	461c      	mov	r4, r3
 80160cc:	42a6      	cmp	r6, r4
 80160ce:	dd23      	ble.n	8016118 <_strtol_l.isra.0+0xb8>
 80160d0:	1c7b      	adds	r3, r7, #1
 80160d2:	d007      	beq.n	80160e4 <_strtol_l.isra.0+0x84>
 80160d4:	4584      	cmp	ip, r0
 80160d6:	d31c      	bcc.n	8016112 <_strtol_l.isra.0+0xb2>
 80160d8:	d101      	bne.n	80160de <_strtol_l.isra.0+0x7e>
 80160da:	45a6      	cmp	lr, r4
 80160dc:	db19      	blt.n	8016112 <_strtol_l.isra.0+0xb2>
 80160de:	fb00 4006 	mla	r0, r0, r6, r4
 80160e2:	2701      	movs	r7, #1
 80160e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160e8:	e7eb      	b.n	80160c2 <_strtol_l.isra.0+0x62>
 80160ea:	462f      	mov	r7, r5
 80160ec:	e7bf      	b.n	801606e <_strtol_l.isra.0+0xe>
 80160ee:	2c2b      	cmp	r4, #43	; 0x2b
 80160f0:	bf04      	itt	eq
 80160f2:	1cbd      	addeq	r5, r7, #2
 80160f4:	787c      	ldrbeq	r4, [r7, #1]
 80160f6:	461a      	mov	r2, r3
 80160f8:	e7c9      	b.n	801608e <_strtol_l.isra.0+0x2e>
 80160fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80160fe:	2b19      	cmp	r3, #25
 8016100:	d801      	bhi.n	8016106 <_strtol_l.isra.0+0xa6>
 8016102:	3c37      	subs	r4, #55	; 0x37
 8016104:	e7e2      	b.n	80160cc <_strtol_l.isra.0+0x6c>
 8016106:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801610a:	2b19      	cmp	r3, #25
 801610c:	d804      	bhi.n	8016118 <_strtol_l.isra.0+0xb8>
 801610e:	3c57      	subs	r4, #87	; 0x57
 8016110:	e7dc      	b.n	80160cc <_strtol_l.isra.0+0x6c>
 8016112:	f04f 37ff 	mov.w	r7, #4294967295
 8016116:	e7e5      	b.n	80160e4 <_strtol_l.isra.0+0x84>
 8016118:	1c7b      	adds	r3, r7, #1
 801611a:	d108      	bne.n	801612e <_strtol_l.isra.0+0xce>
 801611c:	2322      	movs	r3, #34	; 0x22
 801611e:	f8c8 3000 	str.w	r3, [r8]
 8016122:	4608      	mov	r0, r1
 8016124:	f1ba 0f00 	cmp.w	sl, #0
 8016128:	d107      	bne.n	801613a <_strtol_l.isra.0+0xda>
 801612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801612e:	b102      	cbz	r2, 8016132 <_strtol_l.isra.0+0xd2>
 8016130:	4240      	negs	r0, r0
 8016132:	f1ba 0f00 	cmp.w	sl, #0
 8016136:	d0f8      	beq.n	801612a <_strtol_l.isra.0+0xca>
 8016138:	b10f      	cbz	r7, 801613e <_strtol_l.isra.0+0xde>
 801613a:	f105 39ff 	add.w	r9, r5, #4294967295
 801613e:	f8ca 9000 	str.w	r9, [sl]
 8016142:	e7f2      	b.n	801612a <_strtol_l.isra.0+0xca>
 8016144:	2430      	movs	r4, #48	; 0x30
 8016146:	2e00      	cmp	r6, #0
 8016148:	d1af      	bne.n	80160aa <_strtol_l.isra.0+0x4a>
 801614a:	2608      	movs	r6, #8
 801614c:	e7ad      	b.n	80160aa <_strtol_l.isra.0+0x4a>
 801614e:	2c30      	cmp	r4, #48	; 0x30
 8016150:	d0a3      	beq.n	801609a <_strtol_l.isra.0+0x3a>
 8016152:	260a      	movs	r6, #10
 8016154:	e7a9      	b.n	80160aa <_strtol_l.isra.0+0x4a>
	...

08016158 <_strtol_r>:
 8016158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801615a:	4c06      	ldr	r4, [pc, #24]	; (8016174 <_strtol_r+0x1c>)
 801615c:	4d06      	ldr	r5, [pc, #24]	; (8016178 <_strtol_r+0x20>)
 801615e:	6824      	ldr	r4, [r4, #0]
 8016160:	6a24      	ldr	r4, [r4, #32]
 8016162:	2c00      	cmp	r4, #0
 8016164:	bf08      	it	eq
 8016166:	462c      	moveq	r4, r5
 8016168:	9400      	str	r4, [sp, #0]
 801616a:	f7ff ff79 	bl	8016060 <_strtol_l.isra.0>
 801616e:	b003      	add	sp, #12
 8016170:	bd30      	pop	{r4, r5, pc}
 8016172:	bf00      	nop
 8016174:	2000000c 	.word	0x2000000c
 8016178:	20000070 	.word	0x20000070

0801617c <_vsiprintf_r>:
 801617c:	b500      	push	{lr}
 801617e:	b09b      	sub	sp, #108	; 0x6c
 8016180:	9100      	str	r1, [sp, #0]
 8016182:	9104      	str	r1, [sp, #16]
 8016184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016188:	9105      	str	r1, [sp, #20]
 801618a:	9102      	str	r1, [sp, #8]
 801618c:	4905      	ldr	r1, [pc, #20]	; (80161a4 <_vsiprintf_r+0x28>)
 801618e:	9103      	str	r1, [sp, #12]
 8016190:	4669      	mov	r1, sp
 8016192:	f001 fed5 	bl	8017f40 <_svfiprintf_r>
 8016196:	9b00      	ldr	r3, [sp, #0]
 8016198:	2200      	movs	r2, #0
 801619a:	701a      	strb	r2, [r3, #0]
 801619c:	b01b      	add	sp, #108	; 0x6c
 801619e:	f85d fb04 	ldr.w	pc, [sp], #4
 80161a2:	bf00      	nop
 80161a4:	ffff0208 	.word	0xffff0208

080161a8 <vsiprintf>:
 80161a8:	4613      	mov	r3, r2
 80161aa:	460a      	mov	r2, r1
 80161ac:	4601      	mov	r1, r0
 80161ae:	4802      	ldr	r0, [pc, #8]	; (80161b8 <vsiprintf+0x10>)
 80161b0:	6800      	ldr	r0, [r0, #0]
 80161b2:	f7ff bfe3 	b.w	801617c <_vsiprintf_r>
 80161b6:	bf00      	nop
 80161b8:	2000000c 	.word	0x2000000c

080161bc <quorem>:
 80161bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c0:	6903      	ldr	r3, [r0, #16]
 80161c2:	690c      	ldr	r4, [r1, #16]
 80161c4:	42a3      	cmp	r3, r4
 80161c6:	4680      	mov	r8, r0
 80161c8:	f2c0 8082 	blt.w	80162d0 <quorem+0x114>
 80161cc:	3c01      	subs	r4, #1
 80161ce:	f101 0714 	add.w	r7, r1, #20
 80161d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80161d6:	f100 0614 	add.w	r6, r0, #20
 80161da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80161de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80161e2:	eb06 030c 	add.w	r3, r6, ip
 80161e6:	3501      	adds	r5, #1
 80161e8:	eb07 090c 	add.w	r9, r7, ip
 80161ec:	9301      	str	r3, [sp, #4]
 80161ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80161f2:	b395      	cbz	r5, 801625a <quorem+0x9e>
 80161f4:	f04f 0a00 	mov.w	sl, #0
 80161f8:	4638      	mov	r0, r7
 80161fa:	46b6      	mov	lr, r6
 80161fc:	46d3      	mov	fp, sl
 80161fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8016202:	b293      	uxth	r3, r2
 8016204:	fb05 a303 	mla	r3, r5, r3, sl
 8016208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801620c:	b29b      	uxth	r3, r3
 801620e:	ebab 0303 	sub.w	r3, fp, r3
 8016212:	0c12      	lsrs	r2, r2, #16
 8016214:	f8de b000 	ldr.w	fp, [lr]
 8016218:	fb05 a202 	mla	r2, r5, r2, sl
 801621c:	fa13 f38b 	uxtah	r3, r3, fp
 8016220:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016224:	fa1f fb82 	uxth.w	fp, r2
 8016228:	f8de 2000 	ldr.w	r2, [lr]
 801622c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016234:	b29b      	uxth	r3, r3
 8016236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801623a:	4581      	cmp	r9, r0
 801623c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016240:	f84e 3b04 	str.w	r3, [lr], #4
 8016244:	d2db      	bcs.n	80161fe <quorem+0x42>
 8016246:	f856 300c 	ldr.w	r3, [r6, ip]
 801624a:	b933      	cbnz	r3, 801625a <quorem+0x9e>
 801624c:	9b01      	ldr	r3, [sp, #4]
 801624e:	3b04      	subs	r3, #4
 8016250:	429e      	cmp	r6, r3
 8016252:	461a      	mov	r2, r3
 8016254:	d330      	bcc.n	80162b8 <quorem+0xfc>
 8016256:	f8c8 4010 	str.w	r4, [r8, #16]
 801625a:	4640      	mov	r0, r8
 801625c:	f001 fbb4 	bl	80179c8 <__mcmp>
 8016260:	2800      	cmp	r0, #0
 8016262:	db25      	blt.n	80162b0 <quorem+0xf4>
 8016264:	3501      	adds	r5, #1
 8016266:	4630      	mov	r0, r6
 8016268:	f04f 0c00 	mov.w	ip, #0
 801626c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016270:	f8d0 e000 	ldr.w	lr, [r0]
 8016274:	b293      	uxth	r3, r2
 8016276:	ebac 0303 	sub.w	r3, ip, r3
 801627a:	0c12      	lsrs	r2, r2, #16
 801627c:	fa13 f38e 	uxtah	r3, r3, lr
 8016280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016288:	b29b      	uxth	r3, r3
 801628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801628e:	45b9      	cmp	r9, r7
 8016290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016294:	f840 3b04 	str.w	r3, [r0], #4
 8016298:	d2e8      	bcs.n	801626c <quorem+0xb0>
 801629a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801629e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80162a2:	b92a      	cbnz	r2, 80162b0 <quorem+0xf4>
 80162a4:	3b04      	subs	r3, #4
 80162a6:	429e      	cmp	r6, r3
 80162a8:	461a      	mov	r2, r3
 80162aa:	d30b      	bcc.n	80162c4 <quorem+0x108>
 80162ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80162b0:	4628      	mov	r0, r5
 80162b2:	b003      	add	sp, #12
 80162b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b8:	6812      	ldr	r2, [r2, #0]
 80162ba:	3b04      	subs	r3, #4
 80162bc:	2a00      	cmp	r2, #0
 80162be:	d1ca      	bne.n	8016256 <quorem+0x9a>
 80162c0:	3c01      	subs	r4, #1
 80162c2:	e7c5      	b.n	8016250 <quorem+0x94>
 80162c4:	6812      	ldr	r2, [r2, #0]
 80162c6:	3b04      	subs	r3, #4
 80162c8:	2a00      	cmp	r2, #0
 80162ca:	d1ef      	bne.n	80162ac <quorem+0xf0>
 80162cc:	3c01      	subs	r4, #1
 80162ce:	e7ea      	b.n	80162a6 <quorem+0xea>
 80162d0:	2000      	movs	r0, #0
 80162d2:	e7ee      	b.n	80162b2 <quorem+0xf6>
 80162d4:	0000      	movs	r0, r0
	...

080162d8 <_dtoa_r>:
 80162d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162dc:	ec57 6b10 	vmov	r6, r7, d0
 80162e0:	b097      	sub	sp, #92	; 0x5c
 80162e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80162e4:	9106      	str	r1, [sp, #24]
 80162e6:	4604      	mov	r4, r0
 80162e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80162ea:	9312      	str	r3, [sp, #72]	; 0x48
 80162ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80162f0:	e9cd 6700 	strd	r6, r7, [sp]
 80162f4:	b93d      	cbnz	r5, 8016306 <_dtoa_r+0x2e>
 80162f6:	2010      	movs	r0, #16
 80162f8:	f001 f8ee 	bl	80174d8 <malloc>
 80162fc:	6260      	str	r0, [r4, #36]	; 0x24
 80162fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016302:	6005      	str	r5, [r0, #0]
 8016304:	60c5      	str	r5, [r0, #12]
 8016306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016308:	6819      	ldr	r1, [r3, #0]
 801630a:	b151      	cbz	r1, 8016322 <_dtoa_r+0x4a>
 801630c:	685a      	ldr	r2, [r3, #4]
 801630e:	604a      	str	r2, [r1, #4]
 8016310:	2301      	movs	r3, #1
 8016312:	4093      	lsls	r3, r2
 8016314:	608b      	str	r3, [r1, #8]
 8016316:	4620      	mov	r0, r4
 8016318:	f001 f937 	bl	801758a <_Bfree>
 801631c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801631e:	2200      	movs	r2, #0
 8016320:	601a      	str	r2, [r3, #0]
 8016322:	1e3b      	subs	r3, r7, #0
 8016324:	bfbb      	ittet	lt
 8016326:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801632a:	9301      	strlt	r3, [sp, #4]
 801632c:	2300      	movge	r3, #0
 801632e:	2201      	movlt	r2, #1
 8016330:	bfac      	ite	ge
 8016332:	f8c8 3000 	strge.w	r3, [r8]
 8016336:	f8c8 2000 	strlt.w	r2, [r8]
 801633a:	4baf      	ldr	r3, [pc, #700]	; (80165f8 <_dtoa_r+0x320>)
 801633c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016340:	ea33 0308 	bics.w	r3, r3, r8
 8016344:	d114      	bne.n	8016370 <_dtoa_r+0x98>
 8016346:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016348:	f242 730f 	movw	r3, #9999	; 0x270f
 801634c:	6013      	str	r3, [r2, #0]
 801634e:	9b00      	ldr	r3, [sp, #0]
 8016350:	b923      	cbnz	r3, 801635c <_dtoa_r+0x84>
 8016352:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016356:	2800      	cmp	r0, #0
 8016358:	f000 8542 	beq.w	8016de0 <_dtoa_r+0xb08>
 801635c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801635e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801660c <_dtoa_r+0x334>
 8016362:	2b00      	cmp	r3, #0
 8016364:	f000 8544 	beq.w	8016df0 <_dtoa_r+0xb18>
 8016368:	f10b 0303 	add.w	r3, fp, #3
 801636c:	f000 bd3e 	b.w	8016dec <_dtoa_r+0xb14>
 8016370:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016374:	2200      	movs	r2, #0
 8016376:	2300      	movs	r3, #0
 8016378:	4630      	mov	r0, r6
 801637a:	4639      	mov	r1, r7
 801637c:	f7ea fbbc 	bl	8000af8 <__aeabi_dcmpeq>
 8016380:	4681      	mov	r9, r0
 8016382:	b168      	cbz	r0, 80163a0 <_dtoa_r+0xc8>
 8016384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016386:	2301      	movs	r3, #1
 8016388:	6013      	str	r3, [r2, #0]
 801638a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801638c:	2b00      	cmp	r3, #0
 801638e:	f000 8524 	beq.w	8016dda <_dtoa_r+0xb02>
 8016392:	4b9a      	ldr	r3, [pc, #616]	; (80165fc <_dtoa_r+0x324>)
 8016394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016396:	f103 3bff 	add.w	fp, r3, #4294967295
 801639a:	6013      	str	r3, [r2, #0]
 801639c:	f000 bd28 	b.w	8016df0 <_dtoa_r+0xb18>
 80163a0:	aa14      	add	r2, sp, #80	; 0x50
 80163a2:	a915      	add	r1, sp, #84	; 0x54
 80163a4:	ec47 6b10 	vmov	d0, r6, r7
 80163a8:	4620      	mov	r0, r4
 80163aa:	f001 fbfb 	bl	8017ba4 <__d2b>
 80163ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80163b2:	9004      	str	r0, [sp, #16]
 80163b4:	2d00      	cmp	r5, #0
 80163b6:	d07c      	beq.n	80164b2 <_dtoa_r+0x1da>
 80163b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80163bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80163c0:	46b2      	mov	sl, r6
 80163c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80163c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80163ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80163ce:	2200      	movs	r2, #0
 80163d0:	4b8b      	ldr	r3, [pc, #556]	; (8016600 <_dtoa_r+0x328>)
 80163d2:	4650      	mov	r0, sl
 80163d4:	4659      	mov	r1, fp
 80163d6:	f7e9 ff6f 	bl	80002b8 <__aeabi_dsub>
 80163da:	a381      	add	r3, pc, #516	; (adr r3, 80165e0 <_dtoa_r+0x308>)
 80163dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e0:	f7ea f922 	bl	8000628 <__aeabi_dmul>
 80163e4:	a380      	add	r3, pc, #512	; (adr r3, 80165e8 <_dtoa_r+0x310>)
 80163e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ea:	f7e9 ff67 	bl	80002bc <__adddf3>
 80163ee:	4606      	mov	r6, r0
 80163f0:	4628      	mov	r0, r5
 80163f2:	460f      	mov	r7, r1
 80163f4:	f7ea f8ae 	bl	8000554 <__aeabi_i2d>
 80163f8:	a37d      	add	r3, pc, #500	; (adr r3, 80165f0 <_dtoa_r+0x318>)
 80163fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fe:	f7ea f913 	bl	8000628 <__aeabi_dmul>
 8016402:	4602      	mov	r2, r0
 8016404:	460b      	mov	r3, r1
 8016406:	4630      	mov	r0, r6
 8016408:	4639      	mov	r1, r7
 801640a:	f7e9 ff57 	bl	80002bc <__adddf3>
 801640e:	4606      	mov	r6, r0
 8016410:	460f      	mov	r7, r1
 8016412:	f7ea fbb9 	bl	8000b88 <__aeabi_d2iz>
 8016416:	2200      	movs	r2, #0
 8016418:	4682      	mov	sl, r0
 801641a:	2300      	movs	r3, #0
 801641c:	4630      	mov	r0, r6
 801641e:	4639      	mov	r1, r7
 8016420:	f7ea fb74 	bl	8000b0c <__aeabi_dcmplt>
 8016424:	b148      	cbz	r0, 801643a <_dtoa_r+0x162>
 8016426:	4650      	mov	r0, sl
 8016428:	f7ea f894 	bl	8000554 <__aeabi_i2d>
 801642c:	4632      	mov	r2, r6
 801642e:	463b      	mov	r3, r7
 8016430:	f7ea fb62 	bl	8000af8 <__aeabi_dcmpeq>
 8016434:	b908      	cbnz	r0, 801643a <_dtoa_r+0x162>
 8016436:	f10a 3aff 	add.w	sl, sl, #4294967295
 801643a:	f1ba 0f16 	cmp.w	sl, #22
 801643e:	d859      	bhi.n	80164f4 <_dtoa_r+0x21c>
 8016440:	4970      	ldr	r1, [pc, #448]	; (8016604 <_dtoa_r+0x32c>)
 8016442:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016446:	e9dd 2300 	ldrd	r2, r3, [sp]
 801644a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801644e:	f7ea fb7b 	bl	8000b48 <__aeabi_dcmpgt>
 8016452:	2800      	cmp	r0, #0
 8016454:	d050      	beq.n	80164f8 <_dtoa_r+0x220>
 8016456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801645a:	2300      	movs	r3, #0
 801645c:	930f      	str	r3, [sp, #60]	; 0x3c
 801645e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016460:	1b5d      	subs	r5, r3, r5
 8016462:	f1b5 0801 	subs.w	r8, r5, #1
 8016466:	bf49      	itett	mi
 8016468:	f1c5 0301 	rsbmi	r3, r5, #1
 801646c:	2300      	movpl	r3, #0
 801646e:	9305      	strmi	r3, [sp, #20]
 8016470:	f04f 0800 	movmi.w	r8, #0
 8016474:	bf58      	it	pl
 8016476:	9305      	strpl	r3, [sp, #20]
 8016478:	f1ba 0f00 	cmp.w	sl, #0
 801647c:	db3e      	blt.n	80164fc <_dtoa_r+0x224>
 801647e:	2300      	movs	r3, #0
 8016480:	44d0      	add	r8, sl
 8016482:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016486:	9307      	str	r3, [sp, #28]
 8016488:	9b06      	ldr	r3, [sp, #24]
 801648a:	2b09      	cmp	r3, #9
 801648c:	f200 8090 	bhi.w	80165b0 <_dtoa_r+0x2d8>
 8016490:	2b05      	cmp	r3, #5
 8016492:	bfc4      	itt	gt
 8016494:	3b04      	subgt	r3, #4
 8016496:	9306      	strgt	r3, [sp, #24]
 8016498:	9b06      	ldr	r3, [sp, #24]
 801649a:	f1a3 0302 	sub.w	r3, r3, #2
 801649e:	bfcc      	ite	gt
 80164a0:	2500      	movgt	r5, #0
 80164a2:	2501      	movle	r5, #1
 80164a4:	2b03      	cmp	r3, #3
 80164a6:	f200 808f 	bhi.w	80165c8 <_dtoa_r+0x2f0>
 80164aa:	e8df f003 	tbb	[pc, r3]
 80164ae:	7f7d      	.short	0x7f7d
 80164b0:	7131      	.short	0x7131
 80164b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80164b6:	441d      	add	r5, r3
 80164b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80164bc:	2820      	cmp	r0, #32
 80164be:	dd13      	ble.n	80164e8 <_dtoa_r+0x210>
 80164c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80164c4:	9b00      	ldr	r3, [sp, #0]
 80164c6:	fa08 f800 	lsl.w	r8, r8, r0
 80164ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80164ce:	fa23 f000 	lsr.w	r0, r3, r0
 80164d2:	ea48 0000 	orr.w	r0, r8, r0
 80164d6:	f7ea f82d 	bl	8000534 <__aeabi_ui2d>
 80164da:	2301      	movs	r3, #1
 80164dc:	4682      	mov	sl, r0
 80164de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80164e2:	3d01      	subs	r5, #1
 80164e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80164e6:	e772      	b.n	80163ce <_dtoa_r+0xf6>
 80164e8:	9b00      	ldr	r3, [sp, #0]
 80164ea:	f1c0 0020 	rsb	r0, r0, #32
 80164ee:	fa03 f000 	lsl.w	r0, r3, r0
 80164f2:	e7f0      	b.n	80164d6 <_dtoa_r+0x1fe>
 80164f4:	2301      	movs	r3, #1
 80164f6:	e7b1      	b.n	801645c <_dtoa_r+0x184>
 80164f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80164fa:	e7b0      	b.n	801645e <_dtoa_r+0x186>
 80164fc:	9b05      	ldr	r3, [sp, #20]
 80164fe:	eba3 030a 	sub.w	r3, r3, sl
 8016502:	9305      	str	r3, [sp, #20]
 8016504:	f1ca 0300 	rsb	r3, sl, #0
 8016508:	9307      	str	r3, [sp, #28]
 801650a:	2300      	movs	r3, #0
 801650c:	930e      	str	r3, [sp, #56]	; 0x38
 801650e:	e7bb      	b.n	8016488 <_dtoa_r+0x1b0>
 8016510:	2301      	movs	r3, #1
 8016512:	930a      	str	r3, [sp, #40]	; 0x28
 8016514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016516:	2b00      	cmp	r3, #0
 8016518:	dd59      	ble.n	80165ce <_dtoa_r+0x2f6>
 801651a:	9302      	str	r3, [sp, #8]
 801651c:	4699      	mov	r9, r3
 801651e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016520:	2200      	movs	r2, #0
 8016522:	6072      	str	r2, [r6, #4]
 8016524:	2204      	movs	r2, #4
 8016526:	f102 0014 	add.w	r0, r2, #20
 801652a:	4298      	cmp	r0, r3
 801652c:	6871      	ldr	r1, [r6, #4]
 801652e:	d953      	bls.n	80165d8 <_dtoa_r+0x300>
 8016530:	4620      	mov	r0, r4
 8016532:	f000 fff6 	bl	8017522 <_Balloc>
 8016536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016538:	6030      	str	r0, [r6, #0]
 801653a:	f1b9 0f0e 	cmp.w	r9, #14
 801653e:	f8d3 b000 	ldr.w	fp, [r3]
 8016542:	f200 80e6 	bhi.w	8016712 <_dtoa_r+0x43a>
 8016546:	2d00      	cmp	r5, #0
 8016548:	f000 80e3 	beq.w	8016712 <_dtoa_r+0x43a>
 801654c:	ed9d 7b00 	vldr	d7, [sp]
 8016550:	f1ba 0f00 	cmp.w	sl, #0
 8016554:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016558:	dd74      	ble.n	8016644 <_dtoa_r+0x36c>
 801655a:	4a2a      	ldr	r2, [pc, #168]	; (8016604 <_dtoa_r+0x32c>)
 801655c:	f00a 030f 	and.w	r3, sl, #15
 8016560:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016564:	ed93 7b00 	vldr	d7, [r3]
 8016568:	ea4f 162a 	mov.w	r6, sl, asr #4
 801656c:	06f0      	lsls	r0, r6, #27
 801656e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016572:	d565      	bpl.n	8016640 <_dtoa_r+0x368>
 8016574:	4b24      	ldr	r3, [pc, #144]	; (8016608 <_dtoa_r+0x330>)
 8016576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801657a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801657e:	f7ea f97d 	bl	800087c <__aeabi_ddiv>
 8016582:	e9cd 0100 	strd	r0, r1, [sp]
 8016586:	f006 060f 	and.w	r6, r6, #15
 801658a:	2503      	movs	r5, #3
 801658c:	4f1e      	ldr	r7, [pc, #120]	; (8016608 <_dtoa_r+0x330>)
 801658e:	e04c      	b.n	801662a <_dtoa_r+0x352>
 8016590:	2301      	movs	r3, #1
 8016592:	930a      	str	r3, [sp, #40]	; 0x28
 8016594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016596:	4453      	add	r3, sl
 8016598:	f103 0901 	add.w	r9, r3, #1
 801659c:	9302      	str	r3, [sp, #8]
 801659e:	464b      	mov	r3, r9
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	bfb8      	it	lt
 80165a4:	2301      	movlt	r3, #1
 80165a6:	e7ba      	b.n	801651e <_dtoa_r+0x246>
 80165a8:	2300      	movs	r3, #0
 80165aa:	e7b2      	b.n	8016512 <_dtoa_r+0x23a>
 80165ac:	2300      	movs	r3, #0
 80165ae:	e7f0      	b.n	8016592 <_dtoa_r+0x2ba>
 80165b0:	2501      	movs	r5, #1
 80165b2:	2300      	movs	r3, #0
 80165b4:	9306      	str	r3, [sp, #24]
 80165b6:	950a      	str	r5, [sp, #40]	; 0x28
 80165b8:	f04f 33ff 	mov.w	r3, #4294967295
 80165bc:	9302      	str	r3, [sp, #8]
 80165be:	4699      	mov	r9, r3
 80165c0:	2200      	movs	r2, #0
 80165c2:	2312      	movs	r3, #18
 80165c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80165c6:	e7aa      	b.n	801651e <_dtoa_r+0x246>
 80165c8:	2301      	movs	r3, #1
 80165ca:	930a      	str	r3, [sp, #40]	; 0x28
 80165cc:	e7f4      	b.n	80165b8 <_dtoa_r+0x2e0>
 80165ce:	2301      	movs	r3, #1
 80165d0:	9302      	str	r3, [sp, #8]
 80165d2:	4699      	mov	r9, r3
 80165d4:	461a      	mov	r2, r3
 80165d6:	e7f5      	b.n	80165c4 <_dtoa_r+0x2ec>
 80165d8:	3101      	adds	r1, #1
 80165da:	6071      	str	r1, [r6, #4]
 80165dc:	0052      	lsls	r2, r2, #1
 80165de:	e7a2      	b.n	8016526 <_dtoa_r+0x24e>
 80165e0:	636f4361 	.word	0x636f4361
 80165e4:	3fd287a7 	.word	0x3fd287a7
 80165e8:	8b60c8b3 	.word	0x8b60c8b3
 80165ec:	3fc68a28 	.word	0x3fc68a28
 80165f0:	509f79fb 	.word	0x509f79fb
 80165f4:	3fd34413 	.word	0x3fd34413
 80165f8:	7ff00000 	.word	0x7ff00000
 80165fc:	080190fc 	.word	0x080190fc
 8016600:	3ff80000 	.word	0x3ff80000
 8016604:	08019000 	.word	0x08019000
 8016608:	08018fd8 	.word	0x08018fd8
 801660c:	08018fc9 	.word	0x08018fc9
 8016610:	07f1      	lsls	r1, r6, #31
 8016612:	d508      	bpl.n	8016626 <_dtoa_r+0x34e>
 8016614:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016618:	e9d7 2300 	ldrd	r2, r3, [r7]
 801661c:	f7ea f804 	bl	8000628 <__aeabi_dmul>
 8016620:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016624:	3501      	adds	r5, #1
 8016626:	1076      	asrs	r6, r6, #1
 8016628:	3708      	adds	r7, #8
 801662a:	2e00      	cmp	r6, #0
 801662c:	d1f0      	bne.n	8016610 <_dtoa_r+0x338>
 801662e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016636:	f7ea f921 	bl	800087c <__aeabi_ddiv>
 801663a:	e9cd 0100 	strd	r0, r1, [sp]
 801663e:	e01a      	b.n	8016676 <_dtoa_r+0x39e>
 8016640:	2502      	movs	r5, #2
 8016642:	e7a3      	b.n	801658c <_dtoa_r+0x2b4>
 8016644:	f000 80a0 	beq.w	8016788 <_dtoa_r+0x4b0>
 8016648:	f1ca 0600 	rsb	r6, sl, #0
 801664c:	4b9f      	ldr	r3, [pc, #636]	; (80168cc <_dtoa_r+0x5f4>)
 801664e:	4fa0      	ldr	r7, [pc, #640]	; (80168d0 <_dtoa_r+0x5f8>)
 8016650:	f006 020f 	and.w	r2, r6, #15
 8016654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801665c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016660:	f7e9 ffe2 	bl	8000628 <__aeabi_dmul>
 8016664:	e9cd 0100 	strd	r0, r1, [sp]
 8016668:	1136      	asrs	r6, r6, #4
 801666a:	2300      	movs	r3, #0
 801666c:	2502      	movs	r5, #2
 801666e:	2e00      	cmp	r6, #0
 8016670:	d17f      	bne.n	8016772 <_dtoa_r+0x49a>
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1e1      	bne.n	801663a <_dtoa_r+0x362>
 8016676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016678:	2b00      	cmp	r3, #0
 801667a:	f000 8087 	beq.w	801678c <_dtoa_r+0x4b4>
 801667e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016682:	2200      	movs	r2, #0
 8016684:	4b93      	ldr	r3, [pc, #588]	; (80168d4 <_dtoa_r+0x5fc>)
 8016686:	4630      	mov	r0, r6
 8016688:	4639      	mov	r1, r7
 801668a:	f7ea fa3f 	bl	8000b0c <__aeabi_dcmplt>
 801668e:	2800      	cmp	r0, #0
 8016690:	d07c      	beq.n	801678c <_dtoa_r+0x4b4>
 8016692:	f1b9 0f00 	cmp.w	r9, #0
 8016696:	d079      	beq.n	801678c <_dtoa_r+0x4b4>
 8016698:	9b02      	ldr	r3, [sp, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	dd35      	ble.n	801670a <_dtoa_r+0x432>
 801669e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80166a2:	9308      	str	r3, [sp, #32]
 80166a4:	4639      	mov	r1, r7
 80166a6:	2200      	movs	r2, #0
 80166a8:	4b8b      	ldr	r3, [pc, #556]	; (80168d8 <_dtoa_r+0x600>)
 80166aa:	4630      	mov	r0, r6
 80166ac:	f7e9 ffbc 	bl	8000628 <__aeabi_dmul>
 80166b0:	e9cd 0100 	strd	r0, r1, [sp]
 80166b4:	9f02      	ldr	r7, [sp, #8]
 80166b6:	3501      	adds	r5, #1
 80166b8:	4628      	mov	r0, r5
 80166ba:	f7e9 ff4b 	bl	8000554 <__aeabi_i2d>
 80166be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166c2:	f7e9 ffb1 	bl	8000628 <__aeabi_dmul>
 80166c6:	2200      	movs	r2, #0
 80166c8:	4b84      	ldr	r3, [pc, #528]	; (80168dc <_dtoa_r+0x604>)
 80166ca:	f7e9 fdf7 	bl	80002bc <__adddf3>
 80166ce:	4605      	mov	r5, r0
 80166d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80166d4:	2f00      	cmp	r7, #0
 80166d6:	d15d      	bne.n	8016794 <_dtoa_r+0x4bc>
 80166d8:	2200      	movs	r2, #0
 80166da:	4b81      	ldr	r3, [pc, #516]	; (80168e0 <_dtoa_r+0x608>)
 80166dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166e0:	f7e9 fdea 	bl	80002b8 <__aeabi_dsub>
 80166e4:	462a      	mov	r2, r5
 80166e6:	4633      	mov	r3, r6
 80166e8:	e9cd 0100 	strd	r0, r1, [sp]
 80166ec:	f7ea fa2c 	bl	8000b48 <__aeabi_dcmpgt>
 80166f0:	2800      	cmp	r0, #0
 80166f2:	f040 8288 	bne.w	8016c06 <_dtoa_r+0x92e>
 80166f6:	462a      	mov	r2, r5
 80166f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80166fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016700:	f7ea fa04 	bl	8000b0c <__aeabi_dcmplt>
 8016704:	2800      	cmp	r0, #0
 8016706:	f040 827c 	bne.w	8016c02 <_dtoa_r+0x92a>
 801670a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801670e:	e9cd 2300 	strd	r2, r3, [sp]
 8016712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016714:	2b00      	cmp	r3, #0
 8016716:	f2c0 8150 	blt.w	80169ba <_dtoa_r+0x6e2>
 801671a:	f1ba 0f0e 	cmp.w	sl, #14
 801671e:	f300 814c 	bgt.w	80169ba <_dtoa_r+0x6e2>
 8016722:	4b6a      	ldr	r3, [pc, #424]	; (80168cc <_dtoa_r+0x5f4>)
 8016724:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016728:	ed93 7b00 	vldr	d7, [r3]
 801672c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801672e:	2b00      	cmp	r3, #0
 8016730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016734:	f280 80d8 	bge.w	80168e8 <_dtoa_r+0x610>
 8016738:	f1b9 0f00 	cmp.w	r9, #0
 801673c:	f300 80d4 	bgt.w	80168e8 <_dtoa_r+0x610>
 8016740:	f040 825e 	bne.w	8016c00 <_dtoa_r+0x928>
 8016744:	2200      	movs	r2, #0
 8016746:	4b66      	ldr	r3, [pc, #408]	; (80168e0 <_dtoa_r+0x608>)
 8016748:	ec51 0b17 	vmov	r0, r1, d7
 801674c:	f7e9 ff6c 	bl	8000628 <__aeabi_dmul>
 8016750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016754:	f7ea f9ee 	bl	8000b34 <__aeabi_dcmpge>
 8016758:	464f      	mov	r7, r9
 801675a:	464e      	mov	r6, r9
 801675c:	2800      	cmp	r0, #0
 801675e:	f040 8234 	bne.w	8016bca <_dtoa_r+0x8f2>
 8016762:	2331      	movs	r3, #49	; 0x31
 8016764:	f10b 0501 	add.w	r5, fp, #1
 8016768:	f88b 3000 	strb.w	r3, [fp]
 801676c:	f10a 0a01 	add.w	sl, sl, #1
 8016770:	e22f      	b.n	8016bd2 <_dtoa_r+0x8fa>
 8016772:	07f2      	lsls	r2, r6, #31
 8016774:	d505      	bpl.n	8016782 <_dtoa_r+0x4aa>
 8016776:	e9d7 2300 	ldrd	r2, r3, [r7]
 801677a:	f7e9 ff55 	bl	8000628 <__aeabi_dmul>
 801677e:	3501      	adds	r5, #1
 8016780:	2301      	movs	r3, #1
 8016782:	1076      	asrs	r6, r6, #1
 8016784:	3708      	adds	r7, #8
 8016786:	e772      	b.n	801666e <_dtoa_r+0x396>
 8016788:	2502      	movs	r5, #2
 801678a:	e774      	b.n	8016676 <_dtoa_r+0x39e>
 801678c:	f8cd a020 	str.w	sl, [sp, #32]
 8016790:	464f      	mov	r7, r9
 8016792:	e791      	b.n	80166b8 <_dtoa_r+0x3e0>
 8016794:	4b4d      	ldr	r3, [pc, #308]	; (80168cc <_dtoa_r+0x5f4>)
 8016796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801679a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d047      	beq.n	8016834 <_dtoa_r+0x55c>
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	2000      	movs	r0, #0
 80167aa:	494e      	ldr	r1, [pc, #312]	; (80168e4 <_dtoa_r+0x60c>)
 80167ac:	f7ea f866 	bl	800087c <__aeabi_ddiv>
 80167b0:	462a      	mov	r2, r5
 80167b2:	4633      	mov	r3, r6
 80167b4:	f7e9 fd80 	bl	80002b8 <__aeabi_dsub>
 80167b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80167bc:	465d      	mov	r5, fp
 80167be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167c2:	f7ea f9e1 	bl	8000b88 <__aeabi_d2iz>
 80167c6:	4606      	mov	r6, r0
 80167c8:	f7e9 fec4 	bl	8000554 <__aeabi_i2d>
 80167cc:	4602      	mov	r2, r0
 80167ce:	460b      	mov	r3, r1
 80167d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167d4:	f7e9 fd70 	bl	80002b8 <__aeabi_dsub>
 80167d8:	3630      	adds	r6, #48	; 0x30
 80167da:	f805 6b01 	strb.w	r6, [r5], #1
 80167de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167e2:	e9cd 0100 	strd	r0, r1, [sp]
 80167e6:	f7ea f991 	bl	8000b0c <__aeabi_dcmplt>
 80167ea:	2800      	cmp	r0, #0
 80167ec:	d163      	bne.n	80168b6 <_dtoa_r+0x5de>
 80167ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167f2:	2000      	movs	r0, #0
 80167f4:	4937      	ldr	r1, [pc, #220]	; (80168d4 <_dtoa_r+0x5fc>)
 80167f6:	f7e9 fd5f 	bl	80002b8 <__aeabi_dsub>
 80167fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167fe:	f7ea f985 	bl	8000b0c <__aeabi_dcmplt>
 8016802:	2800      	cmp	r0, #0
 8016804:	f040 80b7 	bne.w	8016976 <_dtoa_r+0x69e>
 8016808:	eba5 030b 	sub.w	r3, r5, fp
 801680c:	429f      	cmp	r7, r3
 801680e:	f77f af7c 	ble.w	801670a <_dtoa_r+0x432>
 8016812:	2200      	movs	r2, #0
 8016814:	4b30      	ldr	r3, [pc, #192]	; (80168d8 <_dtoa_r+0x600>)
 8016816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801681a:	f7e9 ff05 	bl	8000628 <__aeabi_dmul>
 801681e:	2200      	movs	r2, #0
 8016820:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016824:	4b2c      	ldr	r3, [pc, #176]	; (80168d8 <_dtoa_r+0x600>)
 8016826:	e9dd 0100 	ldrd	r0, r1, [sp]
 801682a:	f7e9 fefd 	bl	8000628 <__aeabi_dmul>
 801682e:	e9cd 0100 	strd	r0, r1, [sp]
 8016832:	e7c4      	b.n	80167be <_dtoa_r+0x4e6>
 8016834:	462a      	mov	r2, r5
 8016836:	4633      	mov	r3, r6
 8016838:	f7e9 fef6 	bl	8000628 <__aeabi_dmul>
 801683c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016840:	eb0b 0507 	add.w	r5, fp, r7
 8016844:	465e      	mov	r6, fp
 8016846:	e9dd 0100 	ldrd	r0, r1, [sp]
 801684a:	f7ea f99d 	bl	8000b88 <__aeabi_d2iz>
 801684e:	4607      	mov	r7, r0
 8016850:	f7e9 fe80 	bl	8000554 <__aeabi_i2d>
 8016854:	3730      	adds	r7, #48	; 0x30
 8016856:	4602      	mov	r2, r0
 8016858:	460b      	mov	r3, r1
 801685a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801685e:	f7e9 fd2b 	bl	80002b8 <__aeabi_dsub>
 8016862:	f806 7b01 	strb.w	r7, [r6], #1
 8016866:	42ae      	cmp	r6, r5
 8016868:	e9cd 0100 	strd	r0, r1, [sp]
 801686c:	f04f 0200 	mov.w	r2, #0
 8016870:	d126      	bne.n	80168c0 <_dtoa_r+0x5e8>
 8016872:	4b1c      	ldr	r3, [pc, #112]	; (80168e4 <_dtoa_r+0x60c>)
 8016874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016878:	f7e9 fd20 	bl	80002bc <__adddf3>
 801687c:	4602      	mov	r2, r0
 801687e:	460b      	mov	r3, r1
 8016880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016884:	f7ea f960 	bl	8000b48 <__aeabi_dcmpgt>
 8016888:	2800      	cmp	r0, #0
 801688a:	d174      	bne.n	8016976 <_dtoa_r+0x69e>
 801688c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016890:	2000      	movs	r0, #0
 8016892:	4914      	ldr	r1, [pc, #80]	; (80168e4 <_dtoa_r+0x60c>)
 8016894:	f7e9 fd10 	bl	80002b8 <__aeabi_dsub>
 8016898:	4602      	mov	r2, r0
 801689a:	460b      	mov	r3, r1
 801689c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168a0:	f7ea f934 	bl	8000b0c <__aeabi_dcmplt>
 80168a4:	2800      	cmp	r0, #0
 80168a6:	f43f af30 	beq.w	801670a <_dtoa_r+0x432>
 80168aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80168ae:	2b30      	cmp	r3, #48	; 0x30
 80168b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80168b4:	d002      	beq.n	80168bc <_dtoa_r+0x5e4>
 80168b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80168ba:	e04a      	b.n	8016952 <_dtoa_r+0x67a>
 80168bc:	4615      	mov	r5, r2
 80168be:	e7f4      	b.n	80168aa <_dtoa_r+0x5d2>
 80168c0:	4b05      	ldr	r3, [pc, #20]	; (80168d8 <_dtoa_r+0x600>)
 80168c2:	f7e9 feb1 	bl	8000628 <__aeabi_dmul>
 80168c6:	e9cd 0100 	strd	r0, r1, [sp]
 80168ca:	e7bc      	b.n	8016846 <_dtoa_r+0x56e>
 80168cc:	08019000 	.word	0x08019000
 80168d0:	08018fd8 	.word	0x08018fd8
 80168d4:	3ff00000 	.word	0x3ff00000
 80168d8:	40240000 	.word	0x40240000
 80168dc:	401c0000 	.word	0x401c0000
 80168e0:	40140000 	.word	0x40140000
 80168e4:	3fe00000 	.word	0x3fe00000
 80168e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80168ec:	465d      	mov	r5, fp
 80168ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168f2:	4630      	mov	r0, r6
 80168f4:	4639      	mov	r1, r7
 80168f6:	f7e9 ffc1 	bl	800087c <__aeabi_ddiv>
 80168fa:	f7ea f945 	bl	8000b88 <__aeabi_d2iz>
 80168fe:	4680      	mov	r8, r0
 8016900:	f7e9 fe28 	bl	8000554 <__aeabi_i2d>
 8016904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016908:	f7e9 fe8e 	bl	8000628 <__aeabi_dmul>
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	4630      	mov	r0, r6
 8016912:	4639      	mov	r1, r7
 8016914:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016918:	f7e9 fcce 	bl	80002b8 <__aeabi_dsub>
 801691c:	f805 6b01 	strb.w	r6, [r5], #1
 8016920:	eba5 060b 	sub.w	r6, r5, fp
 8016924:	45b1      	cmp	r9, r6
 8016926:	4602      	mov	r2, r0
 8016928:	460b      	mov	r3, r1
 801692a:	d139      	bne.n	80169a0 <_dtoa_r+0x6c8>
 801692c:	f7e9 fcc6 	bl	80002bc <__adddf3>
 8016930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016934:	4606      	mov	r6, r0
 8016936:	460f      	mov	r7, r1
 8016938:	f7ea f906 	bl	8000b48 <__aeabi_dcmpgt>
 801693c:	b9c8      	cbnz	r0, 8016972 <_dtoa_r+0x69a>
 801693e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7ea f8d7 	bl	8000af8 <__aeabi_dcmpeq>
 801694a:	b110      	cbz	r0, 8016952 <_dtoa_r+0x67a>
 801694c:	f018 0f01 	tst.w	r8, #1
 8016950:	d10f      	bne.n	8016972 <_dtoa_r+0x69a>
 8016952:	9904      	ldr	r1, [sp, #16]
 8016954:	4620      	mov	r0, r4
 8016956:	f000 fe18 	bl	801758a <_Bfree>
 801695a:	2300      	movs	r3, #0
 801695c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801695e:	702b      	strb	r3, [r5, #0]
 8016960:	f10a 0301 	add.w	r3, sl, #1
 8016964:	6013      	str	r3, [r2, #0]
 8016966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016968:	2b00      	cmp	r3, #0
 801696a:	f000 8241 	beq.w	8016df0 <_dtoa_r+0xb18>
 801696e:	601d      	str	r5, [r3, #0]
 8016970:	e23e      	b.n	8016df0 <_dtoa_r+0xb18>
 8016972:	f8cd a020 	str.w	sl, [sp, #32]
 8016976:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801697a:	2a39      	cmp	r2, #57	; 0x39
 801697c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016980:	d108      	bne.n	8016994 <_dtoa_r+0x6bc>
 8016982:	459b      	cmp	fp, r3
 8016984:	d10a      	bne.n	801699c <_dtoa_r+0x6c4>
 8016986:	9b08      	ldr	r3, [sp, #32]
 8016988:	3301      	adds	r3, #1
 801698a:	9308      	str	r3, [sp, #32]
 801698c:	2330      	movs	r3, #48	; 0x30
 801698e:	f88b 3000 	strb.w	r3, [fp]
 8016992:	465b      	mov	r3, fp
 8016994:	781a      	ldrb	r2, [r3, #0]
 8016996:	3201      	adds	r2, #1
 8016998:	701a      	strb	r2, [r3, #0]
 801699a:	e78c      	b.n	80168b6 <_dtoa_r+0x5de>
 801699c:	461d      	mov	r5, r3
 801699e:	e7ea      	b.n	8016976 <_dtoa_r+0x69e>
 80169a0:	2200      	movs	r2, #0
 80169a2:	4b9b      	ldr	r3, [pc, #620]	; (8016c10 <_dtoa_r+0x938>)
 80169a4:	f7e9 fe40 	bl	8000628 <__aeabi_dmul>
 80169a8:	2200      	movs	r2, #0
 80169aa:	2300      	movs	r3, #0
 80169ac:	4606      	mov	r6, r0
 80169ae:	460f      	mov	r7, r1
 80169b0:	f7ea f8a2 	bl	8000af8 <__aeabi_dcmpeq>
 80169b4:	2800      	cmp	r0, #0
 80169b6:	d09a      	beq.n	80168ee <_dtoa_r+0x616>
 80169b8:	e7cb      	b.n	8016952 <_dtoa_r+0x67a>
 80169ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169bc:	2a00      	cmp	r2, #0
 80169be:	f000 808b 	beq.w	8016ad8 <_dtoa_r+0x800>
 80169c2:	9a06      	ldr	r2, [sp, #24]
 80169c4:	2a01      	cmp	r2, #1
 80169c6:	dc6e      	bgt.n	8016aa6 <_dtoa_r+0x7ce>
 80169c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	d067      	beq.n	8016a9e <_dtoa_r+0x7c6>
 80169ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80169d2:	9f07      	ldr	r7, [sp, #28]
 80169d4:	9d05      	ldr	r5, [sp, #20]
 80169d6:	9a05      	ldr	r2, [sp, #20]
 80169d8:	2101      	movs	r1, #1
 80169da:	441a      	add	r2, r3
 80169dc:	4620      	mov	r0, r4
 80169de:	9205      	str	r2, [sp, #20]
 80169e0:	4498      	add	r8, r3
 80169e2:	f000 feb0 	bl	8017746 <__i2b>
 80169e6:	4606      	mov	r6, r0
 80169e8:	2d00      	cmp	r5, #0
 80169ea:	dd0c      	ble.n	8016a06 <_dtoa_r+0x72e>
 80169ec:	f1b8 0f00 	cmp.w	r8, #0
 80169f0:	dd09      	ble.n	8016a06 <_dtoa_r+0x72e>
 80169f2:	4545      	cmp	r5, r8
 80169f4:	9a05      	ldr	r2, [sp, #20]
 80169f6:	462b      	mov	r3, r5
 80169f8:	bfa8      	it	ge
 80169fa:	4643      	movge	r3, r8
 80169fc:	1ad2      	subs	r2, r2, r3
 80169fe:	9205      	str	r2, [sp, #20]
 8016a00:	1aed      	subs	r5, r5, r3
 8016a02:	eba8 0803 	sub.w	r8, r8, r3
 8016a06:	9b07      	ldr	r3, [sp, #28]
 8016a08:	b1eb      	cbz	r3, 8016a46 <_dtoa_r+0x76e>
 8016a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d067      	beq.n	8016ae0 <_dtoa_r+0x808>
 8016a10:	b18f      	cbz	r7, 8016a36 <_dtoa_r+0x75e>
 8016a12:	4631      	mov	r1, r6
 8016a14:	463a      	mov	r2, r7
 8016a16:	4620      	mov	r0, r4
 8016a18:	f000 ff34 	bl	8017884 <__pow5mult>
 8016a1c:	9a04      	ldr	r2, [sp, #16]
 8016a1e:	4601      	mov	r1, r0
 8016a20:	4606      	mov	r6, r0
 8016a22:	4620      	mov	r0, r4
 8016a24:	f000 fe98 	bl	8017758 <__multiply>
 8016a28:	9904      	ldr	r1, [sp, #16]
 8016a2a:	9008      	str	r0, [sp, #32]
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f000 fdac 	bl	801758a <_Bfree>
 8016a32:	9b08      	ldr	r3, [sp, #32]
 8016a34:	9304      	str	r3, [sp, #16]
 8016a36:	9b07      	ldr	r3, [sp, #28]
 8016a38:	1bda      	subs	r2, r3, r7
 8016a3a:	d004      	beq.n	8016a46 <_dtoa_r+0x76e>
 8016a3c:	9904      	ldr	r1, [sp, #16]
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f000 ff20 	bl	8017884 <__pow5mult>
 8016a44:	9004      	str	r0, [sp, #16]
 8016a46:	2101      	movs	r1, #1
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f000 fe7c 	bl	8017746 <__i2b>
 8016a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a50:	4607      	mov	r7, r0
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f000 81d0 	beq.w	8016df8 <_dtoa_r+0xb20>
 8016a58:	461a      	mov	r2, r3
 8016a5a:	4601      	mov	r1, r0
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f000 ff11 	bl	8017884 <__pow5mult>
 8016a62:	9b06      	ldr	r3, [sp, #24]
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	4607      	mov	r7, r0
 8016a68:	dc40      	bgt.n	8016aec <_dtoa_r+0x814>
 8016a6a:	9b00      	ldr	r3, [sp, #0]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d139      	bne.n	8016ae4 <_dtoa_r+0x80c>
 8016a70:	9b01      	ldr	r3, [sp, #4]
 8016a72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d136      	bne.n	8016ae8 <_dtoa_r+0x810>
 8016a7a:	9b01      	ldr	r3, [sp, #4]
 8016a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a80:	0d1b      	lsrs	r3, r3, #20
 8016a82:	051b      	lsls	r3, r3, #20
 8016a84:	b12b      	cbz	r3, 8016a92 <_dtoa_r+0x7ba>
 8016a86:	9b05      	ldr	r3, [sp, #20]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	9305      	str	r3, [sp, #20]
 8016a8c:	f108 0801 	add.w	r8, r8, #1
 8016a90:	2301      	movs	r3, #1
 8016a92:	9307      	str	r3, [sp, #28]
 8016a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d12a      	bne.n	8016af0 <_dtoa_r+0x818>
 8016a9a:	2001      	movs	r0, #1
 8016a9c:	e030      	b.n	8016b00 <_dtoa_r+0x828>
 8016a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016aa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016aa4:	e795      	b.n	80169d2 <_dtoa_r+0x6fa>
 8016aa6:	9b07      	ldr	r3, [sp, #28]
 8016aa8:	f109 37ff 	add.w	r7, r9, #4294967295
 8016aac:	42bb      	cmp	r3, r7
 8016aae:	bfbf      	itttt	lt
 8016ab0:	9b07      	ldrlt	r3, [sp, #28]
 8016ab2:	9707      	strlt	r7, [sp, #28]
 8016ab4:	1afa      	sublt	r2, r7, r3
 8016ab6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016ab8:	bfbb      	ittet	lt
 8016aba:	189b      	addlt	r3, r3, r2
 8016abc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016abe:	1bdf      	subge	r7, r3, r7
 8016ac0:	2700      	movlt	r7, #0
 8016ac2:	f1b9 0f00 	cmp.w	r9, #0
 8016ac6:	bfb5      	itete	lt
 8016ac8:	9b05      	ldrlt	r3, [sp, #20]
 8016aca:	9d05      	ldrge	r5, [sp, #20]
 8016acc:	eba3 0509 	sublt.w	r5, r3, r9
 8016ad0:	464b      	movge	r3, r9
 8016ad2:	bfb8      	it	lt
 8016ad4:	2300      	movlt	r3, #0
 8016ad6:	e77e      	b.n	80169d6 <_dtoa_r+0x6fe>
 8016ad8:	9f07      	ldr	r7, [sp, #28]
 8016ada:	9d05      	ldr	r5, [sp, #20]
 8016adc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016ade:	e783      	b.n	80169e8 <_dtoa_r+0x710>
 8016ae0:	9a07      	ldr	r2, [sp, #28]
 8016ae2:	e7ab      	b.n	8016a3c <_dtoa_r+0x764>
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	e7d4      	b.n	8016a92 <_dtoa_r+0x7ba>
 8016ae8:	9b00      	ldr	r3, [sp, #0]
 8016aea:	e7d2      	b.n	8016a92 <_dtoa_r+0x7ba>
 8016aec:	2300      	movs	r3, #0
 8016aee:	9307      	str	r3, [sp, #28]
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016af6:	6918      	ldr	r0, [r3, #16]
 8016af8:	f000 fdd7 	bl	80176aa <__hi0bits>
 8016afc:	f1c0 0020 	rsb	r0, r0, #32
 8016b00:	4440      	add	r0, r8
 8016b02:	f010 001f 	ands.w	r0, r0, #31
 8016b06:	d047      	beq.n	8016b98 <_dtoa_r+0x8c0>
 8016b08:	f1c0 0320 	rsb	r3, r0, #32
 8016b0c:	2b04      	cmp	r3, #4
 8016b0e:	dd3b      	ble.n	8016b88 <_dtoa_r+0x8b0>
 8016b10:	9b05      	ldr	r3, [sp, #20]
 8016b12:	f1c0 001c 	rsb	r0, r0, #28
 8016b16:	4403      	add	r3, r0
 8016b18:	9305      	str	r3, [sp, #20]
 8016b1a:	4405      	add	r5, r0
 8016b1c:	4480      	add	r8, r0
 8016b1e:	9b05      	ldr	r3, [sp, #20]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	dd05      	ble.n	8016b30 <_dtoa_r+0x858>
 8016b24:	461a      	mov	r2, r3
 8016b26:	9904      	ldr	r1, [sp, #16]
 8016b28:	4620      	mov	r0, r4
 8016b2a:	f000 fef9 	bl	8017920 <__lshift>
 8016b2e:	9004      	str	r0, [sp, #16]
 8016b30:	f1b8 0f00 	cmp.w	r8, #0
 8016b34:	dd05      	ble.n	8016b42 <_dtoa_r+0x86a>
 8016b36:	4639      	mov	r1, r7
 8016b38:	4642      	mov	r2, r8
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	f000 fef0 	bl	8017920 <__lshift>
 8016b40:	4607      	mov	r7, r0
 8016b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b44:	b353      	cbz	r3, 8016b9c <_dtoa_r+0x8c4>
 8016b46:	4639      	mov	r1, r7
 8016b48:	9804      	ldr	r0, [sp, #16]
 8016b4a:	f000 ff3d 	bl	80179c8 <__mcmp>
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	da24      	bge.n	8016b9c <_dtoa_r+0x8c4>
 8016b52:	2300      	movs	r3, #0
 8016b54:	220a      	movs	r2, #10
 8016b56:	9904      	ldr	r1, [sp, #16]
 8016b58:	4620      	mov	r0, r4
 8016b5a:	f000 fd2d 	bl	80175b8 <__multadd>
 8016b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b60:	9004      	str	r0, [sp, #16]
 8016b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	f000 814d 	beq.w	8016e06 <_dtoa_r+0xb2e>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	4631      	mov	r1, r6
 8016b70:	220a      	movs	r2, #10
 8016b72:	4620      	mov	r0, r4
 8016b74:	f000 fd20 	bl	80175b8 <__multadd>
 8016b78:	9b02      	ldr	r3, [sp, #8]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	4606      	mov	r6, r0
 8016b7e:	dc4f      	bgt.n	8016c20 <_dtoa_r+0x948>
 8016b80:	9b06      	ldr	r3, [sp, #24]
 8016b82:	2b02      	cmp	r3, #2
 8016b84:	dd4c      	ble.n	8016c20 <_dtoa_r+0x948>
 8016b86:	e011      	b.n	8016bac <_dtoa_r+0x8d4>
 8016b88:	d0c9      	beq.n	8016b1e <_dtoa_r+0x846>
 8016b8a:	9a05      	ldr	r2, [sp, #20]
 8016b8c:	331c      	adds	r3, #28
 8016b8e:	441a      	add	r2, r3
 8016b90:	9205      	str	r2, [sp, #20]
 8016b92:	441d      	add	r5, r3
 8016b94:	4498      	add	r8, r3
 8016b96:	e7c2      	b.n	8016b1e <_dtoa_r+0x846>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	e7f6      	b.n	8016b8a <_dtoa_r+0x8b2>
 8016b9c:	f1b9 0f00 	cmp.w	r9, #0
 8016ba0:	dc38      	bgt.n	8016c14 <_dtoa_r+0x93c>
 8016ba2:	9b06      	ldr	r3, [sp, #24]
 8016ba4:	2b02      	cmp	r3, #2
 8016ba6:	dd35      	ble.n	8016c14 <_dtoa_r+0x93c>
 8016ba8:	f8cd 9008 	str.w	r9, [sp, #8]
 8016bac:	9b02      	ldr	r3, [sp, #8]
 8016bae:	b963      	cbnz	r3, 8016bca <_dtoa_r+0x8f2>
 8016bb0:	4639      	mov	r1, r7
 8016bb2:	2205      	movs	r2, #5
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f000 fcff 	bl	80175b8 <__multadd>
 8016bba:	4601      	mov	r1, r0
 8016bbc:	4607      	mov	r7, r0
 8016bbe:	9804      	ldr	r0, [sp, #16]
 8016bc0:	f000 ff02 	bl	80179c8 <__mcmp>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	f73f adcc 	bgt.w	8016762 <_dtoa_r+0x48a>
 8016bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bcc:	465d      	mov	r5, fp
 8016bce:	ea6f 0a03 	mvn.w	sl, r3
 8016bd2:	f04f 0900 	mov.w	r9, #0
 8016bd6:	4639      	mov	r1, r7
 8016bd8:	4620      	mov	r0, r4
 8016bda:	f000 fcd6 	bl	801758a <_Bfree>
 8016bde:	2e00      	cmp	r6, #0
 8016be0:	f43f aeb7 	beq.w	8016952 <_dtoa_r+0x67a>
 8016be4:	f1b9 0f00 	cmp.w	r9, #0
 8016be8:	d005      	beq.n	8016bf6 <_dtoa_r+0x91e>
 8016bea:	45b1      	cmp	r9, r6
 8016bec:	d003      	beq.n	8016bf6 <_dtoa_r+0x91e>
 8016bee:	4649      	mov	r1, r9
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f000 fcca 	bl	801758a <_Bfree>
 8016bf6:	4631      	mov	r1, r6
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f000 fcc6 	bl	801758a <_Bfree>
 8016bfe:	e6a8      	b.n	8016952 <_dtoa_r+0x67a>
 8016c00:	2700      	movs	r7, #0
 8016c02:	463e      	mov	r6, r7
 8016c04:	e7e1      	b.n	8016bca <_dtoa_r+0x8f2>
 8016c06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016c0a:	463e      	mov	r6, r7
 8016c0c:	e5a9      	b.n	8016762 <_dtoa_r+0x48a>
 8016c0e:	bf00      	nop
 8016c10:	40240000 	.word	0x40240000
 8016c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c16:	f8cd 9008 	str.w	r9, [sp, #8]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f000 80fa 	beq.w	8016e14 <_dtoa_r+0xb3c>
 8016c20:	2d00      	cmp	r5, #0
 8016c22:	dd05      	ble.n	8016c30 <_dtoa_r+0x958>
 8016c24:	4631      	mov	r1, r6
 8016c26:	462a      	mov	r2, r5
 8016c28:	4620      	mov	r0, r4
 8016c2a:	f000 fe79 	bl	8017920 <__lshift>
 8016c2e:	4606      	mov	r6, r0
 8016c30:	9b07      	ldr	r3, [sp, #28]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d04c      	beq.n	8016cd0 <_dtoa_r+0x9f8>
 8016c36:	6871      	ldr	r1, [r6, #4]
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f000 fc72 	bl	8017522 <_Balloc>
 8016c3e:	6932      	ldr	r2, [r6, #16]
 8016c40:	3202      	adds	r2, #2
 8016c42:	4605      	mov	r5, r0
 8016c44:	0092      	lsls	r2, r2, #2
 8016c46:	f106 010c 	add.w	r1, r6, #12
 8016c4a:	300c      	adds	r0, #12
 8016c4c:	f000 fc5e 	bl	801750c <memcpy>
 8016c50:	2201      	movs	r2, #1
 8016c52:	4629      	mov	r1, r5
 8016c54:	4620      	mov	r0, r4
 8016c56:	f000 fe63 	bl	8017920 <__lshift>
 8016c5a:	9b00      	ldr	r3, [sp, #0]
 8016c5c:	f8cd b014 	str.w	fp, [sp, #20]
 8016c60:	f003 0301 	and.w	r3, r3, #1
 8016c64:	46b1      	mov	r9, r6
 8016c66:	9307      	str	r3, [sp, #28]
 8016c68:	4606      	mov	r6, r0
 8016c6a:	4639      	mov	r1, r7
 8016c6c:	9804      	ldr	r0, [sp, #16]
 8016c6e:	f7ff faa5 	bl	80161bc <quorem>
 8016c72:	4649      	mov	r1, r9
 8016c74:	4605      	mov	r5, r0
 8016c76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016c7a:	9804      	ldr	r0, [sp, #16]
 8016c7c:	f000 fea4 	bl	80179c8 <__mcmp>
 8016c80:	4632      	mov	r2, r6
 8016c82:	9000      	str	r0, [sp, #0]
 8016c84:	4639      	mov	r1, r7
 8016c86:	4620      	mov	r0, r4
 8016c88:	f000 feb8 	bl	80179fc <__mdiff>
 8016c8c:	68c3      	ldr	r3, [r0, #12]
 8016c8e:	4602      	mov	r2, r0
 8016c90:	bb03      	cbnz	r3, 8016cd4 <_dtoa_r+0x9fc>
 8016c92:	4601      	mov	r1, r0
 8016c94:	9008      	str	r0, [sp, #32]
 8016c96:	9804      	ldr	r0, [sp, #16]
 8016c98:	f000 fe96 	bl	80179c8 <__mcmp>
 8016c9c:	9a08      	ldr	r2, [sp, #32]
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	9308      	str	r3, [sp, #32]
 8016ca6:	f000 fc70 	bl	801758a <_Bfree>
 8016caa:	9b08      	ldr	r3, [sp, #32]
 8016cac:	b9a3      	cbnz	r3, 8016cd8 <_dtoa_r+0xa00>
 8016cae:	9a06      	ldr	r2, [sp, #24]
 8016cb0:	b992      	cbnz	r2, 8016cd8 <_dtoa_r+0xa00>
 8016cb2:	9a07      	ldr	r2, [sp, #28]
 8016cb4:	b982      	cbnz	r2, 8016cd8 <_dtoa_r+0xa00>
 8016cb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016cba:	d029      	beq.n	8016d10 <_dtoa_r+0xa38>
 8016cbc:	9b00      	ldr	r3, [sp, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	dd01      	ble.n	8016cc6 <_dtoa_r+0x9ee>
 8016cc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016cc6:	9b05      	ldr	r3, [sp, #20]
 8016cc8:	1c5d      	adds	r5, r3, #1
 8016cca:	f883 8000 	strb.w	r8, [r3]
 8016cce:	e782      	b.n	8016bd6 <_dtoa_r+0x8fe>
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	e7c2      	b.n	8016c5a <_dtoa_r+0x982>
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e7e3      	b.n	8016ca0 <_dtoa_r+0x9c8>
 8016cd8:	9a00      	ldr	r2, [sp, #0]
 8016cda:	2a00      	cmp	r2, #0
 8016cdc:	db04      	blt.n	8016ce8 <_dtoa_r+0xa10>
 8016cde:	d125      	bne.n	8016d2c <_dtoa_r+0xa54>
 8016ce0:	9a06      	ldr	r2, [sp, #24]
 8016ce2:	bb1a      	cbnz	r2, 8016d2c <_dtoa_r+0xa54>
 8016ce4:	9a07      	ldr	r2, [sp, #28]
 8016ce6:	bb0a      	cbnz	r2, 8016d2c <_dtoa_r+0xa54>
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	ddec      	ble.n	8016cc6 <_dtoa_r+0x9ee>
 8016cec:	2201      	movs	r2, #1
 8016cee:	9904      	ldr	r1, [sp, #16]
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f000 fe15 	bl	8017920 <__lshift>
 8016cf6:	4639      	mov	r1, r7
 8016cf8:	9004      	str	r0, [sp, #16]
 8016cfa:	f000 fe65 	bl	80179c8 <__mcmp>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	dc03      	bgt.n	8016d0a <_dtoa_r+0xa32>
 8016d02:	d1e0      	bne.n	8016cc6 <_dtoa_r+0x9ee>
 8016d04:	f018 0f01 	tst.w	r8, #1
 8016d08:	d0dd      	beq.n	8016cc6 <_dtoa_r+0x9ee>
 8016d0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016d0e:	d1d8      	bne.n	8016cc2 <_dtoa_r+0x9ea>
 8016d10:	9b05      	ldr	r3, [sp, #20]
 8016d12:	9a05      	ldr	r2, [sp, #20]
 8016d14:	1c5d      	adds	r5, r3, #1
 8016d16:	2339      	movs	r3, #57	; 0x39
 8016d18:	7013      	strb	r3, [r2, #0]
 8016d1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016d1e:	2b39      	cmp	r3, #57	; 0x39
 8016d20:	f105 32ff 	add.w	r2, r5, #4294967295
 8016d24:	d04f      	beq.n	8016dc6 <_dtoa_r+0xaee>
 8016d26:	3301      	adds	r3, #1
 8016d28:	7013      	strb	r3, [r2, #0]
 8016d2a:	e754      	b.n	8016bd6 <_dtoa_r+0x8fe>
 8016d2c:	9a05      	ldr	r2, [sp, #20]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	f102 0501 	add.w	r5, r2, #1
 8016d34:	dd06      	ble.n	8016d44 <_dtoa_r+0xa6c>
 8016d36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016d3a:	d0e9      	beq.n	8016d10 <_dtoa_r+0xa38>
 8016d3c:	f108 0801 	add.w	r8, r8, #1
 8016d40:	9b05      	ldr	r3, [sp, #20]
 8016d42:	e7c2      	b.n	8016cca <_dtoa_r+0x9f2>
 8016d44:	9a02      	ldr	r2, [sp, #8]
 8016d46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016d4a:	eba5 030b 	sub.w	r3, r5, fp
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d021      	beq.n	8016d96 <_dtoa_r+0xabe>
 8016d52:	2300      	movs	r3, #0
 8016d54:	220a      	movs	r2, #10
 8016d56:	9904      	ldr	r1, [sp, #16]
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f000 fc2d 	bl	80175b8 <__multadd>
 8016d5e:	45b1      	cmp	r9, r6
 8016d60:	9004      	str	r0, [sp, #16]
 8016d62:	f04f 0300 	mov.w	r3, #0
 8016d66:	f04f 020a 	mov.w	r2, #10
 8016d6a:	4649      	mov	r1, r9
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	d105      	bne.n	8016d7c <_dtoa_r+0xaa4>
 8016d70:	f000 fc22 	bl	80175b8 <__multadd>
 8016d74:	4681      	mov	r9, r0
 8016d76:	4606      	mov	r6, r0
 8016d78:	9505      	str	r5, [sp, #20]
 8016d7a:	e776      	b.n	8016c6a <_dtoa_r+0x992>
 8016d7c:	f000 fc1c 	bl	80175b8 <__multadd>
 8016d80:	4631      	mov	r1, r6
 8016d82:	4681      	mov	r9, r0
 8016d84:	2300      	movs	r3, #0
 8016d86:	220a      	movs	r2, #10
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f000 fc15 	bl	80175b8 <__multadd>
 8016d8e:	4606      	mov	r6, r0
 8016d90:	e7f2      	b.n	8016d78 <_dtoa_r+0xaa0>
 8016d92:	f04f 0900 	mov.w	r9, #0
 8016d96:	2201      	movs	r2, #1
 8016d98:	9904      	ldr	r1, [sp, #16]
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	f000 fdc0 	bl	8017920 <__lshift>
 8016da0:	4639      	mov	r1, r7
 8016da2:	9004      	str	r0, [sp, #16]
 8016da4:	f000 fe10 	bl	80179c8 <__mcmp>
 8016da8:	2800      	cmp	r0, #0
 8016daa:	dcb6      	bgt.n	8016d1a <_dtoa_r+0xa42>
 8016dac:	d102      	bne.n	8016db4 <_dtoa_r+0xadc>
 8016dae:	f018 0f01 	tst.w	r8, #1
 8016db2:	d1b2      	bne.n	8016d1a <_dtoa_r+0xa42>
 8016db4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016db8:	2b30      	cmp	r3, #48	; 0x30
 8016dba:	f105 32ff 	add.w	r2, r5, #4294967295
 8016dbe:	f47f af0a 	bne.w	8016bd6 <_dtoa_r+0x8fe>
 8016dc2:	4615      	mov	r5, r2
 8016dc4:	e7f6      	b.n	8016db4 <_dtoa_r+0xadc>
 8016dc6:	4593      	cmp	fp, r2
 8016dc8:	d105      	bne.n	8016dd6 <_dtoa_r+0xafe>
 8016dca:	2331      	movs	r3, #49	; 0x31
 8016dcc:	f10a 0a01 	add.w	sl, sl, #1
 8016dd0:	f88b 3000 	strb.w	r3, [fp]
 8016dd4:	e6ff      	b.n	8016bd6 <_dtoa_r+0x8fe>
 8016dd6:	4615      	mov	r5, r2
 8016dd8:	e79f      	b.n	8016d1a <_dtoa_r+0xa42>
 8016dda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016e40 <_dtoa_r+0xb68>
 8016dde:	e007      	b.n	8016df0 <_dtoa_r+0xb18>
 8016de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016de2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016e44 <_dtoa_r+0xb6c>
 8016de6:	b11b      	cbz	r3, 8016df0 <_dtoa_r+0xb18>
 8016de8:	f10b 0308 	add.w	r3, fp, #8
 8016dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dee:	6013      	str	r3, [r2, #0]
 8016df0:	4658      	mov	r0, fp
 8016df2:	b017      	add	sp, #92	; 0x5c
 8016df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df8:	9b06      	ldr	r3, [sp, #24]
 8016dfa:	2b01      	cmp	r3, #1
 8016dfc:	f77f ae35 	ble.w	8016a6a <_dtoa_r+0x792>
 8016e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e02:	9307      	str	r3, [sp, #28]
 8016e04:	e649      	b.n	8016a9a <_dtoa_r+0x7c2>
 8016e06:	9b02      	ldr	r3, [sp, #8]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	dc03      	bgt.n	8016e14 <_dtoa_r+0xb3c>
 8016e0c:	9b06      	ldr	r3, [sp, #24]
 8016e0e:	2b02      	cmp	r3, #2
 8016e10:	f73f aecc 	bgt.w	8016bac <_dtoa_r+0x8d4>
 8016e14:	465d      	mov	r5, fp
 8016e16:	4639      	mov	r1, r7
 8016e18:	9804      	ldr	r0, [sp, #16]
 8016e1a:	f7ff f9cf 	bl	80161bc <quorem>
 8016e1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016e22:	f805 8b01 	strb.w	r8, [r5], #1
 8016e26:	9a02      	ldr	r2, [sp, #8]
 8016e28:	eba5 030b 	sub.w	r3, r5, fp
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	ddb0      	ble.n	8016d92 <_dtoa_r+0xaba>
 8016e30:	2300      	movs	r3, #0
 8016e32:	220a      	movs	r2, #10
 8016e34:	9904      	ldr	r1, [sp, #16]
 8016e36:	4620      	mov	r0, r4
 8016e38:	f000 fbbe 	bl	80175b8 <__multadd>
 8016e3c:	9004      	str	r0, [sp, #16]
 8016e3e:	e7ea      	b.n	8016e16 <_dtoa_r+0xb3e>
 8016e40:	080190fb 	.word	0x080190fb
 8016e44:	08018fc0 	.word	0x08018fc0

08016e48 <rshift>:
 8016e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e4a:	6906      	ldr	r6, [r0, #16]
 8016e4c:	114b      	asrs	r3, r1, #5
 8016e4e:	429e      	cmp	r6, r3
 8016e50:	f100 0414 	add.w	r4, r0, #20
 8016e54:	dd30      	ble.n	8016eb8 <rshift+0x70>
 8016e56:	f011 011f 	ands.w	r1, r1, #31
 8016e5a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016e5e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016e62:	d108      	bne.n	8016e76 <rshift+0x2e>
 8016e64:	4621      	mov	r1, r4
 8016e66:	42b2      	cmp	r2, r6
 8016e68:	460b      	mov	r3, r1
 8016e6a:	d211      	bcs.n	8016e90 <rshift+0x48>
 8016e6c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016e70:	f841 3b04 	str.w	r3, [r1], #4
 8016e74:	e7f7      	b.n	8016e66 <rshift+0x1e>
 8016e76:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016e7a:	f1c1 0c20 	rsb	ip, r1, #32
 8016e7e:	40cd      	lsrs	r5, r1
 8016e80:	3204      	adds	r2, #4
 8016e82:	4623      	mov	r3, r4
 8016e84:	42b2      	cmp	r2, r6
 8016e86:	4617      	mov	r7, r2
 8016e88:	d30c      	bcc.n	8016ea4 <rshift+0x5c>
 8016e8a:	601d      	str	r5, [r3, #0]
 8016e8c:	b105      	cbz	r5, 8016e90 <rshift+0x48>
 8016e8e:	3304      	adds	r3, #4
 8016e90:	1b1a      	subs	r2, r3, r4
 8016e92:	42a3      	cmp	r3, r4
 8016e94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016e98:	bf08      	it	eq
 8016e9a:	2300      	moveq	r3, #0
 8016e9c:	6102      	str	r2, [r0, #16]
 8016e9e:	bf08      	it	eq
 8016ea0:	6143      	streq	r3, [r0, #20]
 8016ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ea4:	683f      	ldr	r7, [r7, #0]
 8016ea6:	fa07 f70c 	lsl.w	r7, r7, ip
 8016eaa:	433d      	orrs	r5, r7
 8016eac:	f843 5b04 	str.w	r5, [r3], #4
 8016eb0:	f852 5b04 	ldr.w	r5, [r2], #4
 8016eb4:	40cd      	lsrs	r5, r1
 8016eb6:	e7e5      	b.n	8016e84 <rshift+0x3c>
 8016eb8:	4623      	mov	r3, r4
 8016eba:	e7e9      	b.n	8016e90 <rshift+0x48>

08016ebc <__hexdig_fun>:
 8016ebc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016ec0:	2b09      	cmp	r3, #9
 8016ec2:	d802      	bhi.n	8016eca <__hexdig_fun+0xe>
 8016ec4:	3820      	subs	r0, #32
 8016ec6:	b2c0      	uxtb	r0, r0
 8016ec8:	4770      	bx	lr
 8016eca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016ece:	2b05      	cmp	r3, #5
 8016ed0:	d801      	bhi.n	8016ed6 <__hexdig_fun+0x1a>
 8016ed2:	3847      	subs	r0, #71	; 0x47
 8016ed4:	e7f7      	b.n	8016ec6 <__hexdig_fun+0xa>
 8016ed6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016eda:	2b05      	cmp	r3, #5
 8016edc:	d801      	bhi.n	8016ee2 <__hexdig_fun+0x26>
 8016ede:	3827      	subs	r0, #39	; 0x27
 8016ee0:	e7f1      	b.n	8016ec6 <__hexdig_fun+0xa>
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	4770      	bx	lr

08016ee6 <__gethex>:
 8016ee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eea:	b08b      	sub	sp, #44	; 0x2c
 8016eec:	468a      	mov	sl, r1
 8016eee:	9002      	str	r0, [sp, #8]
 8016ef0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016ef2:	9306      	str	r3, [sp, #24]
 8016ef4:	4690      	mov	r8, r2
 8016ef6:	f000 fadf 	bl	80174b8 <__localeconv_l>
 8016efa:	6803      	ldr	r3, [r0, #0]
 8016efc:	9303      	str	r3, [sp, #12]
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7e9 f97e 	bl	8000200 <strlen>
 8016f04:	9b03      	ldr	r3, [sp, #12]
 8016f06:	9001      	str	r0, [sp, #4]
 8016f08:	4403      	add	r3, r0
 8016f0a:	f04f 0b00 	mov.w	fp, #0
 8016f0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016f12:	9307      	str	r3, [sp, #28]
 8016f14:	f8da 3000 	ldr.w	r3, [sl]
 8016f18:	3302      	adds	r3, #2
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016f20:	2830      	cmp	r0, #48	; 0x30
 8016f22:	d06c      	beq.n	8016ffe <__gethex+0x118>
 8016f24:	f7ff ffca 	bl	8016ebc <__hexdig_fun>
 8016f28:	4604      	mov	r4, r0
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	d16a      	bne.n	8017004 <__gethex+0x11e>
 8016f2e:	9a01      	ldr	r2, [sp, #4]
 8016f30:	9903      	ldr	r1, [sp, #12]
 8016f32:	4638      	mov	r0, r7
 8016f34:	f001 fc40 	bl	80187b8 <strncmp>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	d166      	bne.n	801700a <__gethex+0x124>
 8016f3c:	9b01      	ldr	r3, [sp, #4]
 8016f3e:	5cf8      	ldrb	r0, [r7, r3]
 8016f40:	18fe      	adds	r6, r7, r3
 8016f42:	f7ff ffbb 	bl	8016ebc <__hexdig_fun>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d062      	beq.n	8017010 <__gethex+0x12a>
 8016f4a:	4633      	mov	r3, r6
 8016f4c:	7818      	ldrb	r0, [r3, #0]
 8016f4e:	2830      	cmp	r0, #48	; 0x30
 8016f50:	461f      	mov	r7, r3
 8016f52:	f103 0301 	add.w	r3, r3, #1
 8016f56:	d0f9      	beq.n	8016f4c <__gethex+0x66>
 8016f58:	f7ff ffb0 	bl	8016ebc <__hexdig_fun>
 8016f5c:	fab0 f580 	clz	r5, r0
 8016f60:	096d      	lsrs	r5, r5, #5
 8016f62:	4634      	mov	r4, r6
 8016f64:	f04f 0b01 	mov.w	fp, #1
 8016f68:	463a      	mov	r2, r7
 8016f6a:	4616      	mov	r6, r2
 8016f6c:	3201      	adds	r2, #1
 8016f6e:	7830      	ldrb	r0, [r6, #0]
 8016f70:	f7ff ffa4 	bl	8016ebc <__hexdig_fun>
 8016f74:	2800      	cmp	r0, #0
 8016f76:	d1f8      	bne.n	8016f6a <__gethex+0x84>
 8016f78:	9a01      	ldr	r2, [sp, #4]
 8016f7a:	9903      	ldr	r1, [sp, #12]
 8016f7c:	4630      	mov	r0, r6
 8016f7e:	f001 fc1b 	bl	80187b8 <strncmp>
 8016f82:	b950      	cbnz	r0, 8016f9a <__gethex+0xb4>
 8016f84:	b954      	cbnz	r4, 8016f9c <__gethex+0xb6>
 8016f86:	9b01      	ldr	r3, [sp, #4]
 8016f88:	18f4      	adds	r4, r6, r3
 8016f8a:	4622      	mov	r2, r4
 8016f8c:	4616      	mov	r6, r2
 8016f8e:	3201      	adds	r2, #1
 8016f90:	7830      	ldrb	r0, [r6, #0]
 8016f92:	f7ff ff93 	bl	8016ebc <__hexdig_fun>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	d1f8      	bne.n	8016f8c <__gethex+0xa6>
 8016f9a:	b10c      	cbz	r4, 8016fa0 <__gethex+0xba>
 8016f9c:	1ba4      	subs	r4, r4, r6
 8016f9e:	00a4      	lsls	r4, r4, #2
 8016fa0:	7833      	ldrb	r3, [r6, #0]
 8016fa2:	2b50      	cmp	r3, #80	; 0x50
 8016fa4:	d001      	beq.n	8016faa <__gethex+0xc4>
 8016fa6:	2b70      	cmp	r3, #112	; 0x70
 8016fa8:	d140      	bne.n	801702c <__gethex+0x146>
 8016faa:	7873      	ldrb	r3, [r6, #1]
 8016fac:	2b2b      	cmp	r3, #43	; 0x2b
 8016fae:	d031      	beq.n	8017014 <__gethex+0x12e>
 8016fb0:	2b2d      	cmp	r3, #45	; 0x2d
 8016fb2:	d033      	beq.n	801701c <__gethex+0x136>
 8016fb4:	1c71      	adds	r1, r6, #1
 8016fb6:	f04f 0900 	mov.w	r9, #0
 8016fba:	7808      	ldrb	r0, [r1, #0]
 8016fbc:	f7ff ff7e 	bl	8016ebc <__hexdig_fun>
 8016fc0:	1e43      	subs	r3, r0, #1
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	2b18      	cmp	r3, #24
 8016fc6:	d831      	bhi.n	801702c <__gethex+0x146>
 8016fc8:	f1a0 0210 	sub.w	r2, r0, #16
 8016fcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016fd0:	f7ff ff74 	bl	8016ebc <__hexdig_fun>
 8016fd4:	1e43      	subs	r3, r0, #1
 8016fd6:	b2db      	uxtb	r3, r3
 8016fd8:	2b18      	cmp	r3, #24
 8016fda:	d922      	bls.n	8017022 <__gethex+0x13c>
 8016fdc:	f1b9 0f00 	cmp.w	r9, #0
 8016fe0:	d000      	beq.n	8016fe4 <__gethex+0xfe>
 8016fe2:	4252      	negs	r2, r2
 8016fe4:	4414      	add	r4, r2
 8016fe6:	f8ca 1000 	str.w	r1, [sl]
 8016fea:	b30d      	cbz	r5, 8017030 <__gethex+0x14a>
 8016fec:	f1bb 0f00 	cmp.w	fp, #0
 8016ff0:	bf0c      	ite	eq
 8016ff2:	2706      	moveq	r7, #6
 8016ff4:	2700      	movne	r7, #0
 8016ff6:	4638      	mov	r0, r7
 8016ff8:	b00b      	add	sp, #44	; 0x2c
 8016ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ffe:	f10b 0b01 	add.w	fp, fp, #1
 8017002:	e78a      	b.n	8016f1a <__gethex+0x34>
 8017004:	2500      	movs	r5, #0
 8017006:	462c      	mov	r4, r5
 8017008:	e7ae      	b.n	8016f68 <__gethex+0x82>
 801700a:	463e      	mov	r6, r7
 801700c:	2501      	movs	r5, #1
 801700e:	e7c7      	b.n	8016fa0 <__gethex+0xba>
 8017010:	4604      	mov	r4, r0
 8017012:	e7fb      	b.n	801700c <__gethex+0x126>
 8017014:	f04f 0900 	mov.w	r9, #0
 8017018:	1cb1      	adds	r1, r6, #2
 801701a:	e7ce      	b.n	8016fba <__gethex+0xd4>
 801701c:	f04f 0901 	mov.w	r9, #1
 8017020:	e7fa      	b.n	8017018 <__gethex+0x132>
 8017022:	230a      	movs	r3, #10
 8017024:	fb03 0202 	mla	r2, r3, r2, r0
 8017028:	3a10      	subs	r2, #16
 801702a:	e7cf      	b.n	8016fcc <__gethex+0xe6>
 801702c:	4631      	mov	r1, r6
 801702e:	e7da      	b.n	8016fe6 <__gethex+0x100>
 8017030:	1bf3      	subs	r3, r6, r7
 8017032:	3b01      	subs	r3, #1
 8017034:	4629      	mov	r1, r5
 8017036:	2b07      	cmp	r3, #7
 8017038:	dc49      	bgt.n	80170ce <__gethex+0x1e8>
 801703a:	9802      	ldr	r0, [sp, #8]
 801703c:	f000 fa71 	bl	8017522 <_Balloc>
 8017040:	9b01      	ldr	r3, [sp, #4]
 8017042:	f100 0914 	add.w	r9, r0, #20
 8017046:	f04f 0b00 	mov.w	fp, #0
 801704a:	f1c3 0301 	rsb	r3, r3, #1
 801704e:	4605      	mov	r5, r0
 8017050:	f8cd 9010 	str.w	r9, [sp, #16]
 8017054:	46da      	mov	sl, fp
 8017056:	9308      	str	r3, [sp, #32]
 8017058:	42b7      	cmp	r7, r6
 801705a:	d33b      	bcc.n	80170d4 <__gethex+0x1ee>
 801705c:	9804      	ldr	r0, [sp, #16]
 801705e:	f840 ab04 	str.w	sl, [r0], #4
 8017062:	eba0 0009 	sub.w	r0, r0, r9
 8017066:	1080      	asrs	r0, r0, #2
 8017068:	6128      	str	r0, [r5, #16]
 801706a:	0147      	lsls	r7, r0, #5
 801706c:	4650      	mov	r0, sl
 801706e:	f000 fb1c 	bl	80176aa <__hi0bits>
 8017072:	f8d8 6000 	ldr.w	r6, [r8]
 8017076:	1a3f      	subs	r7, r7, r0
 8017078:	42b7      	cmp	r7, r6
 801707a:	dd64      	ble.n	8017146 <__gethex+0x260>
 801707c:	1bbf      	subs	r7, r7, r6
 801707e:	4639      	mov	r1, r7
 8017080:	4628      	mov	r0, r5
 8017082:	f000 fe2b 	bl	8017cdc <__any_on>
 8017086:	4682      	mov	sl, r0
 8017088:	b178      	cbz	r0, 80170aa <__gethex+0x1c4>
 801708a:	1e7b      	subs	r3, r7, #1
 801708c:	1159      	asrs	r1, r3, #5
 801708e:	f003 021f 	and.w	r2, r3, #31
 8017092:	f04f 0a01 	mov.w	sl, #1
 8017096:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801709a:	fa0a f202 	lsl.w	r2, sl, r2
 801709e:	420a      	tst	r2, r1
 80170a0:	d003      	beq.n	80170aa <__gethex+0x1c4>
 80170a2:	4553      	cmp	r3, sl
 80170a4:	dc46      	bgt.n	8017134 <__gethex+0x24e>
 80170a6:	f04f 0a02 	mov.w	sl, #2
 80170aa:	4639      	mov	r1, r7
 80170ac:	4628      	mov	r0, r5
 80170ae:	f7ff fecb 	bl	8016e48 <rshift>
 80170b2:	443c      	add	r4, r7
 80170b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170b8:	42a3      	cmp	r3, r4
 80170ba:	da52      	bge.n	8017162 <__gethex+0x27c>
 80170bc:	4629      	mov	r1, r5
 80170be:	9802      	ldr	r0, [sp, #8]
 80170c0:	f000 fa63 	bl	801758a <_Bfree>
 80170c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170c6:	2300      	movs	r3, #0
 80170c8:	6013      	str	r3, [r2, #0]
 80170ca:	27a3      	movs	r7, #163	; 0xa3
 80170cc:	e793      	b.n	8016ff6 <__gethex+0x110>
 80170ce:	3101      	adds	r1, #1
 80170d0:	105b      	asrs	r3, r3, #1
 80170d2:	e7b0      	b.n	8017036 <__gethex+0x150>
 80170d4:	1e73      	subs	r3, r6, #1
 80170d6:	9305      	str	r3, [sp, #20]
 80170d8:	9a07      	ldr	r2, [sp, #28]
 80170da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80170de:	4293      	cmp	r3, r2
 80170e0:	d018      	beq.n	8017114 <__gethex+0x22e>
 80170e2:	f1bb 0f20 	cmp.w	fp, #32
 80170e6:	d107      	bne.n	80170f8 <__gethex+0x212>
 80170e8:	9b04      	ldr	r3, [sp, #16]
 80170ea:	f8c3 a000 	str.w	sl, [r3]
 80170ee:	3304      	adds	r3, #4
 80170f0:	f04f 0a00 	mov.w	sl, #0
 80170f4:	9304      	str	r3, [sp, #16]
 80170f6:	46d3      	mov	fp, sl
 80170f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80170fc:	f7ff fede 	bl	8016ebc <__hexdig_fun>
 8017100:	f000 000f 	and.w	r0, r0, #15
 8017104:	fa00 f00b 	lsl.w	r0, r0, fp
 8017108:	ea4a 0a00 	orr.w	sl, sl, r0
 801710c:	f10b 0b04 	add.w	fp, fp, #4
 8017110:	9b05      	ldr	r3, [sp, #20]
 8017112:	e00d      	b.n	8017130 <__gethex+0x24a>
 8017114:	9b05      	ldr	r3, [sp, #20]
 8017116:	9a08      	ldr	r2, [sp, #32]
 8017118:	4413      	add	r3, r2
 801711a:	42bb      	cmp	r3, r7
 801711c:	d3e1      	bcc.n	80170e2 <__gethex+0x1fc>
 801711e:	4618      	mov	r0, r3
 8017120:	9a01      	ldr	r2, [sp, #4]
 8017122:	9903      	ldr	r1, [sp, #12]
 8017124:	9309      	str	r3, [sp, #36]	; 0x24
 8017126:	f001 fb47 	bl	80187b8 <strncmp>
 801712a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801712c:	2800      	cmp	r0, #0
 801712e:	d1d8      	bne.n	80170e2 <__gethex+0x1fc>
 8017130:	461e      	mov	r6, r3
 8017132:	e791      	b.n	8017058 <__gethex+0x172>
 8017134:	1eb9      	subs	r1, r7, #2
 8017136:	4628      	mov	r0, r5
 8017138:	f000 fdd0 	bl	8017cdc <__any_on>
 801713c:	2800      	cmp	r0, #0
 801713e:	d0b2      	beq.n	80170a6 <__gethex+0x1c0>
 8017140:	f04f 0a03 	mov.w	sl, #3
 8017144:	e7b1      	b.n	80170aa <__gethex+0x1c4>
 8017146:	da09      	bge.n	801715c <__gethex+0x276>
 8017148:	1bf7      	subs	r7, r6, r7
 801714a:	4629      	mov	r1, r5
 801714c:	463a      	mov	r2, r7
 801714e:	9802      	ldr	r0, [sp, #8]
 8017150:	f000 fbe6 	bl	8017920 <__lshift>
 8017154:	1be4      	subs	r4, r4, r7
 8017156:	4605      	mov	r5, r0
 8017158:	f100 0914 	add.w	r9, r0, #20
 801715c:	f04f 0a00 	mov.w	sl, #0
 8017160:	e7a8      	b.n	80170b4 <__gethex+0x1ce>
 8017162:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017166:	42a0      	cmp	r0, r4
 8017168:	dd6a      	ble.n	8017240 <__gethex+0x35a>
 801716a:	1b04      	subs	r4, r0, r4
 801716c:	42a6      	cmp	r6, r4
 801716e:	dc2e      	bgt.n	80171ce <__gethex+0x2e8>
 8017170:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017174:	2b02      	cmp	r3, #2
 8017176:	d022      	beq.n	80171be <__gethex+0x2d8>
 8017178:	2b03      	cmp	r3, #3
 801717a:	d024      	beq.n	80171c6 <__gethex+0x2e0>
 801717c:	2b01      	cmp	r3, #1
 801717e:	d115      	bne.n	80171ac <__gethex+0x2c6>
 8017180:	42a6      	cmp	r6, r4
 8017182:	d113      	bne.n	80171ac <__gethex+0x2c6>
 8017184:	2e01      	cmp	r6, #1
 8017186:	dc0b      	bgt.n	80171a0 <__gethex+0x2ba>
 8017188:	9a06      	ldr	r2, [sp, #24]
 801718a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801718e:	6013      	str	r3, [r2, #0]
 8017190:	2301      	movs	r3, #1
 8017192:	612b      	str	r3, [r5, #16]
 8017194:	f8c9 3000 	str.w	r3, [r9]
 8017198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801719a:	2762      	movs	r7, #98	; 0x62
 801719c:	601d      	str	r5, [r3, #0]
 801719e:	e72a      	b.n	8016ff6 <__gethex+0x110>
 80171a0:	1e71      	subs	r1, r6, #1
 80171a2:	4628      	mov	r0, r5
 80171a4:	f000 fd9a 	bl	8017cdc <__any_on>
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d1ed      	bne.n	8017188 <__gethex+0x2a2>
 80171ac:	4629      	mov	r1, r5
 80171ae:	9802      	ldr	r0, [sp, #8]
 80171b0:	f000 f9eb 	bl	801758a <_Bfree>
 80171b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171b6:	2300      	movs	r3, #0
 80171b8:	6013      	str	r3, [r2, #0]
 80171ba:	2750      	movs	r7, #80	; 0x50
 80171bc:	e71b      	b.n	8016ff6 <__gethex+0x110>
 80171be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d0e1      	beq.n	8017188 <__gethex+0x2a2>
 80171c4:	e7f2      	b.n	80171ac <__gethex+0x2c6>
 80171c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d1dd      	bne.n	8017188 <__gethex+0x2a2>
 80171cc:	e7ee      	b.n	80171ac <__gethex+0x2c6>
 80171ce:	1e67      	subs	r7, r4, #1
 80171d0:	f1ba 0f00 	cmp.w	sl, #0
 80171d4:	d131      	bne.n	801723a <__gethex+0x354>
 80171d6:	b127      	cbz	r7, 80171e2 <__gethex+0x2fc>
 80171d8:	4639      	mov	r1, r7
 80171da:	4628      	mov	r0, r5
 80171dc:	f000 fd7e 	bl	8017cdc <__any_on>
 80171e0:	4682      	mov	sl, r0
 80171e2:	117a      	asrs	r2, r7, #5
 80171e4:	2301      	movs	r3, #1
 80171e6:	f007 071f 	and.w	r7, r7, #31
 80171ea:	fa03 f707 	lsl.w	r7, r3, r7
 80171ee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80171f2:	4621      	mov	r1, r4
 80171f4:	421f      	tst	r7, r3
 80171f6:	4628      	mov	r0, r5
 80171f8:	bf18      	it	ne
 80171fa:	f04a 0a02 	orrne.w	sl, sl, #2
 80171fe:	1b36      	subs	r6, r6, r4
 8017200:	f7ff fe22 	bl	8016e48 <rshift>
 8017204:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017208:	2702      	movs	r7, #2
 801720a:	f1ba 0f00 	cmp.w	sl, #0
 801720e:	d048      	beq.n	80172a2 <__gethex+0x3bc>
 8017210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017214:	2b02      	cmp	r3, #2
 8017216:	d015      	beq.n	8017244 <__gethex+0x35e>
 8017218:	2b03      	cmp	r3, #3
 801721a:	d017      	beq.n	801724c <__gethex+0x366>
 801721c:	2b01      	cmp	r3, #1
 801721e:	d109      	bne.n	8017234 <__gethex+0x34e>
 8017220:	f01a 0f02 	tst.w	sl, #2
 8017224:	d006      	beq.n	8017234 <__gethex+0x34e>
 8017226:	f8d9 3000 	ldr.w	r3, [r9]
 801722a:	ea4a 0a03 	orr.w	sl, sl, r3
 801722e:	f01a 0f01 	tst.w	sl, #1
 8017232:	d10e      	bne.n	8017252 <__gethex+0x36c>
 8017234:	f047 0710 	orr.w	r7, r7, #16
 8017238:	e033      	b.n	80172a2 <__gethex+0x3bc>
 801723a:	f04f 0a01 	mov.w	sl, #1
 801723e:	e7d0      	b.n	80171e2 <__gethex+0x2fc>
 8017240:	2701      	movs	r7, #1
 8017242:	e7e2      	b.n	801720a <__gethex+0x324>
 8017244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017246:	f1c3 0301 	rsb	r3, r3, #1
 801724a:	9315      	str	r3, [sp, #84]	; 0x54
 801724c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801724e:	2b00      	cmp	r3, #0
 8017250:	d0f0      	beq.n	8017234 <__gethex+0x34e>
 8017252:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017256:	f105 0314 	add.w	r3, r5, #20
 801725a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801725e:	eb03 010a 	add.w	r1, r3, sl
 8017262:	f04f 0c00 	mov.w	ip, #0
 8017266:	4618      	mov	r0, r3
 8017268:	f853 2b04 	ldr.w	r2, [r3], #4
 801726c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017270:	d01c      	beq.n	80172ac <__gethex+0x3c6>
 8017272:	3201      	adds	r2, #1
 8017274:	6002      	str	r2, [r0, #0]
 8017276:	2f02      	cmp	r7, #2
 8017278:	f105 0314 	add.w	r3, r5, #20
 801727c:	d138      	bne.n	80172f0 <__gethex+0x40a>
 801727e:	f8d8 2000 	ldr.w	r2, [r8]
 8017282:	3a01      	subs	r2, #1
 8017284:	42b2      	cmp	r2, r6
 8017286:	d10a      	bne.n	801729e <__gethex+0x3b8>
 8017288:	1171      	asrs	r1, r6, #5
 801728a:	2201      	movs	r2, #1
 801728c:	f006 061f 	and.w	r6, r6, #31
 8017290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017294:	fa02 f606 	lsl.w	r6, r2, r6
 8017298:	421e      	tst	r6, r3
 801729a:	bf18      	it	ne
 801729c:	4617      	movne	r7, r2
 801729e:	f047 0720 	orr.w	r7, r7, #32
 80172a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80172a4:	601d      	str	r5, [r3, #0]
 80172a6:	9b06      	ldr	r3, [sp, #24]
 80172a8:	601c      	str	r4, [r3, #0]
 80172aa:	e6a4      	b.n	8016ff6 <__gethex+0x110>
 80172ac:	4299      	cmp	r1, r3
 80172ae:	f843 cc04 	str.w	ip, [r3, #-4]
 80172b2:	d8d8      	bhi.n	8017266 <__gethex+0x380>
 80172b4:	68ab      	ldr	r3, [r5, #8]
 80172b6:	4599      	cmp	r9, r3
 80172b8:	db12      	blt.n	80172e0 <__gethex+0x3fa>
 80172ba:	6869      	ldr	r1, [r5, #4]
 80172bc:	9802      	ldr	r0, [sp, #8]
 80172be:	3101      	adds	r1, #1
 80172c0:	f000 f92f 	bl	8017522 <_Balloc>
 80172c4:	692a      	ldr	r2, [r5, #16]
 80172c6:	3202      	adds	r2, #2
 80172c8:	f105 010c 	add.w	r1, r5, #12
 80172cc:	4683      	mov	fp, r0
 80172ce:	0092      	lsls	r2, r2, #2
 80172d0:	300c      	adds	r0, #12
 80172d2:	f000 f91b 	bl	801750c <memcpy>
 80172d6:	4629      	mov	r1, r5
 80172d8:	9802      	ldr	r0, [sp, #8]
 80172da:	f000 f956 	bl	801758a <_Bfree>
 80172de:	465d      	mov	r5, fp
 80172e0:	692b      	ldr	r3, [r5, #16]
 80172e2:	1c5a      	adds	r2, r3, #1
 80172e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80172e8:	612a      	str	r2, [r5, #16]
 80172ea:	2201      	movs	r2, #1
 80172ec:	615a      	str	r2, [r3, #20]
 80172ee:	e7c2      	b.n	8017276 <__gethex+0x390>
 80172f0:	692a      	ldr	r2, [r5, #16]
 80172f2:	454a      	cmp	r2, r9
 80172f4:	dd0b      	ble.n	801730e <__gethex+0x428>
 80172f6:	2101      	movs	r1, #1
 80172f8:	4628      	mov	r0, r5
 80172fa:	f7ff fda5 	bl	8016e48 <rshift>
 80172fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017302:	3401      	adds	r4, #1
 8017304:	42a3      	cmp	r3, r4
 8017306:	f6ff aed9 	blt.w	80170bc <__gethex+0x1d6>
 801730a:	2701      	movs	r7, #1
 801730c:	e7c7      	b.n	801729e <__gethex+0x3b8>
 801730e:	f016 061f 	ands.w	r6, r6, #31
 8017312:	d0fa      	beq.n	801730a <__gethex+0x424>
 8017314:	449a      	add	sl, r3
 8017316:	f1c6 0620 	rsb	r6, r6, #32
 801731a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801731e:	f000 f9c4 	bl	80176aa <__hi0bits>
 8017322:	42b0      	cmp	r0, r6
 8017324:	dbe7      	blt.n	80172f6 <__gethex+0x410>
 8017326:	e7f0      	b.n	801730a <__gethex+0x424>

08017328 <L_shift>:
 8017328:	f1c2 0208 	rsb	r2, r2, #8
 801732c:	0092      	lsls	r2, r2, #2
 801732e:	b570      	push	{r4, r5, r6, lr}
 8017330:	f1c2 0620 	rsb	r6, r2, #32
 8017334:	6843      	ldr	r3, [r0, #4]
 8017336:	6804      	ldr	r4, [r0, #0]
 8017338:	fa03 f506 	lsl.w	r5, r3, r6
 801733c:	432c      	orrs	r4, r5
 801733e:	40d3      	lsrs	r3, r2
 8017340:	6004      	str	r4, [r0, #0]
 8017342:	f840 3f04 	str.w	r3, [r0, #4]!
 8017346:	4288      	cmp	r0, r1
 8017348:	d3f4      	bcc.n	8017334 <L_shift+0xc>
 801734a:	bd70      	pop	{r4, r5, r6, pc}

0801734c <__match>:
 801734c:	b530      	push	{r4, r5, lr}
 801734e:	6803      	ldr	r3, [r0, #0]
 8017350:	3301      	adds	r3, #1
 8017352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017356:	b914      	cbnz	r4, 801735e <__match+0x12>
 8017358:	6003      	str	r3, [r0, #0]
 801735a:	2001      	movs	r0, #1
 801735c:	bd30      	pop	{r4, r5, pc}
 801735e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017362:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017366:	2d19      	cmp	r5, #25
 8017368:	bf98      	it	ls
 801736a:	3220      	addls	r2, #32
 801736c:	42a2      	cmp	r2, r4
 801736e:	d0f0      	beq.n	8017352 <__match+0x6>
 8017370:	2000      	movs	r0, #0
 8017372:	e7f3      	b.n	801735c <__match+0x10>

08017374 <__hexnan>:
 8017374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017378:	680b      	ldr	r3, [r1, #0]
 801737a:	6801      	ldr	r1, [r0, #0]
 801737c:	115f      	asrs	r7, r3, #5
 801737e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017382:	f013 031f 	ands.w	r3, r3, #31
 8017386:	b087      	sub	sp, #28
 8017388:	bf18      	it	ne
 801738a:	3704      	addne	r7, #4
 801738c:	2500      	movs	r5, #0
 801738e:	1f3e      	subs	r6, r7, #4
 8017390:	4682      	mov	sl, r0
 8017392:	4690      	mov	r8, r2
 8017394:	9301      	str	r3, [sp, #4]
 8017396:	f847 5c04 	str.w	r5, [r7, #-4]
 801739a:	46b1      	mov	r9, r6
 801739c:	4634      	mov	r4, r6
 801739e:	9502      	str	r5, [sp, #8]
 80173a0:	46ab      	mov	fp, r5
 80173a2:	784a      	ldrb	r2, [r1, #1]
 80173a4:	1c4b      	adds	r3, r1, #1
 80173a6:	9303      	str	r3, [sp, #12]
 80173a8:	b342      	cbz	r2, 80173fc <__hexnan+0x88>
 80173aa:	4610      	mov	r0, r2
 80173ac:	9105      	str	r1, [sp, #20]
 80173ae:	9204      	str	r2, [sp, #16]
 80173b0:	f7ff fd84 	bl	8016ebc <__hexdig_fun>
 80173b4:	2800      	cmp	r0, #0
 80173b6:	d143      	bne.n	8017440 <__hexnan+0xcc>
 80173b8:	9a04      	ldr	r2, [sp, #16]
 80173ba:	9905      	ldr	r1, [sp, #20]
 80173bc:	2a20      	cmp	r2, #32
 80173be:	d818      	bhi.n	80173f2 <__hexnan+0x7e>
 80173c0:	9b02      	ldr	r3, [sp, #8]
 80173c2:	459b      	cmp	fp, r3
 80173c4:	dd13      	ble.n	80173ee <__hexnan+0x7a>
 80173c6:	454c      	cmp	r4, r9
 80173c8:	d206      	bcs.n	80173d8 <__hexnan+0x64>
 80173ca:	2d07      	cmp	r5, #7
 80173cc:	dc04      	bgt.n	80173d8 <__hexnan+0x64>
 80173ce:	462a      	mov	r2, r5
 80173d0:	4649      	mov	r1, r9
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ff ffa8 	bl	8017328 <L_shift>
 80173d8:	4544      	cmp	r4, r8
 80173da:	d944      	bls.n	8017466 <__hexnan+0xf2>
 80173dc:	2300      	movs	r3, #0
 80173de:	f1a4 0904 	sub.w	r9, r4, #4
 80173e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80173e6:	f8cd b008 	str.w	fp, [sp, #8]
 80173ea:	464c      	mov	r4, r9
 80173ec:	461d      	mov	r5, r3
 80173ee:	9903      	ldr	r1, [sp, #12]
 80173f0:	e7d7      	b.n	80173a2 <__hexnan+0x2e>
 80173f2:	2a29      	cmp	r2, #41	; 0x29
 80173f4:	d14a      	bne.n	801748c <__hexnan+0x118>
 80173f6:	3102      	adds	r1, #2
 80173f8:	f8ca 1000 	str.w	r1, [sl]
 80173fc:	f1bb 0f00 	cmp.w	fp, #0
 8017400:	d044      	beq.n	801748c <__hexnan+0x118>
 8017402:	454c      	cmp	r4, r9
 8017404:	d206      	bcs.n	8017414 <__hexnan+0xa0>
 8017406:	2d07      	cmp	r5, #7
 8017408:	dc04      	bgt.n	8017414 <__hexnan+0xa0>
 801740a:	462a      	mov	r2, r5
 801740c:	4649      	mov	r1, r9
 801740e:	4620      	mov	r0, r4
 8017410:	f7ff ff8a 	bl	8017328 <L_shift>
 8017414:	4544      	cmp	r4, r8
 8017416:	d928      	bls.n	801746a <__hexnan+0xf6>
 8017418:	4643      	mov	r3, r8
 801741a:	f854 2b04 	ldr.w	r2, [r4], #4
 801741e:	f843 2b04 	str.w	r2, [r3], #4
 8017422:	42a6      	cmp	r6, r4
 8017424:	d2f9      	bcs.n	801741a <__hexnan+0xa6>
 8017426:	2200      	movs	r2, #0
 8017428:	f843 2b04 	str.w	r2, [r3], #4
 801742c:	429e      	cmp	r6, r3
 801742e:	d2fb      	bcs.n	8017428 <__hexnan+0xb4>
 8017430:	6833      	ldr	r3, [r6, #0]
 8017432:	b91b      	cbnz	r3, 801743c <__hexnan+0xc8>
 8017434:	4546      	cmp	r6, r8
 8017436:	d127      	bne.n	8017488 <__hexnan+0x114>
 8017438:	2301      	movs	r3, #1
 801743a:	6033      	str	r3, [r6, #0]
 801743c:	2005      	movs	r0, #5
 801743e:	e026      	b.n	801748e <__hexnan+0x11a>
 8017440:	3501      	adds	r5, #1
 8017442:	2d08      	cmp	r5, #8
 8017444:	f10b 0b01 	add.w	fp, fp, #1
 8017448:	dd06      	ble.n	8017458 <__hexnan+0xe4>
 801744a:	4544      	cmp	r4, r8
 801744c:	d9cf      	bls.n	80173ee <__hexnan+0x7a>
 801744e:	2300      	movs	r3, #0
 8017450:	f844 3c04 	str.w	r3, [r4, #-4]
 8017454:	2501      	movs	r5, #1
 8017456:	3c04      	subs	r4, #4
 8017458:	6822      	ldr	r2, [r4, #0]
 801745a:	f000 000f 	and.w	r0, r0, #15
 801745e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017462:	6020      	str	r0, [r4, #0]
 8017464:	e7c3      	b.n	80173ee <__hexnan+0x7a>
 8017466:	2508      	movs	r5, #8
 8017468:	e7c1      	b.n	80173ee <__hexnan+0x7a>
 801746a:	9b01      	ldr	r3, [sp, #4]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d0df      	beq.n	8017430 <__hexnan+0xbc>
 8017470:	f04f 32ff 	mov.w	r2, #4294967295
 8017474:	f1c3 0320 	rsb	r3, r3, #32
 8017478:	fa22 f303 	lsr.w	r3, r2, r3
 801747c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017480:	401a      	ands	r2, r3
 8017482:	f847 2c04 	str.w	r2, [r7, #-4]
 8017486:	e7d3      	b.n	8017430 <__hexnan+0xbc>
 8017488:	3e04      	subs	r6, #4
 801748a:	e7d1      	b.n	8017430 <__hexnan+0xbc>
 801748c:	2004      	movs	r0, #4
 801748e:	b007      	add	sp, #28
 8017490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017494 <__locale_ctype_ptr_l>:
 8017494:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017498:	4770      	bx	lr
	...

0801749c <__locale_ctype_ptr>:
 801749c:	4b04      	ldr	r3, [pc, #16]	; (80174b0 <__locale_ctype_ptr+0x14>)
 801749e:	4a05      	ldr	r2, [pc, #20]	; (80174b4 <__locale_ctype_ptr+0x18>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	6a1b      	ldr	r3, [r3, #32]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	bf08      	it	eq
 80174a8:	4613      	moveq	r3, r2
 80174aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80174ae:	4770      	bx	lr
 80174b0:	2000000c 	.word	0x2000000c
 80174b4:	20000070 	.word	0x20000070

080174b8 <__localeconv_l>:
 80174b8:	30f0      	adds	r0, #240	; 0xf0
 80174ba:	4770      	bx	lr

080174bc <_localeconv_r>:
 80174bc:	4b04      	ldr	r3, [pc, #16]	; (80174d0 <_localeconv_r+0x14>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	6a18      	ldr	r0, [r3, #32]
 80174c2:	4b04      	ldr	r3, [pc, #16]	; (80174d4 <_localeconv_r+0x18>)
 80174c4:	2800      	cmp	r0, #0
 80174c6:	bf08      	it	eq
 80174c8:	4618      	moveq	r0, r3
 80174ca:	30f0      	adds	r0, #240	; 0xf0
 80174cc:	4770      	bx	lr
 80174ce:	bf00      	nop
 80174d0:	2000000c 	.word	0x2000000c
 80174d4:	20000070 	.word	0x20000070

080174d8 <malloc>:
 80174d8:	4b02      	ldr	r3, [pc, #8]	; (80174e4 <malloc+0xc>)
 80174da:	4601      	mov	r1, r0
 80174dc:	6818      	ldr	r0, [r3, #0]
 80174de:	f000 bc7b 	b.w	8017dd8 <_malloc_r>
 80174e2:	bf00      	nop
 80174e4:	2000000c 	.word	0x2000000c

080174e8 <__ascii_mbtowc>:
 80174e8:	b082      	sub	sp, #8
 80174ea:	b901      	cbnz	r1, 80174ee <__ascii_mbtowc+0x6>
 80174ec:	a901      	add	r1, sp, #4
 80174ee:	b142      	cbz	r2, 8017502 <__ascii_mbtowc+0x1a>
 80174f0:	b14b      	cbz	r3, 8017506 <__ascii_mbtowc+0x1e>
 80174f2:	7813      	ldrb	r3, [r2, #0]
 80174f4:	600b      	str	r3, [r1, #0]
 80174f6:	7812      	ldrb	r2, [r2, #0]
 80174f8:	1c10      	adds	r0, r2, #0
 80174fa:	bf18      	it	ne
 80174fc:	2001      	movne	r0, #1
 80174fe:	b002      	add	sp, #8
 8017500:	4770      	bx	lr
 8017502:	4610      	mov	r0, r2
 8017504:	e7fb      	b.n	80174fe <__ascii_mbtowc+0x16>
 8017506:	f06f 0001 	mvn.w	r0, #1
 801750a:	e7f8      	b.n	80174fe <__ascii_mbtowc+0x16>

0801750c <memcpy>:
 801750c:	b510      	push	{r4, lr}
 801750e:	1e43      	subs	r3, r0, #1
 8017510:	440a      	add	r2, r1
 8017512:	4291      	cmp	r1, r2
 8017514:	d100      	bne.n	8017518 <memcpy+0xc>
 8017516:	bd10      	pop	{r4, pc}
 8017518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801751c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017520:	e7f7      	b.n	8017512 <memcpy+0x6>

08017522 <_Balloc>:
 8017522:	b570      	push	{r4, r5, r6, lr}
 8017524:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017526:	4604      	mov	r4, r0
 8017528:	460e      	mov	r6, r1
 801752a:	b93d      	cbnz	r5, 801753c <_Balloc+0x1a>
 801752c:	2010      	movs	r0, #16
 801752e:	f7ff ffd3 	bl	80174d8 <malloc>
 8017532:	6260      	str	r0, [r4, #36]	; 0x24
 8017534:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017538:	6005      	str	r5, [r0, #0]
 801753a:	60c5      	str	r5, [r0, #12]
 801753c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801753e:	68eb      	ldr	r3, [r5, #12]
 8017540:	b183      	cbz	r3, 8017564 <_Balloc+0x42>
 8017542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801754a:	b9b8      	cbnz	r0, 801757c <_Balloc+0x5a>
 801754c:	2101      	movs	r1, #1
 801754e:	fa01 f506 	lsl.w	r5, r1, r6
 8017552:	1d6a      	adds	r2, r5, #5
 8017554:	0092      	lsls	r2, r2, #2
 8017556:	4620      	mov	r0, r4
 8017558:	f000 fbe1 	bl	8017d1e <_calloc_r>
 801755c:	b160      	cbz	r0, 8017578 <_Balloc+0x56>
 801755e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017562:	e00e      	b.n	8017582 <_Balloc+0x60>
 8017564:	2221      	movs	r2, #33	; 0x21
 8017566:	2104      	movs	r1, #4
 8017568:	4620      	mov	r0, r4
 801756a:	f000 fbd8 	bl	8017d1e <_calloc_r>
 801756e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017570:	60e8      	str	r0, [r5, #12]
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d1e4      	bne.n	8017542 <_Balloc+0x20>
 8017578:	2000      	movs	r0, #0
 801757a:	bd70      	pop	{r4, r5, r6, pc}
 801757c:	6802      	ldr	r2, [r0, #0]
 801757e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017582:	2300      	movs	r3, #0
 8017584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017588:	e7f7      	b.n	801757a <_Balloc+0x58>

0801758a <_Bfree>:
 801758a:	b570      	push	{r4, r5, r6, lr}
 801758c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801758e:	4606      	mov	r6, r0
 8017590:	460d      	mov	r5, r1
 8017592:	b93c      	cbnz	r4, 80175a4 <_Bfree+0x1a>
 8017594:	2010      	movs	r0, #16
 8017596:	f7ff ff9f 	bl	80174d8 <malloc>
 801759a:	6270      	str	r0, [r6, #36]	; 0x24
 801759c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80175a0:	6004      	str	r4, [r0, #0]
 80175a2:	60c4      	str	r4, [r0, #12]
 80175a4:	b13d      	cbz	r5, 80175b6 <_Bfree+0x2c>
 80175a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80175a8:	686a      	ldr	r2, [r5, #4]
 80175aa:	68db      	ldr	r3, [r3, #12]
 80175ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80175b0:	6029      	str	r1, [r5, #0]
 80175b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80175b6:	bd70      	pop	{r4, r5, r6, pc}

080175b8 <__multadd>:
 80175b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175bc:	690d      	ldr	r5, [r1, #16]
 80175be:	461f      	mov	r7, r3
 80175c0:	4606      	mov	r6, r0
 80175c2:	460c      	mov	r4, r1
 80175c4:	f101 0c14 	add.w	ip, r1, #20
 80175c8:	2300      	movs	r3, #0
 80175ca:	f8dc 0000 	ldr.w	r0, [ip]
 80175ce:	b281      	uxth	r1, r0
 80175d0:	fb02 7101 	mla	r1, r2, r1, r7
 80175d4:	0c0f      	lsrs	r7, r1, #16
 80175d6:	0c00      	lsrs	r0, r0, #16
 80175d8:	fb02 7000 	mla	r0, r2, r0, r7
 80175dc:	b289      	uxth	r1, r1
 80175de:	3301      	adds	r3, #1
 80175e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80175e4:	429d      	cmp	r5, r3
 80175e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80175ea:	f84c 1b04 	str.w	r1, [ip], #4
 80175ee:	dcec      	bgt.n	80175ca <__multadd+0x12>
 80175f0:	b1d7      	cbz	r7, 8017628 <__multadd+0x70>
 80175f2:	68a3      	ldr	r3, [r4, #8]
 80175f4:	42ab      	cmp	r3, r5
 80175f6:	dc12      	bgt.n	801761e <__multadd+0x66>
 80175f8:	6861      	ldr	r1, [r4, #4]
 80175fa:	4630      	mov	r0, r6
 80175fc:	3101      	adds	r1, #1
 80175fe:	f7ff ff90 	bl	8017522 <_Balloc>
 8017602:	6922      	ldr	r2, [r4, #16]
 8017604:	3202      	adds	r2, #2
 8017606:	f104 010c 	add.w	r1, r4, #12
 801760a:	4680      	mov	r8, r0
 801760c:	0092      	lsls	r2, r2, #2
 801760e:	300c      	adds	r0, #12
 8017610:	f7ff ff7c 	bl	801750c <memcpy>
 8017614:	4621      	mov	r1, r4
 8017616:	4630      	mov	r0, r6
 8017618:	f7ff ffb7 	bl	801758a <_Bfree>
 801761c:	4644      	mov	r4, r8
 801761e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017622:	3501      	adds	r5, #1
 8017624:	615f      	str	r7, [r3, #20]
 8017626:	6125      	str	r5, [r4, #16]
 8017628:	4620      	mov	r0, r4
 801762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801762e <__s2b>:
 801762e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017632:	460c      	mov	r4, r1
 8017634:	4615      	mov	r5, r2
 8017636:	461f      	mov	r7, r3
 8017638:	2209      	movs	r2, #9
 801763a:	3308      	adds	r3, #8
 801763c:	4606      	mov	r6, r0
 801763e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017642:	2100      	movs	r1, #0
 8017644:	2201      	movs	r2, #1
 8017646:	429a      	cmp	r2, r3
 8017648:	db20      	blt.n	801768c <__s2b+0x5e>
 801764a:	4630      	mov	r0, r6
 801764c:	f7ff ff69 	bl	8017522 <_Balloc>
 8017650:	9b08      	ldr	r3, [sp, #32]
 8017652:	6143      	str	r3, [r0, #20]
 8017654:	2d09      	cmp	r5, #9
 8017656:	f04f 0301 	mov.w	r3, #1
 801765a:	6103      	str	r3, [r0, #16]
 801765c:	dd19      	ble.n	8017692 <__s2b+0x64>
 801765e:	f104 0809 	add.w	r8, r4, #9
 8017662:	46c1      	mov	r9, r8
 8017664:	442c      	add	r4, r5
 8017666:	f819 3b01 	ldrb.w	r3, [r9], #1
 801766a:	4601      	mov	r1, r0
 801766c:	3b30      	subs	r3, #48	; 0x30
 801766e:	220a      	movs	r2, #10
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff ffa1 	bl	80175b8 <__multadd>
 8017676:	45a1      	cmp	r9, r4
 8017678:	d1f5      	bne.n	8017666 <__s2b+0x38>
 801767a:	eb08 0405 	add.w	r4, r8, r5
 801767e:	3c08      	subs	r4, #8
 8017680:	1b2d      	subs	r5, r5, r4
 8017682:	1963      	adds	r3, r4, r5
 8017684:	42bb      	cmp	r3, r7
 8017686:	db07      	blt.n	8017698 <__s2b+0x6a>
 8017688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801768c:	0052      	lsls	r2, r2, #1
 801768e:	3101      	adds	r1, #1
 8017690:	e7d9      	b.n	8017646 <__s2b+0x18>
 8017692:	340a      	adds	r4, #10
 8017694:	2509      	movs	r5, #9
 8017696:	e7f3      	b.n	8017680 <__s2b+0x52>
 8017698:	f814 3b01 	ldrb.w	r3, [r4], #1
 801769c:	4601      	mov	r1, r0
 801769e:	3b30      	subs	r3, #48	; 0x30
 80176a0:	220a      	movs	r2, #10
 80176a2:	4630      	mov	r0, r6
 80176a4:	f7ff ff88 	bl	80175b8 <__multadd>
 80176a8:	e7eb      	b.n	8017682 <__s2b+0x54>

080176aa <__hi0bits>:
 80176aa:	0c02      	lsrs	r2, r0, #16
 80176ac:	0412      	lsls	r2, r2, #16
 80176ae:	4603      	mov	r3, r0
 80176b0:	b9b2      	cbnz	r2, 80176e0 <__hi0bits+0x36>
 80176b2:	0403      	lsls	r3, r0, #16
 80176b4:	2010      	movs	r0, #16
 80176b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80176ba:	bf04      	itt	eq
 80176bc:	021b      	lsleq	r3, r3, #8
 80176be:	3008      	addeq	r0, #8
 80176c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80176c4:	bf04      	itt	eq
 80176c6:	011b      	lsleq	r3, r3, #4
 80176c8:	3004      	addeq	r0, #4
 80176ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80176ce:	bf04      	itt	eq
 80176d0:	009b      	lsleq	r3, r3, #2
 80176d2:	3002      	addeq	r0, #2
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	db06      	blt.n	80176e6 <__hi0bits+0x3c>
 80176d8:	005b      	lsls	r3, r3, #1
 80176da:	d503      	bpl.n	80176e4 <__hi0bits+0x3a>
 80176dc:	3001      	adds	r0, #1
 80176de:	4770      	bx	lr
 80176e0:	2000      	movs	r0, #0
 80176e2:	e7e8      	b.n	80176b6 <__hi0bits+0xc>
 80176e4:	2020      	movs	r0, #32
 80176e6:	4770      	bx	lr

080176e8 <__lo0bits>:
 80176e8:	6803      	ldr	r3, [r0, #0]
 80176ea:	f013 0207 	ands.w	r2, r3, #7
 80176ee:	4601      	mov	r1, r0
 80176f0:	d00b      	beq.n	801770a <__lo0bits+0x22>
 80176f2:	07da      	lsls	r2, r3, #31
 80176f4:	d423      	bmi.n	801773e <__lo0bits+0x56>
 80176f6:	0798      	lsls	r0, r3, #30
 80176f8:	bf49      	itett	mi
 80176fa:	085b      	lsrmi	r3, r3, #1
 80176fc:	089b      	lsrpl	r3, r3, #2
 80176fe:	2001      	movmi	r0, #1
 8017700:	600b      	strmi	r3, [r1, #0]
 8017702:	bf5c      	itt	pl
 8017704:	600b      	strpl	r3, [r1, #0]
 8017706:	2002      	movpl	r0, #2
 8017708:	4770      	bx	lr
 801770a:	b298      	uxth	r0, r3
 801770c:	b9a8      	cbnz	r0, 801773a <__lo0bits+0x52>
 801770e:	0c1b      	lsrs	r3, r3, #16
 8017710:	2010      	movs	r0, #16
 8017712:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017716:	bf04      	itt	eq
 8017718:	0a1b      	lsreq	r3, r3, #8
 801771a:	3008      	addeq	r0, #8
 801771c:	071a      	lsls	r2, r3, #28
 801771e:	bf04      	itt	eq
 8017720:	091b      	lsreq	r3, r3, #4
 8017722:	3004      	addeq	r0, #4
 8017724:	079a      	lsls	r2, r3, #30
 8017726:	bf04      	itt	eq
 8017728:	089b      	lsreq	r3, r3, #2
 801772a:	3002      	addeq	r0, #2
 801772c:	07da      	lsls	r2, r3, #31
 801772e:	d402      	bmi.n	8017736 <__lo0bits+0x4e>
 8017730:	085b      	lsrs	r3, r3, #1
 8017732:	d006      	beq.n	8017742 <__lo0bits+0x5a>
 8017734:	3001      	adds	r0, #1
 8017736:	600b      	str	r3, [r1, #0]
 8017738:	4770      	bx	lr
 801773a:	4610      	mov	r0, r2
 801773c:	e7e9      	b.n	8017712 <__lo0bits+0x2a>
 801773e:	2000      	movs	r0, #0
 8017740:	4770      	bx	lr
 8017742:	2020      	movs	r0, #32
 8017744:	4770      	bx	lr

08017746 <__i2b>:
 8017746:	b510      	push	{r4, lr}
 8017748:	460c      	mov	r4, r1
 801774a:	2101      	movs	r1, #1
 801774c:	f7ff fee9 	bl	8017522 <_Balloc>
 8017750:	2201      	movs	r2, #1
 8017752:	6144      	str	r4, [r0, #20]
 8017754:	6102      	str	r2, [r0, #16]
 8017756:	bd10      	pop	{r4, pc}

08017758 <__multiply>:
 8017758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801775c:	4614      	mov	r4, r2
 801775e:	690a      	ldr	r2, [r1, #16]
 8017760:	6923      	ldr	r3, [r4, #16]
 8017762:	429a      	cmp	r2, r3
 8017764:	bfb8      	it	lt
 8017766:	460b      	movlt	r3, r1
 8017768:	4688      	mov	r8, r1
 801776a:	bfbc      	itt	lt
 801776c:	46a0      	movlt	r8, r4
 801776e:	461c      	movlt	r4, r3
 8017770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017774:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017778:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801777c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017780:	eb07 0609 	add.w	r6, r7, r9
 8017784:	42b3      	cmp	r3, r6
 8017786:	bfb8      	it	lt
 8017788:	3101      	addlt	r1, #1
 801778a:	f7ff feca 	bl	8017522 <_Balloc>
 801778e:	f100 0514 	add.w	r5, r0, #20
 8017792:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017796:	462b      	mov	r3, r5
 8017798:	2200      	movs	r2, #0
 801779a:	4573      	cmp	r3, lr
 801779c:	d316      	bcc.n	80177cc <__multiply+0x74>
 801779e:	f104 0214 	add.w	r2, r4, #20
 80177a2:	f108 0114 	add.w	r1, r8, #20
 80177a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80177aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80177ae:	9300      	str	r3, [sp, #0]
 80177b0:	9b00      	ldr	r3, [sp, #0]
 80177b2:	9201      	str	r2, [sp, #4]
 80177b4:	4293      	cmp	r3, r2
 80177b6:	d80c      	bhi.n	80177d2 <__multiply+0x7a>
 80177b8:	2e00      	cmp	r6, #0
 80177ba:	dd03      	ble.n	80177c4 <__multiply+0x6c>
 80177bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d05d      	beq.n	8017880 <__multiply+0x128>
 80177c4:	6106      	str	r6, [r0, #16]
 80177c6:	b003      	add	sp, #12
 80177c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177cc:	f843 2b04 	str.w	r2, [r3], #4
 80177d0:	e7e3      	b.n	801779a <__multiply+0x42>
 80177d2:	f8b2 b000 	ldrh.w	fp, [r2]
 80177d6:	f1bb 0f00 	cmp.w	fp, #0
 80177da:	d023      	beq.n	8017824 <__multiply+0xcc>
 80177dc:	4689      	mov	r9, r1
 80177de:	46ac      	mov	ip, r5
 80177e0:	f04f 0800 	mov.w	r8, #0
 80177e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80177e8:	f8dc a000 	ldr.w	sl, [ip]
 80177ec:	b2a3      	uxth	r3, r4
 80177ee:	fa1f fa8a 	uxth.w	sl, sl
 80177f2:	fb0b a303 	mla	r3, fp, r3, sl
 80177f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80177fa:	f8dc 4000 	ldr.w	r4, [ip]
 80177fe:	4443      	add	r3, r8
 8017800:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017804:	fb0b 840a 	mla	r4, fp, sl, r8
 8017808:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801780c:	46e2      	mov	sl, ip
 801780e:	b29b      	uxth	r3, r3
 8017810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017814:	454f      	cmp	r7, r9
 8017816:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801781a:	f84a 3b04 	str.w	r3, [sl], #4
 801781e:	d82b      	bhi.n	8017878 <__multiply+0x120>
 8017820:	f8cc 8004 	str.w	r8, [ip, #4]
 8017824:	9b01      	ldr	r3, [sp, #4]
 8017826:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801782a:	3204      	adds	r2, #4
 801782c:	f1ba 0f00 	cmp.w	sl, #0
 8017830:	d020      	beq.n	8017874 <__multiply+0x11c>
 8017832:	682b      	ldr	r3, [r5, #0]
 8017834:	4689      	mov	r9, r1
 8017836:	46a8      	mov	r8, r5
 8017838:	f04f 0b00 	mov.w	fp, #0
 801783c:	f8b9 c000 	ldrh.w	ip, [r9]
 8017840:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017844:	fb0a 440c 	mla	r4, sl, ip, r4
 8017848:	445c      	add	r4, fp
 801784a:	46c4      	mov	ip, r8
 801784c:	b29b      	uxth	r3, r3
 801784e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017852:	f84c 3b04 	str.w	r3, [ip], #4
 8017856:	f859 3b04 	ldr.w	r3, [r9], #4
 801785a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801785e:	0c1b      	lsrs	r3, r3, #16
 8017860:	fb0a b303 	mla	r3, sl, r3, fp
 8017864:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017868:	454f      	cmp	r7, r9
 801786a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801786e:	d805      	bhi.n	801787c <__multiply+0x124>
 8017870:	f8c8 3004 	str.w	r3, [r8, #4]
 8017874:	3504      	adds	r5, #4
 8017876:	e79b      	b.n	80177b0 <__multiply+0x58>
 8017878:	46d4      	mov	ip, sl
 801787a:	e7b3      	b.n	80177e4 <__multiply+0x8c>
 801787c:	46e0      	mov	r8, ip
 801787e:	e7dd      	b.n	801783c <__multiply+0xe4>
 8017880:	3e01      	subs	r6, #1
 8017882:	e799      	b.n	80177b8 <__multiply+0x60>

08017884 <__pow5mult>:
 8017884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017888:	4615      	mov	r5, r2
 801788a:	f012 0203 	ands.w	r2, r2, #3
 801788e:	4606      	mov	r6, r0
 8017890:	460f      	mov	r7, r1
 8017892:	d007      	beq.n	80178a4 <__pow5mult+0x20>
 8017894:	3a01      	subs	r2, #1
 8017896:	4c21      	ldr	r4, [pc, #132]	; (801791c <__pow5mult+0x98>)
 8017898:	2300      	movs	r3, #0
 801789a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801789e:	f7ff fe8b 	bl	80175b8 <__multadd>
 80178a2:	4607      	mov	r7, r0
 80178a4:	10ad      	asrs	r5, r5, #2
 80178a6:	d035      	beq.n	8017914 <__pow5mult+0x90>
 80178a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80178aa:	b93c      	cbnz	r4, 80178bc <__pow5mult+0x38>
 80178ac:	2010      	movs	r0, #16
 80178ae:	f7ff fe13 	bl	80174d8 <malloc>
 80178b2:	6270      	str	r0, [r6, #36]	; 0x24
 80178b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80178b8:	6004      	str	r4, [r0, #0]
 80178ba:	60c4      	str	r4, [r0, #12]
 80178bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80178c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80178c4:	b94c      	cbnz	r4, 80178da <__pow5mult+0x56>
 80178c6:	f240 2171 	movw	r1, #625	; 0x271
 80178ca:	4630      	mov	r0, r6
 80178cc:	f7ff ff3b 	bl	8017746 <__i2b>
 80178d0:	2300      	movs	r3, #0
 80178d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80178d6:	4604      	mov	r4, r0
 80178d8:	6003      	str	r3, [r0, #0]
 80178da:	f04f 0800 	mov.w	r8, #0
 80178de:	07eb      	lsls	r3, r5, #31
 80178e0:	d50a      	bpl.n	80178f8 <__pow5mult+0x74>
 80178e2:	4639      	mov	r1, r7
 80178e4:	4622      	mov	r2, r4
 80178e6:	4630      	mov	r0, r6
 80178e8:	f7ff ff36 	bl	8017758 <__multiply>
 80178ec:	4639      	mov	r1, r7
 80178ee:	4681      	mov	r9, r0
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff fe4a 	bl	801758a <_Bfree>
 80178f6:	464f      	mov	r7, r9
 80178f8:	106d      	asrs	r5, r5, #1
 80178fa:	d00b      	beq.n	8017914 <__pow5mult+0x90>
 80178fc:	6820      	ldr	r0, [r4, #0]
 80178fe:	b938      	cbnz	r0, 8017910 <__pow5mult+0x8c>
 8017900:	4622      	mov	r2, r4
 8017902:	4621      	mov	r1, r4
 8017904:	4630      	mov	r0, r6
 8017906:	f7ff ff27 	bl	8017758 <__multiply>
 801790a:	6020      	str	r0, [r4, #0]
 801790c:	f8c0 8000 	str.w	r8, [r0]
 8017910:	4604      	mov	r4, r0
 8017912:	e7e4      	b.n	80178de <__pow5mult+0x5a>
 8017914:	4638      	mov	r0, r7
 8017916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801791a:	bf00      	nop
 801791c:	080190c8 	.word	0x080190c8

08017920 <__lshift>:
 8017920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017924:	460c      	mov	r4, r1
 8017926:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801792a:	6923      	ldr	r3, [r4, #16]
 801792c:	6849      	ldr	r1, [r1, #4]
 801792e:	eb0a 0903 	add.w	r9, sl, r3
 8017932:	68a3      	ldr	r3, [r4, #8]
 8017934:	4607      	mov	r7, r0
 8017936:	4616      	mov	r6, r2
 8017938:	f109 0501 	add.w	r5, r9, #1
 801793c:	42ab      	cmp	r3, r5
 801793e:	db32      	blt.n	80179a6 <__lshift+0x86>
 8017940:	4638      	mov	r0, r7
 8017942:	f7ff fdee 	bl	8017522 <_Balloc>
 8017946:	2300      	movs	r3, #0
 8017948:	4680      	mov	r8, r0
 801794a:	f100 0114 	add.w	r1, r0, #20
 801794e:	461a      	mov	r2, r3
 8017950:	4553      	cmp	r3, sl
 8017952:	db2b      	blt.n	80179ac <__lshift+0x8c>
 8017954:	6920      	ldr	r0, [r4, #16]
 8017956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801795a:	f104 0314 	add.w	r3, r4, #20
 801795e:	f016 021f 	ands.w	r2, r6, #31
 8017962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801796a:	d025      	beq.n	80179b8 <__lshift+0x98>
 801796c:	f1c2 0e20 	rsb	lr, r2, #32
 8017970:	2000      	movs	r0, #0
 8017972:	681e      	ldr	r6, [r3, #0]
 8017974:	468a      	mov	sl, r1
 8017976:	4096      	lsls	r6, r2
 8017978:	4330      	orrs	r0, r6
 801797a:	f84a 0b04 	str.w	r0, [sl], #4
 801797e:	f853 0b04 	ldr.w	r0, [r3], #4
 8017982:	459c      	cmp	ip, r3
 8017984:	fa20 f00e 	lsr.w	r0, r0, lr
 8017988:	d814      	bhi.n	80179b4 <__lshift+0x94>
 801798a:	6048      	str	r0, [r1, #4]
 801798c:	b108      	cbz	r0, 8017992 <__lshift+0x72>
 801798e:	f109 0502 	add.w	r5, r9, #2
 8017992:	3d01      	subs	r5, #1
 8017994:	4638      	mov	r0, r7
 8017996:	f8c8 5010 	str.w	r5, [r8, #16]
 801799a:	4621      	mov	r1, r4
 801799c:	f7ff fdf5 	bl	801758a <_Bfree>
 80179a0:	4640      	mov	r0, r8
 80179a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a6:	3101      	adds	r1, #1
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	e7c7      	b.n	801793c <__lshift+0x1c>
 80179ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80179b0:	3301      	adds	r3, #1
 80179b2:	e7cd      	b.n	8017950 <__lshift+0x30>
 80179b4:	4651      	mov	r1, sl
 80179b6:	e7dc      	b.n	8017972 <__lshift+0x52>
 80179b8:	3904      	subs	r1, #4
 80179ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80179be:	f841 2f04 	str.w	r2, [r1, #4]!
 80179c2:	459c      	cmp	ip, r3
 80179c4:	d8f9      	bhi.n	80179ba <__lshift+0x9a>
 80179c6:	e7e4      	b.n	8017992 <__lshift+0x72>

080179c8 <__mcmp>:
 80179c8:	6903      	ldr	r3, [r0, #16]
 80179ca:	690a      	ldr	r2, [r1, #16]
 80179cc:	1a9b      	subs	r3, r3, r2
 80179ce:	b530      	push	{r4, r5, lr}
 80179d0:	d10c      	bne.n	80179ec <__mcmp+0x24>
 80179d2:	0092      	lsls	r2, r2, #2
 80179d4:	3014      	adds	r0, #20
 80179d6:	3114      	adds	r1, #20
 80179d8:	1884      	adds	r4, r0, r2
 80179da:	4411      	add	r1, r2
 80179dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80179e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80179e4:	4295      	cmp	r5, r2
 80179e6:	d003      	beq.n	80179f0 <__mcmp+0x28>
 80179e8:	d305      	bcc.n	80179f6 <__mcmp+0x2e>
 80179ea:	2301      	movs	r3, #1
 80179ec:	4618      	mov	r0, r3
 80179ee:	bd30      	pop	{r4, r5, pc}
 80179f0:	42a0      	cmp	r0, r4
 80179f2:	d3f3      	bcc.n	80179dc <__mcmp+0x14>
 80179f4:	e7fa      	b.n	80179ec <__mcmp+0x24>
 80179f6:	f04f 33ff 	mov.w	r3, #4294967295
 80179fa:	e7f7      	b.n	80179ec <__mcmp+0x24>

080179fc <__mdiff>:
 80179fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a00:	460d      	mov	r5, r1
 8017a02:	4607      	mov	r7, r0
 8017a04:	4611      	mov	r1, r2
 8017a06:	4628      	mov	r0, r5
 8017a08:	4614      	mov	r4, r2
 8017a0a:	f7ff ffdd 	bl	80179c8 <__mcmp>
 8017a0e:	1e06      	subs	r6, r0, #0
 8017a10:	d108      	bne.n	8017a24 <__mdiff+0x28>
 8017a12:	4631      	mov	r1, r6
 8017a14:	4638      	mov	r0, r7
 8017a16:	f7ff fd84 	bl	8017522 <_Balloc>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a24:	bfa4      	itt	ge
 8017a26:	4623      	movge	r3, r4
 8017a28:	462c      	movge	r4, r5
 8017a2a:	4638      	mov	r0, r7
 8017a2c:	6861      	ldr	r1, [r4, #4]
 8017a2e:	bfa6      	itte	ge
 8017a30:	461d      	movge	r5, r3
 8017a32:	2600      	movge	r6, #0
 8017a34:	2601      	movlt	r6, #1
 8017a36:	f7ff fd74 	bl	8017522 <_Balloc>
 8017a3a:	692b      	ldr	r3, [r5, #16]
 8017a3c:	60c6      	str	r6, [r0, #12]
 8017a3e:	6926      	ldr	r6, [r4, #16]
 8017a40:	f105 0914 	add.w	r9, r5, #20
 8017a44:	f104 0214 	add.w	r2, r4, #20
 8017a48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017a4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017a50:	f100 0514 	add.w	r5, r0, #20
 8017a54:	f04f 0e00 	mov.w	lr, #0
 8017a58:	f852 ab04 	ldr.w	sl, [r2], #4
 8017a5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8017a60:	fa1e f18a 	uxtah	r1, lr, sl
 8017a64:	b2a3      	uxth	r3, r4
 8017a66:	1ac9      	subs	r1, r1, r3
 8017a68:	0c23      	lsrs	r3, r4, #16
 8017a6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017a6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017a72:	b289      	uxth	r1, r1
 8017a74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017a78:	45c8      	cmp	r8, r9
 8017a7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017a7e:	4694      	mov	ip, r2
 8017a80:	f845 3b04 	str.w	r3, [r5], #4
 8017a84:	d8e8      	bhi.n	8017a58 <__mdiff+0x5c>
 8017a86:	45bc      	cmp	ip, r7
 8017a88:	d304      	bcc.n	8017a94 <__mdiff+0x98>
 8017a8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017a8e:	b183      	cbz	r3, 8017ab2 <__mdiff+0xb6>
 8017a90:	6106      	str	r6, [r0, #16]
 8017a92:	e7c5      	b.n	8017a20 <__mdiff+0x24>
 8017a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017a98:	fa1e f381 	uxtah	r3, lr, r1
 8017a9c:	141a      	asrs	r2, r3, #16
 8017a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017aa8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017aac:	f845 3b04 	str.w	r3, [r5], #4
 8017ab0:	e7e9      	b.n	8017a86 <__mdiff+0x8a>
 8017ab2:	3e01      	subs	r6, #1
 8017ab4:	e7e9      	b.n	8017a8a <__mdiff+0x8e>
	...

08017ab8 <__ulp>:
 8017ab8:	4b12      	ldr	r3, [pc, #72]	; (8017b04 <__ulp+0x4c>)
 8017aba:	ee10 2a90 	vmov	r2, s1
 8017abe:	401a      	ands	r2, r3
 8017ac0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	dd04      	ble.n	8017ad2 <__ulp+0x1a>
 8017ac8:	2000      	movs	r0, #0
 8017aca:	4619      	mov	r1, r3
 8017acc:	ec41 0b10 	vmov	d0, r0, r1
 8017ad0:	4770      	bx	lr
 8017ad2:	425b      	negs	r3, r3
 8017ad4:	151b      	asrs	r3, r3, #20
 8017ad6:	2b13      	cmp	r3, #19
 8017ad8:	f04f 0000 	mov.w	r0, #0
 8017adc:	f04f 0100 	mov.w	r1, #0
 8017ae0:	dc04      	bgt.n	8017aec <__ulp+0x34>
 8017ae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017ae6:	fa42 f103 	asr.w	r1, r2, r3
 8017aea:	e7ef      	b.n	8017acc <__ulp+0x14>
 8017aec:	3b14      	subs	r3, #20
 8017aee:	2b1e      	cmp	r3, #30
 8017af0:	f04f 0201 	mov.w	r2, #1
 8017af4:	bfda      	itte	le
 8017af6:	f1c3 031f 	rsble	r3, r3, #31
 8017afa:	fa02 f303 	lslle.w	r3, r2, r3
 8017afe:	4613      	movgt	r3, r2
 8017b00:	4618      	mov	r0, r3
 8017b02:	e7e3      	b.n	8017acc <__ulp+0x14>
 8017b04:	7ff00000 	.word	0x7ff00000

08017b08 <__b2d>:
 8017b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b0a:	6905      	ldr	r5, [r0, #16]
 8017b0c:	f100 0714 	add.w	r7, r0, #20
 8017b10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017b14:	1f2e      	subs	r6, r5, #4
 8017b16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	f7ff fdc5 	bl	80176aa <__hi0bits>
 8017b20:	f1c0 0320 	rsb	r3, r0, #32
 8017b24:	280a      	cmp	r0, #10
 8017b26:	600b      	str	r3, [r1, #0]
 8017b28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017ba0 <__b2d+0x98>
 8017b2c:	dc14      	bgt.n	8017b58 <__b2d+0x50>
 8017b2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017b32:	fa24 f10e 	lsr.w	r1, r4, lr
 8017b36:	42b7      	cmp	r7, r6
 8017b38:	ea41 030c 	orr.w	r3, r1, ip
 8017b3c:	bf34      	ite	cc
 8017b3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017b42:	2100      	movcs	r1, #0
 8017b44:	3015      	adds	r0, #21
 8017b46:	fa04 f000 	lsl.w	r0, r4, r0
 8017b4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8017b4e:	ea40 0201 	orr.w	r2, r0, r1
 8017b52:	ec43 2b10 	vmov	d0, r2, r3
 8017b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b58:	42b7      	cmp	r7, r6
 8017b5a:	bf3a      	itte	cc
 8017b5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8017b60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017b64:	2100      	movcs	r1, #0
 8017b66:	380b      	subs	r0, #11
 8017b68:	d015      	beq.n	8017b96 <__b2d+0x8e>
 8017b6a:	4084      	lsls	r4, r0
 8017b6c:	f1c0 0520 	rsb	r5, r0, #32
 8017b70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017b74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017b78:	42be      	cmp	r6, r7
 8017b7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8017b7e:	ea44 030c 	orr.w	r3, r4, ip
 8017b82:	bf8c      	ite	hi
 8017b84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017b88:	2400      	movls	r4, #0
 8017b8a:	fa01 f000 	lsl.w	r0, r1, r0
 8017b8e:	40ec      	lsrs	r4, r5
 8017b90:	ea40 0204 	orr.w	r2, r0, r4
 8017b94:	e7dd      	b.n	8017b52 <__b2d+0x4a>
 8017b96:	ea44 030c 	orr.w	r3, r4, ip
 8017b9a:	460a      	mov	r2, r1
 8017b9c:	e7d9      	b.n	8017b52 <__b2d+0x4a>
 8017b9e:	bf00      	nop
 8017ba0:	3ff00000 	.word	0x3ff00000

08017ba4 <__d2b>:
 8017ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ba8:	460e      	mov	r6, r1
 8017baa:	2101      	movs	r1, #1
 8017bac:	ec59 8b10 	vmov	r8, r9, d0
 8017bb0:	4615      	mov	r5, r2
 8017bb2:	f7ff fcb6 	bl	8017522 <_Balloc>
 8017bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017bba:	4607      	mov	r7, r0
 8017bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017bc0:	bb34      	cbnz	r4, 8017c10 <__d2b+0x6c>
 8017bc2:	9301      	str	r3, [sp, #4]
 8017bc4:	f1b8 0300 	subs.w	r3, r8, #0
 8017bc8:	d027      	beq.n	8017c1a <__d2b+0x76>
 8017bca:	a802      	add	r0, sp, #8
 8017bcc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017bd0:	f7ff fd8a 	bl	80176e8 <__lo0bits>
 8017bd4:	9900      	ldr	r1, [sp, #0]
 8017bd6:	b1f0      	cbz	r0, 8017c16 <__d2b+0x72>
 8017bd8:	9a01      	ldr	r2, [sp, #4]
 8017bda:	f1c0 0320 	rsb	r3, r0, #32
 8017bde:	fa02 f303 	lsl.w	r3, r2, r3
 8017be2:	430b      	orrs	r3, r1
 8017be4:	40c2      	lsrs	r2, r0
 8017be6:	617b      	str	r3, [r7, #20]
 8017be8:	9201      	str	r2, [sp, #4]
 8017bea:	9b01      	ldr	r3, [sp, #4]
 8017bec:	61bb      	str	r3, [r7, #24]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	bf14      	ite	ne
 8017bf2:	2102      	movne	r1, #2
 8017bf4:	2101      	moveq	r1, #1
 8017bf6:	6139      	str	r1, [r7, #16]
 8017bf8:	b1c4      	cbz	r4, 8017c2c <__d2b+0x88>
 8017bfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017bfe:	4404      	add	r4, r0
 8017c00:	6034      	str	r4, [r6, #0]
 8017c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017c06:	6028      	str	r0, [r5, #0]
 8017c08:	4638      	mov	r0, r7
 8017c0a:	b003      	add	sp, #12
 8017c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017c14:	e7d5      	b.n	8017bc2 <__d2b+0x1e>
 8017c16:	6179      	str	r1, [r7, #20]
 8017c18:	e7e7      	b.n	8017bea <__d2b+0x46>
 8017c1a:	a801      	add	r0, sp, #4
 8017c1c:	f7ff fd64 	bl	80176e8 <__lo0bits>
 8017c20:	9b01      	ldr	r3, [sp, #4]
 8017c22:	617b      	str	r3, [r7, #20]
 8017c24:	2101      	movs	r1, #1
 8017c26:	6139      	str	r1, [r7, #16]
 8017c28:	3020      	adds	r0, #32
 8017c2a:	e7e5      	b.n	8017bf8 <__d2b+0x54>
 8017c2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017c34:	6030      	str	r0, [r6, #0]
 8017c36:	6918      	ldr	r0, [r3, #16]
 8017c38:	f7ff fd37 	bl	80176aa <__hi0bits>
 8017c3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017c40:	e7e1      	b.n	8017c06 <__d2b+0x62>

08017c42 <__ratio>:
 8017c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c46:	4688      	mov	r8, r1
 8017c48:	4669      	mov	r1, sp
 8017c4a:	4681      	mov	r9, r0
 8017c4c:	f7ff ff5c 	bl	8017b08 <__b2d>
 8017c50:	a901      	add	r1, sp, #4
 8017c52:	4640      	mov	r0, r8
 8017c54:	ec57 6b10 	vmov	r6, r7, d0
 8017c58:	f7ff ff56 	bl	8017b08 <__b2d>
 8017c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017c64:	eba3 0c02 	sub.w	ip, r3, r2
 8017c68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017c6c:	1a9b      	subs	r3, r3, r2
 8017c6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017c72:	ec5b ab10 	vmov	sl, fp, d0
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	bfce      	itee	gt
 8017c7a:	463a      	movgt	r2, r7
 8017c7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017c80:	465a      	movle	r2, fp
 8017c82:	4659      	mov	r1, fp
 8017c84:	463d      	mov	r5, r7
 8017c86:	bfd4      	ite	le
 8017c88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017c8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017c90:	4630      	mov	r0, r6
 8017c92:	ee10 2a10 	vmov	r2, s0
 8017c96:	460b      	mov	r3, r1
 8017c98:	4629      	mov	r1, r5
 8017c9a:	f7e8 fdef 	bl	800087c <__aeabi_ddiv>
 8017c9e:	ec41 0b10 	vmov	d0, r0, r1
 8017ca2:	b003      	add	sp, #12
 8017ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ca8 <__copybits>:
 8017ca8:	3901      	subs	r1, #1
 8017caa:	b510      	push	{r4, lr}
 8017cac:	1149      	asrs	r1, r1, #5
 8017cae:	6914      	ldr	r4, [r2, #16]
 8017cb0:	3101      	adds	r1, #1
 8017cb2:	f102 0314 	add.w	r3, r2, #20
 8017cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017cbe:	42a3      	cmp	r3, r4
 8017cc0:	4602      	mov	r2, r0
 8017cc2:	d303      	bcc.n	8017ccc <__copybits+0x24>
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	428a      	cmp	r2, r1
 8017cc8:	d305      	bcc.n	8017cd6 <__copybits+0x2e>
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cd0:	f840 2b04 	str.w	r2, [r0], #4
 8017cd4:	e7f3      	b.n	8017cbe <__copybits+0x16>
 8017cd6:	f842 3b04 	str.w	r3, [r2], #4
 8017cda:	e7f4      	b.n	8017cc6 <__copybits+0x1e>

08017cdc <__any_on>:
 8017cdc:	f100 0214 	add.w	r2, r0, #20
 8017ce0:	6900      	ldr	r0, [r0, #16]
 8017ce2:	114b      	asrs	r3, r1, #5
 8017ce4:	4298      	cmp	r0, r3
 8017ce6:	b510      	push	{r4, lr}
 8017ce8:	db11      	blt.n	8017d0e <__any_on+0x32>
 8017cea:	dd0a      	ble.n	8017d02 <__any_on+0x26>
 8017cec:	f011 011f 	ands.w	r1, r1, #31
 8017cf0:	d007      	beq.n	8017d02 <__any_on+0x26>
 8017cf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017cf6:	fa24 f001 	lsr.w	r0, r4, r1
 8017cfa:	fa00 f101 	lsl.w	r1, r0, r1
 8017cfe:	428c      	cmp	r4, r1
 8017d00:	d10b      	bne.n	8017d1a <__any_on+0x3e>
 8017d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d803      	bhi.n	8017d12 <__any_on+0x36>
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	bd10      	pop	{r4, pc}
 8017d0e:	4603      	mov	r3, r0
 8017d10:	e7f7      	b.n	8017d02 <__any_on+0x26>
 8017d12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017d16:	2900      	cmp	r1, #0
 8017d18:	d0f5      	beq.n	8017d06 <__any_on+0x2a>
 8017d1a:	2001      	movs	r0, #1
 8017d1c:	e7f6      	b.n	8017d0c <__any_on+0x30>

08017d1e <_calloc_r>:
 8017d1e:	b538      	push	{r3, r4, r5, lr}
 8017d20:	fb02 f401 	mul.w	r4, r2, r1
 8017d24:	4621      	mov	r1, r4
 8017d26:	f000 f857 	bl	8017dd8 <_malloc_r>
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	b118      	cbz	r0, 8017d36 <_calloc_r+0x18>
 8017d2e:	4622      	mov	r2, r4
 8017d30:	2100      	movs	r1, #0
 8017d32:	f7fc fc9f 	bl	8014674 <memset>
 8017d36:	4628      	mov	r0, r5
 8017d38:	bd38      	pop	{r3, r4, r5, pc}
	...

08017d3c <_free_r>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	4605      	mov	r5, r0
 8017d40:	2900      	cmp	r1, #0
 8017d42:	d045      	beq.n	8017dd0 <_free_r+0x94>
 8017d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d48:	1f0c      	subs	r4, r1, #4
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	bfb8      	it	lt
 8017d4e:	18e4      	addlt	r4, r4, r3
 8017d50:	f000 fe30 	bl	80189b4 <__malloc_lock>
 8017d54:	4a1f      	ldr	r2, [pc, #124]	; (8017dd4 <_free_r+0x98>)
 8017d56:	6813      	ldr	r3, [r2, #0]
 8017d58:	4610      	mov	r0, r2
 8017d5a:	b933      	cbnz	r3, 8017d6a <_free_r+0x2e>
 8017d5c:	6063      	str	r3, [r4, #4]
 8017d5e:	6014      	str	r4, [r2, #0]
 8017d60:	4628      	mov	r0, r5
 8017d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d66:	f000 be26 	b.w	80189b6 <__malloc_unlock>
 8017d6a:	42a3      	cmp	r3, r4
 8017d6c:	d90c      	bls.n	8017d88 <_free_r+0x4c>
 8017d6e:	6821      	ldr	r1, [r4, #0]
 8017d70:	1862      	adds	r2, r4, r1
 8017d72:	4293      	cmp	r3, r2
 8017d74:	bf04      	itt	eq
 8017d76:	681a      	ldreq	r2, [r3, #0]
 8017d78:	685b      	ldreq	r3, [r3, #4]
 8017d7a:	6063      	str	r3, [r4, #4]
 8017d7c:	bf04      	itt	eq
 8017d7e:	1852      	addeq	r2, r2, r1
 8017d80:	6022      	streq	r2, [r4, #0]
 8017d82:	6004      	str	r4, [r0, #0]
 8017d84:	e7ec      	b.n	8017d60 <_free_r+0x24>
 8017d86:	4613      	mov	r3, r2
 8017d88:	685a      	ldr	r2, [r3, #4]
 8017d8a:	b10a      	cbz	r2, 8017d90 <_free_r+0x54>
 8017d8c:	42a2      	cmp	r2, r4
 8017d8e:	d9fa      	bls.n	8017d86 <_free_r+0x4a>
 8017d90:	6819      	ldr	r1, [r3, #0]
 8017d92:	1858      	adds	r0, r3, r1
 8017d94:	42a0      	cmp	r0, r4
 8017d96:	d10b      	bne.n	8017db0 <_free_r+0x74>
 8017d98:	6820      	ldr	r0, [r4, #0]
 8017d9a:	4401      	add	r1, r0
 8017d9c:	1858      	adds	r0, r3, r1
 8017d9e:	4282      	cmp	r2, r0
 8017da0:	6019      	str	r1, [r3, #0]
 8017da2:	d1dd      	bne.n	8017d60 <_free_r+0x24>
 8017da4:	6810      	ldr	r0, [r2, #0]
 8017da6:	6852      	ldr	r2, [r2, #4]
 8017da8:	605a      	str	r2, [r3, #4]
 8017daa:	4401      	add	r1, r0
 8017dac:	6019      	str	r1, [r3, #0]
 8017dae:	e7d7      	b.n	8017d60 <_free_r+0x24>
 8017db0:	d902      	bls.n	8017db8 <_free_r+0x7c>
 8017db2:	230c      	movs	r3, #12
 8017db4:	602b      	str	r3, [r5, #0]
 8017db6:	e7d3      	b.n	8017d60 <_free_r+0x24>
 8017db8:	6820      	ldr	r0, [r4, #0]
 8017dba:	1821      	adds	r1, r4, r0
 8017dbc:	428a      	cmp	r2, r1
 8017dbe:	bf04      	itt	eq
 8017dc0:	6811      	ldreq	r1, [r2, #0]
 8017dc2:	6852      	ldreq	r2, [r2, #4]
 8017dc4:	6062      	str	r2, [r4, #4]
 8017dc6:	bf04      	itt	eq
 8017dc8:	1809      	addeq	r1, r1, r0
 8017dca:	6021      	streq	r1, [r4, #0]
 8017dcc:	605c      	str	r4, [r3, #4]
 8017dce:	e7c7      	b.n	8017d60 <_free_r+0x24>
 8017dd0:	bd38      	pop	{r3, r4, r5, pc}
 8017dd2:	bf00      	nop
 8017dd4:	200481d0 	.word	0x200481d0

08017dd8 <_malloc_r>:
 8017dd8:	b570      	push	{r4, r5, r6, lr}
 8017dda:	1ccd      	adds	r5, r1, #3
 8017ddc:	f025 0503 	bic.w	r5, r5, #3
 8017de0:	3508      	adds	r5, #8
 8017de2:	2d0c      	cmp	r5, #12
 8017de4:	bf38      	it	cc
 8017de6:	250c      	movcc	r5, #12
 8017de8:	2d00      	cmp	r5, #0
 8017dea:	4606      	mov	r6, r0
 8017dec:	db01      	blt.n	8017df2 <_malloc_r+0x1a>
 8017dee:	42a9      	cmp	r1, r5
 8017df0:	d903      	bls.n	8017dfa <_malloc_r+0x22>
 8017df2:	230c      	movs	r3, #12
 8017df4:	6033      	str	r3, [r6, #0]
 8017df6:	2000      	movs	r0, #0
 8017df8:	bd70      	pop	{r4, r5, r6, pc}
 8017dfa:	f000 fddb 	bl	80189b4 <__malloc_lock>
 8017dfe:	4a21      	ldr	r2, [pc, #132]	; (8017e84 <_malloc_r+0xac>)
 8017e00:	6814      	ldr	r4, [r2, #0]
 8017e02:	4621      	mov	r1, r4
 8017e04:	b991      	cbnz	r1, 8017e2c <_malloc_r+0x54>
 8017e06:	4c20      	ldr	r4, [pc, #128]	; (8017e88 <_malloc_r+0xb0>)
 8017e08:	6823      	ldr	r3, [r4, #0]
 8017e0a:	b91b      	cbnz	r3, 8017e14 <_malloc_r+0x3c>
 8017e0c:	4630      	mov	r0, r6
 8017e0e:	f000 fc91 	bl	8018734 <_sbrk_r>
 8017e12:	6020      	str	r0, [r4, #0]
 8017e14:	4629      	mov	r1, r5
 8017e16:	4630      	mov	r0, r6
 8017e18:	f000 fc8c 	bl	8018734 <_sbrk_r>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d124      	bne.n	8017e6a <_malloc_r+0x92>
 8017e20:	230c      	movs	r3, #12
 8017e22:	6033      	str	r3, [r6, #0]
 8017e24:	4630      	mov	r0, r6
 8017e26:	f000 fdc6 	bl	80189b6 <__malloc_unlock>
 8017e2a:	e7e4      	b.n	8017df6 <_malloc_r+0x1e>
 8017e2c:	680b      	ldr	r3, [r1, #0]
 8017e2e:	1b5b      	subs	r3, r3, r5
 8017e30:	d418      	bmi.n	8017e64 <_malloc_r+0x8c>
 8017e32:	2b0b      	cmp	r3, #11
 8017e34:	d90f      	bls.n	8017e56 <_malloc_r+0x7e>
 8017e36:	600b      	str	r3, [r1, #0]
 8017e38:	50cd      	str	r5, [r1, r3]
 8017e3a:	18cc      	adds	r4, r1, r3
 8017e3c:	4630      	mov	r0, r6
 8017e3e:	f000 fdba 	bl	80189b6 <__malloc_unlock>
 8017e42:	f104 000b 	add.w	r0, r4, #11
 8017e46:	1d23      	adds	r3, r4, #4
 8017e48:	f020 0007 	bic.w	r0, r0, #7
 8017e4c:	1ac3      	subs	r3, r0, r3
 8017e4e:	d0d3      	beq.n	8017df8 <_malloc_r+0x20>
 8017e50:	425a      	negs	r2, r3
 8017e52:	50e2      	str	r2, [r4, r3]
 8017e54:	e7d0      	b.n	8017df8 <_malloc_r+0x20>
 8017e56:	428c      	cmp	r4, r1
 8017e58:	684b      	ldr	r3, [r1, #4]
 8017e5a:	bf16      	itet	ne
 8017e5c:	6063      	strne	r3, [r4, #4]
 8017e5e:	6013      	streq	r3, [r2, #0]
 8017e60:	460c      	movne	r4, r1
 8017e62:	e7eb      	b.n	8017e3c <_malloc_r+0x64>
 8017e64:	460c      	mov	r4, r1
 8017e66:	6849      	ldr	r1, [r1, #4]
 8017e68:	e7cc      	b.n	8017e04 <_malloc_r+0x2c>
 8017e6a:	1cc4      	adds	r4, r0, #3
 8017e6c:	f024 0403 	bic.w	r4, r4, #3
 8017e70:	42a0      	cmp	r0, r4
 8017e72:	d005      	beq.n	8017e80 <_malloc_r+0xa8>
 8017e74:	1a21      	subs	r1, r4, r0
 8017e76:	4630      	mov	r0, r6
 8017e78:	f000 fc5c 	bl	8018734 <_sbrk_r>
 8017e7c:	3001      	adds	r0, #1
 8017e7e:	d0cf      	beq.n	8017e20 <_malloc_r+0x48>
 8017e80:	6025      	str	r5, [r4, #0]
 8017e82:	e7db      	b.n	8017e3c <_malloc_r+0x64>
 8017e84:	200481d0 	.word	0x200481d0
 8017e88:	200481d4 	.word	0x200481d4

08017e8c <__ssputs_r>:
 8017e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e90:	688e      	ldr	r6, [r1, #8]
 8017e92:	429e      	cmp	r6, r3
 8017e94:	4682      	mov	sl, r0
 8017e96:	460c      	mov	r4, r1
 8017e98:	4690      	mov	r8, r2
 8017e9a:	4699      	mov	r9, r3
 8017e9c:	d837      	bhi.n	8017f0e <__ssputs_r+0x82>
 8017e9e:	898a      	ldrh	r2, [r1, #12]
 8017ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ea4:	d031      	beq.n	8017f0a <__ssputs_r+0x7e>
 8017ea6:	6825      	ldr	r5, [r4, #0]
 8017ea8:	6909      	ldr	r1, [r1, #16]
 8017eaa:	1a6f      	subs	r7, r5, r1
 8017eac:	6965      	ldr	r5, [r4, #20]
 8017eae:	2302      	movs	r3, #2
 8017eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017eb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8017eb8:	f109 0301 	add.w	r3, r9, #1
 8017ebc:	443b      	add	r3, r7
 8017ebe:	429d      	cmp	r5, r3
 8017ec0:	bf38      	it	cc
 8017ec2:	461d      	movcc	r5, r3
 8017ec4:	0553      	lsls	r3, r2, #21
 8017ec6:	d530      	bpl.n	8017f2a <__ssputs_r+0x9e>
 8017ec8:	4629      	mov	r1, r5
 8017eca:	f7ff ff85 	bl	8017dd8 <_malloc_r>
 8017ece:	4606      	mov	r6, r0
 8017ed0:	b950      	cbnz	r0, 8017ee8 <__ssputs_r+0x5c>
 8017ed2:	230c      	movs	r3, #12
 8017ed4:	f8ca 3000 	str.w	r3, [sl]
 8017ed8:	89a3      	ldrh	r3, [r4, #12]
 8017eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ede:	81a3      	strh	r3, [r4, #12]
 8017ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ee8:	463a      	mov	r2, r7
 8017eea:	6921      	ldr	r1, [r4, #16]
 8017eec:	f7ff fb0e 	bl	801750c <memcpy>
 8017ef0:	89a3      	ldrh	r3, [r4, #12]
 8017ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017efa:	81a3      	strh	r3, [r4, #12]
 8017efc:	6126      	str	r6, [r4, #16]
 8017efe:	6165      	str	r5, [r4, #20]
 8017f00:	443e      	add	r6, r7
 8017f02:	1bed      	subs	r5, r5, r7
 8017f04:	6026      	str	r6, [r4, #0]
 8017f06:	60a5      	str	r5, [r4, #8]
 8017f08:	464e      	mov	r6, r9
 8017f0a:	454e      	cmp	r6, r9
 8017f0c:	d900      	bls.n	8017f10 <__ssputs_r+0x84>
 8017f0e:	464e      	mov	r6, r9
 8017f10:	4632      	mov	r2, r6
 8017f12:	4641      	mov	r1, r8
 8017f14:	6820      	ldr	r0, [r4, #0]
 8017f16:	f000 fd34 	bl	8018982 <memmove>
 8017f1a:	68a3      	ldr	r3, [r4, #8]
 8017f1c:	1b9b      	subs	r3, r3, r6
 8017f1e:	60a3      	str	r3, [r4, #8]
 8017f20:	6823      	ldr	r3, [r4, #0]
 8017f22:	441e      	add	r6, r3
 8017f24:	6026      	str	r6, [r4, #0]
 8017f26:	2000      	movs	r0, #0
 8017f28:	e7dc      	b.n	8017ee4 <__ssputs_r+0x58>
 8017f2a:	462a      	mov	r2, r5
 8017f2c:	f000 fd44 	bl	80189b8 <_realloc_r>
 8017f30:	4606      	mov	r6, r0
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d1e2      	bne.n	8017efc <__ssputs_r+0x70>
 8017f36:	6921      	ldr	r1, [r4, #16]
 8017f38:	4650      	mov	r0, sl
 8017f3a:	f7ff feff 	bl	8017d3c <_free_r>
 8017f3e:	e7c8      	b.n	8017ed2 <__ssputs_r+0x46>

08017f40 <_svfiprintf_r>:
 8017f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f44:	461d      	mov	r5, r3
 8017f46:	898b      	ldrh	r3, [r1, #12]
 8017f48:	061f      	lsls	r7, r3, #24
 8017f4a:	b09d      	sub	sp, #116	; 0x74
 8017f4c:	4680      	mov	r8, r0
 8017f4e:	460c      	mov	r4, r1
 8017f50:	4616      	mov	r6, r2
 8017f52:	d50f      	bpl.n	8017f74 <_svfiprintf_r+0x34>
 8017f54:	690b      	ldr	r3, [r1, #16]
 8017f56:	b96b      	cbnz	r3, 8017f74 <_svfiprintf_r+0x34>
 8017f58:	2140      	movs	r1, #64	; 0x40
 8017f5a:	f7ff ff3d 	bl	8017dd8 <_malloc_r>
 8017f5e:	6020      	str	r0, [r4, #0]
 8017f60:	6120      	str	r0, [r4, #16]
 8017f62:	b928      	cbnz	r0, 8017f70 <_svfiprintf_r+0x30>
 8017f64:	230c      	movs	r3, #12
 8017f66:	f8c8 3000 	str.w	r3, [r8]
 8017f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017f6e:	e0c8      	b.n	8018102 <_svfiprintf_r+0x1c2>
 8017f70:	2340      	movs	r3, #64	; 0x40
 8017f72:	6163      	str	r3, [r4, #20]
 8017f74:	2300      	movs	r3, #0
 8017f76:	9309      	str	r3, [sp, #36]	; 0x24
 8017f78:	2320      	movs	r3, #32
 8017f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f7e:	2330      	movs	r3, #48	; 0x30
 8017f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f84:	9503      	str	r5, [sp, #12]
 8017f86:	f04f 0b01 	mov.w	fp, #1
 8017f8a:	4637      	mov	r7, r6
 8017f8c:	463d      	mov	r5, r7
 8017f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017f92:	b10b      	cbz	r3, 8017f98 <_svfiprintf_r+0x58>
 8017f94:	2b25      	cmp	r3, #37	; 0x25
 8017f96:	d13e      	bne.n	8018016 <_svfiprintf_r+0xd6>
 8017f98:	ebb7 0a06 	subs.w	sl, r7, r6
 8017f9c:	d00b      	beq.n	8017fb6 <_svfiprintf_r+0x76>
 8017f9e:	4653      	mov	r3, sl
 8017fa0:	4632      	mov	r2, r6
 8017fa2:	4621      	mov	r1, r4
 8017fa4:	4640      	mov	r0, r8
 8017fa6:	f7ff ff71 	bl	8017e8c <__ssputs_r>
 8017faa:	3001      	adds	r0, #1
 8017fac:	f000 80a4 	beq.w	80180f8 <_svfiprintf_r+0x1b8>
 8017fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fb2:	4453      	add	r3, sl
 8017fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb6:	783b      	ldrb	r3, [r7, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	f000 809d 	beq.w	80180f8 <_svfiprintf_r+0x1b8>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fc8:	9304      	str	r3, [sp, #16]
 8017fca:	9307      	str	r3, [sp, #28]
 8017fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8017fd2:	462f      	mov	r7, r5
 8017fd4:	2205      	movs	r2, #5
 8017fd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017fda:	4850      	ldr	r0, [pc, #320]	; (801811c <_svfiprintf_r+0x1dc>)
 8017fdc:	f7e8 f918 	bl	8000210 <memchr>
 8017fe0:	9b04      	ldr	r3, [sp, #16]
 8017fe2:	b9d0      	cbnz	r0, 801801a <_svfiprintf_r+0xda>
 8017fe4:	06d9      	lsls	r1, r3, #27
 8017fe6:	bf44      	itt	mi
 8017fe8:	2220      	movmi	r2, #32
 8017fea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017fee:	071a      	lsls	r2, r3, #28
 8017ff0:	bf44      	itt	mi
 8017ff2:	222b      	movmi	r2, #43	; 0x2b
 8017ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ff8:	782a      	ldrb	r2, [r5, #0]
 8017ffa:	2a2a      	cmp	r2, #42	; 0x2a
 8017ffc:	d015      	beq.n	801802a <_svfiprintf_r+0xea>
 8017ffe:	9a07      	ldr	r2, [sp, #28]
 8018000:	462f      	mov	r7, r5
 8018002:	2000      	movs	r0, #0
 8018004:	250a      	movs	r5, #10
 8018006:	4639      	mov	r1, r7
 8018008:	f811 3b01 	ldrb.w	r3, [r1], #1
 801800c:	3b30      	subs	r3, #48	; 0x30
 801800e:	2b09      	cmp	r3, #9
 8018010:	d94d      	bls.n	80180ae <_svfiprintf_r+0x16e>
 8018012:	b1b8      	cbz	r0, 8018044 <_svfiprintf_r+0x104>
 8018014:	e00f      	b.n	8018036 <_svfiprintf_r+0xf6>
 8018016:	462f      	mov	r7, r5
 8018018:	e7b8      	b.n	8017f8c <_svfiprintf_r+0x4c>
 801801a:	4a40      	ldr	r2, [pc, #256]	; (801811c <_svfiprintf_r+0x1dc>)
 801801c:	1a80      	subs	r0, r0, r2
 801801e:	fa0b f000 	lsl.w	r0, fp, r0
 8018022:	4318      	orrs	r0, r3
 8018024:	9004      	str	r0, [sp, #16]
 8018026:	463d      	mov	r5, r7
 8018028:	e7d3      	b.n	8017fd2 <_svfiprintf_r+0x92>
 801802a:	9a03      	ldr	r2, [sp, #12]
 801802c:	1d11      	adds	r1, r2, #4
 801802e:	6812      	ldr	r2, [r2, #0]
 8018030:	9103      	str	r1, [sp, #12]
 8018032:	2a00      	cmp	r2, #0
 8018034:	db01      	blt.n	801803a <_svfiprintf_r+0xfa>
 8018036:	9207      	str	r2, [sp, #28]
 8018038:	e004      	b.n	8018044 <_svfiprintf_r+0x104>
 801803a:	4252      	negs	r2, r2
 801803c:	f043 0302 	orr.w	r3, r3, #2
 8018040:	9207      	str	r2, [sp, #28]
 8018042:	9304      	str	r3, [sp, #16]
 8018044:	783b      	ldrb	r3, [r7, #0]
 8018046:	2b2e      	cmp	r3, #46	; 0x2e
 8018048:	d10c      	bne.n	8018064 <_svfiprintf_r+0x124>
 801804a:	787b      	ldrb	r3, [r7, #1]
 801804c:	2b2a      	cmp	r3, #42	; 0x2a
 801804e:	d133      	bne.n	80180b8 <_svfiprintf_r+0x178>
 8018050:	9b03      	ldr	r3, [sp, #12]
 8018052:	1d1a      	adds	r2, r3, #4
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	9203      	str	r2, [sp, #12]
 8018058:	2b00      	cmp	r3, #0
 801805a:	bfb8      	it	lt
 801805c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018060:	3702      	adds	r7, #2
 8018062:	9305      	str	r3, [sp, #20]
 8018064:	4d2e      	ldr	r5, [pc, #184]	; (8018120 <_svfiprintf_r+0x1e0>)
 8018066:	7839      	ldrb	r1, [r7, #0]
 8018068:	2203      	movs	r2, #3
 801806a:	4628      	mov	r0, r5
 801806c:	f7e8 f8d0 	bl	8000210 <memchr>
 8018070:	b138      	cbz	r0, 8018082 <_svfiprintf_r+0x142>
 8018072:	2340      	movs	r3, #64	; 0x40
 8018074:	1b40      	subs	r0, r0, r5
 8018076:	fa03 f000 	lsl.w	r0, r3, r0
 801807a:	9b04      	ldr	r3, [sp, #16]
 801807c:	4303      	orrs	r3, r0
 801807e:	3701      	adds	r7, #1
 8018080:	9304      	str	r3, [sp, #16]
 8018082:	7839      	ldrb	r1, [r7, #0]
 8018084:	4827      	ldr	r0, [pc, #156]	; (8018124 <_svfiprintf_r+0x1e4>)
 8018086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801808a:	2206      	movs	r2, #6
 801808c:	1c7e      	adds	r6, r7, #1
 801808e:	f7e8 f8bf 	bl	8000210 <memchr>
 8018092:	2800      	cmp	r0, #0
 8018094:	d038      	beq.n	8018108 <_svfiprintf_r+0x1c8>
 8018096:	4b24      	ldr	r3, [pc, #144]	; (8018128 <_svfiprintf_r+0x1e8>)
 8018098:	bb13      	cbnz	r3, 80180e0 <_svfiprintf_r+0x1a0>
 801809a:	9b03      	ldr	r3, [sp, #12]
 801809c:	3307      	adds	r3, #7
 801809e:	f023 0307 	bic.w	r3, r3, #7
 80180a2:	3308      	adds	r3, #8
 80180a4:	9303      	str	r3, [sp, #12]
 80180a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a8:	444b      	add	r3, r9
 80180aa:	9309      	str	r3, [sp, #36]	; 0x24
 80180ac:	e76d      	b.n	8017f8a <_svfiprintf_r+0x4a>
 80180ae:	fb05 3202 	mla	r2, r5, r2, r3
 80180b2:	2001      	movs	r0, #1
 80180b4:	460f      	mov	r7, r1
 80180b6:	e7a6      	b.n	8018006 <_svfiprintf_r+0xc6>
 80180b8:	2300      	movs	r3, #0
 80180ba:	3701      	adds	r7, #1
 80180bc:	9305      	str	r3, [sp, #20]
 80180be:	4619      	mov	r1, r3
 80180c0:	250a      	movs	r5, #10
 80180c2:	4638      	mov	r0, r7
 80180c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180c8:	3a30      	subs	r2, #48	; 0x30
 80180ca:	2a09      	cmp	r2, #9
 80180cc:	d903      	bls.n	80180d6 <_svfiprintf_r+0x196>
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d0c8      	beq.n	8018064 <_svfiprintf_r+0x124>
 80180d2:	9105      	str	r1, [sp, #20]
 80180d4:	e7c6      	b.n	8018064 <_svfiprintf_r+0x124>
 80180d6:	fb05 2101 	mla	r1, r5, r1, r2
 80180da:	2301      	movs	r3, #1
 80180dc:	4607      	mov	r7, r0
 80180de:	e7f0      	b.n	80180c2 <_svfiprintf_r+0x182>
 80180e0:	ab03      	add	r3, sp, #12
 80180e2:	9300      	str	r3, [sp, #0]
 80180e4:	4622      	mov	r2, r4
 80180e6:	4b11      	ldr	r3, [pc, #68]	; (801812c <_svfiprintf_r+0x1ec>)
 80180e8:	a904      	add	r1, sp, #16
 80180ea:	4640      	mov	r0, r8
 80180ec:	f7fc fb5e 	bl	80147ac <_printf_float>
 80180f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80180f4:	4681      	mov	r9, r0
 80180f6:	d1d6      	bne.n	80180a6 <_svfiprintf_r+0x166>
 80180f8:	89a3      	ldrh	r3, [r4, #12]
 80180fa:	065b      	lsls	r3, r3, #25
 80180fc:	f53f af35 	bmi.w	8017f6a <_svfiprintf_r+0x2a>
 8018100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018102:	b01d      	add	sp, #116	; 0x74
 8018104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018108:	ab03      	add	r3, sp, #12
 801810a:	9300      	str	r3, [sp, #0]
 801810c:	4622      	mov	r2, r4
 801810e:	4b07      	ldr	r3, [pc, #28]	; (801812c <_svfiprintf_r+0x1ec>)
 8018110:	a904      	add	r1, sp, #16
 8018112:	4640      	mov	r0, r8
 8018114:	f7fc fe00 	bl	8014d18 <_printf_i>
 8018118:	e7ea      	b.n	80180f0 <_svfiprintf_r+0x1b0>
 801811a:	bf00      	nop
 801811c:	080190d4 	.word	0x080190d4
 8018120:	080190da 	.word	0x080190da
 8018124:	080190de 	.word	0x080190de
 8018128:	080147ad 	.word	0x080147ad
 801812c:	08017e8d 	.word	0x08017e8d

08018130 <_sungetc_r>:
 8018130:	b538      	push	{r3, r4, r5, lr}
 8018132:	1c4b      	adds	r3, r1, #1
 8018134:	4614      	mov	r4, r2
 8018136:	d103      	bne.n	8018140 <_sungetc_r+0x10>
 8018138:	f04f 35ff 	mov.w	r5, #4294967295
 801813c:	4628      	mov	r0, r5
 801813e:	bd38      	pop	{r3, r4, r5, pc}
 8018140:	8993      	ldrh	r3, [r2, #12]
 8018142:	f023 0320 	bic.w	r3, r3, #32
 8018146:	8193      	strh	r3, [r2, #12]
 8018148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801814a:	6852      	ldr	r2, [r2, #4]
 801814c:	b2cd      	uxtb	r5, r1
 801814e:	b18b      	cbz	r3, 8018174 <_sungetc_r+0x44>
 8018150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018152:	4293      	cmp	r3, r2
 8018154:	dd08      	ble.n	8018168 <_sungetc_r+0x38>
 8018156:	6823      	ldr	r3, [r4, #0]
 8018158:	1e5a      	subs	r2, r3, #1
 801815a:	6022      	str	r2, [r4, #0]
 801815c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018160:	6863      	ldr	r3, [r4, #4]
 8018162:	3301      	adds	r3, #1
 8018164:	6063      	str	r3, [r4, #4]
 8018166:	e7e9      	b.n	801813c <_sungetc_r+0xc>
 8018168:	4621      	mov	r1, r4
 801816a:	f000 fbc3 	bl	80188f4 <__submore>
 801816e:	2800      	cmp	r0, #0
 8018170:	d0f1      	beq.n	8018156 <_sungetc_r+0x26>
 8018172:	e7e1      	b.n	8018138 <_sungetc_r+0x8>
 8018174:	6921      	ldr	r1, [r4, #16]
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	b151      	cbz	r1, 8018190 <_sungetc_r+0x60>
 801817a:	4299      	cmp	r1, r3
 801817c:	d208      	bcs.n	8018190 <_sungetc_r+0x60>
 801817e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018182:	42a9      	cmp	r1, r5
 8018184:	d104      	bne.n	8018190 <_sungetc_r+0x60>
 8018186:	3b01      	subs	r3, #1
 8018188:	3201      	adds	r2, #1
 801818a:	6023      	str	r3, [r4, #0]
 801818c:	6062      	str	r2, [r4, #4]
 801818e:	e7d5      	b.n	801813c <_sungetc_r+0xc>
 8018190:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018198:	6363      	str	r3, [r4, #52]	; 0x34
 801819a:	2303      	movs	r3, #3
 801819c:	63a3      	str	r3, [r4, #56]	; 0x38
 801819e:	4623      	mov	r3, r4
 80181a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80181a4:	6023      	str	r3, [r4, #0]
 80181a6:	2301      	movs	r3, #1
 80181a8:	e7dc      	b.n	8018164 <_sungetc_r+0x34>

080181aa <__ssrefill_r>:
 80181aa:	b510      	push	{r4, lr}
 80181ac:	460c      	mov	r4, r1
 80181ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80181b0:	b169      	cbz	r1, 80181ce <__ssrefill_r+0x24>
 80181b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181b6:	4299      	cmp	r1, r3
 80181b8:	d001      	beq.n	80181be <__ssrefill_r+0x14>
 80181ba:	f7ff fdbf 	bl	8017d3c <_free_r>
 80181be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181c0:	6063      	str	r3, [r4, #4]
 80181c2:	2000      	movs	r0, #0
 80181c4:	6360      	str	r0, [r4, #52]	; 0x34
 80181c6:	b113      	cbz	r3, 80181ce <__ssrefill_r+0x24>
 80181c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80181ca:	6023      	str	r3, [r4, #0]
 80181cc:	bd10      	pop	{r4, pc}
 80181ce:	6923      	ldr	r3, [r4, #16]
 80181d0:	6023      	str	r3, [r4, #0]
 80181d2:	2300      	movs	r3, #0
 80181d4:	6063      	str	r3, [r4, #4]
 80181d6:	89a3      	ldrh	r3, [r4, #12]
 80181d8:	f043 0320 	orr.w	r3, r3, #32
 80181dc:	81a3      	strh	r3, [r4, #12]
 80181de:	f04f 30ff 	mov.w	r0, #4294967295
 80181e2:	e7f3      	b.n	80181cc <__ssrefill_r+0x22>

080181e4 <__ssvfiscanf_r>:
 80181e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80181ec:	460c      	mov	r4, r1
 80181ee:	2100      	movs	r1, #0
 80181f0:	9144      	str	r1, [sp, #272]	; 0x110
 80181f2:	9145      	str	r1, [sp, #276]	; 0x114
 80181f4:	499f      	ldr	r1, [pc, #636]	; (8018474 <__ssvfiscanf_r+0x290>)
 80181f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80181f8:	f10d 0804 	add.w	r8, sp, #4
 80181fc:	499e      	ldr	r1, [pc, #632]	; (8018478 <__ssvfiscanf_r+0x294>)
 80181fe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801847c <__ssvfiscanf_r+0x298>
 8018202:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018206:	4606      	mov	r6, r0
 8018208:	4692      	mov	sl, r2
 801820a:	91a1      	str	r1, [sp, #644]	; 0x284
 801820c:	9300      	str	r3, [sp, #0]
 801820e:	270a      	movs	r7, #10
 8018210:	f89a 3000 	ldrb.w	r3, [sl]
 8018214:	2b00      	cmp	r3, #0
 8018216:	f000 812a 	beq.w	801846e <__ssvfiscanf_r+0x28a>
 801821a:	4655      	mov	r5, sl
 801821c:	f7ff f93e 	bl	801749c <__locale_ctype_ptr>
 8018220:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018224:	4458      	add	r0, fp
 8018226:	7843      	ldrb	r3, [r0, #1]
 8018228:	f013 0308 	ands.w	r3, r3, #8
 801822c:	d01c      	beq.n	8018268 <__ssvfiscanf_r+0x84>
 801822e:	6863      	ldr	r3, [r4, #4]
 8018230:	2b00      	cmp	r3, #0
 8018232:	dd12      	ble.n	801825a <__ssvfiscanf_r+0x76>
 8018234:	f7ff f932 	bl	801749c <__locale_ctype_ptr>
 8018238:	6823      	ldr	r3, [r4, #0]
 801823a:	781a      	ldrb	r2, [r3, #0]
 801823c:	4410      	add	r0, r2
 801823e:	7842      	ldrb	r2, [r0, #1]
 8018240:	0712      	lsls	r2, r2, #28
 8018242:	d401      	bmi.n	8018248 <__ssvfiscanf_r+0x64>
 8018244:	46aa      	mov	sl, r5
 8018246:	e7e3      	b.n	8018210 <__ssvfiscanf_r+0x2c>
 8018248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801824a:	3201      	adds	r2, #1
 801824c:	9245      	str	r2, [sp, #276]	; 0x114
 801824e:	6862      	ldr	r2, [r4, #4]
 8018250:	3301      	adds	r3, #1
 8018252:	3a01      	subs	r2, #1
 8018254:	6062      	str	r2, [r4, #4]
 8018256:	6023      	str	r3, [r4, #0]
 8018258:	e7e9      	b.n	801822e <__ssvfiscanf_r+0x4a>
 801825a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801825c:	4621      	mov	r1, r4
 801825e:	4630      	mov	r0, r6
 8018260:	4798      	blx	r3
 8018262:	2800      	cmp	r0, #0
 8018264:	d0e6      	beq.n	8018234 <__ssvfiscanf_r+0x50>
 8018266:	e7ed      	b.n	8018244 <__ssvfiscanf_r+0x60>
 8018268:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801826c:	f040 8082 	bne.w	8018374 <__ssvfiscanf_r+0x190>
 8018270:	9343      	str	r3, [sp, #268]	; 0x10c
 8018272:	9341      	str	r3, [sp, #260]	; 0x104
 8018274:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018278:	2b2a      	cmp	r3, #42	; 0x2a
 801827a:	d103      	bne.n	8018284 <__ssvfiscanf_r+0xa0>
 801827c:	2310      	movs	r3, #16
 801827e:	9341      	str	r3, [sp, #260]	; 0x104
 8018280:	f10a 0502 	add.w	r5, sl, #2
 8018284:	46aa      	mov	sl, r5
 8018286:	f815 1b01 	ldrb.w	r1, [r5], #1
 801828a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801828e:	2a09      	cmp	r2, #9
 8018290:	d922      	bls.n	80182d8 <__ssvfiscanf_r+0xf4>
 8018292:	2203      	movs	r2, #3
 8018294:	4879      	ldr	r0, [pc, #484]	; (801847c <__ssvfiscanf_r+0x298>)
 8018296:	f7e7 ffbb 	bl	8000210 <memchr>
 801829a:	b138      	cbz	r0, 80182ac <__ssvfiscanf_r+0xc8>
 801829c:	eba0 0309 	sub.w	r3, r0, r9
 80182a0:	2001      	movs	r0, #1
 80182a2:	4098      	lsls	r0, r3
 80182a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182a6:	4318      	orrs	r0, r3
 80182a8:	9041      	str	r0, [sp, #260]	; 0x104
 80182aa:	46aa      	mov	sl, r5
 80182ac:	f89a 3000 	ldrb.w	r3, [sl]
 80182b0:	2b67      	cmp	r3, #103	; 0x67
 80182b2:	f10a 0501 	add.w	r5, sl, #1
 80182b6:	d82b      	bhi.n	8018310 <__ssvfiscanf_r+0x12c>
 80182b8:	2b65      	cmp	r3, #101	; 0x65
 80182ba:	f080 809f 	bcs.w	80183fc <__ssvfiscanf_r+0x218>
 80182be:	2b47      	cmp	r3, #71	; 0x47
 80182c0:	d810      	bhi.n	80182e4 <__ssvfiscanf_r+0x100>
 80182c2:	2b45      	cmp	r3, #69	; 0x45
 80182c4:	f080 809a 	bcs.w	80183fc <__ssvfiscanf_r+0x218>
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d06c      	beq.n	80183a6 <__ssvfiscanf_r+0x1c2>
 80182cc:	2b25      	cmp	r3, #37	; 0x25
 80182ce:	d051      	beq.n	8018374 <__ssvfiscanf_r+0x190>
 80182d0:	2303      	movs	r3, #3
 80182d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80182d4:	9742      	str	r7, [sp, #264]	; 0x108
 80182d6:	e027      	b.n	8018328 <__ssvfiscanf_r+0x144>
 80182d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80182da:	fb07 1303 	mla	r3, r7, r3, r1
 80182de:	3b30      	subs	r3, #48	; 0x30
 80182e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80182e2:	e7cf      	b.n	8018284 <__ssvfiscanf_r+0xa0>
 80182e4:	2b5b      	cmp	r3, #91	; 0x5b
 80182e6:	d06a      	beq.n	80183be <__ssvfiscanf_r+0x1da>
 80182e8:	d80c      	bhi.n	8018304 <__ssvfiscanf_r+0x120>
 80182ea:	2b58      	cmp	r3, #88	; 0x58
 80182ec:	d1f0      	bne.n	80182d0 <__ssvfiscanf_r+0xec>
 80182ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80182f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182f4:	9241      	str	r2, [sp, #260]	; 0x104
 80182f6:	2210      	movs	r2, #16
 80182f8:	9242      	str	r2, [sp, #264]	; 0x108
 80182fa:	2b6e      	cmp	r3, #110	; 0x6e
 80182fc:	bf8c      	ite	hi
 80182fe:	2304      	movhi	r3, #4
 8018300:	2303      	movls	r3, #3
 8018302:	e010      	b.n	8018326 <__ssvfiscanf_r+0x142>
 8018304:	2b63      	cmp	r3, #99	; 0x63
 8018306:	d065      	beq.n	80183d4 <__ssvfiscanf_r+0x1f0>
 8018308:	2b64      	cmp	r3, #100	; 0x64
 801830a:	d1e1      	bne.n	80182d0 <__ssvfiscanf_r+0xec>
 801830c:	9742      	str	r7, [sp, #264]	; 0x108
 801830e:	e7f4      	b.n	80182fa <__ssvfiscanf_r+0x116>
 8018310:	2b70      	cmp	r3, #112	; 0x70
 8018312:	d04b      	beq.n	80183ac <__ssvfiscanf_r+0x1c8>
 8018314:	d826      	bhi.n	8018364 <__ssvfiscanf_r+0x180>
 8018316:	2b6e      	cmp	r3, #110	; 0x6e
 8018318:	d062      	beq.n	80183e0 <__ssvfiscanf_r+0x1fc>
 801831a:	d84c      	bhi.n	80183b6 <__ssvfiscanf_r+0x1d2>
 801831c:	2b69      	cmp	r3, #105	; 0x69
 801831e:	d1d7      	bne.n	80182d0 <__ssvfiscanf_r+0xec>
 8018320:	2300      	movs	r3, #0
 8018322:	9342      	str	r3, [sp, #264]	; 0x108
 8018324:	2303      	movs	r3, #3
 8018326:	9347      	str	r3, [sp, #284]	; 0x11c
 8018328:	6863      	ldr	r3, [r4, #4]
 801832a:	2b00      	cmp	r3, #0
 801832c:	dd68      	ble.n	8018400 <__ssvfiscanf_r+0x21c>
 801832e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018330:	0659      	lsls	r1, r3, #25
 8018332:	d407      	bmi.n	8018344 <__ssvfiscanf_r+0x160>
 8018334:	f7ff f8b2 	bl	801749c <__locale_ctype_ptr>
 8018338:	6823      	ldr	r3, [r4, #0]
 801833a:	781a      	ldrb	r2, [r3, #0]
 801833c:	4410      	add	r0, r2
 801833e:	7842      	ldrb	r2, [r0, #1]
 8018340:	0712      	lsls	r2, r2, #28
 8018342:	d464      	bmi.n	801840e <__ssvfiscanf_r+0x22a>
 8018344:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018346:	2b02      	cmp	r3, #2
 8018348:	dc73      	bgt.n	8018432 <__ssvfiscanf_r+0x24e>
 801834a:	466b      	mov	r3, sp
 801834c:	4622      	mov	r2, r4
 801834e:	a941      	add	r1, sp, #260	; 0x104
 8018350:	4630      	mov	r0, r6
 8018352:	f000 f897 	bl	8018484 <_scanf_chars>
 8018356:	2801      	cmp	r0, #1
 8018358:	f000 8089 	beq.w	801846e <__ssvfiscanf_r+0x28a>
 801835c:	2802      	cmp	r0, #2
 801835e:	f47f af71 	bne.w	8018244 <__ssvfiscanf_r+0x60>
 8018362:	e01d      	b.n	80183a0 <__ssvfiscanf_r+0x1bc>
 8018364:	2b75      	cmp	r3, #117	; 0x75
 8018366:	d0d1      	beq.n	801830c <__ssvfiscanf_r+0x128>
 8018368:	2b78      	cmp	r3, #120	; 0x78
 801836a:	d0c0      	beq.n	80182ee <__ssvfiscanf_r+0x10a>
 801836c:	2b73      	cmp	r3, #115	; 0x73
 801836e:	d1af      	bne.n	80182d0 <__ssvfiscanf_r+0xec>
 8018370:	2302      	movs	r3, #2
 8018372:	e7d8      	b.n	8018326 <__ssvfiscanf_r+0x142>
 8018374:	6863      	ldr	r3, [r4, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	dd0c      	ble.n	8018394 <__ssvfiscanf_r+0x1b0>
 801837a:	6823      	ldr	r3, [r4, #0]
 801837c:	781a      	ldrb	r2, [r3, #0]
 801837e:	455a      	cmp	r2, fp
 8018380:	d175      	bne.n	801846e <__ssvfiscanf_r+0x28a>
 8018382:	3301      	adds	r3, #1
 8018384:	6862      	ldr	r2, [r4, #4]
 8018386:	6023      	str	r3, [r4, #0]
 8018388:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801838a:	3a01      	subs	r2, #1
 801838c:	3301      	adds	r3, #1
 801838e:	6062      	str	r2, [r4, #4]
 8018390:	9345      	str	r3, [sp, #276]	; 0x114
 8018392:	e757      	b.n	8018244 <__ssvfiscanf_r+0x60>
 8018394:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018396:	4621      	mov	r1, r4
 8018398:	4630      	mov	r0, r6
 801839a:	4798      	blx	r3
 801839c:	2800      	cmp	r0, #0
 801839e:	d0ec      	beq.n	801837a <__ssvfiscanf_r+0x196>
 80183a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80183a2:	2800      	cmp	r0, #0
 80183a4:	d159      	bne.n	801845a <__ssvfiscanf_r+0x276>
 80183a6:	f04f 30ff 	mov.w	r0, #4294967295
 80183aa:	e05c      	b.n	8018466 <__ssvfiscanf_r+0x282>
 80183ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80183ae:	f042 0220 	orr.w	r2, r2, #32
 80183b2:	9241      	str	r2, [sp, #260]	; 0x104
 80183b4:	e79b      	b.n	80182ee <__ssvfiscanf_r+0x10a>
 80183b6:	2308      	movs	r3, #8
 80183b8:	9342      	str	r3, [sp, #264]	; 0x108
 80183ba:	2304      	movs	r3, #4
 80183bc:	e7b3      	b.n	8018326 <__ssvfiscanf_r+0x142>
 80183be:	4629      	mov	r1, r5
 80183c0:	4640      	mov	r0, r8
 80183c2:	f000 f9c7 	bl	8018754 <__sccl>
 80183c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80183c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183cc:	9341      	str	r3, [sp, #260]	; 0x104
 80183ce:	4605      	mov	r5, r0
 80183d0:	2301      	movs	r3, #1
 80183d2:	e7a8      	b.n	8018326 <__ssvfiscanf_r+0x142>
 80183d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80183d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183da:	9341      	str	r3, [sp, #260]	; 0x104
 80183dc:	2300      	movs	r3, #0
 80183de:	e7a2      	b.n	8018326 <__ssvfiscanf_r+0x142>
 80183e0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80183e2:	06c3      	lsls	r3, r0, #27
 80183e4:	f53f af2e 	bmi.w	8018244 <__ssvfiscanf_r+0x60>
 80183e8:	9b00      	ldr	r3, [sp, #0]
 80183ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80183ec:	1d19      	adds	r1, r3, #4
 80183ee:	9100      	str	r1, [sp, #0]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	07c0      	lsls	r0, r0, #31
 80183f4:	bf4c      	ite	mi
 80183f6:	801a      	strhmi	r2, [r3, #0]
 80183f8:	601a      	strpl	r2, [r3, #0]
 80183fa:	e723      	b.n	8018244 <__ssvfiscanf_r+0x60>
 80183fc:	2305      	movs	r3, #5
 80183fe:	e792      	b.n	8018326 <__ssvfiscanf_r+0x142>
 8018400:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018402:	4621      	mov	r1, r4
 8018404:	4630      	mov	r0, r6
 8018406:	4798      	blx	r3
 8018408:	2800      	cmp	r0, #0
 801840a:	d090      	beq.n	801832e <__ssvfiscanf_r+0x14a>
 801840c:	e7c8      	b.n	80183a0 <__ssvfiscanf_r+0x1bc>
 801840e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018410:	3201      	adds	r2, #1
 8018412:	9245      	str	r2, [sp, #276]	; 0x114
 8018414:	6862      	ldr	r2, [r4, #4]
 8018416:	3a01      	subs	r2, #1
 8018418:	2a00      	cmp	r2, #0
 801841a:	6062      	str	r2, [r4, #4]
 801841c:	dd02      	ble.n	8018424 <__ssvfiscanf_r+0x240>
 801841e:	3301      	adds	r3, #1
 8018420:	6023      	str	r3, [r4, #0]
 8018422:	e787      	b.n	8018334 <__ssvfiscanf_r+0x150>
 8018424:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018426:	4621      	mov	r1, r4
 8018428:	4630      	mov	r0, r6
 801842a:	4798      	blx	r3
 801842c:	2800      	cmp	r0, #0
 801842e:	d081      	beq.n	8018334 <__ssvfiscanf_r+0x150>
 8018430:	e7b6      	b.n	80183a0 <__ssvfiscanf_r+0x1bc>
 8018432:	2b04      	cmp	r3, #4
 8018434:	dc06      	bgt.n	8018444 <__ssvfiscanf_r+0x260>
 8018436:	466b      	mov	r3, sp
 8018438:	4622      	mov	r2, r4
 801843a:	a941      	add	r1, sp, #260	; 0x104
 801843c:	4630      	mov	r0, r6
 801843e:	f000 f885 	bl	801854c <_scanf_i>
 8018442:	e788      	b.n	8018356 <__ssvfiscanf_r+0x172>
 8018444:	4b0e      	ldr	r3, [pc, #56]	; (8018480 <__ssvfiscanf_r+0x29c>)
 8018446:	2b00      	cmp	r3, #0
 8018448:	f43f aefc 	beq.w	8018244 <__ssvfiscanf_r+0x60>
 801844c:	466b      	mov	r3, sp
 801844e:	4622      	mov	r2, r4
 8018450:	a941      	add	r1, sp, #260	; 0x104
 8018452:	4630      	mov	r0, r6
 8018454:	f7fc fd72 	bl	8014f3c <_scanf_float>
 8018458:	e77d      	b.n	8018356 <__ssvfiscanf_r+0x172>
 801845a:	89a3      	ldrh	r3, [r4, #12]
 801845c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018460:	bf18      	it	ne
 8018462:	f04f 30ff 	movne.w	r0, #4294967295
 8018466:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801846e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018470:	e7f9      	b.n	8018466 <__ssvfiscanf_r+0x282>
 8018472:	bf00      	nop
 8018474:	08018131 	.word	0x08018131
 8018478:	080181ab 	.word	0x080181ab
 801847c:	080190da 	.word	0x080190da
 8018480:	08014f3d 	.word	0x08014f3d

08018484 <_scanf_chars>:
 8018484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018488:	4615      	mov	r5, r2
 801848a:	688a      	ldr	r2, [r1, #8]
 801848c:	4680      	mov	r8, r0
 801848e:	460c      	mov	r4, r1
 8018490:	b932      	cbnz	r2, 80184a0 <_scanf_chars+0x1c>
 8018492:	698a      	ldr	r2, [r1, #24]
 8018494:	2a00      	cmp	r2, #0
 8018496:	bf14      	ite	ne
 8018498:	f04f 32ff 	movne.w	r2, #4294967295
 801849c:	2201      	moveq	r2, #1
 801849e:	608a      	str	r2, [r1, #8]
 80184a0:	6822      	ldr	r2, [r4, #0]
 80184a2:	06d1      	lsls	r1, r2, #27
 80184a4:	bf5f      	itttt	pl
 80184a6:	681a      	ldrpl	r2, [r3, #0]
 80184a8:	1d11      	addpl	r1, r2, #4
 80184aa:	6019      	strpl	r1, [r3, #0]
 80184ac:	6817      	ldrpl	r7, [r2, #0]
 80184ae:	2600      	movs	r6, #0
 80184b0:	69a3      	ldr	r3, [r4, #24]
 80184b2:	b1db      	cbz	r3, 80184ec <_scanf_chars+0x68>
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d107      	bne.n	80184c8 <_scanf_chars+0x44>
 80184b8:	682b      	ldr	r3, [r5, #0]
 80184ba:	6962      	ldr	r2, [r4, #20]
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	5cd3      	ldrb	r3, [r2, r3]
 80184c0:	b9a3      	cbnz	r3, 80184ec <_scanf_chars+0x68>
 80184c2:	2e00      	cmp	r6, #0
 80184c4:	d132      	bne.n	801852c <_scanf_chars+0xa8>
 80184c6:	e006      	b.n	80184d6 <_scanf_chars+0x52>
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d007      	beq.n	80184dc <_scanf_chars+0x58>
 80184cc:	2e00      	cmp	r6, #0
 80184ce:	d12d      	bne.n	801852c <_scanf_chars+0xa8>
 80184d0:	69a3      	ldr	r3, [r4, #24]
 80184d2:	2b01      	cmp	r3, #1
 80184d4:	d12a      	bne.n	801852c <_scanf_chars+0xa8>
 80184d6:	2001      	movs	r0, #1
 80184d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184dc:	f7fe ffde 	bl	801749c <__locale_ctype_ptr>
 80184e0:	682b      	ldr	r3, [r5, #0]
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	4418      	add	r0, r3
 80184e6:	7843      	ldrb	r3, [r0, #1]
 80184e8:	071b      	lsls	r3, r3, #28
 80184ea:	d4ef      	bmi.n	80184cc <_scanf_chars+0x48>
 80184ec:	6823      	ldr	r3, [r4, #0]
 80184ee:	06da      	lsls	r2, r3, #27
 80184f0:	bf5e      	ittt	pl
 80184f2:	682b      	ldrpl	r3, [r5, #0]
 80184f4:	781b      	ldrbpl	r3, [r3, #0]
 80184f6:	703b      	strbpl	r3, [r7, #0]
 80184f8:	682a      	ldr	r2, [r5, #0]
 80184fa:	686b      	ldr	r3, [r5, #4]
 80184fc:	f102 0201 	add.w	r2, r2, #1
 8018500:	602a      	str	r2, [r5, #0]
 8018502:	68a2      	ldr	r2, [r4, #8]
 8018504:	f103 33ff 	add.w	r3, r3, #4294967295
 8018508:	f102 32ff 	add.w	r2, r2, #4294967295
 801850c:	606b      	str	r3, [r5, #4]
 801850e:	f106 0601 	add.w	r6, r6, #1
 8018512:	bf58      	it	pl
 8018514:	3701      	addpl	r7, #1
 8018516:	60a2      	str	r2, [r4, #8]
 8018518:	b142      	cbz	r2, 801852c <_scanf_chars+0xa8>
 801851a:	2b00      	cmp	r3, #0
 801851c:	dcc8      	bgt.n	80184b0 <_scanf_chars+0x2c>
 801851e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018522:	4629      	mov	r1, r5
 8018524:	4640      	mov	r0, r8
 8018526:	4798      	blx	r3
 8018528:	2800      	cmp	r0, #0
 801852a:	d0c1      	beq.n	80184b0 <_scanf_chars+0x2c>
 801852c:	6823      	ldr	r3, [r4, #0]
 801852e:	f013 0310 	ands.w	r3, r3, #16
 8018532:	d105      	bne.n	8018540 <_scanf_chars+0xbc>
 8018534:	68e2      	ldr	r2, [r4, #12]
 8018536:	3201      	adds	r2, #1
 8018538:	60e2      	str	r2, [r4, #12]
 801853a:	69a2      	ldr	r2, [r4, #24]
 801853c:	b102      	cbz	r2, 8018540 <_scanf_chars+0xbc>
 801853e:	703b      	strb	r3, [r7, #0]
 8018540:	6923      	ldr	r3, [r4, #16]
 8018542:	441e      	add	r6, r3
 8018544:	6126      	str	r6, [r4, #16]
 8018546:	2000      	movs	r0, #0
 8018548:	e7c6      	b.n	80184d8 <_scanf_chars+0x54>
	...

0801854c <_scanf_i>:
 801854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018550:	469a      	mov	sl, r3
 8018552:	4b74      	ldr	r3, [pc, #464]	; (8018724 <_scanf_i+0x1d8>)
 8018554:	460c      	mov	r4, r1
 8018556:	4683      	mov	fp, r0
 8018558:	4616      	mov	r6, r2
 801855a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801855e:	b087      	sub	sp, #28
 8018560:	ab03      	add	r3, sp, #12
 8018562:	68a7      	ldr	r7, [r4, #8]
 8018564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018568:	4b6f      	ldr	r3, [pc, #444]	; (8018728 <_scanf_i+0x1dc>)
 801856a:	69a1      	ldr	r1, [r4, #24]
 801856c:	4a6f      	ldr	r2, [pc, #444]	; (801872c <_scanf_i+0x1e0>)
 801856e:	2903      	cmp	r1, #3
 8018570:	bf08      	it	eq
 8018572:	461a      	moveq	r2, r3
 8018574:	1e7b      	subs	r3, r7, #1
 8018576:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801857a:	bf84      	itt	hi
 801857c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018580:	60a3      	strhi	r3, [r4, #8]
 8018582:	6823      	ldr	r3, [r4, #0]
 8018584:	9200      	str	r2, [sp, #0]
 8018586:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801858a:	bf88      	it	hi
 801858c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018590:	f104 091c 	add.w	r9, r4, #28
 8018594:	6023      	str	r3, [r4, #0]
 8018596:	bf8c      	ite	hi
 8018598:	197f      	addhi	r7, r7, r5
 801859a:	2700      	movls	r7, #0
 801859c:	464b      	mov	r3, r9
 801859e:	f04f 0800 	mov.w	r8, #0
 80185a2:	9301      	str	r3, [sp, #4]
 80185a4:	6831      	ldr	r1, [r6, #0]
 80185a6:	ab03      	add	r3, sp, #12
 80185a8:	2202      	movs	r2, #2
 80185aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80185ae:	7809      	ldrb	r1, [r1, #0]
 80185b0:	f7e7 fe2e 	bl	8000210 <memchr>
 80185b4:	9b01      	ldr	r3, [sp, #4]
 80185b6:	b330      	cbz	r0, 8018606 <_scanf_i+0xba>
 80185b8:	f1b8 0f01 	cmp.w	r8, #1
 80185bc:	d15a      	bne.n	8018674 <_scanf_i+0x128>
 80185be:	6862      	ldr	r2, [r4, #4]
 80185c0:	b92a      	cbnz	r2, 80185ce <_scanf_i+0x82>
 80185c2:	6822      	ldr	r2, [r4, #0]
 80185c4:	2108      	movs	r1, #8
 80185c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185ca:	6061      	str	r1, [r4, #4]
 80185cc:	6022      	str	r2, [r4, #0]
 80185ce:	6822      	ldr	r2, [r4, #0]
 80185d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80185d4:	6022      	str	r2, [r4, #0]
 80185d6:	68a2      	ldr	r2, [r4, #8]
 80185d8:	1e51      	subs	r1, r2, #1
 80185da:	60a1      	str	r1, [r4, #8]
 80185dc:	b19a      	cbz	r2, 8018606 <_scanf_i+0xba>
 80185de:	6832      	ldr	r2, [r6, #0]
 80185e0:	1c51      	adds	r1, r2, #1
 80185e2:	6031      	str	r1, [r6, #0]
 80185e4:	7812      	ldrb	r2, [r2, #0]
 80185e6:	701a      	strb	r2, [r3, #0]
 80185e8:	1c5d      	adds	r5, r3, #1
 80185ea:	6873      	ldr	r3, [r6, #4]
 80185ec:	3b01      	subs	r3, #1
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	6073      	str	r3, [r6, #4]
 80185f2:	dc07      	bgt.n	8018604 <_scanf_i+0xb8>
 80185f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80185f8:	4631      	mov	r1, r6
 80185fa:	4658      	mov	r0, fp
 80185fc:	4798      	blx	r3
 80185fe:	2800      	cmp	r0, #0
 8018600:	f040 8086 	bne.w	8018710 <_scanf_i+0x1c4>
 8018604:	462b      	mov	r3, r5
 8018606:	f108 0801 	add.w	r8, r8, #1
 801860a:	f1b8 0f03 	cmp.w	r8, #3
 801860e:	d1c8      	bne.n	80185a2 <_scanf_i+0x56>
 8018610:	6862      	ldr	r2, [r4, #4]
 8018612:	b90a      	cbnz	r2, 8018618 <_scanf_i+0xcc>
 8018614:	220a      	movs	r2, #10
 8018616:	6062      	str	r2, [r4, #4]
 8018618:	6862      	ldr	r2, [r4, #4]
 801861a:	4945      	ldr	r1, [pc, #276]	; (8018730 <_scanf_i+0x1e4>)
 801861c:	6960      	ldr	r0, [r4, #20]
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	1a89      	subs	r1, r1, r2
 8018622:	f000 f897 	bl	8018754 <__sccl>
 8018626:	9b01      	ldr	r3, [sp, #4]
 8018628:	f04f 0800 	mov.w	r8, #0
 801862c:	461d      	mov	r5, r3
 801862e:	68a3      	ldr	r3, [r4, #8]
 8018630:	6822      	ldr	r2, [r4, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d03a      	beq.n	80186ac <_scanf_i+0x160>
 8018636:	6831      	ldr	r1, [r6, #0]
 8018638:	6960      	ldr	r0, [r4, #20]
 801863a:	f891 c000 	ldrb.w	ip, [r1]
 801863e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018642:	2800      	cmp	r0, #0
 8018644:	d032      	beq.n	80186ac <_scanf_i+0x160>
 8018646:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801864a:	d121      	bne.n	8018690 <_scanf_i+0x144>
 801864c:	0510      	lsls	r0, r2, #20
 801864e:	d51f      	bpl.n	8018690 <_scanf_i+0x144>
 8018650:	f108 0801 	add.w	r8, r8, #1
 8018654:	b117      	cbz	r7, 801865c <_scanf_i+0x110>
 8018656:	3301      	adds	r3, #1
 8018658:	3f01      	subs	r7, #1
 801865a:	60a3      	str	r3, [r4, #8]
 801865c:	6873      	ldr	r3, [r6, #4]
 801865e:	3b01      	subs	r3, #1
 8018660:	2b00      	cmp	r3, #0
 8018662:	6073      	str	r3, [r6, #4]
 8018664:	dd1b      	ble.n	801869e <_scanf_i+0x152>
 8018666:	6833      	ldr	r3, [r6, #0]
 8018668:	3301      	adds	r3, #1
 801866a:	6033      	str	r3, [r6, #0]
 801866c:	68a3      	ldr	r3, [r4, #8]
 801866e:	3b01      	subs	r3, #1
 8018670:	60a3      	str	r3, [r4, #8]
 8018672:	e7dc      	b.n	801862e <_scanf_i+0xe2>
 8018674:	f1b8 0f02 	cmp.w	r8, #2
 8018678:	d1ad      	bne.n	80185d6 <_scanf_i+0x8a>
 801867a:	6822      	ldr	r2, [r4, #0]
 801867c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018680:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018684:	d1bf      	bne.n	8018606 <_scanf_i+0xba>
 8018686:	2110      	movs	r1, #16
 8018688:	6061      	str	r1, [r4, #4]
 801868a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801868e:	e7a1      	b.n	80185d4 <_scanf_i+0x88>
 8018690:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018694:	6022      	str	r2, [r4, #0]
 8018696:	780b      	ldrb	r3, [r1, #0]
 8018698:	702b      	strb	r3, [r5, #0]
 801869a:	3501      	adds	r5, #1
 801869c:	e7de      	b.n	801865c <_scanf_i+0x110>
 801869e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80186a2:	4631      	mov	r1, r6
 80186a4:	4658      	mov	r0, fp
 80186a6:	4798      	blx	r3
 80186a8:	2800      	cmp	r0, #0
 80186aa:	d0df      	beq.n	801866c <_scanf_i+0x120>
 80186ac:	6823      	ldr	r3, [r4, #0]
 80186ae:	05d9      	lsls	r1, r3, #23
 80186b0:	d50c      	bpl.n	80186cc <_scanf_i+0x180>
 80186b2:	454d      	cmp	r5, r9
 80186b4:	d908      	bls.n	80186c8 <_scanf_i+0x17c>
 80186b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80186ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80186be:	4632      	mov	r2, r6
 80186c0:	4658      	mov	r0, fp
 80186c2:	4798      	blx	r3
 80186c4:	1e6f      	subs	r7, r5, #1
 80186c6:	463d      	mov	r5, r7
 80186c8:	454d      	cmp	r5, r9
 80186ca:	d029      	beq.n	8018720 <_scanf_i+0x1d4>
 80186cc:	6822      	ldr	r2, [r4, #0]
 80186ce:	f012 0210 	ands.w	r2, r2, #16
 80186d2:	d113      	bne.n	80186fc <_scanf_i+0x1b0>
 80186d4:	702a      	strb	r2, [r5, #0]
 80186d6:	6863      	ldr	r3, [r4, #4]
 80186d8:	9e00      	ldr	r6, [sp, #0]
 80186da:	4649      	mov	r1, r9
 80186dc:	4658      	mov	r0, fp
 80186de:	47b0      	blx	r6
 80186e0:	f8da 3000 	ldr.w	r3, [sl]
 80186e4:	6821      	ldr	r1, [r4, #0]
 80186e6:	1d1a      	adds	r2, r3, #4
 80186e8:	f8ca 2000 	str.w	r2, [sl]
 80186ec:	f011 0f20 	tst.w	r1, #32
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	d010      	beq.n	8018716 <_scanf_i+0x1ca>
 80186f4:	6018      	str	r0, [r3, #0]
 80186f6:	68e3      	ldr	r3, [r4, #12]
 80186f8:	3301      	adds	r3, #1
 80186fa:	60e3      	str	r3, [r4, #12]
 80186fc:	eba5 0509 	sub.w	r5, r5, r9
 8018700:	44a8      	add	r8, r5
 8018702:	6925      	ldr	r5, [r4, #16]
 8018704:	4445      	add	r5, r8
 8018706:	6125      	str	r5, [r4, #16]
 8018708:	2000      	movs	r0, #0
 801870a:	b007      	add	sp, #28
 801870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018710:	f04f 0800 	mov.w	r8, #0
 8018714:	e7ca      	b.n	80186ac <_scanf_i+0x160>
 8018716:	07ca      	lsls	r2, r1, #31
 8018718:	bf4c      	ite	mi
 801871a:	8018      	strhmi	r0, [r3, #0]
 801871c:	6018      	strpl	r0, [r3, #0]
 801871e:	e7ea      	b.n	80186f6 <_scanf_i+0x1aa>
 8018720:	2001      	movs	r0, #1
 8018722:	e7f2      	b.n	801870a <_scanf_i+0x1be>
 8018724:	08018e74 	.word	0x08018e74
 8018728:	08016159 	.word	0x08016159
 801872c:	080188d1 	.word	0x080188d1
 8018730:	080190f5 	.word	0x080190f5

08018734 <_sbrk_r>:
 8018734:	b538      	push	{r3, r4, r5, lr}
 8018736:	4c06      	ldr	r4, [pc, #24]	; (8018750 <_sbrk_r+0x1c>)
 8018738:	2300      	movs	r3, #0
 801873a:	4605      	mov	r5, r0
 801873c:	4608      	mov	r0, r1
 801873e:	6023      	str	r3, [r4, #0]
 8018740:	f7ee fffe 	bl	8007740 <_sbrk>
 8018744:	1c43      	adds	r3, r0, #1
 8018746:	d102      	bne.n	801874e <_sbrk_r+0x1a>
 8018748:	6823      	ldr	r3, [r4, #0]
 801874a:	b103      	cbz	r3, 801874e <_sbrk_r+0x1a>
 801874c:	602b      	str	r3, [r5, #0]
 801874e:	bd38      	pop	{r3, r4, r5, pc}
 8018750:	2004cb6c 	.word	0x2004cb6c

08018754 <__sccl>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	780b      	ldrb	r3, [r1, #0]
 8018758:	2b5e      	cmp	r3, #94	; 0x5e
 801875a:	bf13      	iteet	ne
 801875c:	1c4a      	addne	r2, r1, #1
 801875e:	1c8a      	addeq	r2, r1, #2
 8018760:	784b      	ldrbeq	r3, [r1, #1]
 8018762:	2100      	movne	r1, #0
 8018764:	bf08      	it	eq
 8018766:	2101      	moveq	r1, #1
 8018768:	1e44      	subs	r4, r0, #1
 801876a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801876e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018772:	42ac      	cmp	r4, r5
 8018774:	d1fb      	bne.n	801876e <__sccl+0x1a>
 8018776:	b913      	cbnz	r3, 801877e <__sccl+0x2a>
 8018778:	3a01      	subs	r2, #1
 801877a:	4610      	mov	r0, r2
 801877c:	bd70      	pop	{r4, r5, r6, pc}
 801877e:	f081 0401 	eor.w	r4, r1, #1
 8018782:	54c4      	strb	r4, [r0, r3]
 8018784:	1c51      	adds	r1, r2, #1
 8018786:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801878a:	2d2d      	cmp	r5, #45	; 0x2d
 801878c:	f101 36ff 	add.w	r6, r1, #4294967295
 8018790:	460a      	mov	r2, r1
 8018792:	d006      	beq.n	80187a2 <__sccl+0x4e>
 8018794:	2d5d      	cmp	r5, #93	; 0x5d
 8018796:	d0f0      	beq.n	801877a <__sccl+0x26>
 8018798:	b90d      	cbnz	r5, 801879e <__sccl+0x4a>
 801879a:	4632      	mov	r2, r6
 801879c:	e7ed      	b.n	801877a <__sccl+0x26>
 801879e:	462b      	mov	r3, r5
 80187a0:	e7ef      	b.n	8018782 <__sccl+0x2e>
 80187a2:	780e      	ldrb	r6, [r1, #0]
 80187a4:	2e5d      	cmp	r6, #93	; 0x5d
 80187a6:	d0fa      	beq.n	801879e <__sccl+0x4a>
 80187a8:	42b3      	cmp	r3, r6
 80187aa:	dcf8      	bgt.n	801879e <__sccl+0x4a>
 80187ac:	3301      	adds	r3, #1
 80187ae:	429e      	cmp	r6, r3
 80187b0:	54c4      	strb	r4, [r0, r3]
 80187b2:	dcfb      	bgt.n	80187ac <__sccl+0x58>
 80187b4:	3102      	adds	r1, #2
 80187b6:	e7e6      	b.n	8018786 <__sccl+0x32>

080187b8 <strncmp>:
 80187b8:	b510      	push	{r4, lr}
 80187ba:	b16a      	cbz	r2, 80187d8 <strncmp+0x20>
 80187bc:	3901      	subs	r1, #1
 80187be:	1884      	adds	r4, r0, r2
 80187c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80187c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80187c8:	4293      	cmp	r3, r2
 80187ca:	d103      	bne.n	80187d4 <strncmp+0x1c>
 80187cc:	42a0      	cmp	r0, r4
 80187ce:	d001      	beq.n	80187d4 <strncmp+0x1c>
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d1f5      	bne.n	80187c0 <strncmp+0x8>
 80187d4:	1a98      	subs	r0, r3, r2
 80187d6:	bd10      	pop	{r4, pc}
 80187d8:	4610      	mov	r0, r2
 80187da:	e7fc      	b.n	80187d6 <strncmp+0x1e>

080187dc <_strtoul_l.isra.0>:
 80187dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187e0:	4680      	mov	r8, r0
 80187e2:	4689      	mov	r9, r1
 80187e4:	4692      	mov	sl, r2
 80187e6:	461e      	mov	r6, r3
 80187e8:	460f      	mov	r7, r1
 80187ea:	463d      	mov	r5, r7
 80187ec:	9808      	ldr	r0, [sp, #32]
 80187ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187f2:	f7fe fe4f 	bl	8017494 <__locale_ctype_ptr_l>
 80187f6:	4420      	add	r0, r4
 80187f8:	7843      	ldrb	r3, [r0, #1]
 80187fa:	f013 0308 	ands.w	r3, r3, #8
 80187fe:	d130      	bne.n	8018862 <_strtoul_l.isra.0+0x86>
 8018800:	2c2d      	cmp	r4, #45	; 0x2d
 8018802:	d130      	bne.n	8018866 <_strtoul_l.isra.0+0x8a>
 8018804:	787c      	ldrb	r4, [r7, #1]
 8018806:	1cbd      	adds	r5, r7, #2
 8018808:	2101      	movs	r1, #1
 801880a:	2e00      	cmp	r6, #0
 801880c:	d05c      	beq.n	80188c8 <_strtoul_l.isra.0+0xec>
 801880e:	2e10      	cmp	r6, #16
 8018810:	d109      	bne.n	8018826 <_strtoul_l.isra.0+0x4a>
 8018812:	2c30      	cmp	r4, #48	; 0x30
 8018814:	d107      	bne.n	8018826 <_strtoul_l.isra.0+0x4a>
 8018816:	782b      	ldrb	r3, [r5, #0]
 8018818:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801881c:	2b58      	cmp	r3, #88	; 0x58
 801881e:	d14e      	bne.n	80188be <_strtoul_l.isra.0+0xe2>
 8018820:	786c      	ldrb	r4, [r5, #1]
 8018822:	2610      	movs	r6, #16
 8018824:	3502      	adds	r5, #2
 8018826:	f04f 32ff 	mov.w	r2, #4294967295
 801882a:	2300      	movs	r3, #0
 801882c:	fbb2 f2f6 	udiv	r2, r2, r6
 8018830:	fb06 fc02 	mul.w	ip, r6, r2
 8018834:	ea6f 0c0c 	mvn.w	ip, ip
 8018838:	4618      	mov	r0, r3
 801883a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801883e:	2f09      	cmp	r7, #9
 8018840:	d817      	bhi.n	8018872 <_strtoul_l.isra.0+0x96>
 8018842:	463c      	mov	r4, r7
 8018844:	42a6      	cmp	r6, r4
 8018846:	dd23      	ble.n	8018890 <_strtoul_l.isra.0+0xb4>
 8018848:	2b00      	cmp	r3, #0
 801884a:	db1e      	blt.n	801888a <_strtoul_l.isra.0+0xae>
 801884c:	4282      	cmp	r2, r0
 801884e:	d31c      	bcc.n	801888a <_strtoul_l.isra.0+0xae>
 8018850:	d101      	bne.n	8018856 <_strtoul_l.isra.0+0x7a>
 8018852:	45a4      	cmp	ip, r4
 8018854:	db19      	blt.n	801888a <_strtoul_l.isra.0+0xae>
 8018856:	fb00 4006 	mla	r0, r0, r6, r4
 801885a:	2301      	movs	r3, #1
 801885c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018860:	e7eb      	b.n	801883a <_strtoul_l.isra.0+0x5e>
 8018862:	462f      	mov	r7, r5
 8018864:	e7c1      	b.n	80187ea <_strtoul_l.isra.0+0xe>
 8018866:	2c2b      	cmp	r4, #43	; 0x2b
 8018868:	bf04      	itt	eq
 801886a:	1cbd      	addeq	r5, r7, #2
 801886c:	787c      	ldrbeq	r4, [r7, #1]
 801886e:	4619      	mov	r1, r3
 8018870:	e7cb      	b.n	801880a <_strtoul_l.isra.0+0x2e>
 8018872:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018876:	2f19      	cmp	r7, #25
 8018878:	d801      	bhi.n	801887e <_strtoul_l.isra.0+0xa2>
 801887a:	3c37      	subs	r4, #55	; 0x37
 801887c:	e7e2      	b.n	8018844 <_strtoul_l.isra.0+0x68>
 801887e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018882:	2f19      	cmp	r7, #25
 8018884:	d804      	bhi.n	8018890 <_strtoul_l.isra.0+0xb4>
 8018886:	3c57      	subs	r4, #87	; 0x57
 8018888:	e7dc      	b.n	8018844 <_strtoul_l.isra.0+0x68>
 801888a:	f04f 33ff 	mov.w	r3, #4294967295
 801888e:	e7e5      	b.n	801885c <_strtoul_l.isra.0+0x80>
 8018890:	2b00      	cmp	r3, #0
 8018892:	da09      	bge.n	80188a8 <_strtoul_l.isra.0+0xcc>
 8018894:	2322      	movs	r3, #34	; 0x22
 8018896:	f8c8 3000 	str.w	r3, [r8]
 801889a:	f04f 30ff 	mov.w	r0, #4294967295
 801889e:	f1ba 0f00 	cmp.w	sl, #0
 80188a2:	d107      	bne.n	80188b4 <_strtoul_l.isra.0+0xd8>
 80188a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188a8:	b101      	cbz	r1, 80188ac <_strtoul_l.isra.0+0xd0>
 80188aa:	4240      	negs	r0, r0
 80188ac:	f1ba 0f00 	cmp.w	sl, #0
 80188b0:	d0f8      	beq.n	80188a4 <_strtoul_l.isra.0+0xc8>
 80188b2:	b10b      	cbz	r3, 80188b8 <_strtoul_l.isra.0+0xdc>
 80188b4:	f105 39ff 	add.w	r9, r5, #4294967295
 80188b8:	f8ca 9000 	str.w	r9, [sl]
 80188bc:	e7f2      	b.n	80188a4 <_strtoul_l.isra.0+0xc8>
 80188be:	2430      	movs	r4, #48	; 0x30
 80188c0:	2e00      	cmp	r6, #0
 80188c2:	d1b0      	bne.n	8018826 <_strtoul_l.isra.0+0x4a>
 80188c4:	2608      	movs	r6, #8
 80188c6:	e7ae      	b.n	8018826 <_strtoul_l.isra.0+0x4a>
 80188c8:	2c30      	cmp	r4, #48	; 0x30
 80188ca:	d0a4      	beq.n	8018816 <_strtoul_l.isra.0+0x3a>
 80188cc:	260a      	movs	r6, #10
 80188ce:	e7aa      	b.n	8018826 <_strtoul_l.isra.0+0x4a>

080188d0 <_strtoul_r>:
 80188d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188d2:	4c06      	ldr	r4, [pc, #24]	; (80188ec <_strtoul_r+0x1c>)
 80188d4:	4d06      	ldr	r5, [pc, #24]	; (80188f0 <_strtoul_r+0x20>)
 80188d6:	6824      	ldr	r4, [r4, #0]
 80188d8:	6a24      	ldr	r4, [r4, #32]
 80188da:	2c00      	cmp	r4, #0
 80188dc:	bf08      	it	eq
 80188de:	462c      	moveq	r4, r5
 80188e0:	9400      	str	r4, [sp, #0]
 80188e2:	f7ff ff7b 	bl	80187dc <_strtoul_l.isra.0>
 80188e6:	b003      	add	sp, #12
 80188e8:	bd30      	pop	{r4, r5, pc}
 80188ea:	bf00      	nop
 80188ec:	2000000c 	.word	0x2000000c
 80188f0:	20000070 	.word	0x20000070

080188f4 <__submore>:
 80188f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188f8:	460c      	mov	r4, r1
 80188fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80188fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018900:	4299      	cmp	r1, r3
 8018902:	d11d      	bne.n	8018940 <__submore+0x4c>
 8018904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018908:	f7ff fa66 	bl	8017dd8 <_malloc_r>
 801890c:	b918      	cbnz	r0, 8018916 <__submore+0x22>
 801890e:	f04f 30ff 	mov.w	r0, #4294967295
 8018912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801891a:	63a3      	str	r3, [r4, #56]	; 0x38
 801891c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018920:	6360      	str	r0, [r4, #52]	; 0x34
 8018922:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018926:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801892a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801892e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018932:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018936:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801893a:	6020      	str	r0, [r4, #0]
 801893c:	2000      	movs	r0, #0
 801893e:	e7e8      	b.n	8018912 <__submore+0x1e>
 8018940:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018942:	0077      	lsls	r7, r6, #1
 8018944:	463a      	mov	r2, r7
 8018946:	f000 f837 	bl	80189b8 <_realloc_r>
 801894a:	4605      	mov	r5, r0
 801894c:	2800      	cmp	r0, #0
 801894e:	d0de      	beq.n	801890e <__submore+0x1a>
 8018950:	eb00 0806 	add.w	r8, r0, r6
 8018954:	4601      	mov	r1, r0
 8018956:	4632      	mov	r2, r6
 8018958:	4640      	mov	r0, r8
 801895a:	f7fe fdd7 	bl	801750c <memcpy>
 801895e:	f8c4 8000 	str.w	r8, [r4]
 8018962:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018966:	e7e9      	b.n	801893c <__submore+0x48>

08018968 <__ascii_wctomb>:
 8018968:	b149      	cbz	r1, 801897e <__ascii_wctomb+0x16>
 801896a:	2aff      	cmp	r2, #255	; 0xff
 801896c:	bf85      	ittet	hi
 801896e:	238a      	movhi	r3, #138	; 0x8a
 8018970:	6003      	strhi	r3, [r0, #0]
 8018972:	700a      	strbls	r2, [r1, #0]
 8018974:	f04f 30ff 	movhi.w	r0, #4294967295
 8018978:	bf98      	it	ls
 801897a:	2001      	movls	r0, #1
 801897c:	4770      	bx	lr
 801897e:	4608      	mov	r0, r1
 8018980:	4770      	bx	lr

08018982 <memmove>:
 8018982:	4288      	cmp	r0, r1
 8018984:	b510      	push	{r4, lr}
 8018986:	eb01 0302 	add.w	r3, r1, r2
 801898a:	d807      	bhi.n	801899c <memmove+0x1a>
 801898c:	1e42      	subs	r2, r0, #1
 801898e:	4299      	cmp	r1, r3
 8018990:	d00a      	beq.n	80189a8 <memmove+0x26>
 8018992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018996:	f802 4f01 	strb.w	r4, [r2, #1]!
 801899a:	e7f8      	b.n	801898e <memmove+0xc>
 801899c:	4283      	cmp	r3, r0
 801899e:	d9f5      	bls.n	801898c <memmove+0xa>
 80189a0:	1881      	adds	r1, r0, r2
 80189a2:	1ad2      	subs	r2, r2, r3
 80189a4:	42d3      	cmn	r3, r2
 80189a6:	d100      	bne.n	80189aa <memmove+0x28>
 80189a8:	bd10      	pop	{r4, pc}
 80189aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80189ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80189b2:	e7f7      	b.n	80189a4 <memmove+0x22>

080189b4 <__malloc_lock>:
 80189b4:	4770      	bx	lr

080189b6 <__malloc_unlock>:
 80189b6:	4770      	bx	lr

080189b8 <_realloc_r>:
 80189b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ba:	4607      	mov	r7, r0
 80189bc:	4614      	mov	r4, r2
 80189be:	460e      	mov	r6, r1
 80189c0:	b921      	cbnz	r1, 80189cc <_realloc_r+0x14>
 80189c2:	4611      	mov	r1, r2
 80189c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80189c8:	f7ff ba06 	b.w	8017dd8 <_malloc_r>
 80189cc:	b922      	cbnz	r2, 80189d8 <_realloc_r+0x20>
 80189ce:	f7ff f9b5 	bl	8017d3c <_free_r>
 80189d2:	4625      	mov	r5, r4
 80189d4:	4628      	mov	r0, r5
 80189d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189d8:	f000 f814 	bl	8018a04 <_malloc_usable_size_r>
 80189dc:	42a0      	cmp	r0, r4
 80189de:	d20f      	bcs.n	8018a00 <_realloc_r+0x48>
 80189e0:	4621      	mov	r1, r4
 80189e2:	4638      	mov	r0, r7
 80189e4:	f7ff f9f8 	bl	8017dd8 <_malloc_r>
 80189e8:	4605      	mov	r5, r0
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d0f2      	beq.n	80189d4 <_realloc_r+0x1c>
 80189ee:	4631      	mov	r1, r6
 80189f0:	4622      	mov	r2, r4
 80189f2:	f7fe fd8b 	bl	801750c <memcpy>
 80189f6:	4631      	mov	r1, r6
 80189f8:	4638      	mov	r0, r7
 80189fa:	f7ff f99f 	bl	8017d3c <_free_r>
 80189fe:	e7e9      	b.n	80189d4 <_realloc_r+0x1c>
 8018a00:	4635      	mov	r5, r6
 8018a02:	e7e7      	b.n	80189d4 <_realloc_r+0x1c>

08018a04 <_malloc_usable_size_r>:
 8018a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a08:	1f18      	subs	r0, r3, #4
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	bfbc      	itt	lt
 8018a0e:	580b      	ldrlt	r3, [r1, r0]
 8018a10:	18c0      	addlt	r0, r0, r3
 8018a12:	4770      	bx	lr

08018a14 <_init>:
 8018a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a16:	bf00      	nop
 8018a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a1a:	bc08      	pop	{r3}
 8018a1c:	469e      	mov	lr, r3
 8018a1e:	4770      	bx	lr

08018a20 <_fini>:
 8018a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a22:	bf00      	nop
 8018a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a26:	bc08      	pop	{r3}
 8018a28:	469e      	mov	lr, r3
 8018a2a:	4770      	bx	lr
